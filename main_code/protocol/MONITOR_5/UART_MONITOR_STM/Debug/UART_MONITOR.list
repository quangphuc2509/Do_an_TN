
UART_MONITOR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000091d8  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000638  080092e8  080092e8  000192e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009920  08009920  000201d4  2**0
                  CONTENTS
  4 .ARM          00000000  08009920  08009920  000201d4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009920  08009920  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009920  08009920  00019920  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009924  08009924  00019924  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  08009928  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000354  200001d8  08009afc  000201d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000052c  08009afc  0002052c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201fd  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000804b  00000000  00000000  00020240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001886  00000000  00000000  0002828b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000750  00000000  00000000  00029b18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000058a  00000000  00000000  0002a268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017b5e  00000000  00000000  0002a7f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009537  00000000  00000000  00042350  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00084692  00000000  00000000  0004b887  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000033e4  00000000  00000000  000cff1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  000d3300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d8 	.word	0x200001d8
 800012c:	00000000 	.word	0x00000000
 8000130:	080092d0 	.word	0x080092d0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001dc 	.word	0x200001dc
 800014c:	080092d0 	.word	0x080092d0

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_fmul>:
 8000160:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000164:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000168:	bf1e      	ittt	ne
 800016a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800016e:	ea92 0f0c 	teqne	r2, ip
 8000172:	ea93 0f0c 	teqne	r3, ip
 8000176:	d06f      	beq.n	8000258 <__aeabi_fmul+0xf8>
 8000178:	441a      	add	r2, r3
 800017a:	ea80 0c01 	eor.w	ip, r0, r1
 800017e:	0240      	lsls	r0, r0, #9
 8000180:	bf18      	it	ne
 8000182:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000186:	d01e      	beq.n	80001c6 <__aeabi_fmul+0x66>
 8000188:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800018c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000190:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000194:	fba0 3101 	umull	r3, r1, r0, r1
 8000198:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800019c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80001a0:	bf3e      	ittt	cc
 80001a2:	0049      	lslcc	r1, r1, #1
 80001a4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80001a8:	005b      	lslcc	r3, r3, #1
 80001aa:	ea40 0001 	orr.w	r0, r0, r1
 80001ae:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80001b2:	2afd      	cmp	r2, #253	; 0xfd
 80001b4:	d81d      	bhi.n	80001f2 <__aeabi_fmul+0x92>
 80001b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80001ba:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001be:	bf08      	it	eq
 80001c0:	f020 0001 	biceq.w	r0, r0, #1
 80001c4:	4770      	bx	lr
 80001c6:	f090 0f00 	teq	r0, #0
 80001ca:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80001ce:	bf08      	it	eq
 80001d0:	0249      	lsleq	r1, r1, #9
 80001d2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001d6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001da:	3a7f      	subs	r2, #127	; 0x7f
 80001dc:	bfc2      	ittt	gt
 80001de:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80001e2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001e6:	4770      	bxgt	lr
 80001e8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001ec:	f04f 0300 	mov.w	r3, #0
 80001f0:	3a01      	subs	r2, #1
 80001f2:	dc5d      	bgt.n	80002b0 <__aeabi_fmul+0x150>
 80001f4:	f112 0f19 	cmn.w	r2, #25
 80001f8:	bfdc      	itt	le
 80001fa:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80001fe:	4770      	bxle	lr
 8000200:	f1c2 0200 	rsb	r2, r2, #0
 8000204:	0041      	lsls	r1, r0, #1
 8000206:	fa21 f102 	lsr.w	r1, r1, r2
 800020a:	f1c2 0220 	rsb	r2, r2, #32
 800020e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000212:	ea5f 0031 	movs.w	r0, r1, rrx
 8000216:	f140 0000 	adc.w	r0, r0, #0
 800021a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800021e:	bf08      	it	eq
 8000220:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000224:	4770      	bx	lr
 8000226:	f092 0f00 	teq	r2, #0
 800022a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800022e:	bf02      	ittt	eq
 8000230:	0040      	lsleq	r0, r0, #1
 8000232:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000236:	3a01      	subeq	r2, #1
 8000238:	d0f9      	beq.n	800022e <__aeabi_fmul+0xce>
 800023a:	ea40 000c 	orr.w	r0, r0, ip
 800023e:	f093 0f00 	teq	r3, #0
 8000242:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000246:	bf02      	ittt	eq
 8000248:	0049      	lsleq	r1, r1, #1
 800024a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800024e:	3b01      	subeq	r3, #1
 8000250:	d0f9      	beq.n	8000246 <__aeabi_fmul+0xe6>
 8000252:	ea41 010c 	orr.w	r1, r1, ip
 8000256:	e78f      	b.n	8000178 <__aeabi_fmul+0x18>
 8000258:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800025c:	ea92 0f0c 	teq	r2, ip
 8000260:	bf18      	it	ne
 8000262:	ea93 0f0c 	teqne	r3, ip
 8000266:	d00a      	beq.n	800027e <__aeabi_fmul+0x11e>
 8000268:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800026c:	bf18      	it	ne
 800026e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000272:	d1d8      	bne.n	8000226 <__aeabi_fmul+0xc6>
 8000274:	ea80 0001 	eor.w	r0, r0, r1
 8000278:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f090 0f00 	teq	r0, #0
 8000282:	bf17      	itett	ne
 8000284:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000288:	4608      	moveq	r0, r1
 800028a:	f091 0f00 	teqne	r1, #0
 800028e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000292:	d014      	beq.n	80002be <__aeabi_fmul+0x15e>
 8000294:	ea92 0f0c 	teq	r2, ip
 8000298:	d101      	bne.n	800029e <__aeabi_fmul+0x13e>
 800029a:	0242      	lsls	r2, r0, #9
 800029c:	d10f      	bne.n	80002be <__aeabi_fmul+0x15e>
 800029e:	ea93 0f0c 	teq	r3, ip
 80002a2:	d103      	bne.n	80002ac <__aeabi_fmul+0x14c>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	bf18      	it	ne
 80002a8:	4608      	movne	r0, r1
 80002aa:	d108      	bne.n	80002be <__aeabi_fmul+0x15e>
 80002ac:	ea80 0001 	eor.w	r0, r0, r1
 80002b0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002b4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002b8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002bc:	4770      	bx	lr
 80002be:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002c2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80002c6:	4770      	bx	lr

080002c8 <__aeabi_drsub>:
 80002c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002cc:	e002      	b.n	80002d4 <__adddf3>
 80002ce:	bf00      	nop

080002d0 <__aeabi_dsub>:
 80002d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002d4 <__adddf3>:
 80002d4:	b530      	push	{r4, r5, lr}
 80002d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002de:	ea94 0f05 	teq	r4, r5
 80002e2:	bf08      	it	eq
 80002e4:	ea90 0f02 	teqeq	r0, r2
 80002e8:	bf1f      	itttt	ne
 80002ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002fa:	f000 80e2 	beq.w	80004c2 <__adddf3+0x1ee>
 80002fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000302:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000306:	bfb8      	it	lt
 8000308:	426d      	neglt	r5, r5
 800030a:	dd0c      	ble.n	8000326 <__adddf3+0x52>
 800030c:	442c      	add	r4, r5
 800030e:	ea80 0202 	eor.w	r2, r0, r2
 8000312:	ea81 0303 	eor.w	r3, r1, r3
 8000316:	ea82 0000 	eor.w	r0, r2, r0
 800031a:	ea83 0101 	eor.w	r1, r3, r1
 800031e:	ea80 0202 	eor.w	r2, r0, r2
 8000322:	ea81 0303 	eor.w	r3, r1, r3
 8000326:	2d36      	cmp	r5, #54	; 0x36
 8000328:	bf88      	it	hi
 800032a:	bd30      	pophi	{r4, r5, pc}
 800032c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000330:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000334:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000338:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800033c:	d002      	beq.n	8000344 <__adddf3+0x70>
 800033e:	4240      	negs	r0, r0
 8000340:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000344:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000348:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800034c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000350:	d002      	beq.n	8000358 <__adddf3+0x84>
 8000352:	4252      	negs	r2, r2
 8000354:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000358:	ea94 0f05 	teq	r4, r5
 800035c:	f000 80a7 	beq.w	80004ae <__adddf3+0x1da>
 8000360:	f1a4 0401 	sub.w	r4, r4, #1
 8000364:	f1d5 0e20 	rsbs	lr, r5, #32
 8000368:	db0d      	blt.n	8000386 <__adddf3+0xb2>
 800036a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800036e:	fa22 f205 	lsr.w	r2, r2, r5
 8000372:	1880      	adds	r0, r0, r2
 8000374:	f141 0100 	adc.w	r1, r1, #0
 8000378:	fa03 f20e 	lsl.w	r2, r3, lr
 800037c:	1880      	adds	r0, r0, r2
 800037e:	fa43 f305 	asr.w	r3, r3, r5
 8000382:	4159      	adcs	r1, r3
 8000384:	e00e      	b.n	80003a4 <__adddf3+0xd0>
 8000386:	f1a5 0520 	sub.w	r5, r5, #32
 800038a:	f10e 0e20 	add.w	lr, lr, #32
 800038e:	2a01      	cmp	r2, #1
 8000390:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000394:	bf28      	it	cs
 8000396:	f04c 0c02 	orrcs.w	ip, ip, #2
 800039a:	fa43 f305 	asr.w	r3, r3, r5
 800039e:	18c0      	adds	r0, r0, r3
 80003a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a8:	d507      	bpl.n	80003ba <__adddf3+0xe6>
 80003aa:	f04f 0e00 	mov.w	lr, #0
 80003ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80003b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003be:	d31b      	bcc.n	80003f8 <__adddf3+0x124>
 80003c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003c4:	d30c      	bcc.n	80003e0 <__adddf3+0x10c>
 80003c6:	0849      	lsrs	r1, r1, #1
 80003c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d0:	f104 0401 	add.w	r4, r4, #1
 80003d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003dc:	f080 809a 	bcs.w	8000514 <__adddf3+0x240>
 80003e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003e4:	bf08      	it	eq
 80003e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003ea:	f150 0000 	adcs.w	r0, r0, #0
 80003ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003f2:	ea41 0105 	orr.w	r1, r1, r5
 80003f6:	bd30      	pop	{r4, r5, pc}
 80003f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003fc:	4140      	adcs	r0, r0
 80003fe:	eb41 0101 	adc.w	r1, r1, r1
 8000402:	3c01      	subs	r4, #1
 8000404:	bf28      	it	cs
 8000406:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800040a:	d2e9      	bcs.n	80003e0 <__adddf3+0x10c>
 800040c:	f091 0f00 	teq	r1, #0
 8000410:	bf04      	itt	eq
 8000412:	4601      	moveq	r1, r0
 8000414:	2000      	moveq	r0, #0
 8000416:	fab1 f381 	clz	r3, r1
 800041a:	bf08      	it	eq
 800041c:	3320      	addeq	r3, #32
 800041e:	f1a3 030b 	sub.w	r3, r3, #11
 8000422:	f1b3 0220 	subs.w	r2, r3, #32
 8000426:	da0c      	bge.n	8000442 <__adddf3+0x16e>
 8000428:	320c      	adds	r2, #12
 800042a:	dd08      	ble.n	800043e <__adddf3+0x16a>
 800042c:	f102 0c14 	add.w	ip, r2, #20
 8000430:	f1c2 020c 	rsb	r2, r2, #12
 8000434:	fa01 f00c 	lsl.w	r0, r1, ip
 8000438:	fa21 f102 	lsr.w	r1, r1, r2
 800043c:	e00c      	b.n	8000458 <__adddf3+0x184>
 800043e:	f102 0214 	add.w	r2, r2, #20
 8000442:	bfd8      	it	le
 8000444:	f1c2 0c20 	rsble	ip, r2, #32
 8000448:	fa01 f102 	lsl.w	r1, r1, r2
 800044c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000450:	bfdc      	itt	le
 8000452:	ea41 010c 	orrle.w	r1, r1, ip
 8000456:	4090      	lslle	r0, r2
 8000458:	1ae4      	subs	r4, r4, r3
 800045a:	bfa2      	ittt	ge
 800045c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000460:	4329      	orrge	r1, r5
 8000462:	bd30      	popge	{r4, r5, pc}
 8000464:	ea6f 0404 	mvn.w	r4, r4
 8000468:	3c1f      	subs	r4, #31
 800046a:	da1c      	bge.n	80004a6 <__adddf3+0x1d2>
 800046c:	340c      	adds	r4, #12
 800046e:	dc0e      	bgt.n	800048e <__adddf3+0x1ba>
 8000470:	f104 0414 	add.w	r4, r4, #20
 8000474:	f1c4 0220 	rsb	r2, r4, #32
 8000478:	fa20 f004 	lsr.w	r0, r0, r4
 800047c:	fa01 f302 	lsl.w	r3, r1, r2
 8000480:	ea40 0003 	orr.w	r0, r0, r3
 8000484:	fa21 f304 	lsr.w	r3, r1, r4
 8000488:	ea45 0103 	orr.w	r1, r5, r3
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	f1c4 040c 	rsb	r4, r4, #12
 8000492:	f1c4 0220 	rsb	r2, r4, #32
 8000496:	fa20 f002 	lsr.w	r0, r0, r2
 800049a:	fa01 f304 	lsl.w	r3, r1, r4
 800049e:	ea40 0003 	orr.w	r0, r0, r3
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	fa21 f004 	lsr.w	r0, r1, r4
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	f094 0f00 	teq	r4, #0
 80004b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004b6:	bf06      	itte	eq
 80004b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004bc:	3401      	addeq	r4, #1
 80004be:	3d01      	subne	r5, #1
 80004c0:	e74e      	b.n	8000360 <__adddf3+0x8c>
 80004c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004c6:	bf18      	it	ne
 80004c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004cc:	d029      	beq.n	8000522 <__adddf3+0x24e>
 80004ce:	ea94 0f05 	teq	r4, r5
 80004d2:	bf08      	it	eq
 80004d4:	ea90 0f02 	teqeq	r0, r2
 80004d8:	d005      	beq.n	80004e6 <__adddf3+0x212>
 80004da:	ea54 0c00 	orrs.w	ip, r4, r0
 80004de:	bf04      	itt	eq
 80004e0:	4619      	moveq	r1, r3
 80004e2:	4610      	moveq	r0, r2
 80004e4:	bd30      	pop	{r4, r5, pc}
 80004e6:	ea91 0f03 	teq	r1, r3
 80004ea:	bf1e      	ittt	ne
 80004ec:	2100      	movne	r1, #0
 80004ee:	2000      	movne	r0, #0
 80004f0:	bd30      	popne	{r4, r5, pc}
 80004f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004f6:	d105      	bne.n	8000504 <__adddf3+0x230>
 80004f8:	0040      	lsls	r0, r0, #1
 80004fa:	4149      	adcs	r1, r1
 80004fc:	bf28      	it	cs
 80004fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000502:	bd30      	pop	{r4, r5, pc}
 8000504:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000508:	bf3c      	itt	cc
 800050a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800050e:	bd30      	popcc	{r4, r5, pc}
 8000510:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000514:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000518:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800051c:	f04f 0000 	mov.w	r0, #0
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000526:	bf1a      	itte	ne
 8000528:	4619      	movne	r1, r3
 800052a:	4610      	movne	r0, r2
 800052c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000530:	bf1c      	itt	ne
 8000532:	460b      	movne	r3, r1
 8000534:	4602      	movne	r2, r0
 8000536:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800053a:	bf06      	itte	eq
 800053c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000540:	ea91 0f03 	teqeq	r1, r3
 8000544:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	bf00      	nop

0800054c <__aeabi_ui2d>:
 800054c:	f090 0f00 	teq	r0, #0
 8000550:	bf04      	itt	eq
 8000552:	2100      	moveq	r1, #0
 8000554:	4770      	bxeq	lr
 8000556:	b530      	push	{r4, r5, lr}
 8000558:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800055c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000560:	f04f 0500 	mov.w	r5, #0
 8000564:	f04f 0100 	mov.w	r1, #0
 8000568:	e750      	b.n	800040c <__adddf3+0x138>
 800056a:	bf00      	nop

0800056c <__aeabi_i2d>:
 800056c:	f090 0f00 	teq	r0, #0
 8000570:	bf04      	itt	eq
 8000572:	2100      	moveq	r1, #0
 8000574:	4770      	bxeq	lr
 8000576:	b530      	push	{r4, r5, lr}
 8000578:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800057c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000580:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000584:	bf48      	it	mi
 8000586:	4240      	negmi	r0, r0
 8000588:	f04f 0100 	mov.w	r1, #0
 800058c:	e73e      	b.n	800040c <__adddf3+0x138>
 800058e:	bf00      	nop

08000590 <__aeabi_f2d>:
 8000590:	0042      	lsls	r2, r0, #1
 8000592:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000596:	ea4f 0131 	mov.w	r1, r1, rrx
 800059a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800059e:	bf1f      	itttt	ne
 80005a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005ac:	4770      	bxne	lr
 80005ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005b2:	bf08      	it	eq
 80005b4:	4770      	bxeq	lr
 80005b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005ba:	bf04      	itt	eq
 80005bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c0:	4770      	bxeq	lr
 80005c2:	b530      	push	{r4, r5, lr}
 80005c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d0:	e71c      	b.n	800040c <__adddf3+0x138>
 80005d2:	bf00      	nop

080005d4 <__aeabi_ul2d>:
 80005d4:	ea50 0201 	orrs.w	r2, r0, r1
 80005d8:	bf08      	it	eq
 80005da:	4770      	bxeq	lr
 80005dc:	b530      	push	{r4, r5, lr}
 80005de:	f04f 0500 	mov.w	r5, #0
 80005e2:	e00a      	b.n	80005fa <__aeabi_l2d+0x16>

080005e4 <__aeabi_l2d>:
 80005e4:	ea50 0201 	orrs.w	r2, r0, r1
 80005e8:	bf08      	it	eq
 80005ea:	4770      	bxeq	lr
 80005ec:	b530      	push	{r4, r5, lr}
 80005ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005f2:	d502      	bpl.n	80005fa <__aeabi_l2d+0x16>
 80005f4:	4240      	negs	r0, r0
 80005f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000602:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000606:	f43f aed8 	beq.w	80003ba <__adddf3+0xe6>
 800060a:	f04f 0203 	mov.w	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000622:	f1c2 0320 	rsb	r3, r2, #32
 8000626:	fa00 fc03 	lsl.w	ip, r0, r3
 800062a:	fa20 f002 	lsr.w	r0, r0, r2
 800062e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000632:	ea40 000e 	orr.w	r0, r0, lr
 8000636:	fa21 f102 	lsr.w	r1, r1, r2
 800063a:	4414      	add	r4, r2
 800063c:	e6bd      	b.n	80003ba <__adddf3+0xe6>
 800063e:	bf00      	nop

08000640 <__aeabi_dmul>:
 8000640:	b570      	push	{r4, r5, r6, lr}
 8000642:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000646:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800064a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800064e:	bf1d      	ittte	ne
 8000650:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000654:	ea94 0f0c 	teqne	r4, ip
 8000658:	ea95 0f0c 	teqne	r5, ip
 800065c:	f000 f8de 	bleq	800081c <__aeabi_dmul+0x1dc>
 8000660:	442c      	add	r4, r5
 8000662:	ea81 0603 	eor.w	r6, r1, r3
 8000666:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800066a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800066e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000672:	bf18      	it	ne
 8000674:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000678:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800067c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000680:	d038      	beq.n	80006f4 <__aeabi_dmul+0xb4>
 8000682:	fba0 ce02 	umull	ip, lr, r0, r2
 8000686:	f04f 0500 	mov.w	r5, #0
 800068a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800068e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000692:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000696:	f04f 0600 	mov.w	r6, #0
 800069a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800069e:	f09c 0f00 	teq	ip, #0
 80006a2:	bf18      	it	ne
 80006a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006b4:	d204      	bcs.n	80006c0 <__aeabi_dmul+0x80>
 80006b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006ba:	416d      	adcs	r5, r5
 80006bc:	eb46 0606 	adc.w	r6, r6, r6
 80006c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d8:	bf88      	it	hi
 80006da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006de:	d81e      	bhi.n	800071e <__aeabi_dmul+0xde>
 80006e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006e4:	bf08      	it	eq
 80006e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006ea:	f150 0000 	adcs.w	r0, r0, #0
 80006ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f8:	ea46 0101 	orr.w	r1, r6, r1
 80006fc:	ea40 0002 	orr.w	r0, r0, r2
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000708:	bfc2      	ittt	gt
 800070a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800070e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000712:	bd70      	popgt	{r4, r5, r6, pc}
 8000714:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000718:	f04f 0e00 	mov.w	lr, #0
 800071c:	3c01      	subs	r4, #1
 800071e:	f300 80ab 	bgt.w	8000878 <__aeabi_dmul+0x238>
 8000722:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000726:	bfde      	ittt	le
 8000728:	2000      	movle	r0, #0
 800072a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800072e:	bd70      	pople	{r4, r5, r6, pc}
 8000730:	f1c4 0400 	rsb	r4, r4, #0
 8000734:	3c20      	subs	r4, #32
 8000736:	da35      	bge.n	80007a4 <__aeabi_dmul+0x164>
 8000738:	340c      	adds	r4, #12
 800073a:	dc1b      	bgt.n	8000774 <__aeabi_dmul+0x134>
 800073c:	f104 0414 	add.w	r4, r4, #20
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f305 	lsl.w	r3, r0, r5
 8000748:	fa20 f004 	lsr.w	r0, r0, r4
 800074c:	fa01 f205 	lsl.w	r2, r1, r5
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000758:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800075c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000760:	fa21 f604 	lsr.w	r6, r1, r4
 8000764:	eb42 0106 	adc.w	r1, r2, r6
 8000768:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800076c:	bf08      	it	eq
 800076e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000772:	bd70      	pop	{r4, r5, r6, pc}
 8000774:	f1c4 040c 	rsb	r4, r4, #12
 8000778:	f1c4 0520 	rsb	r5, r4, #32
 800077c:	fa00 f304 	lsl.w	r3, r0, r4
 8000780:	fa20 f005 	lsr.w	r0, r0, r5
 8000784:	fa01 f204 	lsl.w	r2, r1, r4
 8000788:	ea40 0002 	orr.w	r0, r0, r2
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000794:	f141 0100 	adc.w	r1, r1, #0
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f1c4 0520 	rsb	r5, r4, #32
 80007a8:	fa00 f205 	lsl.w	r2, r0, r5
 80007ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b0:	fa20 f304 	lsr.w	r3, r0, r4
 80007b4:	fa01 f205 	lsl.w	r2, r1, r5
 80007b8:	ea43 0302 	orr.w	r3, r3, r2
 80007bc:	fa21 f004 	lsr.w	r0, r1, r4
 80007c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007c4:	fa21 f204 	lsr.w	r2, r1, r4
 80007c8:	ea20 0002 	bic.w	r0, r0, r2
 80007cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007d4:	bf08      	it	eq
 80007d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007da:	bd70      	pop	{r4, r5, r6, pc}
 80007dc:	f094 0f00 	teq	r4, #0
 80007e0:	d10f      	bne.n	8000802 <__aeabi_dmul+0x1c2>
 80007e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007e6:	0040      	lsls	r0, r0, #1
 80007e8:	eb41 0101 	adc.w	r1, r1, r1
 80007ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f0:	bf08      	it	eq
 80007f2:	3c01      	subeq	r4, #1
 80007f4:	d0f7      	beq.n	80007e6 <__aeabi_dmul+0x1a6>
 80007f6:	ea41 0106 	orr.w	r1, r1, r6
 80007fa:	f095 0f00 	teq	r5, #0
 80007fe:	bf18      	it	ne
 8000800:	4770      	bxne	lr
 8000802:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000806:	0052      	lsls	r2, r2, #1
 8000808:	eb43 0303 	adc.w	r3, r3, r3
 800080c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000810:	bf08      	it	eq
 8000812:	3d01      	subeq	r5, #1
 8000814:	d0f7      	beq.n	8000806 <__aeabi_dmul+0x1c6>
 8000816:	ea43 0306 	orr.w	r3, r3, r6
 800081a:	4770      	bx	lr
 800081c:	ea94 0f0c 	teq	r4, ip
 8000820:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000824:	bf18      	it	ne
 8000826:	ea95 0f0c 	teqne	r5, ip
 800082a:	d00c      	beq.n	8000846 <__aeabi_dmul+0x206>
 800082c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000830:	bf18      	it	ne
 8000832:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000836:	d1d1      	bne.n	80007dc <__aeabi_dmul+0x19c>
 8000838:	ea81 0103 	eor.w	r1, r1, r3
 800083c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000840:	f04f 0000 	mov.w	r0, #0
 8000844:	bd70      	pop	{r4, r5, r6, pc}
 8000846:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800084a:	bf06      	itte	eq
 800084c:	4610      	moveq	r0, r2
 800084e:	4619      	moveq	r1, r3
 8000850:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000854:	d019      	beq.n	800088a <__aeabi_dmul+0x24a>
 8000856:	ea94 0f0c 	teq	r4, ip
 800085a:	d102      	bne.n	8000862 <__aeabi_dmul+0x222>
 800085c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000860:	d113      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000862:	ea95 0f0c 	teq	r5, ip
 8000866:	d105      	bne.n	8000874 <__aeabi_dmul+0x234>
 8000868:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800086c:	bf1c      	itt	ne
 800086e:	4610      	movne	r0, r2
 8000870:	4619      	movne	r1, r3
 8000872:	d10a      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000874:	ea81 0103 	eor.w	r1, r1, r3
 8000878:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800087c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000880:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000884:	f04f 0000 	mov.w	r0, #0
 8000888:	bd70      	pop	{r4, r5, r6, pc}
 800088a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800088e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000892:	bd70      	pop	{r4, r5, r6, pc}

08000894 <__aeabi_ddiv>:
 8000894:	b570      	push	{r4, r5, r6, lr}
 8000896:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800089a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800089e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008a2:	bf1d      	ittte	ne
 80008a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a8:	ea94 0f0c 	teqne	r4, ip
 80008ac:	ea95 0f0c 	teqne	r5, ip
 80008b0:	f000 f8a7 	bleq	8000a02 <__aeabi_ddiv+0x16e>
 80008b4:	eba4 0405 	sub.w	r4, r4, r5
 80008b8:	ea81 0e03 	eor.w	lr, r1, r3
 80008bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008c4:	f000 8088 	beq.w	80009d8 <__aeabi_ddiv+0x144>
 80008c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008ec:	429d      	cmp	r5, r3
 80008ee:	bf08      	it	eq
 80008f0:	4296      	cmpeq	r6, r2
 80008f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008fa:	d202      	bcs.n	8000902 <__aeabi_ddiv+0x6e>
 80008fc:	085b      	lsrs	r3, r3, #1
 80008fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000902:	1ab6      	subs	r6, r6, r2
 8000904:	eb65 0503 	sbc.w	r5, r5, r3
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000912:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 000c 	orrcs.w	r0, r0, ip
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000970:	ea55 0e06 	orrs.w	lr, r5, r6
 8000974:	d018      	beq.n	80009a8 <__aeabi_ddiv+0x114>
 8000976:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800097a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800097e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000982:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000986:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800098a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800098e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000992:	d1c0      	bne.n	8000916 <__aeabi_ddiv+0x82>
 8000994:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000998:	d10b      	bne.n	80009b2 <__aeabi_ddiv+0x11e>
 800099a:	ea41 0100 	orr.w	r1, r1, r0
 800099e:	f04f 0000 	mov.w	r0, #0
 80009a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009a6:	e7b6      	b.n	8000916 <__aeabi_ddiv+0x82>
 80009a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009ac:	bf04      	itt	eq
 80009ae:	4301      	orreq	r1, r0
 80009b0:	2000      	moveq	r0, #0
 80009b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009b6:	bf88      	it	hi
 80009b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009bc:	f63f aeaf 	bhi.w	800071e <__aeabi_dmul+0xde>
 80009c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009c4:	bf04      	itt	eq
 80009c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009ce:	f150 0000 	adcs.w	r0, r0, #0
 80009d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	pop	{r4, r5, r6, pc}
 80009d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009e4:	bfc2      	ittt	gt
 80009e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	popgt	{r4, r5, r6, pc}
 80009f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009f4:	f04f 0e00 	mov.w	lr, #0
 80009f8:	3c01      	subs	r4, #1
 80009fa:	e690      	b.n	800071e <__aeabi_dmul+0xde>
 80009fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000a00:	e68d      	b.n	800071e <__aeabi_dmul+0xde>
 8000a02:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a06:	ea94 0f0c 	teq	r4, ip
 8000a0a:	bf08      	it	eq
 8000a0c:	ea95 0f0c 	teqeq	r5, ip
 8000a10:	f43f af3b 	beq.w	800088a <__aeabi_dmul+0x24a>
 8000a14:	ea94 0f0c 	teq	r4, ip
 8000a18:	d10a      	bne.n	8000a30 <__aeabi_ddiv+0x19c>
 8000a1a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a1e:	f47f af34 	bne.w	800088a <__aeabi_dmul+0x24a>
 8000a22:	ea95 0f0c 	teq	r5, ip
 8000a26:	f47f af25 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a2a:	4610      	mov	r0, r2
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	e72c      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a30:	ea95 0f0c 	teq	r5, ip
 8000a34:	d106      	bne.n	8000a44 <__aeabi_ddiv+0x1b0>
 8000a36:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a3a:	f43f aefd 	beq.w	8000838 <__aeabi_dmul+0x1f8>
 8000a3e:	4610      	mov	r0, r2
 8000a40:	4619      	mov	r1, r3
 8000a42:	e722      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a44:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a48:	bf18      	it	ne
 8000a4a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a4e:	f47f aec5 	bne.w	80007dc <__aeabi_dmul+0x19c>
 8000a52:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a56:	f47f af0d 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a5a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a5e:	f47f aeeb 	bne.w	8000838 <__aeabi_dmul+0x1f8>
 8000a62:	e712      	b.n	800088a <__aeabi_dmul+0x24a>

08000a64 <__gedf2>:
 8000a64:	f04f 3cff 	mov.w	ip, #4294967295
 8000a68:	e006      	b.n	8000a78 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__ledf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	e002      	b.n	8000a78 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__cmpdf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	bf18      	it	ne
 8000a8a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a8e:	d01b      	beq.n	8000ac8 <__cmpdf2+0x54>
 8000a90:	b001      	add	sp, #4
 8000a92:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a96:	bf0c      	ite	eq
 8000a98:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a9c:	ea91 0f03 	teqne	r1, r3
 8000aa0:	bf02      	ittt	eq
 8000aa2:	ea90 0f02 	teqeq	r0, r2
 8000aa6:	2000      	moveq	r0, #0
 8000aa8:	4770      	bxeq	lr
 8000aaa:	f110 0f00 	cmn.w	r0, #0
 8000aae:	ea91 0f03 	teq	r1, r3
 8000ab2:	bf58      	it	pl
 8000ab4:	4299      	cmppl	r1, r3
 8000ab6:	bf08      	it	eq
 8000ab8:	4290      	cmpeq	r0, r2
 8000aba:	bf2c      	ite	cs
 8000abc:	17d8      	asrcs	r0, r3, #31
 8000abe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ac2:	f040 0001 	orr.w	r0, r0, #1
 8000ac6:	4770      	bx	lr
 8000ac8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000acc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad0:	d102      	bne.n	8000ad8 <__cmpdf2+0x64>
 8000ad2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad6:	d107      	bne.n	8000ae8 <__cmpdf2+0x74>
 8000ad8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000adc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae0:	d1d6      	bne.n	8000a90 <__cmpdf2+0x1c>
 8000ae2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae6:	d0d3      	beq.n	8000a90 <__cmpdf2+0x1c>
 8000ae8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop

08000af0 <__aeabi_cdrcmple>:
 8000af0:	4684      	mov	ip, r0
 8000af2:	4610      	mov	r0, r2
 8000af4:	4662      	mov	r2, ip
 8000af6:	468c      	mov	ip, r1
 8000af8:	4619      	mov	r1, r3
 8000afa:	4663      	mov	r3, ip
 8000afc:	e000      	b.n	8000b00 <__aeabi_cdcmpeq>
 8000afe:	bf00      	nop

08000b00 <__aeabi_cdcmpeq>:
 8000b00:	b501      	push	{r0, lr}
 8000b02:	f7ff ffb7 	bl	8000a74 <__cmpdf2>
 8000b06:	2800      	cmp	r0, #0
 8000b08:	bf48      	it	mi
 8000b0a:	f110 0f00 	cmnmi.w	r0, #0
 8000b0e:	bd01      	pop	{r0, pc}

08000b10 <__aeabi_dcmpeq>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff fff4 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b18:	bf0c      	ite	eq
 8000b1a:	2001      	moveq	r0, #1
 8000b1c:	2000      	movne	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmplt>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffea 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b2c:	bf34      	ite	cc
 8000b2e:	2001      	movcc	r0, #1
 8000b30:	2000      	movcs	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmple>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffe0 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b40:	bf94      	ite	ls
 8000b42:	2001      	movls	r0, #1
 8000b44:	2000      	movhi	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpge>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffce 	bl	8000af0 <__aeabi_cdrcmple>
 8000b54:	bf94      	ite	ls
 8000b56:	2001      	movls	r0, #1
 8000b58:	2000      	movhi	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmpgt>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffc4 	bl	8000af0 <__aeabi_cdrcmple>
 8000b68:	bf34      	ite	cc
 8000b6a:	2001      	movcc	r0, #1
 8000b6c:	2000      	movcs	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpun>:
 8000b74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b7c:	d102      	bne.n	8000b84 <__aeabi_dcmpun+0x10>
 8000b7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b82:	d10a      	bne.n	8000b9a <__aeabi_dcmpun+0x26>
 8000b84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b8c:	d102      	bne.n	8000b94 <__aeabi_dcmpun+0x20>
 8000b8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b92:	d102      	bne.n	8000b9a <__aeabi_dcmpun+0x26>
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	f04f 0001 	mov.w	r0, #1
 8000b9e:	4770      	bx	lr

08000ba0 <__aeabi_d2iz>:
 8000ba0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba8:	d215      	bcs.n	8000bd6 <__aeabi_d2iz+0x36>
 8000baa:	d511      	bpl.n	8000bd0 <__aeabi_d2iz+0x30>
 8000bac:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bb4:	d912      	bls.n	8000bdc <__aeabi_d2iz+0x3c>
 8000bb6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bbe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bc2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bc6:	fa23 f002 	lsr.w	r0, r3, r2
 8000bca:	bf18      	it	ne
 8000bcc:	4240      	negne	r0, r0
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d105      	bne.n	8000be8 <__aeabi_d2iz+0x48>
 8000bdc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be0:	bf08      	it	eq
 8000be2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop

08000bf0 <__aeabi_d2uiz>:
 8000bf0:	004a      	lsls	r2, r1, #1
 8000bf2:	d211      	bcs.n	8000c18 <__aeabi_d2uiz+0x28>
 8000bf4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf8:	d211      	bcs.n	8000c1e <__aeabi_d2uiz+0x2e>
 8000bfa:	d50d      	bpl.n	8000c18 <__aeabi_d2uiz+0x28>
 8000bfc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c00:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c04:	d40e      	bmi.n	8000c24 <__aeabi_d2uiz+0x34>
 8000c06:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c0e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c12:	fa23 f002 	lsr.w	r0, r3, r2
 8000c16:	4770      	bx	lr
 8000c18:	f04f 0000 	mov.w	r0, #0
 8000c1c:	4770      	bx	lr
 8000c1e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c22:	d102      	bne.n	8000c2a <__aeabi_d2uiz+0x3a>
 8000c24:	f04f 30ff 	mov.w	r0, #4294967295
 8000c28:	4770      	bx	lr
 8000c2a:	f04f 0000 	mov.w	r0, #0
 8000c2e:	4770      	bx	lr

08000c30 <__aeabi_d2f>:
 8000c30:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c34:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c38:	bf24      	itt	cs
 8000c3a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c3e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c42:	d90d      	bls.n	8000c60 <__aeabi_d2f+0x30>
 8000c44:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c48:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c4c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c50:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c54:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c58:	bf08      	it	eq
 8000c5a:	f020 0001 	biceq.w	r0, r0, #1
 8000c5e:	4770      	bx	lr
 8000c60:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c64:	d121      	bne.n	8000caa <__aeabi_d2f+0x7a>
 8000c66:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c6a:	bfbc      	itt	lt
 8000c6c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c70:	4770      	bxlt	lr
 8000c72:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c76:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c7a:	f1c2 0218 	rsb	r2, r2, #24
 8000c7e:	f1c2 0c20 	rsb	ip, r2, #32
 8000c82:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c86:	fa20 f002 	lsr.w	r0, r0, r2
 8000c8a:	bf18      	it	ne
 8000c8c:	f040 0001 	orrne.w	r0, r0, #1
 8000c90:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c94:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c98:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c9c:	ea40 000c 	orr.w	r0, r0, ip
 8000ca0:	fa23 f302 	lsr.w	r3, r3, r2
 8000ca4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca8:	e7cc      	b.n	8000c44 <__aeabi_d2f+0x14>
 8000caa:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cae:	d107      	bne.n	8000cc0 <__aeabi_d2f+0x90>
 8000cb0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cb4:	bf1e      	ittt	ne
 8000cb6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cba:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cbe:	4770      	bxne	lr
 8000cc0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cc4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop

08000cd0 <__aeabi_f2iz>:
 8000cd0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000cd4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000cd8:	d30f      	bcc.n	8000cfa <__aeabi_f2iz+0x2a>
 8000cda:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000cde:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000ce2:	d90d      	bls.n	8000d00 <__aeabi_f2iz+0x30>
 8000ce4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000ce8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000cec:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000cf0:	fa23 f002 	lsr.w	r0, r3, r2
 8000cf4:	bf18      	it	ne
 8000cf6:	4240      	negne	r0, r0
 8000cf8:	4770      	bx	lr
 8000cfa:	f04f 0000 	mov.w	r0, #0
 8000cfe:	4770      	bx	lr
 8000d00:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000d04:	d101      	bne.n	8000d0a <__aeabi_f2iz+0x3a>
 8000d06:	0242      	lsls	r2, r0, #9
 8000d08:	d105      	bne.n	8000d16 <__aeabi_f2iz+0x46>
 8000d0a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000d0e:	bf08      	it	eq
 8000d10:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000d14:	4770      	bx	lr
 8000d16:	f04f 0000 	mov.w	r0, #0
 8000d1a:	4770      	bx	lr

08000d1c <__aeabi_d2lz>:
 8000d1c:	b538      	push	{r3, r4, r5, lr}
 8000d1e:	4605      	mov	r5, r0
 8000d20:	460c      	mov	r4, r1
 8000d22:	2200      	movs	r2, #0
 8000d24:	2300      	movs	r3, #0
 8000d26:	4628      	mov	r0, r5
 8000d28:	4621      	mov	r1, r4
 8000d2a:	f7ff fefb 	bl	8000b24 <__aeabi_dcmplt>
 8000d2e:	b928      	cbnz	r0, 8000d3c <__aeabi_d2lz+0x20>
 8000d30:	4628      	mov	r0, r5
 8000d32:	4621      	mov	r1, r4
 8000d34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d38:	f000 b80a 	b.w	8000d50 <__aeabi_d2ulz>
 8000d3c:	4628      	mov	r0, r5
 8000d3e:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000d42:	f000 f805 	bl	8000d50 <__aeabi_d2ulz>
 8000d46:	4240      	negs	r0, r0
 8000d48:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d4c:	bd38      	pop	{r3, r4, r5, pc}
 8000d4e:	bf00      	nop

08000d50 <__aeabi_d2ulz>:
 8000d50:	b5d0      	push	{r4, r6, r7, lr}
 8000d52:	2200      	movs	r2, #0
 8000d54:	4b0b      	ldr	r3, [pc, #44]	; (8000d84 <__aeabi_d2ulz+0x34>)
 8000d56:	4606      	mov	r6, r0
 8000d58:	460f      	mov	r7, r1
 8000d5a:	f7ff fc71 	bl	8000640 <__aeabi_dmul>
 8000d5e:	f7ff ff47 	bl	8000bf0 <__aeabi_d2uiz>
 8000d62:	4604      	mov	r4, r0
 8000d64:	f7ff fbf2 	bl	800054c <__aeabi_ui2d>
 8000d68:	2200      	movs	r2, #0
 8000d6a:	4b07      	ldr	r3, [pc, #28]	; (8000d88 <__aeabi_d2ulz+0x38>)
 8000d6c:	f7ff fc68 	bl	8000640 <__aeabi_dmul>
 8000d70:	4602      	mov	r2, r0
 8000d72:	460b      	mov	r3, r1
 8000d74:	4630      	mov	r0, r6
 8000d76:	4639      	mov	r1, r7
 8000d78:	f7ff faaa 	bl	80002d0 <__aeabi_dsub>
 8000d7c:	f7ff ff38 	bl	8000bf0 <__aeabi_d2uiz>
 8000d80:	4621      	mov	r1, r4
 8000d82:	bdd0      	pop	{r4, r6, r7, pc}
 8000d84:	3df00000 	.word	0x3df00000
 8000d88:	41f00000 	.word	0x41f00000

08000d8c <HAL_GPIO_EXTI_Callback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	b083      	sub	sp, #12
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	4603      	mov	r3, r0
 8000d94:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_8)
 8000d96:	88fb      	ldrh	r3, [r7, #6]
 8000d98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000d9c:	d104      	bne.n	8000da8 <HAL_GPIO_EXTI_Callback+0x1c>
	{
		count +=1;
 8000d9e:	4b05      	ldr	r3, [pc, #20]	; (8000db4 <HAL_GPIO_EXTI_Callback+0x28>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	3301      	adds	r3, #1
 8000da4:	4a03      	ldr	r2, [pc, #12]	; (8000db4 <HAL_GPIO_EXTI_Callback+0x28>)
 8000da6:	6013      	str	r3, [r2, #0]

	}
}
 8000da8:	bf00      	nop
 8000daa:	370c      	adds	r7, #12
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bc80      	pop	{r7}
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop
 8000db4:	200003c8 	.word	0x200003c8

08000db8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000db8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000dbc:	b0c7      	sub	sp, #284	; 0x11c
 8000dbe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dc0:	f001 f84a 	bl	8001e58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dc4:	f000 fdee 	bl	80019a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dc8:	f000 fe52 	bl	8001a70 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000dcc:	f000 fe26 	bl	8001a1c <MX_USART1_UART_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  float x_cir = c3*cos(t);
 8000dd0:	4bcf      	ldr	r3, [pc, #828]	; (8001110 <main+0x358>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f7ff fbdb 	bl	8000590 <__aeabi_f2d>
 8000dda:	4604      	mov	r4, r0
 8000ddc:	460d      	mov	r5, r1
 8000dde:	4bcd      	ldr	r3, [pc, #820]	; (8001114 <main+0x35c>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	4618      	mov	r0, r3
 8000de4:	f7ff fbd4 	bl	8000590 <__aeabi_f2d>
 8000de8:	4602      	mov	r2, r0
 8000dea:	460b      	mov	r3, r1
 8000dec:	4610      	mov	r0, r2
 8000dee:	4619      	mov	r1, r3
 8000df0:	f007 f9f0 	bl	80081d4 <cos>
 8000df4:	4602      	mov	r2, r0
 8000df6:	460b      	mov	r3, r1
 8000df8:	4620      	mov	r0, r4
 8000dfa:	4629      	mov	r1, r5
 8000dfc:	f7ff fc20 	bl	8000640 <__aeabi_dmul>
 8000e00:	4602      	mov	r2, r0
 8000e02:	460b      	mov	r3, r1
 8000e04:	4610      	mov	r0, r2
 8000e06:	4619      	mov	r1, r3
 8000e08:	f7ff ff12 	bl	8000c30 <__aeabi_d2f>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	  float y_cir = c3*sin(t);
 8000e12:	4bbf      	ldr	r3, [pc, #764]	; (8001110 <main+0x358>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	4618      	mov	r0, r3
 8000e18:	f7ff fbba 	bl	8000590 <__aeabi_f2d>
 8000e1c:	4604      	mov	r4, r0
 8000e1e:	460d      	mov	r5, r1
 8000e20:	4bbc      	ldr	r3, [pc, #752]	; (8001114 <main+0x35c>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	4618      	mov	r0, r3
 8000e26:	f7ff fbb3 	bl	8000590 <__aeabi_f2d>
 8000e2a:	4602      	mov	r2, r0
 8000e2c:	460b      	mov	r3, r1
 8000e2e:	4610      	mov	r0, r2
 8000e30:	4619      	mov	r1, r3
 8000e32:	f007 fa15 	bl	8008260 <sin>
 8000e36:	4602      	mov	r2, r0
 8000e38:	460b      	mov	r3, r1
 8000e3a:	4620      	mov	r0, r4
 8000e3c:	4629      	mov	r1, r5
 8000e3e:	f7ff fbff 	bl	8000640 <__aeabi_dmul>
 8000e42:	4602      	mov	r2, r0
 8000e44:	460b      	mov	r3, r1
 8000e46:	4610      	mov	r0, r2
 8000e48:	4619      	mov	r1, r3
 8000e4a:	f7ff fef1 	bl	8000c30 <__aeabi_d2f>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110

	  c1 = round(x_cir)/100;
 8000e54:	f8d7 0114 	ldr.w	r0, [r7, #276]	; 0x114
 8000e58:	f7ff fb9a 	bl	8000590 <__aeabi_f2d>
 8000e5c:	4602      	mov	r2, r0
 8000e5e:	460b      	mov	r3, r1
 8000e60:	4610      	mov	r0, r2
 8000e62:	4619      	mov	r1, r3
 8000e64:	f007 fa42 	bl	80082ec <round>
 8000e68:	f04f 0200 	mov.w	r2, #0
 8000e6c:	4baa      	ldr	r3, [pc, #680]	; (8001118 <main+0x360>)
 8000e6e:	f7ff fd11 	bl	8000894 <__aeabi_ddiv>
 8000e72:	4602      	mov	r2, r0
 8000e74:	460b      	mov	r3, r1
 8000e76:	4610      	mov	r0, r2
 8000e78:	4619      	mov	r1, r3
 8000e7a:	f7ff fed9 	bl	8000c30 <__aeabi_d2f>
 8000e7e:	4602      	mov	r2, r0
 8000e80:	4ba6      	ldr	r3, [pc, #664]	; (800111c <main+0x364>)
 8000e82:	601a      	str	r2, [r3, #0]
	  c2 = round(y_cir)/100;
 8000e84:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 8000e88:	f7ff fb82 	bl	8000590 <__aeabi_f2d>
 8000e8c:	4602      	mov	r2, r0
 8000e8e:	460b      	mov	r3, r1
 8000e90:	4610      	mov	r0, r2
 8000e92:	4619      	mov	r1, r3
 8000e94:	f007 fa2a 	bl	80082ec <round>
 8000e98:	f04f 0200 	mov.w	r2, #0
 8000e9c:	4b9e      	ldr	r3, [pc, #632]	; (8001118 <main+0x360>)
 8000e9e:	f7ff fcf9 	bl	8000894 <__aeabi_ddiv>
 8000ea2:	4602      	mov	r2, r0
 8000ea4:	460b      	mov	r3, r1
 8000ea6:	4610      	mov	r0, r2
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	f7ff fec1 	bl	8000c30 <__aeabi_d2f>
 8000eae:	4602      	mov	r2, r0
 8000eb0:	4b9b      	ldr	r3, [pc, #620]	; (8001120 <main+0x368>)
 8000eb2:	601a      	str	r2, [r3, #0]

	  if (count % 2 == 0) {
 8000eb4:	4b9b      	ldr	r3, [pc, #620]	; (8001124 <main+0x36c>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	f003 0301 	and.w	r3, r3, #1
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d187      	bne.n	8000dd0 <main+0x18>
 8000ec0:	466b      	mov	r3, sp
 8000ec2:	60fb      	str	r3, [r7, #12]
	     	  // Tạo dữ 2 dữ liệu cho chart1
    	     a1 = sin(t) + t ;
 8000ec4:	4b93      	ldr	r3, [pc, #588]	; (8001114 <main+0x35c>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f7ff fb61 	bl	8000590 <__aeabi_f2d>
 8000ece:	4602      	mov	r2, r0
 8000ed0:	460b      	mov	r3, r1
 8000ed2:	4610      	mov	r0, r2
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	f007 f9c3 	bl	8008260 <sin>
 8000eda:	4604      	mov	r4, r0
 8000edc:	460d      	mov	r5, r1
 8000ede:	4b8d      	ldr	r3, [pc, #564]	; (8001114 <main+0x35c>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f7ff fb54 	bl	8000590 <__aeabi_f2d>
 8000ee8:	4602      	mov	r2, r0
 8000eea:	460b      	mov	r3, r1
 8000eec:	4620      	mov	r0, r4
 8000eee:	4629      	mov	r1, r5
 8000ef0:	f7ff f9f0 	bl	80002d4 <__adddf3>
 8000ef4:	4602      	mov	r2, r0
 8000ef6:	460b      	mov	r3, r1
 8000ef8:	4610      	mov	r0, r2
 8000efa:	4619      	mov	r1, r3
 8000efc:	4b8a      	ldr	r3, [pc, #552]	; (8001128 <main+0x370>)
 8000efe:	e9c3 0100 	strd	r0, r1, [r3]
    	     // Giới hạn giá trị chỉ với 4 chữ số sau dấu chấm thập phân
    	     int integer_part1 = (int)a1;
 8000f02:	4b89      	ldr	r3, [pc, #548]	; (8001128 <main+0x370>)
 8000f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f08:	4610      	mov	r0, r2
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	f7ff fe48 	bl	8000ba0 <__aeabi_d2iz>
 8000f10:	4603      	mov	r3, r0
 8000f12:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    	     float decimal_part1 = a1 - integer_part1; // Lấy phần thập phân
 8000f16:	4b84      	ldr	r3, [pc, #528]	; (8001128 <main+0x370>)
 8000f18:	e9d3 4500 	ldrd	r4, r5, [r3]
 8000f1c:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 8000f20:	f7ff fb24 	bl	800056c <__aeabi_i2d>
 8000f24:	4602      	mov	r2, r0
 8000f26:	460b      	mov	r3, r1
 8000f28:	4620      	mov	r0, r4
 8000f2a:	4629      	mov	r1, r5
 8000f2c:	f7ff f9d0 	bl	80002d0 <__aeabi_dsub>
 8000f30:	4602      	mov	r2, r0
 8000f32:	460b      	mov	r3, r1
 8000f34:	4610      	mov	r0, r2
 8000f36:	4619      	mov	r1, r3
 8000f38:	f7ff fe7a 	bl	8000c30 <__aeabi_d2f>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    	     decimal_part1 *= 10000000; // Dịch chuyển phần thập phân sang trái 4 chữ số
 8000f42:	497a      	ldr	r1, [pc, #488]	; (800112c <main+0x374>)
 8000f44:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 8000f48:	f7ff f90a 	bl	8000160 <__aeabi_fmul>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    	     int truncated_decimal1 = (int)decimal_part1; // Chuyển phần thập phân đã dịch chuyển thành số nguyên
 8000f52:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 8000f56:	f7ff febb 	bl	8000cd0 <__aeabi_f2iz>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    	      b1 = integer_part1 + truncated_decimal1 / 10000000.0; // Kết hợp lại phần nguyên và phần thập phân đã cắt
 8000f60:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 8000f64:	f7ff fb02 	bl	800056c <__aeabi_i2d>
 8000f68:	4604      	mov	r4, r0
 8000f6a:	460d      	mov	r5, r1
 8000f6c:	f8d7 0104 	ldr.w	r0, [r7, #260]	; 0x104
 8000f70:	f7ff fafc 	bl	800056c <__aeabi_i2d>
 8000f74:	a364      	add	r3, pc, #400	; (adr r3, 8001108 <main+0x350>)
 8000f76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f7a:	f7ff fc8b 	bl	8000894 <__aeabi_ddiv>
 8000f7e:	4602      	mov	r2, r0
 8000f80:	460b      	mov	r3, r1
 8000f82:	4620      	mov	r0, r4
 8000f84:	4629      	mov	r1, r5
 8000f86:	f7ff f9a5 	bl	80002d4 <__adddf3>
 8000f8a:	4602      	mov	r2, r0
 8000f8c:	460b      	mov	r3, r1
 8000f8e:	4610      	mov	r0, r2
 8000f90:	4619      	mov	r1, r3
 8000f92:	f7ff fe4d 	bl	8000c30 <__aeabi_d2f>
 8000f96:	4602      	mov	r2, r0
 8000f98:	4b65      	ldr	r3, [pc, #404]	; (8001130 <main+0x378>)
 8000f9a:	601a      	str	r2, [r3, #0]


     	     a2 = 10 + sin(t) + t ;
 8000f9c:	4b5d      	ldr	r3, [pc, #372]	; (8001114 <main+0x35c>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f7ff faf5 	bl	8000590 <__aeabi_f2d>
 8000fa6:	4602      	mov	r2, r0
 8000fa8:	460b      	mov	r3, r1
 8000faa:	4610      	mov	r0, r2
 8000fac:	4619      	mov	r1, r3
 8000fae:	f007 f957 	bl	8008260 <sin>
 8000fb2:	f04f 0200 	mov.w	r2, #0
 8000fb6:	4b5f      	ldr	r3, [pc, #380]	; (8001134 <main+0x37c>)
 8000fb8:	f7ff f98c 	bl	80002d4 <__adddf3>
 8000fbc:	4602      	mov	r2, r0
 8000fbe:	460b      	mov	r3, r1
 8000fc0:	4614      	mov	r4, r2
 8000fc2:	461d      	mov	r5, r3
 8000fc4:	4b53      	ldr	r3, [pc, #332]	; (8001114 <main+0x35c>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f7ff fae1 	bl	8000590 <__aeabi_f2d>
 8000fce:	4602      	mov	r2, r0
 8000fd0:	460b      	mov	r3, r1
 8000fd2:	4620      	mov	r0, r4
 8000fd4:	4629      	mov	r1, r5
 8000fd6:	f7ff f97d 	bl	80002d4 <__adddf3>
 8000fda:	4602      	mov	r2, r0
 8000fdc:	460b      	mov	r3, r1
 8000fde:	4610      	mov	r0, r2
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	4b55      	ldr	r3, [pc, #340]	; (8001138 <main+0x380>)
 8000fe4:	e9c3 0100 	strd	r0, r1, [r3]
     	     int integer_part2 = (int)a2;
 8000fe8:	4b53      	ldr	r3, [pc, #332]	; (8001138 <main+0x380>)
 8000fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fee:	4610      	mov	r0, r2
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	f7ff fdd5 	bl	8000ba0 <__aeabi_d2iz>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
     	     float decimal_part2 = a2 - integer_part2;
 8000ffc:	4b4e      	ldr	r3, [pc, #312]	; (8001138 <main+0x380>)
 8000ffe:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001002:	f8d7 0100 	ldr.w	r0, [r7, #256]	; 0x100
 8001006:	f7ff fab1 	bl	800056c <__aeabi_i2d>
 800100a:	4602      	mov	r2, r0
 800100c:	460b      	mov	r3, r1
 800100e:	4620      	mov	r0, r4
 8001010:	4629      	mov	r1, r5
 8001012:	f7ff f95d 	bl	80002d0 <__aeabi_dsub>
 8001016:	4602      	mov	r2, r0
 8001018:	460b      	mov	r3, r1
 800101a:	4610      	mov	r0, r2
 800101c:	4619      	mov	r1, r3
 800101e:	f7ff fe07 	bl	8000c30 <__aeabi_d2f>
 8001022:	4603      	mov	r3, r0
 8001024:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
     	     decimal_part2 *= 10000000;
 8001028:	4940      	ldr	r1, [pc, #256]	; (800112c <main+0x374>)
 800102a:	f8d7 00fc 	ldr.w	r0, [r7, #252]	; 0xfc
 800102e:	f7ff f897 	bl	8000160 <__aeabi_fmul>
 8001032:	4603      	mov	r3, r0
 8001034:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
     	     int truncated_decimal2 = (int)decimal_part2;
 8001038:	f8d7 00fc 	ldr.w	r0, [r7, #252]	; 0xfc
 800103c:	f7ff fe48 	bl	8000cd0 <__aeabi_f2iz>
 8001040:	4603      	mov	r3, r0
 8001042:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
     	      b2 = integer_part2 + truncated_decimal2 / 10000000.0;
 8001046:	f8d7 0100 	ldr.w	r0, [r7, #256]	; 0x100
 800104a:	f7ff fa8f 	bl	800056c <__aeabi_i2d>
 800104e:	4604      	mov	r4, r0
 8001050:	460d      	mov	r5, r1
 8001052:	f8d7 00f8 	ldr.w	r0, [r7, #248]	; 0xf8
 8001056:	f7ff fa89 	bl	800056c <__aeabi_i2d>
 800105a:	a32b      	add	r3, pc, #172	; (adr r3, 8001108 <main+0x350>)
 800105c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001060:	f7ff fc18 	bl	8000894 <__aeabi_ddiv>
 8001064:	4602      	mov	r2, r0
 8001066:	460b      	mov	r3, r1
 8001068:	4620      	mov	r0, r4
 800106a:	4629      	mov	r1, r5
 800106c:	f7ff f932 	bl	80002d4 <__adddf3>
 8001070:	4602      	mov	r2, r0
 8001072:	460b      	mov	r3, r1
 8001074:	4610      	mov	r0, r2
 8001076:	4619      	mov	r1, r3
 8001078:	f7ff fdda 	bl	8000c30 <__aeabi_d2f>
 800107c:	4602      	mov	r2, r0
 800107e:	4b2f      	ldr	r3, [pc, #188]	; (800113c <main+0x384>)
 8001080:	601a      	str	r2, [r3, #0]

     	     a3 =10 + sin(t) + t + a ;
 8001082:	4b24      	ldr	r3, [pc, #144]	; (8001114 <main+0x35c>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	4618      	mov	r0, r3
 8001088:	f7ff fa82 	bl	8000590 <__aeabi_f2d>
 800108c:	4602      	mov	r2, r0
 800108e:	460b      	mov	r3, r1
 8001090:	4610      	mov	r0, r2
 8001092:	4619      	mov	r1, r3
 8001094:	f007 f8e4 	bl	8008260 <sin>
 8001098:	f04f 0200 	mov.w	r2, #0
 800109c:	4b25      	ldr	r3, [pc, #148]	; (8001134 <main+0x37c>)
 800109e:	f7ff f919 	bl	80002d4 <__adddf3>
 80010a2:	4602      	mov	r2, r0
 80010a4:	460b      	mov	r3, r1
 80010a6:	4614      	mov	r4, r2
 80010a8:	461d      	mov	r5, r3
 80010aa:	4b1a      	ldr	r3, [pc, #104]	; (8001114 <main+0x35c>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	4618      	mov	r0, r3
 80010b0:	f7ff fa6e 	bl	8000590 <__aeabi_f2d>
 80010b4:	4602      	mov	r2, r0
 80010b6:	460b      	mov	r3, r1
 80010b8:	4620      	mov	r0, r4
 80010ba:	4629      	mov	r1, r5
 80010bc:	f7ff f90a 	bl	80002d4 <__adddf3>
 80010c0:	4602      	mov	r2, r0
 80010c2:	460b      	mov	r3, r1
 80010c4:	4610      	mov	r0, r2
 80010c6:	4619      	mov	r1, r3
 80010c8:	4b1d      	ldr	r3, [pc, #116]	; (8001140 <main+0x388>)
 80010ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010ce:	f7ff f901 	bl	80002d4 <__adddf3>
 80010d2:	4602      	mov	r2, r0
 80010d4:	460b      	mov	r3, r1
 80010d6:	4610      	mov	r0, r2
 80010d8:	4619      	mov	r1, r3
 80010da:	4b1a      	ldr	r3, [pc, #104]	; (8001144 <main+0x38c>)
 80010dc:	e9c3 0100 	strd	r0, r1, [r3]
     	     int integer_part3 = (int)a3;
 80010e0:	4b18      	ldr	r3, [pc, #96]	; (8001144 <main+0x38c>)
 80010e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010e6:	4610      	mov	r0, r2
 80010e8:	4619      	mov	r1, r3
 80010ea:	f7ff fd59 	bl	8000ba0 <__aeabi_d2iz>
 80010ee:	4603      	mov	r3, r0
 80010f0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
     	     float decimal_part3 = a3 - integer_part3;
 80010f4:	4b13      	ldr	r3, [pc, #76]	; (8001144 <main+0x38c>)
 80010f6:	e9d3 4500 	ldrd	r4, r5, [r3]
 80010fa:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 80010fe:	f7ff fa35 	bl	800056c <__aeabi_i2d>
 8001102:	4602      	mov	r2, r0
 8001104:	460b      	mov	r3, r1
 8001106:	e01f      	b.n	8001148 <main+0x390>
 8001108:	00000000 	.word	0x00000000
 800110c:	416312d0 	.word	0x416312d0
 8001110:	200003d4 	.word	0x200003d4
 8001114:	20000374 	.word	0x20000374
 8001118:	40590000 	.word	0x40590000
 800111c:	200003cc 	.word	0x200003cc
 8001120:	200003d0 	.word	0x200003d0
 8001124:	200003c8 	.word	0x200003c8
 8001128:	20000378 	.word	0x20000378
 800112c:	4b189680 	.word	0x4b189680
 8001130:	200003a8 	.word	0x200003a8
 8001134:	40240000 	.word	0x40240000
 8001138:	20000380 	.word	0x20000380
 800113c:	200003ac 	.word	0x200003ac
 8001140:	200003c0 	.word	0x200003c0
 8001144:	20000388 	.word	0x20000388
 8001148:	4620      	mov	r0, r4
 800114a:	4629      	mov	r1, r5
 800114c:	f7ff f8c0 	bl	80002d0 <__aeabi_dsub>
 8001150:	4602      	mov	r2, r0
 8001152:	460b      	mov	r3, r1
 8001154:	4610      	mov	r0, r2
 8001156:	4619      	mov	r1, r3
 8001158:	f7ff fd6a 	bl	8000c30 <__aeabi_d2f>
 800115c:	4603      	mov	r3, r0
 800115e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
     	     decimal_part3 *= 10000000;
 8001162:	49cf      	ldr	r1, [pc, #828]	; (80014a0 <main+0x6e8>)
 8001164:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 8001168:	f7fe fffa 	bl	8000160 <__aeabi_fmul>
 800116c:	4603      	mov	r3, r0
 800116e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
     	     int truncated_decimal3 = (int)decimal_part3;
 8001172:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 8001176:	f7ff fdab 	bl	8000cd0 <__aeabi_f2iz>
 800117a:	4603      	mov	r3, r0
 800117c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
     	     b3 = integer_part3 + truncated_decimal3 / 10000000.0;
 8001180:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 8001184:	f7ff f9f2 	bl	800056c <__aeabi_i2d>
 8001188:	4604      	mov	r4, r0
 800118a:	460d      	mov	r5, r1
 800118c:	f8d7 00ec 	ldr.w	r0, [r7, #236]	; 0xec
 8001190:	f7ff f9ec 	bl	800056c <__aeabi_i2d>
 8001194:	a3c0      	add	r3, pc, #768	; (adr r3, 8001498 <main+0x6e0>)
 8001196:	e9d3 2300 	ldrd	r2, r3, [r3]
 800119a:	f7ff fb7b 	bl	8000894 <__aeabi_ddiv>
 800119e:	4602      	mov	r2, r0
 80011a0:	460b      	mov	r3, r1
 80011a2:	4620      	mov	r0, r4
 80011a4:	4629      	mov	r1, r5
 80011a6:	f7ff f895 	bl	80002d4 <__adddf3>
 80011aa:	4602      	mov	r2, r0
 80011ac:	460b      	mov	r3, r1
 80011ae:	4610      	mov	r0, r2
 80011b0:	4619      	mov	r1, r3
 80011b2:	f7ff fd3d 	bl	8000c30 <__aeabi_d2f>
 80011b6:	4602      	mov	r2, r0
 80011b8:	4bba      	ldr	r3, [pc, #744]	; (80014a4 <main+0x6ec>)
 80011ba:	601a      	str	r2, [r3, #0]

     	     a4 =  sin(t) + t ;
 80011bc:	4bba      	ldr	r3, [pc, #744]	; (80014a8 <main+0x6f0>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4618      	mov	r0, r3
 80011c2:	f7ff f9e5 	bl	8000590 <__aeabi_f2d>
 80011c6:	4602      	mov	r2, r0
 80011c8:	460b      	mov	r3, r1
 80011ca:	4610      	mov	r0, r2
 80011cc:	4619      	mov	r1, r3
 80011ce:	f007 f847 	bl	8008260 <sin>
 80011d2:	4604      	mov	r4, r0
 80011d4:	460d      	mov	r5, r1
 80011d6:	4bb4      	ldr	r3, [pc, #720]	; (80014a8 <main+0x6f0>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4618      	mov	r0, r3
 80011dc:	f7ff f9d8 	bl	8000590 <__aeabi_f2d>
 80011e0:	4602      	mov	r2, r0
 80011e2:	460b      	mov	r3, r1
 80011e4:	4620      	mov	r0, r4
 80011e6:	4629      	mov	r1, r5
 80011e8:	f7ff f874 	bl	80002d4 <__adddf3>
 80011ec:	4602      	mov	r2, r0
 80011ee:	460b      	mov	r3, r1
 80011f0:	4610      	mov	r0, r2
 80011f2:	4619      	mov	r1, r3
 80011f4:	4bad      	ldr	r3, [pc, #692]	; (80014ac <main+0x6f4>)
 80011f6:	e9c3 0100 	strd	r0, r1, [r3]
     	     int integer_part4 = (int)a4;
 80011fa:	4bac      	ldr	r3, [pc, #688]	; (80014ac <main+0x6f4>)
 80011fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001200:	4610      	mov	r0, r2
 8001202:	4619      	mov	r1, r3
 8001204:	f7ff fccc 	bl	8000ba0 <__aeabi_d2iz>
 8001208:	4603      	mov	r3, r0
 800120a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
     	     float decimal_part4 = a4 - integer_part4;
 800120e:	4ba7      	ldr	r3, [pc, #668]	; (80014ac <main+0x6f4>)
 8001210:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001214:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 8001218:	f7ff f9a8 	bl	800056c <__aeabi_i2d>
 800121c:	4602      	mov	r2, r0
 800121e:	460b      	mov	r3, r1
 8001220:	4620      	mov	r0, r4
 8001222:	4629      	mov	r1, r5
 8001224:	f7ff f854 	bl	80002d0 <__aeabi_dsub>
 8001228:	4602      	mov	r2, r0
 800122a:	460b      	mov	r3, r1
 800122c:	4610      	mov	r0, r2
 800122e:	4619      	mov	r1, r3
 8001230:	f7ff fcfe 	bl	8000c30 <__aeabi_d2f>
 8001234:	4603      	mov	r3, r0
 8001236:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
     	     decimal_part4 *= 10000000;
 800123a:	4999      	ldr	r1, [pc, #612]	; (80014a0 <main+0x6e8>)
 800123c:	f8d7 00e4 	ldr.w	r0, [r7, #228]	; 0xe4
 8001240:	f7fe ff8e 	bl	8000160 <__aeabi_fmul>
 8001244:	4603      	mov	r3, r0
 8001246:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
     	     int truncated_decimal4 = (int)decimal_part4;
 800124a:	f8d7 00e4 	ldr.w	r0, [r7, #228]	; 0xe4
 800124e:	f7ff fd3f 	bl	8000cd0 <__aeabi_f2iz>
 8001252:	4603      	mov	r3, r0
 8001254:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
     	     b4 = integer_part4 + truncated_decimal4 / 10000000.0;
 8001258:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 800125c:	f7ff f986 	bl	800056c <__aeabi_i2d>
 8001260:	4604      	mov	r4, r0
 8001262:	460d      	mov	r5, r1
 8001264:	f8d7 00e0 	ldr.w	r0, [r7, #224]	; 0xe0
 8001268:	f7ff f980 	bl	800056c <__aeabi_i2d>
 800126c:	a38a      	add	r3, pc, #552	; (adr r3, 8001498 <main+0x6e0>)
 800126e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001272:	f7ff fb0f 	bl	8000894 <__aeabi_ddiv>
 8001276:	4602      	mov	r2, r0
 8001278:	460b      	mov	r3, r1
 800127a:	4620      	mov	r0, r4
 800127c:	4629      	mov	r1, r5
 800127e:	f7ff f829 	bl	80002d4 <__adddf3>
 8001282:	4602      	mov	r2, r0
 8001284:	460b      	mov	r3, r1
 8001286:	4610      	mov	r0, r2
 8001288:	4619      	mov	r1, r3
 800128a:	f7ff fcd1 	bl	8000c30 <__aeabi_d2f>
 800128e:	4602      	mov	r2, r0
 8001290:	4b87      	ldr	r3, [pc, #540]	; (80014b0 <main+0x6f8>)
 8001292:	601a      	str	r2, [r3, #0]


     	     a5 = x_cir ;
 8001294:	f8d7 0114 	ldr.w	r0, [r7, #276]	; 0x114
 8001298:	f7ff f97a 	bl	8000590 <__aeabi_f2d>
 800129c:	4602      	mov	r2, r0
 800129e:	460b      	mov	r3, r1
 80012a0:	4984      	ldr	r1, [pc, #528]	; (80014b4 <main+0x6fc>)
 80012a2:	e9c1 2300 	strd	r2, r3, [r1]
     	     int integer_part5 = (int)a5;
 80012a6:	4b83      	ldr	r3, [pc, #524]	; (80014b4 <main+0x6fc>)
 80012a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ac:	4610      	mov	r0, r2
 80012ae:	4619      	mov	r1, r3
 80012b0:	f7ff fc76 	bl	8000ba0 <__aeabi_d2iz>
 80012b4:	4603      	mov	r3, r0
 80012b6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
     	     float decimal_part5 = a5 - integer_part5;
 80012ba:	4b7e      	ldr	r3, [pc, #504]	; (80014b4 <main+0x6fc>)
 80012bc:	e9d3 4500 	ldrd	r4, r5, [r3]
 80012c0:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 80012c4:	f7ff f952 	bl	800056c <__aeabi_i2d>
 80012c8:	4602      	mov	r2, r0
 80012ca:	460b      	mov	r3, r1
 80012cc:	4620      	mov	r0, r4
 80012ce:	4629      	mov	r1, r5
 80012d0:	f7fe fffe 	bl	80002d0 <__aeabi_dsub>
 80012d4:	4602      	mov	r2, r0
 80012d6:	460b      	mov	r3, r1
 80012d8:	4610      	mov	r0, r2
 80012da:	4619      	mov	r1, r3
 80012dc:	f7ff fca8 	bl	8000c30 <__aeabi_d2f>
 80012e0:	4603      	mov	r3, r0
 80012e2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
     	     decimal_part5 *= 10000000;
 80012e6:	496e      	ldr	r1, [pc, #440]	; (80014a0 <main+0x6e8>)
 80012e8:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 80012ec:	f7fe ff38 	bl	8000160 <__aeabi_fmul>
 80012f0:	4603      	mov	r3, r0
 80012f2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
     	     int truncated_decimal5 = (int)decimal_part5;
 80012f6:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 80012fa:	f7ff fce9 	bl	8000cd0 <__aeabi_f2iz>
 80012fe:	4603      	mov	r3, r0
 8001300:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
     	     b5 = integer_part5 + truncated_decimal5 / 10000000.0;
 8001304:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 8001308:	f7ff f930 	bl	800056c <__aeabi_i2d>
 800130c:	4604      	mov	r4, r0
 800130e:	460d      	mov	r5, r1
 8001310:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 8001314:	f7ff f92a 	bl	800056c <__aeabi_i2d>
 8001318:	a35f      	add	r3, pc, #380	; (adr r3, 8001498 <main+0x6e0>)
 800131a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800131e:	f7ff fab9 	bl	8000894 <__aeabi_ddiv>
 8001322:	4602      	mov	r2, r0
 8001324:	460b      	mov	r3, r1
 8001326:	4620      	mov	r0, r4
 8001328:	4629      	mov	r1, r5
 800132a:	f7fe ffd3 	bl	80002d4 <__adddf3>
 800132e:	4602      	mov	r2, r0
 8001330:	460b      	mov	r3, r1
 8001332:	4610      	mov	r0, r2
 8001334:	4619      	mov	r1, r3
 8001336:	f7ff fc7b 	bl	8000c30 <__aeabi_d2f>
 800133a:	4602      	mov	r2, r0
 800133c:	4b5e      	ldr	r3, [pc, #376]	; (80014b8 <main+0x700>)
 800133e:	601a      	str	r2, [r3, #0]
     	     //b5 = c1;

     	     a6 = y_cir   ;
 8001340:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 8001344:	f7ff f924 	bl	8000590 <__aeabi_f2d>
 8001348:	4602      	mov	r2, r0
 800134a:	460b      	mov	r3, r1
 800134c:	495b      	ldr	r1, [pc, #364]	; (80014bc <main+0x704>)
 800134e:	e9c1 2300 	strd	r2, r3, [r1]
     	     int integer_part6 = (int)a6;
 8001352:	4b5a      	ldr	r3, [pc, #360]	; (80014bc <main+0x704>)
 8001354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001358:	4610      	mov	r0, r2
 800135a:	4619      	mov	r1, r3
 800135c:	f7ff fc20 	bl	8000ba0 <__aeabi_d2iz>
 8001360:	4603      	mov	r3, r0
 8001362:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
     	     float decimal_part6 = a6 - integer_part6;
 8001366:	4b55      	ldr	r3, [pc, #340]	; (80014bc <main+0x704>)
 8001368:	e9d3 4500 	ldrd	r4, r5, [r3]
 800136c:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 8001370:	f7ff f8fc 	bl	800056c <__aeabi_i2d>
 8001374:	4602      	mov	r2, r0
 8001376:	460b      	mov	r3, r1
 8001378:	4620      	mov	r0, r4
 800137a:	4629      	mov	r1, r5
 800137c:	f7fe ffa8 	bl	80002d0 <__aeabi_dsub>
 8001380:	4602      	mov	r2, r0
 8001382:	460b      	mov	r3, r1
 8001384:	4610      	mov	r0, r2
 8001386:	4619      	mov	r1, r3
 8001388:	f7ff fc52 	bl	8000c30 <__aeabi_d2f>
 800138c:	4603      	mov	r3, r0
 800138e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
     	     decimal_part6 *= 10000000;
 8001392:	4943      	ldr	r1, [pc, #268]	; (80014a0 <main+0x6e8>)
 8001394:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 8001398:	f7fe fee2 	bl	8000160 <__aeabi_fmul>
 800139c:	4603      	mov	r3, r0
 800139e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
     	     int truncated_decimal6 = (int)decimal_part6;
 80013a2:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 80013a6:	f7ff fc93 	bl	8000cd0 <__aeabi_f2iz>
 80013aa:	4603      	mov	r3, r0
 80013ac:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
     	     b6 = integer_part6 + truncated_decimal6 / 10000000.0;
 80013b0:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 80013b4:	f7ff f8da 	bl	800056c <__aeabi_i2d>
 80013b8:	4604      	mov	r4, r0
 80013ba:	460d      	mov	r5, r1
 80013bc:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 80013c0:	f7ff f8d4 	bl	800056c <__aeabi_i2d>
 80013c4:	a334      	add	r3, pc, #208	; (adr r3, 8001498 <main+0x6e0>)
 80013c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013ca:	f7ff fa63 	bl	8000894 <__aeabi_ddiv>
 80013ce:	4602      	mov	r2, r0
 80013d0:	460b      	mov	r3, r1
 80013d2:	4620      	mov	r0, r4
 80013d4:	4629      	mov	r1, r5
 80013d6:	f7fe ff7d 	bl	80002d4 <__adddf3>
 80013da:	4602      	mov	r2, r0
 80013dc:	460b      	mov	r3, r1
 80013de:	4610      	mov	r0, r2
 80013e0:	4619      	mov	r1, r3
 80013e2:	f7ff fc25 	bl	8000c30 <__aeabi_d2f>
 80013e6:	4602      	mov	r2, r0
 80013e8:	4b35      	ldr	r3, [pc, #212]	; (80014c0 <main+0x708>)
 80013ea:	601a      	str	r2, [r3, #0]
     	     //b6 = c2;



    	     //Đếm size của mảng trước khi gán
	 		 sprintf(str1, "%.7f", b1);
 80013ec:	4b35      	ldr	r3, [pc, #212]	; (80014c4 <main+0x70c>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4618      	mov	r0, r3
 80013f2:	f7ff f8cd 	bl	8000590 <__aeabi_f2d>
 80013f6:	4602      	mov	r2, r0
 80013f8:	460b      	mov	r3, r1
 80013fa:	4933      	ldr	r1, [pc, #204]	; (80014c8 <main+0x710>)
 80013fc:	4833      	ldr	r0, [pc, #204]	; (80014cc <main+0x714>)
 80013fe:	f003 fa4b 	bl	8004898 <siprintf>
	 		 sprintf(str2, "%.7f", b2);
 8001402:	4b33      	ldr	r3, [pc, #204]	; (80014d0 <main+0x718>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	4618      	mov	r0, r3
 8001408:	f7ff f8c2 	bl	8000590 <__aeabi_f2d>
 800140c:	4602      	mov	r2, r0
 800140e:	460b      	mov	r3, r1
 8001410:	492d      	ldr	r1, [pc, #180]	; (80014c8 <main+0x710>)
 8001412:	4830      	ldr	r0, [pc, #192]	; (80014d4 <main+0x71c>)
 8001414:	f003 fa40 	bl	8004898 <siprintf>
	 		 int length1 = strlen(str1);
 8001418:	482c      	ldr	r0, [pc, #176]	; (80014cc <main+0x714>)
 800141a:	f7fe fe99 	bl	8000150 <strlen>
 800141e:	4603      	mov	r3, r0
 8001420:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	 		 int length2 = strlen(str2);
 8001424:	482b      	ldr	r0, [pc, #172]	; (80014d4 <main+0x71c>)
 8001426:	f7fe fe93 	bl	8000150 <strlen>
 800142a:	4603      	mov	r3, r0
 800142c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0

	 		 sprintf(str3, "%.7f", b3);
 8001430:	4b1c      	ldr	r3, [pc, #112]	; (80014a4 <main+0x6ec>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4618      	mov	r0, r3
 8001436:	f7ff f8ab 	bl	8000590 <__aeabi_f2d>
 800143a:	4602      	mov	r2, r0
 800143c:	460b      	mov	r3, r1
 800143e:	4922      	ldr	r1, [pc, #136]	; (80014c8 <main+0x710>)
 8001440:	4825      	ldr	r0, [pc, #148]	; (80014d8 <main+0x720>)
 8001442:	f003 fa29 	bl	8004898 <siprintf>
	 		 sprintf(str4, "%.7f", b4);
 8001446:	4b1a      	ldr	r3, [pc, #104]	; (80014b0 <main+0x6f8>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	4618      	mov	r0, r3
 800144c:	f7ff f8a0 	bl	8000590 <__aeabi_f2d>
 8001450:	4602      	mov	r2, r0
 8001452:	460b      	mov	r3, r1
 8001454:	491c      	ldr	r1, [pc, #112]	; (80014c8 <main+0x710>)
 8001456:	4821      	ldr	r0, [pc, #132]	; (80014dc <main+0x724>)
 8001458:	f003 fa1e 	bl	8004898 <siprintf>
	 		 int length3 = strlen(str3);
 800145c:	481e      	ldr	r0, [pc, #120]	; (80014d8 <main+0x720>)
 800145e:	f7fe fe77 	bl	8000150 <strlen>
 8001462:	4603      	mov	r3, r0
 8001464:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	 		 int length4 = strlen(str4);
 8001468:	481c      	ldr	r0, [pc, #112]	; (80014dc <main+0x724>)
 800146a:	f7fe fe71 	bl	8000150 <strlen>
 800146e:	4603      	mov	r3, r0
 8001470:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8

	 		 sprintf(str5, "%.7f", b5);
 8001474:	4b10      	ldr	r3, [pc, #64]	; (80014b8 <main+0x700>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4618      	mov	r0, r3
 800147a:	f7ff f889 	bl	8000590 <__aeabi_f2d>
 800147e:	4602      	mov	r2, r0
 8001480:	460b      	mov	r3, r1
 8001482:	4911      	ldr	r1, [pc, #68]	; (80014c8 <main+0x710>)
 8001484:	4816      	ldr	r0, [pc, #88]	; (80014e0 <main+0x728>)
 8001486:	f003 fa07 	bl	8004898 <siprintf>
	 		 sprintf(str6, "%.7f", b6);
 800148a:	4b0d      	ldr	r3, [pc, #52]	; (80014c0 <main+0x708>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	4618      	mov	r0, r3
 8001490:	f7ff f87e 	bl	8000590 <__aeabi_f2d>
 8001494:	4602      	mov	r2, r0
 8001496:	e025      	b.n	80014e4 <main+0x72c>
 8001498:	00000000 	.word	0x00000000
 800149c:	416312d0 	.word	0x416312d0
 80014a0:	4b189680 	.word	0x4b189680
 80014a4:	200003b0 	.word	0x200003b0
 80014a8:	20000374 	.word	0x20000374
 80014ac:	20000390 	.word	0x20000390
 80014b0:	200003b4 	.word	0x200003b4
 80014b4:	20000398 	.word	0x20000398
 80014b8:	200003b8 	.word	0x200003b8
 80014bc:	200003a0 	.word	0x200003a0
 80014c0:	200003bc 	.word	0x200003bc
 80014c4:	200003a8 	.word	0x200003a8
 80014c8:	080092e8 	.word	0x080092e8
 80014cc:	2000023c 	.word	0x2000023c
 80014d0:	200003ac 	.word	0x200003ac
 80014d4:	20000270 	.word	0x20000270
 80014d8:	200002a4 	.word	0x200002a4
 80014dc:	200002d8 	.word	0x200002d8
 80014e0:	2000030c 	.word	0x2000030c
 80014e4:	460b      	mov	r3, r1
 80014e6:	49cd      	ldr	r1, [pc, #820]	; (800181c <main+0xa64>)
 80014e8:	48cd      	ldr	r0, [pc, #820]	; (8001820 <main+0xa68>)
 80014ea:	f003 f9d5 	bl	8004898 <siprintf>
	 		 int length5 = strlen(str5);
 80014ee:	48cd      	ldr	r0, [pc, #820]	; (8001824 <main+0xa6c>)
 80014f0:	f7fe fe2e 	bl	8000150 <strlen>
 80014f4:	4603      	mov	r3, r0
 80014f6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	 		 int length6 = strlen(str6);
 80014fa:	48c9      	ldr	r0, [pc, #804]	; (8001820 <main+0xa68>)
 80014fc:	f7fe fe28 	bl	8000150 <strlen>
 8001500:	4603      	mov	r3, r0
 8001502:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

	 		 // lấy length vừa tính được định dạng cho chuỗi
	     	 char str_a1[length1], str_a2[length2];
 8001506:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 800150a:	1e4b      	subs	r3, r1, #1
 800150c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8001510:	460a      	mov	r2, r1
 8001512:	2300      	movs	r3, #0
 8001514:	64ba      	str	r2, [r7, #72]	; 0x48
 8001516:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001518:	f04f 0200 	mov.w	r2, #0
 800151c:	f04f 0300 	mov.w	r3, #0
 8001520:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8001524:	4628      	mov	r0, r5
 8001526:	00c3      	lsls	r3, r0, #3
 8001528:	4620      	mov	r0, r4
 800152a:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800152e:	4620      	mov	r0, r4
 8001530:	00c2      	lsls	r2, r0, #3
 8001532:	460a      	mov	r2, r1
 8001534:	2300      	movs	r3, #0
 8001536:	643a      	str	r2, [r7, #64]	; 0x40
 8001538:	647b      	str	r3, [r7, #68]	; 0x44
 800153a:	f04f 0200 	mov.w	r2, #0
 800153e:	f04f 0300 	mov.w	r3, #0
 8001542:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 8001546:	4628      	mov	r0, r5
 8001548:	00c3      	lsls	r3, r0, #3
 800154a:	4620      	mov	r0, r4
 800154c:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001550:	4620      	mov	r0, r4
 8001552:	00c2      	lsls	r2, r0, #3
 8001554:	60b9      	str	r1, [r7, #8]
 8001556:	460b      	mov	r3, r1
 8001558:	3307      	adds	r3, #7
 800155a:	08db      	lsrs	r3, r3, #3
 800155c:	00db      	lsls	r3, r3, #3
 800155e:	ebad 0d03 	sub.w	sp, sp, r3
 8001562:	466b      	mov	r3, sp
 8001564:	3300      	adds	r3, #0
 8001566:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800156a:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 800156e:	1e4b      	subs	r3, r1, #1
 8001570:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8001574:	460a      	mov	r2, r1
 8001576:	2300      	movs	r3, #0
 8001578:	63ba      	str	r2, [r7, #56]	; 0x38
 800157a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800157c:	f04f 0200 	mov.w	r2, #0
 8001580:	f04f 0300 	mov.w	r3, #0
 8001584:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 8001588:	4628      	mov	r0, r5
 800158a:	00c3      	lsls	r3, r0, #3
 800158c:	4620      	mov	r0, r4
 800158e:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001592:	4620      	mov	r0, r4
 8001594:	00c2      	lsls	r2, r0, #3
 8001596:	460a      	mov	r2, r1
 8001598:	2300      	movs	r3, #0
 800159a:	633a      	str	r2, [r7, #48]	; 0x30
 800159c:	637b      	str	r3, [r7, #52]	; 0x34
 800159e:	f04f 0200 	mov.w	r2, #0
 80015a2:	f04f 0300 	mov.w	r3, #0
 80015a6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80015aa:	4628      	mov	r0, r5
 80015ac:	00c3      	lsls	r3, r0, #3
 80015ae:	4620      	mov	r0, r4
 80015b0:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80015b4:	4620      	mov	r0, r4
 80015b6:	00c2      	lsls	r2, r0, #3
 80015b8:	6079      	str	r1, [r7, #4]
 80015ba:	460b      	mov	r3, r1
 80015bc:	3307      	adds	r3, #7
 80015be:	08db      	lsrs	r3, r3, #3
 80015c0:	00db      	lsls	r3, r3, #3
 80015c2:	ebad 0d03 	sub.w	sp, sp, r3
 80015c6:	466b      	mov	r3, sp
 80015c8:	3300      	adds	r3, #0
 80015ca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	     	 sprintf(str_a1, "%.7f", b1);
 80015ce:	4b96      	ldr	r3, [pc, #600]	; (8001828 <main+0xa70>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4618      	mov	r0, r3
 80015d4:	f7fe ffdc 	bl	8000590 <__aeabi_f2d>
 80015d8:	4602      	mov	r2, r0
 80015da:	460b      	mov	r3, r1
 80015dc:	498f      	ldr	r1, [pc, #572]	; (800181c <main+0xa64>)
 80015de:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 80015e2:	f003 f959 	bl	8004898 <siprintf>
	     	 sprintf(str_a2, "%.7f", b2);
 80015e6:	4b91      	ldr	r3, [pc, #580]	; (800182c <main+0xa74>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4618      	mov	r0, r3
 80015ec:	f7fe ffd0 	bl	8000590 <__aeabi_f2d>
 80015f0:	4602      	mov	r2, r0
 80015f2:	460b      	mov	r3, r1
 80015f4:	4989      	ldr	r1, [pc, #548]	; (800181c <main+0xa64>)
 80015f6:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 80015fa:	f003 f94d 	bl	8004898 <siprintf>

	     	 char str_a3[length3], str_a4[length4];
 80015fe:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001602:	4611      	mov	r1, r2
 8001604:	460a      	mov	r2, r1
 8001606:	1e53      	subs	r3, r2, #1
 8001608:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800160c:	460a      	mov	r2, r1
 800160e:	2300      	movs	r3, #0
 8001610:	62ba      	str	r2, [r7, #40]	; 0x28
 8001612:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001614:	f04f 0200 	mov.w	r2, #0
 8001618:	f04f 0300 	mov.w	r3, #0
 800161c:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8001620:	4628      	mov	r0, r5
 8001622:	00c3      	lsls	r3, r0, #3
 8001624:	4620      	mov	r0, r4
 8001626:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800162a:	4620      	mov	r0, r4
 800162c:	00c2      	lsls	r2, r0, #3
 800162e:	460a      	mov	r2, r1
 8001630:	2300      	movs	r3, #0
 8001632:	623a      	str	r2, [r7, #32]
 8001634:	627b      	str	r3, [r7, #36]	; 0x24
 8001636:	f04f 0200 	mov.w	r2, #0
 800163a:	f04f 0300 	mov.w	r3, #0
 800163e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001642:	4628      	mov	r0, r5
 8001644:	00c3      	lsls	r3, r0, #3
 8001646:	4620      	mov	r0, r4
 8001648:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800164c:	4620      	mov	r0, r4
 800164e:	00c2      	lsls	r2, r0, #3
 8001650:	6039      	str	r1, [r7, #0]
 8001652:	460b      	mov	r3, r1
 8001654:	3307      	adds	r3, #7
 8001656:	08db      	lsrs	r3, r3, #3
 8001658:	00db      	lsls	r3, r3, #3
 800165a:	ebad 0d03 	sub.w	sp, sp, r3
 800165e:	466b      	mov	r3, sp
 8001660:	3300      	adds	r3, #0
 8001662:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001666:	f8d7 60b8 	ldr.w	r6, [r7, #184]	; 0xb8
 800166a:	1e73      	subs	r3, r6, #1
 800166c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001670:	4632      	mov	r2, r6
 8001672:	2300      	movs	r3, #0
 8001674:	61ba      	str	r2, [r7, #24]
 8001676:	61fb      	str	r3, [r7, #28]
 8001678:	f04f 0200 	mov.w	r2, #0
 800167c:	f04f 0300 	mov.w	r3, #0
 8001680:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8001684:	4628      	mov	r0, r5
 8001686:	00c3      	lsls	r3, r0, #3
 8001688:	4620      	mov	r0, r4
 800168a:	4629      	mov	r1, r5
 800168c:	4604      	mov	r4, r0
 800168e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001692:	00c2      	lsls	r2, r0, #3
 8001694:	4632      	mov	r2, r6
 8001696:	2300      	movs	r3, #0
 8001698:	613a      	str	r2, [r7, #16]
 800169a:	617b      	str	r3, [r7, #20]
 800169c:	f04f 0200 	mov.w	r2, #0
 80016a0:	f04f 0300 	mov.w	r3, #0
 80016a4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80016a8:	4628      	mov	r0, r5
 80016aa:	00c3      	lsls	r3, r0, #3
 80016ac:	4620      	mov	r0, r4
 80016ae:	4629      	mov	r1, r5
 80016b0:	4604      	mov	r4, r0
 80016b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80016b6:	00c2      	lsls	r2, r0, #3
 80016b8:	4633      	mov	r3, r6
 80016ba:	3307      	adds	r3, #7
 80016bc:	08db      	lsrs	r3, r3, #3
 80016be:	00db      	lsls	r3, r3, #3
 80016c0:	ebad 0d03 	sub.w	sp, sp, r3
 80016c4:	466b      	mov	r3, sp
 80016c6:	3300      	adds	r3, #0
 80016c8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	     	 sprintf(str_a3, "%.7f", b3);
 80016cc:	4b58      	ldr	r3, [pc, #352]	; (8001830 <main+0xa78>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4618      	mov	r0, r3
 80016d2:	f7fe ff5d 	bl	8000590 <__aeabi_f2d>
 80016d6:	4602      	mov	r2, r0
 80016d8:	460b      	mov	r3, r1
 80016da:	4950      	ldr	r1, [pc, #320]	; (800181c <main+0xa64>)
 80016dc:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 80016e0:	f003 f8da 	bl	8004898 <siprintf>
	     	 sprintf(str_a4, "%.7f", b4);
 80016e4:	4b53      	ldr	r3, [pc, #332]	; (8001834 <main+0xa7c>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4618      	mov	r0, r3
 80016ea:	f7fe ff51 	bl	8000590 <__aeabi_f2d>
 80016ee:	4602      	mov	r2, r0
 80016f0:	460b      	mov	r3, r1
 80016f2:	494a      	ldr	r1, [pc, #296]	; (800181c <main+0xa64>)
 80016f4:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 80016f8:	f003 f8ce 	bl	8004898 <siprintf>

	     	 char str_a5[length5], str_a6[length6];
 80016fc:	f8d7 50b4 	ldr.w	r5, [r7, #180]	; 0xb4
 8001700:	1e6b      	subs	r3, r5, #1
 8001702:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8001706:	462a      	mov	r2, r5
 8001708:	2300      	movs	r3, #0
 800170a:	66ba      	str	r2, [r7, #104]	; 0x68
 800170c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800170e:	f04f 0200 	mov.w	r2, #0
 8001712:	f04f 0300 	mov.w	r3, #0
 8001716:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8001718:	00c3      	lsls	r3, r0, #3
 800171a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800171e:	4604      	mov	r4, r0
 8001720:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001724:	00c2      	lsls	r2, r0, #3
 8001726:	462a      	mov	r2, r5
 8001728:	2300      	movs	r3, #0
 800172a:	663a      	str	r2, [r7, #96]	; 0x60
 800172c:	667b      	str	r3, [r7, #100]	; 0x64
 800172e:	f04f 0200 	mov.w	r2, #0
 8001732:	f04f 0300 	mov.w	r3, #0
 8001736:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8001738:	00c3      	lsls	r3, r0, #3
 800173a:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800173e:	4604      	mov	r4, r0
 8001740:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001744:	00c2      	lsls	r2, r0, #3
 8001746:	462b      	mov	r3, r5
 8001748:	3307      	adds	r3, #7
 800174a:	08db      	lsrs	r3, r3, #3
 800174c:	00db      	lsls	r3, r3, #3
 800174e:	ebad 0d03 	sub.w	sp, sp, r3
 8001752:	466b      	mov	r3, sp
 8001754:	3300      	adds	r3, #0
 8001756:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800175a:	f8d7 40b0 	ldr.w	r4, [r7, #176]	; 0xb0
 800175e:	1e63      	subs	r3, r4, #1
 8001760:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001764:	4622      	mov	r2, r4
 8001766:	2300      	movs	r3, #0
 8001768:	65ba      	str	r2, [r7, #88]	; 0x58
 800176a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800176c:	f04f 0200 	mov.w	r2, #0
 8001770:	f04f 0300 	mov.w	r3, #0
 8001774:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8001776:	00c3      	lsls	r3, r0, #3
 8001778:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800177c:	4684      	mov	ip, r0
 800177e:	ea43 735c 	orr.w	r3, r3, ip, lsr #29
 8001782:	00c2      	lsls	r2, r0, #3
 8001784:	4622      	mov	r2, r4
 8001786:	2300      	movs	r3, #0
 8001788:	653a      	str	r2, [r7, #80]	; 0x50
 800178a:	657b      	str	r3, [r7, #84]	; 0x54
 800178c:	f04f 0200 	mov.w	r2, #0
 8001790:	f04f 0300 	mov.w	r3, #0
 8001794:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8001796:	00c3      	lsls	r3, r0, #3
 8001798:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800179c:	4684      	mov	ip, r0
 800179e:	ea43 735c 	orr.w	r3, r3, ip, lsr #29
 80017a2:	00c2      	lsls	r2, r0, #3
 80017a4:	4623      	mov	r3, r4
 80017a6:	3307      	adds	r3, #7
 80017a8:	08db      	lsrs	r3, r3, #3
 80017aa:	00db      	lsls	r3, r3, #3
 80017ac:	ebad 0d03 	sub.w	sp, sp, r3
 80017b0:	466b      	mov	r3, sp
 80017b2:	3300      	adds	r3, #0
 80017b4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	     	 sprintf(str_a5, "%.7f", b5);
 80017b8:	4b1f      	ldr	r3, [pc, #124]	; (8001838 <main+0xa80>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4618      	mov	r0, r3
 80017be:	f7fe fee7 	bl	8000590 <__aeabi_f2d>
 80017c2:	4602      	mov	r2, r0
 80017c4:	460b      	mov	r3, r1
 80017c6:	4915      	ldr	r1, [pc, #84]	; (800181c <main+0xa64>)
 80017c8:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 80017cc:	f003 f864 	bl	8004898 <siprintf>
	     	 sprintf(str_a6, "%.7f", b6);
 80017d0:	4b1a      	ldr	r3, [pc, #104]	; (800183c <main+0xa84>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4618      	mov	r0, r3
 80017d6:	f7fe fedb 	bl	8000590 <__aeabi_f2d>
 80017da:	4602      	mov	r2, r0
 80017dc:	460b      	mov	r3, r1
 80017de:	490f      	ldr	r1, [pc, #60]	; (800181c <main+0xa64>)
 80017e0:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 80017e4:	f003 f858 	bl	8004898 <siprintf>

	     	 // tính tổng size cho mảng data_out
	     	 uint16_t size_data_out = sizeof(str_a1) + sizeof(str_a2)  + sizeof(str_a3) + sizeof(str_a4)+ sizeof(str_a5) + sizeof(str_a6) + 6;
 80017e8:	893a      	ldrh	r2, [r7, #8]
 80017ea:	88bb      	ldrh	r3, [r7, #4]
 80017ec:	4413      	add	r3, r2
 80017ee:	b29a      	uxth	r2, r3
 80017f0:	883b      	ldrh	r3, [r7, #0]
 80017f2:	4413      	add	r3, r2
 80017f4:	b29a      	uxth	r2, r3
 80017f6:	b2b3      	uxth	r3, r6
 80017f8:	4413      	add	r3, r2
 80017fa:	b29a      	uxth	r2, r3
 80017fc:	b2ab      	uxth	r3, r5
 80017fe:	4413      	add	r3, r2
 8001800:	b29a      	uxth	r2, r3
 8001802:	b2a3      	uxth	r3, r4
 8001804:	4413      	add	r3, r2
 8001806:	b29b      	uxth	r3, r3
 8001808:	3306      	adds	r3, #6
 800180a:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e


	     	 // ghép lần lượt các chuỗi  vào dataout
	     	 char data_out[size_data_out];
 800180e:	f8b7 107e 	ldrh.w	r1, [r7, #126]	; 0x7e
 8001812:	460b      	mov	r3, r1
 8001814:	3b01      	subs	r3, #1
 8001816:	67bb      	str	r3, [r7, #120]	; 0x78
 8001818:	b28b      	uxth	r3, r1
 800181a:	e011      	b.n	8001840 <main+0xa88>
 800181c:	080092e8 	.word	0x080092e8
 8001820:	20000340 	.word	0x20000340
 8001824:	2000030c 	.word	0x2000030c
 8001828:	200003a8 	.word	0x200003a8
 800182c:	200003ac 	.word	0x200003ac
 8001830:	200003b0 	.word	0x200003b0
 8001834:	200003b4 	.word	0x200003b4
 8001838:	200003b8 	.word	0x200003b8
 800183c:	200003bc 	.word	0x200003bc
 8001840:	2200      	movs	r2, #0
 8001842:	469a      	mov	sl, r3
 8001844:	4693      	mov	fp, r2
 8001846:	f04f 0200 	mov.w	r2, #0
 800184a:	f04f 0300 	mov.w	r3, #0
 800184e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001852:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001856:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800185a:	b28b      	uxth	r3, r1
 800185c:	2200      	movs	r2, #0
 800185e:	4698      	mov	r8, r3
 8001860:	4691      	mov	r9, r2
 8001862:	f04f 0200 	mov.w	r2, #0
 8001866:	f04f 0300 	mov.w	r3, #0
 800186a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800186e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001872:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001876:	460b      	mov	r3, r1
 8001878:	3307      	adds	r3, #7
 800187a:	08db      	lsrs	r3, r3, #3
 800187c:	00db      	lsls	r3, r3, #3
 800187e:	ebad 0d03 	sub.w	sp, sp, r3
 8001882:	466b      	mov	r3, sp
 8001884:	3300      	adds	r3, #0
 8001886:	677b      	str	r3, [r7, #116]	; 0x74
	     	 strcpy(data_out, str_a1);
 8001888:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 800188c:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800188e:	f003 f8f4 	bl	8004a7a <strcpy>
	     	 strcat(data_out, ";");
 8001892:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8001894:	f7fe fc5c 	bl	8000150 <strlen>
 8001898:	4603      	mov	r3, r0
 800189a:	461a      	mov	r2, r3
 800189c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800189e:	4413      	add	r3, r2
 80018a0:	493d      	ldr	r1, [pc, #244]	; (8001998 <main+0xbe0>)
 80018a2:	461a      	mov	r2, r3
 80018a4:	460b      	mov	r3, r1
 80018a6:	881b      	ldrh	r3, [r3, #0]
 80018a8:	8013      	strh	r3, [r2, #0]
	     	 strcat(data_out, str_a2);
 80018aa:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 80018ae:	6f78      	ldr	r0, [r7, #116]	; 0x74
 80018b0:	f003 f85d 	bl	800496e <strcat>
	     	 strcat(data_out, ";");
 80018b4:	6f78      	ldr	r0, [r7, #116]	; 0x74
 80018b6:	f7fe fc4b 	bl	8000150 <strlen>
 80018ba:	4603      	mov	r3, r0
 80018bc:	461a      	mov	r2, r3
 80018be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80018c0:	4413      	add	r3, r2
 80018c2:	4935      	ldr	r1, [pc, #212]	; (8001998 <main+0xbe0>)
 80018c4:	461a      	mov	r2, r3
 80018c6:	460b      	mov	r3, r1
 80018c8:	881b      	ldrh	r3, [r3, #0]
 80018ca:	8013      	strh	r3, [r2, #0]

	     	 strcat(data_out, str_a3);
 80018cc:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 80018d0:	6f78      	ldr	r0, [r7, #116]	; 0x74
 80018d2:	f003 f84c 	bl	800496e <strcat>
	     	 strcat(data_out, ";");
 80018d6:	6f78      	ldr	r0, [r7, #116]	; 0x74
 80018d8:	f7fe fc3a 	bl	8000150 <strlen>
 80018dc:	4603      	mov	r3, r0
 80018de:	461a      	mov	r2, r3
 80018e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80018e2:	4413      	add	r3, r2
 80018e4:	492c      	ldr	r1, [pc, #176]	; (8001998 <main+0xbe0>)
 80018e6:	461a      	mov	r2, r3
 80018e8:	460b      	mov	r3, r1
 80018ea:	881b      	ldrh	r3, [r3, #0]
 80018ec:	8013      	strh	r3, [r2, #0]
	     	 strcat(data_out, str_a4);
 80018ee:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80018f2:	6f78      	ldr	r0, [r7, #116]	; 0x74
 80018f4:	f003 f83b 	bl	800496e <strcat>
	     	 strcat(data_out, ";");
 80018f8:	6f78      	ldr	r0, [r7, #116]	; 0x74
 80018fa:	f7fe fc29 	bl	8000150 <strlen>
 80018fe:	4603      	mov	r3, r0
 8001900:	461a      	mov	r2, r3
 8001902:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001904:	4413      	add	r3, r2
 8001906:	4924      	ldr	r1, [pc, #144]	; (8001998 <main+0xbe0>)
 8001908:	461a      	mov	r2, r3
 800190a:	460b      	mov	r3, r1
 800190c:	881b      	ldrh	r3, [r3, #0]
 800190e:	8013      	strh	r3, [r2, #0]

	     	 strcat(data_out, str_a5);
 8001910:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8001914:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8001916:	f003 f82a 	bl	800496e <strcat>
	     	 strcat(data_out, ";");
 800191a:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800191c:	f7fe fc18 	bl	8000150 <strlen>
 8001920:	4603      	mov	r3, r0
 8001922:	461a      	mov	r2, r3
 8001924:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001926:	4413      	add	r3, r2
 8001928:	491b      	ldr	r1, [pc, #108]	; (8001998 <main+0xbe0>)
 800192a:	461a      	mov	r2, r3
 800192c:	460b      	mov	r3, r1
 800192e:	881b      	ldrh	r3, [r3, #0]
 8001930:	8013      	strh	r3, [r2, #0]
	     	 strcat(data_out, str_a6);
 8001932:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8001936:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8001938:	f003 f819 	bl	800496e <strcat>
	     	 strcat(data_out, ";");
 800193c:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800193e:	f7fe fc07 	bl	8000150 <strlen>
 8001942:	4603      	mov	r3, r0
 8001944:	461a      	mov	r2, r3
 8001946:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001948:	4413      	add	r3, r2
 800194a:	4913      	ldr	r1, [pc, #76]	; (8001998 <main+0xbe0>)
 800194c:	461a      	mov	r2, r3
 800194e:	460b      	mov	r3, r1
 8001950:	881b      	ldrh	r3, [r3, #0]
 8001952:	8013      	strh	r3, [r2, #0]

	     	 HAL_UART_Transmit(&huart1, data_out, size_data_out , 100);
 8001954:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 8001958:	2364      	movs	r3, #100	; 0x64
 800195a:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800195c:	480f      	ldr	r0, [pc, #60]	; (800199c <main+0xbe4>)
 800195e:	f001 fa99 	bl	8002e94 <HAL_UART_Transmit>

	          t +=0.1;
 8001962:	4b0f      	ldr	r3, [pc, #60]	; (80019a0 <main+0xbe8>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4618      	mov	r0, r3
 8001968:	f7fe fe12 	bl	8000590 <__aeabi_f2d>
 800196c:	a308      	add	r3, pc, #32	; (adr r3, 8001990 <main+0xbd8>)
 800196e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001972:	f7fe fcaf 	bl	80002d4 <__adddf3>
 8001976:	4602      	mov	r2, r0
 8001978:	460b      	mov	r3, r1
 800197a:	4610      	mov	r0, r2
 800197c:	4619      	mov	r1, r3
 800197e:	f7ff f957 	bl	8000c30 <__aeabi_d2f>
 8001982:	4602      	mov	r2, r0
 8001984:	4b06      	ldr	r3, [pc, #24]	; (80019a0 <main+0xbe8>)
 8001986:	601a      	str	r2, [r3, #0]
 8001988:	f8d7 d00c 	ldr.w	sp, [r7, #12]
  {
 800198c:	f7ff ba20 	b.w	8000dd0 <main+0x18>
 8001990:	9999999a 	.word	0x9999999a
 8001994:	3fb99999 	.word	0x3fb99999
 8001998:	080092f0 	.word	0x080092f0
 800199c:	200001f4 	.word	0x200001f4
 80019a0:	20000374 	.word	0x20000374

080019a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b090      	sub	sp, #64	; 0x40
 80019a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019aa:	f107 0318 	add.w	r3, r7, #24
 80019ae:	2228      	movs	r2, #40	; 0x28
 80019b0:	2100      	movs	r1, #0
 80019b2:	4618      	mov	r0, r3
 80019b4:	f002 ffd3 	bl	800495e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019b8:	1d3b      	adds	r3, r7, #4
 80019ba:	2200      	movs	r2, #0
 80019bc:	601a      	str	r2, [r3, #0]
 80019be:	605a      	str	r2, [r3, #4]
 80019c0:	609a      	str	r2, [r3, #8]
 80019c2:	60da      	str	r2, [r3, #12]
 80019c4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80019c6:	2302      	movs	r3, #2
 80019c8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80019ca:	2301      	movs	r3, #1
 80019cc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80019ce:	2310      	movs	r3, #16
 80019d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80019d2:	2300      	movs	r3, #0
 80019d4:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019d6:	f107 0318 	add.w	r3, r7, #24
 80019da:	4618      	mov	r0, r3
 80019dc:	f000 fdfa 	bl	80025d4 <HAL_RCC_OscConfig>
 80019e0:	4603      	mov	r3, r0
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d001      	beq.n	80019ea <SystemClock_Config+0x46>
  {
    Error_Handler();
 80019e6:	f000 f885 	bl	8001af4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019ea:	230f      	movs	r3, #15
 80019ec:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80019ee:	2300      	movs	r3, #0
 80019f0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019f2:	2300      	movs	r3, #0
 80019f4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80019f6:	2300      	movs	r3, #0
 80019f8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80019fa:	2300      	movs	r3, #0
 80019fc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80019fe:	1d3b      	adds	r3, r7, #4
 8001a00:	2100      	movs	r1, #0
 8001a02:	4618      	mov	r0, r3
 8001a04:	f001 f868 	bl	8002ad8 <HAL_RCC_ClockConfig>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d001      	beq.n	8001a12 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001a0e:	f000 f871 	bl	8001af4 <Error_Handler>
  }
}
 8001a12:	bf00      	nop
 8001a14:	3740      	adds	r7, #64	; 0x40
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
	...

08001a1c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001a20:	4b11      	ldr	r3, [pc, #68]	; (8001a68 <MX_USART1_UART_Init+0x4c>)
 8001a22:	4a12      	ldr	r2, [pc, #72]	; (8001a6c <MX_USART1_UART_Init+0x50>)
 8001a24:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001a26:	4b10      	ldr	r3, [pc, #64]	; (8001a68 <MX_USART1_UART_Init+0x4c>)
 8001a28:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001a2c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001a2e:	4b0e      	ldr	r3, [pc, #56]	; (8001a68 <MX_USART1_UART_Init+0x4c>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001a34:	4b0c      	ldr	r3, [pc, #48]	; (8001a68 <MX_USART1_UART_Init+0x4c>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001a3a:	4b0b      	ldr	r3, [pc, #44]	; (8001a68 <MX_USART1_UART_Init+0x4c>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001a40:	4b09      	ldr	r3, [pc, #36]	; (8001a68 <MX_USART1_UART_Init+0x4c>)
 8001a42:	220c      	movs	r2, #12
 8001a44:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a46:	4b08      	ldr	r3, [pc, #32]	; (8001a68 <MX_USART1_UART_Init+0x4c>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a4c:	4b06      	ldr	r3, [pc, #24]	; (8001a68 <MX_USART1_UART_Init+0x4c>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001a52:	4805      	ldr	r0, [pc, #20]	; (8001a68 <MX_USART1_UART_Init+0x4c>)
 8001a54:	f001 f9ce 	bl	8002df4 <HAL_UART_Init>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d001      	beq.n	8001a62 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001a5e:	f000 f849 	bl	8001af4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001a62:	bf00      	nop
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	200001f4 	.word	0x200001f4
 8001a6c:	40013800 	.word	0x40013800

08001a70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b086      	sub	sp, #24
 8001a74:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a76:	f107 0308 	add.w	r3, r7, #8
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	601a      	str	r2, [r3, #0]
 8001a7e:	605a      	str	r2, [r3, #4]
 8001a80:	609a      	str	r2, [r3, #8]
 8001a82:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a84:	4b18      	ldr	r3, [pc, #96]	; (8001ae8 <MX_GPIO_Init+0x78>)
 8001a86:	699b      	ldr	r3, [r3, #24]
 8001a88:	4a17      	ldr	r2, [pc, #92]	; (8001ae8 <MX_GPIO_Init+0x78>)
 8001a8a:	f043 0304 	orr.w	r3, r3, #4
 8001a8e:	6193      	str	r3, [r2, #24]
 8001a90:	4b15      	ldr	r3, [pc, #84]	; (8001ae8 <MX_GPIO_Init+0x78>)
 8001a92:	699b      	ldr	r3, [r3, #24]
 8001a94:	f003 0304 	and.w	r3, r3, #4
 8001a98:	607b      	str	r3, [r7, #4]
 8001a9a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a9c:	4b12      	ldr	r3, [pc, #72]	; (8001ae8 <MX_GPIO_Init+0x78>)
 8001a9e:	699b      	ldr	r3, [r3, #24]
 8001aa0:	4a11      	ldr	r2, [pc, #68]	; (8001ae8 <MX_GPIO_Init+0x78>)
 8001aa2:	f043 0308 	orr.w	r3, r3, #8
 8001aa6:	6193      	str	r3, [r2, #24]
 8001aa8:	4b0f      	ldr	r3, [pc, #60]	; (8001ae8 <MX_GPIO_Init+0x78>)
 8001aaa:	699b      	ldr	r3, [r3, #24]
 8001aac:	f003 0308 	and.w	r3, r3, #8
 8001ab0:	603b      	str	r3, [r7, #0]
 8001ab2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001ab4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ab8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001aba:	4b0c      	ldr	r3, [pc, #48]	; (8001aec <MX_GPIO_Init+0x7c>)
 8001abc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ac2:	f107 0308 	add.w	r3, r7, #8
 8001ac6:	4619      	mov	r1, r3
 8001ac8:	4809      	ldr	r0, [pc, #36]	; (8001af0 <MX_GPIO_Init+0x80>)
 8001aca:	f000 fbe7 	bl	800229c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 2, 0);
 8001ace:	2200      	movs	r2, #0
 8001ad0:	2102      	movs	r1, #2
 8001ad2:	2017      	movs	r0, #23
 8001ad4:	f000 faf9 	bl	80020ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001ad8:	2017      	movs	r0, #23
 8001ada:	f000 fb12 	bl	8002102 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001ade:	bf00      	nop
 8001ae0:	3718      	adds	r7, #24
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	40021000 	.word	0x40021000
 8001aec:	10210000 	.word	0x10210000
 8001af0:	40010c00 	.word	0x40010c00

08001af4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001af4:	b480      	push	{r7}
 8001af6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001af8:	b672      	cpsid	i
}
 8001afa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001afc:	e7fe      	b.n	8001afc <Error_Handler+0x8>
	...

08001b00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b085      	sub	sp, #20
 8001b04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001b06:	4b15      	ldr	r3, [pc, #84]	; (8001b5c <HAL_MspInit+0x5c>)
 8001b08:	699b      	ldr	r3, [r3, #24]
 8001b0a:	4a14      	ldr	r2, [pc, #80]	; (8001b5c <HAL_MspInit+0x5c>)
 8001b0c:	f043 0301 	orr.w	r3, r3, #1
 8001b10:	6193      	str	r3, [r2, #24]
 8001b12:	4b12      	ldr	r3, [pc, #72]	; (8001b5c <HAL_MspInit+0x5c>)
 8001b14:	699b      	ldr	r3, [r3, #24]
 8001b16:	f003 0301 	and.w	r3, r3, #1
 8001b1a:	60bb      	str	r3, [r7, #8]
 8001b1c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b1e:	4b0f      	ldr	r3, [pc, #60]	; (8001b5c <HAL_MspInit+0x5c>)
 8001b20:	69db      	ldr	r3, [r3, #28]
 8001b22:	4a0e      	ldr	r2, [pc, #56]	; (8001b5c <HAL_MspInit+0x5c>)
 8001b24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b28:	61d3      	str	r3, [r2, #28]
 8001b2a:	4b0c      	ldr	r3, [pc, #48]	; (8001b5c <HAL_MspInit+0x5c>)
 8001b2c:	69db      	ldr	r3, [r3, #28]
 8001b2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b32:	607b      	str	r3, [r7, #4]
 8001b34:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001b36:	4b0a      	ldr	r3, [pc, #40]	; (8001b60 <HAL_MspInit+0x60>)
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	60fb      	str	r3, [r7, #12]
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001b42:	60fb      	str	r3, [r7, #12]
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001b4a:	60fb      	str	r3, [r7, #12]
 8001b4c:	4a04      	ldr	r2, [pc, #16]	; (8001b60 <HAL_MspInit+0x60>)
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b52:	bf00      	nop
 8001b54:	3714      	adds	r7, #20
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bc80      	pop	{r7}
 8001b5a:	4770      	bx	lr
 8001b5c:	40021000 	.word	0x40021000
 8001b60:	40010000 	.word	0x40010000

08001b64 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b088      	sub	sp, #32
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b6c:	f107 0310 	add.w	r3, r7, #16
 8001b70:	2200      	movs	r2, #0
 8001b72:	601a      	str	r2, [r3, #0]
 8001b74:	605a      	str	r2, [r3, #4]
 8001b76:	609a      	str	r2, [r3, #8]
 8001b78:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4a20      	ldr	r2, [pc, #128]	; (8001c00 <HAL_UART_MspInit+0x9c>)
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d139      	bne.n	8001bf8 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001b84:	4b1f      	ldr	r3, [pc, #124]	; (8001c04 <HAL_UART_MspInit+0xa0>)
 8001b86:	699b      	ldr	r3, [r3, #24]
 8001b88:	4a1e      	ldr	r2, [pc, #120]	; (8001c04 <HAL_UART_MspInit+0xa0>)
 8001b8a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b8e:	6193      	str	r3, [r2, #24]
 8001b90:	4b1c      	ldr	r3, [pc, #112]	; (8001c04 <HAL_UART_MspInit+0xa0>)
 8001b92:	699b      	ldr	r3, [r3, #24]
 8001b94:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b98:	60fb      	str	r3, [r7, #12]
 8001b9a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b9c:	4b19      	ldr	r3, [pc, #100]	; (8001c04 <HAL_UART_MspInit+0xa0>)
 8001b9e:	699b      	ldr	r3, [r3, #24]
 8001ba0:	4a18      	ldr	r2, [pc, #96]	; (8001c04 <HAL_UART_MspInit+0xa0>)
 8001ba2:	f043 0304 	orr.w	r3, r3, #4
 8001ba6:	6193      	str	r3, [r2, #24]
 8001ba8:	4b16      	ldr	r3, [pc, #88]	; (8001c04 <HAL_UART_MspInit+0xa0>)
 8001baa:	699b      	ldr	r3, [r3, #24]
 8001bac:	f003 0304 	and.w	r3, r3, #4
 8001bb0:	60bb      	str	r3, [r7, #8]
 8001bb2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001bb4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001bb8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bba:	2302      	movs	r3, #2
 8001bbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001bbe:	2303      	movs	r3, #3
 8001bc0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bc2:	f107 0310 	add.w	r3, r7, #16
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	480f      	ldr	r0, [pc, #60]	; (8001c08 <HAL_UART_MspInit+0xa4>)
 8001bca:	f000 fb67 	bl	800229c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001bce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001bd2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bdc:	f107 0310 	add.w	r3, r7, #16
 8001be0:	4619      	mov	r1, r3
 8001be2:	4809      	ldr	r0, [pc, #36]	; (8001c08 <HAL_UART_MspInit+0xa4>)
 8001be4:	f000 fb5a 	bl	800229c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 8001be8:	2200      	movs	r2, #0
 8001bea:	2101      	movs	r1, #1
 8001bec:	2025      	movs	r0, #37	; 0x25
 8001bee:	f000 fa6c 	bl	80020ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001bf2:	2025      	movs	r0, #37	; 0x25
 8001bf4:	f000 fa85 	bl	8002102 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001bf8:	bf00      	nop
 8001bfa:	3720      	adds	r7, #32
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}
 8001c00:	40013800 	.word	0x40013800
 8001c04:	40021000 	.word	0x40021000
 8001c08:	40010800 	.word	0x40010800

08001c0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001c10:	e7fe      	b.n	8001c10 <NMI_Handler+0x4>

08001c12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c12:	b480      	push	{r7}
 8001c14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c16:	e7fe      	b.n	8001c16 <HardFault_Handler+0x4>

08001c18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c1c:	e7fe      	b.n	8001c1c <MemManage_Handler+0x4>

08001c1e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c1e:	b480      	push	{r7}
 8001c20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c22:	e7fe      	b.n	8001c22 <BusFault_Handler+0x4>

08001c24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c24:	b480      	push	{r7}
 8001c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c28:	e7fe      	b.n	8001c28 <UsageFault_Handler+0x4>

08001c2a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c2a:	b480      	push	{r7}
 8001c2c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c2e:	bf00      	nop
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bc80      	pop	{r7}
 8001c34:	4770      	bx	lr

08001c36 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c36:	b480      	push	{r7}
 8001c38:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c3a:	bf00      	nop
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bc80      	pop	{r7}
 8001c40:	4770      	bx	lr

08001c42 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c42:	b480      	push	{r7}
 8001c44:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c46:	bf00      	nop
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bc80      	pop	{r7}
 8001c4c:	4770      	bx	lr

08001c4e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c4e:	b580      	push	{r7, lr}
 8001c50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c52:	f000 f947 	bl	8001ee4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c56:	bf00      	nop
 8001c58:	bd80      	pop	{r7, pc}

08001c5a <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001c5a:	b580      	push	{r7, lr}
 8001c5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8001c5e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001c62:	f000 fc9f 	bl	80025a4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001c66:	bf00      	nop
 8001c68:	bd80      	pop	{r7, pc}
	...

08001c6c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001c70:	4802      	ldr	r0, [pc, #8]	; (8001c7c <USART1_IRQHandler+0x10>)
 8001c72:	f001 f993 	bl	8002f9c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001c76:	bf00      	nop
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	200001f4 	.word	0x200001f4

08001c80 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c80:	b480      	push	{r7}
 8001c82:	af00      	add	r7, sp, #0
  return 1;
 8001c84:	2301      	movs	r3, #1
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bc80      	pop	{r7}
 8001c8c:	4770      	bx	lr

08001c8e <_kill>:

int _kill(int pid, int sig)
{
 8001c8e:	b580      	push	{r7, lr}
 8001c90:	b082      	sub	sp, #8
 8001c92:	af00      	add	r7, sp, #0
 8001c94:	6078      	str	r0, [r7, #4]
 8001c96:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001c98:	f002 fec2 	bl	8004a20 <__errno>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	2216      	movs	r2, #22
 8001ca0:	601a      	str	r2, [r3, #0]
  return -1;
 8001ca2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	3708      	adds	r7, #8
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}

08001cae <_exit>:

void _exit (int status)
{
 8001cae:	b580      	push	{r7, lr}
 8001cb0:	b082      	sub	sp, #8
 8001cb2:	af00      	add	r7, sp, #0
 8001cb4:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001cb6:	f04f 31ff 	mov.w	r1, #4294967295
 8001cba:	6878      	ldr	r0, [r7, #4]
 8001cbc:	f7ff ffe7 	bl	8001c8e <_kill>
  while (1) {}    /* Make sure we hang here */
 8001cc0:	e7fe      	b.n	8001cc0 <_exit+0x12>

08001cc2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001cc2:	b580      	push	{r7, lr}
 8001cc4:	b086      	sub	sp, #24
 8001cc6:	af00      	add	r7, sp, #0
 8001cc8:	60f8      	str	r0, [r7, #12]
 8001cca:	60b9      	str	r1, [r7, #8]
 8001ccc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cce:	2300      	movs	r3, #0
 8001cd0:	617b      	str	r3, [r7, #20]
 8001cd2:	e00a      	b.n	8001cea <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001cd4:	f3af 8000 	nop.w
 8001cd8:	4601      	mov	r1, r0
 8001cda:	68bb      	ldr	r3, [r7, #8]
 8001cdc:	1c5a      	adds	r2, r3, #1
 8001cde:	60ba      	str	r2, [r7, #8]
 8001ce0:	b2ca      	uxtb	r2, r1
 8001ce2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	3301      	adds	r3, #1
 8001ce8:	617b      	str	r3, [r7, #20]
 8001cea:	697a      	ldr	r2, [r7, #20]
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	429a      	cmp	r2, r3
 8001cf0:	dbf0      	blt.n	8001cd4 <_read+0x12>
  }

  return len;
 8001cf2:	687b      	ldr	r3, [r7, #4]
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	3718      	adds	r7, #24
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}

08001cfc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b086      	sub	sp, #24
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	60f8      	str	r0, [r7, #12]
 8001d04:	60b9      	str	r1, [r7, #8]
 8001d06:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d08:	2300      	movs	r3, #0
 8001d0a:	617b      	str	r3, [r7, #20]
 8001d0c:	e009      	b.n	8001d22 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001d0e:	68bb      	ldr	r3, [r7, #8]
 8001d10:	1c5a      	adds	r2, r3, #1
 8001d12:	60ba      	str	r2, [r7, #8]
 8001d14:	781b      	ldrb	r3, [r3, #0]
 8001d16:	4618      	mov	r0, r3
 8001d18:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	3301      	adds	r3, #1
 8001d20:	617b      	str	r3, [r7, #20]
 8001d22:	697a      	ldr	r2, [r7, #20]
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	429a      	cmp	r2, r3
 8001d28:	dbf1      	blt.n	8001d0e <_write+0x12>
  }
  return len;
 8001d2a:	687b      	ldr	r3, [r7, #4]
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	3718      	adds	r7, #24
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}

08001d34 <_close>:

int _close(int file)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b083      	sub	sp, #12
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001d3c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	370c      	adds	r7, #12
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bc80      	pop	{r7}
 8001d48:	4770      	bx	lr

08001d4a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d4a:	b480      	push	{r7}
 8001d4c:	b083      	sub	sp, #12
 8001d4e:	af00      	add	r7, sp, #0
 8001d50:	6078      	str	r0, [r7, #4]
 8001d52:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d5a:	605a      	str	r2, [r3, #4]
  return 0;
 8001d5c:	2300      	movs	r3, #0
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	370c      	adds	r7, #12
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bc80      	pop	{r7}
 8001d66:	4770      	bx	lr

08001d68 <_isatty>:

int _isatty(int file)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b083      	sub	sp, #12
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001d70:	2301      	movs	r3, #1
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	370c      	adds	r7, #12
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bc80      	pop	{r7}
 8001d7a:	4770      	bx	lr

08001d7c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b085      	sub	sp, #20
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	60f8      	str	r0, [r7, #12]
 8001d84:	60b9      	str	r1, [r7, #8]
 8001d86:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001d88:	2300      	movs	r3, #0
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	3714      	adds	r7, #20
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bc80      	pop	{r7}
 8001d92:	4770      	bx	lr

08001d94 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b086      	sub	sp, #24
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d9c:	4a14      	ldr	r2, [pc, #80]	; (8001df0 <_sbrk+0x5c>)
 8001d9e:	4b15      	ldr	r3, [pc, #84]	; (8001df4 <_sbrk+0x60>)
 8001da0:	1ad3      	subs	r3, r2, r3
 8001da2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001da4:	697b      	ldr	r3, [r7, #20]
 8001da6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001da8:	4b13      	ldr	r3, [pc, #76]	; (8001df8 <_sbrk+0x64>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d102      	bne.n	8001db6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001db0:	4b11      	ldr	r3, [pc, #68]	; (8001df8 <_sbrk+0x64>)
 8001db2:	4a12      	ldr	r2, [pc, #72]	; (8001dfc <_sbrk+0x68>)
 8001db4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001db6:	4b10      	ldr	r3, [pc, #64]	; (8001df8 <_sbrk+0x64>)
 8001db8:	681a      	ldr	r2, [r3, #0]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	4413      	add	r3, r2
 8001dbe:	693a      	ldr	r2, [r7, #16]
 8001dc0:	429a      	cmp	r2, r3
 8001dc2:	d207      	bcs.n	8001dd4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001dc4:	f002 fe2c 	bl	8004a20 <__errno>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	220c      	movs	r2, #12
 8001dcc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001dce:	f04f 33ff 	mov.w	r3, #4294967295
 8001dd2:	e009      	b.n	8001de8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001dd4:	4b08      	ldr	r3, [pc, #32]	; (8001df8 <_sbrk+0x64>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001dda:	4b07      	ldr	r3, [pc, #28]	; (8001df8 <_sbrk+0x64>)
 8001ddc:	681a      	ldr	r2, [r3, #0]
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	4413      	add	r3, r2
 8001de2:	4a05      	ldr	r2, [pc, #20]	; (8001df8 <_sbrk+0x64>)
 8001de4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001de6:	68fb      	ldr	r3, [r7, #12]
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	3718      	adds	r7, #24
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}
 8001df0:	20005000 	.word	0x20005000
 8001df4:	00000400 	.word	0x00000400
 8001df8:	200003d8 	.word	0x200003d8
 8001dfc:	20000530 	.word	0x20000530

08001e00 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001e00:	b480      	push	{r7}
 8001e02:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e04:	bf00      	nop
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bc80      	pop	{r7}
 8001e0a:	4770      	bx	lr

08001e0c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001e0c:	f7ff fff8 	bl	8001e00 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e10:	480b      	ldr	r0, [pc, #44]	; (8001e40 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001e12:	490c      	ldr	r1, [pc, #48]	; (8001e44 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001e14:	4a0c      	ldr	r2, [pc, #48]	; (8001e48 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001e16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e18:	e002      	b.n	8001e20 <LoopCopyDataInit>

08001e1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e1e:	3304      	adds	r3, #4

08001e20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e24:	d3f9      	bcc.n	8001e1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e26:	4a09      	ldr	r2, [pc, #36]	; (8001e4c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001e28:	4c09      	ldr	r4, [pc, #36]	; (8001e50 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001e2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e2c:	e001      	b.n	8001e32 <LoopFillZerobss>

08001e2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e30:	3204      	adds	r2, #4

08001e32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e34:	d3fb      	bcc.n	8001e2e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e36:	f002 fdf9 	bl	8004a2c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001e3a:	f7fe ffbd 	bl	8000db8 <main>
  bx lr
 8001e3e:	4770      	bx	lr
  ldr r0, =_sdata
 8001e40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e44:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001e48:	08009928 	.word	0x08009928
  ldr r2, =_sbss
 8001e4c:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8001e50:	2000052c 	.word	0x2000052c

08001e54 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001e54:	e7fe      	b.n	8001e54 <ADC1_2_IRQHandler>
	...

08001e58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e5c:	4b08      	ldr	r3, [pc, #32]	; (8001e80 <HAL_Init+0x28>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a07      	ldr	r2, [pc, #28]	; (8001e80 <HAL_Init+0x28>)
 8001e62:	f043 0310 	orr.w	r3, r3, #16
 8001e66:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e68:	2003      	movs	r0, #3
 8001e6a:	f000 f923 	bl	80020b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e6e:	200f      	movs	r0, #15
 8001e70:	f000 f808 	bl	8001e84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e74:	f7ff fe44 	bl	8001b00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e78:	2300      	movs	r3, #0
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	40022000 	.word	0x40022000

08001e84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b082      	sub	sp, #8
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e8c:	4b12      	ldr	r3, [pc, #72]	; (8001ed8 <HAL_InitTick+0x54>)
 8001e8e:	681a      	ldr	r2, [r3, #0]
 8001e90:	4b12      	ldr	r3, [pc, #72]	; (8001edc <HAL_InitTick+0x58>)
 8001e92:	781b      	ldrb	r3, [r3, #0]
 8001e94:	4619      	mov	r1, r3
 8001e96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f000 f93b 	bl	800211e <HAL_SYSTICK_Config>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d001      	beq.n	8001eb2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e00e      	b.n	8001ed0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2b0f      	cmp	r3, #15
 8001eb6:	d80a      	bhi.n	8001ece <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001eb8:	2200      	movs	r2, #0
 8001eba:	6879      	ldr	r1, [r7, #4]
 8001ebc:	f04f 30ff 	mov.w	r0, #4294967295
 8001ec0:	f000 f903 	bl	80020ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ec4:	4a06      	ldr	r2, [pc, #24]	; (8001ee0 <HAL_InitTick+0x5c>)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	e000      	b.n	8001ed0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ece:	2301      	movs	r3, #1
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	3708      	adds	r7, #8
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}
 8001ed8:	20000000 	.word	0x20000000
 8001edc:	20000008 	.word	0x20000008
 8001ee0:	20000004 	.word	0x20000004

08001ee4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ee8:	4b05      	ldr	r3, [pc, #20]	; (8001f00 <HAL_IncTick+0x1c>)
 8001eea:	781b      	ldrb	r3, [r3, #0]
 8001eec:	461a      	mov	r2, r3
 8001eee:	4b05      	ldr	r3, [pc, #20]	; (8001f04 <HAL_IncTick+0x20>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4413      	add	r3, r2
 8001ef4:	4a03      	ldr	r2, [pc, #12]	; (8001f04 <HAL_IncTick+0x20>)
 8001ef6:	6013      	str	r3, [r2, #0]
}
 8001ef8:	bf00      	nop
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bc80      	pop	{r7}
 8001efe:	4770      	bx	lr
 8001f00:	20000008 	.word	0x20000008
 8001f04:	200003dc 	.word	0x200003dc

08001f08 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	af00      	add	r7, sp, #0
  return uwTick;
 8001f0c:	4b02      	ldr	r3, [pc, #8]	; (8001f18 <HAL_GetTick+0x10>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bc80      	pop	{r7}
 8001f16:	4770      	bx	lr
 8001f18:	200003dc 	.word	0x200003dc

08001f1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b085      	sub	sp, #20
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	f003 0307 	and.w	r3, r3, #7
 8001f2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f2c:	4b0c      	ldr	r3, [pc, #48]	; (8001f60 <__NVIC_SetPriorityGrouping+0x44>)
 8001f2e:	68db      	ldr	r3, [r3, #12]
 8001f30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f32:	68ba      	ldr	r2, [r7, #8]
 8001f34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f38:	4013      	ands	r3, r2
 8001f3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f40:	68bb      	ldr	r3, [r7, #8]
 8001f42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f4e:	4a04      	ldr	r2, [pc, #16]	; (8001f60 <__NVIC_SetPriorityGrouping+0x44>)
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	60d3      	str	r3, [r2, #12]
}
 8001f54:	bf00      	nop
 8001f56:	3714      	adds	r7, #20
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bc80      	pop	{r7}
 8001f5c:	4770      	bx	lr
 8001f5e:	bf00      	nop
 8001f60:	e000ed00 	.word	0xe000ed00

08001f64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f64:	b480      	push	{r7}
 8001f66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f68:	4b04      	ldr	r3, [pc, #16]	; (8001f7c <__NVIC_GetPriorityGrouping+0x18>)
 8001f6a:	68db      	ldr	r3, [r3, #12]
 8001f6c:	0a1b      	lsrs	r3, r3, #8
 8001f6e:	f003 0307 	and.w	r3, r3, #7
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bc80      	pop	{r7}
 8001f78:	4770      	bx	lr
 8001f7a:	bf00      	nop
 8001f7c:	e000ed00 	.word	0xe000ed00

08001f80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b083      	sub	sp, #12
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	4603      	mov	r3, r0
 8001f88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	db0b      	blt.n	8001faa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f92:	79fb      	ldrb	r3, [r7, #7]
 8001f94:	f003 021f 	and.w	r2, r3, #31
 8001f98:	4906      	ldr	r1, [pc, #24]	; (8001fb4 <__NVIC_EnableIRQ+0x34>)
 8001f9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f9e:	095b      	lsrs	r3, r3, #5
 8001fa0:	2001      	movs	r0, #1
 8001fa2:	fa00 f202 	lsl.w	r2, r0, r2
 8001fa6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001faa:	bf00      	nop
 8001fac:	370c      	adds	r7, #12
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bc80      	pop	{r7}
 8001fb2:	4770      	bx	lr
 8001fb4:	e000e100 	.word	0xe000e100

08001fb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b083      	sub	sp, #12
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	6039      	str	r1, [r7, #0]
 8001fc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	db0a      	blt.n	8001fe2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	b2da      	uxtb	r2, r3
 8001fd0:	490c      	ldr	r1, [pc, #48]	; (8002004 <__NVIC_SetPriority+0x4c>)
 8001fd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fd6:	0112      	lsls	r2, r2, #4
 8001fd8:	b2d2      	uxtb	r2, r2
 8001fda:	440b      	add	r3, r1
 8001fdc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fe0:	e00a      	b.n	8001ff8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	b2da      	uxtb	r2, r3
 8001fe6:	4908      	ldr	r1, [pc, #32]	; (8002008 <__NVIC_SetPriority+0x50>)
 8001fe8:	79fb      	ldrb	r3, [r7, #7]
 8001fea:	f003 030f 	and.w	r3, r3, #15
 8001fee:	3b04      	subs	r3, #4
 8001ff0:	0112      	lsls	r2, r2, #4
 8001ff2:	b2d2      	uxtb	r2, r2
 8001ff4:	440b      	add	r3, r1
 8001ff6:	761a      	strb	r2, [r3, #24]
}
 8001ff8:	bf00      	nop
 8001ffa:	370c      	adds	r7, #12
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bc80      	pop	{r7}
 8002000:	4770      	bx	lr
 8002002:	bf00      	nop
 8002004:	e000e100 	.word	0xe000e100
 8002008:	e000ed00 	.word	0xe000ed00

0800200c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800200c:	b480      	push	{r7}
 800200e:	b089      	sub	sp, #36	; 0x24
 8002010:	af00      	add	r7, sp, #0
 8002012:	60f8      	str	r0, [r7, #12]
 8002014:	60b9      	str	r1, [r7, #8]
 8002016:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	f003 0307 	and.w	r3, r3, #7
 800201e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002020:	69fb      	ldr	r3, [r7, #28]
 8002022:	f1c3 0307 	rsb	r3, r3, #7
 8002026:	2b04      	cmp	r3, #4
 8002028:	bf28      	it	cs
 800202a:	2304      	movcs	r3, #4
 800202c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800202e:	69fb      	ldr	r3, [r7, #28]
 8002030:	3304      	adds	r3, #4
 8002032:	2b06      	cmp	r3, #6
 8002034:	d902      	bls.n	800203c <NVIC_EncodePriority+0x30>
 8002036:	69fb      	ldr	r3, [r7, #28]
 8002038:	3b03      	subs	r3, #3
 800203a:	e000      	b.n	800203e <NVIC_EncodePriority+0x32>
 800203c:	2300      	movs	r3, #0
 800203e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002040:	f04f 32ff 	mov.w	r2, #4294967295
 8002044:	69bb      	ldr	r3, [r7, #24]
 8002046:	fa02 f303 	lsl.w	r3, r2, r3
 800204a:	43da      	mvns	r2, r3
 800204c:	68bb      	ldr	r3, [r7, #8]
 800204e:	401a      	ands	r2, r3
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002054:	f04f 31ff 	mov.w	r1, #4294967295
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	fa01 f303 	lsl.w	r3, r1, r3
 800205e:	43d9      	mvns	r1, r3
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002064:	4313      	orrs	r3, r2
         );
}
 8002066:	4618      	mov	r0, r3
 8002068:	3724      	adds	r7, #36	; 0x24
 800206a:	46bd      	mov	sp, r7
 800206c:	bc80      	pop	{r7}
 800206e:	4770      	bx	lr

08002070 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b082      	sub	sp, #8
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	3b01      	subs	r3, #1
 800207c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002080:	d301      	bcc.n	8002086 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002082:	2301      	movs	r3, #1
 8002084:	e00f      	b.n	80020a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002086:	4a0a      	ldr	r2, [pc, #40]	; (80020b0 <SysTick_Config+0x40>)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	3b01      	subs	r3, #1
 800208c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800208e:	210f      	movs	r1, #15
 8002090:	f04f 30ff 	mov.w	r0, #4294967295
 8002094:	f7ff ff90 	bl	8001fb8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002098:	4b05      	ldr	r3, [pc, #20]	; (80020b0 <SysTick_Config+0x40>)
 800209a:	2200      	movs	r2, #0
 800209c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800209e:	4b04      	ldr	r3, [pc, #16]	; (80020b0 <SysTick_Config+0x40>)
 80020a0:	2207      	movs	r2, #7
 80020a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020a4:	2300      	movs	r3, #0
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	3708      	adds	r7, #8
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	e000e010 	.word	0xe000e010

080020b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b082      	sub	sp, #8
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020bc:	6878      	ldr	r0, [r7, #4]
 80020be:	f7ff ff2d 	bl	8001f1c <__NVIC_SetPriorityGrouping>
}
 80020c2:	bf00      	nop
 80020c4:	3708      	adds	r7, #8
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}

080020ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020ca:	b580      	push	{r7, lr}
 80020cc:	b086      	sub	sp, #24
 80020ce:	af00      	add	r7, sp, #0
 80020d0:	4603      	mov	r3, r0
 80020d2:	60b9      	str	r1, [r7, #8]
 80020d4:	607a      	str	r2, [r7, #4]
 80020d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020d8:	2300      	movs	r3, #0
 80020da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020dc:	f7ff ff42 	bl	8001f64 <__NVIC_GetPriorityGrouping>
 80020e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020e2:	687a      	ldr	r2, [r7, #4]
 80020e4:	68b9      	ldr	r1, [r7, #8]
 80020e6:	6978      	ldr	r0, [r7, #20]
 80020e8:	f7ff ff90 	bl	800200c <NVIC_EncodePriority>
 80020ec:	4602      	mov	r2, r0
 80020ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020f2:	4611      	mov	r1, r2
 80020f4:	4618      	mov	r0, r3
 80020f6:	f7ff ff5f 	bl	8001fb8 <__NVIC_SetPriority>
}
 80020fa:	bf00      	nop
 80020fc:	3718      	adds	r7, #24
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}

08002102 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002102:	b580      	push	{r7, lr}
 8002104:	b082      	sub	sp, #8
 8002106:	af00      	add	r7, sp, #0
 8002108:	4603      	mov	r3, r0
 800210a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800210c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002110:	4618      	mov	r0, r3
 8002112:	f7ff ff35 	bl	8001f80 <__NVIC_EnableIRQ>
}
 8002116:	bf00      	nop
 8002118:	3708      	adds	r7, #8
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}

0800211e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800211e:	b580      	push	{r7, lr}
 8002120:	b082      	sub	sp, #8
 8002122:	af00      	add	r7, sp, #0
 8002124:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002126:	6878      	ldr	r0, [r7, #4]
 8002128:	f7ff ffa2 	bl	8002070 <SysTick_Config>
 800212c:	4603      	mov	r3, r0
}
 800212e:	4618      	mov	r0, r3
 8002130:	3708      	adds	r7, #8
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}

08002136 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002136:	b480      	push	{r7}
 8002138:	b085      	sub	sp, #20
 800213a:	af00      	add	r7, sp, #0
 800213c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800213e:	2300      	movs	r3, #0
 8002140:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002148:	b2db      	uxtb	r3, r3
 800214a:	2b02      	cmp	r3, #2
 800214c:	d008      	beq.n	8002160 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2204      	movs	r2, #4
 8002152:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2200      	movs	r2, #0
 8002158:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800215c:	2301      	movs	r3, #1
 800215e:	e020      	b.n	80021a2 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	681a      	ldr	r2, [r3, #0]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f022 020e 	bic.w	r2, r2, #14
 800216e:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	681a      	ldr	r2, [r3, #0]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f022 0201 	bic.w	r2, r2, #1
 800217e:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002188:	2101      	movs	r1, #1
 800218a:	fa01 f202 	lsl.w	r2, r1, r2
 800218e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2201      	movs	r2, #1
 8002194:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2200      	movs	r2, #0
 800219c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80021a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	3714      	adds	r7, #20
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bc80      	pop	{r7}
 80021aa:	4770      	bx	lr

080021ac <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b084      	sub	sp, #16
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021b4:	2300      	movs	r3, #0
 80021b6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80021be:	b2db      	uxtb	r3, r3
 80021c0:	2b02      	cmp	r3, #2
 80021c2:	d005      	beq.n	80021d0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2204      	movs	r2, #4
 80021c8:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	73fb      	strb	r3, [r7, #15]
 80021ce:	e051      	b.n	8002274 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	681a      	ldr	r2, [r3, #0]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f022 020e 	bic.w	r2, r2, #14
 80021de:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	681a      	ldr	r2, [r3, #0]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f022 0201 	bic.w	r2, r2, #1
 80021ee:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a22      	ldr	r2, [pc, #136]	; (8002280 <HAL_DMA_Abort_IT+0xd4>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d029      	beq.n	800224e <HAL_DMA_Abort_IT+0xa2>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4a21      	ldr	r2, [pc, #132]	; (8002284 <HAL_DMA_Abort_IT+0xd8>)
 8002200:	4293      	cmp	r3, r2
 8002202:	d022      	beq.n	800224a <HAL_DMA_Abort_IT+0x9e>
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a1f      	ldr	r2, [pc, #124]	; (8002288 <HAL_DMA_Abort_IT+0xdc>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d01a      	beq.n	8002244 <HAL_DMA_Abort_IT+0x98>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a1e      	ldr	r2, [pc, #120]	; (800228c <HAL_DMA_Abort_IT+0xe0>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d012      	beq.n	800223e <HAL_DMA_Abort_IT+0x92>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a1c      	ldr	r2, [pc, #112]	; (8002290 <HAL_DMA_Abort_IT+0xe4>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d00a      	beq.n	8002238 <HAL_DMA_Abort_IT+0x8c>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4a1b      	ldr	r2, [pc, #108]	; (8002294 <HAL_DMA_Abort_IT+0xe8>)
 8002228:	4293      	cmp	r3, r2
 800222a:	d102      	bne.n	8002232 <HAL_DMA_Abort_IT+0x86>
 800222c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002230:	e00e      	b.n	8002250 <HAL_DMA_Abort_IT+0xa4>
 8002232:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002236:	e00b      	b.n	8002250 <HAL_DMA_Abort_IT+0xa4>
 8002238:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800223c:	e008      	b.n	8002250 <HAL_DMA_Abort_IT+0xa4>
 800223e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002242:	e005      	b.n	8002250 <HAL_DMA_Abort_IT+0xa4>
 8002244:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002248:	e002      	b.n	8002250 <HAL_DMA_Abort_IT+0xa4>
 800224a:	2310      	movs	r3, #16
 800224c:	e000      	b.n	8002250 <HAL_DMA_Abort_IT+0xa4>
 800224e:	2301      	movs	r3, #1
 8002250:	4a11      	ldr	r2, [pc, #68]	; (8002298 <HAL_DMA_Abort_IT+0xec>)
 8002252:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2201      	movs	r2, #1
 8002258:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2200      	movs	r2, #0
 8002260:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002268:	2b00      	cmp	r3, #0
 800226a:	d003      	beq.n	8002274 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002270:	6878      	ldr	r0, [r7, #4]
 8002272:	4798      	blx	r3
    } 
  }
  return status;
 8002274:	7bfb      	ldrb	r3, [r7, #15]
}
 8002276:	4618      	mov	r0, r3
 8002278:	3710      	adds	r7, #16
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}
 800227e:	bf00      	nop
 8002280:	40020008 	.word	0x40020008
 8002284:	4002001c 	.word	0x4002001c
 8002288:	40020030 	.word	0x40020030
 800228c:	40020044 	.word	0x40020044
 8002290:	40020058 	.word	0x40020058
 8002294:	4002006c 	.word	0x4002006c
 8002298:	40020000 	.word	0x40020000

0800229c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800229c:	b480      	push	{r7}
 800229e:	b08b      	sub	sp, #44	; 0x2c
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
 80022a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80022a6:	2300      	movs	r3, #0
 80022a8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80022aa:	2300      	movs	r3, #0
 80022ac:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022ae:	e169      	b.n	8002584 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80022b0:	2201      	movs	r2, #1
 80022b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b4:	fa02 f303 	lsl.w	r3, r2, r3
 80022b8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	69fa      	ldr	r2, [r7, #28]
 80022c0:	4013      	ands	r3, r2
 80022c2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80022c4:	69ba      	ldr	r2, [r7, #24]
 80022c6:	69fb      	ldr	r3, [r7, #28]
 80022c8:	429a      	cmp	r2, r3
 80022ca:	f040 8158 	bne.w	800257e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	4a9a      	ldr	r2, [pc, #616]	; (800253c <HAL_GPIO_Init+0x2a0>)
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d05e      	beq.n	8002396 <HAL_GPIO_Init+0xfa>
 80022d8:	4a98      	ldr	r2, [pc, #608]	; (800253c <HAL_GPIO_Init+0x2a0>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d875      	bhi.n	80023ca <HAL_GPIO_Init+0x12e>
 80022de:	4a98      	ldr	r2, [pc, #608]	; (8002540 <HAL_GPIO_Init+0x2a4>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d058      	beq.n	8002396 <HAL_GPIO_Init+0xfa>
 80022e4:	4a96      	ldr	r2, [pc, #600]	; (8002540 <HAL_GPIO_Init+0x2a4>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d86f      	bhi.n	80023ca <HAL_GPIO_Init+0x12e>
 80022ea:	4a96      	ldr	r2, [pc, #600]	; (8002544 <HAL_GPIO_Init+0x2a8>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d052      	beq.n	8002396 <HAL_GPIO_Init+0xfa>
 80022f0:	4a94      	ldr	r2, [pc, #592]	; (8002544 <HAL_GPIO_Init+0x2a8>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d869      	bhi.n	80023ca <HAL_GPIO_Init+0x12e>
 80022f6:	4a94      	ldr	r2, [pc, #592]	; (8002548 <HAL_GPIO_Init+0x2ac>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d04c      	beq.n	8002396 <HAL_GPIO_Init+0xfa>
 80022fc:	4a92      	ldr	r2, [pc, #584]	; (8002548 <HAL_GPIO_Init+0x2ac>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d863      	bhi.n	80023ca <HAL_GPIO_Init+0x12e>
 8002302:	4a92      	ldr	r2, [pc, #584]	; (800254c <HAL_GPIO_Init+0x2b0>)
 8002304:	4293      	cmp	r3, r2
 8002306:	d046      	beq.n	8002396 <HAL_GPIO_Init+0xfa>
 8002308:	4a90      	ldr	r2, [pc, #576]	; (800254c <HAL_GPIO_Init+0x2b0>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d85d      	bhi.n	80023ca <HAL_GPIO_Init+0x12e>
 800230e:	2b12      	cmp	r3, #18
 8002310:	d82a      	bhi.n	8002368 <HAL_GPIO_Init+0xcc>
 8002312:	2b12      	cmp	r3, #18
 8002314:	d859      	bhi.n	80023ca <HAL_GPIO_Init+0x12e>
 8002316:	a201      	add	r2, pc, #4	; (adr r2, 800231c <HAL_GPIO_Init+0x80>)
 8002318:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800231c:	08002397 	.word	0x08002397
 8002320:	08002371 	.word	0x08002371
 8002324:	08002383 	.word	0x08002383
 8002328:	080023c5 	.word	0x080023c5
 800232c:	080023cb 	.word	0x080023cb
 8002330:	080023cb 	.word	0x080023cb
 8002334:	080023cb 	.word	0x080023cb
 8002338:	080023cb 	.word	0x080023cb
 800233c:	080023cb 	.word	0x080023cb
 8002340:	080023cb 	.word	0x080023cb
 8002344:	080023cb 	.word	0x080023cb
 8002348:	080023cb 	.word	0x080023cb
 800234c:	080023cb 	.word	0x080023cb
 8002350:	080023cb 	.word	0x080023cb
 8002354:	080023cb 	.word	0x080023cb
 8002358:	080023cb 	.word	0x080023cb
 800235c:	080023cb 	.word	0x080023cb
 8002360:	08002379 	.word	0x08002379
 8002364:	0800238d 	.word	0x0800238d
 8002368:	4a79      	ldr	r2, [pc, #484]	; (8002550 <HAL_GPIO_Init+0x2b4>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d013      	beq.n	8002396 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800236e:	e02c      	b.n	80023ca <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	68db      	ldr	r3, [r3, #12]
 8002374:	623b      	str	r3, [r7, #32]
          break;
 8002376:	e029      	b.n	80023cc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	68db      	ldr	r3, [r3, #12]
 800237c:	3304      	adds	r3, #4
 800237e:	623b      	str	r3, [r7, #32]
          break;
 8002380:	e024      	b.n	80023cc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	68db      	ldr	r3, [r3, #12]
 8002386:	3308      	adds	r3, #8
 8002388:	623b      	str	r3, [r7, #32]
          break;
 800238a:	e01f      	b.n	80023cc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	68db      	ldr	r3, [r3, #12]
 8002390:	330c      	adds	r3, #12
 8002392:	623b      	str	r3, [r7, #32]
          break;
 8002394:	e01a      	b.n	80023cc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	689b      	ldr	r3, [r3, #8]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d102      	bne.n	80023a4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800239e:	2304      	movs	r3, #4
 80023a0:	623b      	str	r3, [r7, #32]
          break;
 80023a2:	e013      	b.n	80023cc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	689b      	ldr	r3, [r3, #8]
 80023a8:	2b01      	cmp	r3, #1
 80023aa:	d105      	bne.n	80023b8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80023ac:	2308      	movs	r3, #8
 80023ae:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	69fa      	ldr	r2, [r7, #28]
 80023b4:	611a      	str	r2, [r3, #16]
          break;
 80023b6:	e009      	b.n	80023cc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80023b8:	2308      	movs	r3, #8
 80023ba:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	69fa      	ldr	r2, [r7, #28]
 80023c0:	615a      	str	r2, [r3, #20]
          break;
 80023c2:	e003      	b.n	80023cc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80023c4:	2300      	movs	r3, #0
 80023c6:	623b      	str	r3, [r7, #32]
          break;
 80023c8:	e000      	b.n	80023cc <HAL_GPIO_Init+0x130>
          break;
 80023ca:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80023cc:	69bb      	ldr	r3, [r7, #24]
 80023ce:	2bff      	cmp	r3, #255	; 0xff
 80023d0:	d801      	bhi.n	80023d6 <HAL_GPIO_Init+0x13a>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	e001      	b.n	80023da <HAL_GPIO_Init+0x13e>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	3304      	adds	r3, #4
 80023da:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80023dc:	69bb      	ldr	r3, [r7, #24]
 80023de:	2bff      	cmp	r3, #255	; 0xff
 80023e0:	d802      	bhi.n	80023e8 <HAL_GPIO_Init+0x14c>
 80023e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e4:	009b      	lsls	r3, r3, #2
 80023e6:	e002      	b.n	80023ee <HAL_GPIO_Init+0x152>
 80023e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ea:	3b08      	subs	r3, #8
 80023ec:	009b      	lsls	r3, r3, #2
 80023ee:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	681a      	ldr	r2, [r3, #0]
 80023f4:	210f      	movs	r1, #15
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	fa01 f303 	lsl.w	r3, r1, r3
 80023fc:	43db      	mvns	r3, r3
 80023fe:	401a      	ands	r2, r3
 8002400:	6a39      	ldr	r1, [r7, #32]
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	fa01 f303 	lsl.w	r3, r1, r3
 8002408:	431a      	orrs	r2, r3
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002416:	2b00      	cmp	r3, #0
 8002418:	f000 80b1 	beq.w	800257e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800241c:	4b4d      	ldr	r3, [pc, #308]	; (8002554 <HAL_GPIO_Init+0x2b8>)
 800241e:	699b      	ldr	r3, [r3, #24]
 8002420:	4a4c      	ldr	r2, [pc, #304]	; (8002554 <HAL_GPIO_Init+0x2b8>)
 8002422:	f043 0301 	orr.w	r3, r3, #1
 8002426:	6193      	str	r3, [r2, #24]
 8002428:	4b4a      	ldr	r3, [pc, #296]	; (8002554 <HAL_GPIO_Init+0x2b8>)
 800242a:	699b      	ldr	r3, [r3, #24]
 800242c:	f003 0301 	and.w	r3, r3, #1
 8002430:	60bb      	str	r3, [r7, #8]
 8002432:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002434:	4a48      	ldr	r2, [pc, #288]	; (8002558 <HAL_GPIO_Init+0x2bc>)
 8002436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002438:	089b      	lsrs	r3, r3, #2
 800243a:	3302      	adds	r3, #2
 800243c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002440:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002444:	f003 0303 	and.w	r3, r3, #3
 8002448:	009b      	lsls	r3, r3, #2
 800244a:	220f      	movs	r2, #15
 800244c:	fa02 f303 	lsl.w	r3, r2, r3
 8002450:	43db      	mvns	r3, r3
 8002452:	68fa      	ldr	r2, [r7, #12]
 8002454:	4013      	ands	r3, r2
 8002456:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	4a40      	ldr	r2, [pc, #256]	; (800255c <HAL_GPIO_Init+0x2c0>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d013      	beq.n	8002488 <HAL_GPIO_Init+0x1ec>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	4a3f      	ldr	r2, [pc, #252]	; (8002560 <HAL_GPIO_Init+0x2c4>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d00d      	beq.n	8002484 <HAL_GPIO_Init+0x1e8>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	4a3e      	ldr	r2, [pc, #248]	; (8002564 <HAL_GPIO_Init+0x2c8>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d007      	beq.n	8002480 <HAL_GPIO_Init+0x1e4>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	4a3d      	ldr	r2, [pc, #244]	; (8002568 <HAL_GPIO_Init+0x2cc>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d101      	bne.n	800247c <HAL_GPIO_Init+0x1e0>
 8002478:	2303      	movs	r3, #3
 800247a:	e006      	b.n	800248a <HAL_GPIO_Init+0x1ee>
 800247c:	2304      	movs	r3, #4
 800247e:	e004      	b.n	800248a <HAL_GPIO_Init+0x1ee>
 8002480:	2302      	movs	r3, #2
 8002482:	e002      	b.n	800248a <HAL_GPIO_Init+0x1ee>
 8002484:	2301      	movs	r3, #1
 8002486:	e000      	b.n	800248a <HAL_GPIO_Init+0x1ee>
 8002488:	2300      	movs	r3, #0
 800248a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800248c:	f002 0203 	and.w	r2, r2, #3
 8002490:	0092      	lsls	r2, r2, #2
 8002492:	4093      	lsls	r3, r2
 8002494:	68fa      	ldr	r2, [r7, #12]
 8002496:	4313      	orrs	r3, r2
 8002498:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800249a:	492f      	ldr	r1, [pc, #188]	; (8002558 <HAL_GPIO_Init+0x2bc>)
 800249c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800249e:	089b      	lsrs	r3, r3, #2
 80024a0:	3302      	adds	r3, #2
 80024a2:	68fa      	ldr	r2, [r7, #12]
 80024a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d006      	beq.n	80024c2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80024b4:	4b2d      	ldr	r3, [pc, #180]	; (800256c <HAL_GPIO_Init+0x2d0>)
 80024b6:	689a      	ldr	r2, [r3, #8]
 80024b8:	492c      	ldr	r1, [pc, #176]	; (800256c <HAL_GPIO_Init+0x2d0>)
 80024ba:	69bb      	ldr	r3, [r7, #24]
 80024bc:	4313      	orrs	r3, r2
 80024be:	608b      	str	r3, [r1, #8]
 80024c0:	e006      	b.n	80024d0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80024c2:	4b2a      	ldr	r3, [pc, #168]	; (800256c <HAL_GPIO_Init+0x2d0>)
 80024c4:	689a      	ldr	r2, [r3, #8]
 80024c6:	69bb      	ldr	r3, [r7, #24]
 80024c8:	43db      	mvns	r3, r3
 80024ca:	4928      	ldr	r1, [pc, #160]	; (800256c <HAL_GPIO_Init+0x2d0>)
 80024cc:	4013      	ands	r3, r2
 80024ce:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d006      	beq.n	80024ea <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80024dc:	4b23      	ldr	r3, [pc, #140]	; (800256c <HAL_GPIO_Init+0x2d0>)
 80024de:	68da      	ldr	r2, [r3, #12]
 80024e0:	4922      	ldr	r1, [pc, #136]	; (800256c <HAL_GPIO_Init+0x2d0>)
 80024e2:	69bb      	ldr	r3, [r7, #24]
 80024e4:	4313      	orrs	r3, r2
 80024e6:	60cb      	str	r3, [r1, #12]
 80024e8:	e006      	b.n	80024f8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80024ea:	4b20      	ldr	r3, [pc, #128]	; (800256c <HAL_GPIO_Init+0x2d0>)
 80024ec:	68da      	ldr	r2, [r3, #12]
 80024ee:	69bb      	ldr	r3, [r7, #24]
 80024f0:	43db      	mvns	r3, r3
 80024f2:	491e      	ldr	r1, [pc, #120]	; (800256c <HAL_GPIO_Init+0x2d0>)
 80024f4:	4013      	ands	r3, r2
 80024f6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002500:	2b00      	cmp	r3, #0
 8002502:	d006      	beq.n	8002512 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002504:	4b19      	ldr	r3, [pc, #100]	; (800256c <HAL_GPIO_Init+0x2d0>)
 8002506:	685a      	ldr	r2, [r3, #4]
 8002508:	4918      	ldr	r1, [pc, #96]	; (800256c <HAL_GPIO_Init+0x2d0>)
 800250a:	69bb      	ldr	r3, [r7, #24]
 800250c:	4313      	orrs	r3, r2
 800250e:	604b      	str	r3, [r1, #4]
 8002510:	e006      	b.n	8002520 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002512:	4b16      	ldr	r3, [pc, #88]	; (800256c <HAL_GPIO_Init+0x2d0>)
 8002514:	685a      	ldr	r2, [r3, #4]
 8002516:	69bb      	ldr	r3, [r7, #24]
 8002518:	43db      	mvns	r3, r3
 800251a:	4914      	ldr	r1, [pc, #80]	; (800256c <HAL_GPIO_Init+0x2d0>)
 800251c:	4013      	ands	r3, r2
 800251e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002528:	2b00      	cmp	r3, #0
 800252a:	d021      	beq.n	8002570 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800252c:	4b0f      	ldr	r3, [pc, #60]	; (800256c <HAL_GPIO_Init+0x2d0>)
 800252e:	681a      	ldr	r2, [r3, #0]
 8002530:	490e      	ldr	r1, [pc, #56]	; (800256c <HAL_GPIO_Init+0x2d0>)
 8002532:	69bb      	ldr	r3, [r7, #24]
 8002534:	4313      	orrs	r3, r2
 8002536:	600b      	str	r3, [r1, #0]
 8002538:	e021      	b.n	800257e <HAL_GPIO_Init+0x2e2>
 800253a:	bf00      	nop
 800253c:	10320000 	.word	0x10320000
 8002540:	10310000 	.word	0x10310000
 8002544:	10220000 	.word	0x10220000
 8002548:	10210000 	.word	0x10210000
 800254c:	10120000 	.word	0x10120000
 8002550:	10110000 	.word	0x10110000
 8002554:	40021000 	.word	0x40021000
 8002558:	40010000 	.word	0x40010000
 800255c:	40010800 	.word	0x40010800
 8002560:	40010c00 	.word	0x40010c00
 8002564:	40011000 	.word	0x40011000
 8002568:	40011400 	.word	0x40011400
 800256c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002570:	4b0b      	ldr	r3, [pc, #44]	; (80025a0 <HAL_GPIO_Init+0x304>)
 8002572:	681a      	ldr	r2, [r3, #0]
 8002574:	69bb      	ldr	r3, [r7, #24]
 8002576:	43db      	mvns	r3, r3
 8002578:	4909      	ldr	r1, [pc, #36]	; (80025a0 <HAL_GPIO_Init+0x304>)
 800257a:	4013      	ands	r3, r2
 800257c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800257e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002580:	3301      	adds	r3, #1
 8002582:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	681a      	ldr	r2, [r3, #0]
 8002588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800258a:	fa22 f303 	lsr.w	r3, r2, r3
 800258e:	2b00      	cmp	r3, #0
 8002590:	f47f ae8e 	bne.w	80022b0 <HAL_GPIO_Init+0x14>
  }
}
 8002594:	bf00      	nop
 8002596:	bf00      	nop
 8002598:	372c      	adds	r7, #44	; 0x2c
 800259a:	46bd      	mov	sp, r7
 800259c:	bc80      	pop	{r7}
 800259e:	4770      	bx	lr
 80025a0:	40010400 	.word	0x40010400

080025a4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b082      	sub	sp, #8
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	4603      	mov	r3, r0
 80025ac:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80025ae:	4b08      	ldr	r3, [pc, #32]	; (80025d0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80025b0:	695a      	ldr	r2, [r3, #20]
 80025b2:	88fb      	ldrh	r3, [r7, #6]
 80025b4:	4013      	ands	r3, r2
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d006      	beq.n	80025c8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80025ba:	4a05      	ldr	r2, [pc, #20]	; (80025d0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80025bc:	88fb      	ldrh	r3, [r7, #6]
 80025be:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80025c0:	88fb      	ldrh	r3, [r7, #6]
 80025c2:	4618      	mov	r0, r3
 80025c4:	f7fe fbe2 	bl	8000d8c <HAL_GPIO_EXTI_Callback>
  }
}
 80025c8:	bf00      	nop
 80025ca:	3708      	adds	r7, #8
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}
 80025d0:	40010400 	.word	0x40010400

080025d4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b086      	sub	sp, #24
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d101      	bne.n	80025e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	e272      	b.n	8002acc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f003 0301 	and.w	r3, r3, #1
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	f000 8087 	beq.w	8002702 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80025f4:	4b92      	ldr	r3, [pc, #584]	; (8002840 <HAL_RCC_OscConfig+0x26c>)
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	f003 030c 	and.w	r3, r3, #12
 80025fc:	2b04      	cmp	r3, #4
 80025fe:	d00c      	beq.n	800261a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002600:	4b8f      	ldr	r3, [pc, #572]	; (8002840 <HAL_RCC_OscConfig+0x26c>)
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	f003 030c 	and.w	r3, r3, #12
 8002608:	2b08      	cmp	r3, #8
 800260a:	d112      	bne.n	8002632 <HAL_RCC_OscConfig+0x5e>
 800260c:	4b8c      	ldr	r3, [pc, #560]	; (8002840 <HAL_RCC_OscConfig+0x26c>)
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002614:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002618:	d10b      	bne.n	8002632 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800261a:	4b89      	ldr	r3, [pc, #548]	; (8002840 <HAL_RCC_OscConfig+0x26c>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002622:	2b00      	cmp	r3, #0
 8002624:	d06c      	beq.n	8002700 <HAL_RCC_OscConfig+0x12c>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d168      	bne.n	8002700 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800262e:	2301      	movs	r3, #1
 8002630:	e24c      	b.n	8002acc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800263a:	d106      	bne.n	800264a <HAL_RCC_OscConfig+0x76>
 800263c:	4b80      	ldr	r3, [pc, #512]	; (8002840 <HAL_RCC_OscConfig+0x26c>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a7f      	ldr	r2, [pc, #508]	; (8002840 <HAL_RCC_OscConfig+0x26c>)
 8002642:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002646:	6013      	str	r3, [r2, #0]
 8002648:	e02e      	b.n	80026a8 <HAL_RCC_OscConfig+0xd4>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d10c      	bne.n	800266c <HAL_RCC_OscConfig+0x98>
 8002652:	4b7b      	ldr	r3, [pc, #492]	; (8002840 <HAL_RCC_OscConfig+0x26c>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4a7a      	ldr	r2, [pc, #488]	; (8002840 <HAL_RCC_OscConfig+0x26c>)
 8002658:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800265c:	6013      	str	r3, [r2, #0]
 800265e:	4b78      	ldr	r3, [pc, #480]	; (8002840 <HAL_RCC_OscConfig+0x26c>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a77      	ldr	r2, [pc, #476]	; (8002840 <HAL_RCC_OscConfig+0x26c>)
 8002664:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002668:	6013      	str	r3, [r2, #0]
 800266a:	e01d      	b.n	80026a8 <HAL_RCC_OscConfig+0xd4>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002674:	d10c      	bne.n	8002690 <HAL_RCC_OscConfig+0xbc>
 8002676:	4b72      	ldr	r3, [pc, #456]	; (8002840 <HAL_RCC_OscConfig+0x26c>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a71      	ldr	r2, [pc, #452]	; (8002840 <HAL_RCC_OscConfig+0x26c>)
 800267c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002680:	6013      	str	r3, [r2, #0]
 8002682:	4b6f      	ldr	r3, [pc, #444]	; (8002840 <HAL_RCC_OscConfig+0x26c>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a6e      	ldr	r2, [pc, #440]	; (8002840 <HAL_RCC_OscConfig+0x26c>)
 8002688:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800268c:	6013      	str	r3, [r2, #0]
 800268e:	e00b      	b.n	80026a8 <HAL_RCC_OscConfig+0xd4>
 8002690:	4b6b      	ldr	r3, [pc, #428]	; (8002840 <HAL_RCC_OscConfig+0x26c>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a6a      	ldr	r2, [pc, #424]	; (8002840 <HAL_RCC_OscConfig+0x26c>)
 8002696:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800269a:	6013      	str	r3, [r2, #0]
 800269c:	4b68      	ldr	r3, [pc, #416]	; (8002840 <HAL_RCC_OscConfig+0x26c>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a67      	ldr	r2, [pc, #412]	; (8002840 <HAL_RCC_OscConfig+0x26c>)
 80026a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026a6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d013      	beq.n	80026d8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026b0:	f7ff fc2a 	bl	8001f08 <HAL_GetTick>
 80026b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026b6:	e008      	b.n	80026ca <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026b8:	f7ff fc26 	bl	8001f08 <HAL_GetTick>
 80026bc:	4602      	mov	r2, r0
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	1ad3      	subs	r3, r2, r3
 80026c2:	2b64      	cmp	r3, #100	; 0x64
 80026c4:	d901      	bls.n	80026ca <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80026c6:	2303      	movs	r3, #3
 80026c8:	e200      	b.n	8002acc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026ca:	4b5d      	ldr	r3, [pc, #372]	; (8002840 <HAL_RCC_OscConfig+0x26c>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d0f0      	beq.n	80026b8 <HAL_RCC_OscConfig+0xe4>
 80026d6:	e014      	b.n	8002702 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026d8:	f7ff fc16 	bl	8001f08 <HAL_GetTick>
 80026dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026de:	e008      	b.n	80026f2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026e0:	f7ff fc12 	bl	8001f08 <HAL_GetTick>
 80026e4:	4602      	mov	r2, r0
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	1ad3      	subs	r3, r2, r3
 80026ea:	2b64      	cmp	r3, #100	; 0x64
 80026ec:	d901      	bls.n	80026f2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80026ee:	2303      	movs	r3, #3
 80026f0:	e1ec      	b.n	8002acc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026f2:	4b53      	ldr	r3, [pc, #332]	; (8002840 <HAL_RCC_OscConfig+0x26c>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d1f0      	bne.n	80026e0 <HAL_RCC_OscConfig+0x10c>
 80026fe:	e000      	b.n	8002702 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002700:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f003 0302 	and.w	r3, r3, #2
 800270a:	2b00      	cmp	r3, #0
 800270c:	d063      	beq.n	80027d6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800270e:	4b4c      	ldr	r3, [pc, #304]	; (8002840 <HAL_RCC_OscConfig+0x26c>)
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	f003 030c 	and.w	r3, r3, #12
 8002716:	2b00      	cmp	r3, #0
 8002718:	d00b      	beq.n	8002732 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800271a:	4b49      	ldr	r3, [pc, #292]	; (8002840 <HAL_RCC_OscConfig+0x26c>)
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	f003 030c 	and.w	r3, r3, #12
 8002722:	2b08      	cmp	r3, #8
 8002724:	d11c      	bne.n	8002760 <HAL_RCC_OscConfig+0x18c>
 8002726:	4b46      	ldr	r3, [pc, #280]	; (8002840 <HAL_RCC_OscConfig+0x26c>)
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800272e:	2b00      	cmp	r3, #0
 8002730:	d116      	bne.n	8002760 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002732:	4b43      	ldr	r3, [pc, #268]	; (8002840 <HAL_RCC_OscConfig+0x26c>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f003 0302 	and.w	r3, r3, #2
 800273a:	2b00      	cmp	r3, #0
 800273c:	d005      	beq.n	800274a <HAL_RCC_OscConfig+0x176>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	691b      	ldr	r3, [r3, #16]
 8002742:	2b01      	cmp	r3, #1
 8002744:	d001      	beq.n	800274a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002746:	2301      	movs	r3, #1
 8002748:	e1c0      	b.n	8002acc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800274a:	4b3d      	ldr	r3, [pc, #244]	; (8002840 <HAL_RCC_OscConfig+0x26c>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	695b      	ldr	r3, [r3, #20]
 8002756:	00db      	lsls	r3, r3, #3
 8002758:	4939      	ldr	r1, [pc, #228]	; (8002840 <HAL_RCC_OscConfig+0x26c>)
 800275a:	4313      	orrs	r3, r2
 800275c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800275e:	e03a      	b.n	80027d6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	691b      	ldr	r3, [r3, #16]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d020      	beq.n	80027aa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002768:	4b36      	ldr	r3, [pc, #216]	; (8002844 <HAL_RCC_OscConfig+0x270>)
 800276a:	2201      	movs	r2, #1
 800276c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800276e:	f7ff fbcb 	bl	8001f08 <HAL_GetTick>
 8002772:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002774:	e008      	b.n	8002788 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002776:	f7ff fbc7 	bl	8001f08 <HAL_GetTick>
 800277a:	4602      	mov	r2, r0
 800277c:	693b      	ldr	r3, [r7, #16]
 800277e:	1ad3      	subs	r3, r2, r3
 8002780:	2b02      	cmp	r3, #2
 8002782:	d901      	bls.n	8002788 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002784:	2303      	movs	r3, #3
 8002786:	e1a1      	b.n	8002acc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002788:	4b2d      	ldr	r3, [pc, #180]	; (8002840 <HAL_RCC_OscConfig+0x26c>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f003 0302 	and.w	r3, r3, #2
 8002790:	2b00      	cmp	r3, #0
 8002792:	d0f0      	beq.n	8002776 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002794:	4b2a      	ldr	r3, [pc, #168]	; (8002840 <HAL_RCC_OscConfig+0x26c>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	695b      	ldr	r3, [r3, #20]
 80027a0:	00db      	lsls	r3, r3, #3
 80027a2:	4927      	ldr	r1, [pc, #156]	; (8002840 <HAL_RCC_OscConfig+0x26c>)
 80027a4:	4313      	orrs	r3, r2
 80027a6:	600b      	str	r3, [r1, #0]
 80027a8:	e015      	b.n	80027d6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027aa:	4b26      	ldr	r3, [pc, #152]	; (8002844 <HAL_RCC_OscConfig+0x270>)
 80027ac:	2200      	movs	r2, #0
 80027ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027b0:	f7ff fbaa 	bl	8001f08 <HAL_GetTick>
 80027b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027b6:	e008      	b.n	80027ca <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027b8:	f7ff fba6 	bl	8001f08 <HAL_GetTick>
 80027bc:	4602      	mov	r2, r0
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	1ad3      	subs	r3, r2, r3
 80027c2:	2b02      	cmp	r3, #2
 80027c4:	d901      	bls.n	80027ca <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80027c6:	2303      	movs	r3, #3
 80027c8:	e180      	b.n	8002acc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027ca:	4b1d      	ldr	r3, [pc, #116]	; (8002840 <HAL_RCC_OscConfig+0x26c>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f003 0302 	and.w	r3, r3, #2
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d1f0      	bne.n	80027b8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f003 0308 	and.w	r3, r3, #8
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d03a      	beq.n	8002858 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	699b      	ldr	r3, [r3, #24]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d019      	beq.n	800281e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027ea:	4b17      	ldr	r3, [pc, #92]	; (8002848 <HAL_RCC_OscConfig+0x274>)
 80027ec:	2201      	movs	r2, #1
 80027ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027f0:	f7ff fb8a 	bl	8001f08 <HAL_GetTick>
 80027f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027f6:	e008      	b.n	800280a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027f8:	f7ff fb86 	bl	8001f08 <HAL_GetTick>
 80027fc:	4602      	mov	r2, r0
 80027fe:	693b      	ldr	r3, [r7, #16]
 8002800:	1ad3      	subs	r3, r2, r3
 8002802:	2b02      	cmp	r3, #2
 8002804:	d901      	bls.n	800280a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002806:	2303      	movs	r3, #3
 8002808:	e160      	b.n	8002acc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800280a:	4b0d      	ldr	r3, [pc, #52]	; (8002840 <HAL_RCC_OscConfig+0x26c>)
 800280c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800280e:	f003 0302 	and.w	r3, r3, #2
 8002812:	2b00      	cmp	r3, #0
 8002814:	d0f0      	beq.n	80027f8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002816:	2001      	movs	r0, #1
 8002818:	f000 face 	bl	8002db8 <RCC_Delay>
 800281c:	e01c      	b.n	8002858 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800281e:	4b0a      	ldr	r3, [pc, #40]	; (8002848 <HAL_RCC_OscConfig+0x274>)
 8002820:	2200      	movs	r2, #0
 8002822:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002824:	f7ff fb70 	bl	8001f08 <HAL_GetTick>
 8002828:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800282a:	e00f      	b.n	800284c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800282c:	f7ff fb6c 	bl	8001f08 <HAL_GetTick>
 8002830:	4602      	mov	r2, r0
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	1ad3      	subs	r3, r2, r3
 8002836:	2b02      	cmp	r3, #2
 8002838:	d908      	bls.n	800284c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800283a:	2303      	movs	r3, #3
 800283c:	e146      	b.n	8002acc <HAL_RCC_OscConfig+0x4f8>
 800283e:	bf00      	nop
 8002840:	40021000 	.word	0x40021000
 8002844:	42420000 	.word	0x42420000
 8002848:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800284c:	4b92      	ldr	r3, [pc, #584]	; (8002a98 <HAL_RCC_OscConfig+0x4c4>)
 800284e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002850:	f003 0302 	and.w	r3, r3, #2
 8002854:	2b00      	cmp	r3, #0
 8002856:	d1e9      	bne.n	800282c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f003 0304 	and.w	r3, r3, #4
 8002860:	2b00      	cmp	r3, #0
 8002862:	f000 80a6 	beq.w	80029b2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002866:	2300      	movs	r3, #0
 8002868:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800286a:	4b8b      	ldr	r3, [pc, #556]	; (8002a98 <HAL_RCC_OscConfig+0x4c4>)
 800286c:	69db      	ldr	r3, [r3, #28]
 800286e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002872:	2b00      	cmp	r3, #0
 8002874:	d10d      	bne.n	8002892 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002876:	4b88      	ldr	r3, [pc, #544]	; (8002a98 <HAL_RCC_OscConfig+0x4c4>)
 8002878:	69db      	ldr	r3, [r3, #28]
 800287a:	4a87      	ldr	r2, [pc, #540]	; (8002a98 <HAL_RCC_OscConfig+0x4c4>)
 800287c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002880:	61d3      	str	r3, [r2, #28]
 8002882:	4b85      	ldr	r3, [pc, #532]	; (8002a98 <HAL_RCC_OscConfig+0x4c4>)
 8002884:	69db      	ldr	r3, [r3, #28]
 8002886:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800288a:	60bb      	str	r3, [r7, #8]
 800288c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800288e:	2301      	movs	r3, #1
 8002890:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002892:	4b82      	ldr	r3, [pc, #520]	; (8002a9c <HAL_RCC_OscConfig+0x4c8>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800289a:	2b00      	cmp	r3, #0
 800289c:	d118      	bne.n	80028d0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800289e:	4b7f      	ldr	r3, [pc, #508]	; (8002a9c <HAL_RCC_OscConfig+0x4c8>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a7e      	ldr	r2, [pc, #504]	; (8002a9c <HAL_RCC_OscConfig+0x4c8>)
 80028a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028aa:	f7ff fb2d 	bl	8001f08 <HAL_GetTick>
 80028ae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028b0:	e008      	b.n	80028c4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028b2:	f7ff fb29 	bl	8001f08 <HAL_GetTick>
 80028b6:	4602      	mov	r2, r0
 80028b8:	693b      	ldr	r3, [r7, #16]
 80028ba:	1ad3      	subs	r3, r2, r3
 80028bc:	2b64      	cmp	r3, #100	; 0x64
 80028be:	d901      	bls.n	80028c4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80028c0:	2303      	movs	r3, #3
 80028c2:	e103      	b.n	8002acc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028c4:	4b75      	ldr	r3, [pc, #468]	; (8002a9c <HAL_RCC_OscConfig+0x4c8>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d0f0      	beq.n	80028b2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	68db      	ldr	r3, [r3, #12]
 80028d4:	2b01      	cmp	r3, #1
 80028d6:	d106      	bne.n	80028e6 <HAL_RCC_OscConfig+0x312>
 80028d8:	4b6f      	ldr	r3, [pc, #444]	; (8002a98 <HAL_RCC_OscConfig+0x4c4>)
 80028da:	6a1b      	ldr	r3, [r3, #32]
 80028dc:	4a6e      	ldr	r2, [pc, #440]	; (8002a98 <HAL_RCC_OscConfig+0x4c4>)
 80028de:	f043 0301 	orr.w	r3, r3, #1
 80028e2:	6213      	str	r3, [r2, #32]
 80028e4:	e02d      	b.n	8002942 <HAL_RCC_OscConfig+0x36e>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	68db      	ldr	r3, [r3, #12]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d10c      	bne.n	8002908 <HAL_RCC_OscConfig+0x334>
 80028ee:	4b6a      	ldr	r3, [pc, #424]	; (8002a98 <HAL_RCC_OscConfig+0x4c4>)
 80028f0:	6a1b      	ldr	r3, [r3, #32]
 80028f2:	4a69      	ldr	r2, [pc, #420]	; (8002a98 <HAL_RCC_OscConfig+0x4c4>)
 80028f4:	f023 0301 	bic.w	r3, r3, #1
 80028f8:	6213      	str	r3, [r2, #32]
 80028fa:	4b67      	ldr	r3, [pc, #412]	; (8002a98 <HAL_RCC_OscConfig+0x4c4>)
 80028fc:	6a1b      	ldr	r3, [r3, #32]
 80028fe:	4a66      	ldr	r2, [pc, #408]	; (8002a98 <HAL_RCC_OscConfig+0x4c4>)
 8002900:	f023 0304 	bic.w	r3, r3, #4
 8002904:	6213      	str	r3, [r2, #32]
 8002906:	e01c      	b.n	8002942 <HAL_RCC_OscConfig+0x36e>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	68db      	ldr	r3, [r3, #12]
 800290c:	2b05      	cmp	r3, #5
 800290e:	d10c      	bne.n	800292a <HAL_RCC_OscConfig+0x356>
 8002910:	4b61      	ldr	r3, [pc, #388]	; (8002a98 <HAL_RCC_OscConfig+0x4c4>)
 8002912:	6a1b      	ldr	r3, [r3, #32]
 8002914:	4a60      	ldr	r2, [pc, #384]	; (8002a98 <HAL_RCC_OscConfig+0x4c4>)
 8002916:	f043 0304 	orr.w	r3, r3, #4
 800291a:	6213      	str	r3, [r2, #32]
 800291c:	4b5e      	ldr	r3, [pc, #376]	; (8002a98 <HAL_RCC_OscConfig+0x4c4>)
 800291e:	6a1b      	ldr	r3, [r3, #32]
 8002920:	4a5d      	ldr	r2, [pc, #372]	; (8002a98 <HAL_RCC_OscConfig+0x4c4>)
 8002922:	f043 0301 	orr.w	r3, r3, #1
 8002926:	6213      	str	r3, [r2, #32]
 8002928:	e00b      	b.n	8002942 <HAL_RCC_OscConfig+0x36e>
 800292a:	4b5b      	ldr	r3, [pc, #364]	; (8002a98 <HAL_RCC_OscConfig+0x4c4>)
 800292c:	6a1b      	ldr	r3, [r3, #32]
 800292e:	4a5a      	ldr	r2, [pc, #360]	; (8002a98 <HAL_RCC_OscConfig+0x4c4>)
 8002930:	f023 0301 	bic.w	r3, r3, #1
 8002934:	6213      	str	r3, [r2, #32]
 8002936:	4b58      	ldr	r3, [pc, #352]	; (8002a98 <HAL_RCC_OscConfig+0x4c4>)
 8002938:	6a1b      	ldr	r3, [r3, #32]
 800293a:	4a57      	ldr	r2, [pc, #348]	; (8002a98 <HAL_RCC_OscConfig+0x4c4>)
 800293c:	f023 0304 	bic.w	r3, r3, #4
 8002940:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	68db      	ldr	r3, [r3, #12]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d015      	beq.n	8002976 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800294a:	f7ff fadd 	bl	8001f08 <HAL_GetTick>
 800294e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002950:	e00a      	b.n	8002968 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002952:	f7ff fad9 	bl	8001f08 <HAL_GetTick>
 8002956:	4602      	mov	r2, r0
 8002958:	693b      	ldr	r3, [r7, #16]
 800295a:	1ad3      	subs	r3, r2, r3
 800295c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002960:	4293      	cmp	r3, r2
 8002962:	d901      	bls.n	8002968 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002964:	2303      	movs	r3, #3
 8002966:	e0b1      	b.n	8002acc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002968:	4b4b      	ldr	r3, [pc, #300]	; (8002a98 <HAL_RCC_OscConfig+0x4c4>)
 800296a:	6a1b      	ldr	r3, [r3, #32]
 800296c:	f003 0302 	and.w	r3, r3, #2
 8002970:	2b00      	cmp	r3, #0
 8002972:	d0ee      	beq.n	8002952 <HAL_RCC_OscConfig+0x37e>
 8002974:	e014      	b.n	80029a0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002976:	f7ff fac7 	bl	8001f08 <HAL_GetTick>
 800297a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800297c:	e00a      	b.n	8002994 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800297e:	f7ff fac3 	bl	8001f08 <HAL_GetTick>
 8002982:	4602      	mov	r2, r0
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	1ad3      	subs	r3, r2, r3
 8002988:	f241 3288 	movw	r2, #5000	; 0x1388
 800298c:	4293      	cmp	r3, r2
 800298e:	d901      	bls.n	8002994 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002990:	2303      	movs	r3, #3
 8002992:	e09b      	b.n	8002acc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002994:	4b40      	ldr	r3, [pc, #256]	; (8002a98 <HAL_RCC_OscConfig+0x4c4>)
 8002996:	6a1b      	ldr	r3, [r3, #32]
 8002998:	f003 0302 	and.w	r3, r3, #2
 800299c:	2b00      	cmp	r3, #0
 800299e:	d1ee      	bne.n	800297e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80029a0:	7dfb      	ldrb	r3, [r7, #23]
 80029a2:	2b01      	cmp	r3, #1
 80029a4:	d105      	bne.n	80029b2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029a6:	4b3c      	ldr	r3, [pc, #240]	; (8002a98 <HAL_RCC_OscConfig+0x4c4>)
 80029a8:	69db      	ldr	r3, [r3, #28]
 80029aa:	4a3b      	ldr	r2, [pc, #236]	; (8002a98 <HAL_RCC_OscConfig+0x4c4>)
 80029ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029b0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	69db      	ldr	r3, [r3, #28]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	f000 8087 	beq.w	8002aca <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80029bc:	4b36      	ldr	r3, [pc, #216]	; (8002a98 <HAL_RCC_OscConfig+0x4c4>)
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	f003 030c 	and.w	r3, r3, #12
 80029c4:	2b08      	cmp	r3, #8
 80029c6:	d061      	beq.n	8002a8c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	69db      	ldr	r3, [r3, #28]
 80029cc:	2b02      	cmp	r3, #2
 80029ce:	d146      	bne.n	8002a5e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029d0:	4b33      	ldr	r3, [pc, #204]	; (8002aa0 <HAL_RCC_OscConfig+0x4cc>)
 80029d2:	2200      	movs	r2, #0
 80029d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029d6:	f7ff fa97 	bl	8001f08 <HAL_GetTick>
 80029da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029dc:	e008      	b.n	80029f0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029de:	f7ff fa93 	bl	8001f08 <HAL_GetTick>
 80029e2:	4602      	mov	r2, r0
 80029e4:	693b      	ldr	r3, [r7, #16]
 80029e6:	1ad3      	subs	r3, r2, r3
 80029e8:	2b02      	cmp	r3, #2
 80029ea:	d901      	bls.n	80029f0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80029ec:	2303      	movs	r3, #3
 80029ee:	e06d      	b.n	8002acc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029f0:	4b29      	ldr	r3, [pc, #164]	; (8002a98 <HAL_RCC_OscConfig+0x4c4>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d1f0      	bne.n	80029de <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6a1b      	ldr	r3, [r3, #32]
 8002a00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a04:	d108      	bne.n	8002a18 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002a06:	4b24      	ldr	r3, [pc, #144]	; (8002a98 <HAL_RCC_OscConfig+0x4c4>)
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	689b      	ldr	r3, [r3, #8]
 8002a12:	4921      	ldr	r1, [pc, #132]	; (8002a98 <HAL_RCC_OscConfig+0x4c4>)
 8002a14:	4313      	orrs	r3, r2
 8002a16:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a18:	4b1f      	ldr	r3, [pc, #124]	; (8002a98 <HAL_RCC_OscConfig+0x4c4>)
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6a19      	ldr	r1, [r3, #32]
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a28:	430b      	orrs	r3, r1
 8002a2a:	491b      	ldr	r1, [pc, #108]	; (8002a98 <HAL_RCC_OscConfig+0x4c4>)
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a30:	4b1b      	ldr	r3, [pc, #108]	; (8002aa0 <HAL_RCC_OscConfig+0x4cc>)
 8002a32:	2201      	movs	r2, #1
 8002a34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a36:	f7ff fa67 	bl	8001f08 <HAL_GetTick>
 8002a3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a3c:	e008      	b.n	8002a50 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a3e:	f7ff fa63 	bl	8001f08 <HAL_GetTick>
 8002a42:	4602      	mov	r2, r0
 8002a44:	693b      	ldr	r3, [r7, #16]
 8002a46:	1ad3      	subs	r3, r2, r3
 8002a48:	2b02      	cmp	r3, #2
 8002a4a:	d901      	bls.n	8002a50 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002a4c:	2303      	movs	r3, #3
 8002a4e:	e03d      	b.n	8002acc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a50:	4b11      	ldr	r3, [pc, #68]	; (8002a98 <HAL_RCC_OscConfig+0x4c4>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d0f0      	beq.n	8002a3e <HAL_RCC_OscConfig+0x46a>
 8002a5c:	e035      	b.n	8002aca <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a5e:	4b10      	ldr	r3, [pc, #64]	; (8002aa0 <HAL_RCC_OscConfig+0x4cc>)
 8002a60:	2200      	movs	r2, #0
 8002a62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a64:	f7ff fa50 	bl	8001f08 <HAL_GetTick>
 8002a68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a6a:	e008      	b.n	8002a7e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a6c:	f7ff fa4c 	bl	8001f08 <HAL_GetTick>
 8002a70:	4602      	mov	r2, r0
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	1ad3      	subs	r3, r2, r3
 8002a76:	2b02      	cmp	r3, #2
 8002a78:	d901      	bls.n	8002a7e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002a7a:	2303      	movs	r3, #3
 8002a7c:	e026      	b.n	8002acc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a7e:	4b06      	ldr	r3, [pc, #24]	; (8002a98 <HAL_RCC_OscConfig+0x4c4>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d1f0      	bne.n	8002a6c <HAL_RCC_OscConfig+0x498>
 8002a8a:	e01e      	b.n	8002aca <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	69db      	ldr	r3, [r3, #28]
 8002a90:	2b01      	cmp	r3, #1
 8002a92:	d107      	bne.n	8002aa4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002a94:	2301      	movs	r3, #1
 8002a96:	e019      	b.n	8002acc <HAL_RCC_OscConfig+0x4f8>
 8002a98:	40021000 	.word	0x40021000
 8002a9c:	40007000 	.word	0x40007000
 8002aa0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002aa4:	4b0b      	ldr	r3, [pc, #44]	; (8002ad4 <HAL_RCC_OscConfig+0x500>)
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6a1b      	ldr	r3, [r3, #32]
 8002ab4:	429a      	cmp	r2, r3
 8002ab6:	d106      	bne.n	8002ac6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ac2:	429a      	cmp	r2, r3
 8002ac4:	d001      	beq.n	8002aca <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e000      	b.n	8002acc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002aca:	2300      	movs	r3, #0
}
 8002acc:	4618      	mov	r0, r3
 8002ace:	3718      	adds	r7, #24
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bd80      	pop	{r7, pc}
 8002ad4:	40021000 	.word	0x40021000

08002ad8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b084      	sub	sp, #16
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
 8002ae0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d101      	bne.n	8002aec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	e0d0      	b.n	8002c8e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002aec:	4b6a      	ldr	r3, [pc, #424]	; (8002c98 <HAL_RCC_ClockConfig+0x1c0>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f003 0307 	and.w	r3, r3, #7
 8002af4:	683a      	ldr	r2, [r7, #0]
 8002af6:	429a      	cmp	r2, r3
 8002af8:	d910      	bls.n	8002b1c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002afa:	4b67      	ldr	r3, [pc, #412]	; (8002c98 <HAL_RCC_ClockConfig+0x1c0>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f023 0207 	bic.w	r2, r3, #7
 8002b02:	4965      	ldr	r1, [pc, #404]	; (8002c98 <HAL_RCC_ClockConfig+0x1c0>)
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	4313      	orrs	r3, r2
 8002b08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b0a:	4b63      	ldr	r3, [pc, #396]	; (8002c98 <HAL_RCC_ClockConfig+0x1c0>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 0307 	and.w	r3, r3, #7
 8002b12:	683a      	ldr	r2, [r7, #0]
 8002b14:	429a      	cmp	r2, r3
 8002b16:	d001      	beq.n	8002b1c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	e0b8      	b.n	8002c8e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f003 0302 	and.w	r3, r3, #2
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d020      	beq.n	8002b6a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f003 0304 	and.w	r3, r3, #4
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d005      	beq.n	8002b40 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b34:	4b59      	ldr	r3, [pc, #356]	; (8002c9c <HAL_RCC_ClockConfig+0x1c4>)
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	4a58      	ldr	r2, [pc, #352]	; (8002c9c <HAL_RCC_ClockConfig+0x1c4>)
 8002b3a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002b3e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f003 0308 	and.w	r3, r3, #8
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d005      	beq.n	8002b58 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b4c:	4b53      	ldr	r3, [pc, #332]	; (8002c9c <HAL_RCC_ClockConfig+0x1c4>)
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	4a52      	ldr	r2, [pc, #328]	; (8002c9c <HAL_RCC_ClockConfig+0x1c4>)
 8002b52:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002b56:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b58:	4b50      	ldr	r3, [pc, #320]	; (8002c9c <HAL_RCC_ClockConfig+0x1c4>)
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	494d      	ldr	r1, [pc, #308]	; (8002c9c <HAL_RCC_ClockConfig+0x1c4>)
 8002b66:	4313      	orrs	r3, r2
 8002b68:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f003 0301 	and.w	r3, r3, #1
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d040      	beq.n	8002bf8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	2b01      	cmp	r3, #1
 8002b7c:	d107      	bne.n	8002b8e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b7e:	4b47      	ldr	r3, [pc, #284]	; (8002c9c <HAL_RCC_ClockConfig+0x1c4>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d115      	bne.n	8002bb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e07f      	b.n	8002c8e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	2b02      	cmp	r3, #2
 8002b94:	d107      	bne.n	8002ba6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b96:	4b41      	ldr	r3, [pc, #260]	; (8002c9c <HAL_RCC_ClockConfig+0x1c4>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d109      	bne.n	8002bb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e073      	b.n	8002c8e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ba6:	4b3d      	ldr	r3, [pc, #244]	; (8002c9c <HAL_RCC_ClockConfig+0x1c4>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f003 0302 	and.w	r3, r3, #2
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d101      	bne.n	8002bb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e06b      	b.n	8002c8e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002bb6:	4b39      	ldr	r3, [pc, #228]	; (8002c9c <HAL_RCC_ClockConfig+0x1c4>)
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	f023 0203 	bic.w	r2, r3, #3
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	4936      	ldr	r1, [pc, #216]	; (8002c9c <HAL_RCC_ClockConfig+0x1c4>)
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002bc8:	f7ff f99e 	bl	8001f08 <HAL_GetTick>
 8002bcc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bce:	e00a      	b.n	8002be6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bd0:	f7ff f99a 	bl	8001f08 <HAL_GetTick>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	1ad3      	subs	r3, r2, r3
 8002bda:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d901      	bls.n	8002be6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002be2:	2303      	movs	r3, #3
 8002be4:	e053      	b.n	8002c8e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002be6:	4b2d      	ldr	r3, [pc, #180]	; (8002c9c <HAL_RCC_ClockConfig+0x1c4>)
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	f003 020c 	and.w	r2, r3, #12
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	009b      	lsls	r3, r3, #2
 8002bf4:	429a      	cmp	r2, r3
 8002bf6:	d1eb      	bne.n	8002bd0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002bf8:	4b27      	ldr	r3, [pc, #156]	; (8002c98 <HAL_RCC_ClockConfig+0x1c0>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f003 0307 	and.w	r3, r3, #7
 8002c00:	683a      	ldr	r2, [r7, #0]
 8002c02:	429a      	cmp	r2, r3
 8002c04:	d210      	bcs.n	8002c28 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c06:	4b24      	ldr	r3, [pc, #144]	; (8002c98 <HAL_RCC_ClockConfig+0x1c0>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f023 0207 	bic.w	r2, r3, #7
 8002c0e:	4922      	ldr	r1, [pc, #136]	; (8002c98 <HAL_RCC_ClockConfig+0x1c0>)
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	4313      	orrs	r3, r2
 8002c14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c16:	4b20      	ldr	r3, [pc, #128]	; (8002c98 <HAL_RCC_ClockConfig+0x1c0>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f003 0307 	and.w	r3, r3, #7
 8002c1e:	683a      	ldr	r2, [r7, #0]
 8002c20:	429a      	cmp	r2, r3
 8002c22:	d001      	beq.n	8002c28 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002c24:	2301      	movs	r3, #1
 8002c26:	e032      	b.n	8002c8e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f003 0304 	and.w	r3, r3, #4
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d008      	beq.n	8002c46 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c34:	4b19      	ldr	r3, [pc, #100]	; (8002c9c <HAL_RCC_ClockConfig+0x1c4>)
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	68db      	ldr	r3, [r3, #12]
 8002c40:	4916      	ldr	r1, [pc, #88]	; (8002c9c <HAL_RCC_ClockConfig+0x1c4>)
 8002c42:	4313      	orrs	r3, r2
 8002c44:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f003 0308 	and.w	r3, r3, #8
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d009      	beq.n	8002c66 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002c52:	4b12      	ldr	r3, [pc, #72]	; (8002c9c <HAL_RCC_ClockConfig+0x1c4>)
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	691b      	ldr	r3, [r3, #16]
 8002c5e:	00db      	lsls	r3, r3, #3
 8002c60:	490e      	ldr	r1, [pc, #56]	; (8002c9c <HAL_RCC_ClockConfig+0x1c4>)
 8002c62:	4313      	orrs	r3, r2
 8002c64:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002c66:	f000 f821 	bl	8002cac <HAL_RCC_GetSysClockFreq>
 8002c6a:	4602      	mov	r2, r0
 8002c6c:	4b0b      	ldr	r3, [pc, #44]	; (8002c9c <HAL_RCC_ClockConfig+0x1c4>)
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	091b      	lsrs	r3, r3, #4
 8002c72:	f003 030f 	and.w	r3, r3, #15
 8002c76:	490a      	ldr	r1, [pc, #40]	; (8002ca0 <HAL_RCC_ClockConfig+0x1c8>)
 8002c78:	5ccb      	ldrb	r3, [r1, r3]
 8002c7a:	fa22 f303 	lsr.w	r3, r2, r3
 8002c7e:	4a09      	ldr	r2, [pc, #36]	; (8002ca4 <HAL_RCC_ClockConfig+0x1cc>)
 8002c80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002c82:	4b09      	ldr	r3, [pc, #36]	; (8002ca8 <HAL_RCC_ClockConfig+0x1d0>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4618      	mov	r0, r3
 8002c88:	f7ff f8fc 	bl	8001e84 <HAL_InitTick>

  return HAL_OK;
 8002c8c:	2300      	movs	r3, #0
}
 8002c8e:	4618      	mov	r0, r3
 8002c90:	3710      	adds	r7, #16
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}
 8002c96:	bf00      	nop
 8002c98:	40022000 	.word	0x40022000
 8002c9c:	40021000 	.word	0x40021000
 8002ca0:	080092f4 	.word	0x080092f4
 8002ca4:	20000000 	.word	0x20000000
 8002ca8:	20000004 	.word	0x20000004

08002cac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cac:	b480      	push	{r7}
 8002cae:	b087      	sub	sp, #28
 8002cb0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	60fb      	str	r3, [r7, #12]
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	60bb      	str	r3, [r7, #8]
 8002cba:	2300      	movs	r3, #0
 8002cbc:	617b      	str	r3, [r7, #20]
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002cc6:	4b1e      	ldr	r3, [pc, #120]	; (8002d40 <HAL_RCC_GetSysClockFreq+0x94>)
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	f003 030c 	and.w	r3, r3, #12
 8002cd2:	2b04      	cmp	r3, #4
 8002cd4:	d002      	beq.n	8002cdc <HAL_RCC_GetSysClockFreq+0x30>
 8002cd6:	2b08      	cmp	r3, #8
 8002cd8:	d003      	beq.n	8002ce2 <HAL_RCC_GetSysClockFreq+0x36>
 8002cda:	e027      	b.n	8002d2c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002cdc:	4b19      	ldr	r3, [pc, #100]	; (8002d44 <HAL_RCC_GetSysClockFreq+0x98>)
 8002cde:	613b      	str	r3, [r7, #16]
      break;
 8002ce0:	e027      	b.n	8002d32 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	0c9b      	lsrs	r3, r3, #18
 8002ce6:	f003 030f 	and.w	r3, r3, #15
 8002cea:	4a17      	ldr	r2, [pc, #92]	; (8002d48 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002cec:	5cd3      	ldrb	r3, [r2, r3]
 8002cee:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d010      	beq.n	8002d1c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002cfa:	4b11      	ldr	r3, [pc, #68]	; (8002d40 <HAL_RCC_GetSysClockFreq+0x94>)
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	0c5b      	lsrs	r3, r3, #17
 8002d00:	f003 0301 	and.w	r3, r3, #1
 8002d04:	4a11      	ldr	r2, [pc, #68]	; (8002d4c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002d06:	5cd3      	ldrb	r3, [r2, r3]
 8002d08:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	4a0d      	ldr	r2, [pc, #52]	; (8002d44 <HAL_RCC_GetSysClockFreq+0x98>)
 8002d0e:	fb03 f202 	mul.w	r2, r3, r2
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d18:	617b      	str	r3, [r7, #20]
 8002d1a:	e004      	b.n	8002d26 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	4a0c      	ldr	r2, [pc, #48]	; (8002d50 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002d20:	fb02 f303 	mul.w	r3, r2, r3
 8002d24:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	613b      	str	r3, [r7, #16]
      break;
 8002d2a:	e002      	b.n	8002d32 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002d2c:	4b05      	ldr	r3, [pc, #20]	; (8002d44 <HAL_RCC_GetSysClockFreq+0x98>)
 8002d2e:	613b      	str	r3, [r7, #16]
      break;
 8002d30:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d32:	693b      	ldr	r3, [r7, #16]
}
 8002d34:	4618      	mov	r0, r3
 8002d36:	371c      	adds	r7, #28
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bc80      	pop	{r7}
 8002d3c:	4770      	bx	lr
 8002d3e:	bf00      	nop
 8002d40:	40021000 	.word	0x40021000
 8002d44:	007a1200 	.word	0x007a1200
 8002d48:	0800930c 	.word	0x0800930c
 8002d4c:	0800931c 	.word	0x0800931c
 8002d50:	003d0900 	.word	0x003d0900

08002d54 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d54:	b480      	push	{r7}
 8002d56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d58:	4b02      	ldr	r3, [pc, #8]	; (8002d64 <HAL_RCC_GetHCLKFreq+0x10>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
}
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bc80      	pop	{r7}
 8002d62:	4770      	bx	lr
 8002d64:	20000000 	.word	0x20000000

08002d68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002d6c:	f7ff fff2 	bl	8002d54 <HAL_RCC_GetHCLKFreq>
 8002d70:	4602      	mov	r2, r0
 8002d72:	4b05      	ldr	r3, [pc, #20]	; (8002d88 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	0a1b      	lsrs	r3, r3, #8
 8002d78:	f003 0307 	and.w	r3, r3, #7
 8002d7c:	4903      	ldr	r1, [pc, #12]	; (8002d8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d7e:	5ccb      	ldrb	r3, [r1, r3]
 8002d80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d84:	4618      	mov	r0, r3
 8002d86:	bd80      	pop	{r7, pc}
 8002d88:	40021000 	.word	0x40021000
 8002d8c:	08009304 	.word	0x08009304

08002d90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002d94:	f7ff ffde 	bl	8002d54 <HAL_RCC_GetHCLKFreq>
 8002d98:	4602      	mov	r2, r0
 8002d9a:	4b05      	ldr	r3, [pc, #20]	; (8002db0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	0adb      	lsrs	r3, r3, #11
 8002da0:	f003 0307 	and.w	r3, r3, #7
 8002da4:	4903      	ldr	r1, [pc, #12]	; (8002db4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002da6:	5ccb      	ldrb	r3, [r1, r3]
 8002da8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002dac:	4618      	mov	r0, r3
 8002dae:	bd80      	pop	{r7, pc}
 8002db0:	40021000 	.word	0x40021000
 8002db4:	08009304 	.word	0x08009304

08002db8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b085      	sub	sp, #20
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002dc0:	4b0a      	ldr	r3, [pc, #40]	; (8002dec <RCC_Delay+0x34>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a0a      	ldr	r2, [pc, #40]	; (8002df0 <RCC_Delay+0x38>)
 8002dc6:	fba2 2303 	umull	r2, r3, r2, r3
 8002dca:	0a5b      	lsrs	r3, r3, #9
 8002dcc:	687a      	ldr	r2, [r7, #4]
 8002dce:	fb02 f303 	mul.w	r3, r2, r3
 8002dd2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002dd4:	bf00      	nop
  }
  while (Delay --);
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	1e5a      	subs	r2, r3, #1
 8002dda:	60fa      	str	r2, [r7, #12]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d1f9      	bne.n	8002dd4 <RCC_Delay+0x1c>
}
 8002de0:	bf00      	nop
 8002de2:	bf00      	nop
 8002de4:	3714      	adds	r7, #20
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bc80      	pop	{r7}
 8002dea:	4770      	bx	lr
 8002dec:	20000000 	.word	0x20000000
 8002df0:	10624dd3 	.word	0x10624dd3

08002df4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b082      	sub	sp, #8
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d101      	bne.n	8002e06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	e042      	b.n	8002e8c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e0c:	b2db      	uxtb	r3, r3
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d106      	bne.n	8002e20 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2200      	movs	r2, #0
 8002e16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e1a:	6878      	ldr	r0, [r7, #4]
 8002e1c:	f7fe fea2 	bl	8001b64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2224      	movs	r2, #36	; 0x24
 8002e24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	68da      	ldr	r2, [r3, #12]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002e36:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002e38:	6878      	ldr	r0, [r7, #4]
 8002e3a:	f000 fd71 	bl	8003920 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	691a      	ldr	r2, [r3, #16]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002e4c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	695a      	ldr	r2, [r3, #20]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002e5c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	68da      	ldr	r2, [r3, #12]
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002e6c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2200      	movs	r2, #0
 8002e72:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2220      	movs	r2, #32
 8002e78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2220      	movs	r2, #32
 8002e80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2200      	movs	r2, #0
 8002e88:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002e8a:	2300      	movs	r3, #0
}
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	3708      	adds	r7, #8
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bd80      	pop	{r7, pc}

08002e94 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b08a      	sub	sp, #40	; 0x28
 8002e98:	af02      	add	r7, sp, #8
 8002e9a:	60f8      	str	r0, [r7, #12]
 8002e9c:	60b9      	str	r1, [r7, #8]
 8002e9e:	603b      	str	r3, [r7, #0]
 8002ea0:	4613      	mov	r3, r2
 8002ea2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002eae:	b2db      	uxtb	r3, r3
 8002eb0:	2b20      	cmp	r3, #32
 8002eb2:	d16d      	bne.n	8002f90 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d002      	beq.n	8002ec0 <HAL_UART_Transmit+0x2c>
 8002eba:	88fb      	ldrh	r3, [r7, #6]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d101      	bne.n	8002ec4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	e066      	b.n	8002f92 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	2221      	movs	r2, #33	; 0x21
 8002ece:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002ed2:	f7ff f819 	bl	8001f08 <HAL_GetTick>
 8002ed6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	88fa      	ldrh	r2, [r7, #6]
 8002edc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	88fa      	ldrh	r2, [r7, #6]
 8002ee2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	689b      	ldr	r3, [r3, #8]
 8002ee8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002eec:	d108      	bne.n	8002f00 <HAL_UART_Transmit+0x6c>
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	691b      	ldr	r3, [r3, #16]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d104      	bne.n	8002f00 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	61bb      	str	r3, [r7, #24]
 8002efe:	e003      	b.n	8002f08 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002f04:	2300      	movs	r3, #0
 8002f06:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002f08:	e02a      	b.n	8002f60 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	9300      	str	r3, [sp, #0]
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	2200      	movs	r2, #0
 8002f12:	2180      	movs	r1, #128	; 0x80
 8002f14:	68f8      	ldr	r0, [r7, #12]
 8002f16:	f000 faf9 	bl	800350c <UART_WaitOnFlagUntilTimeout>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d001      	beq.n	8002f24 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8002f20:	2303      	movs	r3, #3
 8002f22:	e036      	b.n	8002f92 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002f24:	69fb      	ldr	r3, [r7, #28]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d10b      	bne.n	8002f42 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002f2a:	69bb      	ldr	r3, [r7, #24]
 8002f2c:	881b      	ldrh	r3, [r3, #0]
 8002f2e:	461a      	mov	r2, r3
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f38:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002f3a:	69bb      	ldr	r3, [r7, #24]
 8002f3c:	3302      	adds	r3, #2
 8002f3e:	61bb      	str	r3, [r7, #24]
 8002f40:	e007      	b.n	8002f52 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002f42:	69fb      	ldr	r3, [r7, #28]
 8002f44:	781a      	ldrb	r2, [r3, #0]
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002f4c:	69fb      	ldr	r3, [r7, #28]
 8002f4e:	3301      	adds	r3, #1
 8002f50:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002f56:	b29b      	uxth	r3, r3
 8002f58:	3b01      	subs	r3, #1
 8002f5a:	b29a      	uxth	r2, r3
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002f64:	b29b      	uxth	r3, r3
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d1cf      	bne.n	8002f0a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	9300      	str	r3, [sp, #0]
 8002f6e:	697b      	ldr	r3, [r7, #20]
 8002f70:	2200      	movs	r2, #0
 8002f72:	2140      	movs	r1, #64	; 0x40
 8002f74:	68f8      	ldr	r0, [r7, #12]
 8002f76:	f000 fac9 	bl	800350c <UART_WaitOnFlagUntilTimeout>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d001      	beq.n	8002f84 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8002f80:	2303      	movs	r3, #3
 8002f82:	e006      	b.n	8002f92 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	2220      	movs	r2, #32
 8002f88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	e000      	b.n	8002f92 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002f90:	2302      	movs	r3, #2
  }
}
 8002f92:	4618      	mov	r0, r3
 8002f94:	3720      	adds	r7, #32
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}
	...

08002f9c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b0ba      	sub	sp, #232	; 0xe8
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	68db      	ldr	r3, [r3, #12]
 8002fb4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	695b      	ldr	r3, [r3, #20]
 8002fbe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002fc8:	2300      	movs	r3, #0
 8002fca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002fce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fd2:	f003 030f 	and.w	r3, r3, #15
 8002fd6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002fda:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d10f      	bne.n	8003002 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002fe2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fe6:	f003 0320 	and.w	r3, r3, #32
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d009      	beq.n	8003002 <HAL_UART_IRQHandler+0x66>
 8002fee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ff2:	f003 0320 	and.w	r3, r3, #32
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d003      	beq.n	8003002 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002ffa:	6878      	ldr	r0, [r7, #4]
 8002ffc:	f000 fbd1 	bl	80037a2 <UART_Receive_IT>
      return;
 8003000:	e25b      	b.n	80034ba <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003002:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003006:	2b00      	cmp	r3, #0
 8003008:	f000 80de 	beq.w	80031c8 <HAL_UART_IRQHandler+0x22c>
 800300c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003010:	f003 0301 	and.w	r3, r3, #1
 8003014:	2b00      	cmp	r3, #0
 8003016:	d106      	bne.n	8003026 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003018:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800301c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003020:	2b00      	cmp	r3, #0
 8003022:	f000 80d1 	beq.w	80031c8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003026:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800302a:	f003 0301 	and.w	r3, r3, #1
 800302e:	2b00      	cmp	r3, #0
 8003030:	d00b      	beq.n	800304a <HAL_UART_IRQHandler+0xae>
 8003032:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003036:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800303a:	2b00      	cmp	r3, #0
 800303c:	d005      	beq.n	800304a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003042:	f043 0201 	orr.w	r2, r3, #1
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800304a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800304e:	f003 0304 	and.w	r3, r3, #4
 8003052:	2b00      	cmp	r3, #0
 8003054:	d00b      	beq.n	800306e <HAL_UART_IRQHandler+0xd2>
 8003056:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800305a:	f003 0301 	and.w	r3, r3, #1
 800305e:	2b00      	cmp	r3, #0
 8003060:	d005      	beq.n	800306e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003066:	f043 0202 	orr.w	r2, r3, #2
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800306e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003072:	f003 0302 	and.w	r3, r3, #2
 8003076:	2b00      	cmp	r3, #0
 8003078:	d00b      	beq.n	8003092 <HAL_UART_IRQHandler+0xf6>
 800307a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800307e:	f003 0301 	and.w	r3, r3, #1
 8003082:	2b00      	cmp	r3, #0
 8003084:	d005      	beq.n	8003092 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800308a:	f043 0204 	orr.w	r2, r3, #4
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003092:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003096:	f003 0308 	and.w	r3, r3, #8
 800309a:	2b00      	cmp	r3, #0
 800309c:	d011      	beq.n	80030c2 <HAL_UART_IRQHandler+0x126>
 800309e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80030a2:	f003 0320 	and.w	r3, r3, #32
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d105      	bne.n	80030b6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80030aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80030ae:	f003 0301 	and.w	r3, r3, #1
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d005      	beq.n	80030c2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ba:	f043 0208 	orr.w	r2, r3, #8
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	f000 81f2 	beq.w	80034b0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80030cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030d0:	f003 0320 	and.w	r3, r3, #32
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d008      	beq.n	80030ea <HAL_UART_IRQHandler+0x14e>
 80030d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80030dc:	f003 0320 	and.w	r3, r3, #32
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d002      	beq.n	80030ea <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80030e4:	6878      	ldr	r0, [r7, #4]
 80030e6:	f000 fb5c 	bl	80037a2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	695b      	ldr	r3, [r3, #20]
 80030f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	bf14      	ite	ne
 80030f8:	2301      	movne	r3, #1
 80030fa:	2300      	moveq	r3, #0
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003106:	f003 0308 	and.w	r3, r3, #8
 800310a:	2b00      	cmp	r3, #0
 800310c:	d103      	bne.n	8003116 <HAL_UART_IRQHandler+0x17a>
 800310e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003112:	2b00      	cmp	r3, #0
 8003114:	d04f      	beq.n	80031b6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003116:	6878      	ldr	r0, [r7, #4]
 8003118:	f000 fa66 	bl	80035e8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	695b      	ldr	r3, [r3, #20]
 8003122:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003126:	2b00      	cmp	r3, #0
 8003128:	d041      	beq.n	80031ae <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	3314      	adds	r3, #20
 8003130:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003134:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003138:	e853 3f00 	ldrex	r3, [r3]
 800313c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003140:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003144:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003148:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	3314      	adds	r3, #20
 8003152:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003156:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800315a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800315e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003162:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003166:	e841 2300 	strex	r3, r2, [r1]
 800316a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800316e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003172:	2b00      	cmp	r3, #0
 8003174:	d1d9      	bne.n	800312a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800317a:	2b00      	cmp	r3, #0
 800317c:	d013      	beq.n	80031a6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003182:	4a7e      	ldr	r2, [pc, #504]	; (800337c <HAL_UART_IRQHandler+0x3e0>)
 8003184:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800318a:	4618      	mov	r0, r3
 800318c:	f7ff f80e 	bl	80021ac <HAL_DMA_Abort_IT>
 8003190:	4603      	mov	r3, r0
 8003192:	2b00      	cmp	r3, #0
 8003194:	d016      	beq.n	80031c4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800319a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800319c:	687a      	ldr	r2, [r7, #4]
 800319e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80031a0:	4610      	mov	r0, r2
 80031a2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031a4:	e00e      	b.n	80031c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80031a6:	6878      	ldr	r0, [r7, #4]
 80031a8:	f000 f99c 	bl	80034e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031ac:	e00a      	b.n	80031c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80031ae:	6878      	ldr	r0, [r7, #4]
 80031b0:	f000 f998 	bl	80034e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031b4:	e006      	b.n	80031c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80031b6:	6878      	ldr	r0, [r7, #4]
 80031b8:	f000 f994 	bl	80034e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2200      	movs	r2, #0
 80031c0:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80031c2:	e175      	b.n	80034b0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031c4:	bf00      	nop
    return;
 80031c6:	e173      	b.n	80034b0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031cc:	2b01      	cmp	r3, #1
 80031ce:	f040 814f 	bne.w	8003470 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80031d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031d6:	f003 0310 	and.w	r3, r3, #16
 80031da:	2b00      	cmp	r3, #0
 80031dc:	f000 8148 	beq.w	8003470 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80031e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80031e4:	f003 0310 	and.w	r3, r3, #16
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	f000 8141 	beq.w	8003470 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80031ee:	2300      	movs	r3, #0
 80031f0:	60bb      	str	r3, [r7, #8]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	60bb      	str	r3, [r7, #8]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	60bb      	str	r3, [r7, #8]
 8003202:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	695b      	ldr	r3, [r3, #20]
 800320a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800320e:	2b00      	cmp	r3, #0
 8003210:	f000 80b6 	beq.w	8003380 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003220:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003224:	2b00      	cmp	r3, #0
 8003226:	f000 8145 	beq.w	80034b4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800322e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003232:	429a      	cmp	r2, r3
 8003234:	f080 813e 	bcs.w	80034b4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800323e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003244:	699b      	ldr	r3, [r3, #24]
 8003246:	2b20      	cmp	r3, #32
 8003248:	f000 8088 	beq.w	800335c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	330c      	adds	r3, #12
 8003252:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003256:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800325a:	e853 3f00 	ldrex	r3, [r3]
 800325e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003262:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003266:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800326a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	330c      	adds	r3, #12
 8003274:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003278:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800327c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003280:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003284:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003288:	e841 2300 	strex	r3, r2, [r1]
 800328c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003290:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003294:	2b00      	cmp	r3, #0
 8003296:	d1d9      	bne.n	800324c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	3314      	adds	r3, #20
 800329e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80032a2:	e853 3f00 	ldrex	r3, [r3]
 80032a6:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80032a8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80032aa:	f023 0301 	bic.w	r3, r3, #1
 80032ae:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	3314      	adds	r3, #20
 80032b8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80032bc:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80032c0:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032c2:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80032c4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80032c8:	e841 2300 	strex	r3, r2, [r1]
 80032cc:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80032ce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d1e1      	bne.n	8003298 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	3314      	adds	r3, #20
 80032da:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032dc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80032de:	e853 3f00 	ldrex	r3, [r3]
 80032e2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80032e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80032ea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	3314      	adds	r3, #20
 80032f4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80032f8:	66fa      	str	r2, [r7, #108]	; 0x6c
 80032fa:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032fc:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80032fe:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003300:	e841 2300 	strex	r3, r2, [r1]
 8003304:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003306:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003308:	2b00      	cmp	r3, #0
 800330a:	d1e3      	bne.n	80032d4 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2220      	movs	r2, #32
 8003310:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2200      	movs	r2, #0
 8003318:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	330c      	adds	r3, #12
 8003320:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003322:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003324:	e853 3f00 	ldrex	r3, [r3]
 8003328:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800332a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800332c:	f023 0310 	bic.w	r3, r3, #16
 8003330:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	330c      	adds	r3, #12
 800333a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800333e:	65ba      	str	r2, [r7, #88]	; 0x58
 8003340:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003342:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003344:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003346:	e841 2300 	strex	r3, r2, [r1]
 800334a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800334c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800334e:	2b00      	cmp	r3, #0
 8003350:	d1e3      	bne.n	800331a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003356:	4618      	mov	r0, r3
 8003358:	f7fe feed 	bl	8002136 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2202      	movs	r2, #2
 8003360:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800336a:	b29b      	uxth	r3, r3
 800336c:	1ad3      	subs	r3, r2, r3
 800336e:	b29b      	uxth	r3, r3
 8003370:	4619      	mov	r1, r3
 8003372:	6878      	ldr	r0, [r7, #4]
 8003374:	f000 f8bf 	bl	80034f6 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003378:	e09c      	b.n	80034b4 <HAL_UART_IRQHandler+0x518>
 800337a:	bf00      	nop
 800337c:	080036ad 	.word	0x080036ad
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003388:	b29b      	uxth	r3, r3
 800338a:	1ad3      	subs	r3, r2, r3
 800338c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003394:	b29b      	uxth	r3, r3
 8003396:	2b00      	cmp	r3, #0
 8003398:	f000 808e 	beq.w	80034b8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800339c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	f000 8089 	beq.w	80034b8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	330c      	adds	r3, #12
 80033ac:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033b0:	e853 3f00 	ldrex	r3, [r3]
 80033b4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80033b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033b8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80033bc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	330c      	adds	r3, #12
 80033c6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80033ca:	647a      	str	r2, [r7, #68]	; 0x44
 80033cc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033ce:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80033d0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80033d2:	e841 2300 	strex	r3, r2, [r1]
 80033d6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80033d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d1e3      	bne.n	80033a6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	3314      	adds	r3, #20
 80033e4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033e8:	e853 3f00 	ldrex	r3, [r3]
 80033ec:	623b      	str	r3, [r7, #32]
   return(result);
 80033ee:	6a3b      	ldr	r3, [r7, #32]
 80033f0:	f023 0301 	bic.w	r3, r3, #1
 80033f4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	3314      	adds	r3, #20
 80033fe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003402:	633a      	str	r2, [r7, #48]	; 0x30
 8003404:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003406:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003408:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800340a:	e841 2300 	strex	r3, r2, [r1]
 800340e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003412:	2b00      	cmp	r3, #0
 8003414:	d1e3      	bne.n	80033de <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2220      	movs	r2, #32
 800341a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2200      	movs	r2, #0
 8003422:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	330c      	adds	r3, #12
 800342a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800342c:	693b      	ldr	r3, [r7, #16]
 800342e:	e853 3f00 	ldrex	r3, [r3]
 8003432:	60fb      	str	r3, [r7, #12]
   return(result);
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	f023 0310 	bic.w	r3, r3, #16
 800343a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	330c      	adds	r3, #12
 8003444:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003448:	61fa      	str	r2, [r7, #28]
 800344a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800344c:	69b9      	ldr	r1, [r7, #24]
 800344e:	69fa      	ldr	r2, [r7, #28]
 8003450:	e841 2300 	strex	r3, r2, [r1]
 8003454:	617b      	str	r3, [r7, #20]
   return(result);
 8003456:	697b      	ldr	r3, [r7, #20]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d1e3      	bne.n	8003424 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2202      	movs	r2, #2
 8003460:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003462:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003466:	4619      	mov	r1, r3
 8003468:	6878      	ldr	r0, [r7, #4]
 800346a:	f000 f844 	bl	80034f6 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800346e:	e023      	b.n	80034b8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003470:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003474:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003478:	2b00      	cmp	r3, #0
 800347a:	d009      	beq.n	8003490 <HAL_UART_IRQHandler+0x4f4>
 800347c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003480:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003484:	2b00      	cmp	r3, #0
 8003486:	d003      	beq.n	8003490 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003488:	6878      	ldr	r0, [r7, #4]
 800348a:	f000 f923 	bl	80036d4 <UART_Transmit_IT>
    return;
 800348e:	e014      	b.n	80034ba <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003490:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003494:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003498:	2b00      	cmp	r3, #0
 800349a:	d00e      	beq.n	80034ba <HAL_UART_IRQHandler+0x51e>
 800349c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80034a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d008      	beq.n	80034ba <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80034a8:	6878      	ldr	r0, [r7, #4]
 80034aa:	f000 f962 	bl	8003772 <UART_EndTransmit_IT>
    return;
 80034ae:	e004      	b.n	80034ba <HAL_UART_IRQHandler+0x51e>
    return;
 80034b0:	bf00      	nop
 80034b2:	e002      	b.n	80034ba <HAL_UART_IRQHandler+0x51e>
      return;
 80034b4:	bf00      	nop
 80034b6:	e000      	b.n	80034ba <HAL_UART_IRQHandler+0x51e>
      return;
 80034b8:	bf00      	nop
  }
}
 80034ba:	37e8      	adds	r7, #232	; 0xe8
 80034bc:	46bd      	mov	sp, r7
 80034be:	bd80      	pop	{r7, pc}

080034c0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80034c0:	b480      	push	{r7}
 80034c2:	b083      	sub	sp, #12
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80034c8:	bf00      	nop
 80034ca:	370c      	adds	r7, #12
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bc80      	pop	{r7}
 80034d0:	4770      	bx	lr

080034d2 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80034d2:	b480      	push	{r7}
 80034d4:	b083      	sub	sp, #12
 80034d6:	af00      	add	r7, sp, #0
 80034d8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80034da:	bf00      	nop
 80034dc:	370c      	adds	r7, #12
 80034de:	46bd      	mov	sp, r7
 80034e0:	bc80      	pop	{r7}
 80034e2:	4770      	bx	lr

080034e4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80034e4:	b480      	push	{r7}
 80034e6:	b083      	sub	sp, #12
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80034ec:	bf00      	nop
 80034ee:	370c      	adds	r7, #12
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bc80      	pop	{r7}
 80034f4:	4770      	bx	lr

080034f6 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80034f6:	b480      	push	{r7}
 80034f8:	b083      	sub	sp, #12
 80034fa:	af00      	add	r7, sp, #0
 80034fc:	6078      	str	r0, [r7, #4]
 80034fe:	460b      	mov	r3, r1
 8003500:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003502:	bf00      	nop
 8003504:	370c      	adds	r7, #12
 8003506:	46bd      	mov	sp, r7
 8003508:	bc80      	pop	{r7}
 800350a:	4770      	bx	lr

0800350c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b090      	sub	sp, #64	; 0x40
 8003510:	af00      	add	r7, sp, #0
 8003512:	60f8      	str	r0, [r7, #12]
 8003514:	60b9      	str	r1, [r7, #8]
 8003516:	603b      	str	r3, [r7, #0]
 8003518:	4613      	mov	r3, r2
 800351a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800351c:	e050      	b.n	80035c0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800351e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003520:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003524:	d04c      	beq.n	80035c0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003526:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003528:	2b00      	cmp	r3, #0
 800352a:	d007      	beq.n	800353c <UART_WaitOnFlagUntilTimeout+0x30>
 800352c:	f7fe fcec 	bl	8001f08 <HAL_GetTick>
 8003530:	4602      	mov	r2, r0
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	1ad3      	subs	r3, r2, r3
 8003536:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003538:	429a      	cmp	r2, r3
 800353a:	d241      	bcs.n	80035c0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	330c      	adds	r3, #12
 8003542:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003546:	e853 3f00 	ldrex	r3, [r3]
 800354a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800354c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800354e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003552:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	330c      	adds	r3, #12
 800355a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800355c:	637a      	str	r2, [r7, #52]	; 0x34
 800355e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003560:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003562:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003564:	e841 2300 	strex	r3, r2, [r1]
 8003568:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800356a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800356c:	2b00      	cmp	r3, #0
 800356e:	d1e5      	bne.n	800353c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	3314      	adds	r3, #20
 8003576:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	e853 3f00 	ldrex	r3, [r3]
 800357e:	613b      	str	r3, [r7, #16]
   return(result);
 8003580:	693b      	ldr	r3, [r7, #16]
 8003582:	f023 0301 	bic.w	r3, r3, #1
 8003586:	63bb      	str	r3, [r7, #56]	; 0x38
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	3314      	adds	r3, #20
 800358e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003590:	623a      	str	r2, [r7, #32]
 8003592:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003594:	69f9      	ldr	r1, [r7, #28]
 8003596:	6a3a      	ldr	r2, [r7, #32]
 8003598:	e841 2300 	strex	r3, r2, [r1]
 800359c:	61bb      	str	r3, [r7, #24]
   return(result);
 800359e:	69bb      	ldr	r3, [r7, #24]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d1e5      	bne.n	8003570 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	2220      	movs	r2, #32
 80035a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	2220      	movs	r2, #32
 80035b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	2200      	movs	r2, #0
 80035b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80035bc:	2303      	movs	r3, #3
 80035be:	e00f      	b.n	80035e0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	681a      	ldr	r2, [r3, #0]
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	4013      	ands	r3, r2
 80035ca:	68ba      	ldr	r2, [r7, #8]
 80035cc:	429a      	cmp	r2, r3
 80035ce:	bf0c      	ite	eq
 80035d0:	2301      	moveq	r3, #1
 80035d2:	2300      	movne	r3, #0
 80035d4:	b2db      	uxtb	r3, r3
 80035d6:	461a      	mov	r2, r3
 80035d8:	79fb      	ldrb	r3, [r7, #7]
 80035da:	429a      	cmp	r2, r3
 80035dc:	d09f      	beq.n	800351e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80035de:	2300      	movs	r3, #0
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	3740      	adds	r7, #64	; 0x40
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bd80      	pop	{r7, pc}

080035e8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80035e8:	b480      	push	{r7}
 80035ea:	b095      	sub	sp, #84	; 0x54
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	330c      	adds	r3, #12
 80035f6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035fa:	e853 3f00 	ldrex	r3, [r3]
 80035fe:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003602:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003606:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	330c      	adds	r3, #12
 800360e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003610:	643a      	str	r2, [r7, #64]	; 0x40
 8003612:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003614:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003616:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003618:	e841 2300 	strex	r3, r2, [r1]
 800361c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800361e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003620:	2b00      	cmp	r3, #0
 8003622:	d1e5      	bne.n	80035f0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	3314      	adds	r3, #20
 800362a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800362c:	6a3b      	ldr	r3, [r7, #32]
 800362e:	e853 3f00 	ldrex	r3, [r3]
 8003632:	61fb      	str	r3, [r7, #28]
   return(result);
 8003634:	69fb      	ldr	r3, [r7, #28]
 8003636:	f023 0301 	bic.w	r3, r3, #1
 800363a:	64bb      	str	r3, [r7, #72]	; 0x48
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	3314      	adds	r3, #20
 8003642:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003644:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003646:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003648:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800364a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800364c:	e841 2300 	strex	r3, r2, [r1]
 8003650:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003654:	2b00      	cmp	r3, #0
 8003656:	d1e5      	bne.n	8003624 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800365c:	2b01      	cmp	r3, #1
 800365e:	d119      	bne.n	8003694 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	330c      	adds	r3, #12
 8003666:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	e853 3f00 	ldrex	r3, [r3]
 800366e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	f023 0310 	bic.w	r3, r3, #16
 8003676:	647b      	str	r3, [r7, #68]	; 0x44
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	330c      	adds	r3, #12
 800367e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003680:	61ba      	str	r2, [r7, #24]
 8003682:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003684:	6979      	ldr	r1, [r7, #20]
 8003686:	69ba      	ldr	r2, [r7, #24]
 8003688:	e841 2300 	strex	r3, r2, [r1]
 800368c:	613b      	str	r3, [r7, #16]
   return(result);
 800368e:	693b      	ldr	r3, [r7, #16]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d1e5      	bne.n	8003660 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2220      	movs	r2, #32
 8003698:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2200      	movs	r2, #0
 80036a0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80036a2:	bf00      	nop
 80036a4:	3754      	adds	r7, #84	; 0x54
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bc80      	pop	{r7}
 80036aa:	4770      	bx	lr

080036ac <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b084      	sub	sp, #16
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	2200      	movs	r2, #0
 80036be:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	2200      	movs	r2, #0
 80036c4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80036c6:	68f8      	ldr	r0, [r7, #12]
 80036c8:	f7ff ff0c 	bl	80034e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80036cc:	bf00      	nop
 80036ce:	3710      	adds	r7, #16
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bd80      	pop	{r7, pc}

080036d4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80036d4:	b480      	push	{r7}
 80036d6:	b085      	sub	sp, #20
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036e2:	b2db      	uxtb	r3, r3
 80036e4:	2b21      	cmp	r3, #33	; 0x21
 80036e6:	d13e      	bne.n	8003766 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	689b      	ldr	r3, [r3, #8]
 80036ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036f0:	d114      	bne.n	800371c <UART_Transmit_IT+0x48>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	691b      	ldr	r3, [r3, #16]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d110      	bne.n	800371c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6a1b      	ldr	r3, [r3, #32]
 80036fe:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	881b      	ldrh	r3, [r3, #0]
 8003704:	461a      	mov	r2, r3
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800370e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6a1b      	ldr	r3, [r3, #32]
 8003714:	1c9a      	adds	r2, r3, #2
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	621a      	str	r2, [r3, #32]
 800371a:	e008      	b.n	800372e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6a1b      	ldr	r3, [r3, #32]
 8003720:	1c59      	adds	r1, r3, #1
 8003722:	687a      	ldr	r2, [r7, #4]
 8003724:	6211      	str	r1, [r2, #32]
 8003726:	781a      	ldrb	r2, [r3, #0]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003732:	b29b      	uxth	r3, r3
 8003734:	3b01      	subs	r3, #1
 8003736:	b29b      	uxth	r3, r3
 8003738:	687a      	ldr	r2, [r7, #4]
 800373a:	4619      	mov	r1, r3
 800373c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800373e:	2b00      	cmp	r3, #0
 8003740:	d10f      	bne.n	8003762 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	68da      	ldr	r2, [r3, #12]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003750:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	68da      	ldr	r2, [r3, #12]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003760:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003762:	2300      	movs	r3, #0
 8003764:	e000      	b.n	8003768 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003766:	2302      	movs	r3, #2
  }
}
 8003768:	4618      	mov	r0, r3
 800376a:	3714      	adds	r7, #20
 800376c:	46bd      	mov	sp, r7
 800376e:	bc80      	pop	{r7}
 8003770:	4770      	bx	lr

08003772 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003772:	b580      	push	{r7, lr}
 8003774:	b082      	sub	sp, #8
 8003776:	af00      	add	r7, sp, #0
 8003778:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	68da      	ldr	r2, [r3, #12]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003788:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2220      	movs	r2, #32
 800378e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003792:	6878      	ldr	r0, [r7, #4]
 8003794:	f7ff fe94 	bl	80034c0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003798:	2300      	movs	r3, #0
}
 800379a:	4618      	mov	r0, r3
 800379c:	3708      	adds	r7, #8
 800379e:	46bd      	mov	sp, r7
 80037a0:	bd80      	pop	{r7, pc}

080037a2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80037a2:	b580      	push	{r7, lr}
 80037a4:	b08c      	sub	sp, #48	; 0x30
 80037a6:	af00      	add	r7, sp, #0
 80037a8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80037b0:	b2db      	uxtb	r3, r3
 80037b2:	2b22      	cmp	r3, #34	; 0x22
 80037b4:	f040 80ae 	bne.w	8003914 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	689b      	ldr	r3, [r3, #8]
 80037bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037c0:	d117      	bne.n	80037f2 <UART_Receive_IT+0x50>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	691b      	ldr	r3, [r3, #16]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d113      	bne.n	80037f2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80037ca:	2300      	movs	r3, #0
 80037cc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037d2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	b29b      	uxth	r3, r3
 80037dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037e0:	b29a      	uxth	r2, r3
 80037e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037e4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037ea:	1c9a      	adds	r2, r3, #2
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	629a      	str	r2, [r3, #40]	; 0x28
 80037f0:	e026      	b.n	8003840 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037f6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80037f8:	2300      	movs	r3, #0
 80037fa:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	689b      	ldr	r3, [r3, #8]
 8003800:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003804:	d007      	beq.n	8003816 <UART_Receive_IT+0x74>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	689b      	ldr	r3, [r3, #8]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d10a      	bne.n	8003824 <UART_Receive_IT+0x82>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	691b      	ldr	r3, [r3, #16]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d106      	bne.n	8003824 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	b2da      	uxtb	r2, r3
 800381e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003820:	701a      	strb	r2, [r3, #0]
 8003822:	e008      	b.n	8003836 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	b2db      	uxtb	r3, r3
 800382c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003830:	b2da      	uxtb	r2, r3
 8003832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003834:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800383a:	1c5a      	adds	r2, r3, #1
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003844:	b29b      	uxth	r3, r3
 8003846:	3b01      	subs	r3, #1
 8003848:	b29b      	uxth	r3, r3
 800384a:	687a      	ldr	r2, [r7, #4]
 800384c:	4619      	mov	r1, r3
 800384e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003850:	2b00      	cmp	r3, #0
 8003852:	d15d      	bne.n	8003910 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	68da      	ldr	r2, [r3, #12]
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f022 0220 	bic.w	r2, r2, #32
 8003862:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	68da      	ldr	r2, [r3, #12]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003872:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	695a      	ldr	r2, [r3, #20]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f022 0201 	bic.w	r2, r2, #1
 8003882:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2220      	movs	r2, #32
 8003888:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2200      	movs	r2, #0
 8003890:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003896:	2b01      	cmp	r3, #1
 8003898:	d135      	bne.n	8003906 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2200      	movs	r2, #0
 800389e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	330c      	adds	r3, #12
 80038a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038a8:	697b      	ldr	r3, [r7, #20]
 80038aa:	e853 3f00 	ldrex	r3, [r3]
 80038ae:	613b      	str	r3, [r7, #16]
   return(result);
 80038b0:	693b      	ldr	r3, [r7, #16]
 80038b2:	f023 0310 	bic.w	r3, r3, #16
 80038b6:	627b      	str	r3, [r7, #36]	; 0x24
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	330c      	adds	r3, #12
 80038be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038c0:	623a      	str	r2, [r7, #32]
 80038c2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038c4:	69f9      	ldr	r1, [r7, #28]
 80038c6:	6a3a      	ldr	r2, [r7, #32]
 80038c8:	e841 2300 	strex	r3, r2, [r1]
 80038cc:	61bb      	str	r3, [r7, #24]
   return(result);
 80038ce:	69bb      	ldr	r3, [r7, #24]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d1e5      	bne.n	80038a0 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f003 0310 	and.w	r3, r3, #16
 80038de:	2b10      	cmp	r3, #16
 80038e0:	d10a      	bne.n	80038f8 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80038e2:	2300      	movs	r3, #0
 80038e4:	60fb      	str	r3, [r7, #12]
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	60fb      	str	r3, [r7, #12]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	60fb      	str	r3, [r7, #12]
 80038f6:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80038fc:	4619      	mov	r1, r3
 80038fe:	6878      	ldr	r0, [r7, #4]
 8003900:	f7ff fdf9 	bl	80034f6 <HAL_UARTEx_RxEventCallback>
 8003904:	e002      	b.n	800390c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003906:	6878      	ldr	r0, [r7, #4]
 8003908:	f7ff fde3 	bl	80034d2 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800390c:	2300      	movs	r3, #0
 800390e:	e002      	b.n	8003916 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003910:	2300      	movs	r3, #0
 8003912:	e000      	b.n	8003916 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003914:	2302      	movs	r3, #2
  }
}
 8003916:	4618      	mov	r0, r3
 8003918:	3730      	adds	r7, #48	; 0x30
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}
	...

08003920 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b084      	sub	sp, #16
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	691b      	ldr	r3, [r3, #16]
 800392e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	68da      	ldr	r2, [r3, #12]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	430a      	orrs	r2, r1
 800393c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	689a      	ldr	r2, [r3, #8]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	691b      	ldr	r3, [r3, #16]
 8003946:	431a      	orrs	r2, r3
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	695b      	ldr	r3, [r3, #20]
 800394c:	4313      	orrs	r3, r2
 800394e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	68db      	ldr	r3, [r3, #12]
 8003956:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800395a:	f023 030c 	bic.w	r3, r3, #12
 800395e:	687a      	ldr	r2, [r7, #4]
 8003960:	6812      	ldr	r2, [r2, #0]
 8003962:	68b9      	ldr	r1, [r7, #8]
 8003964:	430b      	orrs	r3, r1
 8003966:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	695b      	ldr	r3, [r3, #20]
 800396e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	699a      	ldr	r2, [r3, #24]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	430a      	orrs	r2, r1
 800397c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a2c      	ldr	r2, [pc, #176]	; (8003a34 <UART_SetConfig+0x114>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d103      	bne.n	8003990 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003988:	f7ff fa02 	bl	8002d90 <HAL_RCC_GetPCLK2Freq>
 800398c:	60f8      	str	r0, [r7, #12]
 800398e:	e002      	b.n	8003996 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003990:	f7ff f9ea 	bl	8002d68 <HAL_RCC_GetPCLK1Freq>
 8003994:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003996:	68fa      	ldr	r2, [r7, #12]
 8003998:	4613      	mov	r3, r2
 800399a:	009b      	lsls	r3, r3, #2
 800399c:	4413      	add	r3, r2
 800399e:	009a      	lsls	r2, r3, #2
 80039a0:	441a      	add	r2, r3
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	009b      	lsls	r3, r3, #2
 80039a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80039ac:	4a22      	ldr	r2, [pc, #136]	; (8003a38 <UART_SetConfig+0x118>)
 80039ae:	fba2 2303 	umull	r2, r3, r2, r3
 80039b2:	095b      	lsrs	r3, r3, #5
 80039b4:	0119      	lsls	r1, r3, #4
 80039b6:	68fa      	ldr	r2, [r7, #12]
 80039b8:	4613      	mov	r3, r2
 80039ba:	009b      	lsls	r3, r3, #2
 80039bc:	4413      	add	r3, r2
 80039be:	009a      	lsls	r2, r3, #2
 80039c0:	441a      	add	r2, r3
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	009b      	lsls	r3, r3, #2
 80039c8:	fbb2 f2f3 	udiv	r2, r2, r3
 80039cc:	4b1a      	ldr	r3, [pc, #104]	; (8003a38 <UART_SetConfig+0x118>)
 80039ce:	fba3 0302 	umull	r0, r3, r3, r2
 80039d2:	095b      	lsrs	r3, r3, #5
 80039d4:	2064      	movs	r0, #100	; 0x64
 80039d6:	fb00 f303 	mul.w	r3, r0, r3
 80039da:	1ad3      	subs	r3, r2, r3
 80039dc:	011b      	lsls	r3, r3, #4
 80039de:	3332      	adds	r3, #50	; 0x32
 80039e0:	4a15      	ldr	r2, [pc, #84]	; (8003a38 <UART_SetConfig+0x118>)
 80039e2:	fba2 2303 	umull	r2, r3, r2, r3
 80039e6:	095b      	lsrs	r3, r3, #5
 80039e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80039ec:	4419      	add	r1, r3
 80039ee:	68fa      	ldr	r2, [r7, #12]
 80039f0:	4613      	mov	r3, r2
 80039f2:	009b      	lsls	r3, r3, #2
 80039f4:	4413      	add	r3, r2
 80039f6:	009a      	lsls	r2, r3, #2
 80039f8:	441a      	add	r2, r3
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	009b      	lsls	r3, r3, #2
 8003a00:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a04:	4b0c      	ldr	r3, [pc, #48]	; (8003a38 <UART_SetConfig+0x118>)
 8003a06:	fba3 0302 	umull	r0, r3, r3, r2
 8003a0a:	095b      	lsrs	r3, r3, #5
 8003a0c:	2064      	movs	r0, #100	; 0x64
 8003a0e:	fb00 f303 	mul.w	r3, r0, r3
 8003a12:	1ad3      	subs	r3, r2, r3
 8003a14:	011b      	lsls	r3, r3, #4
 8003a16:	3332      	adds	r3, #50	; 0x32
 8003a18:	4a07      	ldr	r2, [pc, #28]	; (8003a38 <UART_SetConfig+0x118>)
 8003a1a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a1e:	095b      	lsrs	r3, r3, #5
 8003a20:	f003 020f 	and.w	r2, r3, #15
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	440a      	add	r2, r1
 8003a2a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003a2c:	bf00      	nop
 8003a2e:	3710      	adds	r7, #16
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bd80      	pop	{r7, pc}
 8003a34:	40013800 	.word	0x40013800
 8003a38:	51eb851f 	.word	0x51eb851f

08003a3c <__cvt>:
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a42:	461f      	mov	r7, r3
 8003a44:	bfbb      	ittet	lt
 8003a46:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8003a4a:	461f      	movlt	r7, r3
 8003a4c:	2300      	movge	r3, #0
 8003a4e:	232d      	movlt	r3, #45	; 0x2d
 8003a50:	b088      	sub	sp, #32
 8003a52:	4614      	mov	r4, r2
 8003a54:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8003a56:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8003a58:	7013      	strb	r3, [r2, #0]
 8003a5a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8003a5c:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8003a60:	f023 0820 	bic.w	r8, r3, #32
 8003a64:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003a68:	d005      	beq.n	8003a76 <__cvt+0x3a>
 8003a6a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003a6e:	d100      	bne.n	8003a72 <__cvt+0x36>
 8003a70:	3501      	adds	r5, #1
 8003a72:	2302      	movs	r3, #2
 8003a74:	e000      	b.n	8003a78 <__cvt+0x3c>
 8003a76:	2303      	movs	r3, #3
 8003a78:	aa07      	add	r2, sp, #28
 8003a7a:	9204      	str	r2, [sp, #16]
 8003a7c:	aa06      	add	r2, sp, #24
 8003a7e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8003a82:	e9cd 3500 	strd	r3, r5, [sp]
 8003a86:	4622      	mov	r2, r4
 8003a88:	463b      	mov	r3, r7
 8003a8a:	f001 f89d 	bl	8004bc8 <_dtoa_r>
 8003a8e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003a92:	4606      	mov	r6, r0
 8003a94:	d102      	bne.n	8003a9c <__cvt+0x60>
 8003a96:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003a98:	07db      	lsls	r3, r3, #31
 8003a9a:	d522      	bpl.n	8003ae2 <__cvt+0xa6>
 8003a9c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003aa0:	eb06 0905 	add.w	r9, r6, r5
 8003aa4:	d110      	bne.n	8003ac8 <__cvt+0x8c>
 8003aa6:	7833      	ldrb	r3, [r6, #0]
 8003aa8:	2b30      	cmp	r3, #48	; 0x30
 8003aaa:	d10a      	bne.n	8003ac2 <__cvt+0x86>
 8003aac:	2200      	movs	r2, #0
 8003aae:	2300      	movs	r3, #0
 8003ab0:	4620      	mov	r0, r4
 8003ab2:	4639      	mov	r1, r7
 8003ab4:	f7fd f82c 	bl	8000b10 <__aeabi_dcmpeq>
 8003ab8:	b918      	cbnz	r0, 8003ac2 <__cvt+0x86>
 8003aba:	f1c5 0501 	rsb	r5, r5, #1
 8003abe:	f8ca 5000 	str.w	r5, [sl]
 8003ac2:	f8da 3000 	ldr.w	r3, [sl]
 8003ac6:	4499      	add	r9, r3
 8003ac8:	2200      	movs	r2, #0
 8003aca:	2300      	movs	r3, #0
 8003acc:	4620      	mov	r0, r4
 8003ace:	4639      	mov	r1, r7
 8003ad0:	f7fd f81e 	bl	8000b10 <__aeabi_dcmpeq>
 8003ad4:	b108      	cbz	r0, 8003ada <__cvt+0x9e>
 8003ad6:	f8cd 901c 	str.w	r9, [sp, #28]
 8003ada:	2230      	movs	r2, #48	; 0x30
 8003adc:	9b07      	ldr	r3, [sp, #28]
 8003ade:	454b      	cmp	r3, r9
 8003ae0:	d307      	bcc.n	8003af2 <__cvt+0xb6>
 8003ae2:	4630      	mov	r0, r6
 8003ae4:	9b07      	ldr	r3, [sp, #28]
 8003ae6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8003ae8:	1b9b      	subs	r3, r3, r6
 8003aea:	6013      	str	r3, [r2, #0]
 8003aec:	b008      	add	sp, #32
 8003aee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003af2:	1c59      	adds	r1, r3, #1
 8003af4:	9107      	str	r1, [sp, #28]
 8003af6:	701a      	strb	r2, [r3, #0]
 8003af8:	e7f0      	b.n	8003adc <__cvt+0xa0>

08003afa <__exponent>:
 8003afa:	4603      	mov	r3, r0
 8003afc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003afe:	2900      	cmp	r1, #0
 8003b00:	f803 2b02 	strb.w	r2, [r3], #2
 8003b04:	bfb6      	itet	lt
 8003b06:	222d      	movlt	r2, #45	; 0x2d
 8003b08:	222b      	movge	r2, #43	; 0x2b
 8003b0a:	4249      	neglt	r1, r1
 8003b0c:	2909      	cmp	r1, #9
 8003b0e:	7042      	strb	r2, [r0, #1]
 8003b10:	dd2a      	ble.n	8003b68 <__exponent+0x6e>
 8003b12:	f10d 0207 	add.w	r2, sp, #7
 8003b16:	4617      	mov	r7, r2
 8003b18:	260a      	movs	r6, #10
 8003b1a:	fb91 f5f6 	sdiv	r5, r1, r6
 8003b1e:	4694      	mov	ip, r2
 8003b20:	fb06 1415 	mls	r4, r6, r5, r1
 8003b24:	3430      	adds	r4, #48	; 0x30
 8003b26:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8003b2a:	460c      	mov	r4, r1
 8003b2c:	2c63      	cmp	r4, #99	; 0x63
 8003b2e:	4629      	mov	r1, r5
 8003b30:	f102 32ff 	add.w	r2, r2, #4294967295
 8003b34:	dcf1      	bgt.n	8003b1a <__exponent+0x20>
 8003b36:	3130      	adds	r1, #48	; 0x30
 8003b38:	f1ac 0402 	sub.w	r4, ip, #2
 8003b3c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8003b40:	4622      	mov	r2, r4
 8003b42:	1c41      	adds	r1, r0, #1
 8003b44:	42ba      	cmp	r2, r7
 8003b46:	d30a      	bcc.n	8003b5e <__exponent+0x64>
 8003b48:	f10d 0209 	add.w	r2, sp, #9
 8003b4c:	eba2 020c 	sub.w	r2, r2, ip
 8003b50:	42bc      	cmp	r4, r7
 8003b52:	bf88      	it	hi
 8003b54:	2200      	movhi	r2, #0
 8003b56:	4413      	add	r3, r2
 8003b58:	1a18      	subs	r0, r3, r0
 8003b5a:	b003      	add	sp, #12
 8003b5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b5e:	f812 5b01 	ldrb.w	r5, [r2], #1
 8003b62:	f801 5f01 	strb.w	r5, [r1, #1]!
 8003b66:	e7ed      	b.n	8003b44 <__exponent+0x4a>
 8003b68:	2330      	movs	r3, #48	; 0x30
 8003b6a:	3130      	adds	r1, #48	; 0x30
 8003b6c:	7083      	strb	r3, [r0, #2]
 8003b6e:	70c1      	strb	r1, [r0, #3]
 8003b70:	1d03      	adds	r3, r0, #4
 8003b72:	e7f1      	b.n	8003b58 <__exponent+0x5e>

08003b74 <_printf_float>:
 8003b74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b78:	b091      	sub	sp, #68	; 0x44
 8003b7a:	460c      	mov	r4, r1
 8003b7c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8003b80:	4616      	mov	r6, r2
 8003b82:	461f      	mov	r7, r3
 8003b84:	4605      	mov	r5, r0
 8003b86:	f000 ff01 	bl	800498c <_localeconv_r>
 8003b8a:	6803      	ldr	r3, [r0, #0]
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	9309      	str	r3, [sp, #36]	; 0x24
 8003b90:	f7fc fade 	bl	8000150 <strlen>
 8003b94:	2300      	movs	r3, #0
 8003b96:	930e      	str	r3, [sp, #56]	; 0x38
 8003b98:	f8d8 3000 	ldr.w	r3, [r8]
 8003b9c:	900a      	str	r0, [sp, #40]	; 0x28
 8003b9e:	3307      	adds	r3, #7
 8003ba0:	f023 0307 	bic.w	r3, r3, #7
 8003ba4:	f103 0208 	add.w	r2, r3, #8
 8003ba8:	f894 9018 	ldrb.w	r9, [r4, #24]
 8003bac:	f8d4 b000 	ldr.w	fp, [r4]
 8003bb0:	f8c8 2000 	str.w	r2, [r8]
 8003bb4:	e9d3 a800 	ldrd	sl, r8, [r3]
 8003bb8:	4652      	mov	r2, sl
 8003bba:	4643      	mov	r3, r8
 8003bbc:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003bc0:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 8003bc4:	930b      	str	r3, [sp, #44]	; 0x2c
 8003bc6:	f04f 32ff 	mov.w	r2, #4294967295
 8003bca:	4650      	mov	r0, sl
 8003bcc:	4b9c      	ldr	r3, [pc, #624]	; (8003e40 <_printf_float+0x2cc>)
 8003bce:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003bd0:	f7fc ffd0 	bl	8000b74 <__aeabi_dcmpun>
 8003bd4:	bb70      	cbnz	r0, 8003c34 <_printf_float+0xc0>
 8003bd6:	f04f 32ff 	mov.w	r2, #4294967295
 8003bda:	4650      	mov	r0, sl
 8003bdc:	4b98      	ldr	r3, [pc, #608]	; (8003e40 <_printf_float+0x2cc>)
 8003bde:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003be0:	f7fc ffaa 	bl	8000b38 <__aeabi_dcmple>
 8003be4:	bb30      	cbnz	r0, 8003c34 <_printf_float+0xc0>
 8003be6:	2200      	movs	r2, #0
 8003be8:	2300      	movs	r3, #0
 8003bea:	4650      	mov	r0, sl
 8003bec:	4641      	mov	r1, r8
 8003bee:	f7fc ff99 	bl	8000b24 <__aeabi_dcmplt>
 8003bf2:	b110      	cbz	r0, 8003bfa <_printf_float+0x86>
 8003bf4:	232d      	movs	r3, #45	; 0x2d
 8003bf6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003bfa:	4a92      	ldr	r2, [pc, #584]	; (8003e44 <_printf_float+0x2d0>)
 8003bfc:	4b92      	ldr	r3, [pc, #584]	; (8003e48 <_printf_float+0x2d4>)
 8003bfe:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8003c02:	bf94      	ite	ls
 8003c04:	4690      	movls	r8, r2
 8003c06:	4698      	movhi	r8, r3
 8003c08:	2303      	movs	r3, #3
 8003c0a:	f04f 0a00 	mov.w	sl, #0
 8003c0e:	6123      	str	r3, [r4, #16]
 8003c10:	f02b 0304 	bic.w	r3, fp, #4
 8003c14:	6023      	str	r3, [r4, #0]
 8003c16:	4633      	mov	r3, r6
 8003c18:	4621      	mov	r1, r4
 8003c1a:	4628      	mov	r0, r5
 8003c1c:	9700      	str	r7, [sp, #0]
 8003c1e:	aa0f      	add	r2, sp, #60	; 0x3c
 8003c20:	f000 f9d6 	bl	8003fd0 <_printf_common>
 8003c24:	3001      	adds	r0, #1
 8003c26:	f040 8090 	bne.w	8003d4a <_printf_float+0x1d6>
 8003c2a:	f04f 30ff 	mov.w	r0, #4294967295
 8003c2e:	b011      	add	sp, #68	; 0x44
 8003c30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c34:	4652      	mov	r2, sl
 8003c36:	4643      	mov	r3, r8
 8003c38:	4650      	mov	r0, sl
 8003c3a:	4641      	mov	r1, r8
 8003c3c:	f7fc ff9a 	bl	8000b74 <__aeabi_dcmpun>
 8003c40:	b148      	cbz	r0, 8003c56 <_printf_float+0xe2>
 8003c42:	f1b8 0f00 	cmp.w	r8, #0
 8003c46:	bfb8      	it	lt
 8003c48:	232d      	movlt	r3, #45	; 0x2d
 8003c4a:	4a80      	ldr	r2, [pc, #512]	; (8003e4c <_printf_float+0x2d8>)
 8003c4c:	bfb8      	it	lt
 8003c4e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8003c52:	4b7f      	ldr	r3, [pc, #508]	; (8003e50 <_printf_float+0x2dc>)
 8003c54:	e7d3      	b.n	8003bfe <_printf_float+0x8a>
 8003c56:	6863      	ldr	r3, [r4, #4]
 8003c58:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8003c5c:	1c5a      	adds	r2, r3, #1
 8003c5e:	d142      	bne.n	8003ce6 <_printf_float+0x172>
 8003c60:	2306      	movs	r3, #6
 8003c62:	6063      	str	r3, [r4, #4]
 8003c64:	2200      	movs	r2, #0
 8003c66:	9206      	str	r2, [sp, #24]
 8003c68:	aa0e      	add	r2, sp, #56	; 0x38
 8003c6a:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8003c6e:	aa0d      	add	r2, sp, #52	; 0x34
 8003c70:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8003c74:	9203      	str	r2, [sp, #12]
 8003c76:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8003c7a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8003c7e:	6023      	str	r3, [r4, #0]
 8003c80:	6863      	ldr	r3, [r4, #4]
 8003c82:	4652      	mov	r2, sl
 8003c84:	9300      	str	r3, [sp, #0]
 8003c86:	4628      	mov	r0, r5
 8003c88:	4643      	mov	r3, r8
 8003c8a:	910b      	str	r1, [sp, #44]	; 0x2c
 8003c8c:	f7ff fed6 	bl	8003a3c <__cvt>
 8003c90:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003c92:	4680      	mov	r8, r0
 8003c94:	2947      	cmp	r1, #71	; 0x47
 8003c96:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003c98:	d108      	bne.n	8003cac <_printf_float+0x138>
 8003c9a:	1cc8      	adds	r0, r1, #3
 8003c9c:	db02      	blt.n	8003ca4 <_printf_float+0x130>
 8003c9e:	6863      	ldr	r3, [r4, #4]
 8003ca0:	4299      	cmp	r1, r3
 8003ca2:	dd40      	ble.n	8003d26 <_printf_float+0x1b2>
 8003ca4:	f1a9 0902 	sub.w	r9, r9, #2
 8003ca8:	fa5f f989 	uxtb.w	r9, r9
 8003cac:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8003cb0:	d81f      	bhi.n	8003cf2 <_printf_float+0x17e>
 8003cb2:	464a      	mov	r2, r9
 8003cb4:	3901      	subs	r1, #1
 8003cb6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003cba:	910d      	str	r1, [sp, #52]	; 0x34
 8003cbc:	f7ff ff1d 	bl	8003afa <__exponent>
 8003cc0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003cc2:	4682      	mov	sl, r0
 8003cc4:	1813      	adds	r3, r2, r0
 8003cc6:	2a01      	cmp	r2, #1
 8003cc8:	6123      	str	r3, [r4, #16]
 8003cca:	dc02      	bgt.n	8003cd2 <_printf_float+0x15e>
 8003ccc:	6822      	ldr	r2, [r4, #0]
 8003cce:	07d2      	lsls	r2, r2, #31
 8003cd0:	d501      	bpl.n	8003cd6 <_printf_float+0x162>
 8003cd2:	3301      	adds	r3, #1
 8003cd4:	6123      	str	r3, [r4, #16]
 8003cd6:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d09b      	beq.n	8003c16 <_printf_float+0xa2>
 8003cde:	232d      	movs	r3, #45	; 0x2d
 8003ce0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003ce4:	e797      	b.n	8003c16 <_printf_float+0xa2>
 8003ce6:	2947      	cmp	r1, #71	; 0x47
 8003ce8:	d1bc      	bne.n	8003c64 <_printf_float+0xf0>
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d1ba      	bne.n	8003c64 <_printf_float+0xf0>
 8003cee:	2301      	movs	r3, #1
 8003cf0:	e7b7      	b.n	8003c62 <_printf_float+0xee>
 8003cf2:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8003cf6:	d118      	bne.n	8003d2a <_printf_float+0x1b6>
 8003cf8:	2900      	cmp	r1, #0
 8003cfa:	6863      	ldr	r3, [r4, #4]
 8003cfc:	dd0b      	ble.n	8003d16 <_printf_float+0x1a2>
 8003cfe:	6121      	str	r1, [r4, #16]
 8003d00:	b913      	cbnz	r3, 8003d08 <_printf_float+0x194>
 8003d02:	6822      	ldr	r2, [r4, #0]
 8003d04:	07d0      	lsls	r0, r2, #31
 8003d06:	d502      	bpl.n	8003d0e <_printf_float+0x19a>
 8003d08:	3301      	adds	r3, #1
 8003d0a:	440b      	add	r3, r1
 8003d0c:	6123      	str	r3, [r4, #16]
 8003d0e:	f04f 0a00 	mov.w	sl, #0
 8003d12:	65a1      	str	r1, [r4, #88]	; 0x58
 8003d14:	e7df      	b.n	8003cd6 <_printf_float+0x162>
 8003d16:	b913      	cbnz	r3, 8003d1e <_printf_float+0x1aa>
 8003d18:	6822      	ldr	r2, [r4, #0]
 8003d1a:	07d2      	lsls	r2, r2, #31
 8003d1c:	d501      	bpl.n	8003d22 <_printf_float+0x1ae>
 8003d1e:	3302      	adds	r3, #2
 8003d20:	e7f4      	b.n	8003d0c <_printf_float+0x198>
 8003d22:	2301      	movs	r3, #1
 8003d24:	e7f2      	b.n	8003d0c <_printf_float+0x198>
 8003d26:	f04f 0967 	mov.w	r9, #103	; 0x67
 8003d2a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003d2c:	4299      	cmp	r1, r3
 8003d2e:	db05      	blt.n	8003d3c <_printf_float+0x1c8>
 8003d30:	6823      	ldr	r3, [r4, #0]
 8003d32:	6121      	str	r1, [r4, #16]
 8003d34:	07d8      	lsls	r0, r3, #31
 8003d36:	d5ea      	bpl.n	8003d0e <_printf_float+0x19a>
 8003d38:	1c4b      	adds	r3, r1, #1
 8003d3a:	e7e7      	b.n	8003d0c <_printf_float+0x198>
 8003d3c:	2900      	cmp	r1, #0
 8003d3e:	bfcc      	ite	gt
 8003d40:	2201      	movgt	r2, #1
 8003d42:	f1c1 0202 	rsble	r2, r1, #2
 8003d46:	4413      	add	r3, r2
 8003d48:	e7e0      	b.n	8003d0c <_printf_float+0x198>
 8003d4a:	6823      	ldr	r3, [r4, #0]
 8003d4c:	055a      	lsls	r2, r3, #21
 8003d4e:	d407      	bmi.n	8003d60 <_printf_float+0x1ec>
 8003d50:	6923      	ldr	r3, [r4, #16]
 8003d52:	4642      	mov	r2, r8
 8003d54:	4631      	mov	r1, r6
 8003d56:	4628      	mov	r0, r5
 8003d58:	47b8      	blx	r7
 8003d5a:	3001      	adds	r0, #1
 8003d5c:	d12b      	bne.n	8003db6 <_printf_float+0x242>
 8003d5e:	e764      	b.n	8003c2a <_printf_float+0xb6>
 8003d60:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8003d64:	f240 80dd 	bls.w	8003f22 <_printf_float+0x3ae>
 8003d68:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	2300      	movs	r3, #0
 8003d70:	f7fc fece 	bl	8000b10 <__aeabi_dcmpeq>
 8003d74:	2800      	cmp	r0, #0
 8003d76:	d033      	beq.n	8003de0 <_printf_float+0x26c>
 8003d78:	2301      	movs	r3, #1
 8003d7a:	4631      	mov	r1, r6
 8003d7c:	4628      	mov	r0, r5
 8003d7e:	4a35      	ldr	r2, [pc, #212]	; (8003e54 <_printf_float+0x2e0>)
 8003d80:	47b8      	blx	r7
 8003d82:	3001      	adds	r0, #1
 8003d84:	f43f af51 	beq.w	8003c2a <_printf_float+0xb6>
 8003d88:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003d8c:	429a      	cmp	r2, r3
 8003d8e:	db02      	blt.n	8003d96 <_printf_float+0x222>
 8003d90:	6823      	ldr	r3, [r4, #0]
 8003d92:	07d8      	lsls	r0, r3, #31
 8003d94:	d50f      	bpl.n	8003db6 <_printf_float+0x242>
 8003d96:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003d9a:	4631      	mov	r1, r6
 8003d9c:	4628      	mov	r0, r5
 8003d9e:	47b8      	blx	r7
 8003da0:	3001      	adds	r0, #1
 8003da2:	f43f af42 	beq.w	8003c2a <_printf_float+0xb6>
 8003da6:	f04f 0800 	mov.w	r8, #0
 8003daa:	f104 091a 	add.w	r9, r4, #26
 8003dae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003db0:	3b01      	subs	r3, #1
 8003db2:	4543      	cmp	r3, r8
 8003db4:	dc09      	bgt.n	8003dca <_printf_float+0x256>
 8003db6:	6823      	ldr	r3, [r4, #0]
 8003db8:	079b      	lsls	r3, r3, #30
 8003dba:	f100 8104 	bmi.w	8003fc6 <_printf_float+0x452>
 8003dbe:	68e0      	ldr	r0, [r4, #12]
 8003dc0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003dc2:	4298      	cmp	r0, r3
 8003dc4:	bfb8      	it	lt
 8003dc6:	4618      	movlt	r0, r3
 8003dc8:	e731      	b.n	8003c2e <_printf_float+0xba>
 8003dca:	2301      	movs	r3, #1
 8003dcc:	464a      	mov	r2, r9
 8003dce:	4631      	mov	r1, r6
 8003dd0:	4628      	mov	r0, r5
 8003dd2:	47b8      	blx	r7
 8003dd4:	3001      	adds	r0, #1
 8003dd6:	f43f af28 	beq.w	8003c2a <_printf_float+0xb6>
 8003dda:	f108 0801 	add.w	r8, r8, #1
 8003dde:	e7e6      	b.n	8003dae <_printf_float+0x23a>
 8003de0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	dc38      	bgt.n	8003e58 <_printf_float+0x2e4>
 8003de6:	2301      	movs	r3, #1
 8003de8:	4631      	mov	r1, r6
 8003dea:	4628      	mov	r0, r5
 8003dec:	4a19      	ldr	r2, [pc, #100]	; (8003e54 <_printf_float+0x2e0>)
 8003dee:	47b8      	blx	r7
 8003df0:	3001      	adds	r0, #1
 8003df2:	f43f af1a 	beq.w	8003c2a <_printf_float+0xb6>
 8003df6:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	d102      	bne.n	8003e04 <_printf_float+0x290>
 8003dfe:	6823      	ldr	r3, [r4, #0]
 8003e00:	07d9      	lsls	r1, r3, #31
 8003e02:	d5d8      	bpl.n	8003db6 <_printf_float+0x242>
 8003e04:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003e08:	4631      	mov	r1, r6
 8003e0a:	4628      	mov	r0, r5
 8003e0c:	47b8      	blx	r7
 8003e0e:	3001      	adds	r0, #1
 8003e10:	f43f af0b 	beq.w	8003c2a <_printf_float+0xb6>
 8003e14:	f04f 0900 	mov.w	r9, #0
 8003e18:	f104 0a1a 	add.w	sl, r4, #26
 8003e1c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003e1e:	425b      	negs	r3, r3
 8003e20:	454b      	cmp	r3, r9
 8003e22:	dc01      	bgt.n	8003e28 <_printf_float+0x2b4>
 8003e24:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003e26:	e794      	b.n	8003d52 <_printf_float+0x1de>
 8003e28:	2301      	movs	r3, #1
 8003e2a:	4652      	mov	r2, sl
 8003e2c:	4631      	mov	r1, r6
 8003e2e:	4628      	mov	r0, r5
 8003e30:	47b8      	blx	r7
 8003e32:	3001      	adds	r0, #1
 8003e34:	f43f aef9 	beq.w	8003c2a <_printf_float+0xb6>
 8003e38:	f109 0901 	add.w	r9, r9, #1
 8003e3c:	e7ee      	b.n	8003e1c <_printf_float+0x2a8>
 8003e3e:	bf00      	nop
 8003e40:	7fefffff 	.word	0x7fefffff
 8003e44:	0800931e 	.word	0x0800931e
 8003e48:	08009322 	.word	0x08009322
 8003e4c:	08009326 	.word	0x08009326
 8003e50:	0800932a 	.word	0x0800932a
 8003e54:	0800932e 	.word	0x0800932e
 8003e58:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003e5a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003e5c:	429a      	cmp	r2, r3
 8003e5e:	bfa8      	it	ge
 8003e60:	461a      	movge	r2, r3
 8003e62:	2a00      	cmp	r2, #0
 8003e64:	4691      	mov	r9, r2
 8003e66:	dc37      	bgt.n	8003ed8 <_printf_float+0x364>
 8003e68:	f04f 0b00 	mov.w	fp, #0
 8003e6c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003e70:	f104 021a 	add.w	r2, r4, #26
 8003e74:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8003e78:	ebaa 0309 	sub.w	r3, sl, r9
 8003e7c:	455b      	cmp	r3, fp
 8003e7e:	dc33      	bgt.n	8003ee8 <_printf_float+0x374>
 8003e80:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003e84:	429a      	cmp	r2, r3
 8003e86:	db3b      	blt.n	8003f00 <_printf_float+0x38c>
 8003e88:	6823      	ldr	r3, [r4, #0]
 8003e8a:	07da      	lsls	r2, r3, #31
 8003e8c:	d438      	bmi.n	8003f00 <_printf_float+0x38c>
 8003e8e:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8003e92:	eba2 0903 	sub.w	r9, r2, r3
 8003e96:	eba2 020a 	sub.w	r2, r2, sl
 8003e9a:	4591      	cmp	r9, r2
 8003e9c:	bfa8      	it	ge
 8003e9e:	4691      	movge	r9, r2
 8003ea0:	f1b9 0f00 	cmp.w	r9, #0
 8003ea4:	dc34      	bgt.n	8003f10 <_printf_float+0x39c>
 8003ea6:	f04f 0800 	mov.w	r8, #0
 8003eaa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003eae:	f104 0a1a 	add.w	sl, r4, #26
 8003eb2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003eb6:	1a9b      	subs	r3, r3, r2
 8003eb8:	eba3 0309 	sub.w	r3, r3, r9
 8003ebc:	4543      	cmp	r3, r8
 8003ebe:	f77f af7a 	ble.w	8003db6 <_printf_float+0x242>
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	4652      	mov	r2, sl
 8003ec6:	4631      	mov	r1, r6
 8003ec8:	4628      	mov	r0, r5
 8003eca:	47b8      	blx	r7
 8003ecc:	3001      	adds	r0, #1
 8003ece:	f43f aeac 	beq.w	8003c2a <_printf_float+0xb6>
 8003ed2:	f108 0801 	add.w	r8, r8, #1
 8003ed6:	e7ec      	b.n	8003eb2 <_printf_float+0x33e>
 8003ed8:	4613      	mov	r3, r2
 8003eda:	4631      	mov	r1, r6
 8003edc:	4642      	mov	r2, r8
 8003ede:	4628      	mov	r0, r5
 8003ee0:	47b8      	blx	r7
 8003ee2:	3001      	adds	r0, #1
 8003ee4:	d1c0      	bne.n	8003e68 <_printf_float+0x2f4>
 8003ee6:	e6a0      	b.n	8003c2a <_printf_float+0xb6>
 8003ee8:	2301      	movs	r3, #1
 8003eea:	4631      	mov	r1, r6
 8003eec:	4628      	mov	r0, r5
 8003eee:	920b      	str	r2, [sp, #44]	; 0x2c
 8003ef0:	47b8      	blx	r7
 8003ef2:	3001      	adds	r0, #1
 8003ef4:	f43f ae99 	beq.w	8003c2a <_printf_float+0xb6>
 8003ef8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003efa:	f10b 0b01 	add.w	fp, fp, #1
 8003efe:	e7b9      	b.n	8003e74 <_printf_float+0x300>
 8003f00:	4631      	mov	r1, r6
 8003f02:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003f06:	4628      	mov	r0, r5
 8003f08:	47b8      	blx	r7
 8003f0a:	3001      	adds	r0, #1
 8003f0c:	d1bf      	bne.n	8003e8e <_printf_float+0x31a>
 8003f0e:	e68c      	b.n	8003c2a <_printf_float+0xb6>
 8003f10:	464b      	mov	r3, r9
 8003f12:	4631      	mov	r1, r6
 8003f14:	4628      	mov	r0, r5
 8003f16:	eb08 020a 	add.w	r2, r8, sl
 8003f1a:	47b8      	blx	r7
 8003f1c:	3001      	adds	r0, #1
 8003f1e:	d1c2      	bne.n	8003ea6 <_printf_float+0x332>
 8003f20:	e683      	b.n	8003c2a <_printf_float+0xb6>
 8003f22:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003f24:	2a01      	cmp	r2, #1
 8003f26:	dc01      	bgt.n	8003f2c <_printf_float+0x3b8>
 8003f28:	07db      	lsls	r3, r3, #31
 8003f2a:	d539      	bpl.n	8003fa0 <_printf_float+0x42c>
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	4642      	mov	r2, r8
 8003f30:	4631      	mov	r1, r6
 8003f32:	4628      	mov	r0, r5
 8003f34:	47b8      	blx	r7
 8003f36:	3001      	adds	r0, #1
 8003f38:	f43f ae77 	beq.w	8003c2a <_printf_float+0xb6>
 8003f3c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003f40:	4631      	mov	r1, r6
 8003f42:	4628      	mov	r0, r5
 8003f44:	47b8      	blx	r7
 8003f46:	3001      	adds	r0, #1
 8003f48:	f43f ae6f 	beq.w	8003c2a <_printf_float+0xb6>
 8003f4c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003f50:	2200      	movs	r2, #0
 8003f52:	2300      	movs	r3, #0
 8003f54:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8003f58:	f7fc fdda 	bl	8000b10 <__aeabi_dcmpeq>
 8003f5c:	b9d8      	cbnz	r0, 8003f96 <_printf_float+0x422>
 8003f5e:	f109 33ff 	add.w	r3, r9, #4294967295
 8003f62:	f108 0201 	add.w	r2, r8, #1
 8003f66:	4631      	mov	r1, r6
 8003f68:	4628      	mov	r0, r5
 8003f6a:	47b8      	blx	r7
 8003f6c:	3001      	adds	r0, #1
 8003f6e:	d10e      	bne.n	8003f8e <_printf_float+0x41a>
 8003f70:	e65b      	b.n	8003c2a <_printf_float+0xb6>
 8003f72:	2301      	movs	r3, #1
 8003f74:	464a      	mov	r2, r9
 8003f76:	4631      	mov	r1, r6
 8003f78:	4628      	mov	r0, r5
 8003f7a:	47b8      	blx	r7
 8003f7c:	3001      	adds	r0, #1
 8003f7e:	f43f ae54 	beq.w	8003c2a <_printf_float+0xb6>
 8003f82:	f108 0801 	add.w	r8, r8, #1
 8003f86:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003f88:	3b01      	subs	r3, #1
 8003f8a:	4543      	cmp	r3, r8
 8003f8c:	dcf1      	bgt.n	8003f72 <_printf_float+0x3fe>
 8003f8e:	4653      	mov	r3, sl
 8003f90:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003f94:	e6de      	b.n	8003d54 <_printf_float+0x1e0>
 8003f96:	f04f 0800 	mov.w	r8, #0
 8003f9a:	f104 091a 	add.w	r9, r4, #26
 8003f9e:	e7f2      	b.n	8003f86 <_printf_float+0x412>
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	4642      	mov	r2, r8
 8003fa4:	e7df      	b.n	8003f66 <_printf_float+0x3f2>
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	464a      	mov	r2, r9
 8003faa:	4631      	mov	r1, r6
 8003fac:	4628      	mov	r0, r5
 8003fae:	47b8      	blx	r7
 8003fb0:	3001      	adds	r0, #1
 8003fb2:	f43f ae3a 	beq.w	8003c2a <_printf_float+0xb6>
 8003fb6:	f108 0801 	add.w	r8, r8, #1
 8003fba:	68e3      	ldr	r3, [r4, #12]
 8003fbc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8003fbe:	1a5b      	subs	r3, r3, r1
 8003fc0:	4543      	cmp	r3, r8
 8003fc2:	dcf0      	bgt.n	8003fa6 <_printf_float+0x432>
 8003fc4:	e6fb      	b.n	8003dbe <_printf_float+0x24a>
 8003fc6:	f04f 0800 	mov.w	r8, #0
 8003fca:	f104 0919 	add.w	r9, r4, #25
 8003fce:	e7f4      	b.n	8003fba <_printf_float+0x446>

08003fd0 <_printf_common>:
 8003fd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003fd4:	4616      	mov	r6, r2
 8003fd6:	4699      	mov	r9, r3
 8003fd8:	688a      	ldr	r2, [r1, #8]
 8003fda:	690b      	ldr	r3, [r1, #16]
 8003fdc:	4607      	mov	r7, r0
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	bfb8      	it	lt
 8003fe2:	4613      	movlt	r3, r2
 8003fe4:	6033      	str	r3, [r6, #0]
 8003fe6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003fea:	460c      	mov	r4, r1
 8003fec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003ff0:	b10a      	cbz	r2, 8003ff6 <_printf_common+0x26>
 8003ff2:	3301      	adds	r3, #1
 8003ff4:	6033      	str	r3, [r6, #0]
 8003ff6:	6823      	ldr	r3, [r4, #0]
 8003ff8:	0699      	lsls	r1, r3, #26
 8003ffa:	bf42      	ittt	mi
 8003ffc:	6833      	ldrmi	r3, [r6, #0]
 8003ffe:	3302      	addmi	r3, #2
 8004000:	6033      	strmi	r3, [r6, #0]
 8004002:	6825      	ldr	r5, [r4, #0]
 8004004:	f015 0506 	ands.w	r5, r5, #6
 8004008:	d106      	bne.n	8004018 <_printf_common+0x48>
 800400a:	f104 0a19 	add.w	sl, r4, #25
 800400e:	68e3      	ldr	r3, [r4, #12]
 8004010:	6832      	ldr	r2, [r6, #0]
 8004012:	1a9b      	subs	r3, r3, r2
 8004014:	42ab      	cmp	r3, r5
 8004016:	dc2b      	bgt.n	8004070 <_printf_common+0xa0>
 8004018:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800401c:	1e13      	subs	r3, r2, #0
 800401e:	6822      	ldr	r2, [r4, #0]
 8004020:	bf18      	it	ne
 8004022:	2301      	movne	r3, #1
 8004024:	0692      	lsls	r2, r2, #26
 8004026:	d430      	bmi.n	800408a <_printf_common+0xba>
 8004028:	4649      	mov	r1, r9
 800402a:	4638      	mov	r0, r7
 800402c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004030:	47c0      	blx	r8
 8004032:	3001      	adds	r0, #1
 8004034:	d023      	beq.n	800407e <_printf_common+0xae>
 8004036:	6823      	ldr	r3, [r4, #0]
 8004038:	6922      	ldr	r2, [r4, #16]
 800403a:	f003 0306 	and.w	r3, r3, #6
 800403e:	2b04      	cmp	r3, #4
 8004040:	bf14      	ite	ne
 8004042:	2500      	movne	r5, #0
 8004044:	6833      	ldreq	r3, [r6, #0]
 8004046:	f04f 0600 	mov.w	r6, #0
 800404a:	bf08      	it	eq
 800404c:	68e5      	ldreq	r5, [r4, #12]
 800404e:	f104 041a 	add.w	r4, r4, #26
 8004052:	bf08      	it	eq
 8004054:	1aed      	subeq	r5, r5, r3
 8004056:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800405a:	bf08      	it	eq
 800405c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004060:	4293      	cmp	r3, r2
 8004062:	bfc4      	itt	gt
 8004064:	1a9b      	subgt	r3, r3, r2
 8004066:	18ed      	addgt	r5, r5, r3
 8004068:	42b5      	cmp	r5, r6
 800406a:	d11a      	bne.n	80040a2 <_printf_common+0xd2>
 800406c:	2000      	movs	r0, #0
 800406e:	e008      	b.n	8004082 <_printf_common+0xb2>
 8004070:	2301      	movs	r3, #1
 8004072:	4652      	mov	r2, sl
 8004074:	4649      	mov	r1, r9
 8004076:	4638      	mov	r0, r7
 8004078:	47c0      	blx	r8
 800407a:	3001      	adds	r0, #1
 800407c:	d103      	bne.n	8004086 <_printf_common+0xb6>
 800407e:	f04f 30ff 	mov.w	r0, #4294967295
 8004082:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004086:	3501      	adds	r5, #1
 8004088:	e7c1      	b.n	800400e <_printf_common+0x3e>
 800408a:	2030      	movs	r0, #48	; 0x30
 800408c:	18e1      	adds	r1, r4, r3
 800408e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004092:	1c5a      	adds	r2, r3, #1
 8004094:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004098:	4422      	add	r2, r4
 800409a:	3302      	adds	r3, #2
 800409c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80040a0:	e7c2      	b.n	8004028 <_printf_common+0x58>
 80040a2:	2301      	movs	r3, #1
 80040a4:	4622      	mov	r2, r4
 80040a6:	4649      	mov	r1, r9
 80040a8:	4638      	mov	r0, r7
 80040aa:	47c0      	blx	r8
 80040ac:	3001      	adds	r0, #1
 80040ae:	d0e6      	beq.n	800407e <_printf_common+0xae>
 80040b0:	3601      	adds	r6, #1
 80040b2:	e7d9      	b.n	8004068 <_printf_common+0x98>

080040b4 <_printf_i>:
 80040b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80040b8:	7e0f      	ldrb	r7, [r1, #24]
 80040ba:	4691      	mov	r9, r2
 80040bc:	2f78      	cmp	r7, #120	; 0x78
 80040be:	4680      	mov	r8, r0
 80040c0:	460c      	mov	r4, r1
 80040c2:	469a      	mov	sl, r3
 80040c4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80040c6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80040ca:	d807      	bhi.n	80040dc <_printf_i+0x28>
 80040cc:	2f62      	cmp	r7, #98	; 0x62
 80040ce:	d80a      	bhi.n	80040e6 <_printf_i+0x32>
 80040d0:	2f00      	cmp	r7, #0
 80040d2:	f000 80d5 	beq.w	8004280 <_printf_i+0x1cc>
 80040d6:	2f58      	cmp	r7, #88	; 0x58
 80040d8:	f000 80c1 	beq.w	800425e <_printf_i+0x1aa>
 80040dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80040e0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80040e4:	e03a      	b.n	800415c <_printf_i+0xa8>
 80040e6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80040ea:	2b15      	cmp	r3, #21
 80040ec:	d8f6      	bhi.n	80040dc <_printf_i+0x28>
 80040ee:	a101      	add	r1, pc, #4	; (adr r1, 80040f4 <_printf_i+0x40>)
 80040f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80040f4:	0800414d 	.word	0x0800414d
 80040f8:	08004161 	.word	0x08004161
 80040fc:	080040dd 	.word	0x080040dd
 8004100:	080040dd 	.word	0x080040dd
 8004104:	080040dd 	.word	0x080040dd
 8004108:	080040dd 	.word	0x080040dd
 800410c:	08004161 	.word	0x08004161
 8004110:	080040dd 	.word	0x080040dd
 8004114:	080040dd 	.word	0x080040dd
 8004118:	080040dd 	.word	0x080040dd
 800411c:	080040dd 	.word	0x080040dd
 8004120:	08004267 	.word	0x08004267
 8004124:	0800418d 	.word	0x0800418d
 8004128:	08004221 	.word	0x08004221
 800412c:	080040dd 	.word	0x080040dd
 8004130:	080040dd 	.word	0x080040dd
 8004134:	08004289 	.word	0x08004289
 8004138:	080040dd 	.word	0x080040dd
 800413c:	0800418d 	.word	0x0800418d
 8004140:	080040dd 	.word	0x080040dd
 8004144:	080040dd 	.word	0x080040dd
 8004148:	08004229 	.word	0x08004229
 800414c:	682b      	ldr	r3, [r5, #0]
 800414e:	1d1a      	adds	r2, r3, #4
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	602a      	str	r2, [r5, #0]
 8004154:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004158:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800415c:	2301      	movs	r3, #1
 800415e:	e0a0      	b.n	80042a2 <_printf_i+0x1ee>
 8004160:	6820      	ldr	r0, [r4, #0]
 8004162:	682b      	ldr	r3, [r5, #0]
 8004164:	0607      	lsls	r7, r0, #24
 8004166:	f103 0104 	add.w	r1, r3, #4
 800416a:	6029      	str	r1, [r5, #0]
 800416c:	d501      	bpl.n	8004172 <_printf_i+0xbe>
 800416e:	681e      	ldr	r6, [r3, #0]
 8004170:	e003      	b.n	800417a <_printf_i+0xc6>
 8004172:	0646      	lsls	r6, r0, #25
 8004174:	d5fb      	bpl.n	800416e <_printf_i+0xba>
 8004176:	f9b3 6000 	ldrsh.w	r6, [r3]
 800417a:	2e00      	cmp	r6, #0
 800417c:	da03      	bge.n	8004186 <_printf_i+0xd2>
 800417e:	232d      	movs	r3, #45	; 0x2d
 8004180:	4276      	negs	r6, r6
 8004182:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004186:	230a      	movs	r3, #10
 8004188:	4859      	ldr	r0, [pc, #356]	; (80042f0 <_printf_i+0x23c>)
 800418a:	e012      	b.n	80041b2 <_printf_i+0xfe>
 800418c:	682b      	ldr	r3, [r5, #0]
 800418e:	6820      	ldr	r0, [r4, #0]
 8004190:	1d19      	adds	r1, r3, #4
 8004192:	6029      	str	r1, [r5, #0]
 8004194:	0605      	lsls	r5, r0, #24
 8004196:	d501      	bpl.n	800419c <_printf_i+0xe8>
 8004198:	681e      	ldr	r6, [r3, #0]
 800419a:	e002      	b.n	80041a2 <_printf_i+0xee>
 800419c:	0641      	lsls	r1, r0, #25
 800419e:	d5fb      	bpl.n	8004198 <_printf_i+0xe4>
 80041a0:	881e      	ldrh	r6, [r3, #0]
 80041a2:	2f6f      	cmp	r7, #111	; 0x6f
 80041a4:	bf0c      	ite	eq
 80041a6:	2308      	moveq	r3, #8
 80041a8:	230a      	movne	r3, #10
 80041aa:	4851      	ldr	r0, [pc, #324]	; (80042f0 <_printf_i+0x23c>)
 80041ac:	2100      	movs	r1, #0
 80041ae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80041b2:	6865      	ldr	r5, [r4, #4]
 80041b4:	2d00      	cmp	r5, #0
 80041b6:	bfa8      	it	ge
 80041b8:	6821      	ldrge	r1, [r4, #0]
 80041ba:	60a5      	str	r5, [r4, #8]
 80041bc:	bfa4      	itt	ge
 80041be:	f021 0104 	bicge.w	r1, r1, #4
 80041c2:	6021      	strge	r1, [r4, #0]
 80041c4:	b90e      	cbnz	r6, 80041ca <_printf_i+0x116>
 80041c6:	2d00      	cmp	r5, #0
 80041c8:	d04b      	beq.n	8004262 <_printf_i+0x1ae>
 80041ca:	4615      	mov	r5, r2
 80041cc:	fbb6 f1f3 	udiv	r1, r6, r3
 80041d0:	fb03 6711 	mls	r7, r3, r1, r6
 80041d4:	5dc7      	ldrb	r7, [r0, r7]
 80041d6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80041da:	4637      	mov	r7, r6
 80041dc:	42bb      	cmp	r3, r7
 80041de:	460e      	mov	r6, r1
 80041e0:	d9f4      	bls.n	80041cc <_printf_i+0x118>
 80041e2:	2b08      	cmp	r3, #8
 80041e4:	d10b      	bne.n	80041fe <_printf_i+0x14a>
 80041e6:	6823      	ldr	r3, [r4, #0]
 80041e8:	07de      	lsls	r6, r3, #31
 80041ea:	d508      	bpl.n	80041fe <_printf_i+0x14a>
 80041ec:	6923      	ldr	r3, [r4, #16]
 80041ee:	6861      	ldr	r1, [r4, #4]
 80041f0:	4299      	cmp	r1, r3
 80041f2:	bfde      	ittt	le
 80041f4:	2330      	movle	r3, #48	; 0x30
 80041f6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80041fa:	f105 35ff 	addle.w	r5, r5, #4294967295
 80041fe:	1b52      	subs	r2, r2, r5
 8004200:	6122      	str	r2, [r4, #16]
 8004202:	464b      	mov	r3, r9
 8004204:	4621      	mov	r1, r4
 8004206:	4640      	mov	r0, r8
 8004208:	f8cd a000 	str.w	sl, [sp]
 800420c:	aa03      	add	r2, sp, #12
 800420e:	f7ff fedf 	bl	8003fd0 <_printf_common>
 8004212:	3001      	adds	r0, #1
 8004214:	d14a      	bne.n	80042ac <_printf_i+0x1f8>
 8004216:	f04f 30ff 	mov.w	r0, #4294967295
 800421a:	b004      	add	sp, #16
 800421c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004220:	6823      	ldr	r3, [r4, #0]
 8004222:	f043 0320 	orr.w	r3, r3, #32
 8004226:	6023      	str	r3, [r4, #0]
 8004228:	2778      	movs	r7, #120	; 0x78
 800422a:	4832      	ldr	r0, [pc, #200]	; (80042f4 <_printf_i+0x240>)
 800422c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004230:	6823      	ldr	r3, [r4, #0]
 8004232:	6829      	ldr	r1, [r5, #0]
 8004234:	061f      	lsls	r7, r3, #24
 8004236:	f851 6b04 	ldr.w	r6, [r1], #4
 800423a:	d402      	bmi.n	8004242 <_printf_i+0x18e>
 800423c:	065f      	lsls	r7, r3, #25
 800423e:	bf48      	it	mi
 8004240:	b2b6      	uxthmi	r6, r6
 8004242:	07df      	lsls	r7, r3, #31
 8004244:	bf48      	it	mi
 8004246:	f043 0320 	orrmi.w	r3, r3, #32
 800424a:	6029      	str	r1, [r5, #0]
 800424c:	bf48      	it	mi
 800424e:	6023      	strmi	r3, [r4, #0]
 8004250:	b91e      	cbnz	r6, 800425a <_printf_i+0x1a6>
 8004252:	6823      	ldr	r3, [r4, #0]
 8004254:	f023 0320 	bic.w	r3, r3, #32
 8004258:	6023      	str	r3, [r4, #0]
 800425a:	2310      	movs	r3, #16
 800425c:	e7a6      	b.n	80041ac <_printf_i+0xf8>
 800425e:	4824      	ldr	r0, [pc, #144]	; (80042f0 <_printf_i+0x23c>)
 8004260:	e7e4      	b.n	800422c <_printf_i+0x178>
 8004262:	4615      	mov	r5, r2
 8004264:	e7bd      	b.n	80041e2 <_printf_i+0x12e>
 8004266:	682b      	ldr	r3, [r5, #0]
 8004268:	6826      	ldr	r6, [r4, #0]
 800426a:	1d18      	adds	r0, r3, #4
 800426c:	6961      	ldr	r1, [r4, #20]
 800426e:	6028      	str	r0, [r5, #0]
 8004270:	0635      	lsls	r5, r6, #24
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	d501      	bpl.n	800427a <_printf_i+0x1c6>
 8004276:	6019      	str	r1, [r3, #0]
 8004278:	e002      	b.n	8004280 <_printf_i+0x1cc>
 800427a:	0670      	lsls	r0, r6, #25
 800427c:	d5fb      	bpl.n	8004276 <_printf_i+0x1c2>
 800427e:	8019      	strh	r1, [r3, #0]
 8004280:	2300      	movs	r3, #0
 8004282:	4615      	mov	r5, r2
 8004284:	6123      	str	r3, [r4, #16]
 8004286:	e7bc      	b.n	8004202 <_printf_i+0x14e>
 8004288:	682b      	ldr	r3, [r5, #0]
 800428a:	2100      	movs	r1, #0
 800428c:	1d1a      	adds	r2, r3, #4
 800428e:	602a      	str	r2, [r5, #0]
 8004290:	681d      	ldr	r5, [r3, #0]
 8004292:	6862      	ldr	r2, [r4, #4]
 8004294:	4628      	mov	r0, r5
 8004296:	f000 fbf8 	bl	8004a8a <memchr>
 800429a:	b108      	cbz	r0, 80042a0 <_printf_i+0x1ec>
 800429c:	1b40      	subs	r0, r0, r5
 800429e:	6060      	str	r0, [r4, #4]
 80042a0:	6863      	ldr	r3, [r4, #4]
 80042a2:	6123      	str	r3, [r4, #16]
 80042a4:	2300      	movs	r3, #0
 80042a6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80042aa:	e7aa      	b.n	8004202 <_printf_i+0x14e>
 80042ac:	462a      	mov	r2, r5
 80042ae:	4649      	mov	r1, r9
 80042b0:	4640      	mov	r0, r8
 80042b2:	6923      	ldr	r3, [r4, #16]
 80042b4:	47d0      	blx	sl
 80042b6:	3001      	adds	r0, #1
 80042b8:	d0ad      	beq.n	8004216 <_printf_i+0x162>
 80042ba:	6823      	ldr	r3, [r4, #0]
 80042bc:	079b      	lsls	r3, r3, #30
 80042be:	d413      	bmi.n	80042e8 <_printf_i+0x234>
 80042c0:	68e0      	ldr	r0, [r4, #12]
 80042c2:	9b03      	ldr	r3, [sp, #12]
 80042c4:	4298      	cmp	r0, r3
 80042c6:	bfb8      	it	lt
 80042c8:	4618      	movlt	r0, r3
 80042ca:	e7a6      	b.n	800421a <_printf_i+0x166>
 80042cc:	2301      	movs	r3, #1
 80042ce:	4632      	mov	r2, r6
 80042d0:	4649      	mov	r1, r9
 80042d2:	4640      	mov	r0, r8
 80042d4:	47d0      	blx	sl
 80042d6:	3001      	adds	r0, #1
 80042d8:	d09d      	beq.n	8004216 <_printf_i+0x162>
 80042da:	3501      	adds	r5, #1
 80042dc:	68e3      	ldr	r3, [r4, #12]
 80042de:	9903      	ldr	r1, [sp, #12]
 80042e0:	1a5b      	subs	r3, r3, r1
 80042e2:	42ab      	cmp	r3, r5
 80042e4:	dcf2      	bgt.n	80042cc <_printf_i+0x218>
 80042e6:	e7eb      	b.n	80042c0 <_printf_i+0x20c>
 80042e8:	2500      	movs	r5, #0
 80042ea:	f104 0619 	add.w	r6, r4, #25
 80042ee:	e7f5      	b.n	80042dc <_printf_i+0x228>
 80042f0:	08009330 	.word	0x08009330
 80042f4:	08009341 	.word	0x08009341

080042f8 <_scanf_float>:
 80042f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042fc:	b087      	sub	sp, #28
 80042fe:	9303      	str	r3, [sp, #12]
 8004300:	688b      	ldr	r3, [r1, #8]
 8004302:	4617      	mov	r7, r2
 8004304:	1e5a      	subs	r2, r3, #1
 8004306:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800430a:	bf85      	ittet	hi
 800430c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8004310:	195b      	addhi	r3, r3, r5
 8004312:	2300      	movls	r3, #0
 8004314:	9302      	strhi	r3, [sp, #8]
 8004316:	bf88      	it	hi
 8004318:	f240 135d 	movwhi	r3, #349	; 0x15d
 800431c:	468b      	mov	fp, r1
 800431e:	f04f 0500 	mov.w	r5, #0
 8004322:	bf8c      	ite	hi
 8004324:	608b      	strhi	r3, [r1, #8]
 8004326:	9302      	strls	r3, [sp, #8]
 8004328:	680b      	ldr	r3, [r1, #0]
 800432a:	4680      	mov	r8, r0
 800432c:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8004330:	f84b 3b1c 	str.w	r3, [fp], #28
 8004334:	460c      	mov	r4, r1
 8004336:	465e      	mov	r6, fp
 8004338:	46aa      	mov	sl, r5
 800433a:	46a9      	mov	r9, r5
 800433c:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8004340:	9501      	str	r5, [sp, #4]
 8004342:	68a2      	ldr	r2, [r4, #8]
 8004344:	b152      	cbz	r2, 800435c <_scanf_float+0x64>
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	781b      	ldrb	r3, [r3, #0]
 800434a:	2b4e      	cmp	r3, #78	; 0x4e
 800434c:	d864      	bhi.n	8004418 <_scanf_float+0x120>
 800434e:	2b40      	cmp	r3, #64	; 0x40
 8004350:	d83c      	bhi.n	80043cc <_scanf_float+0xd4>
 8004352:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8004356:	b2c8      	uxtb	r0, r1
 8004358:	280e      	cmp	r0, #14
 800435a:	d93a      	bls.n	80043d2 <_scanf_float+0xda>
 800435c:	f1b9 0f00 	cmp.w	r9, #0
 8004360:	d003      	beq.n	800436a <_scanf_float+0x72>
 8004362:	6823      	ldr	r3, [r4, #0]
 8004364:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004368:	6023      	str	r3, [r4, #0]
 800436a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800436e:	f1ba 0f01 	cmp.w	sl, #1
 8004372:	f200 8113 	bhi.w	800459c <_scanf_float+0x2a4>
 8004376:	455e      	cmp	r6, fp
 8004378:	f200 8105 	bhi.w	8004586 <_scanf_float+0x28e>
 800437c:	2501      	movs	r5, #1
 800437e:	4628      	mov	r0, r5
 8004380:	b007      	add	sp, #28
 8004382:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004386:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800438a:	2a0d      	cmp	r2, #13
 800438c:	d8e6      	bhi.n	800435c <_scanf_float+0x64>
 800438e:	a101      	add	r1, pc, #4	; (adr r1, 8004394 <_scanf_float+0x9c>)
 8004390:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8004394:	080044d3 	.word	0x080044d3
 8004398:	0800435d 	.word	0x0800435d
 800439c:	0800435d 	.word	0x0800435d
 80043a0:	0800435d 	.word	0x0800435d
 80043a4:	08004533 	.word	0x08004533
 80043a8:	0800450b 	.word	0x0800450b
 80043ac:	0800435d 	.word	0x0800435d
 80043b0:	0800435d 	.word	0x0800435d
 80043b4:	080044e1 	.word	0x080044e1
 80043b8:	0800435d 	.word	0x0800435d
 80043bc:	0800435d 	.word	0x0800435d
 80043c0:	0800435d 	.word	0x0800435d
 80043c4:	0800435d 	.word	0x0800435d
 80043c8:	08004499 	.word	0x08004499
 80043cc:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80043d0:	e7db      	b.n	800438a <_scanf_float+0x92>
 80043d2:	290e      	cmp	r1, #14
 80043d4:	d8c2      	bhi.n	800435c <_scanf_float+0x64>
 80043d6:	a001      	add	r0, pc, #4	; (adr r0, 80043dc <_scanf_float+0xe4>)
 80043d8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80043dc:	0800448b 	.word	0x0800448b
 80043e0:	0800435d 	.word	0x0800435d
 80043e4:	0800448b 	.word	0x0800448b
 80043e8:	0800451f 	.word	0x0800451f
 80043ec:	0800435d 	.word	0x0800435d
 80043f0:	08004439 	.word	0x08004439
 80043f4:	08004475 	.word	0x08004475
 80043f8:	08004475 	.word	0x08004475
 80043fc:	08004475 	.word	0x08004475
 8004400:	08004475 	.word	0x08004475
 8004404:	08004475 	.word	0x08004475
 8004408:	08004475 	.word	0x08004475
 800440c:	08004475 	.word	0x08004475
 8004410:	08004475 	.word	0x08004475
 8004414:	08004475 	.word	0x08004475
 8004418:	2b6e      	cmp	r3, #110	; 0x6e
 800441a:	d809      	bhi.n	8004430 <_scanf_float+0x138>
 800441c:	2b60      	cmp	r3, #96	; 0x60
 800441e:	d8b2      	bhi.n	8004386 <_scanf_float+0x8e>
 8004420:	2b54      	cmp	r3, #84	; 0x54
 8004422:	d077      	beq.n	8004514 <_scanf_float+0x21c>
 8004424:	2b59      	cmp	r3, #89	; 0x59
 8004426:	d199      	bne.n	800435c <_scanf_float+0x64>
 8004428:	2d07      	cmp	r5, #7
 800442a:	d197      	bne.n	800435c <_scanf_float+0x64>
 800442c:	2508      	movs	r5, #8
 800442e:	e029      	b.n	8004484 <_scanf_float+0x18c>
 8004430:	2b74      	cmp	r3, #116	; 0x74
 8004432:	d06f      	beq.n	8004514 <_scanf_float+0x21c>
 8004434:	2b79      	cmp	r3, #121	; 0x79
 8004436:	e7f6      	b.n	8004426 <_scanf_float+0x12e>
 8004438:	6821      	ldr	r1, [r4, #0]
 800443a:	05c8      	lsls	r0, r1, #23
 800443c:	d51a      	bpl.n	8004474 <_scanf_float+0x17c>
 800443e:	9b02      	ldr	r3, [sp, #8]
 8004440:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8004444:	6021      	str	r1, [r4, #0]
 8004446:	f109 0901 	add.w	r9, r9, #1
 800444a:	b11b      	cbz	r3, 8004454 <_scanf_float+0x15c>
 800444c:	3b01      	subs	r3, #1
 800444e:	3201      	adds	r2, #1
 8004450:	9302      	str	r3, [sp, #8]
 8004452:	60a2      	str	r2, [r4, #8]
 8004454:	68a3      	ldr	r3, [r4, #8]
 8004456:	3b01      	subs	r3, #1
 8004458:	60a3      	str	r3, [r4, #8]
 800445a:	6923      	ldr	r3, [r4, #16]
 800445c:	3301      	adds	r3, #1
 800445e:	6123      	str	r3, [r4, #16]
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	3b01      	subs	r3, #1
 8004464:	2b00      	cmp	r3, #0
 8004466:	607b      	str	r3, [r7, #4]
 8004468:	f340 8084 	ble.w	8004574 <_scanf_float+0x27c>
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	3301      	adds	r3, #1
 8004470:	603b      	str	r3, [r7, #0]
 8004472:	e766      	b.n	8004342 <_scanf_float+0x4a>
 8004474:	eb1a 0f05 	cmn.w	sl, r5
 8004478:	f47f af70 	bne.w	800435c <_scanf_float+0x64>
 800447c:	6822      	ldr	r2, [r4, #0]
 800447e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8004482:	6022      	str	r2, [r4, #0]
 8004484:	f806 3b01 	strb.w	r3, [r6], #1
 8004488:	e7e4      	b.n	8004454 <_scanf_float+0x15c>
 800448a:	6822      	ldr	r2, [r4, #0]
 800448c:	0610      	lsls	r0, r2, #24
 800448e:	f57f af65 	bpl.w	800435c <_scanf_float+0x64>
 8004492:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004496:	e7f4      	b.n	8004482 <_scanf_float+0x18a>
 8004498:	f1ba 0f00 	cmp.w	sl, #0
 800449c:	d10e      	bne.n	80044bc <_scanf_float+0x1c4>
 800449e:	f1b9 0f00 	cmp.w	r9, #0
 80044a2:	d10e      	bne.n	80044c2 <_scanf_float+0x1ca>
 80044a4:	6822      	ldr	r2, [r4, #0]
 80044a6:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80044aa:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80044ae:	d108      	bne.n	80044c2 <_scanf_float+0x1ca>
 80044b0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80044b4:	f04f 0a01 	mov.w	sl, #1
 80044b8:	6022      	str	r2, [r4, #0]
 80044ba:	e7e3      	b.n	8004484 <_scanf_float+0x18c>
 80044bc:	f1ba 0f02 	cmp.w	sl, #2
 80044c0:	d055      	beq.n	800456e <_scanf_float+0x276>
 80044c2:	2d01      	cmp	r5, #1
 80044c4:	d002      	beq.n	80044cc <_scanf_float+0x1d4>
 80044c6:	2d04      	cmp	r5, #4
 80044c8:	f47f af48 	bne.w	800435c <_scanf_float+0x64>
 80044cc:	3501      	adds	r5, #1
 80044ce:	b2ed      	uxtb	r5, r5
 80044d0:	e7d8      	b.n	8004484 <_scanf_float+0x18c>
 80044d2:	f1ba 0f01 	cmp.w	sl, #1
 80044d6:	f47f af41 	bne.w	800435c <_scanf_float+0x64>
 80044da:	f04f 0a02 	mov.w	sl, #2
 80044de:	e7d1      	b.n	8004484 <_scanf_float+0x18c>
 80044e0:	b97d      	cbnz	r5, 8004502 <_scanf_float+0x20a>
 80044e2:	f1b9 0f00 	cmp.w	r9, #0
 80044e6:	f47f af3c 	bne.w	8004362 <_scanf_float+0x6a>
 80044ea:	6822      	ldr	r2, [r4, #0]
 80044ec:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80044f0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80044f4:	f47f af39 	bne.w	800436a <_scanf_float+0x72>
 80044f8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80044fc:	2501      	movs	r5, #1
 80044fe:	6022      	str	r2, [r4, #0]
 8004500:	e7c0      	b.n	8004484 <_scanf_float+0x18c>
 8004502:	2d03      	cmp	r5, #3
 8004504:	d0e2      	beq.n	80044cc <_scanf_float+0x1d4>
 8004506:	2d05      	cmp	r5, #5
 8004508:	e7de      	b.n	80044c8 <_scanf_float+0x1d0>
 800450a:	2d02      	cmp	r5, #2
 800450c:	f47f af26 	bne.w	800435c <_scanf_float+0x64>
 8004510:	2503      	movs	r5, #3
 8004512:	e7b7      	b.n	8004484 <_scanf_float+0x18c>
 8004514:	2d06      	cmp	r5, #6
 8004516:	f47f af21 	bne.w	800435c <_scanf_float+0x64>
 800451a:	2507      	movs	r5, #7
 800451c:	e7b2      	b.n	8004484 <_scanf_float+0x18c>
 800451e:	6822      	ldr	r2, [r4, #0]
 8004520:	0591      	lsls	r1, r2, #22
 8004522:	f57f af1b 	bpl.w	800435c <_scanf_float+0x64>
 8004526:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800452a:	6022      	str	r2, [r4, #0]
 800452c:	f8cd 9004 	str.w	r9, [sp, #4]
 8004530:	e7a8      	b.n	8004484 <_scanf_float+0x18c>
 8004532:	6822      	ldr	r2, [r4, #0]
 8004534:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8004538:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800453c:	d006      	beq.n	800454c <_scanf_float+0x254>
 800453e:	0550      	lsls	r0, r2, #21
 8004540:	f57f af0c 	bpl.w	800435c <_scanf_float+0x64>
 8004544:	f1b9 0f00 	cmp.w	r9, #0
 8004548:	f43f af0f 	beq.w	800436a <_scanf_float+0x72>
 800454c:	0591      	lsls	r1, r2, #22
 800454e:	bf58      	it	pl
 8004550:	9901      	ldrpl	r1, [sp, #4]
 8004552:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004556:	bf58      	it	pl
 8004558:	eba9 0101 	subpl.w	r1, r9, r1
 800455c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8004560:	f04f 0900 	mov.w	r9, #0
 8004564:	bf58      	it	pl
 8004566:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800456a:	6022      	str	r2, [r4, #0]
 800456c:	e78a      	b.n	8004484 <_scanf_float+0x18c>
 800456e:	f04f 0a03 	mov.w	sl, #3
 8004572:	e787      	b.n	8004484 <_scanf_float+0x18c>
 8004574:	4639      	mov	r1, r7
 8004576:	4640      	mov	r0, r8
 8004578:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800457c:	4798      	blx	r3
 800457e:	2800      	cmp	r0, #0
 8004580:	f43f aedf 	beq.w	8004342 <_scanf_float+0x4a>
 8004584:	e6ea      	b.n	800435c <_scanf_float+0x64>
 8004586:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800458a:	463a      	mov	r2, r7
 800458c:	4640      	mov	r0, r8
 800458e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004592:	4798      	blx	r3
 8004594:	6923      	ldr	r3, [r4, #16]
 8004596:	3b01      	subs	r3, #1
 8004598:	6123      	str	r3, [r4, #16]
 800459a:	e6ec      	b.n	8004376 <_scanf_float+0x7e>
 800459c:	1e6b      	subs	r3, r5, #1
 800459e:	2b06      	cmp	r3, #6
 80045a0:	d825      	bhi.n	80045ee <_scanf_float+0x2f6>
 80045a2:	2d02      	cmp	r5, #2
 80045a4:	d836      	bhi.n	8004614 <_scanf_float+0x31c>
 80045a6:	455e      	cmp	r6, fp
 80045a8:	f67f aee8 	bls.w	800437c <_scanf_float+0x84>
 80045ac:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80045b0:	463a      	mov	r2, r7
 80045b2:	4640      	mov	r0, r8
 80045b4:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80045b8:	4798      	blx	r3
 80045ba:	6923      	ldr	r3, [r4, #16]
 80045bc:	3b01      	subs	r3, #1
 80045be:	6123      	str	r3, [r4, #16]
 80045c0:	e7f1      	b.n	80045a6 <_scanf_float+0x2ae>
 80045c2:	9802      	ldr	r0, [sp, #8]
 80045c4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80045c8:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80045cc:	463a      	mov	r2, r7
 80045ce:	9002      	str	r0, [sp, #8]
 80045d0:	4640      	mov	r0, r8
 80045d2:	4798      	blx	r3
 80045d4:	6923      	ldr	r3, [r4, #16]
 80045d6:	3b01      	subs	r3, #1
 80045d8:	6123      	str	r3, [r4, #16]
 80045da:	f10a 3aff 	add.w	sl, sl, #4294967295
 80045de:	fa5f fa8a 	uxtb.w	sl, sl
 80045e2:	f1ba 0f02 	cmp.w	sl, #2
 80045e6:	d1ec      	bne.n	80045c2 <_scanf_float+0x2ca>
 80045e8:	3d03      	subs	r5, #3
 80045ea:	b2ed      	uxtb	r5, r5
 80045ec:	1b76      	subs	r6, r6, r5
 80045ee:	6823      	ldr	r3, [r4, #0]
 80045f0:	05da      	lsls	r2, r3, #23
 80045f2:	d52f      	bpl.n	8004654 <_scanf_float+0x35c>
 80045f4:	055b      	lsls	r3, r3, #21
 80045f6:	d510      	bpl.n	800461a <_scanf_float+0x322>
 80045f8:	455e      	cmp	r6, fp
 80045fa:	f67f aebf 	bls.w	800437c <_scanf_float+0x84>
 80045fe:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004602:	463a      	mov	r2, r7
 8004604:	4640      	mov	r0, r8
 8004606:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800460a:	4798      	blx	r3
 800460c:	6923      	ldr	r3, [r4, #16]
 800460e:	3b01      	subs	r3, #1
 8004610:	6123      	str	r3, [r4, #16]
 8004612:	e7f1      	b.n	80045f8 <_scanf_float+0x300>
 8004614:	46aa      	mov	sl, r5
 8004616:	9602      	str	r6, [sp, #8]
 8004618:	e7df      	b.n	80045da <_scanf_float+0x2e2>
 800461a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800461e:	6923      	ldr	r3, [r4, #16]
 8004620:	2965      	cmp	r1, #101	; 0x65
 8004622:	f103 33ff 	add.w	r3, r3, #4294967295
 8004626:	f106 35ff 	add.w	r5, r6, #4294967295
 800462a:	6123      	str	r3, [r4, #16]
 800462c:	d00c      	beq.n	8004648 <_scanf_float+0x350>
 800462e:	2945      	cmp	r1, #69	; 0x45
 8004630:	d00a      	beq.n	8004648 <_scanf_float+0x350>
 8004632:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004636:	463a      	mov	r2, r7
 8004638:	4640      	mov	r0, r8
 800463a:	4798      	blx	r3
 800463c:	6923      	ldr	r3, [r4, #16]
 800463e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8004642:	3b01      	subs	r3, #1
 8004644:	1eb5      	subs	r5, r6, #2
 8004646:	6123      	str	r3, [r4, #16]
 8004648:	463a      	mov	r2, r7
 800464a:	4640      	mov	r0, r8
 800464c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004650:	4798      	blx	r3
 8004652:	462e      	mov	r6, r5
 8004654:	6825      	ldr	r5, [r4, #0]
 8004656:	f015 0510 	ands.w	r5, r5, #16
 800465a:	d155      	bne.n	8004708 <_scanf_float+0x410>
 800465c:	7035      	strb	r5, [r6, #0]
 800465e:	6823      	ldr	r3, [r4, #0]
 8004660:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004664:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004668:	d11d      	bne.n	80046a6 <_scanf_float+0x3ae>
 800466a:	9b01      	ldr	r3, [sp, #4]
 800466c:	454b      	cmp	r3, r9
 800466e:	eba3 0209 	sub.w	r2, r3, r9
 8004672:	d125      	bne.n	80046c0 <_scanf_float+0x3c8>
 8004674:	2200      	movs	r2, #0
 8004676:	4659      	mov	r1, fp
 8004678:	4640      	mov	r0, r8
 800467a:	f002 fc39 	bl	8006ef0 <_strtod_r>
 800467e:	9b03      	ldr	r3, [sp, #12]
 8004680:	f8d4 c000 	ldr.w	ip, [r4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f01c 0f02 	tst.w	ip, #2
 800468a:	4606      	mov	r6, r0
 800468c:	460f      	mov	r7, r1
 800468e:	f103 0204 	add.w	r2, r3, #4
 8004692:	d020      	beq.n	80046d6 <_scanf_float+0x3de>
 8004694:	9903      	ldr	r1, [sp, #12]
 8004696:	600a      	str	r2, [r1, #0]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	e9c3 6700 	strd	r6, r7, [r3]
 800469e:	68e3      	ldr	r3, [r4, #12]
 80046a0:	3301      	adds	r3, #1
 80046a2:	60e3      	str	r3, [r4, #12]
 80046a4:	e66b      	b.n	800437e <_scanf_float+0x86>
 80046a6:	9b04      	ldr	r3, [sp, #16]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d0e3      	beq.n	8004674 <_scanf_float+0x37c>
 80046ac:	9905      	ldr	r1, [sp, #20]
 80046ae:	230a      	movs	r3, #10
 80046b0:	462a      	mov	r2, r5
 80046b2:	4640      	mov	r0, r8
 80046b4:	3101      	adds	r1, #1
 80046b6:	f002 fc9f 	bl	8006ff8 <_strtol_r>
 80046ba:	9b04      	ldr	r3, [sp, #16]
 80046bc:	9e05      	ldr	r6, [sp, #20]
 80046be:	1ac2      	subs	r2, r0, r3
 80046c0:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80046c4:	429e      	cmp	r6, r3
 80046c6:	bf28      	it	cs
 80046c8:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80046cc:	4630      	mov	r0, r6
 80046ce:	490f      	ldr	r1, [pc, #60]	; (800470c <_scanf_float+0x414>)
 80046d0:	f000 f8e2 	bl	8004898 <siprintf>
 80046d4:	e7ce      	b.n	8004674 <_scanf_float+0x37c>
 80046d6:	f01c 0f04 	tst.w	ip, #4
 80046da:	d1db      	bne.n	8004694 <_scanf_float+0x39c>
 80046dc:	f8dd c00c 	ldr.w	ip, [sp, #12]
 80046e0:	f8cc 2000 	str.w	r2, [ip]
 80046e4:	f8d3 8000 	ldr.w	r8, [r3]
 80046e8:	4602      	mov	r2, r0
 80046ea:	460b      	mov	r3, r1
 80046ec:	f7fc fa42 	bl	8000b74 <__aeabi_dcmpun>
 80046f0:	b128      	cbz	r0, 80046fe <_scanf_float+0x406>
 80046f2:	4807      	ldr	r0, [pc, #28]	; (8004710 <_scanf_float+0x418>)
 80046f4:	f000 f9d8 	bl	8004aa8 <nanf>
 80046f8:	f8c8 0000 	str.w	r0, [r8]
 80046fc:	e7cf      	b.n	800469e <_scanf_float+0x3a6>
 80046fe:	4630      	mov	r0, r6
 8004700:	4639      	mov	r1, r7
 8004702:	f7fc fa95 	bl	8000c30 <__aeabi_d2f>
 8004706:	e7f7      	b.n	80046f8 <_scanf_float+0x400>
 8004708:	2500      	movs	r5, #0
 800470a:	e638      	b.n	800437e <_scanf_float+0x86>
 800470c:	08009352 	.word	0x08009352
 8004710:	080096e5 	.word	0x080096e5

08004714 <std>:
 8004714:	2300      	movs	r3, #0
 8004716:	b510      	push	{r4, lr}
 8004718:	4604      	mov	r4, r0
 800471a:	e9c0 3300 	strd	r3, r3, [r0]
 800471e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004722:	6083      	str	r3, [r0, #8]
 8004724:	8181      	strh	r1, [r0, #12]
 8004726:	6643      	str	r3, [r0, #100]	; 0x64
 8004728:	81c2      	strh	r2, [r0, #14]
 800472a:	6183      	str	r3, [r0, #24]
 800472c:	4619      	mov	r1, r3
 800472e:	2208      	movs	r2, #8
 8004730:	305c      	adds	r0, #92	; 0x5c
 8004732:	f000 f914 	bl	800495e <memset>
 8004736:	4b0d      	ldr	r3, [pc, #52]	; (800476c <std+0x58>)
 8004738:	6224      	str	r4, [r4, #32]
 800473a:	6263      	str	r3, [r4, #36]	; 0x24
 800473c:	4b0c      	ldr	r3, [pc, #48]	; (8004770 <std+0x5c>)
 800473e:	62a3      	str	r3, [r4, #40]	; 0x28
 8004740:	4b0c      	ldr	r3, [pc, #48]	; (8004774 <std+0x60>)
 8004742:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004744:	4b0c      	ldr	r3, [pc, #48]	; (8004778 <std+0x64>)
 8004746:	6323      	str	r3, [r4, #48]	; 0x30
 8004748:	4b0c      	ldr	r3, [pc, #48]	; (800477c <std+0x68>)
 800474a:	429c      	cmp	r4, r3
 800474c:	d006      	beq.n	800475c <std+0x48>
 800474e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8004752:	4294      	cmp	r4, r2
 8004754:	d002      	beq.n	800475c <std+0x48>
 8004756:	33d0      	adds	r3, #208	; 0xd0
 8004758:	429c      	cmp	r4, r3
 800475a:	d105      	bne.n	8004768 <std+0x54>
 800475c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004760:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004764:	f000 b986 	b.w	8004a74 <__retarget_lock_init_recursive>
 8004768:	bd10      	pop	{r4, pc}
 800476a:	bf00      	nop
 800476c:	080048d9 	.word	0x080048d9
 8004770:	080048fb 	.word	0x080048fb
 8004774:	08004933 	.word	0x08004933
 8004778:	08004957 	.word	0x08004957
 800477c:	200003e0 	.word	0x200003e0

08004780 <stdio_exit_handler>:
 8004780:	4a02      	ldr	r2, [pc, #8]	; (800478c <stdio_exit_handler+0xc>)
 8004782:	4903      	ldr	r1, [pc, #12]	; (8004790 <stdio_exit_handler+0x10>)
 8004784:	4803      	ldr	r0, [pc, #12]	; (8004794 <stdio_exit_handler+0x14>)
 8004786:	f000 b869 	b.w	800485c <_fwalk_sglue>
 800478a:	bf00      	nop
 800478c:	2000000c 	.word	0x2000000c
 8004790:	080073b1 	.word	0x080073b1
 8004794:	20000018 	.word	0x20000018

08004798 <cleanup_stdio>:
 8004798:	6841      	ldr	r1, [r0, #4]
 800479a:	4b0c      	ldr	r3, [pc, #48]	; (80047cc <cleanup_stdio+0x34>)
 800479c:	b510      	push	{r4, lr}
 800479e:	4299      	cmp	r1, r3
 80047a0:	4604      	mov	r4, r0
 80047a2:	d001      	beq.n	80047a8 <cleanup_stdio+0x10>
 80047a4:	f002 fe04 	bl	80073b0 <_fflush_r>
 80047a8:	68a1      	ldr	r1, [r4, #8]
 80047aa:	4b09      	ldr	r3, [pc, #36]	; (80047d0 <cleanup_stdio+0x38>)
 80047ac:	4299      	cmp	r1, r3
 80047ae:	d002      	beq.n	80047b6 <cleanup_stdio+0x1e>
 80047b0:	4620      	mov	r0, r4
 80047b2:	f002 fdfd 	bl	80073b0 <_fflush_r>
 80047b6:	68e1      	ldr	r1, [r4, #12]
 80047b8:	4b06      	ldr	r3, [pc, #24]	; (80047d4 <cleanup_stdio+0x3c>)
 80047ba:	4299      	cmp	r1, r3
 80047bc:	d004      	beq.n	80047c8 <cleanup_stdio+0x30>
 80047be:	4620      	mov	r0, r4
 80047c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80047c4:	f002 bdf4 	b.w	80073b0 <_fflush_r>
 80047c8:	bd10      	pop	{r4, pc}
 80047ca:	bf00      	nop
 80047cc:	200003e0 	.word	0x200003e0
 80047d0:	20000448 	.word	0x20000448
 80047d4:	200004b0 	.word	0x200004b0

080047d8 <global_stdio_init.part.0>:
 80047d8:	b510      	push	{r4, lr}
 80047da:	4b0b      	ldr	r3, [pc, #44]	; (8004808 <global_stdio_init.part.0+0x30>)
 80047dc:	4c0b      	ldr	r4, [pc, #44]	; (800480c <global_stdio_init.part.0+0x34>)
 80047de:	4a0c      	ldr	r2, [pc, #48]	; (8004810 <global_stdio_init.part.0+0x38>)
 80047e0:	4620      	mov	r0, r4
 80047e2:	601a      	str	r2, [r3, #0]
 80047e4:	2104      	movs	r1, #4
 80047e6:	2200      	movs	r2, #0
 80047e8:	f7ff ff94 	bl	8004714 <std>
 80047ec:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80047f0:	2201      	movs	r2, #1
 80047f2:	2109      	movs	r1, #9
 80047f4:	f7ff ff8e 	bl	8004714 <std>
 80047f8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80047fc:	2202      	movs	r2, #2
 80047fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004802:	2112      	movs	r1, #18
 8004804:	f7ff bf86 	b.w	8004714 <std>
 8004808:	20000518 	.word	0x20000518
 800480c:	200003e0 	.word	0x200003e0
 8004810:	08004781 	.word	0x08004781

08004814 <__sfp_lock_acquire>:
 8004814:	4801      	ldr	r0, [pc, #4]	; (800481c <__sfp_lock_acquire+0x8>)
 8004816:	f000 b92e 	b.w	8004a76 <__retarget_lock_acquire_recursive>
 800481a:	bf00      	nop
 800481c:	20000521 	.word	0x20000521

08004820 <__sfp_lock_release>:
 8004820:	4801      	ldr	r0, [pc, #4]	; (8004828 <__sfp_lock_release+0x8>)
 8004822:	f000 b929 	b.w	8004a78 <__retarget_lock_release_recursive>
 8004826:	bf00      	nop
 8004828:	20000521 	.word	0x20000521

0800482c <__sinit>:
 800482c:	b510      	push	{r4, lr}
 800482e:	4604      	mov	r4, r0
 8004830:	f7ff fff0 	bl	8004814 <__sfp_lock_acquire>
 8004834:	6a23      	ldr	r3, [r4, #32]
 8004836:	b11b      	cbz	r3, 8004840 <__sinit+0x14>
 8004838:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800483c:	f7ff bff0 	b.w	8004820 <__sfp_lock_release>
 8004840:	4b04      	ldr	r3, [pc, #16]	; (8004854 <__sinit+0x28>)
 8004842:	6223      	str	r3, [r4, #32]
 8004844:	4b04      	ldr	r3, [pc, #16]	; (8004858 <__sinit+0x2c>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d1f5      	bne.n	8004838 <__sinit+0xc>
 800484c:	f7ff ffc4 	bl	80047d8 <global_stdio_init.part.0>
 8004850:	e7f2      	b.n	8004838 <__sinit+0xc>
 8004852:	bf00      	nop
 8004854:	08004799 	.word	0x08004799
 8004858:	20000518 	.word	0x20000518

0800485c <_fwalk_sglue>:
 800485c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004860:	4607      	mov	r7, r0
 8004862:	4688      	mov	r8, r1
 8004864:	4614      	mov	r4, r2
 8004866:	2600      	movs	r6, #0
 8004868:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800486c:	f1b9 0901 	subs.w	r9, r9, #1
 8004870:	d505      	bpl.n	800487e <_fwalk_sglue+0x22>
 8004872:	6824      	ldr	r4, [r4, #0]
 8004874:	2c00      	cmp	r4, #0
 8004876:	d1f7      	bne.n	8004868 <_fwalk_sglue+0xc>
 8004878:	4630      	mov	r0, r6
 800487a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800487e:	89ab      	ldrh	r3, [r5, #12]
 8004880:	2b01      	cmp	r3, #1
 8004882:	d907      	bls.n	8004894 <_fwalk_sglue+0x38>
 8004884:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004888:	3301      	adds	r3, #1
 800488a:	d003      	beq.n	8004894 <_fwalk_sglue+0x38>
 800488c:	4629      	mov	r1, r5
 800488e:	4638      	mov	r0, r7
 8004890:	47c0      	blx	r8
 8004892:	4306      	orrs	r6, r0
 8004894:	3568      	adds	r5, #104	; 0x68
 8004896:	e7e9      	b.n	800486c <_fwalk_sglue+0x10>

08004898 <siprintf>:
 8004898:	b40e      	push	{r1, r2, r3}
 800489a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800489e:	b500      	push	{lr}
 80048a0:	b09c      	sub	sp, #112	; 0x70
 80048a2:	ab1d      	add	r3, sp, #116	; 0x74
 80048a4:	9002      	str	r0, [sp, #8]
 80048a6:	9006      	str	r0, [sp, #24]
 80048a8:	9107      	str	r1, [sp, #28]
 80048aa:	9104      	str	r1, [sp, #16]
 80048ac:	4808      	ldr	r0, [pc, #32]	; (80048d0 <siprintf+0x38>)
 80048ae:	4909      	ldr	r1, [pc, #36]	; (80048d4 <siprintf+0x3c>)
 80048b0:	f853 2b04 	ldr.w	r2, [r3], #4
 80048b4:	9105      	str	r1, [sp, #20]
 80048b6:	6800      	ldr	r0, [r0, #0]
 80048b8:	a902      	add	r1, sp, #8
 80048ba:	9301      	str	r3, [sp, #4]
 80048bc:	f002 fbf8 	bl	80070b0 <_svfiprintf_r>
 80048c0:	2200      	movs	r2, #0
 80048c2:	9b02      	ldr	r3, [sp, #8]
 80048c4:	701a      	strb	r2, [r3, #0]
 80048c6:	b01c      	add	sp, #112	; 0x70
 80048c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80048cc:	b003      	add	sp, #12
 80048ce:	4770      	bx	lr
 80048d0:	20000064 	.word	0x20000064
 80048d4:	ffff0208 	.word	0xffff0208

080048d8 <__sread>:
 80048d8:	b510      	push	{r4, lr}
 80048da:	460c      	mov	r4, r1
 80048dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80048e0:	f000 f87a 	bl	80049d8 <_read_r>
 80048e4:	2800      	cmp	r0, #0
 80048e6:	bfab      	itete	ge
 80048e8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80048ea:	89a3      	ldrhlt	r3, [r4, #12]
 80048ec:	181b      	addge	r3, r3, r0
 80048ee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80048f2:	bfac      	ite	ge
 80048f4:	6563      	strge	r3, [r4, #84]	; 0x54
 80048f6:	81a3      	strhlt	r3, [r4, #12]
 80048f8:	bd10      	pop	{r4, pc}

080048fa <__swrite>:
 80048fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80048fe:	461f      	mov	r7, r3
 8004900:	898b      	ldrh	r3, [r1, #12]
 8004902:	4605      	mov	r5, r0
 8004904:	05db      	lsls	r3, r3, #23
 8004906:	460c      	mov	r4, r1
 8004908:	4616      	mov	r6, r2
 800490a:	d505      	bpl.n	8004918 <__swrite+0x1e>
 800490c:	2302      	movs	r3, #2
 800490e:	2200      	movs	r2, #0
 8004910:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004914:	f000 f84e 	bl	80049b4 <_lseek_r>
 8004918:	89a3      	ldrh	r3, [r4, #12]
 800491a:	4632      	mov	r2, r6
 800491c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004920:	81a3      	strh	r3, [r4, #12]
 8004922:	4628      	mov	r0, r5
 8004924:	463b      	mov	r3, r7
 8004926:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800492a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800492e:	f000 b865 	b.w	80049fc <_write_r>

08004932 <__sseek>:
 8004932:	b510      	push	{r4, lr}
 8004934:	460c      	mov	r4, r1
 8004936:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800493a:	f000 f83b 	bl	80049b4 <_lseek_r>
 800493e:	1c43      	adds	r3, r0, #1
 8004940:	89a3      	ldrh	r3, [r4, #12]
 8004942:	bf15      	itete	ne
 8004944:	6560      	strne	r0, [r4, #84]	; 0x54
 8004946:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800494a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800494e:	81a3      	strheq	r3, [r4, #12]
 8004950:	bf18      	it	ne
 8004952:	81a3      	strhne	r3, [r4, #12]
 8004954:	bd10      	pop	{r4, pc}

08004956 <__sclose>:
 8004956:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800495a:	f000 b81b 	b.w	8004994 <_close_r>

0800495e <memset>:
 800495e:	4603      	mov	r3, r0
 8004960:	4402      	add	r2, r0
 8004962:	4293      	cmp	r3, r2
 8004964:	d100      	bne.n	8004968 <memset+0xa>
 8004966:	4770      	bx	lr
 8004968:	f803 1b01 	strb.w	r1, [r3], #1
 800496c:	e7f9      	b.n	8004962 <memset+0x4>

0800496e <strcat>:
 800496e:	4602      	mov	r2, r0
 8004970:	b510      	push	{r4, lr}
 8004972:	7814      	ldrb	r4, [r2, #0]
 8004974:	4613      	mov	r3, r2
 8004976:	3201      	adds	r2, #1
 8004978:	2c00      	cmp	r4, #0
 800497a:	d1fa      	bne.n	8004972 <strcat+0x4>
 800497c:	3b01      	subs	r3, #1
 800497e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004982:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004986:	2a00      	cmp	r2, #0
 8004988:	d1f9      	bne.n	800497e <strcat+0x10>
 800498a:	bd10      	pop	{r4, pc}

0800498c <_localeconv_r>:
 800498c:	4800      	ldr	r0, [pc, #0]	; (8004990 <_localeconv_r+0x4>)
 800498e:	4770      	bx	lr
 8004990:	20000158 	.word	0x20000158

08004994 <_close_r>:
 8004994:	b538      	push	{r3, r4, r5, lr}
 8004996:	2300      	movs	r3, #0
 8004998:	4d05      	ldr	r5, [pc, #20]	; (80049b0 <_close_r+0x1c>)
 800499a:	4604      	mov	r4, r0
 800499c:	4608      	mov	r0, r1
 800499e:	602b      	str	r3, [r5, #0]
 80049a0:	f7fd f9c8 	bl	8001d34 <_close>
 80049a4:	1c43      	adds	r3, r0, #1
 80049a6:	d102      	bne.n	80049ae <_close_r+0x1a>
 80049a8:	682b      	ldr	r3, [r5, #0]
 80049aa:	b103      	cbz	r3, 80049ae <_close_r+0x1a>
 80049ac:	6023      	str	r3, [r4, #0]
 80049ae:	bd38      	pop	{r3, r4, r5, pc}
 80049b0:	2000051c 	.word	0x2000051c

080049b4 <_lseek_r>:
 80049b4:	b538      	push	{r3, r4, r5, lr}
 80049b6:	4604      	mov	r4, r0
 80049b8:	4608      	mov	r0, r1
 80049ba:	4611      	mov	r1, r2
 80049bc:	2200      	movs	r2, #0
 80049be:	4d05      	ldr	r5, [pc, #20]	; (80049d4 <_lseek_r+0x20>)
 80049c0:	602a      	str	r2, [r5, #0]
 80049c2:	461a      	mov	r2, r3
 80049c4:	f7fd f9da 	bl	8001d7c <_lseek>
 80049c8:	1c43      	adds	r3, r0, #1
 80049ca:	d102      	bne.n	80049d2 <_lseek_r+0x1e>
 80049cc:	682b      	ldr	r3, [r5, #0]
 80049ce:	b103      	cbz	r3, 80049d2 <_lseek_r+0x1e>
 80049d0:	6023      	str	r3, [r4, #0]
 80049d2:	bd38      	pop	{r3, r4, r5, pc}
 80049d4:	2000051c 	.word	0x2000051c

080049d8 <_read_r>:
 80049d8:	b538      	push	{r3, r4, r5, lr}
 80049da:	4604      	mov	r4, r0
 80049dc:	4608      	mov	r0, r1
 80049de:	4611      	mov	r1, r2
 80049e0:	2200      	movs	r2, #0
 80049e2:	4d05      	ldr	r5, [pc, #20]	; (80049f8 <_read_r+0x20>)
 80049e4:	602a      	str	r2, [r5, #0]
 80049e6:	461a      	mov	r2, r3
 80049e8:	f7fd f96b 	bl	8001cc2 <_read>
 80049ec:	1c43      	adds	r3, r0, #1
 80049ee:	d102      	bne.n	80049f6 <_read_r+0x1e>
 80049f0:	682b      	ldr	r3, [r5, #0]
 80049f2:	b103      	cbz	r3, 80049f6 <_read_r+0x1e>
 80049f4:	6023      	str	r3, [r4, #0]
 80049f6:	bd38      	pop	{r3, r4, r5, pc}
 80049f8:	2000051c 	.word	0x2000051c

080049fc <_write_r>:
 80049fc:	b538      	push	{r3, r4, r5, lr}
 80049fe:	4604      	mov	r4, r0
 8004a00:	4608      	mov	r0, r1
 8004a02:	4611      	mov	r1, r2
 8004a04:	2200      	movs	r2, #0
 8004a06:	4d05      	ldr	r5, [pc, #20]	; (8004a1c <_write_r+0x20>)
 8004a08:	602a      	str	r2, [r5, #0]
 8004a0a:	461a      	mov	r2, r3
 8004a0c:	f7fd f976 	bl	8001cfc <_write>
 8004a10:	1c43      	adds	r3, r0, #1
 8004a12:	d102      	bne.n	8004a1a <_write_r+0x1e>
 8004a14:	682b      	ldr	r3, [r5, #0]
 8004a16:	b103      	cbz	r3, 8004a1a <_write_r+0x1e>
 8004a18:	6023      	str	r3, [r4, #0]
 8004a1a:	bd38      	pop	{r3, r4, r5, pc}
 8004a1c:	2000051c 	.word	0x2000051c

08004a20 <__errno>:
 8004a20:	4b01      	ldr	r3, [pc, #4]	; (8004a28 <__errno+0x8>)
 8004a22:	6818      	ldr	r0, [r3, #0]
 8004a24:	4770      	bx	lr
 8004a26:	bf00      	nop
 8004a28:	20000064 	.word	0x20000064

08004a2c <__libc_init_array>:
 8004a2c:	b570      	push	{r4, r5, r6, lr}
 8004a2e:	2600      	movs	r6, #0
 8004a30:	4d0c      	ldr	r5, [pc, #48]	; (8004a64 <__libc_init_array+0x38>)
 8004a32:	4c0d      	ldr	r4, [pc, #52]	; (8004a68 <__libc_init_array+0x3c>)
 8004a34:	1b64      	subs	r4, r4, r5
 8004a36:	10a4      	asrs	r4, r4, #2
 8004a38:	42a6      	cmp	r6, r4
 8004a3a:	d109      	bne.n	8004a50 <__libc_init_array+0x24>
 8004a3c:	f004 fc48 	bl	80092d0 <_init>
 8004a40:	2600      	movs	r6, #0
 8004a42:	4d0a      	ldr	r5, [pc, #40]	; (8004a6c <__libc_init_array+0x40>)
 8004a44:	4c0a      	ldr	r4, [pc, #40]	; (8004a70 <__libc_init_array+0x44>)
 8004a46:	1b64      	subs	r4, r4, r5
 8004a48:	10a4      	asrs	r4, r4, #2
 8004a4a:	42a6      	cmp	r6, r4
 8004a4c:	d105      	bne.n	8004a5a <__libc_init_array+0x2e>
 8004a4e:	bd70      	pop	{r4, r5, r6, pc}
 8004a50:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a54:	4798      	blx	r3
 8004a56:	3601      	adds	r6, #1
 8004a58:	e7ee      	b.n	8004a38 <__libc_init_array+0xc>
 8004a5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a5e:	4798      	blx	r3
 8004a60:	3601      	adds	r6, #1
 8004a62:	e7f2      	b.n	8004a4a <__libc_init_array+0x1e>
 8004a64:	08009920 	.word	0x08009920
 8004a68:	08009920 	.word	0x08009920
 8004a6c:	08009920 	.word	0x08009920
 8004a70:	08009924 	.word	0x08009924

08004a74 <__retarget_lock_init_recursive>:
 8004a74:	4770      	bx	lr

08004a76 <__retarget_lock_acquire_recursive>:
 8004a76:	4770      	bx	lr

08004a78 <__retarget_lock_release_recursive>:
 8004a78:	4770      	bx	lr

08004a7a <strcpy>:
 8004a7a:	4603      	mov	r3, r0
 8004a7c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004a80:	f803 2b01 	strb.w	r2, [r3], #1
 8004a84:	2a00      	cmp	r2, #0
 8004a86:	d1f9      	bne.n	8004a7c <strcpy+0x2>
 8004a88:	4770      	bx	lr

08004a8a <memchr>:
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	b510      	push	{r4, lr}
 8004a8e:	b2c9      	uxtb	r1, r1
 8004a90:	4402      	add	r2, r0
 8004a92:	4293      	cmp	r3, r2
 8004a94:	4618      	mov	r0, r3
 8004a96:	d101      	bne.n	8004a9c <memchr+0x12>
 8004a98:	2000      	movs	r0, #0
 8004a9a:	e003      	b.n	8004aa4 <memchr+0x1a>
 8004a9c:	7804      	ldrb	r4, [r0, #0]
 8004a9e:	3301      	adds	r3, #1
 8004aa0:	428c      	cmp	r4, r1
 8004aa2:	d1f6      	bne.n	8004a92 <memchr+0x8>
 8004aa4:	bd10      	pop	{r4, pc}
	...

08004aa8 <nanf>:
 8004aa8:	4800      	ldr	r0, [pc, #0]	; (8004aac <nanf+0x4>)
 8004aaa:	4770      	bx	lr
 8004aac:	7fc00000 	.word	0x7fc00000

08004ab0 <quorem>:
 8004ab0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ab4:	6903      	ldr	r3, [r0, #16]
 8004ab6:	690c      	ldr	r4, [r1, #16]
 8004ab8:	4607      	mov	r7, r0
 8004aba:	42a3      	cmp	r3, r4
 8004abc:	db7f      	blt.n	8004bbe <quorem+0x10e>
 8004abe:	3c01      	subs	r4, #1
 8004ac0:	f100 0514 	add.w	r5, r0, #20
 8004ac4:	f101 0814 	add.w	r8, r1, #20
 8004ac8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004acc:	9301      	str	r3, [sp, #4]
 8004ace:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004ad2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004ad6:	3301      	adds	r3, #1
 8004ad8:	429a      	cmp	r2, r3
 8004ada:	fbb2 f6f3 	udiv	r6, r2, r3
 8004ade:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004ae2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004ae6:	d331      	bcc.n	8004b4c <quorem+0x9c>
 8004ae8:	f04f 0e00 	mov.w	lr, #0
 8004aec:	4640      	mov	r0, r8
 8004aee:	46ac      	mov	ip, r5
 8004af0:	46f2      	mov	sl, lr
 8004af2:	f850 2b04 	ldr.w	r2, [r0], #4
 8004af6:	b293      	uxth	r3, r2
 8004af8:	fb06 e303 	mla	r3, r6, r3, lr
 8004afc:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004b00:	0c1a      	lsrs	r2, r3, #16
 8004b02:	b29b      	uxth	r3, r3
 8004b04:	fb06 220e 	mla	r2, r6, lr, r2
 8004b08:	ebaa 0303 	sub.w	r3, sl, r3
 8004b0c:	f8dc a000 	ldr.w	sl, [ip]
 8004b10:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004b14:	fa1f fa8a 	uxth.w	sl, sl
 8004b18:	4453      	add	r3, sl
 8004b1a:	f8dc a000 	ldr.w	sl, [ip]
 8004b1e:	b292      	uxth	r2, r2
 8004b20:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8004b24:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004b28:	b29b      	uxth	r3, r3
 8004b2a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004b2e:	4581      	cmp	r9, r0
 8004b30:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004b34:	f84c 3b04 	str.w	r3, [ip], #4
 8004b38:	d2db      	bcs.n	8004af2 <quorem+0x42>
 8004b3a:	f855 300b 	ldr.w	r3, [r5, fp]
 8004b3e:	b92b      	cbnz	r3, 8004b4c <quorem+0x9c>
 8004b40:	9b01      	ldr	r3, [sp, #4]
 8004b42:	3b04      	subs	r3, #4
 8004b44:	429d      	cmp	r5, r3
 8004b46:	461a      	mov	r2, r3
 8004b48:	d32d      	bcc.n	8004ba6 <quorem+0xf6>
 8004b4a:	613c      	str	r4, [r7, #16]
 8004b4c:	4638      	mov	r0, r7
 8004b4e:	f001 f9df 	bl	8005f10 <__mcmp>
 8004b52:	2800      	cmp	r0, #0
 8004b54:	db23      	blt.n	8004b9e <quorem+0xee>
 8004b56:	4629      	mov	r1, r5
 8004b58:	2000      	movs	r0, #0
 8004b5a:	3601      	adds	r6, #1
 8004b5c:	f858 2b04 	ldr.w	r2, [r8], #4
 8004b60:	f8d1 c000 	ldr.w	ip, [r1]
 8004b64:	b293      	uxth	r3, r2
 8004b66:	1ac3      	subs	r3, r0, r3
 8004b68:	0c12      	lsrs	r2, r2, #16
 8004b6a:	fa1f f08c 	uxth.w	r0, ip
 8004b6e:	4403      	add	r3, r0
 8004b70:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8004b74:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004b78:	b29b      	uxth	r3, r3
 8004b7a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004b7e:	45c1      	cmp	r9, r8
 8004b80:	ea4f 4022 	mov.w	r0, r2, asr #16
 8004b84:	f841 3b04 	str.w	r3, [r1], #4
 8004b88:	d2e8      	bcs.n	8004b5c <quorem+0xac>
 8004b8a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004b8e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004b92:	b922      	cbnz	r2, 8004b9e <quorem+0xee>
 8004b94:	3b04      	subs	r3, #4
 8004b96:	429d      	cmp	r5, r3
 8004b98:	461a      	mov	r2, r3
 8004b9a:	d30a      	bcc.n	8004bb2 <quorem+0x102>
 8004b9c:	613c      	str	r4, [r7, #16]
 8004b9e:	4630      	mov	r0, r6
 8004ba0:	b003      	add	sp, #12
 8004ba2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ba6:	6812      	ldr	r2, [r2, #0]
 8004ba8:	3b04      	subs	r3, #4
 8004baa:	2a00      	cmp	r2, #0
 8004bac:	d1cd      	bne.n	8004b4a <quorem+0x9a>
 8004bae:	3c01      	subs	r4, #1
 8004bb0:	e7c8      	b.n	8004b44 <quorem+0x94>
 8004bb2:	6812      	ldr	r2, [r2, #0]
 8004bb4:	3b04      	subs	r3, #4
 8004bb6:	2a00      	cmp	r2, #0
 8004bb8:	d1f0      	bne.n	8004b9c <quorem+0xec>
 8004bba:	3c01      	subs	r4, #1
 8004bbc:	e7eb      	b.n	8004b96 <quorem+0xe6>
 8004bbe:	2000      	movs	r0, #0
 8004bc0:	e7ee      	b.n	8004ba0 <quorem+0xf0>
 8004bc2:	0000      	movs	r0, r0
 8004bc4:	0000      	movs	r0, r0
	...

08004bc8 <_dtoa_r>:
 8004bc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bcc:	4616      	mov	r6, r2
 8004bce:	461f      	mov	r7, r3
 8004bd0:	69c4      	ldr	r4, [r0, #28]
 8004bd2:	b099      	sub	sp, #100	; 0x64
 8004bd4:	4605      	mov	r5, r0
 8004bd6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004bda:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8004bde:	b974      	cbnz	r4, 8004bfe <_dtoa_r+0x36>
 8004be0:	2010      	movs	r0, #16
 8004be2:	f000 fe1d 	bl	8005820 <malloc>
 8004be6:	4602      	mov	r2, r0
 8004be8:	61e8      	str	r0, [r5, #28]
 8004bea:	b920      	cbnz	r0, 8004bf6 <_dtoa_r+0x2e>
 8004bec:	21ef      	movs	r1, #239	; 0xef
 8004bee:	4bac      	ldr	r3, [pc, #688]	; (8004ea0 <_dtoa_r+0x2d8>)
 8004bf0:	48ac      	ldr	r0, [pc, #688]	; (8004ea4 <_dtoa_r+0x2dc>)
 8004bf2:	f002 fc55 	bl	80074a0 <__assert_func>
 8004bf6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004bfa:	6004      	str	r4, [r0, #0]
 8004bfc:	60c4      	str	r4, [r0, #12]
 8004bfe:	69eb      	ldr	r3, [r5, #28]
 8004c00:	6819      	ldr	r1, [r3, #0]
 8004c02:	b151      	cbz	r1, 8004c1a <_dtoa_r+0x52>
 8004c04:	685a      	ldr	r2, [r3, #4]
 8004c06:	2301      	movs	r3, #1
 8004c08:	4093      	lsls	r3, r2
 8004c0a:	604a      	str	r2, [r1, #4]
 8004c0c:	608b      	str	r3, [r1, #8]
 8004c0e:	4628      	mov	r0, r5
 8004c10:	f000 fefa 	bl	8005a08 <_Bfree>
 8004c14:	2200      	movs	r2, #0
 8004c16:	69eb      	ldr	r3, [r5, #28]
 8004c18:	601a      	str	r2, [r3, #0]
 8004c1a:	1e3b      	subs	r3, r7, #0
 8004c1c:	bfaf      	iteee	ge
 8004c1e:	2300      	movge	r3, #0
 8004c20:	2201      	movlt	r2, #1
 8004c22:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004c26:	9305      	strlt	r3, [sp, #20]
 8004c28:	bfa8      	it	ge
 8004c2a:	f8c8 3000 	strge.w	r3, [r8]
 8004c2e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8004c32:	4b9d      	ldr	r3, [pc, #628]	; (8004ea8 <_dtoa_r+0x2e0>)
 8004c34:	bfb8      	it	lt
 8004c36:	f8c8 2000 	strlt.w	r2, [r8]
 8004c3a:	ea33 0309 	bics.w	r3, r3, r9
 8004c3e:	d119      	bne.n	8004c74 <_dtoa_r+0xac>
 8004c40:	f242 730f 	movw	r3, #9999	; 0x270f
 8004c44:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004c46:	6013      	str	r3, [r2, #0]
 8004c48:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004c4c:	4333      	orrs	r3, r6
 8004c4e:	f000 8589 	beq.w	8005764 <_dtoa_r+0xb9c>
 8004c52:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004c54:	b953      	cbnz	r3, 8004c6c <_dtoa_r+0xa4>
 8004c56:	4b95      	ldr	r3, [pc, #596]	; (8004eac <_dtoa_r+0x2e4>)
 8004c58:	e023      	b.n	8004ca2 <_dtoa_r+0xda>
 8004c5a:	4b95      	ldr	r3, [pc, #596]	; (8004eb0 <_dtoa_r+0x2e8>)
 8004c5c:	9303      	str	r3, [sp, #12]
 8004c5e:	3308      	adds	r3, #8
 8004c60:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8004c62:	6013      	str	r3, [r2, #0]
 8004c64:	9803      	ldr	r0, [sp, #12]
 8004c66:	b019      	add	sp, #100	; 0x64
 8004c68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c6c:	4b8f      	ldr	r3, [pc, #572]	; (8004eac <_dtoa_r+0x2e4>)
 8004c6e:	9303      	str	r3, [sp, #12]
 8004c70:	3303      	adds	r3, #3
 8004c72:	e7f5      	b.n	8004c60 <_dtoa_r+0x98>
 8004c74:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8004c78:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8004c7c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004c80:	2200      	movs	r2, #0
 8004c82:	2300      	movs	r3, #0
 8004c84:	f7fb ff44 	bl	8000b10 <__aeabi_dcmpeq>
 8004c88:	4680      	mov	r8, r0
 8004c8a:	b160      	cbz	r0, 8004ca6 <_dtoa_r+0xde>
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004c90:	6013      	str	r3, [r2, #0]
 8004c92:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	f000 8562 	beq.w	800575e <_dtoa_r+0xb96>
 8004c9a:	4b86      	ldr	r3, [pc, #536]	; (8004eb4 <_dtoa_r+0x2ec>)
 8004c9c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8004c9e:	6013      	str	r3, [r2, #0]
 8004ca0:	3b01      	subs	r3, #1
 8004ca2:	9303      	str	r3, [sp, #12]
 8004ca4:	e7de      	b.n	8004c64 <_dtoa_r+0x9c>
 8004ca6:	ab16      	add	r3, sp, #88	; 0x58
 8004ca8:	9301      	str	r3, [sp, #4]
 8004caa:	ab17      	add	r3, sp, #92	; 0x5c
 8004cac:	9300      	str	r3, [sp, #0]
 8004cae:	4628      	mov	r0, r5
 8004cb0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8004cb4:	f001 fa3c 	bl	8006130 <__d2b>
 8004cb8:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8004cbc:	4682      	mov	sl, r0
 8004cbe:	2c00      	cmp	r4, #0
 8004cc0:	d07e      	beq.n	8004dc0 <_dtoa_r+0x1f8>
 8004cc2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004cc6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004cc8:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8004ccc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004cd0:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8004cd4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8004cd8:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8004cdc:	4619      	mov	r1, r3
 8004cde:	2200      	movs	r2, #0
 8004ce0:	4b75      	ldr	r3, [pc, #468]	; (8004eb8 <_dtoa_r+0x2f0>)
 8004ce2:	f7fb faf5 	bl	80002d0 <__aeabi_dsub>
 8004ce6:	a368      	add	r3, pc, #416	; (adr r3, 8004e88 <_dtoa_r+0x2c0>)
 8004ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cec:	f7fb fca8 	bl	8000640 <__aeabi_dmul>
 8004cf0:	a367      	add	r3, pc, #412	; (adr r3, 8004e90 <_dtoa_r+0x2c8>)
 8004cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cf6:	f7fb faed 	bl	80002d4 <__adddf3>
 8004cfa:	4606      	mov	r6, r0
 8004cfc:	4620      	mov	r0, r4
 8004cfe:	460f      	mov	r7, r1
 8004d00:	f7fb fc34 	bl	800056c <__aeabi_i2d>
 8004d04:	a364      	add	r3, pc, #400	; (adr r3, 8004e98 <_dtoa_r+0x2d0>)
 8004d06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d0a:	f7fb fc99 	bl	8000640 <__aeabi_dmul>
 8004d0e:	4602      	mov	r2, r0
 8004d10:	460b      	mov	r3, r1
 8004d12:	4630      	mov	r0, r6
 8004d14:	4639      	mov	r1, r7
 8004d16:	f7fb fadd 	bl	80002d4 <__adddf3>
 8004d1a:	4606      	mov	r6, r0
 8004d1c:	460f      	mov	r7, r1
 8004d1e:	f7fb ff3f 	bl	8000ba0 <__aeabi_d2iz>
 8004d22:	2200      	movs	r2, #0
 8004d24:	4683      	mov	fp, r0
 8004d26:	2300      	movs	r3, #0
 8004d28:	4630      	mov	r0, r6
 8004d2a:	4639      	mov	r1, r7
 8004d2c:	f7fb fefa 	bl	8000b24 <__aeabi_dcmplt>
 8004d30:	b148      	cbz	r0, 8004d46 <_dtoa_r+0x17e>
 8004d32:	4658      	mov	r0, fp
 8004d34:	f7fb fc1a 	bl	800056c <__aeabi_i2d>
 8004d38:	4632      	mov	r2, r6
 8004d3a:	463b      	mov	r3, r7
 8004d3c:	f7fb fee8 	bl	8000b10 <__aeabi_dcmpeq>
 8004d40:	b908      	cbnz	r0, 8004d46 <_dtoa_r+0x17e>
 8004d42:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004d46:	f1bb 0f16 	cmp.w	fp, #22
 8004d4a:	d857      	bhi.n	8004dfc <_dtoa_r+0x234>
 8004d4c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004d50:	4b5a      	ldr	r3, [pc, #360]	; (8004ebc <_dtoa_r+0x2f4>)
 8004d52:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8004d56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d5a:	f7fb fee3 	bl	8000b24 <__aeabi_dcmplt>
 8004d5e:	2800      	cmp	r0, #0
 8004d60:	d04e      	beq.n	8004e00 <_dtoa_r+0x238>
 8004d62:	2300      	movs	r3, #0
 8004d64:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004d68:	930f      	str	r3, [sp, #60]	; 0x3c
 8004d6a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004d6c:	1b1b      	subs	r3, r3, r4
 8004d6e:	1e5a      	subs	r2, r3, #1
 8004d70:	bf46      	itte	mi
 8004d72:	f1c3 0901 	rsbmi	r9, r3, #1
 8004d76:	2300      	movmi	r3, #0
 8004d78:	f04f 0900 	movpl.w	r9, #0
 8004d7c:	9209      	str	r2, [sp, #36]	; 0x24
 8004d7e:	bf48      	it	mi
 8004d80:	9309      	strmi	r3, [sp, #36]	; 0x24
 8004d82:	f1bb 0f00 	cmp.w	fp, #0
 8004d86:	db3d      	blt.n	8004e04 <_dtoa_r+0x23c>
 8004d88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d8a:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8004d8e:	445b      	add	r3, fp
 8004d90:	9309      	str	r3, [sp, #36]	; 0x24
 8004d92:	2300      	movs	r3, #0
 8004d94:	930a      	str	r3, [sp, #40]	; 0x28
 8004d96:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004d98:	2b09      	cmp	r3, #9
 8004d9a:	d867      	bhi.n	8004e6c <_dtoa_r+0x2a4>
 8004d9c:	2b05      	cmp	r3, #5
 8004d9e:	bfc4      	itt	gt
 8004da0:	3b04      	subgt	r3, #4
 8004da2:	9322      	strgt	r3, [sp, #136]	; 0x88
 8004da4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004da6:	bfc8      	it	gt
 8004da8:	2400      	movgt	r4, #0
 8004daa:	f1a3 0302 	sub.w	r3, r3, #2
 8004dae:	bfd8      	it	le
 8004db0:	2401      	movle	r4, #1
 8004db2:	2b03      	cmp	r3, #3
 8004db4:	f200 8086 	bhi.w	8004ec4 <_dtoa_r+0x2fc>
 8004db8:	e8df f003 	tbb	[pc, r3]
 8004dbc:	5637392c 	.word	0x5637392c
 8004dc0:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8004dc4:	441c      	add	r4, r3
 8004dc6:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8004dca:	2b20      	cmp	r3, #32
 8004dcc:	bfc1      	itttt	gt
 8004dce:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8004dd2:	fa09 f903 	lslgt.w	r9, r9, r3
 8004dd6:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 8004dda:	fa26 f303 	lsrgt.w	r3, r6, r3
 8004dde:	bfd6      	itet	le
 8004de0:	f1c3 0320 	rsble	r3, r3, #32
 8004de4:	ea49 0003 	orrgt.w	r0, r9, r3
 8004de8:	fa06 f003 	lslle.w	r0, r6, r3
 8004dec:	f7fb fbae 	bl	800054c <__aeabi_ui2d>
 8004df0:	2201      	movs	r2, #1
 8004df2:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8004df6:	3c01      	subs	r4, #1
 8004df8:	9213      	str	r2, [sp, #76]	; 0x4c
 8004dfa:	e76f      	b.n	8004cdc <_dtoa_r+0x114>
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	e7b3      	b.n	8004d68 <_dtoa_r+0x1a0>
 8004e00:	900f      	str	r0, [sp, #60]	; 0x3c
 8004e02:	e7b2      	b.n	8004d6a <_dtoa_r+0x1a2>
 8004e04:	f1cb 0300 	rsb	r3, fp, #0
 8004e08:	930a      	str	r3, [sp, #40]	; 0x28
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	eba9 090b 	sub.w	r9, r9, fp
 8004e10:	930e      	str	r3, [sp, #56]	; 0x38
 8004e12:	e7c0      	b.n	8004d96 <_dtoa_r+0x1ce>
 8004e14:	2300      	movs	r3, #0
 8004e16:	930b      	str	r3, [sp, #44]	; 0x2c
 8004e18:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	dc55      	bgt.n	8004eca <_dtoa_r+0x302>
 8004e1e:	2301      	movs	r3, #1
 8004e20:	461a      	mov	r2, r3
 8004e22:	9306      	str	r3, [sp, #24]
 8004e24:	9308      	str	r3, [sp, #32]
 8004e26:	9223      	str	r2, [sp, #140]	; 0x8c
 8004e28:	e00b      	b.n	8004e42 <_dtoa_r+0x27a>
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	e7f3      	b.n	8004e16 <_dtoa_r+0x24e>
 8004e2e:	2300      	movs	r3, #0
 8004e30:	930b      	str	r3, [sp, #44]	; 0x2c
 8004e32:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004e34:	445b      	add	r3, fp
 8004e36:	9306      	str	r3, [sp, #24]
 8004e38:	3301      	adds	r3, #1
 8004e3a:	2b01      	cmp	r3, #1
 8004e3c:	9308      	str	r3, [sp, #32]
 8004e3e:	bfb8      	it	lt
 8004e40:	2301      	movlt	r3, #1
 8004e42:	2100      	movs	r1, #0
 8004e44:	2204      	movs	r2, #4
 8004e46:	69e8      	ldr	r0, [r5, #28]
 8004e48:	f102 0614 	add.w	r6, r2, #20
 8004e4c:	429e      	cmp	r6, r3
 8004e4e:	d940      	bls.n	8004ed2 <_dtoa_r+0x30a>
 8004e50:	6041      	str	r1, [r0, #4]
 8004e52:	4628      	mov	r0, r5
 8004e54:	f000 fd98 	bl	8005988 <_Balloc>
 8004e58:	9003      	str	r0, [sp, #12]
 8004e5a:	2800      	cmp	r0, #0
 8004e5c:	d13c      	bne.n	8004ed8 <_dtoa_r+0x310>
 8004e5e:	4602      	mov	r2, r0
 8004e60:	f240 11af 	movw	r1, #431	; 0x1af
 8004e64:	4b16      	ldr	r3, [pc, #88]	; (8004ec0 <_dtoa_r+0x2f8>)
 8004e66:	e6c3      	b.n	8004bf0 <_dtoa_r+0x28>
 8004e68:	2301      	movs	r3, #1
 8004e6a:	e7e1      	b.n	8004e30 <_dtoa_r+0x268>
 8004e6c:	2401      	movs	r4, #1
 8004e6e:	2300      	movs	r3, #0
 8004e70:	940b      	str	r4, [sp, #44]	; 0x2c
 8004e72:	9322      	str	r3, [sp, #136]	; 0x88
 8004e74:	f04f 33ff 	mov.w	r3, #4294967295
 8004e78:	2200      	movs	r2, #0
 8004e7a:	9306      	str	r3, [sp, #24]
 8004e7c:	9308      	str	r3, [sp, #32]
 8004e7e:	2312      	movs	r3, #18
 8004e80:	e7d1      	b.n	8004e26 <_dtoa_r+0x25e>
 8004e82:	bf00      	nop
 8004e84:	f3af 8000 	nop.w
 8004e88:	636f4361 	.word	0x636f4361
 8004e8c:	3fd287a7 	.word	0x3fd287a7
 8004e90:	8b60c8b3 	.word	0x8b60c8b3
 8004e94:	3fc68a28 	.word	0x3fc68a28
 8004e98:	509f79fb 	.word	0x509f79fb
 8004e9c:	3fd34413 	.word	0x3fd34413
 8004ea0:	08009364 	.word	0x08009364
 8004ea4:	0800937b 	.word	0x0800937b
 8004ea8:	7ff00000 	.word	0x7ff00000
 8004eac:	08009360 	.word	0x08009360
 8004eb0:	08009357 	.word	0x08009357
 8004eb4:	0800932f 	.word	0x0800932f
 8004eb8:	3ff80000 	.word	0x3ff80000
 8004ebc:	08009468 	.word	0x08009468
 8004ec0:	080093d3 	.word	0x080093d3
 8004ec4:	2301      	movs	r3, #1
 8004ec6:	930b      	str	r3, [sp, #44]	; 0x2c
 8004ec8:	e7d4      	b.n	8004e74 <_dtoa_r+0x2ac>
 8004eca:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004ecc:	9306      	str	r3, [sp, #24]
 8004ece:	9308      	str	r3, [sp, #32]
 8004ed0:	e7b7      	b.n	8004e42 <_dtoa_r+0x27a>
 8004ed2:	3101      	adds	r1, #1
 8004ed4:	0052      	lsls	r2, r2, #1
 8004ed6:	e7b7      	b.n	8004e48 <_dtoa_r+0x280>
 8004ed8:	69eb      	ldr	r3, [r5, #28]
 8004eda:	9a03      	ldr	r2, [sp, #12]
 8004edc:	601a      	str	r2, [r3, #0]
 8004ede:	9b08      	ldr	r3, [sp, #32]
 8004ee0:	2b0e      	cmp	r3, #14
 8004ee2:	f200 80a8 	bhi.w	8005036 <_dtoa_r+0x46e>
 8004ee6:	2c00      	cmp	r4, #0
 8004ee8:	f000 80a5 	beq.w	8005036 <_dtoa_r+0x46e>
 8004eec:	f1bb 0f00 	cmp.w	fp, #0
 8004ef0:	dd34      	ble.n	8004f5c <_dtoa_r+0x394>
 8004ef2:	4b9a      	ldr	r3, [pc, #616]	; (800515c <_dtoa_r+0x594>)
 8004ef4:	f00b 020f 	and.w	r2, fp, #15
 8004ef8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004efc:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8004f00:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004f04:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8004f08:	ea4f 142b 	mov.w	r4, fp, asr #4
 8004f0c:	d016      	beq.n	8004f3c <_dtoa_r+0x374>
 8004f0e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004f12:	4b93      	ldr	r3, [pc, #588]	; (8005160 <_dtoa_r+0x598>)
 8004f14:	2703      	movs	r7, #3
 8004f16:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004f1a:	f7fb fcbb 	bl	8000894 <__aeabi_ddiv>
 8004f1e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004f22:	f004 040f 	and.w	r4, r4, #15
 8004f26:	4e8e      	ldr	r6, [pc, #568]	; (8005160 <_dtoa_r+0x598>)
 8004f28:	b954      	cbnz	r4, 8004f40 <_dtoa_r+0x378>
 8004f2a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004f2e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004f32:	f7fb fcaf 	bl	8000894 <__aeabi_ddiv>
 8004f36:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004f3a:	e029      	b.n	8004f90 <_dtoa_r+0x3c8>
 8004f3c:	2702      	movs	r7, #2
 8004f3e:	e7f2      	b.n	8004f26 <_dtoa_r+0x35e>
 8004f40:	07e1      	lsls	r1, r4, #31
 8004f42:	d508      	bpl.n	8004f56 <_dtoa_r+0x38e>
 8004f44:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004f48:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004f4c:	f7fb fb78 	bl	8000640 <__aeabi_dmul>
 8004f50:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004f54:	3701      	adds	r7, #1
 8004f56:	1064      	asrs	r4, r4, #1
 8004f58:	3608      	adds	r6, #8
 8004f5a:	e7e5      	b.n	8004f28 <_dtoa_r+0x360>
 8004f5c:	f000 80a5 	beq.w	80050aa <_dtoa_r+0x4e2>
 8004f60:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004f64:	f1cb 0400 	rsb	r4, fp, #0
 8004f68:	4b7c      	ldr	r3, [pc, #496]	; (800515c <_dtoa_r+0x594>)
 8004f6a:	f004 020f 	and.w	r2, r4, #15
 8004f6e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f76:	f7fb fb63 	bl	8000640 <__aeabi_dmul>
 8004f7a:	2702      	movs	r7, #2
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004f82:	4e77      	ldr	r6, [pc, #476]	; (8005160 <_dtoa_r+0x598>)
 8004f84:	1124      	asrs	r4, r4, #4
 8004f86:	2c00      	cmp	r4, #0
 8004f88:	f040 8084 	bne.w	8005094 <_dtoa_r+0x4cc>
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d1d2      	bne.n	8004f36 <_dtoa_r+0x36e>
 8004f90:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8004f94:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8004f98:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	f000 8087 	beq.w	80050ae <_dtoa_r+0x4e6>
 8004fa0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	4b6f      	ldr	r3, [pc, #444]	; (8005164 <_dtoa_r+0x59c>)
 8004fa8:	f7fb fdbc 	bl	8000b24 <__aeabi_dcmplt>
 8004fac:	2800      	cmp	r0, #0
 8004fae:	d07e      	beq.n	80050ae <_dtoa_r+0x4e6>
 8004fb0:	9b08      	ldr	r3, [sp, #32]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d07b      	beq.n	80050ae <_dtoa_r+0x4e6>
 8004fb6:	9b06      	ldr	r3, [sp, #24]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	dd38      	ble.n	800502e <_dtoa_r+0x466>
 8004fbc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	4b69      	ldr	r3, [pc, #420]	; (8005168 <_dtoa_r+0x5a0>)
 8004fc4:	f7fb fb3c 	bl	8000640 <__aeabi_dmul>
 8004fc8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004fcc:	9c06      	ldr	r4, [sp, #24]
 8004fce:	f10b 38ff 	add.w	r8, fp, #4294967295
 8004fd2:	3701      	adds	r7, #1
 8004fd4:	4638      	mov	r0, r7
 8004fd6:	f7fb fac9 	bl	800056c <__aeabi_i2d>
 8004fda:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004fde:	f7fb fb2f 	bl	8000640 <__aeabi_dmul>
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	4b61      	ldr	r3, [pc, #388]	; (800516c <_dtoa_r+0x5a4>)
 8004fe6:	f7fb f975 	bl	80002d4 <__adddf3>
 8004fea:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8004fee:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004ff2:	9611      	str	r6, [sp, #68]	; 0x44
 8004ff4:	2c00      	cmp	r4, #0
 8004ff6:	d15d      	bne.n	80050b4 <_dtoa_r+0x4ec>
 8004ff8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	4b5c      	ldr	r3, [pc, #368]	; (8005170 <_dtoa_r+0x5a8>)
 8005000:	f7fb f966 	bl	80002d0 <__aeabi_dsub>
 8005004:	4602      	mov	r2, r0
 8005006:	460b      	mov	r3, r1
 8005008:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800500c:	4633      	mov	r3, r6
 800500e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005010:	f7fb fda6 	bl	8000b60 <__aeabi_dcmpgt>
 8005014:	2800      	cmp	r0, #0
 8005016:	f040 8295 	bne.w	8005544 <_dtoa_r+0x97c>
 800501a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800501e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005020:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8005024:	f7fb fd7e 	bl	8000b24 <__aeabi_dcmplt>
 8005028:	2800      	cmp	r0, #0
 800502a:	f040 8289 	bne.w	8005540 <_dtoa_r+0x978>
 800502e:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8005032:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005036:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005038:	2b00      	cmp	r3, #0
 800503a:	f2c0 8151 	blt.w	80052e0 <_dtoa_r+0x718>
 800503e:	f1bb 0f0e 	cmp.w	fp, #14
 8005042:	f300 814d 	bgt.w	80052e0 <_dtoa_r+0x718>
 8005046:	4b45      	ldr	r3, [pc, #276]	; (800515c <_dtoa_r+0x594>)
 8005048:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800504c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005050:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8005054:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005056:	2b00      	cmp	r3, #0
 8005058:	f280 80da 	bge.w	8005210 <_dtoa_r+0x648>
 800505c:	9b08      	ldr	r3, [sp, #32]
 800505e:	2b00      	cmp	r3, #0
 8005060:	f300 80d6 	bgt.w	8005210 <_dtoa_r+0x648>
 8005064:	f040 826b 	bne.w	800553e <_dtoa_r+0x976>
 8005068:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800506c:	2200      	movs	r2, #0
 800506e:	4b40      	ldr	r3, [pc, #256]	; (8005170 <_dtoa_r+0x5a8>)
 8005070:	f7fb fae6 	bl	8000640 <__aeabi_dmul>
 8005074:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005078:	f7fb fd68 	bl	8000b4c <__aeabi_dcmpge>
 800507c:	9c08      	ldr	r4, [sp, #32]
 800507e:	4626      	mov	r6, r4
 8005080:	2800      	cmp	r0, #0
 8005082:	f040 8241 	bne.w	8005508 <_dtoa_r+0x940>
 8005086:	2331      	movs	r3, #49	; 0x31
 8005088:	9f03      	ldr	r7, [sp, #12]
 800508a:	f10b 0b01 	add.w	fp, fp, #1
 800508e:	f807 3b01 	strb.w	r3, [r7], #1
 8005092:	e23d      	b.n	8005510 <_dtoa_r+0x948>
 8005094:	07e2      	lsls	r2, r4, #31
 8005096:	d505      	bpl.n	80050a4 <_dtoa_r+0x4dc>
 8005098:	e9d6 2300 	ldrd	r2, r3, [r6]
 800509c:	f7fb fad0 	bl	8000640 <__aeabi_dmul>
 80050a0:	2301      	movs	r3, #1
 80050a2:	3701      	adds	r7, #1
 80050a4:	1064      	asrs	r4, r4, #1
 80050a6:	3608      	adds	r6, #8
 80050a8:	e76d      	b.n	8004f86 <_dtoa_r+0x3be>
 80050aa:	2702      	movs	r7, #2
 80050ac:	e770      	b.n	8004f90 <_dtoa_r+0x3c8>
 80050ae:	46d8      	mov	r8, fp
 80050b0:	9c08      	ldr	r4, [sp, #32]
 80050b2:	e78f      	b.n	8004fd4 <_dtoa_r+0x40c>
 80050b4:	9903      	ldr	r1, [sp, #12]
 80050b6:	4b29      	ldr	r3, [pc, #164]	; (800515c <_dtoa_r+0x594>)
 80050b8:	4421      	add	r1, r4
 80050ba:	9112      	str	r1, [sp, #72]	; 0x48
 80050bc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80050be:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80050c2:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80050c6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80050ca:	2900      	cmp	r1, #0
 80050cc:	d054      	beq.n	8005178 <_dtoa_r+0x5b0>
 80050ce:	2000      	movs	r0, #0
 80050d0:	4928      	ldr	r1, [pc, #160]	; (8005174 <_dtoa_r+0x5ac>)
 80050d2:	f7fb fbdf 	bl	8000894 <__aeabi_ddiv>
 80050d6:	463b      	mov	r3, r7
 80050d8:	4632      	mov	r2, r6
 80050da:	f7fb f8f9 	bl	80002d0 <__aeabi_dsub>
 80050de:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80050e2:	9f03      	ldr	r7, [sp, #12]
 80050e4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80050e8:	f7fb fd5a 	bl	8000ba0 <__aeabi_d2iz>
 80050ec:	4604      	mov	r4, r0
 80050ee:	f7fb fa3d 	bl	800056c <__aeabi_i2d>
 80050f2:	4602      	mov	r2, r0
 80050f4:	460b      	mov	r3, r1
 80050f6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80050fa:	f7fb f8e9 	bl	80002d0 <__aeabi_dsub>
 80050fe:	4602      	mov	r2, r0
 8005100:	460b      	mov	r3, r1
 8005102:	3430      	adds	r4, #48	; 0x30
 8005104:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005108:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800510c:	f807 4b01 	strb.w	r4, [r7], #1
 8005110:	f7fb fd08 	bl	8000b24 <__aeabi_dcmplt>
 8005114:	2800      	cmp	r0, #0
 8005116:	d173      	bne.n	8005200 <_dtoa_r+0x638>
 8005118:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800511c:	2000      	movs	r0, #0
 800511e:	4911      	ldr	r1, [pc, #68]	; (8005164 <_dtoa_r+0x59c>)
 8005120:	f7fb f8d6 	bl	80002d0 <__aeabi_dsub>
 8005124:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005128:	f7fb fcfc 	bl	8000b24 <__aeabi_dcmplt>
 800512c:	2800      	cmp	r0, #0
 800512e:	f040 80b6 	bne.w	800529e <_dtoa_r+0x6d6>
 8005132:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005134:	429f      	cmp	r7, r3
 8005136:	f43f af7a 	beq.w	800502e <_dtoa_r+0x466>
 800513a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800513e:	2200      	movs	r2, #0
 8005140:	4b09      	ldr	r3, [pc, #36]	; (8005168 <_dtoa_r+0x5a0>)
 8005142:	f7fb fa7d 	bl	8000640 <__aeabi_dmul>
 8005146:	2200      	movs	r2, #0
 8005148:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800514c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005150:	4b05      	ldr	r3, [pc, #20]	; (8005168 <_dtoa_r+0x5a0>)
 8005152:	f7fb fa75 	bl	8000640 <__aeabi_dmul>
 8005156:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800515a:	e7c3      	b.n	80050e4 <_dtoa_r+0x51c>
 800515c:	08009468 	.word	0x08009468
 8005160:	08009440 	.word	0x08009440
 8005164:	3ff00000 	.word	0x3ff00000
 8005168:	40240000 	.word	0x40240000
 800516c:	401c0000 	.word	0x401c0000
 8005170:	40140000 	.word	0x40140000
 8005174:	3fe00000 	.word	0x3fe00000
 8005178:	4630      	mov	r0, r6
 800517a:	4639      	mov	r1, r7
 800517c:	f7fb fa60 	bl	8000640 <__aeabi_dmul>
 8005180:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005182:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005186:	9c03      	ldr	r4, [sp, #12]
 8005188:	9314      	str	r3, [sp, #80]	; 0x50
 800518a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800518e:	f7fb fd07 	bl	8000ba0 <__aeabi_d2iz>
 8005192:	9015      	str	r0, [sp, #84]	; 0x54
 8005194:	f7fb f9ea 	bl	800056c <__aeabi_i2d>
 8005198:	4602      	mov	r2, r0
 800519a:	460b      	mov	r3, r1
 800519c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80051a0:	f7fb f896 	bl	80002d0 <__aeabi_dsub>
 80051a4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80051a6:	4606      	mov	r6, r0
 80051a8:	3330      	adds	r3, #48	; 0x30
 80051aa:	f804 3b01 	strb.w	r3, [r4], #1
 80051ae:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80051b0:	460f      	mov	r7, r1
 80051b2:	429c      	cmp	r4, r3
 80051b4:	f04f 0200 	mov.w	r2, #0
 80051b8:	d124      	bne.n	8005204 <_dtoa_r+0x63c>
 80051ba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80051be:	4baf      	ldr	r3, [pc, #700]	; (800547c <_dtoa_r+0x8b4>)
 80051c0:	f7fb f888 	bl	80002d4 <__adddf3>
 80051c4:	4602      	mov	r2, r0
 80051c6:	460b      	mov	r3, r1
 80051c8:	4630      	mov	r0, r6
 80051ca:	4639      	mov	r1, r7
 80051cc:	f7fb fcc8 	bl	8000b60 <__aeabi_dcmpgt>
 80051d0:	2800      	cmp	r0, #0
 80051d2:	d163      	bne.n	800529c <_dtoa_r+0x6d4>
 80051d4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80051d8:	2000      	movs	r0, #0
 80051da:	49a8      	ldr	r1, [pc, #672]	; (800547c <_dtoa_r+0x8b4>)
 80051dc:	f7fb f878 	bl	80002d0 <__aeabi_dsub>
 80051e0:	4602      	mov	r2, r0
 80051e2:	460b      	mov	r3, r1
 80051e4:	4630      	mov	r0, r6
 80051e6:	4639      	mov	r1, r7
 80051e8:	f7fb fc9c 	bl	8000b24 <__aeabi_dcmplt>
 80051ec:	2800      	cmp	r0, #0
 80051ee:	f43f af1e 	beq.w	800502e <_dtoa_r+0x466>
 80051f2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80051f4:	1e7b      	subs	r3, r7, #1
 80051f6:	9314      	str	r3, [sp, #80]	; 0x50
 80051f8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80051fc:	2b30      	cmp	r3, #48	; 0x30
 80051fe:	d0f8      	beq.n	80051f2 <_dtoa_r+0x62a>
 8005200:	46c3      	mov	fp, r8
 8005202:	e03b      	b.n	800527c <_dtoa_r+0x6b4>
 8005204:	4b9e      	ldr	r3, [pc, #632]	; (8005480 <_dtoa_r+0x8b8>)
 8005206:	f7fb fa1b 	bl	8000640 <__aeabi_dmul>
 800520a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800520e:	e7bc      	b.n	800518a <_dtoa_r+0x5c2>
 8005210:	9f03      	ldr	r7, [sp, #12]
 8005212:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8005216:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800521a:	4640      	mov	r0, r8
 800521c:	4649      	mov	r1, r9
 800521e:	f7fb fb39 	bl	8000894 <__aeabi_ddiv>
 8005222:	f7fb fcbd 	bl	8000ba0 <__aeabi_d2iz>
 8005226:	4604      	mov	r4, r0
 8005228:	f7fb f9a0 	bl	800056c <__aeabi_i2d>
 800522c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005230:	f7fb fa06 	bl	8000640 <__aeabi_dmul>
 8005234:	4602      	mov	r2, r0
 8005236:	460b      	mov	r3, r1
 8005238:	4640      	mov	r0, r8
 800523a:	4649      	mov	r1, r9
 800523c:	f7fb f848 	bl	80002d0 <__aeabi_dsub>
 8005240:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8005244:	f807 6b01 	strb.w	r6, [r7], #1
 8005248:	9e03      	ldr	r6, [sp, #12]
 800524a:	f8dd c020 	ldr.w	ip, [sp, #32]
 800524e:	1bbe      	subs	r6, r7, r6
 8005250:	45b4      	cmp	ip, r6
 8005252:	4602      	mov	r2, r0
 8005254:	460b      	mov	r3, r1
 8005256:	d136      	bne.n	80052c6 <_dtoa_r+0x6fe>
 8005258:	f7fb f83c 	bl	80002d4 <__adddf3>
 800525c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005260:	4680      	mov	r8, r0
 8005262:	4689      	mov	r9, r1
 8005264:	f7fb fc7c 	bl	8000b60 <__aeabi_dcmpgt>
 8005268:	bb58      	cbnz	r0, 80052c2 <_dtoa_r+0x6fa>
 800526a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800526e:	4640      	mov	r0, r8
 8005270:	4649      	mov	r1, r9
 8005272:	f7fb fc4d 	bl	8000b10 <__aeabi_dcmpeq>
 8005276:	b108      	cbz	r0, 800527c <_dtoa_r+0x6b4>
 8005278:	07e3      	lsls	r3, r4, #31
 800527a:	d422      	bmi.n	80052c2 <_dtoa_r+0x6fa>
 800527c:	4651      	mov	r1, sl
 800527e:	4628      	mov	r0, r5
 8005280:	f000 fbc2 	bl	8005a08 <_Bfree>
 8005284:	2300      	movs	r3, #0
 8005286:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005288:	703b      	strb	r3, [r7, #0]
 800528a:	f10b 0301 	add.w	r3, fp, #1
 800528e:	6013      	str	r3, [r2, #0]
 8005290:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005292:	2b00      	cmp	r3, #0
 8005294:	f43f ace6 	beq.w	8004c64 <_dtoa_r+0x9c>
 8005298:	601f      	str	r7, [r3, #0]
 800529a:	e4e3      	b.n	8004c64 <_dtoa_r+0x9c>
 800529c:	4627      	mov	r7, r4
 800529e:	463b      	mov	r3, r7
 80052a0:	461f      	mov	r7, r3
 80052a2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80052a6:	2a39      	cmp	r2, #57	; 0x39
 80052a8:	d107      	bne.n	80052ba <_dtoa_r+0x6f2>
 80052aa:	9a03      	ldr	r2, [sp, #12]
 80052ac:	429a      	cmp	r2, r3
 80052ae:	d1f7      	bne.n	80052a0 <_dtoa_r+0x6d8>
 80052b0:	2230      	movs	r2, #48	; 0x30
 80052b2:	9903      	ldr	r1, [sp, #12]
 80052b4:	f108 0801 	add.w	r8, r8, #1
 80052b8:	700a      	strb	r2, [r1, #0]
 80052ba:	781a      	ldrb	r2, [r3, #0]
 80052bc:	3201      	adds	r2, #1
 80052be:	701a      	strb	r2, [r3, #0]
 80052c0:	e79e      	b.n	8005200 <_dtoa_r+0x638>
 80052c2:	46d8      	mov	r8, fp
 80052c4:	e7eb      	b.n	800529e <_dtoa_r+0x6d6>
 80052c6:	2200      	movs	r2, #0
 80052c8:	4b6d      	ldr	r3, [pc, #436]	; (8005480 <_dtoa_r+0x8b8>)
 80052ca:	f7fb f9b9 	bl	8000640 <__aeabi_dmul>
 80052ce:	2200      	movs	r2, #0
 80052d0:	2300      	movs	r3, #0
 80052d2:	4680      	mov	r8, r0
 80052d4:	4689      	mov	r9, r1
 80052d6:	f7fb fc1b 	bl	8000b10 <__aeabi_dcmpeq>
 80052da:	2800      	cmp	r0, #0
 80052dc:	d09b      	beq.n	8005216 <_dtoa_r+0x64e>
 80052de:	e7cd      	b.n	800527c <_dtoa_r+0x6b4>
 80052e0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80052e2:	2a00      	cmp	r2, #0
 80052e4:	f000 80c4 	beq.w	8005470 <_dtoa_r+0x8a8>
 80052e8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80052ea:	2a01      	cmp	r2, #1
 80052ec:	f300 80a8 	bgt.w	8005440 <_dtoa_r+0x878>
 80052f0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80052f2:	2a00      	cmp	r2, #0
 80052f4:	f000 80a0 	beq.w	8005438 <_dtoa_r+0x870>
 80052f8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80052fc:	464f      	mov	r7, r9
 80052fe:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005300:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005302:	2101      	movs	r1, #1
 8005304:	441a      	add	r2, r3
 8005306:	4628      	mov	r0, r5
 8005308:	4499      	add	r9, r3
 800530a:	9209      	str	r2, [sp, #36]	; 0x24
 800530c:	f000 fc7c 	bl	8005c08 <__i2b>
 8005310:	4606      	mov	r6, r0
 8005312:	b15f      	cbz	r7, 800532c <_dtoa_r+0x764>
 8005314:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005316:	2b00      	cmp	r3, #0
 8005318:	dd08      	ble.n	800532c <_dtoa_r+0x764>
 800531a:	42bb      	cmp	r3, r7
 800531c:	bfa8      	it	ge
 800531e:	463b      	movge	r3, r7
 8005320:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005322:	eba9 0903 	sub.w	r9, r9, r3
 8005326:	1aff      	subs	r7, r7, r3
 8005328:	1ad3      	subs	r3, r2, r3
 800532a:	9309      	str	r3, [sp, #36]	; 0x24
 800532c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800532e:	b1f3      	cbz	r3, 800536e <_dtoa_r+0x7a6>
 8005330:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005332:	2b00      	cmp	r3, #0
 8005334:	f000 80a0 	beq.w	8005478 <_dtoa_r+0x8b0>
 8005338:	2c00      	cmp	r4, #0
 800533a:	dd10      	ble.n	800535e <_dtoa_r+0x796>
 800533c:	4631      	mov	r1, r6
 800533e:	4622      	mov	r2, r4
 8005340:	4628      	mov	r0, r5
 8005342:	f000 fd1f 	bl	8005d84 <__pow5mult>
 8005346:	4652      	mov	r2, sl
 8005348:	4601      	mov	r1, r0
 800534a:	4606      	mov	r6, r0
 800534c:	4628      	mov	r0, r5
 800534e:	f000 fc71 	bl	8005c34 <__multiply>
 8005352:	4680      	mov	r8, r0
 8005354:	4651      	mov	r1, sl
 8005356:	4628      	mov	r0, r5
 8005358:	f000 fb56 	bl	8005a08 <_Bfree>
 800535c:	46c2      	mov	sl, r8
 800535e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005360:	1b1a      	subs	r2, r3, r4
 8005362:	d004      	beq.n	800536e <_dtoa_r+0x7a6>
 8005364:	4651      	mov	r1, sl
 8005366:	4628      	mov	r0, r5
 8005368:	f000 fd0c 	bl	8005d84 <__pow5mult>
 800536c:	4682      	mov	sl, r0
 800536e:	2101      	movs	r1, #1
 8005370:	4628      	mov	r0, r5
 8005372:	f000 fc49 	bl	8005c08 <__i2b>
 8005376:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005378:	4604      	mov	r4, r0
 800537a:	2b00      	cmp	r3, #0
 800537c:	f340 8082 	ble.w	8005484 <_dtoa_r+0x8bc>
 8005380:	461a      	mov	r2, r3
 8005382:	4601      	mov	r1, r0
 8005384:	4628      	mov	r0, r5
 8005386:	f000 fcfd 	bl	8005d84 <__pow5mult>
 800538a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800538c:	4604      	mov	r4, r0
 800538e:	2b01      	cmp	r3, #1
 8005390:	dd7b      	ble.n	800548a <_dtoa_r+0x8c2>
 8005392:	f04f 0800 	mov.w	r8, #0
 8005396:	6923      	ldr	r3, [r4, #16]
 8005398:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800539c:	6918      	ldr	r0, [r3, #16]
 800539e:	f000 fbe5 	bl	8005b6c <__hi0bits>
 80053a2:	f1c0 0020 	rsb	r0, r0, #32
 80053a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80053a8:	4418      	add	r0, r3
 80053aa:	f010 001f 	ands.w	r0, r0, #31
 80053ae:	f000 8092 	beq.w	80054d6 <_dtoa_r+0x90e>
 80053b2:	f1c0 0320 	rsb	r3, r0, #32
 80053b6:	2b04      	cmp	r3, #4
 80053b8:	f340 8085 	ble.w	80054c6 <_dtoa_r+0x8fe>
 80053bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80053be:	f1c0 001c 	rsb	r0, r0, #28
 80053c2:	4403      	add	r3, r0
 80053c4:	4481      	add	r9, r0
 80053c6:	4407      	add	r7, r0
 80053c8:	9309      	str	r3, [sp, #36]	; 0x24
 80053ca:	f1b9 0f00 	cmp.w	r9, #0
 80053ce:	dd05      	ble.n	80053dc <_dtoa_r+0x814>
 80053d0:	4651      	mov	r1, sl
 80053d2:	464a      	mov	r2, r9
 80053d4:	4628      	mov	r0, r5
 80053d6:	f000 fd2f 	bl	8005e38 <__lshift>
 80053da:	4682      	mov	sl, r0
 80053dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80053de:	2b00      	cmp	r3, #0
 80053e0:	dd05      	ble.n	80053ee <_dtoa_r+0x826>
 80053e2:	4621      	mov	r1, r4
 80053e4:	461a      	mov	r2, r3
 80053e6:	4628      	mov	r0, r5
 80053e8:	f000 fd26 	bl	8005e38 <__lshift>
 80053ec:	4604      	mov	r4, r0
 80053ee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d072      	beq.n	80054da <_dtoa_r+0x912>
 80053f4:	4621      	mov	r1, r4
 80053f6:	4650      	mov	r0, sl
 80053f8:	f000 fd8a 	bl	8005f10 <__mcmp>
 80053fc:	2800      	cmp	r0, #0
 80053fe:	da6c      	bge.n	80054da <_dtoa_r+0x912>
 8005400:	2300      	movs	r3, #0
 8005402:	4651      	mov	r1, sl
 8005404:	220a      	movs	r2, #10
 8005406:	4628      	mov	r0, r5
 8005408:	f000 fb20 	bl	8005a4c <__multadd>
 800540c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800540e:	4682      	mov	sl, r0
 8005410:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005414:	2b00      	cmp	r3, #0
 8005416:	f000 81ac 	beq.w	8005772 <_dtoa_r+0xbaa>
 800541a:	2300      	movs	r3, #0
 800541c:	4631      	mov	r1, r6
 800541e:	220a      	movs	r2, #10
 8005420:	4628      	mov	r0, r5
 8005422:	f000 fb13 	bl	8005a4c <__multadd>
 8005426:	9b06      	ldr	r3, [sp, #24]
 8005428:	4606      	mov	r6, r0
 800542a:	2b00      	cmp	r3, #0
 800542c:	f300 8093 	bgt.w	8005556 <_dtoa_r+0x98e>
 8005430:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005432:	2b02      	cmp	r3, #2
 8005434:	dc59      	bgt.n	80054ea <_dtoa_r+0x922>
 8005436:	e08e      	b.n	8005556 <_dtoa_r+0x98e>
 8005438:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800543a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800543e:	e75d      	b.n	80052fc <_dtoa_r+0x734>
 8005440:	9b08      	ldr	r3, [sp, #32]
 8005442:	1e5c      	subs	r4, r3, #1
 8005444:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005446:	42a3      	cmp	r3, r4
 8005448:	bfbf      	itttt	lt
 800544a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800544c:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 800544e:	1ae3      	sublt	r3, r4, r3
 8005450:	18d2      	addlt	r2, r2, r3
 8005452:	bfa8      	it	ge
 8005454:	1b1c      	subge	r4, r3, r4
 8005456:	9b08      	ldr	r3, [sp, #32]
 8005458:	bfbe      	ittt	lt
 800545a:	940a      	strlt	r4, [sp, #40]	; 0x28
 800545c:	920e      	strlt	r2, [sp, #56]	; 0x38
 800545e:	2400      	movlt	r4, #0
 8005460:	2b00      	cmp	r3, #0
 8005462:	bfb5      	itete	lt
 8005464:	eba9 0703 	sublt.w	r7, r9, r3
 8005468:	464f      	movge	r7, r9
 800546a:	2300      	movlt	r3, #0
 800546c:	9b08      	ldrge	r3, [sp, #32]
 800546e:	e747      	b.n	8005300 <_dtoa_r+0x738>
 8005470:	464f      	mov	r7, r9
 8005472:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005474:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8005476:	e74c      	b.n	8005312 <_dtoa_r+0x74a>
 8005478:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800547a:	e773      	b.n	8005364 <_dtoa_r+0x79c>
 800547c:	3fe00000 	.word	0x3fe00000
 8005480:	40240000 	.word	0x40240000
 8005484:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005486:	2b01      	cmp	r3, #1
 8005488:	dc18      	bgt.n	80054bc <_dtoa_r+0x8f4>
 800548a:	9b04      	ldr	r3, [sp, #16]
 800548c:	b9b3      	cbnz	r3, 80054bc <_dtoa_r+0x8f4>
 800548e:	9b05      	ldr	r3, [sp, #20]
 8005490:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005494:	b993      	cbnz	r3, 80054bc <_dtoa_r+0x8f4>
 8005496:	9b05      	ldr	r3, [sp, #20]
 8005498:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800549c:	0d1b      	lsrs	r3, r3, #20
 800549e:	051b      	lsls	r3, r3, #20
 80054a0:	b17b      	cbz	r3, 80054c2 <_dtoa_r+0x8fa>
 80054a2:	f04f 0801 	mov.w	r8, #1
 80054a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80054a8:	f109 0901 	add.w	r9, r9, #1
 80054ac:	3301      	adds	r3, #1
 80054ae:	9309      	str	r3, [sp, #36]	; 0x24
 80054b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	f47f af6f 	bne.w	8005396 <_dtoa_r+0x7ce>
 80054b8:	2001      	movs	r0, #1
 80054ba:	e774      	b.n	80053a6 <_dtoa_r+0x7de>
 80054bc:	f04f 0800 	mov.w	r8, #0
 80054c0:	e7f6      	b.n	80054b0 <_dtoa_r+0x8e8>
 80054c2:	4698      	mov	r8, r3
 80054c4:	e7f4      	b.n	80054b0 <_dtoa_r+0x8e8>
 80054c6:	d080      	beq.n	80053ca <_dtoa_r+0x802>
 80054c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80054ca:	331c      	adds	r3, #28
 80054cc:	441a      	add	r2, r3
 80054ce:	4499      	add	r9, r3
 80054d0:	441f      	add	r7, r3
 80054d2:	9209      	str	r2, [sp, #36]	; 0x24
 80054d4:	e779      	b.n	80053ca <_dtoa_r+0x802>
 80054d6:	4603      	mov	r3, r0
 80054d8:	e7f6      	b.n	80054c8 <_dtoa_r+0x900>
 80054da:	9b08      	ldr	r3, [sp, #32]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	dc34      	bgt.n	800554a <_dtoa_r+0x982>
 80054e0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80054e2:	2b02      	cmp	r3, #2
 80054e4:	dd31      	ble.n	800554a <_dtoa_r+0x982>
 80054e6:	9b08      	ldr	r3, [sp, #32]
 80054e8:	9306      	str	r3, [sp, #24]
 80054ea:	9b06      	ldr	r3, [sp, #24]
 80054ec:	b963      	cbnz	r3, 8005508 <_dtoa_r+0x940>
 80054ee:	4621      	mov	r1, r4
 80054f0:	2205      	movs	r2, #5
 80054f2:	4628      	mov	r0, r5
 80054f4:	f000 faaa 	bl	8005a4c <__multadd>
 80054f8:	4601      	mov	r1, r0
 80054fa:	4604      	mov	r4, r0
 80054fc:	4650      	mov	r0, sl
 80054fe:	f000 fd07 	bl	8005f10 <__mcmp>
 8005502:	2800      	cmp	r0, #0
 8005504:	f73f adbf 	bgt.w	8005086 <_dtoa_r+0x4be>
 8005508:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800550a:	9f03      	ldr	r7, [sp, #12]
 800550c:	ea6f 0b03 	mvn.w	fp, r3
 8005510:	f04f 0800 	mov.w	r8, #0
 8005514:	4621      	mov	r1, r4
 8005516:	4628      	mov	r0, r5
 8005518:	f000 fa76 	bl	8005a08 <_Bfree>
 800551c:	2e00      	cmp	r6, #0
 800551e:	f43f aead 	beq.w	800527c <_dtoa_r+0x6b4>
 8005522:	f1b8 0f00 	cmp.w	r8, #0
 8005526:	d005      	beq.n	8005534 <_dtoa_r+0x96c>
 8005528:	45b0      	cmp	r8, r6
 800552a:	d003      	beq.n	8005534 <_dtoa_r+0x96c>
 800552c:	4641      	mov	r1, r8
 800552e:	4628      	mov	r0, r5
 8005530:	f000 fa6a 	bl	8005a08 <_Bfree>
 8005534:	4631      	mov	r1, r6
 8005536:	4628      	mov	r0, r5
 8005538:	f000 fa66 	bl	8005a08 <_Bfree>
 800553c:	e69e      	b.n	800527c <_dtoa_r+0x6b4>
 800553e:	2400      	movs	r4, #0
 8005540:	4626      	mov	r6, r4
 8005542:	e7e1      	b.n	8005508 <_dtoa_r+0x940>
 8005544:	46c3      	mov	fp, r8
 8005546:	4626      	mov	r6, r4
 8005548:	e59d      	b.n	8005086 <_dtoa_r+0x4be>
 800554a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800554c:	2b00      	cmp	r3, #0
 800554e:	f000 80c8 	beq.w	80056e2 <_dtoa_r+0xb1a>
 8005552:	9b08      	ldr	r3, [sp, #32]
 8005554:	9306      	str	r3, [sp, #24]
 8005556:	2f00      	cmp	r7, #0
 8005558:	dd05      	ble.n	8005566 <_dtoa_r+0x99e>
 800555a:	4631      	mov	r1, r6
 800555c:	463a      	mov	r2, r7
 800555e:	4628      	mov	r0, r5
 8005560:	f000 fc6a 	bl	8005e38 <__lshift>
 8005564:	4606      	mov	r6, r0
 8005566:	f1b8 0f00 	cmp.w	r8, #0
 800556a:	d05b      	beq.n	8005624 <_dtoa_r+0xa5c>
 800556c:	4628      	mov	r0, r5
 800556e:	6871      	ldr	r1, [r6, #4]
 8005570:	f000 fa0a 	bl	8005988 <_Balloc>
 8005574:	4607      	mov	r7, r0
 8005576:	b928      	cbnz	r0, 8005584 <_dtoa_r+0x9bc>
 8005578:	4602      	mov	r2, r0
 800557a:	f240 21ef 	movw	r1, #751	; 0x2ef
 800557e:	4b81      	ldr	r3, [pc, #516]	; (8005784 <_dtoa_r+0xbbc>)
 8005580:	f7ff bb36 	b.w	8004bf0 <_dtoa_r+0x28>
 8005584:	6932      	ldr	r2, [r6, #16]
 8005586:	f106 010c 	add.w	r1, r6, #12
 800558a:	3202      	adds	r2, #2
 800558c:	0092      	lsls	r2, r2, #2
 800558e:	300c      	adds	r0, #12
 8005590:	f001 ff72 	bl	8007478 <memcpy>
 8005594:	2201      	movs	r2, #1
 8005596:	4639      	mov	r1, r7
 8005598:	4628      	mov	r0, r5
 800559a:	f000 fc4d 	bl	8005e38 <__lshift>
 800559e:	46b0      	mov	r8, r6
 80055a0:	4606      	mov	r6, r0
 80055a2:	9b03      	ldr	r3, [sp, #12]
 80055a4:	9a03      	ldr	r2, [sp, #12]
 80055a6:	3301      	adds	r3, #1
 80055a8:	9308      	str	r3, [sp, #32]
 80055aa:	9b06      	ldr	r3, [sp, #24]
 80055ac:	4413      	add	r3, r2
 80055ae:	930b      	str	r3, [sp, #44]	; 0x2c
 80055b0:	9b04      	ldr	r3, [sp, #16]
 80055b2:	f003 0301 	and.w	r3, r3, #1
 80055b6:	930a      	str	r3, [sp, #40]	; 0x28
 80055b8:	9b08      	ldr	r3, [sp, #32]
 80055ba:	4621      	mov	r1, r4
 80055bc:	3b01      	subs	r3, #1
 80055be:	4650      	mov	r0, sl
 80055c0:	9304      	str	r3, [sp, #16]
 80055c2:	f7ff fa75 	bl	8004ab0 <quorem>
 80055c6:	4641      	mov	r1, r8
 80055c8:	9006      	str	r0, [sp, #24]
 80055ca:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80055ce:	4650      	mov	r0, sl
 80055d0:	f000 fc9e 	bl	8005f10 <__mcmp>
 80055d4:	4632      	mov	r2, r6
 80055d6:	9009      	str	r0, [sp, #36]	; 0x24
 80055d8:	4621      	mov	r1, r4
 80055da:	4628      	mov	r0, r5
 80055dc:	f000 fcb4 	bl	8005f48 <__mdiff>
 80055e0:	68c2      	ldr	r2, [r0, #12]
 80055e2:	4607      	mov	r7, r0
 80055e4:	bb02      	cbnz	r2, 8005628 <_dtoa_r+0xa60>
 80055e6:	4601      	mov	r1, r0
 80055e8:	4650      	mov	r0, sl
 80055ea:	f000 fc91 	bl	8005f10 <__mcmp>
 80055ee:	4602      	mov	r2, r0
 80055f0:	4639      	mov	r1, r7
 80055f2:	4628      	mov	r0, r5
 80055f4:	920c      	str	r2, [sp, #48]	; 0x30
 80055f6:	f000 fa07 	bl	8005a08 <_Bfree>
 80055fa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80055fc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80055fe:	9f08      	ldr	r7, [sp, #32]
 8005600:	ea43 0102 	orr.w	r1, r3, r2
 8005604:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005606:	4319      	orrs	r1, r3
 8005608:	d110      	bne.n	800562c <_dtoa_r+0xa64>
 800560a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800560e:	d029      	beq.n	8005664 <_dtoa_r+0xa9c>
 8005610:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005612:	2b00      	cmp	r3, #0
 8005614:	dd02      	ble.n	800561c <_dtoa_r+0xa54>
 8005616:	9b06      	ldr	r3, [sp, #24]
 8005618:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800561c:	9b04      	ldr	r3, [sp, #16]
 800561e:	f883 9000 	strb.w	r9, [r3]
 8005622:	e777      	b.n	8005514 <_dtoa_r+0x94c>
 8005624:	4630      	mov	r0, r6
 8005626:	e7ba      	b.n	800559e <_dtoa_r+0x9d6>
 8005628:	2201      	movs	r2, #1
 800562a:	e7e1      	b.n	80055f0 <_dtoa_r+0xa28>
 800562c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800562e:	2b00      	cmp	r3, #0
 8005630:	db04      	blt.n	800563c <_dtoa_r+0xa74>
 8005632:	9922      	ldr	r1, [sp, #136]	; 0x88
 8005634:	430b      	orrs	r3, r1
 8005636:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005638:	430b      	orrs	r3, r1
 800563a:	d120      	bne.n	800567e <_dtoa_r+0xab6>
 800563c:	2a00      	cmp	r2, #0
 800563e:	dded      	ble.n	800561c <_dtoa_r+0xa54>
 8005640:	4651      	mov	r1, sl
 8005642:	2201      	movs	r2, #1
 8005644:	4628      	mov	r0, r5
 8005646:	f000 fbf7 	bl	8005e38 <__lshift>
 800564a:	4621      	mov	r1, r4
 800564c:	4682      	mov	sl, r0
 800564e:	f000 fc5f 	bl	8005f10 <__mcmp>
 8005652:	2800      	cmp	r0, #0
 8005654:	dc03      	bgt.n	800565e <_dtoa_r+0xa96>
 8005656:	d1e1      	bne.n	800561c <_dtoa_r+0xa54>
 8005658:	f019 0f01 	tst.w	r9, #1
 800565c:	d0de      	beq.n	800561c <_dtoa_r+0xa54>
 800565e:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005662:	d1d8      	bne.n	8005616 <_dtoa_r+0xa4e>
 8005664:	2339      	movs	r3, #57	; 0x39
 8005666:	9a04      	ldr	r2, [sp, #16]
 8005668:	7013      	strb	r3, [r2, #0]
 800566a:	463b      	mov	r3, r7
 800566c:	461f      	mov	r7, r3
 800566e:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8005672:	3b01      	subs	r3, #1
 8005674:	2a39      	cmp	r2, #57	; 0x39
 8005676:	d06b      	beq.n	8005750 <_dtoa_r+0xb88>
 8005678:	3201      	adds	r2, #1
 800567a:	701a      	strb	r2, [r3, #0]
 800567c:	e74a      	b.n	8005514 <_dtoa_r+0x94c>
 800567e:	2a00      	cmp	r2, #0
 8005680:	dd07      	ble.n	8005692 <_dtoa_r+0xaca>
 8005682:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005686:	d0ed      	beq.n	8005664 <_dtoa_r+0xa9c>
 8005688:	9a04      	ldr	r2, [sp, #16]
 800568a:	f109 0301 	add.w	r3, r9, #1
 800568e:	7013      	strb	r3, [r2, #0]
 8005690:	e740      	b.n	8005514 <_dtoa_r+0x94c>
 8005692:	9b08      	ldr	r3, [sp, #32]
 8005694:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005696:	f803 9c01 	strb.w	r9, [r3, #-1]
 800569a:	4293      	cmp	r3, r2
 800569c:	d042      	beq.n	8005724 <_dtoa_r+0xb5c>
 800569e:	4651      	mov	r1, sl
 80056a0:	2300      	movs	r3, #0
 80056a2:	220a      	movs	r2, #10
 80056a4:	4628      	mov	r0, r5
 80056a6:	f000 f9d1 	bl	8005a4c <__multadd>
 80056aa:	45b0      	cmp	r8, r6
 80056ac:	4682      	mov	sl, r0
 80056ae:	f04f 0300 	mov.w	r3, #0
 80056b2:	f04f 020a 	mov.w	r2, #10
 80056b6:	4641      	mov	r1, r8
 80056b8:	4628      	mov	r0, r5
 80056ba:	d107      	bne.n	80056cc <_dtoa_r+0xb04>
 80056bc:	f000 f9c6 	bl	8005a4c <__multadd>
 80056c0:	4680      	mov	r8, r0
 80056c2:	4606      	mov	r6, r0
 80056c4:	9b08      	ldr	r3, [sp, #32]
 80056c6:	3301      	adds	r3, #1
 80056c8:	9308      	str	r3, [sp, #32]
 80056ca:	e775      	b.n	80055b8 <_dtoa_r+0x9f0>
 80056cc:	f000 f9be 	bl	8005a4c <__multadd>
 80056d0:	4631      	mov	r1, r6
 80056d2:	4680      	mov	r8, r0
 80056d4:	2300      	movs	r3, #0
 80056d6:	220a      	movs	r2, #10
 80056d8:	4628      	mov	r0, r5
 80056da:	f000 f9b7 	bl	8005a4c <__multadd>
 80056de:	4606      	mov	r6, r0
 80056e0:	e7f0      	b.n	80056c4 <_dtoa_r+0xafc>
 80056e2:	9b08      	ldr	r3, [sp, #32]
 80056e4:	9306      	str	r3, [sp, #24]
 80056e6:	9f03      	ldr	r7, [sp, #12]
 80056e8:	4621      	mov	r1, r4
 80056ea:	4650      	mov	r0, sl
 80056ec:	f7ff f9e0 	bl	8004ab0 <quorem>
 80056f0:	9b03      	ldr	r3, [sp, #12]
 80056f2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80056f6:	f807 9b01 	strb.w	r9, [r7], #1
 80056fa:	1afa      	subs	r2, r7, r3
 80056fc:	9b06      	ldr	r3, [sp, #24]
 80056fe:	4293      	cmp	r3, r2
 8005700:	dd07      	ble.n	8005712 <_dtoa_r+0xb4a>
 8005702:	4651      	mov	r1, sl
 8005704:	2300      	movs	r3, #0
 8005706:	220a      	movs	r2, #10
 8005708:	4628      	mov	r0, r5
 800570a:	f000 f99f 	bl	8005a4c <__multadd>
 800570e:	4682      	mov	sl, r0
 8005710:	e7ea      	b.n	80056e8 <_dtoa_r+0xb20>
 8005712:	9b06      	ldr	r3, [sp, #24]
 8005714:	f04f 0800 	mov.w	r8, #0
 8005718:	2b00      	cmp	r3, #0
 800571a:	bfcc      	ite	gt
 800571c:	461f      	movgt	r7, r3
 800571e:	2701      	movle	r7, #1
 8005720:	9b03      	ldr	r3, [sp, #12]
 8005722:	441f      	add	r7, r3
 8005724:	4651      	mov	r1, sl
 8005726:	2201      	movs	r2, #1
 8005728:	4628      	mov	r0, r5
 800572a:	f000 fb85 	bl	8005e38 <__lshift>
 800572e:	4621      	mov	r1, r4
 8005730:	4682      	mov	sl, r0
 8005732:	f000 fbed 	bl	8005f10 <__mcmp>
 8005736:	2800      	cmp	r0, #0
 8005738:	dc97      	bgt.n	800566a <_dtoa_r+0xaa2>
 800573a:	d102      	bne.n	8005742 <_dtoa_r+0xb7a>
 800573c:	f019 0f01 	tst.w	r9, #1
 8005740:	d193      	bne.n	800566a <_dtoa_r+0xaa2>
 8005742:	463b      	mov	r3, r7
 8005744:	461f      	mov	r7, r3
 8005746:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800574a:	2a30      	cmp	r2, #48	; 0x30
 800574c:	d0fa      	beq.n	8005744 <_dtoa_r+0xb7c>
 800574e:	e6e1      	b.n	8005514 <_dtoa_r+0x94c>
 8005750:	9a03      	ldr	r2, [sp, #12]
 8005752:	429a      	cmp	r2, r3
 8005754:	d18a      	bne.n	800566c <_dtoa_r+0xaa4>
 8005756:	2331      	movs	r3, #49	; 0x31
 8005758:	f10b 0b01 	add.w	fp, fp, #1
 800575c:	e797      	b.n	800568e <_dtoa_r+0xac6>
 800575e:	4b0a      	ldr	r3, [pc, #40]	; (8005788 <_dtoa_r+0xbc0>)
 8005760:	f7ff ba9f 	b.w	8004ca2 <_dtoa_r+0xda>
 8005764:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005766:	2b00      	cmp	r3, #0
 8005768:	f47f aa77 	bne.w	8004c5a <_dtoa_r+0x92>
 800576c:	4b07      	ldr	r3, [pc, #28]	; (800578c <_dtoa_r+0xbc4>)
 800576e:	f7ff ba98 	b.w	8004ca2 <_dtoa_r+0xda>
 8005772:	9b06      	ldr	r3, [sp, #24]
 8005774:	2b00      	cmp	r3, #0
 8005776:	dcb6      	bgt.n	80056e6 <_dtoa_r+0xb1e>
 8005778:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800577a:	2b02      	cmp	r3, #2
 800577c:	f73f aeb5 	bgt.w	80054ea <_dtoa_r+0x922>
 8005780:	e7b1      	b.n	80056e6 <_dtoa_r+0xb1e>
 8005782:	bf00      	nop
 8005784:	080093d3 	.word	0x080093d3
 8005788:	0800932e 	.word	0x0800932e
 800578c:	08009357 	.word	0x08009357

08005790 <_free_r>:
 8005790:	b538      	push	{r3, r4, r5, lr}
 8005792:	4605      	mov	r5, r0
 8005794:	2900      	cmp	r1, #0
 8005796:	d040      	beq.n	800581a <_free_r+0x8a>
 8005798:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800579c:	1f0c      	subs	r4, r1, #4
 800579e:	2b00      	cmp	r3, #0
 80057a0:	bfb8      	it	lt
 80057a2:	18e4      	addlt	r4, r4, r3
 80057a4:	f000 f8e4 	bl	8005970 <__malloc_lock>
 80057a8:	4a1c      	ldr	r2, [pc, #112]	; (800581c <_free_r+0x8c>)
 80057aa:	6813      	ldr	r3, [r2, #0]
 80057ac:	b933      	cbnz	r3, 80057bc <_free_r+0x2c>
 80057ae:	6063      	str	r3, [r4, #4]
 80057b0:	6014      	str	r4, [r2, #0]
 80057b2:	4628      	mov	r0, r5
 80057b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80057b8:	f000 b8e0 	b.w	800597c <__malloc_unlock>
 80057bc:	42a3      	cmp	r3, r4
 80057be:	d908      	bls.n	80057d2 <_free_r+0x42>
 80057c0:	6820      	ldr	r0, [r4, #0]
 80057c2:	1821      	adds	r1, r4, r0
 80057c4:	428b      	cmp	r3, r1
 80057c6:	bf01      	itttt	eq
 80057c8:	6819      	ldreq	r1, [r3, #0]
 80057ca:	685b      	ldreq	r3, [r3, #4]
 80057cc:	1809      	addeq	r1, r1, r0
 80057ce:	6021      	streq	r1, [r4, #0]
 80057d0:	e7ed      	b.n	80057ae <_free_r+0x1e>
 80057d2:	461a      	mov	r2, r3
 80057d4:	685b      	ldr	r3, [r3, #4]
 80057d6:	b10b      	cbz	r3, 80057dc <_free_r+0x4c>
 80057d8:	42a3      	cmp	r3, r4
 80057da:	d9fa      	bls.n	80057d2 <_free_r+0x42>
 80057dc:	6811      	ldr	r1, [r2, #0]
 80057de:	1850      	adds	r0, r2, r1
 80057e0:	42a0      	cmp	r0, r4
 80057e2:	d10b      	bne.n	80057fc <_free_r+0x6c>
 80057e4:	6820      	ldr	r0, [r4, #0]
 80057e6:	4401      	add	r1, r0
 80057e8:	1850      	adds	r0, r2, r1
 80057ea:	4283      	cmp	r3, r0
 80057ec:	6011      	str	r1, [r2, #0]
 80057ee:	d1e0      	bne.n	80057b2 <_free_r+0x22>
 80057f0:	6818      	ldr	r0, [r3, #0]
 80057f2:	685b      	ldr	r3, [r3, #4]
 80057f4:	4408      	add	r0, r1
 80057f6:	6010      	str	r0, [r2, #0]
 80057f8:	6053      	str	r3, [r2, #4]
 80057fa:	e7da      	b.n	80057b2 <_free_r+0x22>
 80057fc:	d902      	bls.n	8005804 <_free_r+0x74>
 80057fe:	230c      	movs	r3, #12
 8005800:	602b      	str	r3, [r5, #0]
 8005802:	e7d6      	b.n	80057b2 <_free_r+0x22>
 8005804:	6820      	ldr	r0, [r4, #0]
 8005806:	1821      	adds	r1, r4, r0
 8005808:	428b      	cmp	r3, r1
 800580a:	bf01      	itttt	eq
 800580c:	6819      	ldreq	r1, [r3, #0]
 800580e:	685b      	ldreq	r3, [r3, #4]
 8005810:	1809      	addeq	r1, r1, r0
 8005812:	6021      	streq	r1, [r4, #0]
 8005814:	6063      	str	r3, [r4, #4]
 8005816:	6054      	str	r4, [r2, #4]
 8005818:	e7cb      	b.n	80057b2 <_free_r+0x22>
 800581a:	bd38      	pop	{r3, r4, r5, pc}
 800581c:	20000524 	.word	0x20000524

08005820 <malloc>:
 8005820:	4b02      	ldr	r3, [pc, #8]	; (800582c <malloc+0xc>)
 8005822:	4601      	mov	r1, r0
 8005824:	6818      	ldr	r0, [r3, #0]
 8005826:	f000 b823 	b.w	8005870 <_malloc_r>
 800582a:	bf00      	nop
 800582c:	20000064 	.word	0x20000064

08005830 <sbrk_aligned>:
 8005830:	b570      	push	{r4, r5, r6, lr}
 8005832:	4e0e      	ldr	r6, [pc, #56]	; (800586c <sbrk_aligned+0x3c>)
 8005834:	460c      	mov	r4, r1
 8005836:	6831      	ldr	r1, [r6, #0]
 8005838:	4605      	mov	r5, r0
 800583a:	b911      	cbnz	r1, 8005842 <sbrk_aligned+0x12>
 800583c:	f001 fe0c 	bl	8007458 <_sbrk_r>
 8005840:	6030      	str	r0, [r6, #0]
 8005842:	4621      	mov	r1, r4
 8005844:	4628      	mov	r0, r5
 8005846:	f001 fe07 	bl	8007458 <_sbrk_r>
 800584a:	1c43      	adds	r3, r0, #1
 800584c:	d00a      	beq.n	8005864 <sbrk_aligned+0x34>
 800584e:	1cc4      	adds	r4, r0, #3
 8005850:	f024 0403 	bic.w	r4, r4, #3
 8005854:	42a0      	cmp	r0, r4
 8005856:	d007      	beq.n	8005868 <sbrk_aligned+0x38>
 8005858:	1a21      	subs	r1, r4, r0
 800585a:	4628      	mov	r0, r5
 800585c:	f001 fdfc 	bl	8007458 <_sbrk_r>
 8005860:	3001      	adds	r0, #1
 8005862:	d101      	bne.n	8005868 <sbrk_aligned+0x38>
 8005864:	f04f 34ff 	mov.w	r4, #4294967295
 8005868:	4620      	mov	r0, r4
 800586a:	bd70      	pop	{r4, r5, r6, pc}
 800586c:	20000528 	.word	0x20000528

08005870 <_malloc_r>:
 8005870:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005874:	1ccd      	adds	r5, r1, #3
 8005876:	f025 0503 	bic.w	r5, r5, #3
 800587a:	3508      	adds	r5, #8
 800587c:	2d0c      	cmp	r5, #12
 800587e:	bf38      	it	cc
 8005880:	250c      	movcc	r5, #12
 8005882:	2d00      	cmp	r5, #0
 8005884:	4607      	mov	r7, r0
 8005886:	db01      	blt.n	800588c <_malloc_r+0x1c>
 8005888:	42a9      	cmp	r1, r5
 800588a:	d905      	bls.n	8005898 <_malloc_r+0x28>
 800588c:	230c      	movs	r3, #12
 800588e:	2600      	movs	r6, #0
 8005890:	603b      	str	r3, [r7, #0]
 8005892:	4630      	mov	r0, r6
 8005894:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005898:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800596c <_malloc_r+0xfc>
 800589c:	f000 f868 	bl	8005970 <__malloc_lock>
 80058a0:	f8d8 3000 	ldr.w	r3, [r8]
 80058a4:	461c      	mov	r4, r3
 80058a6:	bb5c      	cbnz	r4, 8005900 <_malloc_r+0x90>
 80058a8:	4629      	mov	r1, r5
 80058aa:	4638      	mov	r0, r7
 80058ac:	f7ff ffc0 	bl	8005830 <sbrk_aligned>
 80058b0:	1c43      	adds	r3, r0, #1
 80058b2:	4604      	mov	r4, r0
 80058b4:	d155      	bne.n	8005962 <_malloc_r+0xf2>
 80058b6:	f8d8 4000 	ldr.w	r4, [r8]
 80058ba:	4626      	mov	r6, r4
 80058bc:	2e00      	cmp	r6, #0
 80058be:	d145      	bne.n	800594c <_malloc_r+0xdc>
 80058c0:	2c00      	cmp	r4, #0
 80058c2:	d048      	beq.n	8005956 <_malloc_r+0xe6>
 80058c4:	6823      	ldr	r3, [r4, #0]
 80058c6:	4631      	mov	r1, r6
 80058c8:	4638      	mov	r0, r7
 80058ca:	eb04 0903 	add.w	r9, r4, r3
 80058ce:	f001 fdc3 	bl	8007458 <_sbrk_r>
 80058d2:	4581      	cmp	r9, r0
 80058d4:	d13f      	bne.n	8005956 <_malloc_r+0xe6>
 80058d6:	6821      	ldr	r1, [r4, #0]
 80058d8:	4638      	mov	r0, r7
 80058da:	1a6d      	subs	r5, r5, r1
 80058dc:	4629      	mov	r1, r5
 80058de:	f7ff ffa7 	bl	8005830 <sbrk_aligned>
 80058e2:	3001      	adds	r0, #1
 80058e4:	d037      	beq.n	8005956 <_malloc_r+0xe6>
 80058e6:	6823      	ldr	r3, [r4, #0]
 80058e8:	442b      	add	r3, r5
 80058ea:	6023      	str	r3, [r4, #0]
 80058ec:	f8d8 3000 	ldr.w	r3, [r8]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d038      	beq.n	8005966 <_malloc_r+0xf6>
 80058f4:	685a      	ldr	r2, [r3, #4]
 80058f6:	42a2      	cmp	r2, r4
 80058f8:	d12b      	bne.n	8005952 <_malloc_r+0xe2>
 80058fa:	2200      	movs	r2, #0
 80058fc:	605a      	str	r2, [r3, #4]
 80058fe:	e00f      	b.n	8005920 <_malloc_r+0xb0>
 8005900:	6822      	ldr	r2, [r4, #0]
 8005902:	1b52      	subs	r2, r2, r5
 8005904:	d41f      	bmi.n	8005946 <_malloc_r+0xd6>
 8005906:	2a0b      	cmp	r2, #11
 8005908:	d917      	bls.n	800593a <_malloc_r+0xca>
 800590a:	1961      	adds	r1, r4, r5
 800590c:	42a3      	cmp	r3, r4
 800590e:	6025      	str	r5, [r4, #0]
 8005910:	bf18      	it	ne
 8005912:	6059      	strne	r1, [r3, #4]
 8005914:	6863      	ldr	r3, [r4, #4]
 8005916:	bf08      	it	eq
 8005918:	f8c8 1000 	streq.w	r1, [r8]
 800591c:	5162      	str	r2, [r4, r5]
 800591e:	604b      	str	r3, [r1, #4]
 8005920:	4638      	mov	r0, r7
 8005922:	f104 060b 	add.w	r6, r4, #11
 8005926:	f000 f829 	bl	800597c <__malloc_unlock>
 800592a:	f026 0607 	bic.w	r6, r6, #7
 800592e:	1d23      	adds	r3, r4, #4
 8005930:	1af2      	subs	r2, r6, r3
 8005932:	d0ae      	beq.n	8005892 <_malloc_r+0x22>
 8005934:	1b9b      	subs	r3, r3, r6
 8005936:	50a3      	str	r3, [r4, r2]
 8005938:	e7ab      	b.n	8005892 <_malloc_r+0x22>
 800593a:	42a3      	cmp	r3, r4
 800593c:	6862      	ldr	r2, [r4, #4]
 800593e:	d1dd      	bne.n	80058fc <_malloc_r+0x8c>
 8005940:	f8c8 2000 	str.w	r2, [r8]
 8005944:	e7ec      	b.n	8005920 <_malloc_r+0xb0>
 8005946:	4623      	mov	r3, r4
 8005948:	6864      	ldr	r4, [r4, #4]
 800594a:	e7ac      	b.n	80058a6 <_malloc_r+0x36>
 800594c:	4634      	mov	r4, r6
 800594e:	6876      	ldr	r6, [r6, #4]
 8005950:	e7b4      	b.n	80058bc <_malloc_r+0x4c>
 8005952:	4613      	mov	r3, r2
 8005954:	e7cc      	b.n	80058f0 <_malloc_r+0x80>
 8005956:	230c      	movs	r3, #12
 8005958:	4638      	mov	r0, r7
 800595a:	603b      	str	r3, [r7, #0]
 800595c:	f000 f80e 	bl	800597c <__malloc_unlock>
 8005960:	e797      	b.n	8005892 <_malloc_r+0x22>
 8005962:	6025      	str	r5, [r4, #0]
 8005964:	e7dc      	b.n	8005920 <_malloc_r+0xb0>
 8005966:	605b      	str	r3, [r3, #4]
 8005968:	deff      	udf	#255	; 0xff
 800596a:	bf00      	nop
 800596c:	20000524 	.word	0x20000524

08005970 <__malloc_lock>:
 8005970:	4801      	ldr	r0, [pc, #4]	; (8005978 <__malloc_lock+0x8>)
 8005972:	f7ff b880 	b.w	8004a76 <__retarget_lock_acquire_recursive>
 8005976:	bf00      	nop
 8005978:	20000520 	.word	0x20000520

0800597c <__malloc_unlock>:
 800597c:	4801      	ldr	r0, [pc, #4]	; (8005984 <__malloc_unlock+0x8>)
 800597e:	f7ff b87b 	b.w	8004a78 <__retarget_lock_release_recursive>
 8005982:	bf00      	nop
 8005984:	20000520 	.word	0x20000520

08005988 <_Balloc>:
 8005988:	b570      	push	{r4, r5, r6, lr}
 800598a:	69c6      	ldr	r6, [r0, #28]
 800598c:	4604      	mov	r4, r0
 800598e:	460d      	mov	r5, r1
 8005990:	b976      	cbnz	r6, 80059b0 <_Balloc+0x28>
 8005992:	2010      	movs	r0, #16
 8005994:	f7ff ff44 	bl	8005820 <malloc>
 8005998:	4602      	mov	r2, r0
 800599a:	61e0      	str	r0, [r4, #28]
 800599c:	b920      	cbnz	r0, 80059a8 <_Balloc+0x20>
 800599e:	216b      	movs	r1, #107	; 0x6b
 80059a0:	4b17      	ldr	r3, [pc, #92]	; (8005a00 <_Balloc+0x78>)
 80059a2:	4818      	ldr	r0, [pc, #96]	; (8005a04 <_Balloc+0x7c>)
 80059a4:	f001 fd7c 	bl	80074a0 <__assert_func>
 80059a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80059ac:	6006      	str	r6, [r0, #0]
 80059ae:	60c6      	str	r6, [r0, #12]
 80059b0:	69e6      	ldr	r6, [r4, #28]
 80059b2:	68f3      	ldr	r3, [r6, #12]
 80059b4:	b183      	cbz	r3, 80059d8 <_Balloc+0x50>
 80059b6:	69e3      	ldr	r3, [r4, #28]
 80059b8:	68db      	ldr	r3, [r3, #12]
 80059ba:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80059be:	b9b8      	cbnz	r0, 80059f0 <_Balloc+0x68>
 80059c0:	2101      	movs	r1, #1
 80059c2:	fa01 f605 	lsl.w	r6, r1, r5
 80059c6:	1d72      	adds	r2, r6, #5
 80059c8:	4620      	mov	r0, r4
 80059ca:	0092      	lsls	r2, r2, #2
 80059cc:	f001 fd86 	bl	80074dc <_calloc_r>
 80059d0:	b160      	cbz	r0, 80059ec <_Balloc+0x64>
 80059d2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80059d6:	e00e      	b.n	80059f6 <_Balloc+0x6e>
 80059d8:	2221      	movs	r2, #33	; 0x21
 80059da:	2104      	movs	r1, #4
 80059dc:	4620      	mov	r0, r4
 80059de:	f001 fd7d 	bl	80074dc <_calloc_r>
 80059e2:	69e3      	ldr	r3, [r4, #28]
 80059e4:	60f0      	str	r0, [r6, #12]
 80059e6:	68db      	ldr	r3, [r3, #12]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d1e4      	bne.n	80059b6 <_Balloc+0x2e>
 80059ec:	2000      	movs	r0, #0
 80059ee:	bd70      	pop	{r4, r5, r6, pc}
 80059f0:	6802      	ldr	r2, [r0, #0]
 80059f2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80059f6:	2300      	movs	r3, #0
 80059f8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80059fc:	e7f7      	b.n	80059ee <_Balloc+0x66>
 80059fe:	bf00      	nop
 8005a00:	08009364 	.word	0x08009364
 8005a04:	080093e4 	.word	0x080093e4

08005a08 <_Bfree>:
 8005a08:	b570      	push	{r4, r5, r6, lr}
 8005a0a:	69c6      	ldr	r6, [r0, #28]
 8005a0c:	4605      	mov	r5, r0
 8005a0e:	460c      	mov	r4, r1
 8005a10:	b976      	cbnz	r6, 8005a30 <_Bfree+0x28>
 8005a12:	2010      	movs	r0, #16
 8005a14:	f7ff ff04 	bl	8005820 <malloc>
 8005a18:	4602      	mov	r2, r0
 8005a1a:	61e8      	str	r0, [r5, #28]
 8005a1c:	b920      	cbnz	r0, 8005a28 <_Bfree+0x20>
 8005a1e:	218f      	movs	r1, #143	; 0x8f
 8005a20:	4b08      	ldr	r3, [pc, #32]	; (8005a44 <_Bfree+0x3c>)
 8005a22:	4809      	ldr	r0, [pc, #36]	; (8005a48 <_Bfree+0x40>)
 8005a24:	f001 fd3c 	bl	80074a0 <__assert_func>
 8005a28:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005a2c:	6006      	str	r6, [r0, #0]
 8005a2e:	60c6      	str	r6, [r0, #12]
 8005a30:	b13c      	cbz	r4, 8005a42 <_Bfree+0x3a>
 8005a32:	69eb      	ldr	r3, [r5, #28]
 8005a34:	6862      	ldr	r2, [r4, #4]
 8005a36:	68db      	ldr	r3, [r3, #12]
 8005a38:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005a3c:	6021      	str	r1, [r4, #0]
 8005a3e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005a42:	bd70      	pop	{r4, r5, r6, pc}
 8005a44:	08009364 	.word	0x08009364
 8005a48:	080093e4 	.word	0x080093e4

08005a4c <__multadd>:
 8005a4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a50:	4607      	mov	r7, r0
 8005a52:	460c      	mov	r4, r1
 8005a54:	461e      	mov	r6, r3
 8005a56:	2000      	movs	r0, #0
 8005a58:	690d      	ldr	r5, [r1, #16]
 8005a5a:	f101 0c14 	add.w	ip, r1, #20
 8005a5e:	f8dc 3000 	ldr.w	r3, [ip]
 8005a62:	3001      	adds	r0, #1
 8005a64:	b299      	uxth	r1, r3
 8005a66:	fb02 6101 	mla	r1, r2, r1, r6
 8005a6a:	0c1e      	lsrs	r6, r3, #16
 8005a6c:	0c0b      	lsrs	r3, r1, #16
 8005a6e:	fb02 3306 	mla	r3, r2, r6, r3
 8005a72:	b289      	uxth	r1, r1
 8005a74:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005a78:	4285      	cmp	r5, r0
 8005a7a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005a7e:	f84c 1b04 	str.w	r1, [ip], #4
 8005a82:	dcec      	bgt.n	8005a5e <__multadd+0x12>
 8005a84:	b30e      	cbz	r6, 8005aca <__multadd+0x7e>
 8005a86:	68a3      	ldr	r3, [r4, #8]
 8005a88:	42ab      	cmp	r3, r5
 8005a8a:	dc19      	bgt.n	8005ac0 <__multadd+0x74>
 8005a8c:	6861      	ldr	r1, [r4, #4]
 8005a8e:	4638      	mov	r0, r7
 8005a90:	3101      	adds	r1, #1
 8005a92:	f7ff ff79 	bl	8005988 <_Balloc>
 8005a96:	4680      	mov	r8, r0
 8005a98:	b928      	cbnz	r0, 8005aa6 <__multadd+0x5a>
 8005a9a:	4602      	mov	r2, r0
 8005a9c:	21ba      	movs	r1, #186	; 0xba
 8005a9e:	4b0c      	ldr	r3, [pc, #48]	; (8005ad0 <__multadd+0x84>)
 8005aa0:	480c      	ldr	r0, [pc, #48]	; (8005ad4 <__multadd+0x88>)
 8005aa2:	f001 fcfd 	bl	80074a0 <__assert_func>
 8005aa6:	6922      	ldr	r2, [r4, #16]
 8005aa8:	f104 010c 	add.w	r1, r4, #12
 8005aac:	3202      	adds	r2, #2
 8005aae:	0092      	lsls	r2, r2, #2
 8005ab0:	300c      	adds	r0, #12
 8005ab2:	f001 fce1 	bl	8007478 <memcpy>
 8005ab6:	4621      	mov	r1, r4
 8005ab8:	4638      	mov	r0, r7
 8005aba:	f7ff ffa5 	bl	8005a08 <_Bfree>
 8005abe:	4644      	mov	r4, r8
 8005ac0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005ac4:	3501      	adds	r5, #1
 8005ac6:	615e      	str	r6, [r3, #20]
 8005ac8:	6125      	str	r5, [r4, #16]
 8005aca:	4620      	mov	r0, r4
 8005acc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ad0:	080093d3 	.word	0x080093d3
 8005ad4:	080093e4 	.word	0x080093e4

08005ad8 <__s2b>:
 8005ad8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005adc:	4615      	mov	r5, r2
 8005ade:	2209      	movs	r2, #9
 8005ae0:	461f      	mov	r7, r3
 8005ae2:	3308      	adds	r3, #8
 8005ae4:	460c      	mov	r4, r1
 8005ae6:	fb93 f3f2 	sdiv	r3, r3, r2
 8005aea:	4606      	mov	r6, r0
 8005aec:	2201      	movs	r2, #1
 8005aee:	2100      	movs	r1, #0
 8005af0:	429a      	cmp	r2, r3
 8005af2:	db09      	blt.n	8005b08 <__s2b+0x30>
 8005af4:	4630      	mov	r0, r6
 8005af6:	f7ff ff47 	bl	8005988 <_Balloc>
 8005afa:	b940      	cbnz	r0, 8005b0e <__s2b+0x36>
 8005afc:	4602      	mov	r2, r0
 8005afe:	21d3      	movs	r1, #211	; 0xd3
 8005b00:	4b18      	ldr	r3, [pc, #96]	; (8005b64 <__s2b+0x8c>)
 8005b02:	4819      	ldr	r0, [pc, #100]	; (8005b68 <__s2b+0x90>)
 8005b04:	f001 fccc 	bl	80074a0 <__assert_func>
 8005b08:	0052      	lsls	r2, r2, #1
 8005b0a:	3101      	adds	r1, #1
 8005b0c:	e7f0      	b.n	8005af0 <__s2b+0x18>
 8005b0e:	9b08      	ldr	r3, [sp, #32]
 8005b10:	2d09      	cmp	r5, #9
 8005b12:	6143      	str	r3, [r0, #20]
 8005b14:	f04f 0301 	mov.w	r3, #1
 8005b18:	6103      	str	r3, [r0, #16]
 8005b1a:	dd16      	ble.n	8005b4a <__s2b+0x72>
 8005b1c:	f104 0909 	add.w	r9, r4, #9
 8005b20:	46c8      	mov	r8, r9
 8005b22:	442c      	add	r4, r5
 8005b24:	f818 3b01 	ldrb.w	r3, [r8], #1
 8005b28:	4601      	mov	r1, r0
 8005b2a:	220a      	movs	r2, #10
 8005b2c:	4630      	mov	r0, r6
 8005b2e:	3b30      	subs	r3, #48	; 0x30
 8005b30:	f7ff ff8c 	bl	8005a4c <__multadd>
 8005b34:	45a0      	cmp	r8, r4
 8005b36:	d1f5      	bne.n	8005b24 <__s2b+0x4c>
 8005b38:	f1a5 0408 	sub.w	r4, r5, #8
 8005b3c:	444c      	add	r4, r9
 8005b3e:	1b2d      	subs	r5, r5, r4
 8005b40:	1963      	adds	r3, r4, r5
 8005b42:	42bb      	cmp	r3, r7
 8005b44:	db04      	blt.n	8005b50 <__s2b+0x78>
 8005b46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005b4a:	2509      	movs	r5, #9
 8005b4c:	340a      	adds	r4, #10
 8005b4e:	e7f6      	b.n	8005b3e <__s2b+0x66>
 8005b50:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005b54:	4601      	mov	r1, r0
 8005b56:	220a      	movs	r2, #10
 8005b58:	4630      	mov	r0, r6
 8005b5a:	3b30      	subs	r3, #48	; 0x30
 8005b5c:	f7ff ff76 	bl	8005a4c <__multadd>
 8005b60:	e7ee      	b.n	8005b40 <__s2b+0x68>
 8005b62:	bf00      	nop
 8005b64:	080093d3 	.word	0x080093d3
 8005b68:	080093e4 	.word	0x080093e4

08005b6c <__hi0bits>:
 8005b6c:	0c02      	lsrs	r2, r0, #16
 8005b6e:	0412      	lsls	r2, r2, #16
 8005b70:	4603      	mov	r3, r0
 8005b72:	b9ca      	cbnz	r2, 8005ba8 <__hi0bits+0x3c>
 8005b74:	0403      	lsls	r3, r0, #16
 8005b76:	2010      	movs	r0, #16
 8005b78:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8005b7c:	bf04      	itt	eq
 8005b7e:	021b      	lsleq	r3, r3, #8
 8005b80:	3008      	addeq	r0, #8
 8005b82:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8005b86:	bf04      	itt	eq
 8005b88:	011b      	lsleq	r3, r3, #4
 8005b8a:	3004      	addeq	r0, #4
 8005b8c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8005b90:	bf04      	itt	eq
 8005b92:	009b      	lsleq	r3, r3, #2
 8005b94:	3002      	addeq	r0, #2
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	db05      	blt.n	8005ba6 <__hi0bits+0x3a>
 8005b9a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8005b9e:	f100 0001 	add.w	r0, r0, #1
 8005ba2:	bf08      	it	eq
 8005ba4:	2020      	moveq	r0, #32
 8005ba6:	4770      	bx	lr
 8005ba8:	2000      	movs	r0, #0
 8005baa:	e7e5      	b.n	8005b78 <__hi0bits+0xc>

08005bac <__lo0bits>:
 8005bac:	6803      	ldr	r3, [r0, #0]
 8005bae:	4602      	mov	r2, r0
 8005bb0:	f013 0007 	ands.w	r0, r3, #7
 8005bb4:	d00b      	beq.n	8005bce <__lo0bits+0x22>
 8005bb6:	07d9      	lsls	r1, r3, #31
 8005bb8:	d421      	bmi.n	8005bfe <__lo0bits+0x52>
 8005bba:	0798      	lsls	r0, r3, #30
 8005bbc:	bf49      	itett	mi
 8005bbe:	085b      	lsrmi	r3, r3, #1
 8005bc0:	089b      	lsrpl	r3, r3, #2
 8005bc2:	2001      	movmi	r0, #1
 8005bc4:	6013      	strmi	r3, [r2, #0]
 8005bc6:	bf5c      	itt	pl
 8005bc8:	2002      	movpl	r0, #2
 8005bca:	6013      	strpl	r3, [r2, #0]
 8005bcc:	4770      	bx	lr
 8005bce:	b299      	uxth	r1, r3
 8005bd0:	b909      	cbnz	r1, 8005bd6 <__lo0bits+0x2a>
 8005bd2:	2010      	movs	r0, #16
 8005bd4:	0c1b      	lsrs	r3, r3, #16
 8005bd6:	b2d9      	uxtb	r1, r3
 8005bd8:	b909      	cbnz	r1, 8005bde <__lo0bits+0x32>
 8005bda:	3008      	adds	r0, #8
 8005bdc:	0a1b      	lsrs	r3, r3, #8
 8005bde:	0719      	lsls	r1, r3, #28
 8005be0:	bf04      	itt	eq
 8005be2:	091b      	lsreq	r3, r3, #4
 8005be4:	3004      	addeq	r0, #4
 8005be6:	0799      	lsls	r1, r3, #30
 8005be8:	bf04      	itt	eq
 8005bea:	089b      	lsreq	r3, r3, #2
 8005bec:	3002      	addeq	r0, #2
 8005bee:	07d9      	lsls	r1, r3, #31
 8005bf0:	d403      	bmi.n	8005bfa <__lo0bits+0x4e>
 8005bf2:	085b      	lsrs	r3, r3, #1
 8005bf4:	f100 0001 	add.w	r0, r0, #1
 8005bf8:	d003      	beq.n	8005c02 <__lo0bits+0x56>
 8005bfa:	6013      	str	r3, [r2, #0]
 8005bfc:	4770      	bx	lr
 8005bfe:	2000      	movs	r0, #0
 8005c00:	4770      	bx	lr
 8005c02:	2020      	movs	r0, #32
 8005c04:	4770      	bx	lr
	...

08005c08 <__i2b>:
 8005c08:	b510      	push	{r4, lr}
 8005c0a:	460c      	mov	r4, r1
 8005c0c:	2101      	movs	r1, #1
 8005c0e:	f7ff febb 	bl	8005988 <_Balloc>
 8005c12:	4602      	mov	r2, r0
 8005c14:	b928      	cbnz	r0, 8005c22 <__i2b+0x1a>
 8005c16:	f240 1145 	movw	r1, #325	; 0x145
 8005c1a:	4b04      	ldr	r3, [pc, #16]	; (8005c2c <__i2b+0x24>)
 8005c1c:	4804      	ldr	r0, [pc, #16]	; (8005c30 <__i2b+0x28>)
 8005c1e:	f001 fc3f 	bl	80074a0 <__assert_func>
 8005c22:	2301      	movs	r3, #1
 8005c24:	6144      	str	r4, [r0, #20]
 8005c26:	6103      	str	r3, [r0, #16]
 8005c28:	bd10      	pop	{r4, pc}
 8005c2a:	bf00      	nop
 8005c2c:	080093d3 	.word	0x080093d3
 8005c30:	080093e4 	.word	0x080093e4

08005c34 <__multiply>:
 8005c34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c38:	4691      	mov	r9, r2
 8005c3a:	690a      	ldr	r2, [r1, #16]
 8005c3c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005c40:	460c      	mov	r4, r1
 8005c42:	429a      	cmp	r2, r3
 8005c44:	bfbe      	ittt	lt
 8005c46:	460b      	movlt	r3, r1
 8005c48:	464c      	movlt	r4, r9
 8005c4a:	4699      	movlt	r9, r3
 8005c4c:	6927      	ldr	r7, [r4, #16]
 8005c4e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005c52:	68a3      	ldr	r3, [r4, #8]
 8005c54:	6861      	ldr	r1, [r4, #4]
 8005c56:	eb07 060a 	add.w	r6, r7, sl
 8005c5a:	42b3      	cmp	r3, r6
 8005c5c:	b085      	sub	sp, #20
 8005c5e:	bfb8      	it	lt
 8005c60:	3101      	addlt	r1, #1
 8005c62:	f7ff fe91 	bl	8005988 <_Balloc>
 8005c66:	b930      	cbnz	r0, 8005c76 <__multiply+0x42>
 8005c68:	4602      	mov	r2, r0
 8005c6a:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8005c6e:	4b43      	ldr	r3, [pc, #268]	; (8005d7c <__multiply+0x148>)
 8005c70:	4843      	ldr	r0, [pc, #268]	; (8005d80 <__multiply+0x14c>)
 8005c72:	f001 fc15 	bl	80074a0 <__assert_func>
 8005c76:	f100 0514 	add.w	r5, r0, #20
 8005c7a:	462b      	mov	r3, r5
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005c82:	4543      	cmp	r3, r8
 8005c84:	d321      	bcc.n	8005cca <__multiply+0x96>
 8005c86:	f104 0314 	add.w	r3, r4, #20
 8005c8a:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8005c8e:	f109 0314 	add.w	r3, r9, #20
 8005c92:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8005c96:	9202      	str	r2, [sp, #8]
 8005c98:	1b3a      	subs	r2, r7, r4
 8005c9a:	3a15      	subs	r2, #21
 8005c9c:	f022 0203 	bic.w	r2, r2, #3
 8005ca0:	3204      	adds	r2, #4
 8005ca2:	f104 0115 	add.w	r1, r4, #21
 8005ca6:	428f      	cmp	r7, r1
 8005ca8:	bf38      	it	cc
 8005caa:	2204      	movcc	r2, #4
 8005cac:	9201      	str	r2, [sp, #4]
 8005cae:	9a02      	ldr	r2, [sp, #8]
 8005cb0:	9303      	str	r3, [sp, #12]
 8005cb2:	429a      	cmp	r2, r3
 8005cb4:	d80c      	bhi.n	8005cd0 <__multiply+0x9c>
 8005cb6:	2e00      	cmp	r6, #0
 8005cb8:	dd03      	ble.n	8005cc2 <__multiply+0x8e>
 8005cba:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d05a      	beq.n	8005d78 <__multiply+0x144>
 8005cc2:	6106      	str	r6, [r0, #16]
 8005cc4:	b005      	add	sp, #20
 8005cc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005cca:	f843 2b04 	str.w	r2, [r3], #4
 8005cce:	e7d8      	b.n	8005c82 <__multiply+0x4e>
 8005cd0:	f8b3 a000 	ldrh.w	sl, [r3]
 8005cd4:	f1ba 0f00 	cmp.w	sl, #0
 8005cd8:	d023      	beq.n	8005d22 <__multiply+0xee>
 8005cda:	46a9      	mov	r9, r5
 8005cdc:	f04f 0c00 	mov.w	ip, #0
 8005ce0:	f104 0e14 	add.w	lr, r4, #20
 8005ce4:	f85e 2b04 	ldr.w	r2, [lr], #4
 8005ce8:	f8d9 1000 	ldr.w	r1, [r9]
 8005cec:	fa1f fb82 	uxth.w	fp, r2
 8005cf0:	b289      	uxth	r1, r1
 8005cf2:	fb0a 110b 	mla	r1, sl, fp, r1
 8005cf6:	4461      	add	r1, ip
 8005cf8:	f8d9 c000 	ldr.w	ip, [r9]
 8005cfc:	0c12      	lsrs	r2, r2, #16
 8005cfe:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8005d02:	fb0a c202 	mla	r2, sl, r2, ip
 8005d06:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005d0a:	b289      	uxth	r1, r1
 8005d0c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005d10:	4577      	cmp	r7, lr
 8005d12:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005d16:	f849 1b04 	str.w	r1, [r9], #4
 8005d1a:	d8e3      	bhi.n	8005ce4 <__multiply+0xb0>
 8005d1c:	9a01      	ldr	r2, [sp, #4]
 8005d1e:	f845 c002 	str.w	ip, [r5, r2]
 8005d22:	9a03      	ldr	r2, [sp, #12]
 8005d24:	3304      	adds	r3, #4
 8005d26:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005d2a:	f1b9 0f00 	cmp.w	r9, #0
 8005d2e:	d021      	beq.n	8005d74 <__multiply+0x140>
 8005d30:	46ae      	mov	lr, r5
 8005d32:	f04f 0a00 	mov.w	sl, #0
 8005d36:	6829      	ldr	r1, [r5, #0]
 8005d38:	f104 0c14 	add.w	ip, r4, #20
 8005d3c:	f8bc b000 	ldrh.w	fp, [ip]
 8005d40:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8005d44:	b289      	uxth	r1, r1
 8005d46:	fb09 220b 	mla	r2, r9, fp, r2
 8005d4a:	4452      	add	r2, sl
 8005d4c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005d50:	f84e 1b04 	str.w	r1, [lr], #4
 8005d54:	f85c 1b04 	ldr.w	r1, [ip], #4
 8005d58:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005d5c:	f8be 1000 	ldrh.w	r1, [lr]
 8005d60:	4567      	cmp	r7, ip
 8005d62:	fb09 110a 	mla	r1, r9, sl, r1
 8005d66:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8005d6a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005d6e:	d8e5      	bhi.n	8005d3c <__multiply+0x108>
 8005d70:	9a01      	ldr	r2, [sp, #4]
 8005d72:	50a9      	str	r1, [r5, r2]
 8005d74:	3504      	adds	r5, #4
 8005d76:	e79a      	b.n	8005cae <__multiply+0x7a>
 8005d78:	3e01      	subs	r6, #1
 8005d7a:	e79c      	b.n	8005cb6 <__multiply+0x82>
 8005d7c:	080093d3 	.word	0x080093d3
 8005d80:	080093e4 	.word	0x080093e4

08005d84 <__pow5mult>:
 8005d84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005d88:	4615      	mov	r5, r2
 8005d8a:	f012 0203 	ands.w	r2, r2, #3
 8005d8e:	4606      	mov	r6, r0
 8005d90:	460f      	mov	r7, r1
 8005d92:	d007      	beq.n	8005da4 <__pow5mult+0x20>
 8005d94:	4c25      	ldr	r4, [pc, #148]	; (8005e2c <__pow5mult+0xa8>)
 8005d96:	3a01      	subs	r2, #1
 8005d98:	2300      	movs	r3, #0
 8005d9a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005d9e:	f7ff fe55 	bl	8005a4c <__multadd>
 8005da2:	4607      	mov	r7, r0
 8005da4:	10ad      	asrs	r5, r5, #2
 8005da6:	d03d      	beq.n	8005e24 <__pow5mult+0xa0>
 8005da8:	69f4      	ldr	r4, [r6, #28]
 8005daa:	b97c      	cbnz	r4, 8005dcc <__pow5mult+0x48>
 8005dac:	2010      	movs	r0, #16
 8005dae:	f7ff fd37 	bl	8005820 <malloc>
 8005db2:	4602      	mov	r2, r0
 8005db4:	61f0      	str	r0, [r6, #28]
 8005db6:	b928      	cbnz	r0, 8005dc4 <__pow5mult+0x40>
 8005db8:	f240 11b3 	movw	r1, #435	; 0x1b3
 8005dbc:	4b1c      	ldr	r3, [pc, #112]	; (8005e30 <__pow5mult+0xac>)
 8005dbe:	481d      	ldr	r0, [pc, #116]	; (8005e34 <__pow5mult+0xb0>)
 8005dc0:	f001 fb6e 	bl	80074a0 <__assert_func>
 8005dc4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005dc8:	6004      	str	r4, [r0, #0]
 8005dca:	60c4      	str	r4, [r0, #12]
 8005dcc:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8005dd0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005dd4:	b94c      	cbnz	r4, 8005dea <__pow5mult+0x66>
 8005dd6:	f240 2171 	movw	r1, #625	; 0x271
 8005dda:	4630      	mov	r0, r6
 8005ddc:	f7ff ff14 	bl	8005c08 <__i2b>
 8005de0:	2300      	movs	r3, #0
 8005de2:	4604      	mov	r4, r0
 8005de4:	f8c8 0008 	str.w	r0, [r8, #8]
 8005de8:	6003      	str	r3, [r0, #0]
 8005dea:	f04f 0900 	mov.w	r9, #0
 8005dee:	07eb      	lsls	r3, r5, #31
 8005df0:	d50a      	bpl.n	8005e08 <__pow5mult+0x84>
 8005df2:	4639      	mov	r1, r7
 8005df4:	4622      	mov	r2, r4
 8005df6:	4630      	mov	r0, r6
 8005df8:	f7ff ff1c 	bl	8005c34 <__multiply>
 8005dfc:	4680      	mov	r8, r0
 8005dfe:	4639      	mov	r1, r7
 8005e00:	4630      	mov	r0, r6
 8005e02:	f7ff fe01 	bl	8005a08 <_Bfree>
 8005e06:	4647      	mov	r7, r8
 8005e08:	106d      	asrs	r5, r5, #1
 8005e0a:	d00b      	beq.n	8005e24 <__pow5mult+0xa0>
 8005e0c:	6820      	ldr	r0, [r4, #0]
 8005e0e:	b938      	cbnz	r0, 8005e20 <__pow5mult+0x9c>
 8005e10:	4622      	mov	r2, r4
 8005e12:	4621      	mov	r1, r4
 8005e14:	4630      	mov	r0, r6
 8005e16:	f7ff ff0d 	bl	8005c34 <__multiply>
 8005e1a:	6020      	str	r0, [r4, #0]
 8005e1c:	f8c0 9000 	str.w	r9, [r0]
 8005e20:	4604      	mov	r4, r0
 8005e22:	e7e4      	b.n	8005dee <__pow5mult+0x6a>
 8005e24:	4638      	mov	r0, r7
 8005e26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e2a:	bf00      	nop
 8005e2c:	08009530 	.word	0x08009530
 8005e30:	08009364 	.word	0x08009364
 8005e34:	080093e4 	.word	0x080093e4

08005e38 <__lshift>:
 8005e38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e3c:	460c      	mov	r4, r1
 8005e3e:	4607      	mov	r7, r0
 8005e40:	4691      	mov	r9, r2
 8005e42:	6923      	ldr	r3, [r4, #16]
 8005e44:	6849      	ldr	r1, [r1, #4]
 8005e46:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005e4a:	68a3      	ldr	r3, [r4, #8]
 8005e4c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005e50:	f108 0601 	add.w	r6, r8, #1
 8005e54:	42b3      	cmp	r3, r6
 8005e56:	db0b      	blt.n	8005e70 <__lshift+0x38>
 8005e58:	4638      	mov	r0, r7
 8005e5a:	f7ff fd95 	bl	8005988 <_Balloc>
 8005e5e:	4605      	mov	r5, r0
 8005e60:	b948      	cbnz	r0, 8005e76 <__lshift+0x3e>
 8005e62:	4602      	mov	r2, r0
 8005e64:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8005e68:	4b27      	ldr	r3, [pc, #156]	; (8005f08 <__lshift+0xd0>)
 8005e6a:	4828      	ldr	r0, [pc, #160]	; (8005f0c <__lshift+0xd4>)
 8005e6c:	f001 fb18 	bl	80074a0 <__assert_func>
 8005e70:	3101      	adds	r1, #1
 8005e72:	005b      	lsls	r3, r3, #1
 8005e74:	e7ee      	b.n	8005e54 <__lshift+0x1c>
 8005e76:	2300      	movs	r3, #0
 8005e78:	f100 0114 	add.w	r1, r0, #20
 8005e7c:	f100 0210 	add.w	r2, r0, #16
 8005e80:	4618      	mov	r0, r3
 8005e82:	4553      	cmp	r3, sl
 8005e84:	db33      	blt.n	8005eee <__lshift+0xb6>
 8005e86:	6920      	ldr	r0, [r4, #16]
 8005e88:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005e8c:	f104 0314 	add.w	r3, r4, #20
 8005e90:	f019 091f 	ands.w	r9, r9, #31
 8005e94:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005e98:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005e9c:	d02b      	beq.n	8005ef6 <__lshift+0xbe>
 8005e9e:	468a      	mov	sl, r1
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	f1c9 0e20 	rsb	lr, r9, #32
 8005ea6:	6818      	ldr	r0, [r3, #0]
 8005ea8:	fa00 f009 	lsl.w	r0, r0, r9
 8005eac:	4310      	orrs	r0, r2
 8005eae:	f84a 0b04 	str.w	r0, [sl], #4
 8005eb2:	f853 2b04 	ldr.w	r2, [r3], #4
 8005eb6:	459c      	cmp	ip, r3
 8005eb8:	fa22 f20e 	lsr.w	r2, r2, lr
 8005ebc:	d8f3      	bhi.n	8005ea6 <__lshift+0x6e>
 8005ebe:	ebac 0304 	sub.w	r3, ip, r4
 8005ec2:	3b15      	subs	r3, #21
 8005ec4:	f023 0303 	bic.w	r3, r3, #3
 8005ec8:	3304      	adds	r3, #4
 8005eca:	f104 0015 	add.w	r0, r4, #21
 8005ece:	4584      	cmp	ip, r0
 8005ed0:	bf38      	it	cc
 8005ed2:	2304      	movcc	r3, #4
 8005ed4:	50ca      	str	r2, [r1, r3]
 8005ed6:	b10a      	cbz	r2, 8005edc <__lshift+0xa4>
 8005ed8:	f108 0602 	add.w	r6, r8, #2
 8005edc:	3e01      	subs	r6, #1
 8005ede:	4638      	mov	r0, r7
 8005ee0:	4621      	mov	r1, r4
 8005ee2:	612e      	str	r6, [r5, #16]
 8005ee4:	f7ff fd90 	bl	8005a08 <_Bfree>
 8005ee8:	4628      	mov	r0, r5
 8005eea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005eee:	f842 0f04 	str.w	r0, [r2, #4]!
 8005ef2:	3301      	adds	r3, #1
 8005ef4:	e7c5      	b.n	8005e82 <__lshift+0x4a>
 8005ef6:	3904      	subs	r1, #4
 8005ef8:	f853 2b04 	ldr.w	r2, [r3], #4
 8005efc:	459c      	cmp	ip, r3
 8005efe:	f841 2f04 	str.w	r2, [r1, #4]!
 8005f02:	d8f9      	bhi.n	8005ef8 <__lshift+0xc0>
 8005f04:	e7ea      	b.n	8005edc <__lshift+0xa4>
 8005f06:	bf00      	nop
 8005f08:	080093d3 	.word	0x080093d3
 8005f0c:	080093e4 	.word	0x080093e4

08005f10 <__mcmp>:
 8005f10:	4603      	mov	r3, r0
 8005f12:	690a      	ldr	r2, [r1, #16]
 8005f14:	6900      	ldr	r0, [r0, #16]
 8005f16:	b530      	push	{r4, r5, lr}
 8005f18:	1a80      	subs	r0, r0, r2
 8005f1a:	d10d      	bne.n	8005f38 <__mcmp+0x28>
 8005f1c:	3314      	adds	r3, #20
 8005f1e:	3114      	adds	r1, #20
 8005f20:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005f24:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005f28:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005f2c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005f30:	4295      	cmp	r5, r2
 8005f32:	d002      	beq.n	8005f3a <__mcmp+0x2a>
 8005f34:	d304      	bcc.n	8005f40 <__mcmp+0x30>
 8005f36:	2001      	movs	r0, #1
 8005f38:	bd30      	pop	{r4, r5, pc}
 8005f3a:	42a3      	cmp	r3, r4
 8005f3c:	d3f4      	bcc.n	8005f28 <__mcmp+0x18>
 8005f3e:	e7fb      	b.n	8005f38 <__mcmp+0x28>
 8005f40:	f04f 30ff 	mov.w	r0, #4294967295
 8005f44:	e7f8      	b.n	8005f38 <__mcmp+0x28>
	...

08005f48 <__mdiff>:
 8005f48:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f4c:	460d      	mov	r5, r1
 8005f4e:	4607      	mov	r7, r0
 8005f50:	4611      	mov	r1, r2
 8005f52:	4628      	mov	r0, r5
 8005f54:	4614      	mov	r4, r2
 8005f56:	f7ff ffdb 	bl	8005f10 <__mcmp>
 8005f5a:	1e06      	subs	r6, r0, #0
 8005f5c:	d111      	bne.n	8005f82 <__mdiff+0x3a>
 8005f5e:	4631      	mov	r1, r6
 8005f60:	4638      	mov	r0, r7
 8005f62:	f7ff fd11 	bl	8005988 <_Balloc>
 8005f66:	4602      	mov	r2, r0
 8005f68:	b928      	cbnz	r0, 8005f76 <__mdiff+0x2e>
 8005f6a:	f240 2137 	movw	r1, #567	; 0x237
 8005f6e:	4b3a      	ldr	r3, [pc, #232]	; (8006058 <__mdiff+0x110>)
 8005f70:	483a      	ldr	r0, [pc, #232]	; (800605c <__mdiff+0x114>)
 8005f72:	f001 fa95 	bl	80074a0 <__assert_func>
 8005f76:	2301      	movs	r3, #1
 8005f78:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8005f7c:	4610      	mov	r0, r2
 8005f7e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f82:	bfa4      	itt	ge
 8005f84:	4623      	movge	r3, r4
 8005f86:	462c      	movge	r4, r5
 8005f88:	4638      	mov	r0, r7
 8005f8a:	6861      	ldr	r1, [r4, #4]
 8005f8c:	bfa6      	itte	ge
 8005f8e:	461d      	movge	r5, r3
 8005f90:	2600      	movge	r6, #0
 8005f92:	2601      	movlt	r6, #1
 8005f94:	f7ff fcf8 	bl	8005988 <_Balloc>
 8005f98:	4602      	mov	r2, r0
 8005f9a:	b918      	cbnz	r0, 8005fa4 <__mdiff+0x5c>
 8005f9c:	f240 2145 	movw	r1, #581	; 0x245
 8005fa0:	4b2d      	ldr	r3, [pc, #180]	; (8006058 <__mdiff+0x110>)
 8005fa2:	e7e5      	b.n	8005f70 <__mdiff+0x28>
 8005fa4:	f102 0814 	add.w	r8, r2, #20
 8005fa8:	46c2      	mov	sl, r8
 8005faa:	f04f 0c00 	mov.w	ip, #0
 8005fae:	6927      	ldr	r7, [r4, #16]
 8005fb0:	60c6      	str	r6, [r0, #12]
 8005fb2:	692e      	ldr	r6, [r5, #16]
 8005fb4:	f104 0014 	add.w	r0, r4, #20
 8005fb8:	f105 0914 	add.w	r9, r5, #20
 8005fbc:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8005fc0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8005fc4:	3410      	adds	r4, #16
 8005fc6:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8005fca:	f859 3b04 	ldr.w	r3, [r9], #4
 8005fce:	fa1f f18b 	uxth.w	r1, fp
 8005fd2:	4461      	add	r1, ip
 8005fd4:	fa1f fc83 	uxth.w	ip, r3
 8005fd8:	0c1b      	lsrs	r3, r3, #16
 8005fda:	eba1 010c 	sub.w	r1, r1, ip
 8005fde:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8005fe2:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8005fe6:	b289      	uxth	r1, r1
 8005fe8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8005fec:	454e      	cmp	r6, r9
 8005fee:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8005ff2:	f84a 1b04 	str.w	r1, [sl], #4
 8005ff6:	d8e6      	bhi.n	8005fc6 <__mdiff+0x7e>
 8005ff8:	1b73      	subs	r3, r6, r5
 8005ffa:	3b15      	subs	r3, #21
 8005ffc:	f023 0303 	bic.w	r3, r3, #3
 8006000:	3515      	adds	r5, #21
 8006002:	3304      	adds	r3, #4
 8006004:	42ae      	cmp	r6, r5
 8006006:	bf38      	it	cc
 8006008:	2304      	movcc	r3, #4
 800600a:	4418      	add	r0, r3
 800600c:	4443      	add	r3, r8
 800600e:	461e      	mov	r6, r3
 8006010:	4605      	mov	r5, r0
 8006012:	4575      	cmp	r5, lr
 8006014:	d30e      	bcc.n	8006034 <__mdiff+0xec>
 8006016:	f10e 0103 	add.w	r1, lr, #3
 800601a:	1a09      	subs	r1, r1, r0
 800601c:	f021 0103 	bic.w	r1, r1, #3
 8006020:	3803      	subs	r0, #3
 8006022:	4586      	cmp	lr, r0
 8006024:	bf38      	it	cc
 8006026:	2100      	movcc	r1, #0
 8006028:	440b      	add	r3, r1
 800602a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800602e:	b189      	cbz	r1, 8006054 <__mdiff+0x10c>
 8006030:	6117      	str	r7, [r2, #16]
 8006032:	e7a3      	b.n	8005f7c <__mdiff+0x34>
 8006034:	f855 8b04 	ldr.w	r8, [r5], #4
 8006038:	fa1f f188 	uxth.w	r1, r8
 800603c:	4461      	add	r1, ip
 800603e:	140c      	asrs	r4, r1, #16
 8006040:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006044:	b289      	uxth	r1, r1
 8006046:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800604a:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800604e:	f846 1b04 	str.w	r1, [r6], #4
 8006052:	e7de      	b.n	8006012 <__mdiff+0xca>
 8006054:	3f01      	subs	r7, #1
 8006056:	e7e8      	b.n	800602a <__mdiff+0xe2>
 8006058:	080093d3 	.word	0x080093d3
 800605c:	080093e4 	.word	0x080093e4

08006060 <__ulp>:
 8006060:	4b0e      	ldr	r3, [pc, #56]	; (800609c <__ulp+0x3c>)
 8006062:	400b      	ands	r3, r1
 8006064:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8006068:	2b00      	cmp	r3, #0
 800606a:	dc08      	bgt.n	800607e <__ulp+0x1e>
 800606c:	425b      	negs	r3, r3
 800606e:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8006072:	ea4f 5223 	mov.w	r2, r3, asr #20
 8006076:	da04      	bge.n	8006082 <__ulp+0x22>
 8006078:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800607c:	4113      	asrs	r3, r2
 800607e:	2200      	movs	r2, #0
 8006080:	e008      	b.n	8006094 <__ulp+0x34>
 8006082:	f1a2 0314 	sub.w	r3, r2, #20
 8006086:	2b1e      	cmp	r3, #30
 8006088:	bfd6      	itet	le
 800608a:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800608e:	2201      	movgt	r2, #1
 8006090:	40da      	lsrle	r2, r3
 8006092:	2300      	movs	r3, #0
 8006094:	4619      	mov	r1, r3
 8006096:	4610      	mov	r0, r2
 8006098:	4770      	bx	lr
 800609a:	bf00      	nop
 800609c:	7ff00000 	.word	0x7ff00000

080060a0 <__b2d>:
 80060a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060a2:	6905      	ldr	r5, [r0, #16]
 80060a4:	f100 0714 	add.w	r7, r0, #20
 80060a8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80060ac:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80060b0:	1f2e      	subs	r6, r5, #4
 80060b2:	4620      	mov	r0, r4
 80060b4:	f7ff fd5a 	bl	8005b6c <__hi0bits>
 80060b8:	f1c0 0220 	rsb	r2, r0, #32
 80060bc:	280a      	cmp	r0, #10
 80060be:	4603      	mov	r3, r0
 80060c0:	f8df c068 	ldr.w	ip, [pc, #104]	; 800612c <__b2d+0x8c>
 80060c4:	600a      	str	r2, [r1, #0]
 80060c6:	dc12      	bgt.n	80060ee <__b2d+0x4e>
 80060c8:	f1c0 0e0b 	rsb	lr, r0, #11
 80060cc:	fa24 f20e 	lsr.w	r2, r4, lr
 80060d0:	42b7      	cmp	r7, r6
 80060d2:	ea42 010c 	orr.w	r1, r2, ip
 80060d6:	bf2c      	ite	cs
 80060d8:	2200      	movcs	r2, #0
 80060da:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 80060de:	3315      	adds	r3, #21
 80060e0:	fa04 f303 	lsl.w	r3, r4, r3
 80060e4:	fa22 f20e 	lsr.w	r2, r2, lr
 80060e8:	431a      	orrs	r2, r3
 80060ea:	4610      	mov	r0, r2
 80060ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80060ee:	42b7      	cmp	r7, r6
 80060f0:	bf2e      	itee	cs
 80060f2:	2200      	movcs	r2, #0
 80060f4:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 80060f8:	f1a5 0608 	subcc.w	r6, r5, #8
 80060fc:	3b0b      	subs	r3, #11
 80060fe:	d012      	beq.n	8006126 <__b2d+0x86>
 8006100:	f1c3 0520 	rsb	r5, r3, #32
 8006104:	fa22 f105 	lsr.w	r1, r2, r5
 8006108:	409c      	lsls	r4, r3
 800610a:	430c      	orrs	r4, r1
 800610c:	42be      	cmp	r6, r7
 800610e:	f044 517f 	orr.w	r1, r4, #1069547520	; 0x3fc00000
 8006112:	bf94      	ite	ls
 8006114:	2400      	movls	r4, #0
 8006116:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800611a:	409a      	lsls	r2, r3
 800611c:	40ec      	lsrs	r4, r5
 800611e:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8006122:	4322      	orrs	r2, r4
 8006124:	e7e1      	b.n	80060ea <__b2d+0x4a>
 8006126:	ea44 010c 	orr.w	r1, r4, ip
 800612a:	e7de      	b.n	80060ea <__b2d+0x4a>
 800612c:	3ff00000 	.word	0x3ff00000

08006130 <__d2b>:
 8006130:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006132:	2101      	movs	r1, #1
 8006134:	4617      	mov	r7, r2
 8006136:	461c      	mov	r4, r3
 8006138:	9e08      	ldr	r6, [sp, #32]
 800613a:	f7ff fc25 	bl	8005988 <_Balloc>
 800613e:	4605      	mov	r5, r0
 8006140:	b930      	cbnz	r0, 8006150 <__d2b+0x20>
 8006142:	4602      	mov	r2, r0
 8006144:	f240 310f 	movw	r1, #783	; 0x30f
 8006148:	4b22      	ldr	r3, [pc, #136]	; (80061d4 <__d2b+0xa4>)
 800614a:	4823      	ldr	r0, [pc, #140]	; (80061d8 <__d2b+0xa8>)
 800614c:	f001 f9a8 	bl	80074a0 <__assert_func>
 8006150:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8006154:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8006158:	bb24      	cbnz	r4, 80061a4 <__d2b+0x74>
 800615a:	2f00      	cmp	r7, #0
 800615c:	9301      	str	r3, [sp, #4]
 800615e:	d026      	beq.n	80061ae <__d2b+0x7e>
 8006160:	4668      	mov	r0, sp
 8006162:	9700      	str	r7, [sp, #0]
 8006164:	f7ff fd22 	bl	8005bac <__lo0bits>
 8006168:	e9dd 1200 	ldrd	r1, r2, [sp]
 800616c:	b1e8      	cbz	r0, 80061aa <__d2b+0x7a>
 800616e:	f1c0 0320 	rsb	r3, r0, #32
 8006172:	fa02 f303 	lsl.w	r3, r2, r3
 8006176:	430b      	orrs	r3, r1
 8006178:	40c2      	lsrs	r2, r0
 800617a:	616b      	str	r3, [r5, #20]
 800617c:	9201      	str	r2, [sp, #4]
 800617e:	9b01      	ldr	r3, [sp, #4]
 8006180:	2b00      	cmp	r3, #0
 8006182:	bf14      	ite	ne
 8006184:	2102      	movne	r1, #2
 8006186:	2101      	moveq	r1, #1
 8006188:	61ab      	str	r3, [r5, #24]
 800618a:	6129      	str	r1, [r5, #16]
 800618c:	b1bc      	cbz	r4, 80061be <__d2b+0x8e>
 800618e:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8006192:	4404      	add	r4, r0
 8006194:	6034      	str	r4, [r6, #0]
 8006196:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800619a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800619c:	6018      	str	r0, [r3, #0]
 800619e:	4628      	mov	r0, r5
 80061a0:	b003      	add	sp, #12
 80061a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80061a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80061a8:	e7d7      	b.n	800615a <__d2b+0x2a>
 80061aa:	6169      	str	r1, [r5, #20]
 80061ac:	e7e7      	b.n	800617e <__d2b+0x4e>
 80061ae:	a801      	add	r0, sp, #4
 80061b0:	f7ff fcfc 	bl	8005bac <__lo0bits>
 80061b4:	9b01      	ldr	r3, [sp, #4]
 80061b6:	2101      	movs	r1, #1
 80061b8:	616b      	str	r3, [r5, #20]
 80061ba:	3020      	adds	r0, #32
 80061bc:	e7e5      	b.n	800618a <__d2b+0x5a>
 80061be:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80061c2:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 80061c6:	6030      	str	r0, [r6, #0]
 80061c8:	6918      	ldr	r0, [r3, #16]
 80061ca:	f7ff fccf 	bl	8005b6c <__hi0bits>
 80061ce:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80061d2:	e7e2      	b.n	800619a <__d2b+0x6a>
 80061d4:	080093d3 	.word	0x080093d3
 80061d8:	080093e4 	.word	0x080093e4

080061dc <__ratio>:
 80061dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061e0:	4688      	mov	r8, r1
 80061e2:	4669      	mov	r1, sp
 80061e4:	4681      	mov	r9, r0
 80061e6:	f7ff ff5b 	bl	80060a0 <__b2d>
 80061ea:	460f      	mov	r7, r1
 80061ec:	4604      	mov	r4, r0
 80061ee:	460d      	mov	r5, r1
 80061f0:	4640      	mov	r0, r8
 80061f2:	a901      	add	r1, sp, #4
 80061f4:	f7ff ff54 	bl	80060a0 <__b2d>
 80061f8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80061fc:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8006200:	468b      	mov	fp, r1
 8006202:	eba3 0c02 	sub.w	ip, r3, r2
 8006206:	e9dd 3200 	ldrd	r3, r2, [sp]
 800620a:	1a9b      	subs	r3, r3, r2
 800620c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8006210:	2b00      	cmp	r3, #0
 8006212:	bfd5      	itete	le
 8006214:	460a      	movle	r2, r1
 8006216:	462a      	movgt	r2, r5
 8006218:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800621c:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8006220:	bfd8      	it	le
 8006222:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8006226:	465b      	mov	r3, fp
 8006228:	4602      	mov	r2, r0
 800622a:	4639      	mov	r1, r7
 800622c:	4620      	mov	r0, r4
 800622e:	f7fa fb31 	bl	8000894 <__aeabi_ddiv>
 8006232:	b003      	add	sp, #12
 8006234:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006238 <__copybits>:
 8006238:	3901      	subs	r1, #1
 800623a:	b570      	push	{r4, r5, r6, lr}
 800623c:	1149      	asrs	r1, r1, #5
 800623e:	6914      	ldr	r4, [r2, #16]
 8006240:	3101      	adds	r1, #1
 8006242:	f102 0314 	add.w	r3, r2, #20
 8006246:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800624a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800624e:	1f05      	subs	r5, r0, #4
 8006250:	42a3      	cmp	r3, r4
 8006252:	d30c      	bcc.n	800626e <__copybits+0x36>
 8006254:	1aa3      	subs	r3, r4, r2
 8006256:	3b11      	subs	r3, #17
 8006258:	f023 0303 	bic.w	r3, r3, #3
 800625c:	3211      	adds	r2, #17
 800625e:	42a2      	cmp	r2, r4
 8006260:	bf88      	it	hi
 8006262:	2300      	movhi	r3, #0
 8006264:	4418      	add	r0, r3
 8006266:	2300      	movs	r3, #0
 8006268:	4288      	cmp	r0, r1
 800626a:	d305      	bcc.n	8006278 <__copybits+0x40>
 800626c:	bd70      	pop	{r4, r5, r6, pc}
 800626e:	f853 6b04 	ldr.w	r6, [r3], #4
 8006272:	f845 6f04 	str.w	r6, [r5, #4]!
 8006276:	e7eb      	b.n	8006250 <__copybits+0x18>
 8006278:	f840 3b04 	str.w	r3, [r0], #4
 800627c:	e7f4      	b.n	8006268 <__copybits+0x30>

0800627e <__any_on>:
 800627e:	f100 0214 	add.w	r2, r0, #20
 8006282:	6900      	ldr	r0, [r0, #16]
 8006284:	114b      	asrs	r3, r1, #5
 8006286:	4298      	cmp	r0, r3
 8006288:	b510      	push	{r4, lr}
 800628a:	db11      	blt.n	80062b0 <__any_on+0x32>
 800628c:	dd0a      	ble.n	80062a4 <__any_on+0x26>
 800628e:	f011 011f 	ands.w	r1, r1, #31
 8006292:	d007      	beq.n	80062a4 <__any_on+0x26>
 8006294:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8006298:	fa24 f001 	lsr.w	r0, r4, r1
 800629c:	fa00 f101 	lsl.w	r1, r0, r1
 80062a0:	428c      	cmp	r4, r1
 80062a2:	d10b      	bne.n	80062bc <__any_on+0x3e>
 80062a4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80062a8:	4293      	cmp	r3, r2
 80062aa:	d803      	bhi.n	80062b4 <__any_on+0x36>
 80062ac:	2000      	movs	r0, #0
 80062ae:	bd10      	pop	{r4, pc}
 80062b0:	4603      	mov	r3, r0
 80062b2:	e7f7      	b.n	80062a4 <__any_on+0x26>
 80062b4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80062b8:	2900      	cmp	r1, #0
 80062ba:	d0f5      	beq.n	80062a8 <__any_on+0x2a>
 80062bc:	2001      	movs	r0, #1
 80062be:	e7f6      	b.n	80062ae <__any_on+0x30>

080062c0 <sulp>:
 80062c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80062c4:	460f      	mov	r7, r1
 80062c6:	4690      	mov	r8, r2
 80062c8:	f7ff feca 	bl	8006060 <__ulp>
 80062cc:	4604      	mov	r4, r0
 80062ce:	460d      	mov	r5, r1
 80062d0:	f1b8 0f00 	cmp.w	r8, #0
 80062d4:	d011      	beq.n	80062fa <sulp+0x3a>
 80062d6:	f3c7 530a 	ubfx	r3, r7, #20, #11
 80062da:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80062de:	2b00      	cmp	r3, #0
 80062e0:	dd0b      	ble.n	80062fa <sulp+0x3a>
 80062e2:	2400      	movs	r4, #0
 80062e4:	051b      	lsls	r3, r3, #20
 80062e6:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80062ea:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80062ee:	4622      	mov	r2, r4
 80062f0:	462b      	mov	r3, r5
 80062f2:	f7fa f9a5 	bl	8000640 <__aeabi_dmul>
 80062f6:	4604      	mov	r4, r0
 80062f8:	460d      	mov	r5, r1
 80062fa:	4620      	mov	r0, r4
 80062fc:	4629      	mov	r1, r5
 80062fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006302:	0000      	movs	r0, r0
 8006304:	0000      	movs	r0, r0
	...

08006308 <_strtod_l>:
 8006308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800630c:	b09f      	sub	sp, #124	; 0x7c
 800630e:	9217      	str	r2, [sp, #92]	; 0x5c
 8006310:	2200      	movs	r2, #0
 8006312:	4604      	mov	r4, r0
 8006314:	921a      	str	r2, [sp, #104]	; 0x68
 8006316:	460d      	mov	r5, r1
 8006318:	f04f 0800 	mov.w	r8, #0
 800631c:	f04f 0900 	mov.w	r9, #0
 8006320:	460a      	mov	r2, r1
 8006322:	9219      	str	r2, [sp, #100]	; 0x64
 8006324:	7811      	ldrb	r1, [r2, #0]
 8006326:	292b      	cmp	r1, #43	; 0x2b
 8006328:	d04a      	beq.n	80063c0 <_strtod_l+0xb8>
 800632a:	d838      	bhi.n	800639e <_strtod_l+0x96>
 800632c:	290d      	cmp	r1, #13
 800632e:	d832      	bhi.n	8006396 <_strtod_l+0x8e>
 8006330:	2908      	cmp	r1, #8
 8006332:	d832      	bhi.n	800639a <_strtod_l+0x92>
 8006334:	2900      	cmp	r1, #0
 8006336:	d03b      	beq.n	80063b0 <_strtod_l+0xa8>
 8006338:	2200      	movs	r2, #0
 800633a:	920e      	str	r2, [sp, #56]	; 0x38
 800633c:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800633e:	7832      	ldrb	r2, [r6, #0]
 8006340:	2a30      	cmp	r2, #48	; 0x30
 8006342:	f040 80b2 	bne.w	80064aa <_strtod_l+0x1a2>
 8006346:	7872      	ldrb	r2, [r6, #1]
 8006348:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800634c:	2a58      	cmp	r2, #88	; 0x58
 800634e:	d16e      	bne.n	800642e <_strtod_l+0x126>
 8006350:	9302      	str	r3, [sp, #8]
 8006352:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006354:	4620      	mov	r0, r4
 8006356:	9301      	str	r3, [sp, #4]
 8006358:	ab1a      	add	r3, sp, #104	; 0x68
 800635a:	9300      	str	r3, [sp, #0]
 800635c:	4a8c      	ldr	r2, [pc, #560]	; (8006590 <_strtod_l+0x288>)
 800635e:	ab1b      	add	r3, sp, #108	; 0x6c
 8006360:	a919      	add	r1, sp, #100	; 0x64
 8006362:	f001 f937 	bl	80075d4 <__gethex>
 8006366:	f010 070f 	ands.w	r7, r0, #15
 800636a:	4605      	mov	r5, r0
 800636c:	d005      	beq.n	800637a <_strtod_l+0x72>
 800636e:	2f06      	cmp	r7, #6
 8006370:	d128      	bne.n	80063c4 <_strtod_l+0xbc>
 8006372:	2300      	movs	r3, #0
 8006374:	3601      	adds	r6, #1
 8006376:	9619      	str	r6, [sp, #100]	; 0x64
 8006378:	930e      	str	r3, [sp, #56]	; 0x38
 800637a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800637c:	2b00      	cmp	r3, #0
 800637e:	f040 85a0 	bne.w	8006ec2 <_strtod_l+0xbba>
 8006382:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006384:	b1cb      	cbz	r3, 80063ba <_strtod_l+0xb2>
 8006386:	4642      	mov	r2, r8
 8006388:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800638c:	4610      	mov	r0, r2
 800638e:	4619      	mov	r1, r3
 8006390:	b01f      	add	sp, #124	; 0x7c
 8006392:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006396:	2920      	cmp	r1, #32
 8006398:	d1ce      	bne.n	8006338 <_strtod_l+0x30>
 800639a:	3201      	adds	r2, #1
 800639c:	e7c1      	b.n	8006322 <_strtod_l+0x1a>
 800639e:	292d      	cmp	r1, #45	; 0x2d
 80063a0:	d1ca      	bne.n	8006338 <_strtod_l+0x30>
 80063a2:	2101      	movs	r1, #1
 80063a4:	910e      	str	r1, [sp, #56]	; 0x38
 80063a6:	1c51      	adds	r1, r2, #1
 80063a8:	9119      	str	r1, [sp, #100]	; 0x64
 80063aa:	7852      	ldrb	r2, [r2, #1]
 80063ac:	2a00      	cmp	r2, #0
 80063ae:	d1c5      	bne.n	800633c <_strtod_l+0x34>
 80063b0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80063b2:	9519      	str	r5, [sp, #100]	; 0x64
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	f040 8582 	bne.w	8006ebe <_strtod_l+0xbb6>
 80063ba:	4642      	mov	r2, r8
 80063bc:	464b      	mov	r3, r9
 80063be:	e7e5      	b.n	800638c <_strtod_l+0x84>
 80063c0:	2100      	movs	r1, #0
 80063c2:	e7ef      	b.n	80063a4 <_strtod_l+0x9c>
 80063c4:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80063c6:	b13a      	cbz	r2, 80063d8 <_strtod_l+0xd0>
 80063c8:	2135      	movs	r1, #53	; 0x35
 80063ca:	a81c      	add	r0, sp, #112	; 0x70
 80063cc:	f7ff ff34 	bl	8006238 <__copybits>
 80063d0:	4620      	mov	r0, r4
 80063d2:	991a      	ldr	r1, [sp, #104]	; 0x68
 80063d4:	f7ff fb18 	bl	8005a08 <_Bfree>
 80063d8:	3f01      	subs	r7, #1
 80063da:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80063dc:	2f04      	cmp	r7, #4
 80063de:	d806      	bhi.n	80063ee <_strtod_l+0xe6>
 80063e0:	e8df f007 	tbb	[pc, r7]
 80063e4:	201d0314 	.word	0x201d0314
 80063e8:	14          	.byte	0x14
 80063e9:	00          	.byte	0x00
 80063ea:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 80063ee:	05e9      	lsls	r1, r5, #23
 80063f0:	bf48      	it	mi
 80063f2:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 80063f6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80063fa:	0d1b      	lsrs	r3, r3, #20
 80063fc:	051b      	lsls	r3, r3, #20
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d1bb      	bne.n	800637a <_strtod_l+0x72>
 8006402:	f7fe fb0d 	bl	8004a20 <__errno>
 8006406:	2322      	movs	r3, #34	; 0x22
 8006408:	6003      	str	r3, [r0, #0]
 800640a:	e7b6      	b.n	800637a <_strtod_l+0x72>
 800640c:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8006410:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 8006414:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006418:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800641c:	e7e7      	b.n	80063ee <_strtod_l+0xe6>
 800641e:	f8df 9174 	ldr.w	r9, [pc, #372]	; 8006594 <_strtod_l+0x28c>
 8006422:	e7e4      	b.n	80063ee <_strtod_l+0xe6>
 8006424:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8006428:	f04f 38ff 	mov.w	r8, #4294967295
 800642c:	e7df      	b.n	80063ee <_strtod_l+0xe6>
 800642e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006430:	1c5a      	adds	r2, r3, #1
 8006432:	9219      	str	r2, [sp, #100]	; 0x64
 8006434:	785b      	ldrb	r3, [r3, #1]
 8006436:	2b30      	cmp	r3, #48	; 0x30
 8006438:	d0f9      	beq.n	800642e <_strtod_l+0x126>
 800643a:	2b00      	cmp	r3, #0
 800643c:	d09d      	beq.n	800637a <_strtod_l+0x72>
 800643e:	2301      	movs	r3, #1
 8006440:	f04f 0a00 	mov.w	sl, #0
 8006444:	220a      	movs	r2, #10
 8006446:	46d3      	mov	fp, sl
 8006448:	9305      	str	r3, [sp, #20]
 800644a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800644c:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 8006450:	930b      	str	r3, [sp, #44]	; 0x2c
 8006452:	9819      	ldr	r0, [sp, #100]	; 0x64
 8006454:	7806      	ldrb	r6, [r0, #0]
 8006456:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800645a:	b2d9      	uxtb	r1, r3
 800645c:	2909      	cmp	r1, #9
 800645e:	d926      	bls.n	80064ae <_strtod_l+0x1a6>
 8006460:	2201      	movs	r2, #1
 8006462:	494d      	ldr	r1, [pc, #308]	; (8006598 <_strtod_l+0x290>)
 8006464:	f000 ffe6 	bl	8007434 <strncmp>
 8006468:	2800      	cmp	r0, #0
 800646a:	d030      	beq.n	80064ce <_strtod_l+0x1c6>
 800646c:	2000      	movs	r0, #0
 800646e:	4632      	mov	r2, r6
 8006470:	4603      	mov	r3, r0
 8006472:	465e      	mov	r6, fp
 8006474:	9008      	str	r0, [sp, #32]
 8006476:	2a65      	cmp	r2, #101	; 0x65
 8006478:	d001      	beq.n	800647e <_strtod_l+0x176>
 800647a:	2a45      	cmp	r2, #69	; 0x45
 800647c:	d113      	bne.n	80064a6 <_strtod_l+0x19e>
 800647e:	b91e      	cbnz	r6, 8006488 <_strtod_l+0x180>
 8006480:	9a05      	ldr	r2, [sp, #20]
 8006482:	4302      	orrs	r2, r0
 8006484:	d094      	beq.n	80063b0 <_strtod_l+0xa8>
 8006486:	2600      	movs	r6, #0
 8006488:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800648a:	1c6a      	adds	r2, r5, #1
 800648c:	9219      	str	r2, [sp, #100]	; 0x64
 800648e:	786a      	ldrb	r2, [r5, #1]
 8006490:	2a2b      	cmp	r2, #43	; 0x2b
 8006492:	d074      	beq.n	800657e <_strtod_l+0x276>
 8006494:	2a2d      	cmp	r2, #45	; 0x2d
 8006496:	d078      	beq.n	800658a <_strtod_l+0x282>
 8006498:	f04f 0c00 	mov.w	ip, #0
 800649c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80064a0:	2909      	cmp	r1, #9
 80064a2:	d97f      	bls.n	80065a4 <_strtod_l+0x29c>
 80064a4:	9519      	str	r5, [sp, #100]	; 0x64
 80064a6:	2700      	movs	r7, #0
 80064a8:	e09e      	b.n	80065e8 <_strtod_l+0x2e0>
 80064aa:	2300      	movs	r3, #0
 80064ac:	e7c8      	b.n	8006440 <_strtod_l+0x138>
 80064ae:	f1bb 0f08 	cmp.w	fp, #8
 80064b2:	bfd8      	it	le
 80064b4:	990a      	ldrle	r1, [sp, #40]	; 0x28
 80064b6:	f100 0001 	add.w	r0, r0, #1
 80064ba:	bfd6      	itet	le
 80064bc:	fb02 3301 	mlale	r3, r2, r1, r3
 80064c0:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 80064c4:	930a      	strle	r3, [sp, #40]	; 0x28
 80064c6:	f10b 0b01 	add.w	fp, fp, #1
 80064ca:	9019      	str	r0, [sp, #100]	; 0x64
 80064cc:	e7c1      	b.n	8006452 <_strtod_l+0x14a>
 80064ce:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80064d0:	1c5a      	adds	r2, r3, #1
 80064d2:	9219      	str	r2, [sp, #100]	; 0x64
 80064d4:	785a      	ldrb	r2, [r3, #1]
 80064d6:	f1bb 0f00 	cmp.w	fp, #0
 80064da:	d037      	beq.n	800654c <_strtod_l+0x244>
 80064dc:	465e      	mov	r6, fp
 80064de:	9008      	str	r0, [sp, #32]
 80064e0:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80064e4:	2b09      	cmp	r3, #9
 80064e6:	d912      	bls.n	800650e <_strtod_l+0x206>
 80064e8:	2301      	movs	r3, #1
 80064ea:	e7c4      	b.n	8006476 <_strtod_l+0x16e>
 80064ec:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80064ee:	3001      	adds	r0, #1
 80064f0:	1c5a      	adds	r2, r3, #1
 80064f2:	9219      	str	r2, [sp, #100]	; 0x64
 80064f4:	785a      	ldrb	r2, [r3, #1]
 80064f6:	2a30      	cmp	r2, #48	; 0x30
 80064f8:	d0f8      	beq.n	80064ec <_strtod_l+0x1e4>
 80064fa:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80064fe:	2b08      	cmp	r3, #8
 8006500:	f200 84e4 	bhi.w	8006ecc <_strtod_l+0xbc4>
 8006504:	9008      	str	r0, [sp, #32]
 8006506:	2000      	movs	r0, #0
 8006508:	4606      	mov	r6, r0
 800650a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800650c:	930b      	str	r3, [sp, #44]	; 0x2c
 800650e:	3a30      	subs	r2, #48	; 0x30
 8006510:	f100 0301 	add.w	r3, r0, #1
 8006514:	d014      	beq.n	8006540 <_strtod_l+0x238>
 8006516:	9908      	ldr	r1, [sp, #32]
 8006518:	eb00 0c06 	add.w	ip, r0, r6
 800651c:	4419      	add	r1, r3
 800651e:	9108      	str	r1, [sp, #32]
 8006520:	4633      	mov	r3, r6
 8006522:	210a      	movs	r1, #10
 8006524:	4563      	cmp	r3, ip
 8006526:	d113      	bne.n	8006550 <_strtod_l+0x248>
 8006528:	1833      	adds	r3, r6, r0
 800652a:	2b08      	cmp	r3, #8
 800652c:	f106 0601 	add.w	r6, r6, #1
 8006530:	4406      	add	r6, r0
 8006532:	dc1a      	bgt.n	800656a <_strtod_l+0x262>
 8006534:	230a      	movs	r3, #10
 8006536:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006538:	fb03 2301 	mla	r3, r3, r1, r2
 800653c:	930a      	str	r3, [sp, #40]	; 0x28
 800653e:	2300      	movs	r3, #0
 8006540:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006542:	4618      	mov	r0, r3
 8006544:	1c51      	adds	r1, r2, #1
 8006546:	9119      	str	r1, [sp, #100]	; 0x64
 8006548:	7852      	ldrb	r2, [r2, #1]
 800654a:	e7c9      	b.n	80064e0 <_strtod_l+0x1d8>
 800654c:	4658      	mov	r0, fp
 800654e:	e7d2      	b.n	80064f6 <_strtod_l+0x1ee>
 8006550:	2b08      	cmp	r3, #8
 8006552:	f103 0301 	add.w	r3, r3, #1
 8006556:	dc03      	bgt.n	8006560 <_strtod_l+0x258>
 8006558:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800655a:	434f      	muls	r7, r1
 800655c:	970a      	str	r7, [sp, #40]	; 0x28
 800655e:	e7e1      	b.n	8006524 <_strtod_l+0x21c>
 8006560:	2b10      	cmp	r3, #16
 8006562:	bfd8      	it	le
 8006564:	fb01 fa0a 	mulle.w	sl, r1, sl
 8006568:	e7dc      	b.n	8006524 <_strtod_l+0x21c>
 800656a:	2e10      	cmp	r6, #16
 800656c:	bfdc      	itt	le
 800656e:	230a      	movle	r3, #10
 8006570:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8006574:	e7e3      	b.n	800653e <_strtod_l+0x236>
 8006576:	2300      	movs	r3, #0
 8006578:	9308      	str	r3, [sp, #32]
 800657a:	2301      	movs	r3, #1
 800657c:	e780      	b.n	8006480 <_strtod_l+0x178>
 800657e:	f04f 0c00 	mov.w	ip, #0
 8006582:	1caa      	adds	r2, r5, #2
 8006584:	9219      	str	r2, [sp, #100]	; 0x64
 8006586:	78aa      	ldrb	r2, [r5, #2]
 8006588:	e788      	b.n	800649c <_strtod_l+0x194>
 800658a:	f04f 0c01 	mov.w	ip, #1
 800658e:	e7f8      	b.n	8006582 <_strtod_l+0x27a>
 8006590:	08009540 	.word	0x08009540
 8006594:	7ff00000 	.word	0x7ff00000
 8006598:	0800953c 	.word	0x0800953c
 800659c:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800659e:	1c51      	adds	r1, r2, #1
 80065a0:	9119      	str	r1, [sp, #100]	; 0x64
 80065a2:	7852      	ldrb	r2, [r2, #1]
 80065a4:	2a30      	cmp	r2, #48	; 0x30
 80065a6:	d0f9      	beq.n	800659c <_strtod_l+0x294>
 80065a8:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80065ac:	2908      	cmp	r1, #8
 80065ae:	f63f af7a 	bhi.w	80064a6 <_strtod_l+0x19e>
 80065b2:	3a30      	subs	r2, #48	; 0x30
 80065b4:	9209      	str	r2, [sp, #36]	; 0x24
 80065b6:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80065b8:	920c      	str	r2, [sp, #48]	; 0x30
 80065ba:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80065bc:	1c57      	adds	r7, r2, #1
 80065be:	9719      	str	r7, [sp, #100]	; 0x64
 80065c0:	7852      	ldrb	r2, [r2, #1]
 80065c2:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80065c6:	f1be 0f09 	cmp.w	lr, #9
 80065ca:	d938      	bls.n	800663e <_strtod_l+0x336>
 80065cc:	990c      	ldr	r1, [sp, #48]	; 0x30
 80065ce:	1a7f      	subs	r7, r7, r1
 80065d0:	2f08      	cmp	r7, #8
 80065d2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 80065d6:	dc03      	bgt.n	80065e0 <_strtod_l+0x2d8>
 80065d8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80065da:	428f      	cmp	r7, r1
 80065dc:	bfa8      	it	ge
 80065de:	460f      	movge	r7, r1
 80065e0:	f1bc 0f00 	cmp.w	ip, #0
 80065e4:	d000      	beq.n	80065e8 <_strtod_l+0x2e0>
 80065e6:	427f      	negs	r7, r7
 80065e8:	2e00      	cmp	r6, #0
 80065ea:	d14f      	bne.n	800668c <_strtod_l+0x384>
 80065ec:	9905      	ldr	r1, [sp, #20]
 80065ee:	4301      	orrs	r1, r0
 80065f0:	f47f aec3 	bne.w	800637a <_strtod_l+0x72>
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	f47f aedb 	bne.w	80063b0 <_strtod_l+0xa8>
 80065fa:	2a69      	cmp	r2, #105	; 0x69
 80065fc:	d029      	beq.n	8006652 <_strtod_l+0x34a>
 80065fe:	dc26      	bgt.n	800664e <_strtod_l+0x346>
 8006600:	2a49      	cmp	r2, #73	; 0x49
 8006602:	d026      	beq.n	8006652 <_strtod_l+0x34a>
 8006604:	2a4e      	cmp	r2, #78	; 0x4e
 8006606:	f47f aed3 	bne.w	80063b0 <_strtod_l+0xa8>
 800660a:	499a      	ldr	r1, [pc, #616]	; (8006874 <_strtod_l+0x56c>)
 800660c:	a819      	add	r0, sp, #100	; 0x64
 800660e:	f001 fa23 	bl	8007a58 <__match>
 8006612:	2800      	cmp	r0, #0
 8006614:	f43f aecc 	beq.w	80063b0 <_strtod_l+0xa8>
 8006618:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800661a:	781b      	ldrb	r3, [r3, #0]
 800661c:	2b28      	cmp	r3, #40	; 0x28
 800661e:	d12f      	bne.n	8006680 <_strtod_l+0x378>
 8006620:	4995      	ldr	r1, [pc, #596]	; (8006878 <_strtod_l+0x570>)
 8006622:	aa1c      	add	r2, sp, #112	; 0x70
 8006624:	a819      	add	r0, sp, #100	; 0x64
 8006626:	f001 fa2b 	bl	8007a80 <__hexnan>
 800662a:	2805      	cmp	r0, #5
 800662c:	d128      	bne.n	8006680 <_strtod_l+0x378>
 800662e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006630:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8006634:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8006638:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800663c:	e69d      	b.n	800637a <_strtod_l+0x72>
 800663e:	210a      	movs	r1, #10
 8006640:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8006642:	fb01 2107 	mla	r1, r1, r7, r2
 8006646:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800664a:	9209      	str	r2, [sp, #36]	; 0x24
 800664c:	e7b5      	b.n	80065ba <_strtod_l+0x2b2>
 800664e:	2a6e      	cmp	r2, #110	; 0x6e
 8006650:	e7d9      	b.n	8006606 <_strtod_l+0x2fe>
 8006652:	498a      	ldr	r1, [pc, #552]	; (800687c <_strtod_l+0x574>)
 8006654:	a819      	add	r0, sp, #100	; 0x64
 8006656:	f001 f9ff 	bl	8007a58 <__match>
 800665a:	2800      	cmp	r0, #0
 800665c:	f43f aea8 	beq.w	80063b0 <_strtod_l+0xa8>
 8006660:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006662:	4987      	ldr	r1, [pc, #540]	; (8006880 <_strtod_l+0x578>)
 8006664:	3b01      	subs	r3, #1
 8006666:	a819      	add	r0, sp, #100	; 0x64
 8006668:	9319      	str	r3, [sp, #100]	; 0x64
 800666a:	f001 f9f5 	bl	8007a58 <__match>
 800666e:	b910      	cbnz	r0, 8006676 <_strtod_l+0x36e>
 8006670:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006672:	3301      	adds	r3, #1
 8006674:	9319      	str	r3, [sp, #100]	; 0x64
 8006676:	f04f 0800 	mov.w	r8, #0
 800667a:	f8df 9208 	ldr.w	r9, [pc, #520]	; 8006884 <_strtod_l+0x57c>
 800667e:	e67c      	b.n	800637a <_strtod_l+0x72>
 8006680:	4881      	ldr	r0, [pc, #516]	; (8006888 <_strtod_l+0x580>)
 8006682:	f000 ff07 	bl	8007494 <nan>
 8006686:	4680      	mov	r8, r0
 8006688:	4689      	mov	r9, r1
 800668a:	e676      	b.n	800637a <_strtod_l+0x72>
 800668c:	9b08      	ldr	r3, [sp, #32]
 800668e:	f1bb 0f00 	cmp.w	fp, #0
 8006692:	bf08      	it	eq
 8006694:	46b3      	moveq	fp, r6
 8006696:	1afb      	subs	r3, r7, r3
 8006698:	2e10      	cmp	r6, #16
 800669a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800669c:	4635      	mov	r5, r6
 800669e:	9309      	str	r3, [sp, #36]	; 0x24
 80066a0:	bfa8      	it	ge
 80066a2:	2510      	movge	r5, #16
 80066a4:	f7f9 ff52 	bl	800054c <__aeabi_ui2d>
 80066a8:	2e09      	cmp	r6, #9
 80066aa:	4680      	mov	r8, r0
 80066ac:	4689      	mov	r9, r1
 80066ae:	dd13      	ble.n	80066d8 <_strtod_l+0x3d0>
 80066b0:	4b76      	ldr	r3, [pc, #472]	; (800688c <_strtod_l+0x584>)
 80066b2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80066b6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80066ba:	f7f9 ffc1 	bl	8000640 <__aeabi_dmul>
 80066be:	4680      	mov	r8, r0
 80066c0:	4650      	mov	r0, sl
 80066c2:	4689      	mov	r9, r1
 80066c4:	f7f9 ff42 	bl	800054c <__aeabi_ui2d>
 80066c8:	4602      	mov	r2, r0
 80066ca:	460b      	mov	r3, r1
 80066cc:	4640      	mov	r0, r8
 80066ce:	4649      	mov	r1, r9
 80066d0:	f7f9 fe00 	bl	80002d4 <__adddf3>
 80066d4:	4680      	mov	r8, r0
 80066d6:	4689      	mov	r9, r1
 80066d8:	2e0f      	cmp	r6, #15
 80066da:	dc36      	bgt.n	800674a <_strtod_l+0x442>
 80066dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066de:	2b00      	cmp	r3, #0
 80066e0:	f43f ae4b 	beq.w	800637a <_strtod_l+0x72>
 80066e4:	dd22      	ble.n	800672c <_strtod_l+0x424>
 80066e6:	2b16      	cmp	r3, #22
 80066e8:	dc09      	bgt.n	80066fe <_strtod_l+0x3f6>
 80066ea:	4968      	ldr	r1, [pc, #416]	; (800688c <_strtod_l+0x584>)
 80066ec:	4642      	mov	r2, r8
 80066ee:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80066f2:	464b      	mov	r3, r9
 80066f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80066f8:	f7f9 ffa2 	bl	8000640 <__aeabi_dmul>
 80066fc:	e7c3      	b.n	8006686 <_strtod_l+0x37e>
 80066fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006700:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8006704:	4293      	cmp	r3, r2
 8006706:	db20      	blt.n	800674a <_strtod_l+0x442>
 8006708:	4c60      	ldr	r4, [pc, #384]	; (800688c <_strtod_l+0x584>)
 800670a:	f1c6 060f 	rsb	r6, r6, #15
 800670e:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8006712:	4642      	mov	r2, r8
 8006714:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006718:	464b      	mov	r3, r9
 800671a:	f7f9 ff91 	bl	8000640 <__aeabi_dmul>
 800671e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006720:	1b9e      	subs	r6, r3, r6
 8006722:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8006726:	e9d4 2300 	ldrd	r2, r3, [r4]
 800672a:	e7e5      	b.n	80066f8 <_strtod_l+0x3f0>
 800672c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800672e:	3316      	adds	r3, #22
 8006730:	db0b      	blt.n	800674a <_strtod_l+0x442>
 8006732:	9b08      	ldr	r3, [sp, #32]
 8006734:	4640      	mov	r0, r8
 8006736:	1bdf      	subs	r7, r3, r7
 8006738:	4b54      	ldr	r3, [pc, #336]	; (800688c <_strtod_l+0x584>)
 800673a:	4649      	mov	r1, r9
 800673c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8006740:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006744:	f7fa f8a6 	bl	8000894 <__aeabi_ddiv>
 8006748:	e79d      	b.n	8006686 <_strtod_l+0x37e>
 800674a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800674c:	1b75      	subs	r5, r6, r5
 800674e:	441d      	add	r5, r3
 8006750:	2d00      	cmp	r5, #0
 8006752:	dd70      	ble.n	8006836 <_strtod_l+0x52e>
 8006754:	f015 030f 	ands.w	r3, r5, #15
 8006758:	d00a      	beq.n	8006770 <_strtod_l+0x468>
 800675a:	494c      	ldr	r1, [pc, #304]	; (800688c <_strtod_l+0x584>)
 800675c:	4642      	mov	r2, r8
 800675e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006762:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006766:	464b      	mov	r3, r9
 8006768:	f7f9 ff6a 	bl	8000640 <__aeabi_dmul>
 800676c:	4680      	mov	r8, r0
 800676e:	4689      	mov	r9, r1
 8006770:	f035 050f 	bics.w	r5, r5, #15
 8006774:	d04d      	beq.n	8006812 <_strtod_l+0x50a>
 8006776:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800677a:	dd22      	ble.n	80067c2 <_strtod_l+0x4ba>
 800677c:	2600      	movs	r6, #0
 800677e:	46b3      	mov	fp, r6
 8006780:	960b      	str	r6, [sp, #44]	; 0x2c
 8006782:	9608      	str	r6, [sp, #32]
 8006784:	2322      	movs	r3, #34	; 0x22
 8006786:	f04f 0800 	mov.w	r8, #0
 800678a:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 8006884 <_strtod_l+0x57c>
 800678e:	6023      	str	r3, [r4, #0]
 8006790:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006792:	2b00      	cmp	r3, #0
 8006794:	f43f adf1 	beq.w	800637a <_strtod_l+0x72>
 8006798:	4620      	mov	r0, r4
 800679a:	991a      	ldr	r1, [sp, #104]	; 0x68
 800679c:	f7ff f934 	bl	8005a08 <_Bfree>
 80067a0:	4620      	mov	r0, r4
 80067a2:	9908      	ldr	r1, [sp, #32]
 80067a4:	f7ff f930 	bl	8005a08 <_Bfree>
 80067a8:	4659      	mov	r1, fp
 80067aa:	4620      	mov	r0, r4
 80067ac:	f7ff f92c 	bl	8005a08 <_Bfree>
 80067b0:	4620      	mov	r0, r4
 80067b2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80067b4:	f7ff f928 	bl	8005a08 <_Bfree>
 80067b8:	4631      	mov	r1, r6
 80067ba:	4620      	mov	r0, r4
 80067bc:	f7ff f924 	bl	8005a08 <_Bfree>
 80067c0:	e5db      	b.n	800637a <_strtod_l+0x72>
 80067c2:	4b33      	ldr	r3, [pc, #204]	; (8006890 <_strtod_l+0x588>)
 80067c4:	4640      	mov	r0, r8
 80067c6:	9305      	str	r3, [sp, #20]
 80067c8:	2300      	movs	r3, #0
 80067ca:	4649      	mov	r1, r9
 80067cc:	469a      	mov	sl, r3
 80067ce:	112d      	asrs	r5, r5, #4
 80067d0:	2d01      	cmp	r5, #1
 80067d2:	dc21      	bgt.n	8006818 <_strtod_l+0x510>
 80067d4:	b10b      	cbz	r3, 80067da <_strtod_l+0x4d2>
 80067d6:	4680      	mov	r8, r0
 80067d8:	4689      	mov	r9, r1
 80067da:	492d      	ldr	r1, [pc, #180]	; (8006890 <_strtod_l+0x588>)
 80067dc:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80067e0:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80067e4:	4642      	mov	r2, r8
 80067e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80067ea:	464b      	mov	r3, r9
 80067ec:	f7f9 ff28 	bl	8000640 <__aeabi_dmul>
 80067f0:	4b24      	ldr	r3, [pc, #144]	; (8006884 <_strtod_l+0x57c>)
 80067f2:	460a      	mov	r2, r1
 80067f4:	400b      	ands	r3, r1
 80067f6:	4927      	ldr	r1, [pc, #156]	; (8006894 <_strtod_l+0x58c>)
 80067f8:	4680      	mov	r8, r0
 80067fa:	428b      	cmp	r3, r1
 80067fc:	d8be      	bhi.n	800677c <_strtod_l+0x474>
 80067fe:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8006802:	428b      	cmp	r3, r1
 8006804:	bf86      	itte	hi
 8006806:	f04f 38ff 	movhi.w	r8, #4294967295
 800680a:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 8006898 <_strtod_l+0x590>
 800680e:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8006812:	2300      	movs	r3, #0
 8006814:	9305      	str	r3, [sp, #20]
 8006816:	e07b      	b.n	8006910 <_strtod_l+0x608>
 8006818:	07ea      	lsls	r2, r5, #31
 800681a:	d505      	bpl.n	8006828 <_strtod_l+0x520>
 800681c:	9b05      	ldr	r3, [sp, #20]
 800681e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006822:	f7f9 ff0d 	bl	8000640 <__aeabi_dmul>
 8006826:	2301      	movs	r3, #1
 8006828:	9a05      	ldr	r2, [sp, #20]
 800682a:	f10a 0a01 	add.w	sl, sl, #1
 800682e:	3208      	adds	r2, #8
 8006830:	106d      	asrs	r5, r5, #1
 8006832:	9205      	str	r2, [sp, #20]
 8006834:	e7cc      	b.n	80067d0 <_strtod_l+0x4c8>
 8006836:	d0ec      	beq.n	8006812 <_strtod_l+0x50a>
 8006838:	426d      	negs	r5, r5
 800683a:	f015 020f 	ands.w	r2, r5, #15
 800683e:	d00a      	beq.n	8006856 <_strtod_l+0x54e>
 8006840:	4b12      	ldr	r3, [pc, #72]	; (800688c <_strtod_l+0x584>)
 8006842:	4640      	mov	r0, r8
 8006844:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006848:	4649      	mov	r1, r9
 800684a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800684e:	f7fa f821 	bl	8000894 <__aeabi_ddiv>
 8006852:	4680      	mov	r8, r0
 8006854:	4689      	mov	r9, r1
 8006856:	112d      	asrs	r5, r5, #4
 8006858:	d0db      	beq.n	8006812 <_strtod_l+0x50a>
 800685a:	2d1f      	cmp	r5, #31
 800685c:	dd1e      	ble.n	800689c <_strtod_l+0x594>
 800685e:	2600      	movs	r6, #0
 8006860:	46b3      	mov	fp, r6
 8006862:	960b      	str	r6, [sp, #44]	; 0x2c
 8006864:	9608      	str	r6, [sp, #32]
 8006866:	2322      	movs	r3, #34	; 0x22
 8006868:	f04f 0800 	mov.w	r8, #0
 800686c:	f04f 0900 	mov.w	r9, #0
 8006870:	6023      	str	r3, [r4, #0]
 8006872:	e78d      	b.n	8006790 <_strtod_l+0x488>
 8006874:	0800932b 	.word	0x0800932b
 8006878:	08009554 	.word	0x08009554
 800687c:	08009323 	.word	0x08009323
 8006880:	0800935a 	.word	0x0800935a
 8006884:	7ff00000 	.word	0x7ff00000
 8006888:	080096e5 	.word	0x080096e5
 800688c:	08009468 	.word	0x08009468
 8006890:	08009440 	.word	0x08009440
 8006894:	7ca00000 	.word	0x7ca00000
 8006898:	7fefffff 	.word	0x7fefffff
 800689c:	f015 0310 	ands.w	r3, r5, #16
 80068a0:	bf18      	it	ne
 80068a2:	236a      	movne	r3, #106	; 0x6a
 80068a4:	4640      	mov	r0, r8
 80068a6:	9305      	str	r3, [sp, #20]
 80068a8:	4649      	mov	r1, r9
 80068aa:	2300      	movs	r3, #0
 80068ac:	f8df a2c8 	ldr.w	sl, [pc, #712]	; 8006b78 <_strtod_l+0x870>
 80068b0:	07ea      	lsls	r2, r5, #31
 80068b2:	d504      	bpl.n	80068be <_strtod_l+0x5b6>
 80068b4:	e9da 2300 	ldrd	r2, r3, [sl]
 80068b8:	f7f9 fec2 	bl	8000640 <__aeabi_dmul>
 80068bc:	2301      	movs	r3, #1
 80068be:	106d      	asrs	r5, r5, #1
 80068c0:	f10a 0a08 	add.w	sl, sl, #8
 80068c4:	d1f4      	bne.n	80068b0 <_strtod_l+0x5a8>
 80068c6:	b10b      	cbz	r3, 80068cc <_strtod_l+0x5c4>
 80068c8:	4680      	mov	r8, r0
 80068ca:	4689      	mov	r9, r1
 80068cc:	9b05      	ldr	r3, [sp, #20]
 80068ce:	b1bb      	cbz	r3, 8006900 <_strtod_l+0x5f8>
 80068d0:	f3c9 520a 	ubfx	r2, r9, #20, #11
 80068d4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80068d8:	2b00      	cmp	r3, #0
 80068da:	4649      	mov	r1, r9
 80068dc:	dd10      	ble.n	8006900 <_strtod_l+0x5f8>
 80068de:	2b1f      	cmp	r3, #31
 80068e0:	f340 8128 	ble.w	8006b34 <_strtod_l+0x82c>
 80068e4:	2b34      	cmp	r3, #52	; 0x34
 80068e6:	bfd8      	it	le
 80068e8:	f04f 33ff 	movle.w	r3, #4294967295
 80068ec:	f04f 0800 	mov.w	r8, #0
 80068f0:	bfcf      	iteee	gt
 80068f2:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80068f6:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80068fa:	4093      	lslle	r3, r2
 80068fc:	ea03 0901 	andle.w	r9, r3, r1
 8006900:	2200      	movs	r2, #0
 8006902:	2300      	movs	r3, #0
 8006904:	4640      	mov	r0, r8
 8006906:	4649      	mov	r1, r9
 8006908:	f7fa f902 	bl	8000b10 <__aeabi_dcmpeq>
 800690c:	2800      	cmp	r0, #0
 800690e:	d1a6      	bne.n	800685e <_strtod_l+0x556>
 8006910:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006912:	465a      	mov	r2, fp
 8006914:	9300      	str	r3, [sp, #0]
 8006916:	4620      	mov	r0, r4
 8006918:	4633      	mov	r3, r6
 800691a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800691c:	f7ff f8dc 	bl	8005ad8 <__s2b>
 8006920:	900b      	str	r0, [sp, #44]	; 0x2c
 8006922:	2800      	cmp	r0, #0
 8006924:	f43f af2a 	beq.w	800677c <_strtod_l+0x474>
 8006928:	2600      	movs	r6, #0
 800692a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800692c:	9b08      	ldr	r3, [sp, #32]
 800692e:	2a00      	cmp	r2, #0
 8006930:	eba3 0307 	sub.w	r3, r3, r7
 8006934:	bfa8      	it	ge
 8006936:	2300      	movge	r3, #0
 8006938:	46b3      	mov	fp, r6
 800693a:	9312      	str	r3, [sp, #72]	; 0x48
 800693c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8006940:	9316      	str	r3, [sp, #88]	; 0x58
 8006942:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006944:	4620      	mov	r0, r4
 8006946:	6859      	ldr	r1, [r3, #4]
 8006948:	f7ff f81e 	bl	8005988 <_Balloc>
 800694c:	9008      	str	r0, [sp, #32]
 800694e:	2800      	cmp	r0, #0
 8006950:	f43f af18 	beq.w	8006784 <_strtod_l+0x47c>
 8006954:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006956:	300c      	adds	r0, #12
 8006958:	691a      	ldr	r2, [r3, #16]
 800695a:	f103 010c 	add.w	r1, r3, #12
 800695e:	3202      	adds	r2, #2
 8006960:	0092      	lsls	r2, r2, #2
 8006962:	f000 fd89 	bl	8007478 <memcpy>
 8006966:	ab1c      	add	r3, sp, #112	; 0x70
 8006968:	9301      	str	r3, [sp, #4]
 800696a:	ab1b      	add	r3, sp, #108	; 0x6c
 800696c:	9300      	str	r3, [sp, #0]
 800696e:	4642      	mov	r2, r8
 8006970:	464b      	mov	r3, r9
 8006972:	4620      	mov	r0, r4
 8006974:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 8006978:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
 800697c:	f7ff fbd8 	bl	8006130 <__d2b>
 8006980:	901a      	str	r0, [sp, #104]	; 0x68
 8006982:	2800      	cmp	r0, #0
 8006984:	f43f aefe 	beq.w	8006784 <_strtod_l+0x47c>
 8006988:	2101      	movs	r1, #1
 800698a:	4620      	mov	r0, r4
 800698c:	f7ff f93c 	bl	8005c08 <__i2b>
 8006990:	4683      	mov	fp, r0
 8006992:	2800      	cmp	r0, #0
 8006994:	f43f aef6 	beq.w	8006784 <_strtod_l+0x47c>
 8006998:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800699a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800699c:	2f00      	cmp	r7, #0
 800699e:	bfab      	itete	ge
 80069a0:	9b12      	ldrge	r3, [sp, #72]	; 0x48
 80069a2:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 80069a4:	eb07 0a03 	addge.w	sl, r7, r3
 80069a8:	1bdd      	sublt	r5, r3, r7
 80069aa:	9b05      	ldr	r3, [sp, #20]
 80069ac:	bfa8      	it	ge
 80069ae:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 80069b0:	eba7 0703 	sub.w	r7, r7, r3
 80069b4:	4417      	add	r7, r2
 80069b6:	4b71      	ldr	r3, [pc, #452]	; (8006b7c <_strtod_l+0x874>)
 80069b8:	f107 37ff 	add.w	r7, r7, #4294967295
 80069bc:	bfb8      	it	lt
 80069be:	f8dd a048 	ldrlt.w	sl, [sp, #72]	; 0x48
 80069c2:	429f      	cmp	r7, r3
 80069c4:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80069c8:	f280 80c7 	bge.w	8006b5a <_strtod_l+0x852>
 80069cc:	1bdb      	subs	r3, r3, r7
 80069ce:	2b1f      	cmp	r3, #31
 80069d0:	f04f 0101 	mov.w	r1, #1
 80069d4:	eba2 0203 	sub.w	r2, r2, r3
 80069d8:	f300 80b3 	bgt.w	8006b42 <_strtod_l+0x83a>
 80069dc:	fa01 f303 	lsl.w	r3, r1, r3
 80069e0:	9313      	str	r3, [sp, #76]	; 0x4c
 80069e2:	2300      	movs	r3, #0
 80069e4:	9310      	str	r3, [sp, #64]	; 0x40
 80069e6:	eb0a 0702 	add.w	r7, sl, r2
 80069ea:	9b05      	ldr	r3, [sp, #20]
 80069ec:	45ba      	cmp	sl, r7
 80069ee:	4415      	add	r5, r2
 80069f0:	441d      	add	r5, r3
 80069f2:	4653      	mov	r3, sl
 80069f4:	bfa8      	it	ge
 80069f6:	463b      	movge	r3, r7
 80069f8:	42ab      	cmp	r3, r5
 80069fa:	bfa8      	it	ge
 80069fc:	462b      	movge	r3, r5
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	bfc2      	ittt	gt
 8006a02:	1aff      	subgt	r7, r7, r3
 8006a04:	1aed      	subgt	r5, r5, r3
 8006a06:	ebaa 0a03 	subgt.w	sl, sl, r3
 8006a0a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	dd17      	ble.n	8006a40 <_strtod_l+0x738>
 8006a10:	4659      	mov	r1, fp
 8006a12:	461a      	mov	r2, r3
 8006a14:	4620      	mov	r0, r4
 8006a16:	f7ff f9b5 	bl	8005d84 <__pow5mult>
 8006a1a:	4683      	mov	fp, r0
 8006a1c:	2800      	cmp	r0, #0
 8006a1e:	f43f aeb1 	beq.w	8006784 <_strtod_l+0x47c>
 8006a22:	4601      	mov	r1, r0
 8006a24:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8006a26:	4620      	mov	r0, r4
 8006a28:	f7ff f904 	bl	8005c34 <__multiply>
 8006a2c:	900a      	str	r0, [sp, #40]	; 0x28
 8006a2e:	2800      	cmp	r0, #0
 8006a30:	f43f aea8 	beq.w	8006784 <_strtod_l+0x47c>
 8006a34:	4620      	mov	r0, r4
 8006a36:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006a38:	f7fe ffe6 	bl	8005a08 <_Bfree>
 8006a3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a3e:	931a      	str	r3, [sp, #104]	; 0x68
 8006a40:	2f00      	cmp	r7, #0
 8006a42:	f300 808f 	bgt.w	8006b64 <_strtod_l+0x85c>
 8006a46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	dd08      	ble.n	8006a5e <_strtod_l+0x756>
 8006a4c:	4620      	mov	r0, r4
 8006a4e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8006a50:	9908      	ldr	r1, [sp, #32]
 8006a52:	f7ff f997 	bl	8005d84 <__pow5mult>
 8006a56:	9008      	str	r0, [sp, #32]
 8006a58:	2800      	cmp	r0, #0
 8006a5a:	f43f ae93 	beq.w	8006784 <_strtod_l+0x47c>
 8006a5e:	2d00      	cmp	r5, #0
 8006a60:	dd08      	ble.n	8006a74 <_strtod_l+0x76c>
 8006a62:	462a      	mov	r2, r5
 8006a64:	4620      	mov	r0, r4
 8006a66:	9908      	ldr	r1, [sp, #32]
 8006a68:	f7ff f9e6 	bl	8005e38 <__lshift>
 8006a6c:	9008      	str	r0, [sp, #32]
 8006a6e:	2800      	cmp	r0, #0
 8006a70:	f43f ae88 	beq.w	8006784 <_strtod_l+0x47c>
 8006a74:	f1ba 0f00 	cmp.w	sl, #0
 8006a78:	dd08      	ble.n	8006a8c <_strtod_l+0x784>
 8006a7a:	4659      	mov	r1, fp
 8006a7c:	4652      	mov	r2, sl
 8006a7e:	4620      	mov	r0, r4
 8006a80:	f7ff f9da 	bl	8005e38 <__lshift>
 8006a84:	4683      	mov	fp, r0
 8006a86:	2800      	cmp	r0, #0
 8006a88:	f43f ae7c 	beq.w	8006784 <_strtod_l+0x47c>
 8006a8c:	4620      	mov	r0, r4
 8006a8e:	9a08      	ldr	r2, [sp, #32]
 8006a90:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006a92:	f7ff fa59 	bl	8005f48 <__mdiff>
 8006a96:	4606      	mov	r6, r0
 8006a98:	2800      	cmp	r0, #0
 8006a9a:	f43f ae73 	beq.w	8006784 <_strtod_l+0x47c>
 8006a9e:	2500      	movs	r5, #0
 8006aa0:	68c3      	ldr	r3, [r0, #12]
 8006aa2:	4659      	mov	r1, fp
 8006aa4:	60c5      	str	r5, [r0, #12]
 8006aa6:	930a      	str	r3, [sp, #40]	; 0x28
 8006aa8:	f7ff fa32 	bl	8005f10 <__mcmp>
 8006aac:	42a8      	cmp	r0, r5
 8006aae:	da6b      	bge.n	8006b88 <_strtod_l+0x880>
 8006ab0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ab2:	ea53 0308 	orrs.w	r3, r3, r8
 8006ab6:	f040 808f 	bne.w	8006bd8 <_strtod_l+0x8d0>
 8006aba:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	f040 808a 	bne.w	8006bd8 <_strtod_l+0x8d0>
 8006ac4:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006ac8:	0d1b      	lsrs	r3, r3, #20
 8006aca:	051b      	lsls	r3, r3, #20
 8006acc:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8006ad0:	f240 8082 	bls.w	8006bd8 <_strtod_l+0x8d0>
 8006ad4:	6973      	ldr	r3, [r6, #20]
 8006ad6:	b913      	cbnz	r3, 8006ade <_strtod_l+0x7d6>
 8006ad8:	6933      	ldr	r3, [r6, #16]
 8006ada:	2b01      	cmp	r3, #1
 8006adc:	dd7c      	ble.n	8006bd8 <_strtod_l+0x8d0>
 8006ade:	4631      	mov	r1, r6
 8006ae0:	2201      	movs	r2, #1
 8006ae2:	4620      	mov	r0, r4
 8006ae4:	f7ff f9a8 	bl	8005e38 <__lshift>
 8006ae8:	4659      	mov	r1, fp
 8006aea:	4606      	mov	r6, r0
 8006aec:	f7ff fa10 	bl	8005f10 <__mcmp>
 8006af0:	2800      	cmp	r0, #0
 8006af2:	dd71      	ble.n	8006bd8 <_strtod_l+0x8d0>
 8006af4:	9905      	ldr	r1, [sp, #20]
 8006af6:	464b      	mov	r3, r9
 8006af8:	4a21      	ldr	r2, [pc, #132]	; (8006b80 <_strtod_l+0x878>)
 8006afa:	2900      	cmp	r1, #0
 8006afc:	f000 808d 	beq.w	8006c1a <_strtod_l+0x912>
 8006b00:	ea02 0109 	and.w	r1, r2, r9
 8006b04:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8006b08:	f300 8087 	bgt.w	8006c1a <_strtod_l+0x912>
 8006b0c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8006b10:	f77f aea9 	ble.w	8006866 <_strtod_l+0x55e>
 8006b14:	4640      	mov	r0, r8
 8006b16:	4649      	mov	r1, r9
 8006b18:	4b1a      	ldr	r3, [pc, #104]	; (8006b84 <_strtod_l+0x87c>)
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	f7f9 fd90 	bl	8000640 <__aeabi_dmul>
 8006b20:	4b17      	ldr	r3, [pc, #92]	; (8006b80 <_strtod_l+0x878>)
 8006b22:	4680      	mov	r8, r0
 8006b24:	400b      	ands	r3, r1
 8006b26:	4689      	mov	r9, r1
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	f47f ae35 	bne.w	8006798 <_strtod_l+0x490>
 8006b2e:	2322      	movs	r3, #34	; 0x22
 8006b30:	6023      	str	r3, [r4, #0]
 8006b32:	e631      	b.n	8006798 <_strtod_l+0x490>
 8006b34:	f04f 32ff 	mov.w	r2, #4294967295
 8006b38:	fa02 f303 	lsl.w	r3, r2, r3
 8006b3c:	ea03 0808 	and.w	r8, r3, r8
 8006b40:	e6de      	b.n	8006900 <_strtod_l+0x5f8>
 8006b42:	f1c7 477f 	rsb	r7, r7, #4278190080	; 0xff000000
 8006b46:	f507 077f 	add.w	r7, r7, #16711680	; 0xff0000
 8006b4a:	f507 477b 	add.w	r7, r7, #64256	; 0xfb00
 8006b4e:	37e2      	adds	r7, #226	; 0xe2
 8006b50:	fa01 f307 	lsl.w	r3, r1, r7
 8006b54:	9310      	str	r3, [sp, #64]	; 0x40
 8006b56:	9113      	str	r1, [sp, #76]	; 0x4c
 8006b58:	e745      	b.n	80069e6 <_strtod_l+0x6de>
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	9310      	str	r3, [sp, #64]	; 0x40
 8006b5e:	2301      	movs	r3, #1
 8006b60:	9313      	str	r3, [sp, #76]	; 0x4c
 8006b62:	e740      	b.n	80069e6 <_strtod_l+0x6de>
 8006b64:	463a      	mov	r2, r7
 8006b66:	4620      	mov	r0, r4
 8006b68:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006b6a:	f7ff f965 	bl	8005e38 <__lshift>
 8006b6e:	901a      	str	r0, [sp, #104]	; 0x68
 8006b70:	2800      	cmp	r0, #0
 8006b72:	f47f af68 	bne.w	8006a46 <_strtod_l+0x73e>
 8006b76:	e605      	b.n	8006784 <_strtod_l+0x47c>
 8006b78:	08009568 	.word	0x08009568
 8006b7c:	fffffc02 	.word	0xfffffc02
 8006b80:	7ff00000 	.word	0x7ff00000
 8006b84:	39500000 	.word	0x39500000
 8006b88:	46ca      	mov	sl, r9
 8006b8a:	d165      	bne.n	8006c58 <_strtod_l+0x950>
 8006b8c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006b8e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006b92:	b352      	cbz	r2, 8006bea <_strtod_l+0x8e2>
 8006b94:	4a9e      	ldr	r2, [pc, #632]	; (8006e10 <_strtod_l+0xb08>)
 8006b96:	4293      	cmp	r3, r2
 8006b98:	d12a      	bne.n	8006bf0 <_strtod_l+0x8e8>
 8006b9a:	9b05      	ldr	r3, [sp, #20]
 8006b9c:	4641      	mov	r1, r8
 8006b9e:	b1fb      	cbz	r3, 8006be0 <_strtod_l+0x8d8>
 8006ba0:	4b9c      	ldr	r3, [pc, #624]	; (8006e14 <_strtod_l+0xb0c>)
 8006ba2:	f04f 32ff 	mov.w	r2, #4294967295
 8006ba6:	ea09 0303 	and.w	r3, r9, r3
 8006baa:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006bae:	d81a      	bhi.n	8006be6 <_strtod_l+0x8de>
 8006bb0:	0d1b      	lsrs	r3, r3, #20
 8006bb2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8006bba:	4299      	cmp	r1, r3
 8006bbc:	d118      	bne.n	8006bf0 <_strtod_l+0x8e8>
 8006bbe:	4b96      	ldr	r3, [pc, #600]	; (8006e18 <_strtod_l+0xb10>)
 8006bc0:	459a      	cmp	sl, r3
 8006bc2:	d102      	bne.n	8006bca <_strtod_l+0x8c2>
 8006bc4:	3101      	adds	r1, #1
 8006bc6:	f43f addd 	beq.w	8006784 <_strtod_l+0x47c>
 8006bca:	f04f 0800 	mov.w	r8, #0
 8006bce:	4b91      	ldr	r3, [pc, #580]	; (8006e14 <_strtod_l+0xb0c>)
 8006bd0:	ea0a 0303 	and.w	r3, sl, r3
 8006bd4:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8006bd8:	9b05      	ldr	r3, [sp, #20]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d19a      	bne.n	8006b14 <_strtod_l+0x80c>
 8006bde:	e5db      	b.n	8006798 <_strtod_l+0x490>
 8006be0:	f04f 33ff 	mov.w	r3, #4294967295
 8006be4:	e7e9      	b.n	8006bba <_strtod_l+0x8b2>
 8006be6:	4613      	mov	r3, r2
 8006be8:	e7e7      	b.n	8006bba <_strtod_l+0x8b2>
 8006bea:	ea53 0308 	orrs.w	r3, r3, r8
 8006bee:	d081      	beq.n	8006af4 <_strtod_l+0x7ec>
 8006bf0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006bf2:	b1e3      	cbz	r3, 8006c2e <_strtod_l+0x926>
 8006bf4:	ea13 0f0a 	tst.w	r3, sl
 8006bf8:	d0ee      	beq.n	8006bd8 <_strtod_l+0x8d0>
 8006bfa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006bfc:	4640      	mov	r0, r8
 8006bfe:	4649      	mov	r1, r9
 8006c00:	9a05      	ldr	r2, [sp, #20]
 8006c02:	b1c3      	cbz	r3, 8006c36 <_strtod_l+0x92e>
 8006c04:	f7ff fb5c 	bl	80062c0 <sulp>
 8006c08:	4602      	mov	r2, r0
 8006c0a:	460b      	mov	r3, r1
 8006c0c:	980c      	ldr	r0, [sp, #48]	; 0x30
 8006c0e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006c10:	f7f9 fb60 	bl	80002d4 <__adddf3>
 8006c14:	4680      	mov	r8, r0
 8006c16:	4689      	mov	r9, r1
 8006c18:	e7de      	b.n	8006bd8 <_strtod_l+0x8d0>
 8006c1a:	4013      	ands	r3, r2
 8006c1c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8006c20:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8006c24:	f04f 38ff 	mov.w	r8, #4294967295
 8006c28:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8006c2c:	e7d4      	b.n	8006bd8 <_strtod_l+0x8d0>
 8006c2e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006c30:	ea13 0f08 	tst.w	r3, r8
 8006c34:	e7e0      	b.n	8006bf8 <_strtod_l+0x8f0>
 8006c36:	f7ff fb43 	bl	80062c0 <sulp>
 8006c3a:	4602      	mov	r2, r0
 8006c3c:	460b      	mov	r3, r1
 8006c3e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8006c40:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006c42:	f7f9 fb45 	bl	80002d0 <__aeabi_dsub>
 8006c46:	2200      	movs	r2, #0
 8006c48:	2300      	movs	r3, #0
 8006c4a:	4680      	mov	r8, r0
 8006c4c:	4689      	mov	r9, r1
 8006c4e:	f7f9 ff5f 	bl	8000b10 <__aeabi_dcmpeq>
 8006c52:	2800      	cmp	r0, #0
 8006c54:	d0c0      	beq.n	8006bd8 <_strtod_l+0x8d0>
 8006c56:	e606      	b.n	8006866 <_strtod_l+0x55e>
 8006c58:	4659      	mov	r1, fp
 8006c5a:	4630      	mov	r0, r6
 8006c5c:	f7ff fabe 	bl	80061dc <__ratio>
 8006c60:	4602      	mov	r2, r0
 8006c62:	460b      	mov	r3, r1
 8006c64:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8006c68:	2200      	movs	r2, #0
 8006c6a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006c6e:	f7f9 ff63 	bl	8000b38 <__aeabi_dcmple>
 8006c72:	2800      	cmp	r0, #0
 8006c74:	d06f      	beq.n	8006d56 <_strtod_l+0xa4e>
 8006c76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d17c      	bne.n	8006d76 <_strtod_l+0xa6e>
 8006c7c:	f1b8 0f00 	cmp.w	r8, #0
 8006c80:	d159      	bne.n	8006d36 <_strtod_l+0xa2e>
 8006c82:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d17b      	bne.n	8006d82 <_strtod_l+0xa7a>
 8006c8a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006c8e:	2200      	movs	r2, #0
 8006c90:	4b62      	ldr	r3, [pc, #392]	; (8006e1c <_strtod_l+0xb14>)
 8006c92:	f7f9 ff47 	bl	8000b24 <__aeabi_dcmplt>
 8006c96:	2800      	cmp	r0, #0
 8006c98:	d15a      	bne.n	8006d50 <_strtod_l+0xa48>
 8006c9a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	4b5f      	ldr	r3, [pc, #380]	; (8006e20 <_strtod_l+0xb18>)
 8006ca2:	f7f9 fccd 	bl	8000640 <__aeabi_dmul>
 8006ca6:	4605      	mov	r5, r0
 8006ca8:	460f      	mov	r7, r1
 8006caa:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8006cae:	9506      	str	r5, [sp, #24]
 8006cb0:	9307      	str	r3, [sp, #28]
 8006cb2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006cb6:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8006cba:	4b56      	ldr	r3, [pc, #344]	; (8006e14 <_strtod_l+0xb0c>)
 8006cbc:	4a55      	ldr	r2, [pc, #340]	; (8006e14 <_strtod_l+0xb0c>)
 8006cbe:	ea0a 0303 	and.w	r3, sl, r3
 8006cc2:	9313      	str	r3, [sp, #76]	; 0x4c
 8006cc4:	4b57      	ldr	r3, [pc, #348]	; (8006e24 <_strtod_l+0xb1c>)
 8006cc6:	ea0a 0202 	and.w	r2, sl, r2
 8006cca:	429a      	cmp	r2, r3
 8006ccc:	f040 80b0 	bne.w	8006e30 <_strtod_l+0xb28>
 8006cd0:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8006cd4:	4640      	mov	r0, r8
 8006cd6:	4649      	mov	r1, r9
 8006cd8:	f7ff f9c2 	bl	8006060 <__ulp>
 8006cdc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006ce0:	f7f9 fcae 	bl	8000640 <__aeabi_dmul>
 8006ce4:	4642      	mov	r2, r8
 8006ce6:	464b      	mov	r3, r9
 8006ce8:	f7f9 faf4 	bl	80002d4 <__adddf3>
 8006cec:	f8df a124 	ldr.w	sl, [pc, #292]	; 8006e14 <_strtod_l+0xb0c>
 8006cf0:	4a4d      	ldr	r2, [pc, #308]	; (8006e28 <_strtod_l+0xb20>)
 8006cf2:	ea01 0a0a 	and.w	sl, r1, sl
 8006cf6:	4592      	cmp	sl, r2
 8006cf8:	4680      	mov	r8, r0
 8006cfa:	d948      	bls.n	8006d8e <_strtod_l+0xa86>
 8006cfc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006cfe:	4b46      	ldr	r3, [pc, #280]	; (8006e18 <_strtod_l+0xb10>)
 8006d00:	429a      	cmp	r2, r3
 8006d02:	d103      	bne.n	8006d0c <_strtod_l+0xa04>
 8006d04:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006d06:	3301      	adds	r3, #1
 8006d08:	f43f ad3c 	beq.w	8006784 <_strtod_l+0x47c>
 8006d0c:	f04f 38ff 	mov.w	r8, #4294967295
 8006d10:	f8df 9104 	ldr.w	r9, [pc, #260]	; 8006e18 <_strtod_l+0xb10>
 8006d14:	4620      	mov	r0, r4
 8006d16:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006d18:	f7fe fe76 	bl	8005a08 <_Bfree>
 8006d1c:	4620      	mov	r0, r4
 8006d1e:	9908      	ldr	r1, [sp, #32]
 8006d20:	f7fe fe72 	bl	8005a08 <_Bfree>
 8006d24:	4659      	mov	r1, fp
 8006d26:	4620      	mov	r0, r4
 8006d28:	f7fe fe6e 	bl	8005a08 <_Bfree>
 8006d2c:	4631      	mov	r1, r6
 8006d2e:	4620      	mov	r0, r4
 8006d30:	f7fe fe6a 	bl	8005a08 <_Bfree>
 8006d34:	e605      	b.n	8006942 <_strtod_l+0x63a>
 8006d36:	f1b8 0f01 	cmp.w	r8, #1
 8006d3a:	d103      	bne.n	8006d44 <_strtod_l+0xa3c>
 8006d3c:	f1b9 0f00 	cmp.w	r9, #0
 8006d40:	f43f ad91 	beq.w	8006866 <_strtod_l+0x55e>
 8006d44:	2200      	movs	r2, #0
 8006d46:	4b39      	ldr	r3, [pc, #228]	; (8006e2c <_strtod_l+0xb24>)
 8006d48:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8006d4a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006d4e:	e016      	b.n	8006d7e <_strtod_l+0xa76>
 8006d50:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8006d52:	4f33      	ldr	r7, [pc, #204]	; (8006e20 <_strtod_l+0xb18>)
 8006d54:	e7a9      	b.n	8006caa <_strtod_l+0x9a2>
 8006d56:	4b32      	ldr	r3, [pc, #200]	; (8006e20 <_strtod_l+0xb18>)
 8006d58:	2200      	movs	r2, #0
 8006d5a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006d5e:	f7f9 fc6f 	bl	8000640 <__aeabi_dmul>
 8006d62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d64:	4605      	mov	r5, r0
 8006d66:	460f      	mov	r7, r1
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d09e      	beq.n	8006caa <_strtod_l+0x9a2>
 8006d6c:	4602      	mov	r2, r0
 8006d6e:	460b      	mov	r3, r1
 8006d70:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006d74:	e79d      	b.n	8006cb2 <_strtod_l+0x9aa>
 8006d76:	2200      	movs	r2, #0
 8006d78:	4b28      	ldr	r3, [pc, #160]	; (8006e1c <_strtod_l+0xb14>)
 8006d7a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006d7e:	4f27      	ldr	r7, [pc, #156]	; (8006e1c <_strtod_l+0xb14>)
 8006d80:	e797      	b.n	8006cb2 <_strtod_l+0x9aa>
 8006d82:	2200      	movs	r2, #0
 8006d84:	4b29      	ldr	r3, [pc, #164]	; (8006e2c <_strtod_l+0xb24>)
 8006d86:	4645      	mov	r5, r8
 8006d88:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006d8c:	e7f7      	b.n	8006d7e <_strtod_l+0xa76>
 8006d8e:	f101 7954 	add.w	r9, r1, #55574528	; 0x3500000
 8006d92:	9b05      	ldr	r3, [sp, #20]
 8006d94:	46ca      	mov	sl, r9
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d1bc      	bne.n	8006d14 <_strtod_l+0xa0c>
 8006d9a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006d9e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006da0:	0d1b      	lsrs	r3, r3, #20
 8006da2:	051b      	lsls	r3, r3, #20
 8006da4:	429a      	cmp	r2, r3
 8006da6:	d1b5      	bne.n	8006d14 <_strtod_l+0xa0c>
 8006da8:	4628      	mov	r0, r5
 8006daa:	4639      	mov	r1, r7
 8006dac:	f7f9 ffb6 	bl	8000d1c <__aeabi_d2lz>
 8006db0:	f7f9 fc18 	bl	80005e4 <__aeabi_l2d>
 8006db4:	4602      	mov	r2, r0
 8006db6:	460b      	mov	r3, r1
 8006db8:	4628      	mov	r0, r5
 8006dba:	4639      	mov	r1, r7
 8006dbc:	f7f9 fa88 	bl	80002d0 <__aeabi_dsub>
 8006dc0:	460b      	mov	r3, r1
 8006dc2:	4602      	mov	r2, r0
 8006dc4:	f3c9 0a13 	ubfx	sl, r9, #0, #20
 8006dc8:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8006dcc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006dce:	ea4a 0a08 	orr.w	sl, sl, r8
 8006dd2:	ea5a 0a03 	orrs.w	sl, sl, r3
 8006dd6:	d06c      	beq.n	8006eb2 <_strtod_l+0xbaa>
 8006dd8:	a309      	add	r3, pc, #36	; (adr r3, 8006e00 <_strtod_l+0xaf8>)
 8006dda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dde:	f7f9 fea1 	bl	8000b24 <__aeabi_dcmplt>
 8006de2:	2800      	cmp	r0, #0
 8006de4:	f47f acd8 	bne.w	8006798 <_strtod_l+0x490>
 8006de8:	a307      	add	r3, pc, #28	; (adr r3, 8006e08 <_strtod_l+0xb00>)
 8006dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006df2:	f7f9 feb5 	bl	8000b60 <__aeabi_dcmpgt>
 8006df6:	2800      	cmp	r0, #0
 8006df8:	d08c      	beq.n	8006d14 <_strtod_l+0xa0c>
 8006dfa:	e4cd      	b.n	8006798 <_strtod_l+0x490>
 8006dfc:	f3af 8000 	nop.w
 8006e00:	94a03595 	.word	0x94a03595
 8006e04:	3fdfffff 	.word	0x3fdfffff
 8006e08:	35afe535 	.word	0x35afe535
 8006e0c:	3fe00000 	.word	0x3fe00000
 8006e10:	000fffff 	.word	0x000fffff
 8006e14:	7ff00000 	.word	0x7ff00000
 8006e18:	7fefffff 	.word	0x7fefffff
 8006e1c:	3ff00000 	.word	0x3ff00000
 8006e20:	3fe00000 	.word	0x3fe00000
 8006e24:	7fe00000 	.word	0x7fe00000
 8006e28:	7c9fffff 	.word	0x7c9fffff
 8006e2c:	bff00000 	.word	0xbff00000
 8006e30:	9b05      	ldr	r3, [sp, #20]
 8006e32:	b333      	cbz	r3, 8006e82 <_strtod_l+0xb7a>
 8006e34:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006e36:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006e3a:	d822      	bhi.n	8006e82 <_strtod_l+0xb7a>
 8006e3c:	a328      	add	r3, pc, #160	; (adr r3, 8006ee0 <_strtod_l+0xbd8>)
 8006e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e42:	4628      	mov	r0, r5
 8006e44:	4639      	mov	r1, r7
 8006e46:	f7f9 fe77 	bl	8000b38 <__aeabi_dcmple>
 8006e4a:	b1a0      	cbz	r0, 8006e76 <_strtod_l+0xb6e>
 8006e4c:	4639      	mov	r1, r7
 8006e4e:	4628      	mov	r0, r5
 8006e50:	f7f9 fece 	bl	8000bf0 <__aeabi_d2uiz>
 8006e54:	2801      	cmp	r0, #1
 8006e56:	bf38      	it	cc
 8006e58:	2001      	movcc	r0, #1
 8006e5a:	f7f9 fb77 	bl	800054c <__aeabi_ui2d>
 8006e5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e60:	4605      	mov	r5, r0
 8006e62:	460f      	mov	r7, r1
 8006e64:	bb03      	cbnz	r3, 8006ea8 <_strtod_l+0xba0>
 8006e66:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006e6a:	9014      	str	r0, [sp, #80]	; 0x50
 8006e6c:	9315      	str	r3, [sp, #84]	; 0x54
 8006e6e:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8006e72:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8006e76:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006e78:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006e7a:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8006e7e:	1a9b      	subs	r3, r3, r2
 8006e80:	9311      	str	r3, [sp, #68]	; 0x44
 8006e82:	980c      	ldr	r0, [sp, #48]	; 0x30
 8006e84:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006e86:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
 8006e8a:	f7ff f8e9 	bl	8006060 <__ulp>
 8006e8e:	4602      	mov	r2, r0
 8006e90:	460b      	mov	r3, r1
 8006e92:	4640      	mov	r0, r8
 8006e94:	4649      	mov	r1, r9
 8006e96:	f7f9 fbd3 	bl	8000640 <__aeabi_dmul>
 8006e9a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006e9c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006e9e:	f7f9 fa19 	bl	80002d4 <__adddf3>
 8006ea2:	4680      	mov	r8, r0
 8006ea4:	4689      	mov	r9, r1
 8006ea6:	e774      	b.n	8006d92 <_strtod_l+0xa8a>
 8006ea8:	4602      	mov	r2, r0
 8006eaa:	460b      	mov	r3, r1
 8006eac:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8006eb0:	e7dd      	b.n	8006e6e <_strtod_l+0xb66>
 8006eb2:	a30d      	add	r3, pc, #52	; (adr r3, 8006ee8 <_strtod_l+0xbe0>)
 8006eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eb8:	f7f9 fe34 	bl	8000b24 <__aeabi_dcmplt>
 8006ebc:	e79b      	b.n	8006df6 <_strtod_l+0xaee>
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	930e      	str	r3, [sp, #56]	; 0x38
 8006ec2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006ec4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006ec6:	6013      	str	r3, [r2, #0]
 8006ec8:	f7ff ba5b 	b.w	8006382 <_strtod_l+0x7a>
 8006ecc:	2a65      	cmp	r2, #101	; 0x65
 8006ece:	f43f ab52 	beq.w	8006576 <_strtod_l+0x26e>
 8006ed2:	2a45      	cmp	r2, #69	; 0x45
 8006ed4:	f43f ab4f 	beq.w	8006576 <_strtod_l+0x26e>
 8006ed8:	2301      	movs	r3, #1
 8006eda:	f7ff bb87 	b.w	80065ec <_strtod_l+0x2e4>
 8006ede:	bf00      	nop
 8006ee0:	ffc00000 	.word	0xffc00000
 8006ee4:	41dfffff 	.word	0x41dfffff
 8006ee8:	94a03595 	.word	0x94a03595
 8006eec:	3fcfffff 	.word	0x3fcfffff

08006ef0 <_strtod_r>:
 8006ef0:	4b01      	ldr	r3, [pc, #4]	; (8006ef8 <_strtod_r+0x8>)
 8006ef2:	f7ff ba09 	b.w	8006308 <_strtod_l>
 8006ef6:	bf00      	nop
 8006ef8:	20000068 	.word	0x20000068

08006efc <_strtol_l.constprop.0>:
 8006efc:	2b01      	cmp	r3, #1
 8006efe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f02:	4686      	mov	lr, r0
 8006f04:	4690      	mov	r8, r2
 8006f06:	d001      	beq.n	8006f0c <_strtol_l.constprop.0+0x10>
 8006f08:	2b24      	cmp	r3, #36	; 0x24
 8006f0a:	d906      	bls.n	8006f1a <_strtol_l.constprop.0+0x1e>
 8006f0c:	f7fd fd88 	bl	8004a20 <__errno>
 8006f10:	2316      	movs	r3, #22
 8006f12:	6003      	str	r3, [r0, #0]
 8006f14:	2000      	movs	r0, #0
 8006f16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f1a:	460d      	mov	r5, r1
 8006f1c:	4835      	ldr	r0, [pc, #212]	; (8006ff4 <_strtol_l.constprop.0+0xf8>)
 8006f1e:	462a      	mov	r2, r5
 8006f20:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006f24:	5d06      	ldrb	r6, [r0, r4]
 8006f26:	f016 0608 	ands.w	r6, r6, #8
 8006f2a:	d1f8      	bne.n	8006f1e <_strtol_l.constprop.0+0x22>
 8006f2c:	2c2d      	cmp	r4, #45	; 0x2d
 8006f2e:	d12e      	bne.n	8006f8e <_strtol_l.constprop.0+0x92>
 8006f30:	2601      	movs	r6, #1
 8006f32:	782c      	ldrb	r4, [r5, #0]
 8006f34:	1c95      	adds	r5, r2, #2
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d057      	beq.n	8006fea <_strtol_l.constprop.0+0xee>
 8006f3a:	2b10      	cmp	r3, #16
 8006f3c:	d109      	bne.n	8006f52 <_strtol_l.constprop.0+0x56>
 8006f3e:	2c30      	cmp	r4, #48	; 0x30
 8006f40:	d107      	bne.n	8006f52 <_strtol_l.constprop.0+0x56>
 8006f42:	782a      	ldrb	r2, [r5, #0]
 8006f44:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8006f48:	2a58      	cmp	r2, #88	; 0x58
 8006f4a:	d149      	bne.n	8006fe0 <_strtol_l.constprop.0+0xe4>
 8006f4c:	2310      	movs	r3, #16
 8006f4e:	786c      	ldrb	r4, [r5, #1]
 8006f50:	3502      	adds	r5, #2
 8006f52:	2200      	movs	r2, #0
 8006f54:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 8006f58:	f10c 3cff 	add.w	ip, ip, #4294967295
 8006f5c:	fbbc f9f3 	udiv	r9, ip, r3
 8006f60:	4610      	mov	r0, r2
 8006f62:	fb03 ca19 	mls	sl, r3, r9, ip
 8006f66:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8006f6a:	2f09      	cmp	r7, #9
 8006f6c:	d814      	bhi.n	8006f98 <_strtol_l.constprop.0+0x9c>
 8006f6e:	463c      	mov	r4, r7
 8006f70:	42a3      	cmp	r3, r4
 8006f72:	dd20      	ble.n	8006fb6 <_strtol_l.constprop.0+0xba>
 8006f74:	1c57      	adds	r7, r2, #1
 8006f76:	d007      	beq.n	8006f88 <_strtol_l.constprop.0+0x8c>
 8006f78:	4581      	cmp	r9, r0
 8006f7a:	d319      	bcc.n	8006fb0 <_strtol_l.constprop.0+0xb4>
 8006f7c:	d101      	bne.n	8006f82 <_strtol_l.constprop.0+0x86>
 8006f7e:	45a2      	cmp	sl, r4
 8006f80:	db16      	blt.n	8006fb0 <_strtol_l.constprop.0+0xb4>
 8006f82:	2201      	movs	r2, #1
 8006f84:	fb00 4003 	mla	r0, r0, r3, r4
 8006f88:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006f8c:	e7eb      	b.n	8006f66 <_strtol_l.constprop.0+0x6a>
 8006f8e:	2c2b      	cmp	r4, #43	; 0x2b
 8006f90:	bf04      	itt	eq
 8006f92:	782c      	ldrbeq	r4, [r5, #0]
 8006f94:	1c95      	addeq	r5, r2, #2
 8006f96:	e7ce      	b.n	8006f36 <_strtol_l.constprop.0+0x3a>
 8006f98:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8006f9c:	2f19      	cmp	r7, #25
 8006f9e:	d801      	bhi.n	8006fa4 <_strtol_l.constprop.0+0xa8>
 8006fa0:	3c37      	subs	r4, #55	; 0x37
 8006fa2:	e7e5      	b.n	8006f70 <_strtol_l.constprop.0+0x74>
 8006fa4:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8006fa8:	2f19      	cmp	r7, #25
 8006faa:	d804      	bhi.n	8006fb6 <_strtol_l.constprop.0+0xba>
 8006fac:	3c57      	subs	r4, #87	; 0x57
 8006fae:	e7df      	b.n	8006f70 <_strtol_l.constprop.0+0x74>
 8006fb0:	f04f 32ff 	mov.w	r2, #4294967295
 8006fb4:	e7e8      	b.n	8006f88 <_strtol_l.constprop.0+0x8c>
 8006fb6:	1c53      	adds	r3, r2, #1
 8006fb8:	d108      	bne.n	8006fcc <_strtol_l.constprop.0+0xd0>
 8006fba:	2322      	movs	r3, #34	; 0x22
 8006fbc:	4660      	mov	r0, ip
 8006fbe:	f8ce 3000 	str.w	r3, [lr]
 8006fc2:	f1b8 0f00 	cmp.w	r8, #0
 8006fc6:	d0a6      	beq.n	8006f16 <_strtol_l.constprop.0+0x1a>
 8006fc8:	1e69      	subs	r1, r5, #1
 8006fca:	e006      	b.n	8006fda <_strtol_l.constprop.0+0xde>
 8006fcc:	b106      	cbz	r6, 8006fd0 <_strtol_l.constprop.0+0xd4>
 8006fce:	4240      	negs	r0, r0
 8006fd0:	f1b8 0f00 	cmp.w	r8, #0
 8006fd4:	d09f      	beq.n	8006f16 <_strtol_l.constprop.0+0x1a>
 8006fd6:	2a00      	cmp	r2, #0
 8006fd8:	d1f6      	bne.n	8006fc8 <_strtol_l.constprop.0+0xcc>
 8006fda:	f8c8 1000 	str.w	r1, [r8]
 8006fde:	e79a      	b.n	8006f16 <_strtol_l.constprop.0+0x1a>
 8006fe0:	2430      	movs	r4, #48	; 0x30
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d1b5      	bne.n	8006f52 <_strtol_l.constprop.0+0x56>
 8006fe6:	2308      	movs	r3, #8
 8006fe8:	e7b3      	b.n	8006f52 <_strtol_l.constprop.0+0x56>
 8006fea:	2c30      	cmp	r4, #48	; 0x30
 8006fec:	d0a9      	beq.n	8006f42 <_strtol_l.constprop.0+0x46>
 8006fee:	230a      	movs	r3, #10
 8006ff0:	e7af      	b.n	8006f52 <_strtol_l.constprop.0+0x56>
 8006ff2:	bf00      	nop
 8006ff4:	08009591 	.word	0x08009591

08006ff8 <_strtol_r>:
 8006ff8:	f7ff bf80 	b.w	8006efc <_strtol_l.constprop.0>

08006ffc <__ssputs_r>:
 8006ffc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007000:	461f      	mov	r7, r3
 8007002:	688e      	ldr	r6, [r1, #8]
 8007004:	4682      	mov	sl, r0
 8007006:	42be      	cmp	r6, r7
 8007008:	460c      	mov	r4, r1
 800700a:	4690      	mov	r8, r2
 800700c:	680b      	ldr	r3, [r1, #0]
 800700e:	d82c      	bhi.n	800706a <__ssputs_r+0x6e>
 8007010:	898a      	ldrh	r2, [r1, #12]
 8007012:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007016:	d026      	beq.n	8007066 <__ssputs_r+0x6a>
 8007018:	6965      	ldr	r5, [r4, #20]
 800701a:	6909      	ldr	r1, [r1, #16]
 800701c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007020:	eba3 0901 	sub.w	r9, r3, r1
 8007024:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007028:	1c7b      	adds	r3, r7, #1
 800702a:	444b      	add	r3, r9
 800702c:	106d      	asrs	r5, r5, #1
 800702e:	429d      	cmp	r5, r3
 8007030:	bf38      	it	cc
 8007032:	461d      	movcc	r5, r3
 8007034:	0553      	lsls	r3, r2, #21
 8007036:	d527      	bpl.n	8007088 <__ssputs_r+0x8c>
 8007038:	4629      	mov	r1, r5
 800703a:	f7fe fc19 	bl	8005870 <_malloc_r>
 800703e:	4606      	mov	r6, r0
 8007040:	b360      	cbz	r0, 800709c <__ssputs_r+0xa0>
 8007042:	464a      	mov	r2, r9
 8007044:	6921      	ldr	r1, [r4, #16]
 8007046:	f000 fa17 	bl	8007478 <memcpy>
 800704a:	89a3      	ldrh	r3, [r4, #12]
 800704c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007050:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007054:	81a3      	strh	r3, [r4, #12]
 8007056:	6126      	str	r6, [r4, #16]
 8007058:	444e      	add	r6, r9
 800705a:	6026      	str	r6, [r4, #0]
 800705c:	463e      	mov	r6, r7
 800705e:	6165      	str	r5, [r4, #20]
 8007060:	eba5 0509 	sub.w	r5, r5, r9
 8007064:	60a5      	str	r5, [r4, #8]
 8007066:	42be      	cmp	r6, r7
 8007068:	d900      	bls.n	800706c <__ssputs_r+0x70>
 800706a:	463e      	mov	r6, r7
 800706c:	4632      	mov	r2, r6
 800706e:	4641      	mov	r1, r8
 8007070:	6820      	ldr	r0, [r4, #0]
 8007072:	f000 f9c5 	bl	8007400 <memmove>
 8007076:	2000      	movs	r0, #0
 8007078:	68a3      	ldr	r3, [r4, #8]
 800707a:	1b9b      	subs	r3, r3, r6
 800707c:	60a3      	str	r3, [r4, #8]
 800707e:	6823      	ldr	r3, [r4, #0]
 8007080:	4433      	add	r3, r6
 8007082:	6023      	str	r3, [r4, #0]
 8007084:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007088:	462a      	mov	r2, r5
 800708a:	f000 fda6 	bl	8007bda <_realloc_r>
 800708e:	4606      	mov	r6, r0
 8007090:	2800      	cmp	r0, #0
 8007092:	d1e0      	bne.n	8007056 <__ssputs_r+0x5a>
 8007094:	4650      	mov	r0, sl
 8007096:	6921      	ldr	r1, [r4, #16]
 8007098:	f7fe fb7a 	bl	8005790 <_free_r>
 800709c:	230c      	movs	r3, #12
 800709e:	f8ca 3000 	str.w	r3, [sl]
 80070a2:	89a3      	ldrh	r3, [r4, #12]
 80070a4:	f04f 30ff 	mov.w	r0, #4294967295
 80070a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80070ac:	81a3      	strh	r3, [r4, #12]
 80070ae:	e7e9      	b.n	8007084 <__ssputs_r+0x88>

080070b0 <_svfiprintf_r>:
 80070b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070b4:	4698      	mov	r8, r3
 80070b6:	898b      	ldrh	r3, [r1, #12]
 80070b8:	4607      	mov	r7, r0
 80070ba:	061b      	lsls	r3, r3, #24
 80070bc:	460d      	mov	r5, r1
 80070be:	4614      	mov	r4, r2
 80070c0:	b09d      	sub	sp, #116	; 0x74
 80070c2:	d50e      	bpl.n	80070e2 <_svfiprintf_r+0x32>
 80070c4:	690b      	ldr	r3, [r1, #16]
 80070c6:	b963      	cbnz	r3, 80070e2 <_svfiprintf_r+0x32>
 80070c8:	2140      	movs	r1, #64	; 0x40
 80070ca:	f7fe fbd1 	bl	8005870 <_malloc_r>
 80070ce:	6028      	str	r0, [r5, #0]
 80070d0:	6128      	str	r0, [r5, #16]
 80070d2:	b920      	cbnz	r0, 80070de <_svfiprintf_r+0x2e>
 80070d4:	230c      	movs	r3, #12
 80070d6:	603b      	str	r3, [r7, #0]
 80070d8:	f04f 30ff 	mov.w	r0, #4294967295
 80070dc:	e0d0      	b.n	8007280 <_svfiprintf_r+0x1d0>
 80070de:	2340      	movs	r3, #64	; 0x40
 80070e0:	616b      	str	r3, [r5, #20]
 80070e2:	2300      	movs	r3, #0
 80070e4:	9309      	str	r3, [sp, #36]	; 0x24
 80070e6:	2320      	movs	r3, #32
 80070e8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80070ec:	2330      	movs	r3, #48	; 0x30
 80070ee:	f04f 0901 	mov.w	r9, #1
 80070f2:	f8cd 800c 	str.w	r8, [sp, #12]
 80070f6:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8007298 <_svfiprintf_r+0x1e8>
 80070fa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80070fe:	4623      	mov	r3, r4
 8007100:	469a      	mov	sl, r3
 8007102:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007106:	b10a      	cbz	r2, 800710c <_svfiprintf_r+0x5c>
 8007108:	2a25      	cmp	r2, #37	; 0x25
 800710a:	d1f9      	bne.n	8007100 <_svfiprintf_r+0x50>
 800710c:	ebba 0b04 	subs.w	fp, sl, r4
 8007110:	d00b      	beq.n	800712a <_svfiprintf_r+0x7a>
 8007112:	465b      	mov	r3, fp
 8007114:	4622      	mov	r2, r4
 8007116:	4629      	mov	r1, r5
 8007118:	4638      	mov	r0, r7
 800711a:	f7ff ff6f 	bl	8006ffc <__ssputs_r>
 800711e:	3001      	adds	r0, #1
 8007120:	f000 80a9 	beq.w	8007276 <_svfiprintf_r+0x1c6>
 8007124:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007126:	445a      	add	r2, fp
 8007128:	9209      	str	r2, [sp, #36]	; 0x24
 800712a:	f89a 3000 	ldrb.w	r3, [sl]
 800712e:	2b00      	cmp	r3, #0
 8007130:	f000 80a1 	beq.w	8007276 <_svfiprintf_r+0x1c6>
 8007134:	2300      	movs	r3, #0
 8007136:	f04f 32ff 	mov.w	r2, #4294967295
 800713a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800713e:	f10a 0a01 	add.w	sl, sl, #1
 8007142:	9304      	str	r3, [sp, #16]
 8007144:	9307      	str	r3, [sp, #28]
 8007146:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800714a:	931a      	str	r3, [sp, #104]	; 0x68
 800714c:	4654      	mov	r4, sl
 800714e:	2205      	movs	r2, #5
 8007150:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007154:	4850      	ldr	r0, [pc, #320]	; (8007298 <_svfiprintf_r+0x1e8>)
 8007156:	f7fd fc98 	bl	8004a8a <memchr>
 800715a:	9a04      	ldr	r2, [sp, #16]
 800715c:	b9d8      	cbnz	r0, 8007196 <_svfiprintf_r+0xe6>
 800715e:	06d0      	lsls	r0, r2, #27
 8007160:	bf44      	itt	mi
 8007162:	2320      	movmi	r3, #32
 8007164:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007168:	0711      	lsls	r1, r2, #28
 800716a:	bf44      	itt	mi
 800716c:	232b      	movmi	r3, #43	; 0x2b
 800716e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007172:	f89a 3000 	ldrb.w	r3, [sl]
 8007176:	2b2a      	cmp	r3, #42	; 0x2a
 8007178:	d015      	beq.n	80071a6 <_svfiprintf_r+0xf6>
 800717a:	4654      	mov	r4, sl
 800717c:	2000      	movs	r0, #0
 800717e:	f04f 0c0a 	mov.w	ip, #10
 8007182:	9a07      	ldr	r2, [sp, #28]
 8007184:	4621      	mov	r1, r4
 8007186:	f811 3b01 	ldrb.w	r3, [r1], #1
 800718a:	3b30      	subs	r3, #48	; 0x30
 800718c:	2b09      	cmp	r3, #9
 800718e:	d94d      	bls.n	800722c <_svfiprintf_r+0x17c>
 8007190:	b1b0      	cbz	r0, 80071c0 <_svfiprintf_r+0x110>
 8007192:	9207      	str	r2, [sp, #28]
 8007194:	e014      	b.n	80071c0 <_svfiprintf_r+0x110>
 8007196:	eba0 0308 	sub.w	r3, r0, r8
 800719a:	fa09 f303 	lsl.w	r3, r9, r3
 800719e:	4313      	orrs	r3, r2
 80071a0:	46a2      	mov	sl, r4
 80071a2:	9304      	str	r3, [sp, #16]
 80071a4:	e7d2      	b.n	800714c <_svfiprintf_r+0x9c>
 80071a6:	9b03      	ldr	r3, [sp, #12]
 80071a8:	1d19      	adds	r1, r3, #4
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	9103      	str	r1, [sp, #12]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	bfbb      	ittet	lt
 80071b2:	425b      	neglt	r3, r3
 80071b4:	f042 0202 	orrlt.w	r2, r2, #2
 80071b8:	9307      	strge	r3, [sp, #28]
 80071ba:	9307      	strlt	r3, [sp, #28]
 80071bc:	bfb8      	it	lt
 80071be:	9204      	strlt	r2, [sp, #16]
 80071c0:	7823      	ldrb	r3, [r4, #0]
 80071c2:	2b2e      	cmp	r3, #46	; 0x2e
 80071c4:	d10c      	bne.n	80071e0 <_svfiprintf_r+0x130>
 80071c6:	7863      	ldrb	r3, [r4, #1]
 80071c8:	2b2a      	cmp	r3, #42	; 0x2a
 80071ca:	d134      	bne.n	8007236 <_svfiprintf_r+0x186>
 80071cc:	9b03      	ldr	r3, [sp, #12]
 80071ce:	3402      	adds	r4, #2
 80071d0:	1d1a      	adds	r2, r3, #4
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	9203      	str	r2, [sp, #12]
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	bfb8      	it	lt
 80071da:	f04f 33ff 	movlt.w	r3, #4294967295
 80071de:	9305      	str	r3, [sp, #20]
 80071e0:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800729c <_svfiprintf_r+0x1ec>
 80071e4:	2203      	movs	r2, #3
 80071e6:	4650      	mov	r0, sl
 80071e8:	7821      	ldrb	r1, [r4, #0]
 80071ea:	f7fd fc4e 	bl	8004a8a <memchr>
 80071ee:	b138      	cbz	r0, 8007200 <_svfiprintf_r+0x150>
 80071f0:	2240      	movs	r2, #64	; 0x40
 80071f2:	9b04      	ldr	r3, [sp, #16]
 80071f4:	eba0 000a 	sub.w	r0, r0, sl
 80071f8:	4082      	lsls	r2, r0
 80071fa:	4313      	orrs	r3, r2
 80071fc:	3401      	adds	r4, #1
 80071fe:	9304      	str	r3, [sp, #16]
 8007200:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007204:	2206      	movs	r2, #6
 8007206:	4826      	ldr	r0, [pc, #152]	; (80072a0 <_svfiprintf_r+0x1f0>)
 8007208:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800720c:	f7fd fc3d 	bl	8004a8a <memchr>
 8007210:	2800      	cmp	r0, #0
 8007212:	d038      	beq.n	8007286 <_svfiprintf_r+0x1d6>
 8007214:	4b23      	ldr	r3, [pc, #140]	; (80072a4 <_svfiprintf_r+0x1f4>)
 8007216:	bb1b      	cbnz	r3, 8007260 <_svfiprintf_r+0x1b0>
 8007218:	9b03      	ldr	r3, [sp, #12]
 800721a:	3307      	adds	r3, #7
 800721c:	f023 0307 	bic.w	r3, r3, #7
 8007220:	3308      	adds	r3, #8
 8007222:	9303      	str	r3, [sp, #12]
 8007224:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007226:	4433      	add	r3, r6
 8007228:	9309      	str	r3, [sp, #36]	; 0x24
 800722a:	e768      	b.n	80070fe <_svfiprintf_r+0x4e>
 800722c:	460c      	mov	r4, r1
 800722e:	2001      	movs	r0, #1
 8007230:	fb0c 3202 	mla	r2, ip, r2, r3
 8007234:	e7a6      	b.n	8007184 <_svfiprintf_r+0xd4>
 8007236:	2300      	movs	r3, #0
 8007238:	f04f 0c0a 	mov.w	ip, #10
 800723c:	4619      	mov	r1, r3
 800723e:	3401      	adds	r4, #1
 8007240:	9305      	str	r3, [sp, #20]
 8007242:	4620      	mov	r0, r4
 8007244:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007248:	3a30      	subs	r2, #48	; 0x30
 800724a:	2a09      	cmp	r2, #9
 800724c:	d903      	bls.n	8007256 <_svfiprintf_r+0x1a6>
 800724e:	2b00      	cmp	r3, #0
 8007250:	d0c6      	beq.n	80071e0 <_svfiprintf_r+0x130>
 8007252:	9105      	str	r1, [sp, #20]
 8007254:	e7c4      	b.n	80071e0 <_svfiprintf_r+0x130>
 8007256:	4604      	mov	r4, r0
 8007258:	2301      	movs	r3, #1
 800725a:	fb0c 2101 	mla	r1, ip, r1, r2
 800725e:	e7f0      	b.n	8007242 <_svfiprintf_r+0x192>
 8007260:	ab03      	add	r3, sp, #12
 8007262:	9300      	str	r3, [sp, #0]
 8007264:	462a      	mov	r2, r5
 8007266:	4638      	mov	r0, r7
 8007268:	4b0f      	ldr	r3, [pc, #60]	; (80072a8 <_svfiprintf_r+0x1f8>)
 800726a:	a904      	add	r1, sp, #16
 800726c:	f7fc fc82 	bl	8003b74 <_printf_float>
 8007270:	1c42      	adds	r2, r0, #1
 8007272:	4606      	mov	r6, r0
 8007274:	d1d6      	bne.n	8007224 <_svfiprintf_r+0x174>
 8007276:	89ab      	ldrh	r3, [r5, #12]
 8007278:	065b      	lsls	r3, r3, #25
 800727a:	f53f af2d 	bmi.w	80070d8 <_svfiprintf_r+0x28>
 800727e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007280:	b01d      	add	sp, #116	; 0x74
 8007282:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007286:	ab03      	add	r3, sp, #12
 8007288:	9300      	str	r3, [sp, #0]
 800728a:	462a      	mov	r2, r5
 800728c:	4638      	mov	r0, r7
 800728e:	4b06      	ldr	r3, [pc, #24]	; (80072a8 <_svfiprintf_r+0x1f8>)
 8007290:	a904      	add	r1, sp, #16
 8007292:	f7fc ff0f 	bl	80040b4 <_printf_i>
 8007296:	e7eb      	b.n	8007270 <_svfiprintf_r+0x1c0>
 8007298:	08009691 	.word	0x08009691
 800729c:	08009697 	.word	0x08009697
 80072a0:	0800969b 	.word	0x0800969b
 80072a4:	08003b75 	.word	0x08003b75
 80072a8:	08006ffd 	.word	0x08006ffd

080072ac <__sflush_r>:
 80072ac:	898a      	ldrh	r2, [r1, #12]
 80072ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072b0:	4605      	mov	r5, r0
 80072b2:	0710      	lsls	r0, r2, #28
 80072b4:	460c      	mov	r4, r1
 80072b6:	d457      	bmi.n	8007368 <__sflush_r+0xbc>
 80072b8:	684b      	ldr	r3, [r1, #4]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	dc04      	bgt.n	80072c8 <__sflush_r+0x1c>
 80072be:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	dc01      	bgt.n	80072c8 <__sflush_r+0x1c>
 80072c4:	2000      	movs	r0, #0
 80072c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80072c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80072ca:	2e00      	cmp	r6, #0
 80072cc:	d0fa      	beq.n	80072c4 <__sflush_r+0x18>
 80072ce:	2300      	movs	r3, #0
 80072d0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80072d4:	682f      	ldr	r7, [r5, #0]
 80072d6:	6a21      	ldr	r1, [r4, #32]
 80072d8:	602b      	str	r3, [r5, #0]
 80072da:	d032      	beq.n	8007342 <__sflush_r+0x96>
 80072dc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80072de:	89a3      	ldrh	r3, [r4, #12]
 80072e0:	075a      	lsls	r2, r3, #29
 80072e2:	d505      	bpl.n	80072f0 <__sflush_r+0x44>
 80072e4:	6863      	ldr	r3, [r4, #4]
 80072e6:	1ac0      	subs	r0, r0, r3
 80072e8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80072ea:	b10b      	cbz	r3, 80072f0 <__sflush_r+0x44>
 80072ec:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80072ee:	1ac0      	subs	r0, r0, r3
 80072f0:	2300      	movs	r3, #0
 80072f2:	4602      	mov	r2, r0
 80072f4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80072f6:	4628      	mov	r0, r5
 80072f8:	6a21      	ldr	r1, [r4, #32]
 80072fa:	47b0      	blx	r6
 80072fc:	1c43      	adds	r3, r0, #1
 80072fe:	89a3      	ldrh	r3, [r4, #12]
 8007300:	d106      	bne.n	8007310 <__sflush_r+0x64>
 8007302:	6829      	ldr	r1, [r5, #0]
 8007304:	291d      	cmp	r1, #29
 8007306:	d82b      	bhi.n	8007360 <__sflush_r+0xb4>
 8007308:	4a28      	ldr	r2, [pc, #160]	; (80073ac <__sflush_r+0x100>)
 800730a:	410a      	asrs	r2, r1
 800730c:	07d6      	lsls	r6, r2, #31
 800730e:	d427      	bmi.n	8007360 <__sflush_r+0xb4>
 8007310:	2200      	movs	r2, #0
 8007312:	6062      	str	r2, [r4, #4]
 8007314:	6922      	ldr	r2, [r4, #16]
 8007316:	04d9      	lsls	r1, r3, #19
 8007318:	6022      	str	r2, [r4, #0]
 800731a:	d504      	bpl.n	8007326 <__sflush_r+0x7a>
 800731c:	1c42      	adds	r2, r0, #1
 800731e:	d101      	bne.n	8007324 <__sflush_r+0x78>
 8007320:	682b      	ldr	r3, [r5, #0]
 8007322:	b903      	cbnz	r3, 8007326 <__sflush_r+0x7a>
 8007324:	6560      	str	r0, [r4, #84]	; 0x54
 8007326:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007328:	602f      	str	r7, [r5, #0]
 800732a:	2900      	cmp	r1, #0
 800732c:	d0ca      	beq.n	80072c4 <__sflush_r+0x18>
 800732e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007332:	4299      	cmp	r1, r3
 8007334:	d002      	beq.n	800733c <__sflush_r+0x90>
 8007336:	4628      	mov	r0, r5
 8007338:	f7fe fa2a 	bl	8005790 <_free_r>
 800733c:	2000      	movs	r0, #0
 800733e:	6360      	str	r0, [r4, #52]	; 0x34
 8007340:	e7c1      	b.n	80072c6 <__sflush_r+0x1a>
 8007342:	2301      	movs	r3, #1
 8007344:	4628      	mov	r0, r5
 8007346:	47b0      	blx	r6
 8007348:	1c41      	adds	r1, r0, #1
 800734a:	d1c8      	bne.n	80072de <__sflush_r+0x32>
 800734c:	682b      	ldr	r3, [r5, #0]
 800734e:	2b00      	cmp	r3, #0
 8007350:	d0c5      	beq.n	80072de <__sflush_r+0x32>
 8007352:	2b1d      	cmp	r3, #29
 8007354:	d001      	beq.n	800735a <__sflush_r+0xae>
 8007356:	2b16      	cmp	r3, #22
 8007358:	d101      	bne.n	800735e <__sflush_r+0xb2>
 800735a:	602f      	str	r7, [r5, #0]
 800735c:	e7b2      	b.n	80072c4 <__sflush_r+0x18>
 800735e:	89a3      	ldrh	r3, [r4, #12]
 8007360:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007364:	81a3      	strh	r3, [r4, #12]
 8007366:	e7ae      	b.n	80072c6 <__sflush_r+0x1a>
 8007368:	690f      	ldr	r7, [r1, #16]
 800736a:	2f00      	cmp	r7, #0
 800736c:	d0aa      	beq.n	80072c4 <__sflush_r+0x18>
 800736e:	0793      	lsls	r3, r2, #30
 8007370:	bf18      	it	ne
 8007372:	2300      	movne	r3, #0
 8007374:	680e      	ldr	r6, [r1, #0]
 8007376:	bf08      	it	eq
 8007378:	694b      	ldreq	r3, [r1, #20]
 800737a:	1bf6      	subs	r6, r6, r7
 800737c:	600f      	str	r7, [r1, #0]
 800737e:	608b      	str	r3, [r1, #8]
 8007380:	2e00      	cmp	r6, #0
 8007382:	dd9f      	ble.n	80072c4 <__sflush_r+0x18>
 8007384:	4633      	mov	r3, r6
 8007386:	463a      	mov	r2, r7
 8007388:	4628      	mov	r0, r5
 800738a:	6a21      	ldr	r1, [r4, #32]
 800738c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8007390:	47e0      	blx	ip
 8007392:	2800      	cmp	r0, #0
 8007394:	dc06      	bgt.n	80073a4 <__sflush_r+0xf8>
 8007396:	89a3      	ldrh	r3, [r4, #12]
 8007398:	f04f 30ff 	mov.w	r0, #4294967295
 800739c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80073a0:	81a3      	strh	r3, [r4, #12]
 80073a2:	e790      	b.n	80072c6 <__sflush_r+0x1a>
 80073a4:	4407      	add	r7, r0
 80073a6:	1a36      	subs	r6, r6, r0
 80073a8:	e7ea      	b.n	8007380 <__sflush_r+0xd4>
 80073aa:	bf00      	nop
 80073ac:	dfbffffe 	.word	0xdfbffffe

080073b0 <_fflush_r>:
 80073b0:	b538      	push	{r3, r4, r5, lr}
 80073b2:	690b      	ldr	r3, [r1, #16]
 80073b4:	4605      	mov	r5, r0
 80073b6:	460c      	mov	r4, r1
 80073b8:	b913      	cbnz	r3, 80073c0 <_fflush_r+0x10>
 80073ba:	2500      	movs	r5, #0
 80073bc:	4628      	mov	r0, r5
 80073be:	bd38      	pop	{r3, r4, r5, pc}
 80073c0:	b118      	cbz	r0, 80073ca <_fflush_r+0x1a>
 80073c2:	6a03      	ldr	r3, [r0, #32]
 80073c4:	b90b      	cbnz	r3, 80073ca <_fflush_r+0x1a>
 80073c6:	f7fd fa31 	bl	800482c <__sinit>
 80073ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d0f3      	beq.n	80073ba <_fflush_r+0xa>
 80073d2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80073d4:	07d0      	lsls	r0, r2, #31
 80073d6:	d404      	bmi.n	80073e2 <_fflush_r+0x32>
 80073d8:	0599      	lsls	r1, r3, #22
 80073da:	d402      	bmi.n	80073e2 <_fflush_r+0x32>
 80073dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80073de:	f7fd fb4a 	bl	8004a76 <__retarget_lock_acquire_recursive>
 80073e2:	4628      	mov	r0, r5
 80073e4:	4621      	mov	r1, r4
 80073e6:	f7ff ff61 	bl	80072ac <__sflush_r>
 80073ea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80073ec:	4605      	mov	r5, r0
 80073ee:	07da      	lsls	r2, r3, #31
 80073f0:	d4e4      	bmi.n	80073bc <_fflush_r+0xc>
 80073f2:	89a3      	ldrh	r3, [r4, #12]
 80073f4:	059b      	lsls	r3, r3, #22
 80073f6:	d4e1      	bmi.n	80073bc <_fflush_r+0xc>
 80073f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80073fa:	f7fd fb3d 	bl	8004a78 <__retarget_lock_release_recursive>
 80073fe:	e7dd      	b.n	80073bc <_fflush_r+0xc>

08007400 <memmove>:
 8007400:	4288      	cmp	r0, r1
 8007402:	b510      	push	{r4, lr}
 8007404:	eb01 0402 	add.w	r4, r1, r2
 8007408:	d902      	bls.n	8007410 <memmove+0x10>
 800740a:	4284      	cmp	r4, r0
 800740c:	4623      	mov	r3, r4
 800740e:	d807      	bhi.n	8007420 <memmove+0x20>
 8007410:	1e43      	subs	r3, r0, #1
 8007412:	42a1      	cmp	r1, r4
 8007414:	d008      	beq.n	8007428 <memmove+0x28>
 8007416:	f811 2b01 	ldrb.w	r2, [r1], #1
 800741a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800741e:	e7f8      	b.n	8007412 <memmove+0x12>
 8007420:	4601      	mov	r1, r0
 8007422:	4402      	add	r2, r0
 8007424:	428a      	cmp	r2, r1
 8007426:	d100      	bne.n	800742a <memmove+0x2a>
 8007428:	bd10      	pop	{r4, pc}
 800742a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800742e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007432:	e7f7      	b.n	8007424 <memmove+0x24>

08007434 <strncmp>:
 8007434:	b510      	push	{r4, lr}
 8007436:	b16a      	cbz	r2, 8007454 <strncmp+0x20>
 8007438:	3901      	subs	r1, #1
 800743a:	1884      	adds	r4, r0, r2
 800743c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007440:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8007444:	429a      	cmp	r2, r3
 8007446:	d103      	bne.n	8007450 <strncmp+0x1c>
 8007448:	42a0      	cmp	r0, r4
 800744a:	d001      	beq.n	8007450 <strncmp+0x1c>
 800744c:	2a00      	cmp	r2, #0
 800744e:	d1f5      	bne.n	800743c <strncmp+0x8>
 8007450:	1ad0      	subs	r0, r2, r3
 8007452:	bd10      	pop	{r4, pc}
 8007454:	4610      	mov	r0, r2
 8007456:	e7fc      	b.n	8007452 <strncmp+0x1e>

08007458 <_sbrk_r>:
 8007458:	b538      	push	{r3, r4, r5, lr}
 800745a:	2300      	movs	r3, #0
 800745c:	4d05      	ldr	r5, [pc, #20]	; (8007474 <_sbrk_r+0x1c>)
 800745e:	4604      	mov	r4, r0
 8007460:	4608      	mov	r0, r1
 8007462:	602b      	str	r3, [r5, #0]
 8007464:	f7fa fc96 	bl	8001d94 <_sbrk>
 8007468:	1c43      	adds	r3, r0, #1
 800746a:	d102      	bne.n	8007472 <_sbrk_r+0x1a>
 800746c:	682b      	ldr	r3, [r5, #0]
 800746e:	b103      	cbz	r3, 8007472 <_sbrk_r+0x1a>
 8007470:	6023      	str	r3, [r4, #0]
 8007472:	bd38      	pop	{r3, r4, r5, pc}
 8007474:	2000051c 	.word	0x2000051c

08007478 <memcpy>:
 8007478:	440a      	add	r2, r1
 800747a:	4291      	cmp	r1, r2
 800747c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007480:	d100      	bne.n	8007484 <memcpy+0xc>
 8007482:	4770      	bx	lr
 8007484:	b510      	push	{r4, lr}
 8007486:	f811 4b01 	ldrb.w	r4, [r1], #1
 800748a:	4291      	cmp	r1, r2
 800748c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007490:	d1f9      	bne.n	8007486 <memcpy+0xe>
 8007492:	bd10      	pop	{r4, pc}

08007494 <nan>:
 8007494:	2000      	movs	r0, #0
 8007496:	4901      	ldr	r1, [pc, #4]	; (800749c <nan+0x8>)
 8007498:	4770      	bx	lr
 800749a:	bf00      	nop
 800749c:	7ff80000 	.word	0x7ff80000

080074a0 <__assert_func>:
 80074a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80074a2:	4614      	mov	r4, r2
 80074a4:	461a      	mov	r2, r3
 80074a6:	4b09      	ldr	r3, [pc, #36]	; (80074cc <__assert_func+0x2c>)
 80074a8:	4605      	mov	r5, r0
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	68d8      	ldr	r0, [r3, #12]
 80074ae:	b14c      	cbz	r4, 80074c4 <__assert_func+0x24>
 80074b0:	4b07      	ldr	r3, [pc, #28]	; (80074d0 <__assert_func+0x30>)
 80074b2:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80074b6:	9100      	str	r1, [sp, #0]
 80074b8:	462b      	mov	r3, r5
 80074ba:	4906      	ldr	r1, [pc, #24]	; (80074d4 <__assert_func+0x34>)
 80074bc:	f000 fbca 	bl	8007c54 <fiprintf>
 80074c0:	f000 fbda 	bl	8007c78 <abort>
 80074c4:	4b04      	ldr	r3, [pc, #16]	; (80074d8 <__assert_func+0x38>)
 80074c6:	461c      	mov	r4, r3
 80074c8:	e7f3      	b.n	80074b2 <__assert_func+0x12>
 80074ca:	bf00      	nop
 80074cc:	20000064 	.word	0x20000064
 80074d0:	080096aa 	.word	0x080096aa
 80074d4:	080096b7 	.word	0x080096b7
 80074d8:	080096e5 	.word	0x080096e5

080074dc <_calloc_r>:
 80074dc:	b570      	push	{r4, r5, r6, lr}
 80074de:	fba1 5402 	umull	r5, r4, r1, r2
 80074e2:	b934      	cbnz	r4, 80074f2 <_calloc_r+0x16>
 80074e4:	4629      	mov	r1, r5
 80074e6:	f7fe f9c3 	bl	8005870 <_malloc_r>
 80074ea:	4606      	mov	r6, r0
 80074ec:	b928      	cbnz	r0, 80074fa <_calloc_r+0x1e>
 80074ee:	4630      	mov	r0, r6
 80074f0:	bd70      	pop	{r4, r5, r6, pc}
 80074f2:	220c      	movs	r2, #12
 80074f4:	2600      	movs	r6, #0
 80074f6:	6002      	str	r2, [r0, #0]
 80074f8:	e7f9      	b.n	80074ee <_calloc_r+0x12>
 80074fa:	462a      	mov	r2, r5
 80074fc:	4621      	mov	r1, r4
 80074fe:	f7fd fa2e 	bl	800495e <memset>
 8007502:	e7f4      	b.n	80074ee <_calloc_r+0x12>

08007504 <rshift>:
 8007504:	6903      	ldr	r3, [r0, #16]
 8007506:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800750a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800750e:	f100 0414 	add.w	r4, r0, #20
 8007512:	ea4f 1261 	mov.w	r2, r1, asr #5
 8007516:	dd46      	ble.n	80075a6 <rshift+0xa2>
 8007518:	f011 011f 	ands.w	r1, r1, #31
 800751c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8007520:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8007524:	d10c      	bne.n	8007540 <rshift+0x3c>
 8007526:	4629      	mov	r1, r5
 8007528:	f100 0710 	add.w	r7, r0, #16
 800752c:	42b1      	cmp	r1, r6
 800752e:	d335      	bcc.n	800759c <rshift+0x98>
 8007530:	1a9b      	subs	r3, r3, r2
 8007532:	009b      	lsls	r3, r3, #2
 8007534:	1eea      	subs	r2, r5, #3
 8007536:	4296      	cmp	r6, r2
 8007538:	bf38      	it	cc
 800753a:	2300      	movcc	r3, #0
 800753c:	4423      	add	r3, r4
 800753e:	e015      	b.n	800756c <rshift+0x68>
 8007540:	46a1      	mov	r9, r4
 8007542:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8007546:	f1c1 0820 	rsb	r8, r1, #32
 800754a:	40cf      	lsrs	r7, r1
 800754c:	f105 0e04 	add.w	lr, r5, #4
 8007550:	4576      	cmp	r6, lr
 8007552:	46f4      	mov	ip, lr
 8007554:	d816      	bhi.n	8007584 <rshift+0x80>
 8007556:	1a9a      	subs	r2, r3, r2
 8007558:	0092      	lsls	r2, r2, #2
 800755a:	3a04      	subs	r2, #4
 800755c:	3501      	adds	r5, #1
 800755e:	42ae      	cmp	r6, r5
 8007560:	bf38      	it	cc
 8007562:	2200      	movcc	r2, #0
 8007564:	18a3      	adds	r3, r4, r2
 8007566:	50a7      	str	r7, [r4, r2]
 8007568:	b107      	cbz	r7, 800756c <rshift+0x68>
 800756a:	3304      	adds	r3, #4
 800756c:	42a3      	cmp	r3, r4
 800756e:	eba3 0204 	sub.w	r2, r3, r4
 8007572:	bf08      	it	eq
 8007574:	2300      	moveq	r3, #0
 8007576:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800757a:	6102      	str	r2, [r0, #16]
 800757c:	bf08      	it	eq
 800757e:	6143      	streq	r3, [r0, #20]
 8007580:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007584:	f8dc c000 	ldr.w	ip, [ip]
 8007588:	fa0c fc08 	lsl.w	ip, ip, r8
 800758c:	ea4c 0707 	orr.w	r7, ip, r7
 8007590:	f849 7b04 	str.w	r7, [r9], #4
 8007594:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007598:	40cf      	lsrs	r7, r1
 800759a:	e7d9      	b.n	8007550 <rshift+0x4c>
 800759c:	f851 cb04 	ldr.w	ip, [r1], #4
 80075a0:	f847 cf04 	str.w	ip, [r7, #4]!
 80075a4:	e7c2      	b.n	800752c <rshift+0x28>
 80075a6:	4623      	mov	r3, r4
 80075a8:	e7e0      	b.n	800756c <rshift+0x68>

080075aa <__hexdig_fun>:
 80075aa:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80075ae:	2b09      	cmp	r3, #9
 80075b0:	d802      	bhi.n	80075b8 <__hexdig_fun+0xe>
 80075b2:	3820      	subs	r0, #32
 80075b4:	b2c0      	uxtb	r0, r0
 80075b6:	4770      	bx	lr
 80075b8:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80075bc:	2b05      	cmp	r3, #5
 80075be:	d801      	bhi.n	80075c4 <__hexdig_fun+0x1a>
 80075c0:	3847      	subs	r0, #71	; 0x47
 80075c2:	e7f7      	b.n	80075b4 <__hexdig_fun+0xa>
 80075c4:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80075c8:	2b05      	cmp	r3, #5
 80075ca:	d801      	bhi.n	80075d0 <__hexdig_fun+0x26>
 80075cc:	3827      	subs	r0, #39	; 0x27
 80075ce:	e7f1      	b.n	80075b4 <__hexdig_fun+0xa>
 80075d0:	2000      	movs	r0, #0
 80075d2:	4770      	bx	lr

080075d4 <__gethex>:
 80075d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075d8:	4681      	mov	r9, r0
 80075da:	468a      	mov	sl, r1
 80075dc:	4617      	mov	r7, r2
 80075de:	680a      	ldr	r2, [r1, #0]
 80075e0:	b085      	sub	sp, #20
 80075e2:	f102 0b02 	add.w	fp, r2, #2
 80075e6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80075ea:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80075ee:	9302      	str	r3, [sp, #8]
 80075f0:	32fe      	adds	r2, #254	; 0xfe
 80075f2:	eb02 030b 	add.w	r3, r2, fp
 80075f6:	46d8      	mov	r8, fp
 80075f8:	f81b 0b01 	ldrb.w	r0, [fp], #1
 80075fc:	9301      	str	r3, [sp, #4]
 80075fe:	2830      	cmp	r0, #48	; 0x30
 8007600:	d0f7      	beq.n	80075f2 <__gethex+0x1e>
 8007602:	f7ff ffd2 	bl	80075aa <__hexdig_fun>
 8007606:	4604      	mov	r4, r0
 8007608:	2800      	cmp	r0, #0
 800760a:	d138      	bne.n	800767e <__gethex+0xaa>
 800760c:	2201      	movs	r2, #1
 800760e:	4640      	mov	r0, r8
 8007610:	49a7      	ldr	r1, [pc, #668]	; (80078b0 <__gethex+0x2dc>)
 8007612:	f7ff ff0f 	bl	8007434 <strncmp>
 8007616:	4606      	mov	r6, r0
 8007618:	2800      	cmp	r0, #0
 800761a:	d169      	bne.n	80076f0 <__gethex+0x11c>
 800761c:	f898 0001 	ldrb.w	r0, [r8, #1]
 8007620:	465d      	mov	r5, fp
 8007622:	f7ff ffc2 	bl	80075aa <__hexdig_fun>
 8007626:	2800      	cmp	r0, #0
 8007628:	d064      	beq.n	80076f4 <__gethex+0x120>
 800762a:	465a      	mov	r2, fp
 800762c:	7810      	ldrb	r0, [r2, #0]
 800762e:	4690      	mov	r8, r2
 8007630:	2830      	cmp	r0, #48	; 0x30
 8007632:	f102 0201 	add.w	r2, r2, #1
 8007636:	d0f9      	beq.n	800762c <__gethex+0x58>
 8007638:	f7ff ffb7 	bl	80075aa <__hexdig_fun>
 800763c:	2301      	movs	r3, #1
 800763e:	fab0 f480 	clz	r4, r0
 8007642:	465e      	mov	r6, fp
 8007644:	0964      	lsrs	r4, r4, #5
 8007646:	9301      	str	r3, [sp, #4]
 8007648:	4642      	mov	r2, r8
 800764a:	4615      	mov	r5, r2
 800764c:	7828      	ldrb	r0, [r5, #0]
 800764e:	3201      	adds	r2, #1
 8007650:	f7ff ffab 	bl	80075aa <__hexdig_fun>
 8007654:	2800      	cmp	r0, #0
 8007656:	d1f8      	bne.n	800764a <__gethex+0x76>
 8007658:	2201      	movs	r2, #1
 800765a:	4628      	mov	r0, r5
 800765c:	4994      	ldr	r1, [pc, #592]	; (80078b0 <__gethex+0x2dc>)
 800765e:	f7ff fee9 	bl	8007434 <strncmp>
 8007662:	b978      	cbnz	r0, 8007684 <__gethex+0xb0>
 8007664:	b946      	cbnz	r6, 8007678 <__gethex+0xa4>
 8007666:	1c6e      	adds	r6, r5, #1
 8007668:	4632      	mov	r2, r6
 800766a:	4615      	mov	r5, r2
 800766c:	7828      	ldrb	r0, [r5, #0]
 800766e:	3201      	adds	r2, #1
 8007670:	f7ff ff9b 	bl	80075aa <__hexdig_fun>
 8007674:	2800      	cmp	r0, #0
 8007676:	d1f8      	bne.n	800766a <__gethex+0x96>
 8007678:	1b73      	subs	r3, r6, r5
 800767a:	009e      	lsls	r6, r3, #2
 800767c:	e004      	b.n	8007688 <__gethex+0xb4>
 800767e:	2400      	movs	r4, #0
 8007680:	4626      	mov	r6, r4
 8007682:	e7e1      	b.n	8007648 <__gethex+0x74>
 8007684:	2e00      	cmp	r6, #0
 8007686:	d1f7      	bne.n	8007678 <__gethex+0xa4>
 8007688:	782b      	ldrb	r3, [r5, #0]
 800768a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800768e:	2b50      	cmp	r3, #80	; 0x50
 8007690:	d13d      	bne.n	800770e <__gethex+0x13a>
 8007692:	786b      	ldrb	r3, [r5, #1]
 8007694:	2b2b      	cmp	r3, #43	; 0x2b
 8007696:	d02f      	beq.n	80076f8 <__gethex+0x124>
 8007698:	2b2d      	cmp	r3, #45	; 0x2d
 800769a:	d031      	beq.n	8007700 <__gethex+0x12c>
 800769c:	f04f 0b00 	mov.w	fp, #0
 80076a0:	1c69      	adds	r1, r5, #1
 80076a2:	7808      	ldrb	r0, [r1, #0]
 80076a4:	f7ff ff81 	bl	80075aa <__hexdig_fun>
 80076a8:	1e42      	subs	r2, r0, #1
 80076aa:	b2d2      	uxtb	r2, r2
 80076ac:	2a18      	cmp	r2, #24
 80076ae:	d82e      	bhi.n	800770e <__gethex+0x13a>
 80076b0:	f1a0 0210 	sub.w	r2, r0, #16
 80076b4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80076b8:	f7ff ff77 	bl	80075aa <__hexdig_fun>
 80076bc:	f100 3cff 	add.w	ip, r0, #4294967295
 80076c0:	fa5f fc8c 	uxtb.w	ip, ip
 80076c4:	f1bc 0f18 	cmp.w	ip, #24
 80076c8:	d91d      	bls.n	8007706 <__gethex+0x132>
 80076ca:	f1bb 0f00 	cmp.w	fp, #0
 80076ce:	d000      	beq.n	80076d2 <__gethex+0xfe>
 80076d0:	4252      	negs	r2, r2
 80076d2:	4416      	add	r6, r2
 80076d4:	f8ca 1000 	str.w	r1, [sl]
 80076d8:	b1dc      	cbz	r4, 8007712 <__gethex+0x13e>
 80076da:	9b01      	ldr	r3, [sp, #4]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	bf14      	ite	ne
 80076e0:	f04f 0800 	movne.w	r8, #0
 80076e4:	f04f 0806 	moveq.w	r8, #6
 80076e8:	4640      	mov	r0, r8
 80076ea:	b005      	add	sp, #20
 80076ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076f0:	4645      	mov	r5, r8
 80076f2:	4626      	mov	r6, r4
 80076f4:	2401      	movs	r4, #1
 80076f6:	e7c7      	b.n	8007688 <__gethex+0xb4>
 80076f8:	f04f 0b00 	mov.w	fp, #0
 80076fc:	1ca9      	adds	r1, r5, #2
 80076fe:	e7d0      	b.n	80076a2 <__gethex+0xce>
 8007700:	f04f 0b01 	mov.w	fp, #1
 8007704:	e7fa      	b.n	80076fc <__gethex+0x128>
 8007706:	230a      	movs	r3, #10
 8007708:	fb03 0002 	mla	r0, r3, r2, r0
 800770c:	e7d0      	b.n	80076b0 <__gethex+0xdc>
 800770e:	4629      	mov	r1, r5
 8007710:	e7e0      	b.n	80076d4 <__gethex+0x100>
 8007712:	4621      	mov	r1, r4
 8007714:	eba5 0308 	sub.w	r3, r5, r8
 8007718:	3b01      	subs	r3, #1
 800771a:	2b07      	cmp	r3, #7
 800771c:	dc0a      	bgt.n	8007734 <__gethex+0x160>
 800771e:	4648      	mov	r0, r9
 8007720:	f7fe f932 	bl	8005988 <_Balloc>
 8007724:	4604      	mov	r4, r0
 8007726:	b940      	cbnz	r0, 800773a <__gethex+0x166>
 8007728:	4602      	mov	r2, r0
 800772a:	21e4      	movs	r1, #228	; 0xe4
 800772c:	4b61      	ldr	r3, [pc, #388]	; (80078b4 <__gethex+0x2e0>)
 800772e:	4862      	ldr	r0, [pc, #392]	; (80078b8 <__gethex+0x2e4>)
 8007730:	f7ff feb6 	bl	80074a0 <__assert_func>
 8007734:	3101      	adds	r1, #1
 8007736:	105b      	asrs	r3, r3, #1
 8007738:	e7ef      	b.n	800771a <__gethex+0x146>
 800773a:	2300      	movs	r3, #0
 800773c:	469b      	mov	fp, r3
 800773e:	f100 0a14 	add.w	sl, r0, #20
 8007742:	f8cd a004 	str.w	sl, [sp, #4]
 8007746:	45a8      	cmp	r8, r5
 8007748:	d344      	bcc.n	80077d4 <__gethex+0x200>
 800774a:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800774e:	4658      	mov	r0, fp
 8007750:	f848 bb04 	str.w	fp, [r8], #4
 8007754:	eba8 080a 	sub.w	r8, r8, sl
 8007758:	ea4f 02a8 	mov.w	r2, r8, asr #2
 800775c:	6122      	str	r2, [r4, #16]
 800775e:	ea4f 1842 	mov.w	r8, r2, lsl #5
 8007762:	f7fe fa03 	bl	8005b6c <__hi0bits>
 8007766:	683d      	ldr	r5, [r7, #0]
 8007768:	eba8 0800 	sub.w	r8, r8, r0
 800776c:	45a8      	cmp	r8, r5
 800776e:	dd59      	ble.n	8007824 <__gethex+0x250>
 8007770:	eba8 0805 	sub.w	r8, r8, r5
 8007774:	4641      	mov	r1, r8
 8007776:	4620      	mov	r0, r4
 8007778:	f7fe fd81 	bl	800627e <__any_on>
 800777c:	4683      	mov	fp, r0
 800777e:	b1b8      	cbz	r0, 80077b0 <__gethex+0x1dc>
 8007780:	f04f 0b01 	mov.w	fp, #1
 8007784:	f108 33ff 	add.w	r3, r8, #4294967295
 8007788:	1159      	asrs	r1, r3, #5
 800778a:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800778e:	f003 021f 	and.w	r2, r3, #31
 8007792:	fa0b f202 	lsl.w	r2, fp, r2
 8007796:	420a      	tst	r2, r1
 8007798:	d00a      	beq.n	80077b0 <__gethex+0x1dc>
 800779a:	455b      	cmp	r3, fp
 800779c:	dd06      	ble.n	80077ac <__gethex+0x1d8>
 800779e:	4620      	mov	r0, r4
 80077a0:	f1a8 0102 	sub.w	r1, r8, #2
 80077a4:	f7fe fd6b 	bl	800627e <__any_on>
 80077a8:	2800      	cmp	r0, #0
 80077aa:	d138      	bne.n	800781e <__gethex+0x24a>
 80077ac:	f04f 0b02 	mov.w	fp, #2
 80077b0:	4641      	mov	r1, r8
 80077b2:	4620      	mov	r0, r4
 80077b4:	f7ff fea6 	bl	8007504 <rshift>
 80077b8:	4446      	add	r6, r8
 80077ba:	68bb      	ldr	r3, [r7, #8]
 80077bc:	42b3      	cmp	r3, r6
 80077be:	da41      	bge.n	8007844 <__gethex+0x270>
 80077c0:	4621      	mov	r1, r4
 80077c2:	4648      	mov	r0, r9
 80077c4:	f7fe f920 	bl	8005a08 <_Bfree>
 80077c8:	2300      	movs	r3, #0
 80077ca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80077cc:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 80077d0:	6013      	str	r3, [r2, #0]
 80077d2:	e789      	b.n	80076e8 <__gethex+0x114>
 80077d4:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 80077d8:	2a2e      	cmp	r2, #46	; 0x2e
 80077da:	d014      	beq.n	8007806 <__gethex+0x232>
 80077dc:	2b20      	cmp	r3, #32
 80077de:	d106      	bne.n	80077ee <__gethex+0x21a>
 80077e0:	9b01      	ldr	r3, [sp, #4]
 80077e2:	f843 bb04 	str.w	fp, [r3], #4
 80077e6:	f04f 0b00 	mov.w	fp, #0
 80077ea:	9301      	str	r3, [sp, #4]
 80077ec:	465b      	mov	r3, fp
 80077ee:	7828      	ldrb	r0, [r5, #0]
 80077f0:	9303      	str	r3, [sp, #12]
 80077f2:	f7ff feda 	bl	80075aa <__hexdig_fun>
 80077f6:	9b03      	ldr	r3, [sp, #12]
 80077f8:	f000 000f 	and.w	r0, r0, #15
 80077fc:	4098      	lsls	r0, r3
 80077fe:	ea4b 0b00 	orr.w	fp, fp, r0
 8007802:	3304      	adds	r3, #4
 8007804:	e79f      	b.n	8007746 <__gethex+0x172>
 8007806:	45a8      	cmp	r8, r5
 8007808:	d8e8      	bhi.n	80077dc <__gethex+0x208>
 800780a:	2201      	movs	r2, #1
 800780c:	4628      	mov	r0, r5
 800780e:	4928      	ldr	r1, [pc, #160]	; (80078b0 <__gethex+0x2dc>)
 8007810:	9303      	str	r3, [sp, #12]
 8007812:	f7ff fe0f 	bl	8007434 <strncmp>
 8007816:	9b03      	ldr	r3, [sp, #12]
 8007818:	2800      	cmp	r0, #0
 800781a:	d1df      	bne.n	80077dc <__gethex+0x208>
 800781c:	e793      	b.n	8007746 <__gethex+0x172>
 800781e:	f04f 0b03 	mov.w	fp, #3
 8007822:	e7c5      	b.n	80077b0 <__gethex+0x1dc>
 8007824:	da0b      	bge.n	800783e <__gethex+0x26a>
 8007826:	eba5 0808 	sub.w	r8, r5, r8
 800782a:	4621      	mov	r1, r4
 800782c:	4642      	mov	r2, r8
 800782e:	4648      	mov	r0, r9
 8007830:	f7fe fb02 	bl	8005e38 <__lshift>
 8007834:	4604      	mov	r4, r0
 8007836:	eba6 0608 	sub.w	r6, r6, r8
 800783a:	f100 0a14 	add.w	sl, r0, #20
 800783e:	f04f 0b00 	mov.w	fp, #0
 8007842:	e7ba      	b.n	80077ba <__gethex+0x1e6>
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	42b3      	cmp	r3, r6
 8007848:	dd74      	ble.n	8007934 <__gethex+0x360>
 800784a:	1b9e      	subs	r6, r3, r6
 800784c:	42b5      	cmp	r5, r6
 800784e:	dc35      	bgt.n	80078bc <__gethex+0x2e8>
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	2b02      	cmp	r3, #2
 8007854:	d023      	beq.n	800789e <__gethex+0x2ca>
 8007856:	2b03      	cmp	r3, #3
 8007858:	d025      	beq.n	80078a6 <__gethex+0x2d2>
 800785a:	2b01      	cmp	r3, #1
 800785c:	d115      	bne.n	800788a <__gethex+0x2b6>
 800785e:	42b5      	cmp	r5, r6
 8007860:	d113      	bne.n	800788a <__gethex+0x2b6>
 8007862:	2d01      	cmp	r5, #1
 8007864:	d10b      	bne.n	800787e <__gethex+0x2aa>
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	9a02      	ldr	r2, [sp, #8]
 800786a:	f04f 0862 	mov.w	r8, #98	; 0x62
 800786e:	6013      	str	r3, [r2, #0]
 8007870:	2301      	movs	r3, #1
 8007872:	6123      	str	r3, [r4, #16]
 8007874:	f8ca 3000 	str.w	r3, [sl]
 8007878:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800787a:	601c      	str	r4, [r3, #0]
 800787c:	e734      	b.n	80076e8 <__gethex+0x114>
 800787e:	4620      	mov	r0, r4
 8007880:	1e69      	subs	r1, r5, #1
 8007882:	f7fe fcfc 	bl	800627e <__any_on>
 8007886:	2800      	cmp	r0, #0
 8007888:	d1ed      	bne.n	8007866 <__gethex+0x292>
 800788a:	4621      	mov	r1, r4
 800788c:	4648      	mov	r0, r9
 800788e:	f7fe f8bb 	bl	8005a08 <_Bfree>
 8007892:	2300      	movs	r3, #0
 8007894:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007896:	f04f 0850 	mov.w	r8, #80	; 0x50
 800789a:	6013      	str	r3, [r2, #0]
 800789c:	e724      	b.n	80076e8 <__gethex+0x114>
 800789e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d1f2      	bne.n	800788a <__gethex+0x2b6>
 80078a4:	e7df      	b.n	8007866 <__gethex+0x292>
 80078a6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d1dc      	bne.n	8007866 <__gethex+0x292>
 80078ac:	e7ed      	b.n	800788a <__gethex+0x2b6>
 80078ae:	bf00      	nop
 80078b0:	0800953c 	.word	0x0800953c
 80078b4:	080093d3 	.word	0x080093d3
 80078b8:	080096e6 	.word	0x080096e6
 80078bc:	f106 38ff 	add.w	r8, r6, #4294967295
 80078c0:	f1bb 0f00 	cmp.w	fp, #0
 80078c4:	d133      	bne.n	800792e <__gethex+0x35a>
 80078c6:	f1b8 0f00 	cmp.w	r8, #0
 80078ca:	d004      	beq.n	80078d6 <__gethex+0x302>
 80078cc:	4641      	mov	r1, r8
 80078ce:	4620      	mov	r0, r4
 80078d0:	f7fe fcd5 	bl	800627e <__any_on>
 80078d4:	4683      	mov	fp, r0
 80078d6:	2301      	movs	r3, #1
 80078d8:	ea4f 1268 	mov.w	r2, r8, asr #5
 80078dc:	f008 081f 	and.w	r8, r8, #31
 80078e0:	fa03 f308 	lsl.w	r3, r3, r8
 80078e4:	f04f 0802 	mov.w	r8, #2
 80078e8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80078ec:	4631      	mov	r1, r6
 80078ee:	4213      	tst	r3, r2
 80078f0:	4620      	mov	r0, r4
 80078f2:	bf18      	it	ne
 80078f4:	f04b 0b02 	orrne.w	fp, fp, #2
 80078f8:	1bad      	subs	r5, r5, r6
 80078fa:	f7ff fe03 	bl	8007504 <rshift>
 80078fe:	687e      	ldr	r6, [r7, #4]
 8007900:	f1bb 0f00 	cmp.w	fp, #0
 8007904:	d04a      	beq.n	800799c <__gethex+0x3c8>
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	2b02      	cmp	r3, #2
 800790a:	d016      	beq.n	800793a <__gethex+0x366>
 800790c:	2b03      	cmp	r3, #3
 800790e:	d018      	beq.n	8007942 <__gethex+0x36e>
 8007910:	2b01      	cmp	r3, #1
 8007912:	d109      	bne.n	8007928 <__gethex+0x354>
 8007914:	f01b 0f02 	tst.w	fp, #2
 8007918:	d006      	beq.n	8007928 <__gethex+0x354>
 800791a:	f8da 3000 	ldr.w	r3, [sl]
 800791e:	ea4b 0b03 	orr.w	fp, fp, r3
 8007922:	f01b 0f01 	tst.w	fp, #1
 8007926:	d10f      	bne.n	8007948 <__gethex+0x374>
 8007928:	f048 0810 	orr.w	r8, r8, #16
 800792c:	e036      	b.n	800799c <__gethex+0x3c8>
 800792e:	f04f 0b01 	mov.w	fp, #1
 8007932:	e7d0      	b.n	80078d6 <__gethex+0x302>
 8007934:	f04f 0801 	mov.w	r8, #1
 8007938:	e7e2      	b.n	8007900 <__gethex+0x32c>
 800793a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800793c:	f1c3 0301 	rsb	r3, r3, #1
 8007940:	930f      	str	r3, [sp, #60]	; 0x3c
 8007942:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007944:	2b00      	cmp	r3, #0
 8007946:	d0ef      	beq.n	8007928 <__gethex+0x354>
 8007948:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800794c:	f104 0214 	add.w	r2, r4, #20
 8007950:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8007954:	9301      	str	r3, [sp, #4]
 8007956:	2300      	movs	r3, #0
 8007958:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800795c:	4694      	mov	ip, r2
 800795e:	f852 1b04 	ldr.w	r1, [r2], #4
 8007962:	f1b1 3fff 	cmp.w	r1, #4294967295
 8007966:	d01e      	beq.n	80079a6 <__gethex+0x3d2>
 8007968:	3101      	adds	r1, #1
 800796a:	f8cc 1000 	str.w	r1, [ip]
 800796e:	f1b8 0f02 	cmp.w	r8, #2
 8007972:	f104 0214 	add.w	r2, r4, #20
 8007976:	d13d      	bne.n	80079f4 <__gethex+0x420>
 8007978:	683b      	ldr	r3, [r7, #0]
 800797a:	3b01      	subs	r3, #1
 800797c:	42ab      	cmp	r3, r5
 800797e:	d10b      	bne.n	8007998 <__gethex+0x3c4>
 8007980:	2301      	movs	r3, #1
 8007982:	1169      	asrs	r1, r5, #5
 8007984:	f005 051f 	and.w	r5, r5, #31
 8007988:	fa03 f505 	lsl.w	r5, r3, r5
 800798c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007990:	421d      	tst	r5, r3
 8007992:	bf18      	it	ne
 8007994:	f04f 0801 	movne.w	r8, #1
 8007998:	f048 0820 	orr.w	r8, r8, #32
 800799c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800799e:	601c      	str	r4, [r3, #0]
 80079a0:	9b02      	ldr	r3, [sp, #8]
 80079a2:	601e      	str	r6, [r3, #0]
 80079a4:	e6a0      	b.n	80076e8 <__gethex+0x114>
 80079a6:	4290      	cmp	r0, r2
 80079a8:	f842 3c04 	str.w	r3, [r2, #-4]
 80079ac:	d8d6      	bhi.n	800795c <__gethex+0x388>
 80079ae:	68a2      	ldr	r2, [r4, #8]
 80079b0:	4593      	cmp	fp, r2
 80079b2:	db17      	blt.n	80079e4 <__gethex+0x410>
 80079b4:	6861      	ldr	r1, [r4, #4]
 80079b6:	4648      	mov	r0, r9
 80079b8:	3101      	adds	r1, #1
 80079ba:	f7fd ffe5 	bl	8005988 <_Balloc>
 80079be:	4682      	mov	sl, r0
 80079c0:	b918      	cbnz	r0, 80079ca <__gethex+0x3f6>
 80079c2:	4602      	mov	r2, r0
 80079c4:	2184      	movs	r1, #132	; 0x84
 80079c6:	4b1a      	ldr	r3, [pc, #104]	; (8007a30 <__gethex+0x45c>)
 80079c8:	e6b1      	b.n	800772e <__gethex+0x15a>
 80079ca:	6922      	ldr	r2, [r4, #16]
 80079cc:	f104 010c 	add.w	r1, r4, #12
 80079d0:	3202      	adds	r2, #2
 80079d2:	0092      	lsls	r2, r2, #2
 80079d4:	300c      	adds	r0, #12
 80079d6:	f7ff fd4f 	bl	8007478 <memcpy>
 80079da:	4621      	mov	r1, r4
 80079dc:	4648      	mov	r0, r9
 80079de:	f7fe f813 	bl	8005a08 <_Bfree>
 80079e2:	4654      	mov	r4, sl
 80079e4:	6922      	ldr	r2, [r4, #16]
 80079e6:	1c51      	adds	r1, r2, #1
 80079e8:	6121      	str	r1, [r4, #16]
 80079ea:	2101      	movs	r1, #1
 80079ec:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80079f0:	6151      	str	r1, [r2, #20]
 80079f2:	e7bc      	b.n	800796e <__gethex+0x39a>
 80079f4:	6921      	ldr	r1, [r4, #16]
 80079f6:	4559      	cmp	r1, fp
 80079f8:	dd0b      	ble.n	8007a12 <__gethex+0x43e>
 80079fa:	2101      	movs	r1, #1
 80079fc:	4620      	mov	r0, r4
 80079fe:	f7ff fd81 	bl	8007504 <rshift>
 8007a02:	68bb      	ldr	r3, [r7, #8]
 8007a04:	3601      	adds	r6, #1
 8007a06:	42b3      	cmp	r3, r6
 8007a08:	f6ff aeda 	blt.w	80077c0 <__gethex+0x1ec>
 8007a0c:	f04f 0801 	mov.w	r8, #1
 8007a10:	e7c2      	b.n	8007998 <__gethex+0x3c4>
 8007a12:	f015 051f 	ands.w	r5, r5, #31
 8007a16:	d0f9      	beq.n	8007a0c <__gethex+0x438>
 8007a18:	9b01      	ldr	r3, [sp, #4]
 8007a1a:	f1c5 0520 	rsb	r5, r5, #32
 8007a1e:	441a      	add	r2, r3
 8007a20:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8007a24:	f7fe f8a2 	bl	8005b6c <__hi0bits>
 8007a28:	42a8      	cmp	r0, r5
 8007a2a:	dbe6      	blt.n	80079fa <__gethex+0x426>
 8007a2c:	e7ee      	b.n	8007a0c <__gethex+0x438>
 8007a2e:	bf00      	nop
 8007a30:	080093d3 	.word	0x080093d3

08007a34 <L_shift>:
 8007a34:	f1c2 0208 	rsb	r2, r2, #8
 8007a38:	0092      	lsls	r2, r2, #2
 8007a3a:	b570      	push	{r4, r5, r6, lr}
 8007a3c:	f1c2 0620 	rsb	r6, r2, #32
 8007a40:	6843      	ldr	r3, [r0, #4]
 8007a42:	6804      	ldr	r4, [r0, #0]
 8007a44:	fa03 f506 	lsl.w	r5, r3, r6
 8007a48:	432c      	orrs	r4, r5
 8007a4a:	40d3      	lsrs	r3, r2
 8007a4c:	6004      	str	r4, [r0, #0]
 8007a4e:	f840 3f04 	str.w	r3, [r0, #4]!
 8007a52:	4288      	cmp	r0, r1
 8007a54:	d3f4      	bcc.n	8007a40 <L_shift+0xc>
 8007a56:	bd70      	pop	{r4, r5, r6, pc}

08007a58 <__match>:
 8007a58:	b530      	push	{r4, r5, lr}
 8007a5a:	6803      	ldr	r3, [r0, #0]
 8007a5c:	3301      	adds	r3, #1
 8007a5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007a62:	b914      	cbnz	r4, 8007a6a <__match+0x12>
 8007a64:	6003      	str	r3, [r0, #0]
 8007a66:	2001      	movs	r0, #1
 8007a68:	bd30      	pop	{r4, r5, pc}
 8007a6a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007a6e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8007a72:	2d19      	cmp	r5, #25
 8007a74:	bf98      	it	ls
 8007a76:	3220      	addls	r2, #32
 8007a78:	42a2      	cmp	r2, r4
 8007a7a:	d0f0      	beq.n	8007a5e <__match+0x6>
 8007a7c:	2000      	movs	r0, #0
 8007a7e:	e7f3      	b.n	8007a68 <__match+0x10>

08007a80 <__hexnan>:
 8007a80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a84:	2500      	movs	r5, #0
 8007a86:	680b      	ldr	r3, [r1, #0]
 8007a88:	4682      	mov	sl, r0
 8007a8a:	115e      	asrs	r6, r3, #5
 8007a8c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8007a90:	f013 031f 	ands.w	r3, r3, #31
 8007a94:	bf18      	it	ne
 8007a96:	3604      	addne	r6, #4
 8007a98:	1f37      	subs	r7, r6, #4
 8007a9a:	4690      	mov	r8, r2
 8007a9c:	46b9      	mov	r9, r7
 8007a9e:	463c      	mov	r4, r7
 8007aa0:	46ab      	mov	fp, r5
 8007aa2:	b087      	sub	sp, #28
 8007aa4:	6801      	ldr	r1, [r0, #0]
 8007aa6:	9301      	str	r3, [sp, #4]
 8007aa8:	f846 5c04 	str.w	r5, [r6, #-4]
 8007aac:	9502      	str	r5, [sp, #8]
 8007aae:	784a      	ldrb	r2, [r1, #1]
 8007ab0:	1c4b      	adds	r3, r1, #1
 8007ab2:	9303      	str	r3, [sp, #12]
 8007ab4:	b342      	cbz	r2, 8007b08 <__hexnan+0x88>
 8007ab6:	4610      	mov	r0, r2
 8007ab8:	9105      	str	r1, [sp, #20]
 8007aba:	9204      	str	r2, [sp, #16]
 8007abc:	f7ff fd75 	bl	80075aa <__hexdig_fun>
 8007ac0:	2800      	cmp	r0, #0
 8007ac2:	d14f      	bne.n	8007b64 <__hexnan+0xe4>
 8007ac4:	9a04      	ldr	r2, [sp, #16]
 8007ac6:	9905      	ldr	r1, [sp, #20]
 8007ac8:	2a20      	cmp	r2, #32
 8007aca:	d818      	bhi.n	8007afe <__hexnan+0x7e>
 8007acc:	9b02      	ldr	r3, [sp, #8]
 8007ace:	459b      	cmp	fp, r3
 8007ad0:	dd13      	ble.n	8007afa <__hexnan+0x7a>
 8007ad2:	454c      	cmp	r4, r9
 8007ad4:	d206      	bcs.n	8007ae4 <__hexnan+0x64>
 8007ad6:	2d07      	cmp	r5, #7
 8007ad8:	dc04      	bgt.n	8007ae4 <__hexnan+0x64>
 8007ada:	462a      	mov	r2, r5
 8007adc:	4649      	mov	r1, r9
 8007ade:	4620      	mov	r0, r4
 8007ae0:	f7ff ffa8 	bl	8007a34 <L_shift>
 8007ae4:	4544      	cmp	r4, r8
 8007ae6:	d950      	bls.n	8007b8a <__hexnan+0x10a>
 8007ae8:	2300      	movs	r3, #0
 8007aea:	f1a4 0904 	sub.w	r9, r4, #4
 8007aee:	f844 3c04 	str.w	r3, [r4, #-4]
 8007af2:	461d      	mov	r5, r3
 8007af4:	464c      	mov	r4, r9
 8007af6:	f8cd b008 	str.w	fp, [sp, #8]
 8007afa:	9903      	ldr	r1, [sp, #12]
 8007afc:	e7d7      	b.n	8007aae <__hexnan+0x2e>
 8007afe:	2a29      	cmp	r2, #41	; 0x29
 8007b00:	d155      	bne.n	8007bae <__hexnan+0x12e>
 8007b02:	3102      	adds	r1, #2
 8007b04:	f8ca 1000 	str.w	r1, [sl]
 8007b08:	f1bb 0f00 	cmp.w	fp, #0
 8007b0c:	d04f      	beq.n	8007bae <__hexnan+0x12e>
 8007b0e:	454c      	cmp	r4, r9
 8007b10:	d206      	bcs.n	8007b20 <__hexnan+0xa0>
 8007b12:	2d07      	cmp	r5, #7
 8007b14:	dc04      	bgt.n	8007b20 <__hexnan+0xa0>
 8007b16:	462a      	mov	r2, r5
 8007b18:	4649      	mov	r1, r9
 8007b1a:	4620      	mov	r0, r4
 8007b1c:	f7ff ff8a 	bl	8007a34 <L_shift>
 8007b20:	4544      	cmp	r4, r8
 8007b22:	d934      	bls.n	8007b8e <__hexnan+0x10e>
 8007b24:	4623      	mov	r3, r4
 8007b26:	f1a8 0204 	sub.w	r2, r8, #4
 8007b2a:	f853 1b04 	ldr.w	r1, [r3], #4
 8007b2e:	429f      	cmp	r7, r3
 8007b30:	f842 1f04 	str.w	r1, [r2, #4]!
 8007b34:	d2f9      	bcs.n	8007b2a <__hexnan+0xaa>
 8007b36:	1b3b      	subs	r3, r7, r4
 8007b38:	f023 0303 	bic.w	r3, r3, #3
 8007b3c:	3304      	adds	r3, #4
 8007b3e:	3e03      	subs	r6, #3
 8007b40:	3401      	adds	r4, #1
 8007b42:	42a6      	cmp	r6, r4
 8007b44:	bf38      	it	cc
 8007b46:	2304      	movcc	r3, #4
 8007b48:	2200      	movs	r2, #0
 8007b4a:	4443      	add	r3, r8
 8007b4c:	f843 2b04 	str.w	r2, [r3], #4
 8007b50:	429f      	cmp	r7, r3
 8007b52:	d2fb      	bcs.n	8007b4c <__hexnan+0xcc>
 8007b54:	683b      	ldr	r3, [r7, #0]
 8007b56:	b91b      	cbnz	r3, 8007b60 <__hexnan+0xe0>
 8007b58:	4547      	cmp	r7, r8
 8007b5a:	d126      	bne.n	8007baa <__hexnan+0x12a>
 8007b5c:	2301      	movs	r3, #1
 8007b5e:	603b      	str	r3, [r7, #0]
 8007b60:	2005      	movs	r0, #5
 8007b62:	e025      	b.n	8007bb0 <__hexnan+0x130>
 8007b64:	3501      	adds	r5, #1
 8007b66:	2d08      	cmp	r5, #8
 8007b68:	f10b 0b01 	add.w	fp, fp, #1
 8007b6c:	dd06      	ble.n	8007b7c <__hexnan+0xfc>
 8007b6e:	4544      	cmp	r4, r8
 8007b70:	d9c3      	bls.n	8007afa <__hexnan+0x7a>
 8007b72:	2300      	movs	r3, #0
 8007b74:	2501      	movs	r5, #1
 8007b76:	f844 3c04 	str.w	r3, [r4, #-4]
 8007b7a:	3c04      	subs	r4, #4
 8007b7c:	6822      	ldr	r2, [r4, #0]
 8007b7e:	f000 000f 	and.w	r0, r0, #15
 8007b82:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8007b86:	6020      	str	r0, [r4, #0]
 8007b88:	e7b7      	b.n	8007afa <__hexnan+0x7a>
 8007b8a:	2508      	movs	r5, #8
 8007b8c:	e7b5      	b.n	8007afa <__hexnan+0x7a>
 8007b8e:	9b01      	ldr	r3, [sp, #4]
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d0df      	beq.n	8007b54 <__hexnan+0xd4>
 8007b94:	f04f 32ff 	mov.w	r2, #4294967295
 8007b98:	f1c3 0320 	rsb	r3, r3, #32
 8007b9c:	40da      	lsrs	r2, r3
 8007b9e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8007ba2:	4013      	ands	r3, r2
 8007ba4:	f846 3c04 	str.w	r3, [r6, #-4]
 8007ba8:	e7d4      	b.n	8007b54 <__hexnan+0xd4>
 8007baa:	3f04      	subs	r7, #4
 8007bac:	e7d2      	b.n	8007b54 <__hexnan+0xd4>
 8007bae:	2004      	movs	r0, #4
 8007bb0:	b007      	add	sp, #28
 8007bb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007bb6 <__ascii_mbtowc>:
 8007bb6:	b082      	sub	sp, #8
 8007bb8:	b901      	cbnz	r1, 8007bbc <__ascii_mbtowc+0x6>
 8007bba:	a901      	add	r1, sp, #4
 8007bbc:	b142      	cbz	r2, 8007bd0 <__ascii_mbtowc+0x1a>
 8007bbe:	b14b      	cbz	r3, 8007bd4 <__ascii_mbtowc+0x1e>
 8007bc0:	7813      	ldrb	r3, [r2, #0]
 8007bc2:	600b      	str	r3, [r1, #0]
 8007bc4:	7812      	ldrb	r2, [r2, #0]
 8007bc6:	1e10      	subs	r0, r2, #0
 8007bc8:	bf18      	it	ne
 8007bca:	2001      	movne	r0, #1
 8007bcc:	b002      	add	sp, #8
 8007bce:	4770      	bx	lr
 8007bd0:	4610      	mov	r0, r2
 8007bd2:	e7fb      	b.n	8007bcc <__ascii_mbtowc+0x16>
 8007bd4:	f06f 0001 	mvn.w	r0, #1
 8007bd8:	e7f8      	b.n	8007bcc <__ascii_mbtowc+0x16>

08007bda <_realloc_r>:
 8007bda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007bde:	4680      	mov	r8, r0
 8007be0:	4614      	mov	r4, r2
 8007be2:	460e      	mov	r6, r1
 8007be4:	b921      	cbnz	r1, 8007bf0 <_realloc_r+0x16>
 8007be6:	4611      	mov	r1, r2
 8007be8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007bec:	f7fd be40 	b.w	8005870 <_malloc_r>
 8007bf0:	b92a      	cbnz	r2, 8007bfe <_realloc_r+0x24>
 8007bf2:	f7fd fdcd 	bl	8005790 <_free_r>
 8007bf6:	4625      	mov	r5, r4
 8007bf8:	4628      	mov	r0, r5
 8007bfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007bfe:	f000 f842 	bl	8007c86 <_malloc_usable_size_r>
 8007c02:	4284      	cmp	r4, r0
 8007c04:	4607      	mov	r7, r0
 8007c06:	d802      	bhi.n	8007c0e <_realloc_r+0x34>
 8007c08:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007c0c:	d812      	bhi.n	8007c34 <_realloc_r+0x5a>
 8007c0e:	4621      	mov	r1, r4
 8007c10:	4640      	mov	r0, r8
 8007c12:	f7fd fe2d 	bl	8005870 <_malloc_r>
 8007c16:	4605      	mov	r5, r0
 8007c18:	2800      	cmp	r0, #0
 8007c1a:	d0ed      	beq.n	8007bf8 <_realloc_r+0x1e>
 8007c1c:	42bc      	cmp	r4, r7
 8007c1e:	4622      	mov	r2, r4
 8007c20:	4631      	mov	r1, r6
 8007c22:	bf28      	it	cs
 8007c24:	463a      	movcs	r2, r7
 8007c26:	f7ff fc27 	bl	8007478 <memcpy>
 8007c2a:	4631      	mov	r1, r6
 8007c2c:	4640      	mov	r0, r8
 8007c2e:	f7fd fdaf 	bl	8005790 <_free_r>
 8007c32:	e7e1      	b.n	8007bf8 <_realloc_r+0x1e>
 8007c34:	4635      	mov	r5, r6
 8007c36:	e7df      	b.n	8007bf8 <_realloc_r+0x1e>

08007c38 <__ascii_wctomb>:
 8007c38:	4603      	mov	r3, r0
 8007c3a:	4608      	mov	r0, r1
 8007c3c:	b141      	cbz	r1, 8007c50 <__ascii_wctomb+0x18>
 8007c3e:	2aff      	cmp	r2, #255	; 0xff
 8007c40:	d904      	bls.n	8007c4c <__ascii_wctomb+0x14>
 8007c42:	228a      	movs	r2, #138	; 0x8a
 8007c44:	f04f 30ff 	mov.w	r0, #4294967295
 8007c48:	601a      	str	r2, [r3, #0]
 8007c4a:	4770      	bx	lr
 8007c4c:	2001      	movs	r0, #1
 8007c4e:	700a      	strb	r2, [r1, #0]
 8007c50:	4770      	bx	lr
	...

08007c54 <fiprintf>:
 8007c54:	b40e      	push	{r1, r2, r3}
 8007c56:	b503      	push	{r0, r1, lr}
 8007c58:	4601      	mov	r1, r0
 8007c5a:	ab03      	add	r3, sp, #12
 8007c5c:	4805      	ldr	r0, [pc, #20]	; (8007c74 <fiprintf+0x20>)
 8007c5e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c62:	6800      	ldr	r0, [r0, #0]
 8007c64:	9301      	str	r3, [sp, #4]
 8007c66:	f000 f83d 	bl	8007ce4 <_vfiprintf_r>
 8007c6a:	b002      	add	sp, #8
 8007c6c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007c70:	b003      	add	sp, #12
 8007c72:	4770      	bx	lr
 8007c74:	20000064 	.word	0x20000064

08007c78 <abort>:
 8007c78:	2006      	movs	r0, #6
 8007c7a:	b508      	push	{r3, lr}
 8007c7c:	f000 fa0a 	bl	8008094 <raise>
 8007c80:	2001      	movs	r0, #1
 8007c82:	f7fa f814 	bl	8001cae <_exit>

08007c86 <_malloc_usable_size_r>:
 8007c86:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007c8a:	1f18      	subs	r0, r3, #4
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	bfbc      	itt	lt
 8007c90:	580b      	ldrlt	r3, [r1, r0]
 8007c92:	18c0      	addlt	r0, r0, r3
 8007c94:	4770      	bx	lr

08007c96 <__sfputc_r>:
 8007c96:	6893      	ldr	r3, [r2, #8]
 8007c98:	b410      	push	{r4}
 8007c9a:	3b01      	subs	r3, #1
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	6093      	str	r3, [r2, #8]
 8007ca0:	da07      	bge.n	8007cb2 <__sfputc_r+0x1c>
 8007ca2:	6994      	ldr	r4, [r2, #24]
 8007ca4:	42a3      	cmp	r3, r4
 8007ca6:	db01      	blt.n	8007cac <__sfputc_r+0x16>
 8007ca8:	290a      	cmp	r1, #10
 8007caa:	d102      	bne.n	8007cb2 <__sfputc_r+0x1c>
 8007cac:	bc10      	pop	{r4}
 8007cae:	f000 b933 	b.w	8007f18 <__swbuf_r>
 8007cb2:	6813      	ldr	r3, [r2, #0]
 8007cb4:	1c58      	adds	r0, r3, #1
 8007cb6:	6010      	str	r0, [r2, #0]
 8007cb8:	7019      	strb	r1, [r3, #0]
 8007cba:	4608      	mov	r0, r1
 8007cbc:	bc10      	pop	{r4}
 8007cbe:	4770      	bx	lr

08007cc0 <__sfputs_r>:
 8007cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cc2:	4606      	mov	r6, r0
 8007cc4:	460f      	mov	r7, r1
 8007cc6:	4614      	mov	r4, r2
 8007cc8:	18d5      	adds	r5, r2, r3
 8007cca:	42ac      	cmp	r4, r5
 8007ccc:	d101      	bne.n	8007cd2 <__sfputs_r+0x12>
 8007cce:	2000      	movs	r0, #0
 8007cd0:	e007      	b.n	8007ce2 <__sfputs_r+0x22>
 8007cd2:	463a      	mov	r2, r7
 8007cd4:	4630      	mov	r0, r6
 8007cd6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007cda:	f7ff ffdc 	bl	8007c96 <__sfputc_r>
 8007cde:	1c43      	adds	r3, r0, #1
 8007ce0:	d1f3      	bne.n	8007cca <__sfputs_r+0xa>
 8007ce2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007ce4 <_vfiprintf_r>:
 8007ce4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ce8:	460d      	mov	r5, r1
 8007cea:	4614      	mov	r4, r2
 8007cec:	4698      	mov	r8, r3
 8007cee:	4606      	mov	r6, r0
 8007cf0:	b09d      	sub	sp, #116	; 0x74
 8007cf2:	b118      	cbz	r0, 8007cfc <_vfiprintf_r+0x18>
 8007cf4:	6a03      	ldr	r3, [r0, #32]
 8007cf6:	b90b      	cbnz	r3, 8007cfc <_vfiprintf_r+0x18>
 8007cf8:	f7fc fd98 	bl	800482c <__sinit>
 8007cfc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007cfe:	07d9      	lsls	r1, r3, #31
 8007d00:	d405      	bmi.n	8007d0e <_vfiprintf_r+0x2a>
 8007d02:	89ab      	ldrh	r3, [r5, #12]
 8007d04:	059a      	lsls	r2, r3, #22
 8007d06:	d402      	bmi.n	8007d0e <_vfiprintf_r+0x2a>
 8007d08:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007d0a:	f7fc feb4 	bl	8004a76 <__retarget_lock_acquire_recursive>
 8007d0e:	89ab      	ldrh	r3, [r5, #12]
 8007d10:	071b      	lsls	r3, r3, #28
 8007d12:	d501      	bpl.n	8007d18 <_vfiprintf_r+0x34>
 8007d14:	692b      	ldr	r3, [r5, #16]
 8007d16:	b99b      	cbnz	r3, 8007d40 <_vfiprintf_r+0x5c>
 8007d18:	4629      	mov	r1, r5
 8007d1a:	4630      	mov	r0, r6
 8007d1c:	f000 f93a 	bl	8007f94 <__swsetup_r>
 8007d20:	b170      	cbz	r0, 8007d40 <_vfiprintf_r+0x5c>
 8007d22:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007d24:	07dc      	lsls	r4, r3, #31
 8007d26:	d504      	bpl.n	8007d32 <_vfiprintf_r+0x4e>
 8007d28:	f04f 30ff 	mov.w	r0, #4294967295
 8007d2c:	b01d      	add	sp, #116	; 0x74
 8007d2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d32:	89ab      	ldrh	r3, [r5, #12]
 8007d34:	0598      	lsls	r0, r3, #22
 8007d36:	d4f7      	bmi.n	8007d28 <_vfiprintf_r+0x44>
 8007d38:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007d3a:	f7fc fe9d 	bl	8004a78 <__retarget_lock_release_recursive>
 8007d3e:	e7f3      	b.n	8007d28 <_vfiprintf_r+0x44>
 8007d40:	2300      	movs	r3, #0
 8007d42:	9309      	str	r3, [sp, #36]	; 0x24
 8007d44:	2320      	movs	r3, #32
 8007d46:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007d4a:	2330      	movs	r3, #48	; 0x30
 8007d4c:	f04f 0901 	mov.w	r9, #1
 8007d50:	f8cd 800c 	str.w	r8, [sp, #12]
 8007d54:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8007f04 <_vfiprintf_r+0x220>
 8007d58:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007d5c:	4623      	mov	r3, r4
 8007d5e:	469a      	mov	sl, r3
 8007d60:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007d64:	b10a      	cbz	r2, 8007d6a <_vfiprintf_r+0x86>
 8007d66:	2a25      	cmp	r2, #37	; 0x25
 8007d68:	d1f9      	bne.n	8007d5e <_vfiprintf_r+0x7a>
 8007d6a:	ebba 0b04 	subs.w	fp, sl, r4
 8007d6e:	d00b      	beq.n	8007d88 <_vfiprintf_r+0xa4>
 8007d70:	465b      	mov	r3, fp
 8007d72:	4622      	mov	r2, r4
 8007d74:	4629      	mov	r1, r5
 8007d76:	4630      	mov	r0, r6
 8007d78:	f7ff ffa2 	bl	8007cc0 <__sfputs_r>
 8007d7c:	3001      	adds	r0, #1
 8007d7e:	f000 80a9 	beq.w	8007ed4 <_vfiprintf_r+0x1f0>
 8007d82:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007d84:	445a      	add	r2, fp
 8007d86:	9209      	str	r2, [sp, #36]	; 0x24
 8007d88:	f89a 3000 	ldrb.w	r3, [sl]
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	f000 80a1 	beq.w	8007ed4 <_vfiprintf_r+0x1f0>
 8007d92:	2300      	movs	r3, #0
 8007d94:	f04f 32ff 	mov.w	r2, #4294967295
 8007d98:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007d9c:	f10a 0a01 	add.w	sl, sl, #1
 8007da0:	9304      	str	r3, [sp, #16]
 8007da2:	9307      	str	r3, [sp, #28]
 8007da4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007da8:	931a      	str	r3, [sp, #104]	; 0x68
 8007daa:	4654      	mov	r4, sl
 8007dac:	2205      	movs	r2, #5
 8007dae:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007db2:	4854      	ldr	r0, [pc, #336]	; (8007f04 <_vfiprintf_r+0x220>)
 8007db4:	f7fc fe69 	bl	8004a8a <memchr>
 8007db8:	9a04      	ldr	r2, [sp, #16]
 8007dba:	b9d8      	cbnz	r0, 8007df4 <_vfiprintf_r+0x110>
 8007dbc:	06d1      	lsls	r1, r2, #27
 8007dbe:	bf44      	itt	mi
 8007dc0:	2320      	movmi	r3, #32
 8007dc2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007dc6:	0713      	lsls	r3, r2, #28
 8007dc8:	bf44      	itt	mi
 8007dca:	232b      	movmi	r3, #43	; 0x2b
 8007dcc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007dd0:	f89a 3000 	ldrb.w	r3, [sl]
 8007dd4:	2b2a      	cmp	r3, #42	; 0x2a
 8007dd6:	d015      	beq.n	8007e04 <_vfiprintf_r+0x120>
 8007dd8:	4654      	mov	r4, sl
 8007dda:	2000      	movs	r0, #0
 8007ddc:	f04f 0c0a 	mov.w	ip, #10
 8007de0:	9a07      	ldr	r2, [sp, #28]
 8007de2:	4621      	mov	r1, r4
 8007de4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007de8:	3b30      	subs	r3, #48	; 0x30
 8007dea:	2b09      	cmp	r3, #9
 8007dec:	d94d      	bls.n	8007e8a <_vfiprintf_r+0x1a6>
 8007dee:	b1b0      	cbz	r0, 8007e1e <_vfiprintf_r+0x13a>
 8007df0:	9207      	str	r2, [sp, #28]
 8007df2:	e014      	b.n	8007e1e <_vfiprintf_r+0x13a>
 8007df4:	eba0 0308 	sub.w	r3, r0, r8
 8007df8:	fa09 f303 	lsl.w	r3, r9, r3
 8007dfc:	4313      	orrs	r3, r2
 8007dfe:	46a2      	mov	sl, r4
 8007e00:	9304      	str	r3, [sp, #16]
 8007e02:	e7d2      	b.n	8007daa <_vfiprintf_r+0xc6>
 8007e04:	9b03      	ldr	r3, [sp, #12]
 8007e06:	1d19      	adds	r1, r3, #4
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	9103      	str	r1, [sp, #12]
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	bfbb      	ittet	lt
 8007e10:	425b      	neglt	r3, r3
 8007e12:	f042 0202 	orrlt.w	r2, r2, #2
 8007e16:	9307      	strge	r3, [sp, #28]
 8007e18:	9307      	strlt	r3, [sp, #28]
 8007e1a:	bfb8      	it	lt
 8007e1c:	9204      	strlt	r2, [sp, #16]
 8007e1e:	7823      	ldrb	r3, [r4, #0]
 8007e20:	2b2e      	cmp	r3, #46	; 0x2e
 8007e22:	d10c      	bne.n	8007e3e <_vfiprintf_r+0x15a>
 8007e24:	7863      	ldrb	r3, [r4, #1]
 8007e26:	2b2a      	cmp	r3, #42	; 0x2a
 8007e28:	d134      	bne.n	8007e94 <_vfiprintf_r+0x1b0>
 8007e2a:	9b03      	ldr	r3, [sp, #12]
 8007e2c:	3402      	adds	r4, #2
 8007e2e:	1d1a      	adds	r2, r3, #4
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	9203      	str	r2, [sp, #12]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	bfb8      	it	lt
 8007e38:	f04f 33ff 	movlt.w	r3, #4294967295
 8007e3c:	9305      	str	r3, [sp, #20]
 8007e3e:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007f08 <_vfiprintf_r+0x224>
 8007e42:	2203      	movs	r2, #3
 8007e44:	4650      	mov	r0, sl
 8007e46:	7821      	ldrb	r1, [r4, #0]
 8007e48:	f7fc fe1f 	bl	8004a8a <memchr>
 8007e4c:	b138      	cbz	r0, 8007e5e <_vfiprintf_r+0x17a>
 8007e4e:	2240      	movs	r2, #64	; 0x40
 8007e50:	9b04      	ldr	r3, [sp, #16]
 8007e52:	eba0 000a 	sub.w	r0, r0, sl
 8007e56:	4082      	lsls	r2, r0
 8007e58:	4313      	orrs	r3, r2
 8007e5a:	3401      	adds	r4, #1
 8007e5c:	9304      	str	r3, [sp, #16]
 8007e5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e62:	2206      	movs	r2, #6
 8007e64:	4829      	ldr	r0, [pc, #164]	; (8007f0c <_vfiprintf_r+0x228>)
 8007e66:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007e6a:	f7fc fe0e 	bl	8004a8a <memchr>
 8007e6e:	2800      	cmp	r0, #0
 8007e70:	d03f      	beq.n	8007ef2 <_vfiprintf_r+0x20e>
 8007e72:	4b27      	ldr	r3, [pc, #156]	; (8007f10 <_vfiprintf_r+0x22c>)
 8007e74:	bb1b      	cbnz	r3, 8007ebe <_vfiprintf_r+0x1da>
 8007e76:	9b03      	ldr	r3, [sp, #12]
 8007e78:	3307      	adds	r3, #7
 8007e7a:	f023 0307 	bic.w	r3, r3, #7
 8007e7e:	3308      	adds	r3, #8
 8007e80:	9303      	str	r3, [sp, #12]
 8007e82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e84:	443b      	add	r3, r7
 8007e86:	9309      	str	r3, [sp, #36]	; 0x24
 8007e88:	e768      	b.n	8007d5c <_vfiprintf_r+0x78>
 8007e8a:	460c      	mov	r4, r1
 8007e8c:	2001      	movs	r0, #1
 8007e8e:	fb0c 3202 	mla	r2, ip, r2, r3
 8007e92:	e7a6      	b.n	8007de2 <_vfiprintf_r+0xfe>
 8007e94:	2300      	movs	r3, #0
 8007e96:	f04f 0c0a 	mov.w	ip, #10
 8007e9a:	4619      	mov	r1, r3
 8007e9c:	3401      	adds	r4, #1
 8007e9e:	9305      	str	r3, [sp, #20]
 8007ea0:	4620      	mov	r0, r4
 8007ea2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007ea6:	3a30      	subs	r2, #48	; 0x30
 8007ea8:	2a09      	cmp	r2, #9
 8007eaa:	d903      	bls.n	8007eb4 <_vfiprintf_r+0x1d0>
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d0c6      	beq.n	8007e3e <_vfiprintf_r+0x15a>
 8007eb0:	9105      	str	r1, [sp, #20]
 8007eb2:	e7c4      	b.n	8007e3e <_vfiprintf_r+0x15a>
 8007eb4:	4604      	mov	r4, r0
 8007eb6:	2301      	movs	r3, #1
 8007eb8:	fb0c 2101 	mla	r1, ip, r1, r2
 8007ebc:	e7f0      	b.n	8007ea0 <_vfiprintf_r+0x1bc>
 8007ebe:	ab03      	add	r3, sp, #12
 8007ec0:	9300      	str	r3, [sp, #0]
 8007ec2:	462a      	mov	r2, r5
 8007ec4:	4630      	mov	r0, r6
 8007ec6:	4b13      	ldr	r3, [pc, #76]	; (8007f14 <_vfiprintf_r+0x230>)
 8007ec8:	a904      	add	r1, sp, #16
 8007eca:	f7fb fe53 	bl	8003b74 <_printf_float>
 8007ece:	4607      	mov	r7, r0
 8007ed0:	1c78      	adds	r0, r7, #1
 8007ed2:	d1d6      	bne.n	8007e82 <_vfiprintf_r+0x19e>
 8007ed4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007ed6:	07d9      	lsls	r1, r3, #31
 8007ed8:	d405      	bmi.n	8007ee6 <_vfiprintf_r+0x202>
 8007eda:	89ab      	ldrh	r3, [r5, #12]
 8007edc:	059a      	lsls	r2, r3, #22
 8007ede:	d402      	bmi.n	8007ee6 <_vfiprintf_r+0x202>
 8007ee0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007ee2:	f7fc fdc9 	bl	8004a78 <__retarget_lock_release_recursive>
 8007ee6:	89ab      	ldrh	r3, [r5, #12]
 8007ee8:	065b      	lsls	r3, r3, #25
 8007eea:	f53f af1d 	bmi.w	8007d28 <_vfiprintf_r+0x44>
 8007eee:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007ef0:	e71c      	b.n	8007d2c <_vfiprintf_r+0x48>
 8007ef2:	ab03      	add	r3, sp, #12
 8007ef4:	9300      	str	r3, [sp, #0]
 8007ef6:	462a      	mov	r2, r5
 8007ef8:	4630      	mov	r0, r6
 8007efa:	4b06      	ldr	r3, [pc, #24]	; (8007f14 <_vfiprintf_r+0x230>)
 8007efc:	a904      	add	r1, sp, #16
 8007efe:	f7fc f8d9 	bl	80040b4 <_printf_i>
 8007f02:	e7e4      	b.n	8007ece <_vfiprintf_r+0x1ea>
 8007f04:	08009691 	.word	0x08009691
 8007f08:	08009697 	.word	0x08009697
 8007f0c:	0800969b 	.word	0x0800969b
 8007f10:	08003b75 	.word	0x08003b75
 8007f14:	08007cc1 	.word	0x08007cc1

08007f18 <__swbuf_r>:
 8007f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f1a:	460e      	mov	r6, r1
 8007f1c:	4614      	mov	r4, r2
 8007f1e:	4605      	mov	r5, r0
 8007f20:	b118      	cbz	r0, 8007f2a <__swbuf_r+0x12>
 8007f22:	6a03      	ldr	r3, [r0, #32]
 8007f24:	b90b      	cbnz	r3, 8007f2a <__swbuf_r+0x12>
 8007f26:	f7fc fc81 	bl	800482c <__sinit>
 8007f2a:	69a3      	ldr	r3, [r4, #24]
 8007f2c:	60a3      	str	r3, [r4, #8]
 8007f2e:	89a3      	ldrh	r3, [r4, #12]
 8007f30:	071a      	lsls	r2, r3, #28
 8007f32:	d525      	bpl.n	8007f80 <__swbuf_r+0x68>
 8007f34:	6923      	ldr	r3, [r4, #16]
 8007f36:	b31b      	cbz	r3, 8007f80 <__swbuf_r+0x68>
 8007f38:	6823      	ldr	r3, [r4, #0]
 8007f3a:	6922      	ldr	r2, [r4, #16]
 8007f3c:	b2f6      	uxtb	r6, r6
 8007f3e:	1a98      	subs	r0, r3, r2
 8007f40:	6963      	ldr	r3, [r4, #20]
 8007f42:	4637      	mov	r7, r6
 8007f44:	4283      	cmp	r3, r0
 8007f46:	dc04      	bgt.n	8007f52 <__swbuf_r+0x3a>
 8007f48:	4621      	mov	r1, r4
 8007f4a:	4628      	mov	r0, r5
 8007f4c:	f7ff fa30 	bl	80073b0 <_fflush_r>
 8007f50:	b9e0      	cbnz	r0, 8007f8c <__swbuf_r+0x74>
 8007f52:	68a3      	ldr	r3, [r4, #8]
 8007f54:	3b01      	subs	r3, #1
 8007f56:	60a3      	str	r3, [r4, #8]
 8007f58:	6823      	ldr	r3, [r4, #0]
 8007f5a:	1c5a      	adds	r2, r3, #1
 8007f5c:	6022      	str	r2, [r4, #0]
 8007f5e:	701e      	strb	r6, [r3, #0]
 8007f60:	6962      	ldr	r2, [r4, #20]
 8007f62:	1c43      	adds	r3, r0, #1
 8007f64:	429a      	cmp	r2, r3
 8007f66:	d004      	beq.n	8007f72 <__swbuf_r+0x5a>
 8007f68:	89a3      	ldrh	r3, [r4, #12]
 8007f6a:	07db      	lsls	r3, r3, #31
 8007f6c:	d506      	bpl.n	8007f7c <__swbuf_r+0x64>
 8007f6e:	2e0a      	cmp	r6, #10
 8007f70:	d104      	bne.n	8007f7c <__swbuf_r+0x64>
 8007f72:	4621      	mov	r1, r4
 8007f74:	4628      	mov	r0, r5
 8007f76:	f7ff fa1b 	bl	80073b0 <_fflush_r>
 8007f7a:	b938      	cbnz	r0, 8007f8c <__swbuf_r+0x74>
 8007f7c:	4638      	mov	r0, r7
 8007f7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f80:	4621      	mov	r1, r4
 8007f82:	4628      	mov	r0, r5
 8007f84:	f000 f806 	bl	8007f94 <__swsetup_r>
 8007f88:	2800      	cmp	r0, #0
 8007f8a:	d0d5      	beq.n	8007f38 <__swbuf_r+0x20>
 8007f8c:	f04f 37ff 	mov.w	r7, #4294967295
 8007f90:	e7f4      	b.n	8007f7c <__swbuf_r+0x64>
	...

08007f94 <__swsetup_r>:
 8007f94:	b538      	push	{r3, r4, r5, lr}
 8007f96:	4b2a      	ldr	r3, [pc, #168]	; (8008040 <__swsetup_r+0xac>)
 8007f98:	4605      	mov	r5, r0
 8007f9a:	6818      	ldr	r0, [r3, #0]
 8007f9c:	460c      	mov	r4, r1
 8007f9e:	b118      	cbz	r0, 8007fa8 <__swsetup_r+0x14>
 8007fa0:	6a03      	ldr	r3, [r0, #32]
 8007fa2:	b90b      	cbnz	r3, 8007fa8 <__swsetup_r+0x14>
 8007fa4:	f7fc fc42 	bl	800482c <__sinit>
 8007fa8:	89a3      	ldrh	r3, [r4, #12]
 8007faa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007fae:	0718      	lsls	r0, r3, #28
 8007fb0:	d422      	bmi.n	8007ff8 <__swsetup_r+0x64>
 8007fb2:	06d9      	lsls	r1, r3, #27
 8007fb4:	d407      	bmi.n	8007fc6 <__swsetup_r+0x32>
 8007fb6:	2309      	movs	r3, #9
 8007fb8:	602b      	str	r3, [r5, #0]
 8007fba:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007fbe:	f04f 30ff 	mov.w	r0, #4294967295
 8007fc2:	81a3      	strh	r3, [r4, #12]
 8007fc4:	e034      	b.n	8008030 <__swsetup_r+0x9c>
 8007fc6:	0758      	lsls	r0, r3, #29
 8007fc8:	d512      	bpl.n	8007ff0 <__swsetup_r+0x5c>
 8007fca:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007fcc:	b141      	cbz	r1, 8007fe0 <__swsetup_r+0x4c>
 8007fce:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007fd2:	4299      	cmp	r1, r3
 8007fd4:	d002      	beq.n	8007fdc <__swsetup_r+0x48>
 8007fd6:	4628      	mov	r0, r5
 8007fd8:	f7fd fbda 	bl	8005790 <_free_r>
 8007fdc:	2300      	movs	r3, #0
 8007fde:	6363      	str	r3, [r4, #52]	; 0x34
 8007fe0:	89a3      	ldrh	r3, [r4, #12]
 8007fe2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007fe6:	81a3      	strh	r3, [r4, #12]
 8007fe8:	2300      	movs	r3, #0
 8007fea:	6063      	str	r3, [r4, #4]
 8007fec:	6923      	ldr	r3, [r4, #16]
 8007fee:	6023      	str	r3, [r4, #0]
 8007ff0:	89a3      	ldrh	r3, [r4, #12]
 8007ff2:	f043 0308 	orr.w	r3, r3, #8
 8007ff6:	81a3      	strh	r3, [r4, #12]
 8007ff8:	6923      	ldr	r3, [r4, #16]
 8007ffa:	b94b      	cbnz	r3, 8008010 <__swsetup_r+0x7c>
 8007ffc:	89a3      	ldrh	r3, [r4, #12]
 8007ffe:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008002:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008006:	d003      	beq.n	8008010 <__swsetup_r+0x7c>
 8008008:	4621      	mov	r1, r4
 800800a:	4628      	mov	r0, r5
 800800c:	f000 f883 	bl	8008116 <__smakebuf_r>
 8008010:	89a0      	ldrh	r0, [r4, #12]
 8008012:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008016:	f010 0301 	ands.w	r3, r0, #1
 800801a:	d00a      	beq.n	8008032 <__swsetup_r+0x9e>
 800801c:	2300      	movs	r3, #0
 800801e:	60a3      	str	r3, [r4, #8]
 8008020:	6963      	ldr	r3, [r4, #20]
 8008022:	425b      	negs	r3, r3
 8008024:	61a3      	str	r3, [r4, #24]
 8008026:	6923      	ldr	r3, [r4, #16]
 8008028:	b943      	cbnz	r3, 800803c <__swsetup_r+0xa8>
 800802a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800802e:	d1c4      	bne.n	8007fba <__swsetup_r+0x26>
 8008030:	bd38      	pop	{r3, r4, r5, pc}
 8008032:	0781      	lsls	r1, r0, #30
 8008034:	bf58      	it	pl
 8008036:	6963      	ldrpl	r3, [r4, #20]
 8008038:	60a3      	str	r3, [r4, #8]
 800803a:	e7f4      	b.n	8008026 <__swsetup_r+0x92>
 800803c:	2000      	movs	r0, #0
 800803e:	e7f7      	b.n	8008030 <__swsetup_r+0x9c>
 8008040:	20000064 	.word	0x20000064

08008044 <_raise_r>:
 8008044:	291f      	cmp	r1, #31
 8008046:	b538      	push	{r3, r4, r5, lr}
 8008048:	4604      	mov	r4, r0
 800804a:	460d      	mov	r5, r1
 800804c:	d904      	bls.n	8008058 <_raise_r+0x14>
 800804e:	2316      	movs	r3, #22
 8008050:	6003      	str	r3, [r0, #0]
 8008052:	f04f 30ff 	mov.w	r0, #4294967295
 8008056:	bd38      	pop	{r3, r4, r5, pc}
 8008058:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800805a:	b112      	cbz	r2, 8008062 <_raise_r+0x1e>
 800805c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008060:	b94b      	cbnz	r3, 8008076 <_raise_r+0x32>
 8008062:	4620      	mov	r0, r4
 8008064:	f000 f830 	bl	80080c8 <_getpid_r>
 8008068:	462a      	mov	r2, r5
 800806a:	4601      	mov	r1, r0
 800806c:	4620      	mov	r0, r4
 800806e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008072:	f000 b817 	b.w	80080a4 <_kill_r>
 8008076:	2b01      	cmp	r3, #1
 8008078:	d00a      	beq.n	8008090 <_raise_r+0x4c>
 800807a:	1c59      	adds	r1, r3, #1
 800807c:	d103      	bne.n	8008086 <_raise_r+0x42>
 800807e:	2316      	movs	r3, #22
 8008080:	6003      	str	r3, [r0, #0]
 8008082:	2001      	movs	r0, #1
 8008084:	e7e7      	b.n	8008056 <_raise_r+0x12>
 8008086:	2400      	movs	r4, #0
 8008088:	4628      	mov	r0, r5
 800808a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800808e:	4798      	blx	r3
 8008090:	2000      	movs	r0, #0
 8008092:	e7e0      	b.n	8008056 <_raise_r+0x12>

08008094 <raise>:
 8008094:	4b02      	ldr	r3, [pc, #8]	; (80080a0 <raise+0xc>)
 8008096:	4601      	mov	r1, r0
 8008098:	6818      	ldr	r0, [r3, #0]
 800809a:	f7ff bfd3 	b.w	8008044 <_raise_r>
 800809e:	bf00      	nop
 80080a0:	20000064 	.word	0x20000064

080080a4 <_kill_r>:
 80080a4:	b538      	push	{r3, r4, r5, lr}
 80080a6:	2300      	movs	r3, #0
 80080a8:	4d06      	ldr	r5, [pc, #24]	; (80080c4 <_kill_r+0x20>)
 80080aa:	4604      	mov	r4, r0
 80080ac:	4608      	mov	r0, r1
 80080ae:	4611      	mov	r1, r2
 80080b0:	602b      	str	r3, [r5, #0]
 80080b2:	f7f9 fdec 	bl	8001c8e <_kill>
 80080b6:	1c43      	adds	r3, r0, #1
 80080b8:	d102      	bne.n	80080c0 <_kill_r+0x1c>
 80080ba:	682b      	ldr	r3, [r5, #0]
 80080bc:	b103      	cbz	r3, 80080c0 <_kill_r+0x1c>
 80080be:	6023      	str	r3, [r4, #0]
 80080c0:	bd38      	pop	{r3, r4, r5, pc}
 80080c2:	bf00      	nop
 80080c4:	2000051c 	.word	0x2000051c

080080c8 <_getpid_r>:
 80080c8:	f7f9 bdda 	b.w	8001c80 <_getpid>

080080cc <__swhatbuf_r>:
 80080cc:	b570      	push	{r4, r5, r6, lr}
 80080ce:	460c      	mov	r4, r1
 80080d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080d4:	4615      	mov	r5, r2
 80080d6:	2900      	cmp	r1, #0
 80080d8:	461e      	mov	r6, r3
 80080da:	b096      	sub	sp, #88	; 0x58
 80080dc:	da0c      	bge.n	80080f8 <__swhatbuf_r+0x2c>
 80080de:	89a3      	ldrh	r3, [r4, #12]
 80080e0:	2100      	movs	r1, #0
 80080e2:	f013 0f80 	tst.w	r3, #128	; 0x80
 80080e6:	bf0c      	ite	eq
 80080e8:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80080ec:	2340      	movne	r3, #64	; 0x40
 80080ee:	2000      	movs	r0, #0
 80080f0:	6031      	str	r1, [r6, #0]
 80080f2:	602b      	str	r3, [r5, #0]
 80080f4:	b016      	add	sp, #88	; 0x58
 80080f6:	bd70      	pop	{r4, r5, r6, pc}
 80080f8:	466a      	mov	r2, sp
 80080fa:	f000 f849 	bl	8008190 <_fstat_r>
 80080fe:	2800      	cmp	r0, #0
 8008100:	dbed      	blt.n	80080de <__swhatbuf_r+0x12>
 8008102:	9901      	ldr	r1, [sp, #4]
 8008104:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8008108:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800810c:	4259      	negs	r1, r3
 800810e:	4159      	adcs	r1, r3
 8008110:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008114:	e7eb      	b.n	80080ee <__swhatbuf_r+0x22>

08008116 <__smakebuf_r>:
 8008116:	898b      	ldrh	r3, [r1, #12]
 8008118:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800811a:	079d      	lsls	r5, r3, #30
 800811c:	4606      	mov	r6, r0
 800811e:	460c      	mov	r4, r1
 8008120:	d507      	bpl.n	8008132 <__smakebuf_r+0x1c>
 8008122:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008126:	6023      	str	r3, [r4, #0]
 8008128:	6123      	str	r3, [r4, #16]
 800812a:	2301      	movs	r3, #1
 800812c:	6163      	str	r3, [r4, #20]
 800812e:	b002      	add	sp, #8
 8008130:	bd70      	pop	{r4, r5, r6, pc}
 8008132:	466a      	mov	r2, sp
 8008134:	ab01      	add	r3, sp, #4
 8008136:	f7ff ffc9 	bl	80080cc <__swhatbuf_r>
 800813a:	9900      	ldr	r1, [sp, #0]
 800813c:	4605      	mov	r5, r0
 800813e:	4630      	mov	r0, r6
 8008140:	f7fd fb96 	bl	8005870 <_malloc_r>
 8008144:	b948      	cbnz	r0, 800815a <__smakebuf_r+0x44>
 8008146:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800814a:	059a      	lsls	r2, r3, #22
 800814c:	d4ef      	bmi.n	800812e <__smakebuf_r+0x18>
 800814e:	f023 0303 	bic.w	r3, r3, #3
 8008152:	f043 0302 	orr.w	r3, r3, #2
 8008156:	81a3      	strh	r3, [r4, #12]
 8008158:	e7e3      	b.n	8008122 <__smakebuf_r+0xc>
 800815a:	89a3      	ldrh	r3, [r4, #12]
 800815c:	6020      	str	r0, [r4, #0]
 800815e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008162:	81a3      	strh	r3, [r4, #12]
 8008164:	9b00      	ldr	r3, [sp, #0]
 8008166:	6120      	str	r0, [r4, #16]
 8008168:	6163      	str	r3, [r4, #20]
 800816a:	9b01      	ldr	r3, [sp, #4]
 800816c:	b15b      	cbz	r3, 8008186 <__smakebuf_r+0x70>
 800816e:	4630      	mov	r0, r6
 8008170:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008174:	f000 f81e 	bl	80081b4 <_isatty_r>
 8008178:	b128      	cbz	r0, 8008186 <__smakebuf_r+0x70>
 800817a:	89a3      	ldrh	r3, [r4, #12]
 800817c:	f023 0303 	bic.w	r3, r3, #3
 8008180:	f043 0301 	orr.w	r3, r3, #1
 8008184:	81a3      	strh	r3, [r4, #12]
 8008186:	89a3      	ldrh	r3, [r4, #12]
 8008188:	431d      	orrs	r5, r3
 800818a:	81a5      	strh	r5, [r4, #12]
 800818c:	e7cf      	b.n	800812e <__smakebuf_r+0x18>
	...

08008190 <_fstat_r>:
 8008190:	b538      	push	{r3, r4, r5, lr}
 8008192:	2300      	movs	r3, #0
 8008194:	4d06      	ldr	r5, [pc, #24]	; (80081b0 <_fstat_r+0x20>)
 8008196:	4604      	mov	r4, r0
 8008198:	4608      	mov	r0, r1
 800819a:	4611      	mov	r1, r2
 800819c:	602b      	str	r3, [r5, #0]
 800819e:	f7f9 fdd4 	bl	8001d4a <_fstat>
 80081a2:	1c43      	adds	r3, r0, #1
 80081a4:	d102      	bne.n	80081ac <_fstat_r+0x1c>
 80081a6:	682b      	ldr	r3, [r5, #0]
 80081a8:	b103      	cbz	r3, 80081ac <_fstat_r+0x1c>
 80081aa:	6023      	str	r3, [r4, #0]
 80081ac:	bd38      	pop	{r3, r4, r5, pc}
 80081ae:	bf00      	nop
 80081b0:	2000051c 	.word	0x2000051c

080081b4 <_isatty_r>:
 80081b4:	b538      	push	{r3, r4, r5, lr}
 80081b6:	2300      	movs	r3, #0
 80081b8:	4d05      	ldr	r5, [pc, #20]	; (80081d0 <_isatty_r+0x1c>)
 80081ba:	4604      	mov	r4, r0
 80081bc:	4608      	mov	r0, r1
 80081be:	602b      	str	r3, [r5, #0]
 80081c0:	f7f9 fdd2 	bl	8001d68 <_isatty>
 80081c4:	1c43      	adds	r3, r0, #1
 80081c6:	d102      	bne.n	80081ce <_isatty_r+0x1a>
 80081c8:	682b      	ldr	r3, [r5, #0]
 80081ca:	b103      	cbz	r3, 80081ce <_isatty_r+0x1a>
 80081cc:	6023      	str	r3, [r4, #0]
 80081ce:	bd38      	pop	{r3, r4, r5, pc}
 80081d0:	2000051c 	.word	0x2000051c

080081d4 <cos>:
 80081d4:	b530      	push	{r4, r5, lr}
 80081d6:	4a20      	ldr	r2, [pc, #128]	; (8008258 <cos+0x84>)
 80081d8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80081dc:	4293      	cmp	r3, r2
 80081de:	b087      	sub	sp, #28
 80081e0:	dc06      	bgt.n	80081f0 <cos+0x1c>
 80081e2:	2200      	movs	r2, #0
 80081e4:	2300      	movs	r3, #0
 80081e6:	b007      	add	sp, #28
 80081e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80081ec:	f000 b8c4 	b.w	8008378 <__kernel_cos>
 80081f0:	4a1a      	ldr	r2, [pc, #104]	; (800825c <cos+0x88>)
 80081f2:	4293      	cmp	r3, r2
 80081f4:	dd05      	ble.n	8008202 <cos+0x2e>
 80081f6:	4602      	mov	r2, r0
 80081f8:	460b      	mov	r3, r1
 80081fa:	f7f8 f869 	bl	80002d0 <__aeabi_dsub>
 80081fe:	b007      	add	sp, #28
 8008200:	bd30      	pop	{r4, r5, pc}
 8008202:	aa02      	add	r2, sp, #8
 8008204:	f000 fa30 	bl	8008668 <__ieee754_rem_pio2>
 8008208:	f000 0003 	and.w	r0, r0, #3
 800820c:	2801      	cmp	r0, #1
 800820e:	d009      	beq.n	8008224 <cos+0x50>
 8008210:	2802      	cmp	r0, #2
 8008212:	d011      	beq.n	8008238 <cos+0x64>
 8008214:	b9b8      	cbnz	r0, 8008246 <cos+0x72>
 8008216:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800821a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800821e:	f000 f8ab 	bl	8008378 <__kernel_cos>
 8008222:	e7ec      	b.n	80081fe <cos+0x2a>
 8008224:	9000      	str	r0, [sp, #0]
 8008226:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800822a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800822e:	f000 f963 	bl	80084f8 <__kernel_sin>
 8008232:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8008236:	e7e2      	b.n	80081fe <cos+0x2a>
 8008238:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800823c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008240:	f000 f89a 	bl	8008378 <__kernel_cos>
 8008244:	e7f5      	b.n	8008232 <cos+0x5e>
 8008246:	2301      	movs	r3, #1
 8008248:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800824c:	9300      	str	r3, [sp, #0]
 800824e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008252:	f000 f951 	bl	80084f8 <__kernel_sin>
 8008256:	e7d2      	b.n	80081fe <cos+0x2a>
 8008258:	3fe921fb 	.word	0x3fe921fb
 800825c:	7fefffff 	.word	0x7fefffff

08008260 <sin>:
 8008260:	b530      	push	{r4, r5, lr}
 8008262:	4a20      	ldr	r2, [pc, #128]	; (80082e4 <sin+0x84>)
 8008264:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008268:	4293      	cmp	r3, r2
 800826a:	b087      	sub	sp, #28
 800826c:	dc06      	bgt.n	800827c <sin+0x1c>
 800826e:	2300      	movs	r3, #0
 8008270:	2200      	movs	r2, #0
 8008272:	9300      	str	r3, [sp, #0]
 8008274:	2300      	movs	r3, #0
 8008276:	f000 f93f 	bl	80084f8 <__kernel_sin>
 800827a:	e006      	b.n	800828a <sin+0x2a>
 800827c:	4a1a      	ldr	r2, [pc, #104]	; (80082e8 <sin+0x88>)
 800827e:	4293      	cmp	r3, r2
 8008280:	dd05      	ble.n	800828e <sin+0x2e>
 8008282:	4602      	mov	r2, r0
 8008284:	460b      	mov	r3, r1
 8008286:	f7f8 f823 	bl	80002d0 <__aeabi_dsub>
 800828a:	b007      	add	sp, #28
 800828c:	bd30      	pop	{r4, r5, pc}
 800828e:	aa02      	add	r2, sp, #8
 8008290:	f000 f9ea 	bl	8008668 <__ieee754_rem_pio2>
 8008294:	f000 0003 	and.w	r0, r0, #3
 8008298:	2801      	cmp	r0, #1
 800829a:	d009      	beq.n	80082b0 <sin+0x50>
 800829c:	2802      	cmp	r0, #2
 800829e:	d00e      	beq.n	80082be <sin+0x5e>
 80082a0:	b9c0      	cbnz	r0, 80082d4 <sin+0x74>
 80082a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80082a6:	2301      	movs	r3, #1
 80082a8:	9300      	str	r3, [sp, #0]
 80082aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80082ae:	e7e2      	b.n	8008276 <sin+0x16>
 80082b0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80082b4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80082b8:	f000 f85e 	bl	8008378 <__kernel_cos>
 80082bc:	e7e5      	b.n	800828a <sin+0x2a>
 80082be:	2301      	movs	r3, #1
 80082c0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80082c4:	9300      	str	r3, [sp, #0]
 80082c6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80082ca:	f000 f915 	bl	80084f8 <__kernel_sin>
 80082ce:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 80082d2:	e7da      	b.n	800828a <sin+0x2a>
 80082d4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80082d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80082dc:	f000 f84c 	bl	8008378 <__kernel_cos>
 80082e0:	e7f5      	b.n	80082ce <sin+0x6e>
 80082e2:	bf00      	nop
 80082e4:	3fe921fb 	.word	0x3fe921fb
 80082e8:	7fefffff 	.word	0x7fefffff

080082ec <round>:
 80082ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082ee:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80082f2:	f2a7 32ff 	subw	r2, r7, #1023	; 0x3ff
 80082f6:	2a13      	cmp	r2, #19
 80082f8:	460b      	mov	r3, r1
 80082fa:	4605      	mov	r5, r0
 80082fc:	460c      	mov	r4, r1
 80082fe:	dc18      	bgt.n	8008332 <round+0x46>
 8008300:	2a00      	cmp	r2, #0
 8008302:	da09      	bge.n	8008318 <round+0x2c>
 8008304:	3201      	adds	r2, #1
 8008306:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 800830a:	d103      	bne.n	8008314 <round+0x28>
 800830c:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8008310:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008314:	2200      	movs	r2, #0
 8008316:	e029      	b.n	800836c <round+0x80>
 8008318:	4816      	ldr	r0, [pc, #88]	; (8008374 <round+0x88>)
 800831a:	4110      	asrs	r0, r2
 800831c:	4001      	ands	r1, r0
 800831e:	4329      	orrs	r1, r5
 8008320:	d011      	beq.n	8008346 <round+0x5a>
 8008322:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8008326:	fa41 f202 	asr.w	r2, r1, r2
 800832a:	4413      	add	r3, r2
 800832c:	ea23 0300 	bic.w	r3, r3, r0
 8008330:	e7f0      	b.n	8008314 <round+0x28>
 8008332:	2a33      	cmp	r2, #51	; 0x33
 8008334:	dd0a      	ble.n	800834c <round+0x60>
 8008336:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800833a:	d104      	bne.n	8008346 <round+0x5a>
 800833c:	4602      	mov	r2, r0
 800833e:	f7f7 ffc9 	bl	80002d4 <__adddf3>
 8008342:	4605      	mov	r5, r0
 8008344:	460c      	mov	r4, r1
 8008346:	4628      	mov	r0, r5
 8008348:	4621      	mov	r1, r4
 800834a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800834c:	f04f 30ff 	mov.w	r0, #4294967295
 8008350:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8008354:	40f8      	lsrs	r0, r7
 8008356:	4228      	tst	r0, r5
 8008358:	d0f5      	beq.n	8008346 <round+0x5a>
 800835a:	f1c2 0133 	rsb	r1, r2, #51	; 0x33
 800835e:	2201      	movs	r2, #1
 8008360:	408a      	lsls	r2, r1
 8008362:	1952      	adds	r2, r2, r5
 8008364:	bf28      	it	cs
 8008366:	3301      	addcs	r3, #1
 8008368:	ea22 0200 	bic.w	r2, r2, r0
 800836c:	4619      	mov	r1, r3
 800836e:	4610      	mov	r0, r2
 8008370:	e7e7      	b.n	8008342 <round+0x56>
 8008372:	bf00      	nop
 8008374:	000fffff 	.word	0x000fffff

08008378 <__kernel_cos>:
 8008378:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800837c:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8008380:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8008384:	4680      	mov	r8, r0
 8008386:	460f      	mov	r7, r1
 8008388:	e9cd 2300 	strd	r2, r3, [sp]
 800838c:	da04      	bge.n	8008398 <__kernel_cos+0x20>
 800838e:	f7f8 fc07 	bl	8000ba0 <__aeabi_d2iz>
 8008392:	2800      	cmp	r0, #0
 8008394:	f000 8086 	beq.w	80084a4 <__kernel_cos+0x12c>
 8008398:	4642      	mov	r2, r8
 800839a:	463b      	mov	r3, r7
 800839c:	4640      	mov	r0, r8
 800839e:	4639      	mov	r1, r7
 80083a0:	f7f8 f94e 	bl	8000640 <__aeabi_dmul>
 80083a4:	2200      	movs	r2, #0
 80083a6:	4b4e      	ldr	r3, [pc, #312]	; (80084e0 <__kernel_cos+0x168>)
 80083a8:	4604      	mov	r4, r0
 80083aa:	460d      	mov	r5, r1
 80083ac:	f7f8 f948 	bl	8000640 <__aeabi_dmul>
 80083b0:	a33f      	add	r3, pc, #252	; (adr r3, 80084b0 <__kernel_cos+0x138>)
 80083b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083b6:	4682      	mov	sl, r0
 80083b8:	468b      	mov	fp, r1
 80083ba:	4620      	mov	r0, r4
 80083bc:	4629      	mov	r1, r5
 80083be:	f7f8 f93f 	bl	8000640 <__aeabi_dmul>
 80083c2:	a33d      	add	r3, pc, #244	; (adr r3, 80084b8 <__kernel_cos+0x140>)
 80083c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083c8:	f7f7 ff84 	bl	80002d4 <__adddf3>
 80083cc:	4622      	mov	r2, r4
 80083ce:	462b      	mov	r3, r5
 80083d0:	f7f8 f936 	bl	8000640 <__aeabi_dmul>
 80083d4:	a33a      	add	r3, pc, #232	; (adr r3, 80084c0 <__kernel_cos+0x148>)
 80083d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083da:	f7f7 ff79 	bl	80002d0 <__aeabi_dsub>
 80083de:	4622      	mov	r2, r4
 80083e0:	462b      	mov	r3, r5
 80083e2:	f7f8 f92d 	bl	8000640 <__aeabi_dmul>
 80083e6:	a338      	add	r3, pc, #224	; (adr r3, 80084c8 <__kernel_cos+0x150>)
 80083e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083ec:	f7f7 ff72 	bl	80002d4 <__adddf3>
 80083f0:	4622      	mov	r2, r4
 80083f2:	462b      	mov	r3, r5
 80083f4:	f7f8 f924 	bl	8000640 <__aeabi_dmul>
 80083f8:	a335      	add	r3, pc, #212	; (adr r3, 80084d0 <__kernel_cos+0x158>)
 80083fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083fe:	f7f7 ff67 	bl	80002d0 <__aeabi_dsub>
 8008402:	4622      	mov	r2, r4
 8008404:	462b      	mov	r3, r5
 8008406:	f7f8 f91b 	bl	8000640 <__aeabi_dmul>
 800840a:	a333      	add	r3, pc, #204	; (adr r3, 80084d8 <__kernel_cos+0x160>)
 800840c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008410:	f7f7 ff60 	bl	80002d4 <__adddf3>
 8008414:	4622      	mov	r2, r4
 8008416:	462b      	mov	r3, r5
 8008418:	f7f8 f912 	bl	8000640 <__aeabi_dmul>
 800841c:	4622      	mov	r2, r4
 800841e:	462b      	mov	r3, r5
 8008420:	f7f8 f90e 	bl	8000640 <__aeabi_dmul>
 8008424:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008428:	4604      	mov	r4, r0
 800842a:	460d      	mov	r5, r1
 800842c:	4640      	mov	r0, r8
 800842e:	4639      	mov	r1, r7
 8008430:	f7f8 f906 	bl	8000640 <__aeabi_dmul>
 8008434:	460b      	mov	r3, r1
 8008436:	4602      	mov	r2, r0
 8008438:	4629      	mov	r1, r5
 800843a:	4620      	mov	r0, r4
 800843c:	f7f7 ff48 	bl	80002d0 <__aeabi_dsub>
 8008440:	4b28      	ldr	r3, [pc, #160]	; (80084e4 <__kernel_cos+0x16c>)
 8008442:	4680      	mov	r8, r0
 8008444:	429e      	cmp	r6, r3
 8008446:	4689      	mov	r9, r1
 8008448:	dc0e      	bgt.n	8008468 <__kernel_cos+0xf0>
 800844a:	4602      	mov	r2, r0
 800844c:	460b      	mov	r3, r1
 800844e:	4650      	mov	r0, sl
 8008450:	4659      	mov	r1, fp
 8008452:	f7f7 ff3d 	bl	80002d0 <__aeabi_dsub>
 8008456:	4602      	mov	r2, r0
 8008458:	2000      	movs	r0, #0
 800845a:	460b      	mov	r3, r1
 800845c:	4922      	ldr	r1, [pc, #136]	; (80084e8 <__kernel_cos+0x170>)
 800845e:	f7f7 ff37 	bl	80002d0 <__aeabi_dsub>
 8008462:	b003      	add	sp, #12
 8008464:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008468:	2400      	movs	r4, #0
 800846a:	4b20      	ldr	r3, [pc, #128]	; (80084ec <__kernel_cos+0x174>)
 800846c:	4622      	mov	r2, r4
 800846e:	429e      	cmp	r6, r3
 8008470:	bfcc      	ite	gt
 8008472:	4d1f      	ldrgt	r5, [pc, #124]	; (80084f0 <__kernel_cos+0x178>)
 8008474:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8008478:	462b      	mov	r3, r5
 800847a:	2000      	movs	r0, #0
 800847c:	491a      	ldr	r1, [pc, #104]	; (80084e8 <__kernel_cos+0x170>)
 800847e:	f7f7 ff27 	bl	80002d0 <__aeabi_dsub>
 8008482:	4622      	mov	r2, r4
 8008484:	4606      	mov	r6, r0
 8008486:	460f      	mov	r7, r1
 8008488:	462b      	mov	r3, r5
 800848a:	4650      	mov	r0, sl
 800848c:	4659      	mov	r1, fp
 800848e:	f7f7 ff1f 	bl	80002d0 <__aeabi_dsub>
 8008492:	4642      	mov	r2, r8
 8008494:	464b      	mov	r3, r9
 8008496:	f7f7 ff1b 	bl	80002d0 <__aeabi_dsub>
 800849a:	4602      	mov	r2, r0
 800849c:	460b      	mov	r3, r1
 800849e:	4630      	mov	r0, r6
 80084a0:	4639      	mov	r1, r7
 80084a2:	e7dc      	b.n	800845e <__kernel_cos+0xe6>
 80084a4:	2000      	movs	r0, #0
 80084a6:	4910      	ldr	r1, [pc, #64]	; (80084e8 <__kernel_cos+0x170>)
 80084a8:	e7db      	b.n	8008462 <__kernel_cos+0xea>
 80084aa:	bf00      	nop
 80084ac:	f3af 8000 	nop.w
 80084b0:	be8838d4 	.word	0xbe8838d4
 80084b4:	bda8fae9 	.word	0xbda8fae9
 80084b8:	bdb4b1c4 	.word	0xbdb4b1c4
 80084bc:	3e21ee9e 	.word	0x3e21ee9e
 80084c0:	809c52ad 	.word	0x809c52ad
 80084c4:	3e927e4f 	.word	0x3e927e4f
 80084c8:	19cb1590 	.word	0x19cb1590
 80084cc:	3efa01a0 	.word	0x3efa01a0
 80084d0:	16c15177 	.word	0x16c15177
 80084d4:	3f56c16c 	.word	0x3f56c16c
 80084d8:	5555554c 	.word	0x5555554c
 80084dc:	3fa55555 	.word	0x3fa55555
 80084e0:	3fe00000 	.word	0x3fe00000
 80084e4:	3fd33332 	.word	0x3fd33332
 80084e8:	3ff00000 	.word	0x3ff00000
 80084ec:	3fe90000 	.word	0x3fe90000
 80084f0:	3fd20000 	.word	0x3fd20000
 80084f4:	00000000 	.word	0x00000000

080084f8 <__kernel_sin>:
 80084f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80084fc:	b086      	sub	sp, #24
 80084fe:	e9cd 2300 	strd	r2, r3, [sp]
 8008502:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008506:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800850a:	4682      	mov	sl, r0
 800850c:	460c      	mov	r4, r1
 800850e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8008510:	da03      	bge.n	800851a <__kernel_sin+0x22>
 8008512:	f7f8 fb45 	bl	8000ba0 <__aeabi_d2iz>
 8008516:	2800      	cmp	r0, #0
 8008518:	d050      	beq.n	80085bc <__kernel_sin+0xc4>
 800851a:	4652      	mov	r2, sl
 800851c:	4623      	mov	r3, r4
 800851e:	4650      	mov	r0, sl
 8008520:	4621      	mov	r1, r4
 8008522:	f7f8 f88d 	bl	8000640 <__aeabi_dmul>
 8008526:	4606      	mov	r6, r0
 8008528:	460f      	mov	r7, r1
 800852a:	4602      	mov	r2, r0
 800852c:	460b      	mov	r3, r1
 800852e:	4650      	mov	r0, sl
 8008530:	4621      	mov	r1, r4
 8008532:	f7f8 f885 	bl	8000640 <__aeabi_dmul>
 8008536:	a33e      	add	r3, pc, #248	; (adr r3, 8008630 <__kernel_sin+0x138>)
 8008538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800853c:	4680      	mov	r8, r0
 800853e:	4689      	mov	r9, r1
 8008540:	4630      	mov	r0, r6
 8008542:	4639      	mov	r1, r7
 8008544:	f7f8 f87c 	bl	8000640 <__aeabi_dmul>
 8008548:	a33b      	add	r3, pc, #236	; (adr r3, 8008638 <__kernel_sin+0x140>)
 800854a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800854e:	f7f7 febf 	bl	80002d0 <__aeabi_dsub>
 8008552:	4632      	mov	r2, r6
 8008554:	463b      	mov	r3, r7
 8008556:	f7f8 f873 	bl	8000640 <__aeabi_dmul>
 800855a:	a339      	add	r3, pc, #228	; (adr r3, 8008640 <__kernel_sin+0x148>)
 800855c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008560:	f7f7 feb8 	bl	80002d4 <__adddf3>
 8008564:	4632      	mov	r2, r6
 8008566:	463b      	mov	r3, r7
 8008568:	f7f8 f86a 	bl	8000640 <__aeabi_dmul>
 800856c:	a336      	add	r3, pc, #216	; (adr r3, 8008648 <__kernel_sin+0x150>)
 800856e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008572:	f7f7 fead 	bl	80002d0 <__aeabi_dsub>
 8008576:	4632      	mov	r2, r6
 8008578:	463b      	mov	r3, r7
 800857a:	f7f8 f861 	bl	8000640 <__aeabi_dmul>
 800857e:	a334      	add	r3, pc, #208	; (adr r3, 8008650 <__kernel_sin+0x158>)
 8008580:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008584:	f7f7 fea6 	bl	80002d4 <__adddf3>
 8008588:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800858c:	b9dd      	cbnz	r5, 80085c6 <__kernel_sin+0xce>
 800858e:	4602      	mov	r2, r0
 8008590:	460b      	mov	r3, r1
 8008592:	4630      	mov	r0, r6
 8008594:	4639      	mov	r1, r7
 8008596:	f7f8 f853 	bl	8000640 <__aeabi_dmul>
 800859a:	a32f      	add	r3, pc, #188	; (adr r3, 8008658 <__kernel_sin+0x160>)
 800859c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085a0:	f7f7 fe96 	bl	80002d0 <__aeabi_dsub>
 80085a4:	4642      	mov	r2, r8
 80085a6:	464b      	mov	r3, r9
 80085a8:	f7f8 f84a 	bl	8000640 <__aeabi_dmul>
 80085ac:	4602      	mov	r2, r0
 80085ae:	460b      	mov	r3, r1
 80085b0:	4650      	mov	r0, sl
 80085b2:	4621      	mov	r1, r4
 80085b4:	f7f7 fe8e 	bl	80002d4 <__adddf3>
 80085b8:	4682      	mov	sl, r0
 80085ba:	460c      	mov	r4, r1
 80085bc:	4650      	mov	r0, sl
 80085be:	4621      	mov	r1, r4
 80085c0:	b006      	add	sp, #24
 80085c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085c6:	2200      	movs	r2, #0
 80085c8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80085cc:	4b24      	ldr	r3, [pc, #144]	; (8008660 <__kernel_sin+0x168>)
 80085ce:	f7f8 f837 	bl	8000640 <__aeabi_dmul>
 80085d2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80085d6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80085da:	4640      	mov	r0, r8
 80085dc:	4649      	mov	r1, r9
 80085de:	f7f8 f82f 	bl	8000640 <__aeabi_dmul>
 80085e2:	4602      	mov	r2, r0
 80085e4:	460b      	mov	r3, r1
 80085e6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80085ea:	f7f7 fe71 	bl	80002d0 <__aeabi_dsub>
 80085ee:	4632      	mov	r2, r6
 80085f0:	463b      	mov	r3, r7
 80085f2:	f7f8 f825 	bl	8000640 <__aeabi_dmul>
 80085f6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80085fa:	f7f7 fe69 	bl	80002d0 <__aeabi_dsub>
 80085fe:	a316      	add	r3, pc, #88	; (adr r3, 8008658 <__kernel_sin+0x160>)
 8008600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008604:	4606      	mov	r6, r0
 8008606:	460f      	mov	r7, r1
 8008608:	4640      	mov	r0, r8
 800860a:	4649      	mov	r1, r9
 800860c:	f7f8 f818 	bl	8000640 <__aeabi_dmul>
 8008610:	4602      	mov	r2, r0
 8008612:	460b      	mov	r3, r1
 8008614:	4630      	mov	r0, r6
 8008616:	4639      	mov	r1, r7
 8008618:	f7f7 fe5c 	bl	80002d4 <__adddf3>
 800861c:	4602      	mov	r2, r0
 800861e:	460b      	mov	r3, r1
 8008620:	4650      	mov	r0, sl
 8008622:	4621      	mov	r1, r4
 8008624:	f7f7 fe54 	bl	80002d0 <__aeabi_dsub>
 8008628:	e7c6      	b.n	80085b8 <__kernel_sin+0xc0>
 800862a:	bf00      	nop
 800862c:	f3af 8000 	nop.w
 8008630:	5acfd57c 	.word	0x5acfd57c
 8008634:	3de5d93a 	.word	0x3de5d93a
 8008638:	8a2b9ceb 	.word	0x8a2b9ceb
 800863c:	3e5ae5e6 	.word	0x3e5ae5e6
 8008640:	57b1fe7d 	.word	0x57b1fe7d
 8008644:	3ec71de3 	.word	0x3ec71de3
 8008648:	19c161d5 	.word	0x19c161d5
 800864c:	3f2a01a0 	.word	0x3f2a01a0
 8008650:	1110f8a6 	.word	0x1110f8a6
 8008654:	3f811111 	.word	0x3f811111
 8008658:	55555549 	.word	0x55555549
 800865c:	3fc55555 	.word	0x3fc55555
 8008660:	3fe00000 	.word	0x3fe00000
 8008664:	00000000 	.word	0x00000000

08008668 <__ieee754_rem_pio2>:
 8008668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800866c:	4614      	mov	r4, r2
 800866e:	4ac2      	ldr	r2, [pc, #776]	; (8008978 <__ieee754_rem_pio2+0x310>)
 8008670:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 8008674:	b08d      	sub	sp, #52	; 0x34
 8008676:	4592      	cmp	sl, r2
 8008678:	9104      	str	r1, [sp, #16]
 800867a:	dc07      	bgt.n	800868c <__ieee754_rem_pio2+0x24>
 800867c:	2200      	movs	r2, #0
 800867e:	2300      	movs	r3, #0
 8008680:	e9c4 0100 	strd	r0, r1, [r4]
 8008684:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8008688:	2500      	movs	r5, #0
 800868a:	e024      	b.n	80086d6 <__ieee754_rem_pio2+0x6e>
 800868c:	4abb      	ldr	r2, [pc, #748]	; (800897c <__ieee754_rem_pio2+0x314>)
 800868e:	4592      	cmp	sl, r2
 8008690:	dc72      	bgt.n	8008778 <__ieee754_rem_pio2+0x110>
 8008692:	9b04      	ldr	r3, [sp, #16]
 8008694:	4dba      	ldr	r5, [pc, #744]	; (8008980 <__ieee754_rem_pio2+0x318>)
 8008696:	2b00      	cmp	r3, #0
 8008698:	a3a9      	add	r3, pc, #676	; (adr r3, 8008940 <__ieee754_rem_pio2+0x2d8>)
 800869a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800869e:	dd36      	ble.n	800870e <__ieee754_rem_pio2+0xa6>
 80086a0:	f7f7 fe16 	bl	80002d0 <__aeabi_dsub>
 80086a4:	45aa      	cmp	sl, r5
 80086a6:	4606      	mov	r6, r0
 80086a8:	460f      	mov	r7, r1
 80086aa:	d018      	beq.n	80086de <__ieee754_rem_pio2+0x76>
 80086ac:	a3a6      	add	r3, pc, #664	; (adr r3, 8008948 <__ieee754_rem_pio2+0x2e0>)
 80086ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086b2:	f7f7 fe0d 	bl	80002d0 <__aeabi_dsub>
 80086b6:	4602      	mov	r2, r0
 80086b8:	460b      	mov	r3, r1
 80086ba:	4630      	mov	r0, r6
 80086bc:	e9c4 2300 	strd	r2, r3, [r4]
 80086c0:	4639      	mov	r1, r7
 80086c2:	f7f7 fe05 	bl	80002d0 <__aeabi_dsub>
 80086c6:	a3a0      	add	r3, pc, #640	; (adr r3, 8008948 <__ieee754_rem_pio2+0x2e0>)
 80086c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086cc:	f7f7 fe00 	bl	80002d0 <__aeabi_dsub>
 80086d0:	2501      	movs	r5, #1
 80086d2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80086d6:	4628      	mov	r0, r5
 80086d8:	b00d      	add	sp, #52	; 0x34
 80086da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086de:	a39c      	add	r3, pc, #624	; (adr r3, 8008950 <__ieee754_rem_pio2+0x2e8>)
 80086e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086e4:	f7f7 fdf4 	bl	80002d0 <__aeabi_dsub>
 80086e8:	a39b      	add	r3, pc, #620	; (adr r3, 8008958 <__ieee754_rem_pio2+0x2f0>)
 80086ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086ee:	4606      	mov	r6, r0
 80086f0:	460f      	mov	r7, r1
 80086f2:	f7f7 fded 	bl	80002d0 <__aeabi_dsub>
 80086f6:	4602      	mov	r2, r0
 80086f8:	460b      	mov	r3, r1
 80086fa:	4630      	mov	r0, r6
 80086fc:	e9c4 2300 	strd	r2, r3, [r4]
 8008700:	4639      	mov	r1, r7
 8008702:	f7f7 fde5 	bl	80002d0 <__aeabi_dsub>
 8008706:	a394      	add	r3, pc, #592	; (adr r3, 8008958 <__ieee754_rem_pio2+0x2f0>)
 8008708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800870c:	e7de      	b.n	80086cc <__ieee754_rem_pio2+0x64>
 800870e:	f7f7 fde1 	bl	80002d4 <__adddf3>
 8008712:	45aa      	cmp	sl, r5
 8008714:	4606      	mov	r6, r0
 8008716:	460f      	mov	r7, r1
 8008718:	d016      	beq.n	8008748 <__ieee754_rem_pio2+0xe0>
 800871a:	a38b      	add	r3, pc, #556	; (adr r3, 8008948 <__ieee754_rem_pio2+0x2e0>)
 800871c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008720:	f7f7 fdd8 	bl	80002d4 <__adddf3>
 8008724:	4602      	mov	r2, r0
 8008726:	460b      	mov	r3, r1
 8008728:	4630      	mov	r0, r6
 800872a:	e9c4 2300 	strd	r2, r3, [r4]
 800872e:	4639      	mov	r1, r7
 8008730:	f7f7 fdce 	bl	80002d0 <__aeabi_dsub>
 8008734:	a384      	add	r3, pc, #528	; (adr r3, 8008948 <__ieee754_rem_pio2+0x2e0>)
 8008736:	e9d3 2300 	ldrd	r2, r3, [r3]
 800873a:	f7f7 fdcb 	bl	80002d4 <__adddf3>
 800873e:	f04f 35ff 	mov.w	r5, #4294967295
 8008742:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8008746:	e7c6      	b.n	80086d6 <__ieee754_rem_pio2+0x6e>
 8008748:	a381      	add	r3, pc, #516	; (adr r3, 8008950 <__ieee754_rem_pio2+0x2e8>)
 800874a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800874e:	f7f7 fdc1 	bl	80002d4 <__adddf3>
 8008752:	a381      	add	r3, pc, #516	; (adr r3, 8008958 <__ieee754_rem_pio2+0x2f0>)
 8008754:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008758:	4606      	mov	r6, r0
 800875a:	460f      	mov	r7, r1
 800875c:	f7f7 fdba 	bl	80002d4 <__adddf3>
 8008760:	4602      	mov	r2, r0
 8008762:	460b      	mov	r3, r1
 8008764:	4630      	mov	r0, r6
 8008766:	e9c4 2300 	strd	r2, r3, [r4]
 800876a:	4639      	mov	r1, r7
 800876c:	f7f7 fdb0 	bl	80002d0 <__aeabi_dsub>
 8008770:	a379      	add	r3, pc, #484	; (adr r3, 8008958 <__ieee754_rem_pio2+0x2f0>)
 8008772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008776:	e7e0      	b.n	800873a <__ieee754_rem_pio2+0xd2>
 8008778:	4a82      	ldr	r2, [pc, #520]	; (8008984 <__ieee754_rem_pio2+0x31c>)
 800877a:	4592      	cmp	sl, r2
 800877c:	f300 80d4 	bgt.w	8008928 <__ieee754_rem_pio2+0x2c0>
 8008780:	f000 f966 	bl	8008a50 <fabs>
 8008784:	a376      	add	r3, pc, #472	; (adr r3, 8008960 <__ieee754_rem_pio2+0x2f8>)
 8008786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800878a:	4606      	mov	r6, r0
 800878c:	460f      	mov	r7, r1
 800878e:	f7f7 ff57 	bl	8000640 <__aeabi_dmul>
 8008792:	2200      	movs	r2, #0
 8008794:	4b7c      	ldr	r3, [pc, #496]	; (8008988 <__ieee754_rem_pio2+0x320>)
 8008796:	f7f7 fd9d 	bl	80002d4 <__adddf3>
 800879a:	f7f8 fa01 	bl	8000ba0 <__aeabi_d2iz>
 800879e:	4605      	mov	r5, r0
 80087a0:	f7f7 fee4 	bl	800056c <__aeabi_i2d>
 80087a4:	4602      	mov	r2, r0
 80087a6:	460b      	mov	r3, r1
 80087a8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80087ac:	a364      	add	r3, pc, #400	; (adr r3, 8008940 <__ieee754_rem_pio2+0x2d8>)
 80087ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087b2:	f7f7 ff45 	bl	8000640 <__aeabi_dmul>
 80087b6:	4602      	mov	r2, r0
 80087b8:	460b      	mov	r3, r1
 80087ba:	4630      	mov	r0, r6
 80087bc:	4639      	mov	r1, r7
 80087be:	f7f7 fd87 	bl	80002d0 <__aeabi_dsub>
 80087c2:	a361      	add	r3, pc, #388	; (adr r3, 8008948 <__ieee754_rem_pio2+0x2e0>)
 80087c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087c8:	4680      	mov	r8, r0
 80087ca:	4689      	mov	r9, r1
 80087cc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80087d0:	f7f7 ff36 	bl	8000640 <__aeabi_dmul>
 80087d4:	2d1f      	cmp	r5, #31
 80087d6:	4606      	mov	r6, r0
 80087d8:	460f      	mov	r7, r1
 80087da:	dc0e      	bgt.n	80087fa <__ieee754_rem_pio2+0x192>
 80087dc:	4b6b      	ldr	r3, [pc, #428]	; (800898c <__ieee754_rem_pio2+0x324>)
 80087de:	1e6a      	subs	r2, r5, #1
 80087e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087e4:	4553      	cmp	r3, sl
 80087e6:	d008      	beq.n	80087fa <__ieee754_rem_pio2+0x192>
 80087e8:	4632      	mov	r2, r6
 80087ea:	463b      	mov	r3, r7
 80087ec:	4640      	mov	r0, r8
 80087ee:	4649      	mov	r1, r9
 80087f0:	f7f7 fd6e 	bl	80002d0 <__aeabi_dsub>
 80087f4:	e9c4 0100 	strd	r0, r1, [r4]
 80087f8:	e012      	b.n	8008820 <__ieee754_rem_pio2+0x1b8>
 80087fa:	463b      	mov	r3, r7
 80087fc:	4632      	mov	r2, r6
 80087fe:	4640      	mov	r0, r8
 8008800:	4649      	mov	r1, r9
 8008802:	f7f7 fd65 	bl	80002d0 <__aeabi_dsub>
 8008806:	ea4f 532a 	mov.w	r3, sl, asr #20
 800880a:	9305      	str	r3, [sp, #20]
 800880c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8008810:	ebc3 531a 	rsb	r3, r3, sl, lsr #20
 8008814:	2b10      	cmp	r3, #16
 8008816:	dc1f      	bgt.n	8008858 <__ieee754_rem_pio2+0x1f0>
 8008818:	4602      	mov	r2, r0
 800881a:	460b      	mov	r3, r1
 800881c:	e9c4 2300 	strd	r2, r3, [r4]
 8008820:	e9d4 2a00 	ldrd	r2, sl, [r4]
 8008824:	4640      	mov	r0, r8
 8008826:	4653      	mov	r3, sl
 8008828:	4649      	mov	r1, r9
 800882a:	f7f7 fd51 	bl	80002d0 <__aeabi_dsub>
 800882e:	4632      	mov	r2, r6
 8008830:	463b      	mov	r3, r7
 8008832:	f7f7 fd4d 	bl	80002d0 <__aeabi_dsub>
 8008836:	460b      	mov	r3, r1
 8008838:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800883c:	9904      	ldr	r1, [sp, #16]
 800883e:	4602      	mov	r2, r0
 8008840:	2900      	cmp	r1, #0
 8008842:	f6bf af48 	bge.w	80086d6 <__ieee754_rem_pio2+0x6e>
 8008846:	f10a 4100 	add.w	r1, sl, #2147483648	; 0x80000000
 800884a:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800884e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8008852:	60e3      	str	r3, [r4, #12]
 8008854:	426d      	negs	r5, r5
 8008856:	e73e      	b.n	80086d6 <__ieee754_rem_pio2+0x6e>
 8008858:	a33d      	add	r3, pc, #244	; (adr r3, 8008950 <__ieee754_rem_pio2+0x2e8>)
 800885a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800885e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008862:	f7f7 feed 	bl	8000640 <__aeabi_dmul>
 8008866:	4606      	mov	r6, r0
 8008868:	460f      	mov	r7, r1
 800886a:	4602      	mov	r2, r0
 800886c:	460b      	mov	r3, r1
 800886e:	4640      	mov	r0, r8
 8008870:	4649      	mov	r1, r9
 8008872:	f7f7 fd2d 	bl	80002d0 <__aeabi_dsub>
 8008876:	4602      	mov	r2, r0
 8008878:	460b      	mov	r3, r1
 800887a:	4682      	mov	sl, r0
 800887c:	468b      	mov	fp, r1
 800887e:	4640      	mov	r0, r8
 8008880:	4649      	mov	r1, r9
 8008882:	f7f7 fd25 	bl	80002d0 <__aeabi_dsub>
 8008886:	4632      	mov	r2, r6
 8008888:	463b      	mov	r3, r7
 800888a:	f7f7 fd21 	bl	80002d0 <__aeabi_dsub>
 800888e:	a332      	add	r3, pc, #200	; (adr r3, 8008958 <__ieee754_rem_pio2+0x2f0>)
 8008890:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008894:	4606      	mov	r6, r0
 8008896:	460f      	mov	r7, r1
 8008898:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800889c:	f7f7 fed0 	bl	8000640 <__aeabi_dmul>
 80088a0:	4632      	mov	r2, r6
 80088a2:	463b      	mov	r3, r7
 80088a4:	f7f7 fd14 	bl	80002d0 <__aeabi_dsub>
 80088a8:	4602      	mov	r2, r0
 80088aa:	460b      	mov	r3, r1
 80088ac:	4606      	mov	r6, r0
 80088ae:	460f      	mov	r7, r1
 80088b0:	4650      	mov	r0, sl
 80088b2:	4659      	mov	r1, fp
 80088b4:	f7f7 fd0c 	bl	80002d0 <__aeabi_dsub>
 80088b8:	9a05      	ldr	r2, [sp, #20]
 80088ba:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80088be:	1ad3      	subs	r3, r2, r3
 80088c0:	2b31      	cmp	r3, #49	; 0x31
 80088c2:	dc06      	bgt.n	80088d2 <__ieee754_rem_pio2+0x26a>
 80088c4:	4602      	mov	r2, r0
 80088c6:	460b      	mov	r3, r1
 80088c8:	46d0      	mov	r8, sl
 80088ca:	46d9      	mov	r9, fp
 80088cc:	e9c4 2300 	strd	r2, r3, [r4]
 80088d0:	e7a6      	b.n	8008820 <__ieee754_rem_pio2+0x1b8>
 80088d2:	a325      	add	r3, pc, #148	; (adr r3, 8008968 <__ieee754_rem_pio2+0x300>)
 80088d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80088dc:	f7f7 feb0 	bl	8000640 <__aeabi_dmul>
 80088e0:	4606      	mov	r6, r0
 80088e2:	460f      	mov	r7, r1
 80088e4:	4602      	mov	r2, r0
 80088e6:	460b      	mov	r3, r1
 80088e8:	4650      	mov	r0, sl
 80088ea:	4659      	mov	r1, fp
 80088ec:	f7f7 fcf0 	bl	80002d0 <__aeabi_dsub>
 80088f0:	4602      	mov	r2, r0
 80088f2:	460b      	mov	r3, r1
 80088f4:	4680      	mov	r8, r0
 80088f6:	4689      	mov	r9, r1
 80088f8:	4650      	mov	r0, sl
 80088fa:	4659      	mov	r1, fp
 80088fc:	f7f7 fce8 	bl	80002d0 <__aeabi_dsub>
 8008900:	4632      	mov	r2, r6
 8008902:	463b      	mov	r3, r7
 8008904:	f7f7 fce4 	bl	80002d0 <__aeabi_dsub>
 8008908:	a319      	add	r3, pc, #100	; (adr r3, 8008970 <__ieee754_rem_pio2+0x308>)
 800890a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800890e:	4606      	mov	r6, r0
 8008910:	460f      	mov	r7, r1
 8008912:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008916:	f7f7 fe93 	bl	8000640 <__aeabi_dmul>
 800891a:	4632      	mov	r2, r6
 800891c:	463b      	mov	r3, r7
 800891e:	f7f7 fcd7 	bl	80002d0 <__aeabi_dsub>
 8008922:	4606      	mov	r6, r0
 8008924:	460f      	mov	r7, r1
 8008926:	e75f      	b.n	80087e8 <__ieee754_rem_pio2+0x180>
 8008928:	4a19      	ldr	r2, [pc, #100]	; (8008990 <__ieee754_rem_pio2+0x328>)
 800892a:	4592      	cmp	sl, r2
 800892c:	dd32      	ble.n	8008994 <__ieee754_rem_pio2+0x32c>
 800892e:	4602      	mov	r2, r0
 8008930:	460b      	mov	r3, r1
 8008932:	f7f7 fccd 	bl	80002d0 <__aeabi_dsub>
 8008936:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800893a:	e9c4 0100 	strd	r0, r1, [r4]
 800893e:	e6a3      	b.n	8008688 <__ieee754_rem_pio2+0x20>
 8008940:	54400000 	.word	0x54400000
 8008944:	3ff921fb 	.word	0x3ff921fb
 8008948:	1a626331 	.word	0x1a626331
 800894c:	3dd0b461 	.word	0x3dd0b461
 8008950:	1a600000 	.word	0x1a600000
 8008954:	3dd0b461 	.word	0x3dd0b461
 8008958:	2e037073 	.word	0x2e037073
 800895c:	3ba3198a 	.word	0x3ba3198a
 8008960:	6dc9c883 	.word	0x6dc9c883
 8008964:	3fe45f30 	.word	0x3fe45f30
 8008968:	2e000000 	.word	0x2e000000
 800896c:	3ba3198a 	.word	0x3ba3198a
 8008970:	252049c1 	.word	0x252049c1
 8008974:	397b839a 	.word	0x397b839a
 8008978:	3fe921fb 	.word	0x3fe921fb
 800897c:	4002d97b 	.word	0x4002d97b
 8008980:	3ff921fb 	.word	0x3ff921fb
 8008984:	413921fb 	.word	0x413921fb
 8008988:	3fe00000 	.word	0x3fe00000
 800898c:	08009748 	.word	0x08009748
 8008990:	7fefffff 	.word	0x7fefffff
 8008994:	ea4f 552a 	mov.w	r5, sl, asr #20
 8008998:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 800899c:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 80089a0:	460f      	mov	r7, r1
 80089a2:	4606      	mov	r6, r0
 80089a4:	f7f8 f8fc 	bl	8000ba0 <__aeabi_d2iz>
 80089a8:	f7f7 fde0 	bl	800056c <__aeabi_i2d>
 80089ac:	4602      	mov	r2, r0
 80089ae:	460b      	mov	r3, r1
 80089b0:	4630      	mov	r0, r6
 80089b2:	4639      	mov	r1, r7
 80089b4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80089b8:	f7f7 fc8a 	bl	80002d0 <__aeabi_dsub>
 80089bc:	2200      	movs	r2, #0
 80089be:	4b22      	ldr	r3, [pc, #136]	; (8008a48 <__ieee754_rem_pio2+0x3e0>)
 80089c0:	f7f7 fe3e 	bl	8000640 <__aeabi_dmul>
 80089c4:	460f      	mov	r7, r1
 80089c6:	4606      	mov	r6, r0
 80089c8:	f7f8 f8ea 	bl	8000ba0 <__aeabi_d2iz>
 80089cc:	f7f7 fdce 	bl	800056c <__aeabi_i2d>
 80089d0:	4602      	mov	r2, r0
 80089d2:	460b      	mov	r3, r1
 80089d4:	4630      	mov	r0, r6
 80089d6:	4639      	mov	r1, r7
 80089d8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80089dc:	f7f7 fc78 	bl	80002d0 <__aeabi_dsub>
 80089e0:	2200      	movs	r2, #0
 80089e2:	4b19      	ldr	r3, [pc, #100]	; (8008a48 <__ieee754_rem_pio2+0x3e0>)
 80089e4:	f7f7 fe2c 	bl	8000640 <__aeabi_dmul>
 80089e8:	f04f 0803 	mov.w	r8, #3
 80089ec:	2600      	movs	r6, #0
 80089ee:	2700      	movs	r7, #0
 80089f0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80089f4:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 80089f8:	4632      	mov	r2, r6
 80089fa:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 80089fe:	463b      	mov	r3, r7
 8008a00:	46c2      	mov	sl, r8
 8008a02:	f108 38ff 	add.w	r8, r8, #4294967295
 8008a06:	f7f8 f883 	bl	8000b10 <__aeabi_dcmpeq>
 8008a0a:	2800      	cmp	r0, #0
 8008a0c:	d1f4      	bne.n	80089f8 <__ieee754_rem_pio2+0x390>
 8008a0e:	4b0f      	ldr	r3, [pc, #60]	; (8008a4c <__ieee754_rem_pio2+0x3e4>)
 8008a10:	462a      	mov	r2, r5
 8008a12:	9301      	str	r3, [sp, #4]
 8008a14:	2302      	movs	r3, #2
 8008a16:	4621      	mov	r1, r4
 8008a18:	9300      	str	r3, [sp, #0]
 8008a1a:	a806      	add	r0, sp, #24
 8008a1c:	4653      	mov	r3, sl
 8008a1e:	f000 f81b 	bl	8008a58 <__kernel_rem_pio2>
 8008a22:	9b04      	ldr	r3, [sp, #16]
 8008a24:	4605      	mov	r5, r0
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	f6bf ae55 	bge.w	80086d6 <__ieee754_rem_pio2+0x6e>
 8008a2c:	e9d4 2100 	ldrd	r2, r1, [r4]
 8008a30:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008a34:	e9c4 2300 	strd	r2, r3, [r4]
 8008a38:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8008a3c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008a40:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8008a44:	e706      	b.n	8008854 <__ieee754_rem_pio2+0x1ec>
 8008a46:	bf00      	nop
 8008a48:	41700000 	.word	0x41700000
 8008a4c:	080097c8 	.word	0x080097c8

08008a50 <fabs>:
 8008a50:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008a54:	4619      	mov	r1, r3
 8008a56:	4770      	bx	lr

08008a58 <__kernel_rem_pio2>:
 8008a58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a5c:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8008a60:	9308      	str	r3, [sp, #32]
 8008a62:	9106      	str	r1, [sp, #24]
 8008a64:	4bb6      	ldr	r3, [pc, #728]	; (8008d40 <__kernel_rem_pio2+0x2e8>)
 8008a66:	99a2      	ldr	r1, [sp, #648]	; 0x288
 8008a68:	f112 0f14 	cmn.w	r2, #20
 8008a6c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008a70:	bfa8      	it	ge
 8008a72:	1ed4      	subge	r4, r2, #3
 8008a74:	9302      	str	r3, [sp, #8]
 8008a76:	9b08      	ldr	r3, [sp, #32]
 8008a78:	bfb8      	it	lt
 8008a7a:	2400      	movlt	r4, #0
 8008a7c:	f103 33ff 	add.w	r3, r3, #4294967295
 8008a80:	9307      	str	r3, [sp, #28]
 8008a82:	bfa4      	itt	ge
 8008a84:	2318      	movge	r3, #24
 8008a86:	fb94 f4f3 	sdivge	r4, r4, r3
 8008a8a:	f06f 0317 	mvn.w	r3, #23
 8008a8e:	fb04 3303 	mla	r3, r4, r3, r3
 8008a92:	eb03 0b02 	add.w	fp, r3, r2
 8008a96:	9a07      	ldr	r2, [sp, #28]
 8008a98:	9b02      	ldr	r3, [sp, #8]
 8008a9a:	1aa7      	subs	r7, r4, r2
 8008a9c:	eb03 0802 	add.w	r8, r3, r2
 8008aa0:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8008aa2:	2500      	movs	r5, #0
 8008aa4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8008aa8:	2200      	movs	r2, #0
 8008aaa:	2300      	movs	r3, #0
 8008aac:	9009      	str	r0, [sp, #36]	; 0x24
 8008aae:	ae20      	add	r6, sp, #128	; 0x80
 8008ab0:	4545      	cmp	r5, r8
 8008ab2:	dd14      	ble.n	8008ade <__kernel_rem_pio2+0x86>
 8008ab4:	f04f 0800 	mov.w	r8, #0
 8008ab8:	9a08      	ldr	r2, [sp, #32]
 8008aba:	ab20      	add	r3, sp, #128	; 0x80
 8008abc:	eb03 05c2 	add.w	r5, r3, r2, lsl #3
 8008ac0:	f50d 7ae0 	add.w	sl, sp, #448	; 0x1c0
 8008ac4:	9b02      	ldr	r3, [sp, #8]
 8008ac6:	4598      	cmp	r8, r3
 8008ac8:	dc35      	bgt.n	8008b36 <__kernel_rem_pio2+0xde>
 8008aca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008acc:	2200      	movs	r2, #0
 8008ace:	f1a3 0908 	sub.w	r9, r3, #8
 8008ad2:	2300      	movs	r3, #0
 8008ad4:	462f      	mov	r7, r5
 8008ad6:	2600      	movs	r6, #0
 8008ad8:	e9cd 2300 	strd	r2, r3, [sp]
 8008adc:	e01f      	b.n	8008b1e <__kernel_rem_pio2+0xc6>
 8008ade:	42ef      	cmn	r7, r5
 8008ae0:	d40b      	bmi.n	8008afa <__kernel_rem_pio2+0xa2>
 8008ae2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8008ae6:	e9cd 2300 	strd	r2, r3, [sp]
 8008aea:	f7f7 fd3f 	bl	800056c <__aeabi_i2d>
 8008aee:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008af2:	e8e6 0102 	strd	r0, r1, [r6], #8
 8008af6:	3501      	adds	r5, #1
 8008af8:	e7da      	b.n	8008ab0 <__kernel_rem_pio2+0x58>
 8008afa:	4610      	mov	r0, r2
 8008afc:	4619      	mov	r1, r3
 8008afe:	e7f8      	b.n	8008af2 <__kernel_rem_pio2+0x9a>
 8008b00:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008b04:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 8008b08:	f7f7 fd9a 	bl	8000640 <__aeabi_dmul>
 8008b0c:	4602      	mov	r2, r0
 8008b0e:	460b      	mov	r3, r1
 8008b10:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008b14:	f7f7 fbde 	bl	80002d4 <__adddf3>
 8008b18:	e9cd 0100 	strd	r0, r1, [sp]
 8008b1c:	3601      	adds	r6, #1
 8008b1e:	9b07      	ldr	r3, [sp, #28]
 8008b20:	3f08      	subs	r7, #8
 8008b22:	429e      	cmp	r6, r3
 8008b24:	ddec      	ble.n	8008b00 <__kernel_rem_pio2+0xa8>
 8008b26:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008b2a:	f108 0801 	add.w	r8, r8, #1
 8008b2e:	e8ea 2302 	strd	r2, r3, [sl], #8
 8008b32:	3508      	adds	r5, #8
 8008b34:	e7c6      	b.n	8008ac4 <__kernel_rem_pio2+0x6c>
 8008b36:	9b02      	ldr	r3, [sp, #8]
 8008b38:	aa0c      	add	r2, sp, #48	; 0x30
 8008b3a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008b3e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008b40:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8008b42:	9e02      	ldr	r6, [sp, #8]
 8008b44:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8008b48:	930a      	str	r3, [sp, #40]	; 0x28
 8008b4a:	ab98      	add	r3, sp, #608	; 0x260
 8008b4c:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008b50:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
 8008b54:	ab70      	add	r3, sp, #448	; 0x1c0
 8008b56:	eb03 0ac6 	add.w	sl, r3, r6, lsl #3
 8008b5a:	46d0      	mov	r8, sl
 8008b5c:	46b1      	mov	r9, r6
 8008b5e:	af0c      	add	r7, sp, #48	; 0x30
 8008b60:	9700      	str	r7, [sp, #0]
 8008b62:	f1b9 0f00 	cmp.w	r9, #0
 8008b66:	f1a8 0808 	sub.w	r8, r8, #8
 8008b6a:	dc70      	bgt.n	8008c4e <__kernel_rem_pio2+0x1f6>
 8008b6c:	465a      	mov	r2, fp
 8008b6e:	4620      	mov	r0, r4
 8008b70:	4629      	mov	r1, r5
 8008b72:	f000 fab1 	bl	80090d8 <scalbn>
 8008b76:	2200      	movs	r2, #0
 8008b78:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8008b7c:	4604      	mov	r4, r0
 8008b7e:	460d      	mov	r5, r1
 8008b80:	f7f7 fd5e 	bl	8000640 <__aeabi_dmul>
 8008b84:	f000 fb24 	bl	80091d0 <floor>
 8008b88:	2200      	movs	r2, #0
 8008b8a:	4b6e      	ldr	r3, [pc, #440]	; (8008d44 <__kernel_rem_pio2+0x2ec>)
 8008b8c:	f7f7 fd58 	bl	8000640 <__aeabi_dmul>
 8008b90:	4602      	mov	r2, r0
 8008b92:	460b      	mov	r3, r1
 8008b94:	4620      	mov	r0, r4
 8008b96:	4629      	mov	r1, r5
 8008b98:	f7f7 fb9a 	bl	80002d0 <__aeabi_dsub>
 8008b9c:	460d      	mov	r5, r1
 8008b9e:	4604      	mov	r4, r0
 8008ba0:	f7f7 fffe 	bl	8000ba0 <__aeabi_d2iz>
 8008ba4:	9004      	str	r0, [sp, #16]
 8008ba6:	f7f7 fce1 	bl	800056c <__aeabi_i2d>
 8008baa:	4602      	mov	r2, r0
 8008bac:	460b      	mov	r3, r1
 8008bae:	4620      	mov	r0, r4
 8008bb0:	4629      	mov	r1, r5
 8008bb2:	f7f7 fb8d 	bl	80002d0 <__aeabi_dsub>
 8008bb6:	f1bb 0f00 	cmp.w	fp, #0
 8008bba:	4680      	mov	r8, r0
 8008bbc:	4689      	mov	r9, r1
 8008bbe:	dd6f      	ble.n	8008ca0 <__kernel_rem_pio2+0x248>
 8008bc0:	1e71      	subs	r1, r6, #1
 8008bc2:	ab0c      	add	r3, sp, #48	; 0x30
 8008bc4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008bc8:	9c04      	ldr	r4, [sp, #16]
 8008bca:	f1cb 0018 	rsb	r0, fp, #24
 8008bce:	fa43 f200 	asr.w	r2, r3, r0
 8008bd2:	4414      	add	r4, r2
 8008bd4:	4082      	lsls	r2, r0
 8008bd6:	1a9b      	subs	r3, r3, r2
 8008bd8:	aa0c      	add	r2, sp, #48	; 0x30
 8008bda:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8008bde:	f1cb 0217 	rsb	r2, fp, #23
 8008be2:	9404      	str	r4, [sp, #16]
 8008be4:	4113      	asrs	r3, r2
 8008be6:	9300      	str	r3, [sp, #0]
 8008be8:	9b00      	ldr	r3, [sp, #0]
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	dd66      	ble.n	8008cbc <__kernel_rem_pio2+0x264>
 8008bee:	2200      	movs	r2, #0
 8008bf0:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8008bf4:	4614      	mov	r4, r2
 8008bf6:	9b04      	ldr	r3, [sp, #16]
 8008bf8:	3301      	adds	r3, #1
 8008bfa:	9304      	str	r3, [sp, #16]
 8008bfc:	4296      	cmp	r6, r2
 8008bfe:	f300 80ad 	bgt.w	8008d5c <__kernel_rem_pio2+0x304>
 8008c02:	f1bb 0f00 	cmp.w	fp, #0
 8008c06:	dd07      	ble.n	8008c18 <__kernel_rem_pio2+0x1c0>
 8008c08:	f1bb 0f01 	cmp.w	fp, #1
 8008c0c:	f000 80b5 	beq.w	8008d7a <__kernel_rem_pio2+0x322>
 8008c10:	f1bb 0f02 	cmp.w	fp, #2
 8008c14:	f000 80bb 	beq.w	8008d8e <__kernel_rem_pio2+0x336>
 8008c18:	9b00      	ldr	r3, [sp, #0]
 8008c1a:	2b02      	cmp	r3, #2
 8008c1c:	d14e      	bne.n	8008cbc <__kernel_rem_pio2+0x264>
 8008c1e:	4642      	mov	r2, r8
 8008c20:	464b      	mov	r3, r9
 8008c22:	2000      	movs	r0, #0
 8008c24:	4948      	ldr	r1, [pc, #288]	; (8008d48 <__kernel_rem_pio2+0x2f0>)
 8008c26:	f7f7 fb53 	bl	80002d0 <__aeabi_dsub>
 8008c2a:	4680      	mov	r8, r0
 8008c2c:	4689      	mov	r9, r1
 8008c2e:	2c00      	cmp	r4, #0
 8008c30:	d044      	beq.n	8008cbc <__kernel_rem_pio2+0x264>
 8008c32:	465a      	mov	r2, fp
 8008c34:	2000      	movs	r0, #0
 8008c36:	4944      	ldr	r1, [pc, #272]	; (8008d48 <__kernel_rem_pio2+0x2f0>)
 8008c38:	f000 fa4e 	bl	80090d8 <scalbn>
 8008c3c:	4602      	mov	r2, r0
 8008c3e:	460b      	mov	r3, r1
 8008c40:	4640      	mov	r0, r8
 8008c42:	4649      	mov	r1, r9
 8008c44:	f7f7 fb44 	bl	80002d0 <__aeabi_dsub>
 8008c48:	4680      	mov	r8, r0
 8008c4a:	4689      	mov	r9, r1
 8008c4c:	e036      	b.n	8008cbc <__kernel_rem_pio2+0x264>
 8008c4e:	2200      	movs	r2, #0
 8008c50:	4b3e      	ldr	r3, [pc, #248]	; (8008d4c <__kernel_rem_pio2+0x2f4>)
 8008c52:	4620      	mov	r0, r4
 8008c54:	4629      	mov	r1, r5
 8008c56:	f7f7 fcf3 	bl	8000640 <__aeabi_dmul>
 8008c5a:	f7f7 ffa1 	bl	8000ba0 <__aeabi_d2iz>
 8008c5e:	f7f7 fc85 	bl	800056c <__aeabi_i2d>
 8008c62:	4602      	mov	r2, r0
 8008c64:	460b      	mov	r3, r1
 8008c66:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008c6a:	2200      	movs	r2, #0
 8008c6c:	4b38      	ldr	r3, [pc, #224]	; (8008d50 <__kernel_rem_pio2+0x2f8>)
 8008c6e:	f7f7 fce7 	bl	8000640 <__aeabi_dmul>
 8008c72:	4602      	mov	r2, r0
 8008c74:	460b      	mov	r3, r1
 8008c76:	4620      	mov	r0, r4
 8008c78:	4629      	mov	r1, r5
 8008c7a:	f7f7 fb29 	bl	80002d0 <__aeabi_dsub>
 8008c7e:	f7f7 ff8f 	bl	8000ba0 <__aeabi_d2iz>
 8008c82:	9b00      	ldr	r3, [sp, #0]
 8008c84:	f109 39ff 	add.w	r9, r9, #4294967295
 8008c88:	f843 0b04 	str.w	r0, [r3], #4
 8008c8c:	9300      	str	r3, [sp, #0]
 8008c8e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008c92:	e9d8 2300 	ldrd	r2, r3, [r8]
 8008c96:	f7f7 fb1d 	bl	80002d4 <__adddf3>
 8008c9a:	4604      	mov	r4, r0
 8008c9c:	460d      	mov	r5, r1
 8008c9e:	e760      	b.n	8008b62 <__kernel_rem_pio2+0x10a>
 8008ca0:	d105      	bne.n	8008cae <__kernel_rem_pio2+0x256>
 8008ca2:	1e73      	subs	r3, r6, #1
 8008ca4:	aa0c      	add	r2, sp, #48	; 0x30
 8008ca6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008caa:	15db      	asrs	r3, r3, #23
 8008cac:	e79b      	b.n	8008be6 <__kernel_rem_pio2+0x18e>
 8008cae:	2200      	movs	r2, #0
 8008cb0:	4b28      	ldr	r3, [pc, #160]	; (8008d54 <__kernel_rem_pio2+0x2fc>)
 8008cb2:	f7f7 ff4b 	bl	8000b4c <__aeabi_dcmpge>
 8008cb6:	2800      	cmp	r0, #0
 8008cb8:	d13e      	bne.n	8008d38 <__kernel_rem_pio2+0x2e0>
 8008cba:	9000      	str	r0, [sp, #0]
 8008cbc:	2200      	movs	r2, #0
 8008cbe:	2300      	movs	r3, #0
 8008cc0:	4640      	mov	r0, r8
 8008cc2:	4649      	mov	r1, r9
 8008cc4:	f7f7 ff24 	bl	8000b10 <__aeabi_dcmpeq>
 8008cc8:	2800      	cmp	r0, #0
 8008cca:	f000 80b2 	beq.w	8008e32 <__kernel_rem_pio2+0x3da>
 8008cce:	1e74      	subs	r4, r6, #1
 8008cd0:	4623      	mov	r3, r4
 8008cd2:	2200      	movs	r2, #0
 8008cd4:	9902      	ldr	r1, [sp, #8]
 8008cd6:	428b      	cmp	r3, r1
 8008cd8:	da60      	bge.n	8008d9c <__kernel_rem_pio2+0x344>
 8008cda:	2a00      	cmp	r2, #0
 8008cdc:	d075      	beq.n	8008dca <__kernel_rem_pio2+0x372>
 8008cde:	ab0c      	add	r3, sp, #48	; 0x30
 8008ce0:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8008ce4:	f1ab 0b18 	sub.w	fp, fp, #24
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	f000 80a0 	beq.w	8008e2e <__kernel_rem_pio2+0x3d6>
 8008cee:	465a      	mov	r2, fp
 8008cf0:	2000      	movs	r0, #0
 8008cf2:	4915      	ldr	r1, [pc, #84]	; (8008d48 <__kernel_rem_pio2+0x2f0>)
 8008cf4:	f000 f9f0 	bl	80090d8 <scalbn>
 8008cf8:	46a2      	mov	sl, r4
 8008cfa:	4606      	mov	r6, r0
 8008cfc:	460f      	mov	r7, r1
 8008cfe:	f04f 0800 	mov.w	r8, #0
 8008d02:	ab70      	add	r3, sp, #448	; 0x1c0
 8008d04:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8008d4c <__kernel_rem_pio2+0x2f4>
 8008d08:	00e5      	lsls	r5, r4, #3
 8008d0a:	eb03 0bc4 	add.w	fp, r3, r4, lsl #3
 8008d0e:	f1ba 0f00 	cmp.w	sl, #0
 8008d12:	f280 80c4 	bge.w	8008e9e <__kernel_rem_pio2+0x446>
 8008d16:	4626      	mov	r6, r4
 8008d18:	2e00      	cmp	r6, #0
 8008d1a:	f2c0 80f6 	blt.w	8008f0a <__kernel_rem_pio2+0x4b2>
 8008d1e:	4b0e      	ldr	r3, [pc, #56]	; (8008d58 <__kernel_rem_pio2+0x300>)
 8008d20:	f04f 0a00 	mov.w	sl, #0
 8008d24:	9307      	str	r3, [sp, #28]
 8008d26:	ab70      	add	r3, sp, #448	; 0x1c0
 8008d28:	f04f 0b00 	mov.w	fp, #0
 8008d2c:	f04f 0800 	mov.w	r8, #0
 8008d30:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8008d34:	1ba7      	subs	r7, r4, r6
 8008d36:	e0dc      	b.n	8008ef2 <__kernel_rem_pio2+0x49a>
 8008d38:	2302      	movs	r3, #2
 8008d3a:	9300      	str	r3, [sp, #0]
 8008d3c:	e757      	b.n	8008bee <__kernel_rem_pio2+0x196>
 8008d3e:	bf00      	nop
 8008d40:	08009910 	.word	0x08009910
 8008d44:	40200000 	.word	0x40200000
 8008d48:	3ff00000 	.word	0x3ff00000
 8008d4c:	3e700000 	.word	0x3e700000
 8008d50:	41700000 	.word	0x41700000
 8008d54:	3fe00000 	.word	0x3fe00000
 8008d58:	080098d0 	.word	0x080098d0
 8008d5c:	683b      	ldr	r3, [r7, #0]
 8008d5e:	b944      	cbnz	r4, 8008d72 <__kernel_rem_pio2+0x31a>
 8008d60:	b11b      	cbz	r3, 8008d6a <__kernel_rem_pio2+0x312>
 8008d62:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8008d66:	603b      	str	r3, [r7, #0]
 8008d68:	2301      	movs	r3, #1
 8008d6a:	461c      	mov	r4, r3
 8008d6c:	3201      	adds	r2, #1
 8008d6e:	3704      	adds	r7, #4
 8008d70:	e744      	b.n	8008bfc <__kernel_rem_pio2+0x1a4>
 8008d72:	1acb      	subs	r3, r1, r3
 8008d74:	603b      	str	r3, [r7, #0]
 8008d76:	4623      	mov	r3, r4
 8008d78:	e7f7      	b.n	8008d6a <__kernel_rem_pio2+0x312>
 8008d7a:	1e72      	subs	r2, r6, #1
 8008d7c:	ab0c      	add	r3, sp, #48	; 0x30
 8008d7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d82:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8008d86:	a90c      	add	r1, sp, #48	; 0x30
 8008d88:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8008d8c:	e744      	b.n	8008c18 <__kernel_rem_pio2+0x1c0>
 8008d8e:	1e72      	subs	r2, r6, #1
 8008d90:	ab0c      	add	r3, sp, #48	; 0x30
 8008d92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d96:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8008d9a:	e7f4      	b.n	8008d86 <__kernel_rem_pio2+0x32e>
 8008d9c:	a90c      	add	r1, sp, #48	; 0x30
 8008d9e:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8008da2:	3b01      	subs	r3, #1
 8008da4:	430a      	orrs	r2, r1
 8008da6:	e795      	b.n	8008cd4 <__kernel_rem_pio2+0x27c>
 8008da8:	3301      	adds	r3, #1
 8008daa:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8008dae:	2900      	cmp	r1, #0
 8008db0:	d0fa      	beq.n	8008da8 <__kernel_rem_pio2+0x350>
 8008db2:	9a08      	ldr	r2, [sp, #32]
 8008db4:	a920      	add	r1, sp, #128	; 0x80
 8008db6:	18b2      	adds	r2, r6, r2
 8008db8:	f106 0801 	add.w	r8, r6, #1
 8008dbc:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 8008dc0:	18f4      	adds	r4, r6, r3
 8008dc2:	4544      	cmp	r4, r8
 8008dc4:	da04      	bge.n	8008dd0 <__kernel_rem_pio2+0x378>
 8008dc6:	4626      	mov	r6, r4
 8008dc8:	e6bf      	b.n	8008b4a <__kernel_rem_pio2+0xf2>
 8008dca:	2301      	movs	r3, #1
 8008dcc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008dce:	e7ec      	b.n	8008daa <__kernel_rem_pio2+0x352>
 8008dd0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008dd2:	f04f 0900 	mov.w	r9, #0
 8008dd6:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8008dda:	f7f7 fbc7 	bl	800056c <__aeabi_i2d>
 8008dde:	2600      	movs	r6, #0
 8008de0:	2700      	movs	r7, #0
 8008de2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008de4:	e9c5 0100 	strd	r0, r1, [r5]
 8008de8:	3b08      	subs	r3, #8
 8008dea:	9300      	str	r3, [sp, #0]
 8008dec:	9504      	str	r5, [sp, #16]
 8008dee:	9b07      	ldr	r3, [sp, #28]
 8008df0:	4599      	cmp	r9, r3
 8008df2:	dd05      	ble.n	8008e00 <__kernel_rem_pio2+0x3a8>
 8008df4:	e9ea 6702 	strd	r6, r7, [sl, #8]!
 8008df8:	f108 0801 	add.w	r8, r8, #1
 8008dfc:	3508      	adds	r5, #8
 8008dfe:	e7e0      	b.n	8008dc2 <__kernel_rem_pio2+0x36a>
 8008e00:	f8dd c010 	ldr.w	ip, [sp, #16]
 8008e04:	9900      	ldr	r1, [sp, #0]
 8008e06:	f109 0901 	add.w	r9, r9, #1
 8008e0a:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 8008e0e:	9100      	str	r1, [sp, #0]
 8008e10:	e87c 0102 	ldrd	r0, r1, [ip], #-8
 8008e14:	f8cd c010 	str.w	ip, [sp, #16]
 8008e18:	f7f7 fc12 	bl	8000640 <__aeabi_dmul>
 8008e1c:	4602      	mov	r2, r0
 8008e1e:	460b      	mov	r3, r1
 8008e20:	4630      	mov	r0, r6
 8008e22:	4639      	mov	r1, r7
 8008e24:	f7f7 fa56 	bl	80002d4 <__adddf3>
 8008e28:	4606      	mov	r6, r0
 8008e2a:	460f      	mov	r7, r1
 8008e2c:	e7df      	b.n	8008dee <__kernel_rem_pio2+0x396>
 8008e2e:	3c01      	subs	r4, #1
 8008e30:	e755      	b.n	8008cde <__kernel_rem_pio2+0x286>
 8008e32:	f1cb 0200 	rsb	r2, fp, #0
 8008e36:	4640      	mov	r0, r8
 8008e38:	4649      	mov	r1, r9
 8008e3a:	f000 f94d 	bl	80090d8 <scalbn>
 8008e3e:	2200      	movs	r2, #0
 8008e40:	4ba3      	ldr	r3, [pc, #652]	; (80090d0 <__kernel_rem_pio2+0x678>)
 8008e42:	4604      	mov	r4, r0
 8008e44:	460d      	mov	r5, r1
 8008e46:	f7f7 fe81 	bl	8000b4c <__aeabi_dcmpge>
 8008e4a:	b1f8      	cbz	r0, 8008e8c <__kernel_rem_pio2+0x434>
 8008e4c:	2200      	movs	r2, #0
 8008e4e:	4ba1      	ldr	r3, [pc, #644]	; (80090d4 <__kernel_rem_pio2+0x67c>)
 8008e50:	4620      	mov	r0, r4
 8008e52:	4629      	mov	r1, r5
 8008e54:	f7f7 fbf4 	bl	8000640 <__aeabi_dmul>
 8008e58:	f7f7 fea2 	bl	8000ba0 <__aeabi_d2iz>
 8008e5c:	4607      	mov	r7, r0
 8008e5e:	f7f7 fb85 	bl	800056c <__aeabi_i2d>
 8008e62:	2200      	movs	r2, #0
 8008e64:	4b9a      	ldr	r3, [pc, #616]	; (80090d0 <__kernel_rem_pio2+0x678>)
 8008e66:	f7f7 fbeb 	bl	8000640 <__aeabi_dmul>
 8008e6a:	460b      	mov	r3, r1
 8008e6c:	4602      	mov	r2, r0
 8008e6e:	4629      	mov	r1, r5
 8008e70:	4620      	mov	r0, r4
 8008e72:	f7f7 fa2d 	bl	80002d0 <__aeabi_dsub>
 8008e76:	f7f7 fe93 	bl	8000ba0 <__aeabi_d2iz>
 8008e7a:	1c74      	adds	r4, r6, #1
 8008e7c:	ab0c      	add	r3, sp, #48	; 0x30
 8008e7e:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 8008e82:	f10b 0b18 	add.w	fp, fp, #24
 8008e86:	f843 7024 	str.w	r7, [r3, r4, lsl #2]
 8008e8a:	e730      	b.n	8008cee <__kernel_rem_pio2+0x296>
 8008e8c:	4620      	mov	r0, r4
 8008e8e:	4629      	mov	r1, r5
 8008e90:	f7f7 fe86 	bl	8000ba0 <__aeabi_d2iz>
 8008e94:	ab0c      	add	r3, sp, #48	; 0x30
 8008e96:	4634      	mov	r4, r6
 8008e98:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 8008e9c:	e727      	b.n	8008cee <__kernel_rem_pio2+0x296>
 8008e9e:	ab0c      	add	r3, sp, #48	; 0x30
 8008ea0:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8008ea4:	f7f7 fb62 	bl	800056c <__aeabi_i2d>
 8008ea8:	4632      	mov	r2, r6
 8008eaa:	463b      	mov	r3, r7
 8008eac:	f7f7 fbc8 	bl	8000640 <__aeabi_dmul>
 8008eb0:	4642      	mov	r2, r8
 8008eb2:	e86b 0102 	strd	r0, r1, [fp], #-8
 8008eb6:	464b      	mov	r3, r9
 8008eb8:	4630      	mov	r0, r6
 8008eba:	4639      	mov	r1, r7
 8008ebc:	f7f7 fbc0 	bl	8000640 <__aeabi_dmul>
 8008ec0:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008ec4:	4606      	mov	r6, r0
 8008ec6:	460f      	mov	r7, r1
 8008ec8:	e721      	b.n	8008d0e <__kernel_rem_pio2+0x2b6>
 8008eca:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8008ece:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8008ed2:	e8fc 0102 	ldrd	r0, r1, [ip], #8
 8008ed6:	f8cd c01c 	str.w	ip, [sp, #28]
 8008eda:	f7f7 fbb1 	bl	8000640 <__aeabi_dmul>
 8008ede:	4602      	mov	r2, r0
 8008ee0:	460b      	mov	r3, r1
 8008ee2:	4650      	mov	r0, sl
 8008ee4:	4659      	mov	r1, fp
 8008ee6:	f7f7 f9f5 	bl	80002d4 <__adddf3>
 8008eea:	4682      	mov	sl, r0
 8008eec:	468b      	mov	fp, r1
 8008eee:	f108 0801 	add.w	r8, r8, #1
 8008ef2:	9b02      	ldr	r3, [sp, #8]
 8008ef4:	4598      	cmp	r8, r3
 8008ef6:	dc01      	bgt.n	8008efc <__kernel_rem_pio2+0x4a4>
 8008ef8:	45b8      	cmp	r8, r7
 8008efa:	dde6      	ble.n	8008eca <__kernel_rem_pio2+0x472>
 8008efc:	ab48      	add	r3, sp, #288	; 0x120
 8008efe:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8008f02:	e9c7 ab00 	strd	sl, fp, [r7]
 8008f06:	3e01      	subs	r6, #1
 8008f08:	e706      	b.n	8008d18 <__kernel_rem_pio2+0x2c0>
 8008f0a:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 8008f0c:	2b02      	cmp	r3, #2
 8008f0e:	dc09      	bgt.n	8008f24 <__kernel_rem_pio2+0x4cc>
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	dc32      	bgt.n	8008f7a <__kernel_rem_pio2+0x522>
 8008f14:	d058      	beq.n	8008fc8 <__kernel_rem_pio2+0x570>
 8008f16:	9b04      	ldr	r3, [sp, #16]
 8008f18:	f003 0007 	and.w	r0, r3, #7
 8008f1c:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8008f20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f24:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 8008f26:	2b03      	cmp	r3, #3
 8008f28:	d1f5      	bne.n	8008f16 <__kernel_rem_pio2+0x4be>
 8008f2a:	ab48      	add	r3, sp, #288	; 0x120
 8008f2c:	441d      	add	r5, r3
 8008f2e:	46aa      	mov	sl, r5
 8008f30:	46a3      	mov	fp, r4
 8008f32:	f1bb 0f00 	cmp.w	fp, #0
 8008f36:	dc74      	bgt.n	8009022 <__kernel_rem_pio2+0x5ca>
 8008f38:	46aa      	mov	sl, r5
 8008f3a:	46a3      	mov	fp, r4
 8008f3c:	f1bb 0f01 	cmp.w	fp, #1
 8008f40:	f300 808e 	bgt.w	8009060 <__kernel_rem_pio2+0x608>
 8008f44:	2700      	movs	r7, #0
 8008f46:	463e      	mov	r6, r7
 8008f48:	2c01      	cmp	r4, #1
 8008f4a:	f300 80a8 	bgt.w	800909e <__kernel_rem_pio2+0x646>
 8008f4e:	e9dd 5048 	ldrd	r5, r0, [sp, #288]	; 0x120
 8008f52:	e9dd 414a 	ldrd	r4, r1, [sp, #296]	; 0x128
 8008f56:	9b00      	ldr	r3, [sp, #0]
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	f040 80aa 	bne.w	80090b2 <__kernel_rem_pio2+0x65a>
 8008f5e:	4603      	mov	r3, r0
 8008f60:	462a      	mov	r2, r5
 8008f62:	9806      	ldr	r0, [sp, #24]
 8008f64:	e9c0 2300 	strd	r2, r3, [r0]
 8008f68:	4622      	mov	r2, r4
 8008f6a:	460b      	mov	r3, r1
 8008f6c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8008f70:	463a      	mov	r2, r7
 8008f72:	4633      	mov	r3, r6
 8008f74:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8008f78:	e7cd      	b.n	8008f16 <__kernel_rem_pio2+0x4be>
 8008f7a:	2000      	movs	r0, #0
 8008f7c:	46a0      	mov	r8, r4
 8008f7e:	4601      	mov	r1, r0
 8008f80:	ab48      	add	r3, sp, #288	; 0x120
 8008f82:	441d      	add	r5, r3
 8008f84:	f1b8 0f00 	cmp.w	r8, #0
 8008f88:	da38      	bge.n	8008ffc <__kernel_rem_pio2+0x5a4>
 8008f8a:	9b00      	ldr	r3, [sp, #0]
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d03c      	beq.n	800900a <__kernel_rem_pio2+0x5b2>
 8008f90:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
 8008f94:	4602      	mov	r2, r0
 8008f96:	462b      	mov	r3, r5
 8008f98:	9d06      	ldr	r5, [sp, #24]
 8008f9a:	2601      	movs	r6, #1
 8008f9c:	e9c5 2300 	strd	r2, r3, [r5]
 8008fa0:	460b      	mov	r3, r1
 8008fa2:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8008fa6:	f7f7 f993 	bl	80002d0 <__aeabi_dsub>
 8008faa:	4684      	mov	ip, r0
 8008fac:	460f      	mov	r7, r1
 8008fae:	ad48      	add	r5, sp, #288	; 0x120
 8008fb0:	42b4      	cmp	r4, r6
 8008fb2:	da2c      	bge.n	800900e <__kernel_rem_pio2+0x5b6>
 8008fb4:	9b00      	ldr	r3, [sp, #0]
 8008fb6:	b10b      	cbz	r3, 8008fbc <__kernel_rem_pio2+0x564>
 8008fb8:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 8008fbc:	4662      	mov	r2, ip
 8008fbe:	463b      	mov	r3, r7
 8008fc0:	9906      	ldr	r1, [sp, #24]
 8008fc2:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8008fc6:	e7a6      	b.n	8008f16 <__kernel_rem_pio2+0x4be>
 8008fc8:	9ea2      	ldr	r6, [sp, #648]	; 0x288
 8008fca:	ab48      	add	r3, sp, #288	; 0x120
 8008fcc:	4637      	mov	r7, r6
 8008fce:	441d      	add	r5, r3
 8008fd0:	2c00      	cmp	r4, #0
 8008fd2:	da09      	bge.n	8008fe8 <__kernel_rem_pio2+0x590>
 8008fd4:	9b00      	ldr	r3, [sp, #0]
 8008fd6:	b10b      	cbz	r3, 8008fdc <__kernel_rem_pio2+0x584>
 8008fd8:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 8008fdc:	4632      	mov	r2, r6
 8008fde:	463b      	mov	r3, r7
 8008fe0:	9906      	ldr	r1, [sp, #24]
 8008fe2:	e9c1 2300 	strd	r2, r3, [r1]
 8008fe6:	e796      	b.n	8008f16 <__kernel_rem_pio2+0x4be>
 8008fe8:	4630      	mov	r0, r6
 8008fea:	e875 2302 	ldrd	r2, r3, [r5], #-8
 8008fee:	4639      	mov	r1, r7
 8008ff0:	f7f7 f970 	bl	80002d4 <__adddf3>
 8008ff4:	3c01      	subs	r4, #1
 8008ff6:	4606      	mov	r6, r0
 8008ff8:	460f      	mov	r7, r1
 8008ffa:	e7e9      	b.n	8008fd0 <__kernel_rem_pio2+0x578>
 8008ffc:	e875 2302 	ldrd	r2, r3, [r5], #-8
 8009000:	f7f7 f968 	bl	80002d4 <__adddf3>
 8009004:	f108 38ff 	add.w	r8, r8, #4294967295
 8009008:	e7bc      	b.n	8008f84 <__kernel_rem_pio2+0x52c>
 800900a:	460d      	mov	r5, r1
 800900c:	e7c2      	b.n	8008f94 <__kernel_rem_pio2+0x53c>
 800900e:	4660      	mov	r0, ip
 8009010:	e9f5 2302 	ldrd	r2, r3, [r5, #8]!
 8009014:	4639      	mov	r1, r7
 8009016:	f7f7 f95d 	bl	80002d4 <__adddf3>
 800901a:	3601      	adds	r6, #1
 800901c:	4684      	mov	ip, r0
 800901e:	460f      	mov	r7, r1
 8009020:	e7c6      	b.n	8008fb0 <__kernel_rem_pio2+0x558>
 8009022:	e9da 6700 	ldrd	r6, r7, [sl]
 8009026:	e95a 8902 	ldrd	r8, r9, [sl, #-8]
 800902a:	4632      	mov	r2, r6
 800902c:	463b      	mov	r3, r7
 800902e:	4640      	mov	r0, r8
 8009030:	4649      	mov	r1, r9
 8009032:	f7f7 f94f 	bl	80002d4 <__adddf3>
 8009036:	4602      	mov	r2, r0
 8009038:	460b      	mov	r3, r1
 800903a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800903e:	4640      	mov	r0, r8
 8009040:	4649      	mov	r1, r9
 8009042:	f7f7 f945 	bl	80002d0 <__aeabi_dsub>
 8009046:	4632      	mov	r2, r6
 8009048:	463b      	mov	r3, r7
 800904a:	f7f7 f943 	bl	80002d4 <__adddf3>
 800904e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009052:	e86a 0102 	strd	r0, r1, [sl], #-8
 8009056:	f10b 3bff 	add.w	fp, fp, #4294967295
 800905a:	e9ca 2300 	strd	r2, r3, [sl]
 800905e:	e768      	b.n	8008f32 <__kernel_rem_pio2+0x4da>
 8009060:	e9da 8900 	ldrd	r8, r9, [sl]
 8009064:	e95a 6702 	ldrd	r6, r7, [sl, #-8]
 8009068:	4642      	mov	r2, r8
 800906a:	464b      	mov	r3, r9
 800906c:	4630      	mov	r0, r6
 800906e:	4639      	mov	r1, r7
 8009070:	f7f7 f930 	bl	80002d4 <__adddf3>
 8009074:	4602      	mov	r2, r0
 8009076:	460b      	mov	r3, r1
 8009078:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800907c:	4630      	mov	r0, r6
 800907e:	4639      	mov	r1, r7
 8009080:	f7f7 f926 	bl	80002d0 <__aeabi_dsub>
 8009084:	4642      	mov	r2, r8
 8009086:	464b      	mov	r3, r9
 8009088:	f7f7 f924 	bl	80002d4 <__adddf3>
 800908c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009090:	e86a 0102 	strd	r0, r1, [sl], #-8
 8009094:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009098:	e9ca 2300 	strd	r2, r3, [sl]
 800909c:	e74e      	b.n	8008f3c <__kernel_rem_pio2+0x4e4>
 800909e:	4638      	mov	r0, r7
 80090a0:	e875 2302 	ldrd	r2, r3, [r5], #-8
 80090a4:	4631      	mov	r1, r6
 80090a6:	f7f7 f915 	bl	80002d4 <__adddf3>
 80090aa:	3c01      	subs	r4, #1
 80090ac:	4607      	mov	r7, r0
 80090ae:	460e      	mov	r6, r1
 80090b0:	e74a      	b.n	8008f48 <__kernel_rem_pio2+0x4f0>
 80090b2:	9b06      	ldr	r3, [sp, #24]
 80090b4:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 80090b8:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 80090bc:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 80090c0:	e9c3 0401 	strd	r0, r4, [r3, #4]
 80090c4:	e9c3 1703 	strd	r1, r7, [r3, #12]
 80090c8:	601d      	str	r5, [r3, #0]
 80090ca:	615e      	str	r6, [r3, #20]
 80090cc:	e723      	b.n	8008f16 <__kernel_rem_pio2+0x4be>
 80090ce:	bf00      	nop
 80090d0:	41700000 	.word	0x41700000
 80090d4:	3e700000 	.word	0x3e700000

080090d8 <scalbn>:
 80090d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090da:	4616      	mov	r6, r2
 80090dc:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80090e0:	4604      	mov	r4, r0
 80090e2:	460d      	mov	r5, r1
 80090e4:	460b      	mov	r3, r1
 80090e6:	b992      	cbnz	r2, 800910e <scalbn+0x36>
 80090e8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80090ec:	4303      	orrs	r3, r0
 80090ee:	d03c      	beq.n	800916a <scalbn+0x92>
 80090f0:	4b31      	ldr	r3, [pc, #196]	; (80091b8 <scalbn+0xe0>)
 80090f2:	2200      	movs	r2, #0
 80090f4:	f7f7 faa4 	bl	8000640 <__aeabi_dmul>
 80090f8:	4b30      	ldr	r3, [pc, #192]	; (80091bc <scalbn+0xe4>)
 80090fa:	4604      	mov	r4, r0
 80090fc:	429e      	cmp	r6, r3
 80090fe:	460d      	mov	r5, r1
 8009100:	da0f      	bge.n	8009122 <scalbn+0x4a>
 8009102:	a329      	add	r3, pc, #164	; (adr r3, 80091a8 <scalbn+0xd0>)
 8009104:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009108:	f7f7 fa9a 	bl	8000640 <__aeabi_dmul>
 800910c:	e006      	b.n	800911c <scalbn+0x44>
 800910e:	f240 77ff 	movw	r7, #2047	; 0x7ff
 8009112:	42ba      	cmp	r2, r7
 8009114:	d109      	bne.n	800912a <scalbn+0x52>
 8009116:	4602      	mov	r2, r0
 8009118:	f7f7 f8dc 	bl	80002d4 <__adddf3>
 800911c:	4604      	mov	r4, r0
 800911e:	460d      	mov	r5, r1
 8009120:	e023      	b.n	800916a <scalbn+0x92>
 8009122:	460b      	mov	r3, r1
 8009124:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8009128:	3a36      	subs	r2, #54	; 0x36
 800912a:	f24c 3150 	movw	r1, #50000	; 0xc350
 800912e:	428e      	cmp	r6, r1
 8009130:	dd0e      	ble.n	8009150 <scalbn+0x78>
 8009132:	a31f      	add	r3, pc, #124	; (adr r3, 80091b0 <scalbn+0xd8>)
 8009134:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009138:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800913c:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 8009140:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 8009144:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 8009148:	481d      	ldr	r0, [pc, #116]	; (80091c0 <scalbn+0xe8>)
 800914a:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 800914e:	e7db      	b.n	8009108 <scalbn+0x30>
 8009150:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8009154:	4432      	add	r2, r6
 8009156:	428a      	cmp	r2, r1
 8009158:	dceb      	bgt.n	8009132 <scalbn+0x5a>
 800915a:	2a00      	cmp	r2, #0
 800915c:	dd08      	ble.n	8009170 <scalbn+0x98>
 800915e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009162:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009166:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800916a:	4620      	mov	r0, r4
 800916c:	4629      	mov	r1, r5
 800916e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009170:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8009174:	da0c      	bge.n	8009190 <scalbn+0xb8>
 8009176:	a30c      	add	r3, pc, #48	; (adr r3, 80091a8 <scalbn+0xd0>)
 8009178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800917c:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 8009180:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 8009184:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 8009188:	480e      	ldr	r0, [pc, #56]	; (80091c4 <scalbn+0xec>)
 800918a:	f041 011f 	orr.w	r1, r1, #31
 800918e:	e7bb      	b.n	8009108 <scalbn+0x30>
 8009190:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009194:	3236      	adds	r2, #54	; 0x36
 8009196:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800919a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800919e:	4620      	mov	r0, r4
 80091a0:	4629      	mov	r1, r5
 80091a2:	2200      	movs	r2, #0
 80091a4:	4b08      	ldr	r3, [pc, #32]	; (80091c8 <scalbn+0xf0>)
 80091a6:	e7af      	b.n	8009108 <scalbn+0x30>
 80091a8:	c2f8f359 	.word	0xc2f8f359
 80091ac:	01a56e1f 	.word	0x01a56e1f
 80091b0:	8800759c 	.word	0x8800759c
 80091b4:	7e37e43c 	.word	0x7e37e43c
 80091b8:	43500000 	.word	0x43500000
 80091bc:	ffff3cb0 	.word	0xffff3cb0
 80091c0:	8800759c 	.word	0x8800759c
 80091c4:	c2f8f359 	.word	0xc2f8f359
 80091c8:	3c900000 	.word	0x3c900000
 80091cc:	00000000 	.word	0x00000000

080091d0 <floor>:
 80091d0:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80091d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80091d8:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 80091dc:	2e13      	cmp	r6, #19
 80091de:	460b      	mov	r3, r1
 80091e0:	4607      	mov	r7, r0
 80091e2:	460c      	mov	r4, r1
 80091e4:	4605      	mov	r5, r0
 80091e6:	dc32      	bgt.n	800924e <floor+0x7e>
 80091e8:	2e00      	cmp	r6, #0
 80091ea:	da14      	bge.n	8009216 <floor+0x46>
 80091ec:	a334      	add	r3, pc, #208	; (adr r3, 80092c0 <floor+0xf0>)
 80091ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091f2:	f7f7 f86f 	bl	80002d4 <__adddf3>
 80091f6:	2200      	movs	r2, #0
 80091f8:	2300      	movs	r3, #0
 80091fa:	f7f7 fcb1 	bl	8000b60 <__aeabi_dcmpgt>
 80091fe:	b138      	cbz	r0, 8009210 <floor+0x40>
 8009200:	2c00      	cmp	r4, #0
 8009202:	da56      	bge.n	80092b2 <floor+0xe2>
 8009204:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8009208:	4325      	orrs	r5, r4
 800920a:	d055      	beq.n	80092b8 <floor+0xe8>
 800920c:	2500      	movs	r5, #0
 800920e:	4c2e      	ldr	r4, [pc, #184]	; (80092c8 <floor+0xf8>)
 8009210:	4623      	mov	r3, r4
 8009212:	462f      	mov	r7, r5
 8009214:	e025      	b.n	8009262 <floor+0x92>
 8009216:	4a2d      	ldr	r2, [pc, #180]	; (80092cc <floor+0xfc>)
 8009218:	fa42 f806 	asr.w	r8, r2, r6
 800921c:	ea01 0208 	and.w	r2, r1, r8
 8009220:	4302      	orrs	r2, r0
 8009222:	d01e      	beq.n	8009262 <floor+0x92>
 8009224:	a326      	add	r3, pc, #152	; (adr r3, 80092c0 <floor+0xf0>)
 8009226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800922a:	f7f7 f853 	bl	80002d4 <__adddf3>
 800922e:	2200      	movs	r2, #0
 8009230:	2300      	movs	r3, #0
 8009232:	f7f7 fc95 	bl	8000b60 <__aeabi_dcmpgt>
 8009236:	2800      	cmp	r0, #0
 8009238:	d0ea      	beq.n	8009210 <floor+0x40>
 800923a:	2c00      	cmp	r4, #0
 800923c:	bfbe      	ittt	lt
 800923e:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8009242:	4133      	asrlt	r3, r6
 8009244:	18e4      	addlt	r4, r4, r3
 8009246:	2500      	movs	r5, #0
 8009248:	ea24 0408 	bic.w	r4, r4, r8
 800924c:	e7e0      	b.n	8009210 <floor+0x40>
 800924e:	2e33      	cmp	r6, #51	; 0x33
 8009250:	dd0b      	ble.n	800926a <floor+0x9a>
 8009252:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8009256:	d104      	bne.n	8009262 <floor+0x92>
 8009258:	4602      	mov	r2, r0
 800925a:	f7f7 f83b 	bl	80002d4 <__adddf3>
 800925e:	4607      	mov	r7, r0
 8009260:	460b      	mov	r3, r1
 8009262:	4638      	mov	r0, r7
 8009264:	4619      	mov	r1, r3
 8009266:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800926a:	f04f 38ff 	mov.w	r8, #4294967295
 800926e:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 8009272:	fa28 f802 	lsr.w	r8, r8, r2
 8009276:	ea10 0f08 	tst.w	r0, r8
 800927a:	d0f2      	beq.n	8009262 <floor+0x92>
 800927c:	a310      	add	r3, pc, #64	; (adr r3, 80092c0 <floor+0xf0>)
 800927e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009282:	f7f7 f827 	bl	80002d4 <__adddf3>
 8009286:	2200      	movs	r2, #0
 8009288:	2300      	movs	r3, #0
 800928a:	f7f7 fc69 	bl	8000b60 <__aeabi_dcmpgt>
 800928e:	2800      	cmp	r0, #0
 8009290:	d0be      	beq.n	8009210 <floor+0x40>
 8009292:	2c00      	cmp	r4, #0
 8009294:	da0a      	bge.n	80092ac <floor+0xdc>
 8009296:	2e14      	cmp	r6, #20
 8009298:	d101      	bne.n	800929e <floor+0xce>
 800929a:	3401      	adds	r4, #1
 800929c:	e006      	b.n	80092ac <floor+0xdc>
 800929e:	2301      	movs	r3, #1
 80092a0:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80092a4:	40b3      	lsls	r3, r6
 80092a6:	441d      	add	r5, r3
 80092a8:	42af      	cmp	r7, r5
 80092aa:	d8f6      	bhi.n	800929a <floor+0xca>
 80092ac:	ea25 0508 	bic.w	r5, r5, r8
 80092b0:	e7ae      	b.n	8009210 <floor+0x40>
 80092b2:	2500      	movs	r5, #0
 80092b4:	462c      	mov	r4, r5
 80092b6:	e7ab      	b.n	8009210 <floor+0x40>
 80092b8:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 80092bc:	e7a8      	b.n	8009210 <floor+0x40>
 80092be:	bf00      	nop
 80092c0:	8800759c 	.word	0x8800759c
 80092c4:	7e37e43c 	.word	0x7e37e43c
 80092c8:	bff00000 	.word	0xbff00000
 80092cc:	000fffff 	.word	0x000fffff

080092d0 <_init>:
 80092d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092d2:	bf00      	nop
 80092d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092d6:	bc08      	pop	{r3}
 80092d8:	469e      	mov	lr, r3
 80092da:	4770      	bx	lr

080092dc <_fini>:
 80092dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092de:	bf00      	nop
 80092e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092e2:	bc08      	pop	{r3}
 80092e4:	469e      	mov	lr, r3
 80092e6:	4770      	bx	lr
