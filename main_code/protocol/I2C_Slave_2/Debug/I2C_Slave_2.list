
I2C_Slave_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004984  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08004a98  08004a98  00014a98  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004af8  08004af8  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08004af8  08004af8  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004af8  08004af8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004af8  08004af8  00014af8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004afc  08004afc  00014afc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004b00  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003b0  20000070  08004b70  00020070  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000420  08004b70  00020420  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY
 13 .debug_info   000067c9  00000000  00000000  000200dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001536  00000000  00000000  000268a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000730  00000000  00000000  00027de0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000583  00000000  00000000  00028510  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016d89  00000000  00000000  00028a93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000095a3  00000000  00000000  0003f81c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00082b93  00000000  00000000  00048dbf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000022ac  00000000  00000000  000cb954  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  000cdc00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000070 	.word	0x20000070
 800012c:	00000000 	.word	0x00000000
 8000130:	08004a7c 	.word	0x08004a7c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000074 	.word	0x20000074
 800014c:	08004a7c 	.word	0x08004a7c

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2ulz>:
 8000a28:	b5d0      	push	{r4, r6, r7, lr}
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	4b0b      	ldr	r3, [pc, #44]	; (8000a5c <__aeabi_d2ulz+0x34>)
 8000a2e:	4606      	mov	r6, r0
 8000a30:	460f      	mov	r7, r1
 8000a32:	f7ff fd49 	bl	80004c8 <__aeabi_dmul>
 8000a36:	f000 f815 	bl	8000a64 <__aeabi_d2uiz>
 8000a3a:	4604      	mov	r4, r0
 8000a3c:	f7ff fcca 	bl	80003d4 <__aeabi_ui2d>
 8000a40:	2200      	movs	r2, #0
 8000a42:	4b07      	ldr	r3, [pc, #28]	; (8000a60 <__aeabi_d2ulz+0x38>)
 8000a44:	f7ff fd40 	bl	80004c8 <__aeabi_dmul>
 8000a48:	4602      	mov	r2, r0
 8000a4a:	460b      	mov	r3, r1
 8000a4c:	4630      	mov	r0, r6
 8000a4e:	4639      	mov	r1, r7
 8000a50:	f7ff fb82 	bl	8000158 <__aeabi_dsub>
 8000a54:	f000 f806 	bl	8000a64 <__aeabi_d2uiz>
 8000a58:	4621      	mov	r1, r4
 8000a5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000a5c:	3df00000 	.word	0x3df00000
 8000a60:	41f00000 	.word	0x41f00000

08000a64 <__aeabi_d2uiz>:
 8000a64:	004a      	lsls	r2, r1, #1
 8000a66:	d211      	bcs.n	8000a8c <__aeabi_d2uiz+0x28>
 8000a68:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a6c:	d211      	bcs.n	8000a92 <__aeabi_d2uiz+0x2e>
 8000a6e:	d50d      	bpl.n	8000a8c <__aeabi_d2uiz+0x28>
 8000a70:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a74:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a78:	d40e      	bmi.n	8000a98 <__aeabi_d2uiz+0x34>
 8000a7a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a7e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a82:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a86:	fa23 f002 	lsr.w	r0, r3, r2
 8000a8a:	4770      	bx	lr
 8000a8c:	f04f 0000 	mov.w	r0, #0
 8000a90:	4770      	bx	lr
 8000a92:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a96:	d102      	bne.n	8000a9e <__aeabi_d2uiz+0x3a>
 8000a98:	f04f 30ff 	mov.w	r0, #4294967295
 8000a9c:	4770      	bx	lr
 8000a9e:	f04f 0000 	mov.w	r0, #0
 8000aa2:	4770      	bx	lr

08000aa4 <HAL_I2C_SlaveRxCpltCallback>:
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_I2C1_Init(void);
/* USER CODE BEGIN PFP */

void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c) {
 8000aa4:	b5b0      	push	{r4, r5, r7, lr}
 8000aa6:	b082      	sub	sp, #8
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
    // Continue receiving data for the next transmission

	HAL_I2C_Slave_Receive_IT(hi2c, RxData, RxSIZE);
 8000aac:	2205      	movs	r2, #5
 8000aae:	492f      	ldr	r1, [pc, #188]	; (8000b6c <HAL_I2C_SlaveRxCpltCallback+0xc8>)
 8000ab0:	6878      	ldr	r0, [r7, #4]
 8000ab2:	f000 feed 	bl	8001890 <HAL_I2C_Slave_Receive_IT>
    // Concatenate RxData into a single 32-bit variable
    a = ((uint32_t)RxData[0] << 24) |
 8000ab6:	4b2d      	ldr	r3, [pc, #180]	; (8000b6c <HAL_I2C_SlaveRxCpltCallback+0xc8>)
 8000ab8:	781b      	ldrb	r3, [r3, #0]
 8000aba:	061a      	lsls	r2, r3, #24
        ((uint32_t)RxData[1] << 16) |
 8000abc:	4b2b      	ldr	r3, [pc, #172]	; (8000b6c <HAL_I2C_SlaveRxCpltCallback+0xc8>)
 8000abe:	785b      	ldrb	r3, [r3, #1]
 8000ac0:	041b      	lsls	r3, r3, #16
    a = ((uint32_t)RxData[0] << 24) |
 8000ac2:	431a      	orrs	r2, r3
        ((uint32_t)RxData[2] << 8) |
 8000ac4:	4b29      	ldr	r3, [pc, #164]	; (8000b6c <HAL_I2C_SlaveRxCpltCallback+0xc8>)
 8000ac6:	789b      	ldrb	r3, [r3, #2]
 8000ac8:	021b      	lsls	r3, r3, #8
        ((uint32_t)RxData[1] << 16) |
 8000aca:	4313      	orrs	r3, r2
        (uint32_t)RxData[3];
 8000acc:	4a27      	ldr	r2, [pc, #156]	; (8000b6c <HAL_I2C_SlaveRxCpltCallback+0xc8>)
 8000ace:	78d2      	ldrb	r2, [r2, #3]
        ((uint32_t)RxData[2] << 8) |
 8000ad0:	4313      	orrs	r3, r2
 8000ad2:	461a      	mov	r2, r3
    a = ((uint32_t)RxData[0] << 24) |
 8000ad4:	4b26      	ldr	r3, [pc, #152]	; (8000b70 <HAL_I2C_SlaveRxCpltCallback+0xcc>)
 8000ad6:	601a      	str	r2, [r3, #0]

    // Get the exponent value from RxData
    exponent = RxData[4];
 8000ad8:	4b24      	ldr	r3, [pc, #144]	; (8000b6c <HAL_I2C_SlaveRxCpltCallback+0xc8>)
 8000ada:	791a      	ldrb	r2, [r3, #4]
 8000adc:	4b25      	ldr	r3, [pc, #148]	; (8000b74 <HAL_I2C_SlaveRxCpltCallback+0xd0>)
 8000ade:	701a      	strb	r2, [r3, #0]

    // Calculate mu and real_num values
    mu = pow(10, exponent);
 8000ae0:	4b24      	ldr	r3, [pc, #144]	; (8000b74 <HAL_I2C_SlaveRxCpltCallback+0xd0>)
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f7ff fc75 	bl	80003d4 <__aeabi_ui2d>
 8000aea:	4602      	mov	r2, r0
 8000aec:	460b      	mov	r3, r1
 8000aee:	f04f 0000 	mov.w	r0, #0
 8000af2:	4921      	ldr	r1, [pc, #132]	; (8000b78 <HAL_I2C_SlaveRxCpltCallback+0xd4>)
 8000af4:	f003 f8b8 	bl	8003c68 <pow>
 8000af8:	4602      	mov	r2, r0
 8000afa:	460b      	mov	r3, r1
 8000afc:	4610      	mov	r0, r2
 8000afe:	4619      	mov	r1, r3
 8000b00:	f7ff ff92 	bl	8000a28 <__aeabi_d2ulz>
 8000b04:	4602      	mov	r2, r0
 8000b06:	460b      	mov	r3, r1
 8000b08:	491c      	ldr	r1, [pc, #112]	; (8000b7c <HAL_I2C_SlaveRxCpltCallback+0xd8>)
 8000b0a:	e9c1 2300 	strd	r2, r3, [r1]
    real_num = (double)((double)a/ mu);
 8000b0e:	4b18      	ldr	r3, [pc, #96]	; (8000b70 <HAL_I2C_SlaveRxCpltCallback+0xcc>)
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	4618      	mov	r0, r3
 8000b14:	f7ff fc6e 	bl	80003f4 <__aeabi_i2d>
 8000b18:	4604      	mov	r4, r0
 8000b1a:	460d      	mov	r5, r1
 8000b1c:	4b17      	ldr	r3, [pc, #92]	; (8000b7c <HAL_I2C_SlaveRxCpltCallback+0xd8>)
 8000b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b22:	4610      	mov	r0, r2
 8000b24:	4619      	mov	r1, r3
 8000b26:	f7ff fc99 	bl	800045c <__aeabi_ul2d>
 8000b2a:	4602      	mov	r2, r0
 8000b2c:	460b      	mov	r3, r1
 8000b2e:	4620      	mov	r0, r4
 8000b30:	4629      	mov	r1, r5
 8000b32:	f7ff fdf3 	bl	800071c <__aeabi_ddiv>
 8000b36:	4602      	mov	r2, r0
 8000b38:	460b      	mov	r3, r1
 8000b3a:	4911      	ldr	r1, [pc, #68]	; (8000b80 <HAL_I2C_SlaveRxCpltCallback+0xdc>)
 8000b3c:	e9c1 2300 	strd	r2, r3, [r1]

    real_num_array[real_num_count] = real_num;
 8000b40:	4b10      	ldr	r3, [pc, #64]	; (8000b84 <HAL_I2C_SlaveRxCpltCallback+0xe0>)
 8000b42:	781b      	ldrb	r3, [r3, #0]
 8000b44:	4619      	mov	r1, r3
 8000b46:	4b0e      	ldr	r3, [pc, #56]	; (8000b80 <HAL_I2C_SlaveRxCpltCallback+0xdc>)
 8000b48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b4c:	480e      	ldr	r0, [pc, #56]	; (8000b88 <HAL_I2C_SlaveRxCpltCallback+0xe4>)
 8000b4e:	00c9      	lsls	r1, r1, #3
 8000b50:	4401      	add	r1, r0
 8000b52:	e9c1 2300 	strd	r2, r3, [r1]
    real_num_count++;
 8000b56:	4b0b      	ldr	r3, [pc, #44]	; (8000b84 <HAL_I2C_SlaveRxCpltCallback+0xe0>)
 8000b58:	781b      	ldrb	r3, [r3, #0]
 8000b5a:	3301      	adds	r3, #1
 8000b5c:	b2da      	uxtb	r2, r3
 8000b5e:	4b09      	ldr	r3, [pc, #36]	; (8000b84 <HAL_I2C_SlaveRxCpltCallback+0xe0>)
 8000b60:	701a      	strb	r2, [r3, #0]

}
 8000b62:	bf00      	nop
 8000b64:	3708      	adds	r7, #8
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bdb0      	pop	{r4, r5, r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	200000e0 	.word	0x200000e0
 8000b70:	200000f0 	.word	0x200000f0
 8000b74:	200000f4 	.word	0x200000f4
 8000b78:	40240000 	.word	0x40240000
 8000b7c:	200000f8 	.word	0x200000f8
 8000b80:	200000e8 	.word	0x200000e8
 8000b84:	200002e0 	.word	0x200002e0
 8000b88:	20000100 	.word	0x20000100

08000b8c <HAL_I2C_AddrCallback>:
//    	real_num_array[5] =0;
//    	real_num_count = 0; // Đặt lại biến đếm về 0
//    }

void HAL_I2C_AddrCallback(I2C_HandleTypeDef*hi2c,uint8_t TransferDirection,uint16_t AddrMatchCode)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b082      	sub	sp, #8
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
 8000b94:	460b      	mov	r3, r1
 8000b96:	70fb      	strb	r3, [r7, #3]
 8000b98:	4613      	mov	r3, r2
 8000b9a:	803b      	strh	r3, [r7, #0]
		if(TransferDirection == I2C_DIRECTION_TRANSMIT)
 8000b9c:	78fb      	ldrb	r3, [r7, #3]
 8000b9e:	2b01      	cmp	r3, #1
 8000ba0:	d106      	bne.n	8000bb0 <HAL_I2C_AddrCallback+0x24>
		{
			HAL_I2C_Slave_Sequential_Receive_IT(hi2c,RxData, RxSIZE,I2C_FIRST_AND_LAST_FRAME);
 8000ba2:	2308      	movs	r3, #8
 8000ba4:	2205      	movs	r2, #5
 8000ba6:	4905      	ldr	r1, [pc, #20]	; (8000bbc <HAL_I2C_AddrCallback+0x30>)
 8000ba8:	6878      	ldr	r0, [r7, #4]
 8000baa:	f000 fedf 	bl	800196c <HAL_I2C_Slave_Seq_Receive_IT>
		}
		else
		{
		Error_Handler();
		}
}
 8000bae:	e001      	b.n	8000bb4 <HAL_I2C_AddrCallback+0x28>
		Error_Handler();
 8000bb0:	f000 f8ae 	bl	8000d10 <Error_Handler>
}
 8000bb4:	bf00      	nop
 8000bb6:	3708      	adds	r7, #8
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}
 8000bbc:	200000e0 	.word	0x200000e0

08000bc0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bc4:	f000 f992 	bl	8000eec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bc8:	f000 f80a 	bl	8000be0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bcc:	f000 f872 	bl	8000cb4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000bd0:	f000 f842 	bl	8000c58 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c);
  HAL_I2C_EnableListen_IT(&hi2c1);
 8000bd4:	4801      	ldr	r0, [pc, #4]	; (8000bdc <main+0x1c>)
 8000bd6:	f000 ff3b 	bl	8001a50 <HAL_I2C_EnableListen_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000bda:	e7fe      	b.n	8000bda <main+0x1a>
 8000bdc:	2000008c 	.word	0x2000008c

08000be0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b090      	sub	sp, #64	; 0x40
 8000be4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000be6:	f107 0318 	add.w	r3, r7, #24
 8000bea:	2228      	movs	r2, #40	; 0x28
 8000bec:	2100      	movs	r1, #0
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f003 f808 	bl	8003c04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bf4:	1d3b      	adds	r3, r7, #4
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	601a      	str	r2, [r3, #0]
 8000bfa:	605a      	str	r2, [r3, #4]
 8000bfc:	609a      	str	r2, [r3, #8]
 8000bfe:	60da      	str	r2, [r3, #12]
 8000c00:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c02:	2302      	movs	r3, #2
 8000c04:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c06:	2301      	movs	r3, #1
 8000c08:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c0a:	2310      	movs	r3, #16
 8000c0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c12:	f107 0318 	add.w	r3, r7, #24
 8000c16:	4618      	mov	r0, r3
 8000c18:	f002 fbf8 	bl	800340c <HAL_RCC_OscConfig>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d001      	beq.n	8000c26 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000c22:	f000 f875 	bl	8000d10 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c26:	230f      	movs	r3, #15
 8000c28:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c32:	2300      	movs	r3, #0
 8000c34:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c36:	2300      	movs	r3, #0
 8000c38:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000c3a:	1d3b      	adds	r3, r7, #4
 8000c3c:	2100      	movs	r1, #0
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f002 fe66 	bl	8003910 <HAL_RCC_ClockConfig>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d001      	beq.n	8000c4e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000c4a:	f000 f861 	bl	8000d10 <Error_Handler>
  }
}
 8000c4e:	bf00      	nop
 8000c50:	3740      	adds	r7, #64	; 0x40
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
	...

08000c58 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c5c:	4b12      	ldr	r3, [pc, #72]	; (8000ca8 <MX_I2C1_Init+0x50>)
 8000c5e:	4a13      	ldr	r2, [pc, #76]	; (8000cac <MX_I2C1_Init+0x54>)
 8000c60:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000c62:	4b11      	ldr	r3, [pc, #68]	; (8000ca8 <MX_I2C1_Init+0x50>)
 8000c64:	4a12      	ldr	r2, [pc, #72]	; (8000cb0 <MX_I2C1_Init+0x58>)
 8000c66:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000c68:	4b0f      	ldr	r3, [pc, #60]	; (8000ca8 <MX_I2C1_Init+0x50>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 36;
 8000c6e:	4b0e      	ldr	r3, [pc, #56]	; (8000ca8 <MX_I2C1_Init+0x50>)
 8000c70:	2224      	movs	r2, #36	; 0x24
 8000c72:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c74:	4b0c      	ldr	r3, [pc, #48]	; (8000ca8 <MX_I2C1_Init+0x50>)
 8000c76:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c7a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c7c:	4b0a      	ldr	r3, [pc, #40]	; (8000ca8 <MX_I2C1_Init+0x50>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000c82:	4b09      	ldr	r3, [pc, #36]	; (8000ca8 <MX_I2C1_Init+0x50>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c88:	4b07      	ldr	r3, [pc, #28]	; (8000ca8 <MX_I2C1_Init+0x50>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c8e:	4b06      	ldr	r3, [pc, #24]	; (8000ca8 <MX_I2C1_Init+0x50>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c94:	4804      	ldr	r0, [pc, #16]	; (8000ca8 <MX_I2C1_Init+0x50>)
 8000c96:	f000 fca3 	bl	80015e0 <HAL_I2C_Init>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d001      	beq.n	8000ca4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000ca0:	f000 f836 	bl	8000d10 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ca4:	bf00      	nop
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	2000008c 	.word	0x2000008c
 8000cac:	40005400 	.word	0x40005400
 8000cb0:	000186a0 	.word	0x000186a0

08000cb4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	b085      	sub	sp, #20
 8000cb8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cba:	4b14      	ldr	r3, [pc, #80]	; (8000d0c <MX_GPIO_Init+0x58>)
 8000cbc:	699b      	ldr	r3, [r3, #24]
 8000cbe:	4a13      	ldr	r2, [pc, #76]	; (8000d0c <MX_GPIO_Init+0x58>)
 8000cc0:	f043 0320 	orr.w	r3, r3, #32
 8000cc4:	6193      	str	r3, [r2, #24]
 8000cc6:	4b11      	ldr	r3, [pc, #68]	; (8000d0c <MX_GPIO_Init+0x58>)
 8000cc8:	699b      	ldr	r3, [r3, #24]
 8000cca:	f003 0320 	and.w	r3, r3, #32
 8000cce:	60fb      	str	r3, [r7, #12]
 8000cd0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cd2:	4b0e      	ldr	r3, [pc, #56]	; (8000d0c <MX_GPIO_Init+0x58>)
 8000cd4:	699b      	ldr	r3, [r3, #24]
 8000cd6:	4a0d      	ldr	r2, [pc, #52]	; (8000d0c <MX_GPIO_Init+0x58>)
 8000cd8:	f043 0304 	orr.w	r3, r3, #4
 8000cdc:	6193      	str	r3, [r2, #24]
 8000cde:	4b0b      	ldr	r3, [pc, #44]	; (8000d0c <MX_GPIO_Init+0x58>)
 8000ce0:	699b      	ldr	r3, [r3, #24]
 8000ce2:	f003 0304 	and.w	r3, r3, #4
 8000ce6:	60bb      	str	r3, [r7, #8]
 8000ce8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cea:	4b08      	ldr	r3, [pc, #32]	; (8000d0c <MX_GPIO_Init+0x58>)
 8000cec:	699b      	ldr	r3, [r3, #24]
 8000cee:	4a07      	ldr	r2, [pc, #28]	; (8000d0c <MX_GPIO_Init+0x58>)
 8000cf0:	f043 0308 	orr.w	r3, r3, #8
 8000cf4:	6193      	str	r3, [r2, #24]
 8000cf6:	4b05      	ldr	r3, [pc, #20]	; (8000d0c <MX_GPIO_Init+0x58>)
 8000cf8:	699b      	ldr	r3, [r3, #24]
 8000cfa:	f003 0308 	and.w	r3, r3, #8
 8000cfe:	607b      	str	r3, [r7, #4]
 8000d00:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d02:	bf00      	nop
 8000d04:	3714      	adds	r7, #20
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bc80      	pop	{r7}
 8000d0a:	4770      	bx	lr
 8000d0c:	40021000 	.word	0x40021000

08000d10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d14:	b672      	cpsid	i
}
 8000d16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d18:	e7fe      	b.n	8000d18 <Error_Handler+0x8>
	...

08000d1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b085      	sub	sp, #20
 8000d20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000d22:	4b15      	ldr	r3, [pc, #84]	; (8000d78 <HAL_MspInit+0x5c>)
 8000d24:	699b      	ldr	r3, [r3, #24]
 8000d26:	4a14      	ldr	r2, [pc, #80]	; (8000d78 <HAL_MspInit+0x5c>)
 8000d28:	f043 0301 	orr.w	r3, r3, #1
 8000d2c:	6193      	str	r3, [r2, #24]
 8000d2e:	4b12      	ldr	r3, [pc, #72]	; (8000d78 <HAL_MspInit+0x5c>)
 8000d30:	699b      	ldr	r3, [r3, #24]
 8000d32:	f003 0301 	and.w	r3, r3, #1
 8000d36:	60bb      	str	r3, [r7, #8]
 8000d38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d3a:	4b0f      	ldr	r3, [pc, #60]	; (8000d78 <HAL_MspInit+0x5c>)
 8000d3c:	69db      	ldr	r3, [r3, #28]
 8000d3e:	4a0e      	ldr	r2, [pc, #56]	; (8000d78 <HAL_MspInit+0x5c>)
 8000d40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d44:	61d3      	str	r3, [r2, #28]
 8000d46:	4b0c      	ldr	r3, [pc, #48]	; (8000d78 <HAL_MspInit+0x5c>)
 8000d48:	69db      	ldr	r3, [r3, #28]
 8000d4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d4e:	607b      	str	r3, [r7, #4]
 8000d50:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000d52:	4b0a      	ldr	r3, [pc, #40]	; (8000d7c <HAL_MspInit+0x60>)
 8000d54:	685b      	ldr	r3, [r3, #4]
 8000d56:	60fb      	str	r3, [r7, #12]
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000d5e:	60fb      	str	r3, [r7, #12]
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000d66:	60fb      	str	r3, [r7, #12]
 8000d68:	4a04      	ldr	r2, [pc, #16]	; (8000d7c <HAL_MspInit+0x60>)
 8000d6a:	68fb      	ldr	r3, [r7, #12]
 8000d6c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d6e:	bf00      	nop
 8000d70:	3714      	adds	r7, #20
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bc80      	pop	{r7}
 8000d76:	4770      	bx	lr
 8000d78:	40021000 	.word	0x40021000
 8000d7c:	40010000 	.word	0x40010000

08000d80 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b088      	sub	sp, #32
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d88:	f107 0310 	add.w	r3, r7, #16
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	601a      	str	r2, [r3, #0]
 8000d90:	605a      	str	r2, [r3, #4]
 8000d92:	609a      	str	r2, [r3, #8]
 8000d94:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	4a1d      	ldr	r2, [pc, #116]	; (8000e10 <HAL_I2C_MspInit+0x90>)
 8000d9c:	4293      	cmp	r3, r2
 8000d9e:	d133      	bne.n	8000e08 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000da0:	4b1c      	ldr	r3, [pc, #112]	; (8000e14 <HAL_I2C_MspInit+0x94>)
 8000da2:	699b      	ldr	r3, [r3, #24]
 8000da4:	4a1b      	ldr	r2, [pc, #108]	; (8000e14 <HAL_I2C_MspInit+0x94>)
 8000da6:	f043 0308 	orr.w	r3, r3, #8
 8000daa:	6193      	str	r3, [r2, #24]
 8000dac:	4b19      	ldr	r3, [pc, #100]	; (8000e14 <HAL_I2C_MspInit+0x94>)
 8000dae:	699b      	ldr	r3, [r3, #24]
 8000db0:	f003 0308 	and.w	r3, r3, #8
 8000db4:	60fb      	str	r3, [r7, #12]
 8000db6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000db8:	23c0      	movs	r3, #192	; 0xc0
 8000dba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000dbc:	2312      	movs	r3, #18
 8000dbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000dc0:	2303      	movs	r3, #3
 8000dc2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dc4:	f107 0310 	add.w	r3, r7, #16
 8000dc8:	4619      	mov	r1, r3
 8000dca:	4813      	ldr	r0, [pc, #76]	; (8000e18 <HAL_I2C_MspInit+0x98>)
 8000dcc:	f000 fa84 	bl	80012d8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000dd0:	4b10      	ldr	r3, [pc, #64]	; (8000e14 <HAL_I2C_MspInit+0x94>)
 8000dd2:	69db      	ldr	r3, [r3, #28]
 8000dd4:	4a0f      	ldr	r2, [pc, #60]	; (8000e14 <HAL_I2C_MspInit+0x94>)
 8000dd6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000dda:	61d3      	str	r3, [r2, #28]
 8000ddc:	4b0d      	ldr	r3, [pc, #52]	; (8000e14 <HAL_I2C_MspInit+0x94>)
 8000dde:	69db      	ldr	r3, [r3, #28]
 8000de0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000de4:	60bb      	str	r3, [r7, #8]
 8000de6:	68bb      	ldr	r3, [r7, #8]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000de8:	2200      	movs	r2, #0
 8000dea:	2100      	movs	r1, #0
 8000dec:	201f      	movs	r0, #31
 8000dee:	f000 f9b6 	bl	800115e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000df2:	201f      	movs	r0, #31
 8000df4:	f000 f9cf 	bl	8001196 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000df8:	2200      	movs	r2, #0
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	2020      	movs	r0, #32
 8000dfe:	f000 f9ae 	bl	800115e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000e02:	2020      	movs	r0, #32
 8000e04:	f000 f9c7 	bl	8001196 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000e08:	bf00      	nop
 8000e0a:	3720      	adds	r7, #32
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	40005400 	.word	0x40005400
 8000e14:	40021000 	.word	0x40021000
 8000e18:	40010c00 	.word	0x40010c00

08000e1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e20:	e7fe      	b.n	8000e20 <NMI_Handler+0x4>

08000e22 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e22:	b480      	push	{r7}
 8000e24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e26:	e7fe      	b.n	8000e26 <HardFault_Handler+0x4>

08000e28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e2c:	e7fe      	b.n	8000e2c <MemManage_Handler+0x4>

08000e2e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e2e:	b480      	push	{r7}
 8000e30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e32:	e7fe      	b.n	8000e32 <BusFault_Handler+0x4>

08000e34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e38:	e7fe      	b.n	8000e38 <UsageFault_Handler+0x4>

08000e3a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e3a:	b480      	push	{r7}
 8000e3c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e3e:	bf00      	nop
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bc80      	pop	{r7}
 8000e44:	4770      	bx	lr

08000e46 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e46:	b480      	push	{r7}
 8000e48:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e4a:	bf00      	nop
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bc80      	pop	{r7}
 8000e50:	4770      	bx	lr

08000e52 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e52:	b480      	push	{r7}
 8000e54:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e56:	bf00      	nop
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bc80      	pop	{r7}
 8000e5c:	4770      	bx	lr

08000e5e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e5e:	b580      	push	{r7, lr}
 8000e60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e62:	f000 f889 	bl	8000f78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e66:	bf00      	nop
 8000e68:	bd80      	pop	{r7, pc}
	...

08000e6c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000e70:	4802      	ldr	r0, [pc, #8]	; (8000e7c <I2C1_EV_IRQHandler+0x10>)
 8000e72:	f000 fe22 	bl	8001aba <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000e76:	bf00      	nop
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	2000008c 	.word	0x2000008c

08000e80 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000e84:	4802      	ldr	r0, [pc, #8]	; (8000e90 <I2C1_ER_IRQHandler+0x10>)
 8000e86:	f000 ff6b 	bl	8001d60 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000e8a:	bf00      	nop
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	2000008c 	.word	0x2000008c

08000e94 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e98:	bf00      	nop
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bc80      	pop	{r7}
 8000e9e:	4770      	bx	lr

08000ea0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ea0:	f7ff fff8 	bl	8000e94 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ea4:	480b      	ldr	r0, [pc, #44]	; (8000ed4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000ea6:	490c      	ldr	r1, [pc, #48]	; (8000ed8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000ea8:	4a0c      	ldr	r2, [pc, #48]	; (8000edc <LoopFillZerobss+0x16>)
  movs r3, #0
 8000eaa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000eac:	e002      	b.n	8000eb4 <LoopCopyDataInit>

08000eae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000eae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000eb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000eb2:	3304      	adds	r3, #4

08000eb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000eb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000eb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000eb8:	d3f9      	bcc.n	8000eae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000eba:	4a09      	ldr	r2, [pc, #36]	; (8000ee0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000ebc:	4c09      	ldr	r4, [pc, #36]	; (8000ee4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ebe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ec0:	e001      	b.n	8000ec6 <LoopFillZerobss>

08000ec2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ec2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ec4:	3204      	adds	r2, #4

08000ec6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ec6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ec8:	d3fb      	bcc.n	8000ec2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000eca:	f002 fea9 	bl	8003c20 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ece:	f7ff fe77 	bl	8000bc0 <main>
  bx lr
 8000ed2:	4770      	bx	lr
  ldr r0, =_sdata
 8000ed4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ed8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000edc:	08004b00 	.word	0x08004b00
  ldr r2, =_sbss
 8000ee0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000ee4:	20000420 	.word	0x20000420

08000ee8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ee8:	e7fe      	b.n	8000ee8 <ADC1_2_IRQHandler>
	...

08000eec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ef0:	4b08      	ldr	r3, [pc, #32]	; (8000f14 <HAL_Init+0x28>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a07      	ldr	r2, [pc, #28]	; (8000f14 <HAL_Init+0x28>)
 8000ef6:	f043 0310 	orr.w	r3, r3, #16
 8000efa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000efc:	2003      	movs	r0, #3
 8000efe:	f000 f923 	bl	8001148 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f02:	200f      	movs	r0, #15
 8000f04:	f000 f808 	bl	8000f18 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f08:	f7ff ff08 	bl	8000d1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f0c:	2300      	movs	r3, #0
}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	40022000 	.word	0x40022000

08000f18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f20:	4b12      	ldr	r3, [pc, #72]	; (8000f6c <HAL_InitTick+0x54>)
 8000f22:	681a      	ldr	r2, [r3, #0]
 8000f24:	4b12      	ldr	r3, [pc, #72]	; (8000f70 <HAL_InitTick+0x58>)
 8000f26:	781b      	ldrb	r3, [r3, #0]
 8000f28:	4619      	mov	r1, r3
 8000f2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f32:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f36:	4618      	mov	r0, r3
 8000f38:	f000 f93b 	bl	80011b2 <HAL_SYSTICK_Config>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d001      	beq.n	8000f46 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f42:	2301      	movs	r3, #1
 8000f44:	e00e      	b.n	8000f64 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	2b0f      	cmp	r3, #15
 8000f4a:	d80a      	bhi.n	8000f62 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	6879      	ldr	r1, [r7, #4]
 8000f50:	f04f 30ff 	mov.w	r0, #4294967295
 8000f54:	f000 f903 	bl	800115e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f58:	4a06      	ldr	r2, [pc, #24]	; (8000f74 <HAL_InitTick+0x5c>)
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	e000      	b.n	8000f64 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f62:	2301      	movs	r3, #1
}
 8000f64:	4618      	mov	r0, r3
 8000f66:	3708      	adds	r7, #8
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	20000000 	.word	0x20000000
 8000f70:	20000008 	.word	0x20000008
 8000f74:	20000004 	.word	0x20000004

08000f78 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f7c:	4b05      	ldr	r3, [pc, #20]	; (8000f94 <HAL_IncTick+0x1c>)
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	461a      	mov	r2, r3
 8000f82:	4b05      	ldr	r3, [pc, #20]	; (8000f98 <HAL_IncTick+0x20>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	4413      	add	r3, r2
 8000f88:	4a03      	ldr	r2, [pc, #12]	; (8000f98 <HAL_IncTick+0x20>)
 8000f8a:	6013      	str	r3, [r2, #0]
}
 8000f8c:	bf00      	nop
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bc80      	pop	{r7}
 8000f92:	4770      	bx	lr
 8000f94:	20000008 	.word	0x20000008
 8000f98:	200002e4 	.word	0x200002e4

08000f9c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  return uwTick;
 8000fa0:	4b02      	ldr	r3, [pc, #8]	; (8000fac <HAL_GetTick+0x10>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
}
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bc80      	pop	{r7}
 8000faa:	4770      	bx	lr
 8000fac:	200002e4 	.word	0x200002e4

08000fb0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b085      	sub	sp, #20
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	f003 0307 	and.w	r3, r3, #7
 8000fbe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fc0:	4b0c      	ldr	r3, [pc, #48]	; (8000ff4 <__NVIC_SetPriorityGrouping+0x44>)
 8000fc2:	68db      	ldr	r3, [r3, #12]
 8000fc4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fc6:	68ba      	ldr	r2, [r7, #8]
 8000fc8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fcc:	4013      	ands	r3, r2
 8000fce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fd4:	68bb      	ldr	r3, [r7, #8]
 8000fd6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fd8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fdc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fe0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fe2:	4a04      	ldr	r2, [pc, #16]	; (8000ff4 <__NVIC_SetPriorityGrouping+0x44>)
 8000fe4:	68bb      	ldr	r3, [r7, #8]
 8000fe6:	60d3      	str	r3, [r2, #12]
}
 8000fe8:	bf00      	nop
 8000fea:	3714      	adds	r7, #20
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bc80      	pop	{r7}
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop
 8000ff4:	e000ed00 	.word	0xe000ed00

08000ff8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ffc:	4b04      	ldr	r3, [pc, #16]	; (8001010 <__NVIC_GetPriorityGrouping+0x18>)
 8000ffe:	68db      	ldr	r3, [r3, #12]
 8001000:	0a1b      	lsrs	r3, r3, #8
 8001002:	f003 0307 	and.w	r3, r3, #7
}
 8001006:	4618      	mov	r0, r3
 8001008:	46bd      	mov	sp, r7
 800100a:	bc80      	pop	{r7}
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop
 8001010:	e000ed00 	.word	0xe000ed00

08001014 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001014:	b480      	push	{r7}
 8001016:	b083      	sub	sp, #12
 8001018:	af00      	add	r7, sp, #0
 800101a:	4603      	mov	r3, r0
 800101c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800101e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001022:	2b00      	cmp	r3, #0
 8001024:	db0b      	blt.n	800103e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001026:	79fb      	ldrb	r3, [r7, #7]
 8001028:	f003 021f 	and.w	r2, r3, #31
 800102c:	4906      	ldr	r1, [pc, #24]	; (8001048 <__NVIC_EnableIRQ+0x34>)
 800102e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001032:	095b      	lsrs	r3, r3, #5
 8001034:	2001      	movs	r0, #1
 8001036:	fa00 f202 	lsl.w	r2, r0, r2
 800103a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800103e:	bf00      	nop
 8001040:	370c      	adds	r7, #12
 8001042:	46bd      	mov	sp, r7
 8001044:	bc80      	pop	{r7}
 8001046:	4770      	bx	lr
 8001048:	e000e100 	.word	0xe000e100

0800104c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800104c:	b480      	push	{r7}
 800104e:	b083      	sub	sp, #12
 8001050:	af00      	add	r7, sp, #0
 8001052:	4603      	mov	r3, r0
 8001054:	6039      	str	r1, [r7, #0]
 8001056:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001058:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800105c:	2b00      	cmp	r3, #0
 800105e:	db0a      	blt.n	8001076 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	b2da      	uxtb	r2, r3
 8001064:	490c      	ldr	r1, [pc, #48]	; (8001098 <__NVIC_SetPriority+0x4c>)
 8001066:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800106a:	0112      	lsls	r2, r2, #4
 800106c:	b2d2      	uxtb	r2, r2
 800106e:	440b      	add	r3, r1
 8001070:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001074:	e00a      	b.n	800108c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	b2da      	uxtb	r2, r3
 800107a:	4908      	ldr	r1, [pc, #32]	; (800109c <__NVIC_SetPriority+0x50>)
 800107c:	79fb      	ldrb	r3, [r7, #7]
 800107e:	f003 030f 	and.w	r3, r3, #15
 8001082:	3b04      	subs	r3, #4
 8001084:	0112      	lsls	r2, r2, #4
 8001086:	b2d2      	uxtb	r2, r2
 8001088:	440b      	add	r3, r1
 800108a:	761a      	strb	r2, [r3, #24]
}
 800108c:	bf00      	nop
 800108e:	370c      	adds	r7, #12
 8001090:	46bd      	mov	sp, r7
 8001092:	bc80      	pop	{r7}
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop
 8001098:	e000e100 	.word	0xe000e100
 800109c:	e000ed00 	.word	0xe000ed00

080010a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b089      	sub	sp, #36	; 0x24
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	60f8      	str	r0, [r7, #12]
 80010a8:	60b9      	str	r1, [r7, #8]
 80010aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	f003 0307 	and.w	r3, r3, #7
 80010b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010b4:	69fb      	ldr	r3, [r7, #28]
 80010b6:	f1c3 0307 	rsb	r3, r3, #7
 80010ba:	2b04      	cmp	r3, #4
 80010bc:	bf28      	it	cs
 80010be:	2304      	movcs	r3, #4
 80010c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010c2:	69fb      	ldr	r3, [r7, #28]
 80010c4:	3304      	adds	r3, #4
 80010c6:	2b06      	cmp	r3, #6
 80010c8:	d902      	bls.n	80010d0 <NVIC_EncodePriority+0x30>
 80010ca:	69fb      	ldr	r3, [r7, #28]
 80010cc:	3b03      	subs	r3, #3
 80010ce:	e000      	b.n	80010d2 <NVIC_EncodePriority+0x32>
 80010d0:	2300      	movs	r3, #0
 80010d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010d4:	f04f 32ff 	mov.w	r2, #4294967295
 80010d8:	69bb      	ldr	r3, [r7, #24]
 80010da:	fa02 f303 	lsl.w	r3, r2, r3
 80010de:	43da      	mvns	r2, r3
 80010e0:	68bb      	ldr	r3, [r7, #8]
 80010e2:	401a      	ands	r2, r3
 80010e4:	697b      	ldr	r3, [r7, #20]
 80010e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010e8:	f04f 31ff 	mov.w	r1, #4294967295
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	fa01 f303 	lsl.w	r3, r1, r3
 80010f2:	43d9      	mvns	r1, r3
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010f8:	4313      	orrs	r3, r2
         );
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	3724      	adds	r7, #36	; 0x24
 80010fe:	46bd      	mov	sp, r7
 8001100:	bc80      	pop	{r7}
 8001102:	4770      	bx	lr

08001104 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b082      	sub	sp, #8
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	3b01      	subs	r3, #1
 8001110:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001114:	d301      	bcc.n	800111a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001116:	2301      	movs	r3, #1
 8001118:	e00f      	b.n	800113a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800111a:	4a0a      	ldr	r2, [pc, #40]	; (8001144 <SysTick_Config+0x40>)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	3b01      	subs	r3, #1
 8001120:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001122:	210f      	movs	r1, #15
 8001124:	f04f 30ff 	mov.w	r0, #4294967295
 8001128:	f7ff ff90 	bl	800104c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800112c:	4b05      	ldr	r3, [pc, #20]	; (8001144 <SysTick_Config+0x40>)
 800112e:	2200      	movs	r2, #0
 8001130:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001132:	4b04      	ldr	r3, [pc, #16]	; (8001144 <SysTick_Config+0x40>)
 8001134:	2207      	movs	r2, #7
 8001136:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001138:	2300      	movs	r3, #0
}
 800113a:	4618      	mov	r0, r3
 800113c:	3708      	adds	r7, #8
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	e000e010 	.word	0xe000e010

08001148 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001150:	6878      	ldr	r0, [r7, #4]
 8001152:	f7ff ff2d 	bl	8000fb0 <__NVIC_SetPriorityGrouping>
}
 8001156:	bf00      	nop
 8001158:	3708      	adds	r7, #8
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}

0800115e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800115e:	b580      	push	{r7, lr}
 8001160:	b086      	sub	sp, #24
 8001162:	af00      	add	r7, sp, #0
 8001164:	4603      	mov	r3, r0
 8001166:	60b9      	str	r1, [r7, #8]
 8001168:	607a      	str	r2, [r7, #4]
 800116a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800116c:	2300      	movs	r3, #0
 800116e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001170:	f7ff ff42 	bl	8000ff8 <__NVIC_GetPriorityGrouping>
 8001174:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001176:	687a      	ldr	r2, [r7, #4]
 8001178:	68b9      	ldr	r1, [r7, #8]
 800117a:	6978      	ldr	r0, [r7, #20]
 800117c:	f7ff ff90 	bl	80010a0 <NVIC_EncodePriority>
 8001180:	4602      	mov	r2, r0
 8001182:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001186:	4611      	mov	r1, r2
 8001188:	4618      	mov	r0, r3
 800118a:	f7ff ff5f 	bl	800104c <__NVIC_SetPriority>
}
 800118e:	bf00      	nop
 8001190:	3718      	adds	r7, #24
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}

08001196 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001196:	b580      	push	{r7, lr}
 8001198:	b082      	sub	sp, #8
 800119a:	af00      	add	r7, sp, #0
 800119c:	4603      	mov	r3, r0
 800119e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011a4:	4618      	mov	r0, r3
 80011a6:	f7ff ff35 	bl	8001014 <__NVIC_EnableIRQ>
}
 80011aa:	bf00      	nop
 80011ac:	3708      	adds	r7, #8
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}

080011b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011b2:	b580      	push	{r7, lr}
 80011b4:	b082      	sub	sp, #8
 80011b6:	af00      	add	r7, sp, #0
 80011b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011ba:	6878      	ldr	r0, [r7, #4]
 80011bc:	f7ff ffa2 	bl	8001104 <SysTick_Config>
 80011c0:	4603      	mov	r3, r0
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	3708      	adds	r7, #8
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
	...

080011cc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b084      	sub	sp, #16
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80011d4:	2300      	movs	r3, #0
 80011d6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80011de:	b2db      	uxtb	r3, r3
 80011e0:	2b02      	cmp	r3, #2
 80011e2:	d005      	beq.n	80011f0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	2204      	movs	r2, #4
 80011e8:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80011ea:	2301      	movs	r3, #1
 80011ec:	73fb      	strb	r3, [r7, #15]
 80011ee:	e051      	b.n	8001294 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	681a      	ldr	r2, [r3, #0]
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f022 020e 	bic.w	r2, r2, #14
 80011fe:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	681a      	ldr	r2, [r3, #0]
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f022 0201 	bic.w	r2, r2, #1
 800120e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4a22      	ldr	r2, [pc, #136]	; (80012a0 <HAL_DMA_Abort_IT+0xd4>)
 8001216:	4293      	cmp	r3, r2
 8001218:	d029      	beq.n	800126e <HAL_DMA_Abort_IT+0xa2>
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	4a21      	ldr	r2, [pc, #132]	; (80012a4 <HAL_DMA_Abort_IT+0xd8>)
 8001220:	4293      	cmp	r3, r2
 8001222:	d022      	beq.n	800126a <HAL_DMA_Abort_IT+0x9e>
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4a1f      	ldr	r2, [pc, #124]	; (80012a8 <HAL_DMA_Abort_IT+0xdc>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d01a      	beq.n	8001264 <HAL_DMA_Abort_IT+0x98>
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	4a1e      	ldr	r2, [pc, #120]	; (80012ac <HAL_DMA_Abort_IT+0xe0>)
 8001234:	4293      	cmp	r3, r2
 8001236:	d012      	beq.n	800125e <HAL_DMA_Abort_IT+0x92>
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a1c      	ldr	r2, [pc, #112]	; (80012b0 <HAL_DMA_Abort_IT+0xe4>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d00a      	beq.n	8001258 <HAL_DMA_Abort_IT+0x8c>
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	4a1b      	ldr	r2, [pc, #108]	; (80012b4 <HAL_DMA_Abort_IT+0xe8>)
 8001248:	4293      	cmp	r3, r2
 800124a:	d102      	bne.n	8001252 <HAL_DMA_Abort_IT+0x86>
 800124c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001250:	e00e      	b.n	8001270 <HAL_DMA_Abort_IT+0xa4>
 8001252:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001256:	e00b      	b.n	8001270 <HAL_DMA_Abort_IT+0xa4>
 8001258:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800125c:	e008      	b.n	8001270 <HAL_DMA_Abort_IT+0xa4>
 800125e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001262:	e005      	b.n	8001270 <HAL_DMA_Abort_IT+0xa4>
 8001264:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001268:	e002      	b.n	8001270 <HAL_DMA_Abort_IT+0xa4>
 800126a:	2310      	movs	r3, #16
 800126c:	e000      	b.n	8001270 <HAL_DMA_Abort_IT+0xa4>
 800126e:	2301      	movs	r3, #1
 8001270:	4a11      	ldr	r2, [pc, #68]	; (80012b8 <HAL_DMA_Abort_IT+0xec>)
 8001272:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	2201      	movs	r2, #1
 8001278:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	2200      	movs	r2, #0
 8001280:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001288:	2b00      	cmp	r3, #0
 800128a:	d003      	beq.n	8001294 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001290:	6878      	ldr	r0, [r7, #4]
 8001292:	4798      	blx	r3
    } 
  }
  return status;
 8001294:	7bfb      	ldrb	r3, [r7, #15]
}
 8001296:	4618      	mov	r0, r3
 8001298:	3710      	adds	r7, #16
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	40020008 	.word	0x40020008
 80012a4:	4002001c 	.word	0x4002001c
 80012a8:	40020030 	.word	0x40020030
 80012ac:	40020044 	.word	0x40020044
 80012b0:	40020058 	.word	0x40020058
 80012b4:	4002006c 	.word	0x4002006c
 80012b8:	40020000 	.word	0x40020000

080012bc <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80012bc:	b480      	push	{r7}
 80012be:	b083      	sub	sp, #12
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80012ca:	b2db      	uxtb	r3, r3
}
 80012cc:	4618      	mov	r0, r3
 80012ce:	370c      	adds	r7, #12
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bc80      	pop	{r7}
 80012d4:	4770      	bx	lr
	...

080012d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012d8:	b480      	push	{r7}
 80012da:	b08b      	sub	sp, #44	; 0x2c
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
 80012e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80012e2:	2300      	movs	r3, #0
 80012e4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80012e6:	2300      	movs	r3, #0
 80012e8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012ea:	e169      	b.n	80015c0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80012ec:	2201      	movs	r2, #1
 80012ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012f0:	fa02 f303 	lsl.w	r3, r2, r3
 80012f4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	69fa      	ldr	r2, [r7, #28]
 80012fc:	4013      	ands	r3, r2
 80012fe:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001300:	69ba      	ldr	r2, [r7, #24]
 8001302:	69fb      	ldr	r3, [r7, #28]
 8001304:	429a      	cmp	r2, r3
 8001306:	f040 8158 	bne.w	80015ba <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	4a9a      	ldr	r2, [pc, #616]	; (8001578 <HAL_GPIO_Init+0x2a0>)
 8001310:	4293      	cmp	r3, r2
 8001312:	d05e      	beq.n	80013d2 <HAL_GPIO_Init+0xfa>
 8001314:	4a98      	ldr	r2, [pc, #608]	; (8001578 <HAL_GPIO_Init+0x2a0>)
 8001316:	4293      	cmp	r3, r2
 8001318:	d875      	bhi.n	8001406 <HAL_GPIO_Init+0x12e>
 800131a:	4a98      	ldr	r2, [pc, #608]	; (800157c <HAL_GPIO_Init+0x2a4>)
 800131c:	4293      	cmp	r3, r2
 800131e:	d058      	beq.n	80013d2 <HAL_GPIO_Init+0xfa>
 8001320:	4a96      	ldr	r2, [pc, #600]	; (800157c <HAL_GPIO_Init+0x2a4>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d86f      	bhi.n	8001406 <HAL_GPIO_Init+0x12e>
 8001326:	4a96      	ldr	r2, [pc, #600]	; (8001580 <HAL_GPIO_Init+0x2a8>)
 8001328:	4293      	cmp	r3, r2
 800132a:	d052      	beq.n	80013d2 <HAL_GPIO_Init+0xfa>
 800132c:	4a94      	ldr	r2, [pc, #592]	; (8001580 <HAL_GPIO_Init+0x2a8>)
 800132e:	4293      	cmp	r3, r2
 8001330:	d869      	bhi.n	8001406 <HAL_GPIO_Init+0x12e>
 8001332:	4a94      	ldr	r2, [pc, #592]	; (8001584 <HAL_GPIO_Init+0x2ac>)
 8001334:	4293      	cmp	r3, r2
 8001336:	d04c      	beq.n	80013d2 <HAL_GPIO_Init+0xfa>
 8001338:	4a92      	ldr	r2, [pc, #584]	; (8001584 <HAL_GPIO_Init+0x2ac>)
 800133a:	4293      	cmp	r3, r2
 800133c:	d863      	bhi.n	8001406 <HAL_GPIO_Init+0x12e>
 800133e:	4a92      	ldr	r2, [pc, #584]	; (8001588 <HAL_GPIO_Init+0x2b0>)
 8001340:	4293      	cmp	r3, r2
 8001342:	d046      	beq.n	80013d2 <HAL_GPIO_Init+0xfa>
 8001344:	4a90      	ldr	r2, [pc, #576]	; (8001588 <HAL_GPIO_Init+0x2b0>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d85d      	bhi.n	8001406 <HAL_GPIO_Init+0x12e>
 800134a:	2b12      	cmp	r3, #18
 800134c:	d82a      	bhi.n	80013a4 <HAL_GPIO_Init+0xcc>
 800134e:	2b12      	cmp	r3, #18
 8001350:	d859      	bhi.n	8001406 <HAL_GPIO_Init+0x12e>
 8001352:	a201      	add	r2, pc, #4	; (adr r2, 8001358 <HAL_GPIO_Init+0x80>)
 8001354:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001358:	080013d3 	.word	0x080013d3
 800135c:	080013ad 	.word	0x080013ad
 8001360:	080013bf 	.word	0x080013bf
 8001364:	08001401 	.word	0x08001401
 8001368:	08001407 	.word	0x08001407
 800136c:	08001407 	.word	0x08001407
 8001370:	08001407 	.word	0x08001407
 8001374:	08001407 	.word	0x08001407
 8001378:	08001407 	.word	0x08001407
 800137c:	08001407 	.word	0x08001407
 8001380:	08001407 	.word	0x08001407
 8001384:	08001407 	.word	0x08001407
 8001388:	08001407 	.word	0x08001407
 800138c:	08001407 	.word	0x08001407
 8001390:	08001407 	.word	0x08001407
 8001394:	08001407 	.word	0x08001407
 8001398:	08001407 	.word	0x08001407
 800139c:	080013b5 	.word	0x080013b5
 80013a0:	080013c9 	.word	0x080013c9
 80013a4:	4a79      	ldr	r2, [pc, #484]	; (800158c <HAL_GPIO_Init+0x2b4>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d013      	beq.n	80013d2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80013aa:	e02c      	b.n	8001406 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	68db      	ldr	r3, [r3, #12]
 80013b0:	623b      	str	r3, [r7, #32]
          break;
 80013b2:	e029      	b.n	8001408 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	68db      	ldr	r3, [r3, #12]
 80013b8:	3304      	adds	r3, #4
 80013ba:	623b      	str	r3, [r7, #32]
          break;
 80013bc:	e024      	b.n	8001408 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	68db      	ldr	r3, [r3, #12]
 80013c2:	3308      	adds	r3, #8
 80013c4:	623b      	str	r3, [r7, #32]
          break;
 80013c6:	e01f      	b.n	8001408 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	68db      	ldr	r3, [r3, #12]
 80013cc:	330c      	adds	r3, #12
 80013ce:	623b      	str	r3, [r7, #32]
          break;
 80013d0:	e01a      	b.n	8001408 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	689b      	ldr	r3, [r3, #8]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d102      	bne.n	80013e0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80013da:	2304      	movs	r3, #4
 80013dc:	623b      	str	r3, [r7, #32]
          break;
 80013de:	e013      	b.n	8001408 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	689b      	ldr	r3, [r3, #8]
 80013e4:	2b01      	cmp	r3, #1
 80013e6:	d105      	bne.n	80013f4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80013e8:	2308      	movs	r3, #8
 80013ea:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	69fa      	ldr	r2, [r7, #28]
 80013f0:	611a      	str	r2, [r3, #16]
          break;
 80013f2:	e009      	b.n	8001408 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80013f4:	2308      	movs	r3, #8
 80013f6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	69fa      	ldr	r2, [r7, #28]
 80013fc:	615a      	str	r2, [r3, #20]
          break;
 80013fe:	e003      	b.n	8001408 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001400:	2300      	movs	r3, #0
 8001402:	623b      	str	r3, [r7, #32]
          break;
 8001404:	e000      	b.n	8001408 <HAL_GPIO_Init+0x130>
          break;
 8001406:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001408:	69bb      	ldr	r3, [r7, #24]
 800140a:	2bff      	cmp	r3, #255	; 0xff
 800140c:	d801      	bhi.n	8001412 <HAL_GPIO_Init+0x13a>
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	e001      	b.n	8001416 <HAL_GPIO_Init+0x13e>
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	3304      	adds	r3, #4
 8001416:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001418:	69bb      	ldr	r3, [r7, #24]
 800141a:	2bff      	cmp	r3, #255	; 0xff
 800141c:	d802      	bhi.n	8001424 <HAL_GPIO_Init+0x14c>
 800141e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001420:	009b      	lsls	r3, r3, #2
 8001422:	e002      	b.n	800142a <HAL_GPIO_Init+0x152>
 8001424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001426:	3b08      	subs	r3, #8
 8001428:	009b      	lsls	r3, r3, #2
 800142a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	681a      	ldr	r2, [r3, #0]
 8001430:	210f      	movs	r1, #15
 8001432:	693b      	ldr	r3, [r7, #16]
 8001434:	fa01 f303 	lsl.w	r3, r1, r3
 8001438:	43db      	mvns	r3, r3
 800143a:	401a      	ands	r2, r3
 800143c:	6a39      	ldr	r1, [r7, #32]
 800143e:	693b      	ldr	r3, [r7, #16]
 8001440:	fa01 f303 	lsl.w	r3, r1, r3
 8001444:	431a      	orrs	r2, r3
 8001446:	697b      	ldr	r3, [r7, #20]
 8001448:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001452:	2b00      	cmp	r3, #0
 8001454:	f000 80b1 	beq.w	80015ba <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001458:	4b4d      	ldr	r3, [pc, #308]	; (8001590 <HAL_GPIO_Init+0x2b8>)
 800145a:	699b      	ldr	r3, [r3, #24]
 800145c:	4a4c      	ldr	r2, [pc, #304]	; (8001590 <HAL_GPIO_Init+0x2b8>)
 800145e:	f043 0301 	orr.w	r3, r3, #1
 8001462:	6193      	str	r3, [r2, #24]
 8001464:	4b4a      	ldr	r3, [pc, #296]	; (8001590 <HAL_GPIO_Init+0x2b8>)
 8001466:	699b      	ldr	r3, [r3, #24]
 8001468:	f003 0301 	and.w	r3, r3, #1
 800146c:	60bb      	str	r3, [r7, #8]
 800146e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001470:	4a48      	ldr	r2, [pc, #288]	; (8001594 <HAL_GPIO_Init+0x2bc>)
 8001472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001474:	089b      	lsrs	r3, r3, #2
 8001476:	3302      	adds	r3, #2
 8001478:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800147c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800147e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001480:	f003 0303 	and.w	r3, r3, #3
 8001484:	009b      	lsls	r3, r3, #2
 8001486:	220f      	movs	r2, #15
 8001488:	fa02 f303 	lsl.w	r3, r2, r3
 800148c:	43db      	mvns	r3, r3
 800148e:	68fa      	ldr	r2, [r7, #12]
 8001490:	4013      	ands	r3, r2
 8001492:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	4a40      	ldr	r2, [pc, #256]	; (8001598 <HAL_GPIO_Init+0x2c0>)
 8001498:	4293      	cmp	r3, r2
 800149a:	d013      	beq.n	80014c4 <HAL_GPIO_Init+0x1ec>
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	4a3f      	ldr	r2, [pc, #252]	; (800159c <HAL_GPIO_Init+0x2c4>)
 80014a0:	4293      	cmp	r3, r2
 80014a2:	d00d      	beq.n	80014c0 <HAL_GPIO_Init+0x1e8>
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	4a3e      	ldr	r2, [pc, #248]	; (80015a0 <HAL_GPIO_Init+0x2c8>)
 80014a8:	4293      	cmp	r3, r2
 80014aa:	d007      	beq.n	80014bc <HAL_GPIO_Init+0x1e4>
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	4a3d      	ldr	r2, [pc, #244]	; (80015a4 <HAL_GPIO_Init+0x2cc>)
 80014b0:	4293      	cmp	r3, r2
 80014b2:	d101      	bne.n	80014b8 <HAL_GPIO_Init+0x1e0>
 80014b4:	2303      	movs	r3, #3
 80014b6:	e006      	b.n	80014c6 <HAL_GPIO_Init+0x1ee>
 80014b8:	2304      	movs	r3, #4
 80014ba:	e004      	b.n	80014c6 <HAL_GPIO_Init+0x1ee>
 80014bc:	2302      	movs	r3, #2
 80014be:	e002      	b.n	80014c6 <HAL_GPIO_Init+0x1ee>
 80014c0:	2301      	movs	r3, #1
 80014c2:	e000      	b.n	80014c6 <HAL_GPIO_Init+0x1ee>
 80014c4:	2300      	movs	r3, #0
 80014c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014c8:	f002 0203 	and.w	r2, r2, #3
 80014cc:	0092      	lsls	r2, r2, #2
 80014ce:	4093      	lsls	r3, r2
 80014d0:	68fa      	ldr	r2, [r7, #12]
 80014d2:	4313      	orrs	r3, r2
 80014d4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80014d6:	492f      	ldr	r1, [pc, #188]	; (8001594 <HAL_GPIO_Init+0x2bc>)
 80014d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014da:	089b      	lsrs	r3, r3, #2
 80014dc:	3302      	adds	r3, #2
 80014de:	68fa      	ldr	r2, [r7, #12]
 80014e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d006      	beq.n	80014fe <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80014f0:	4b2d      	ldr	r3, [pc, #180]	; (80015a8 <HAL_GPIO_Init+0x2d0>)
 80014f2:	689a      	ldr	r2, [r3, #8]
 80014f4:	492c      	ldr	r1, [pc, #176]	; (80015a8 <HAL_GPIO_Init+0x2d0>)
 80014f6:	69bb      	ldr	r3, [r7, #24]
 80014f8:	4313      	orrs	r3, r2
 80014fa:	608b      	str	r3, [r1, #8]
 80014fc:	e006      	b.n	800150c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80014fe:	4b2a      	ldr	r3, [pc, #168]	; (80015a8 <HAL_GPIO_Init+0x2d0>)
 8001500:	689a      	ldr	r2, [r3, #8]
 8001502:	69bb      	ldr	r3, [r7, #24]
 8001504:	43db      	mvns	r3, r3
 8001506:	4928      	ldr	r1, [pc, #160]	; (80015a8 <HAL_GPIO_Init+0x2d0>)
 8001508:	4013      	ands	r3, r2
 800150a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001514:	2b00      	cmp	r3, #0
 8001516:	d006      	beq.n	8001526 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001518:	4b23      	ldr	r3, [pc, #140]	; (80015a8 <HAL_GPIO_Init+0x2d0>)
 800151a:	68da      	ldr	r2, [r3, #12]
 800151c:	4922      	ldr	r1, [pc, #136]	; (80015a8 <HAL_GPIO_Init+0x2d0>)
 800151e:	69bb      	ldr	r3, [r7, #24]
 8001520:	4313      	orrs	r3, r2
 8001522:	60cb      	str	r3, [r1, #12]
 8001524:	e006      	b.n	8001534 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001526:	4b20      	ldr	r3, [pc, #128]	; (80015a8 <HAL_GPIO_Init+0x2d0>)
 8001528:	68da      	ldr	r2, [r3, #12]
 800152a:	69bb      	ldr	r3, [r7, #24]
 800152c:	43db      	mvns	r3, r3
 800152e:	491e      	ldr	r1, [pc, #120]	; (80015a8 <HAL_GPIO_Init+0x2d0>)
 8001530:	4013      	ands	r3, r2
 8001532:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800153c:	2b00      	cmp	r3, #0
 800153e:	d006      	beq.n	800154e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001540:	4b19      	ldr	r3, [pc, #100]	; (80015a8 <HAL_GPIO_Init+0x2d0>)
 8001542:	685a      	ldr	r2, [r3, #4]
 8001544:	4918      	ldr	r1, [pc, #96]	; (80015a8 <HAL_GPIO_Init+0x2d0>)
 8001546:	69bb      	ldr	r3, [r7, #24]
 8001548:	4313      	orrs	r3, r2
 800154a:	604b      	str	r3, [r1, #4]
 800154c:	e006      	b.n	800155c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800154e:	4b16      	ldr	r3, [pc, #88]	; (80015a8 <HAL_GPIO_Init+0x2d0>)
 8001550:	685a      	ldr	r2, [r3, #4]
 8001552:	69bb      	ldr	r3, [r7, #24]
 8001554:	43db      	mvns	r3, r3
 8001556:	4914      	ldr	r1, [pc, #80]	; (80015a8 <HAL_GPIO_Init+0x2d0>)
 8001558:	4013      	ands	r3, r2
 800155a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001564:	2b00      	cmp	r3, #0
 8001566:	d021      	beq.n	80015ac <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001568:	4b0f      	ldr	r3, [pc, #60]	; (80015a8 <HAL_GPIO_Init+0x2d0>)
 800156a:	681a      	ldr	r2, [r3, #0]
 800156c:	490e      	ldr	r1, [pc, #56]	; (80015a8 <HAL_GPIO_Init+0x2d0>)
 800156e:	69bb      	ldr	r3, [r7, #24]
 8001570:	4313      	orrs	r3, r2
 8001572:	600b      	str	r3, [r1, #0]
 8001574:	e021      	b.n	80015ba <HAL_GPIO_Init+0x2e2>
 8001576:	bf00      	nop
 8001578:	10320000 	.word	0x10320000
 800157c:	10310000 	.word	0x10310000
 8001580:	10220000 	.word	0x10220000
 8001584:	10210000 	.word	0x10210000
 8001588:	10120000 	.word	0x10120000
 800158c:	10110000 	.word	0x10110000
 8001590:	40021000 	.word	0x40021000
 8001594:	40010000 	.word	0x40010000
 8001598:	40010800 	.word	0x40010800
 800159c:	40010c00 	.word	0x40010c00
 80015a0:	40011000 	.word	0x40011000
 80015a4:	40011400 	.word	0x40011400
 80015a8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80015ac:	4b0b      	ldr	r3, [pc, #44]	; (80015dc <HAL_GPIO_Init+0x304>)
 80015ae:	681a      	ldr	r2, [r3, #0]
 80015b0:	69bb      	ldr	r3, [r7, #24]
 80015b2:	43db      	mvns	r3, r3
 80015b4:	4909      	ldr	r1, [pc, #36]	; (80015dc <HAL_GPIO_Init+0x304>)
 80015b6:	4013      	ands	r3, r2
 80015b8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80015ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015bc:	3301      	adds	r3, #1
 80015be:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	681a      	ldr	r2, [r3, #0]
 80015c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c6:	fa22 f303 	lsr.w	r3, r2, r3
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	f47f ae8e 	bne.w	80012ec <HAL_GPIO_Init+0x14>
  }
}
 80015d0:	bf00      	nop
 80015d2:	bf00      	nop
 80015d4:	372c      	adds	r7, #44	; 0x2c
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bc80      	pop	{r7}
 80015da:	4770      	bx	lr
 80015dc:	40010400 	.word	0x40010400

080015e0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b084      	sub	sp, #16
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d101      	bne.n	80015f2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80015ee:	2301      	movs	r3, #1
 80015f0:	e12b      	b.n	800184a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80015f8:	b2db      	uxtb	r3, r3
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d106      	bne.n	800160c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	2200      	movs	r2, #0
 8001602:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001606:	6878      	ldr	r0, [r7, #4]
 8001608:	f7ff fbba 	bl	8000d80 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	2224      	movs	r2, #36	; 0x24
 8001610:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	681a      	ldr	r2, [r3, #0]
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f022 0201 	bic.w	r2, r2, #1
 8001622:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	681a      	ldr	r2, [r3, #0]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001632:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	681a      	ldr	r2, [r3, #0]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001642:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001644:	f002 faac 	bl	8003ba0 <HAL_RCC_GetPCLK1Freq>
 8001648:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	4a81      	ldr	r2, [pc, #516]	; (8001854 <HAL_I2C_Init+0x274>)
 8001650:	4293      	cmp	r3, r2
 8001652:	d807      	bhi.n	8001664 <HAL_I2C_Init+0x84>
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	4a80      	ldr	r2, [pc, #512]	; (8001858 <HAL_I2C_Init+0x278>)
 8001658:	4293      	cmp	r3, r2
 800165a:	bf94      	ite	ls
 800165c:	2301      	movls	r3, #1
 800165e:	2300      	movhi	r3, #0
 8001660:	b2db      	uxtb	r3, r3
 8001662:	e006      	b.n	8001672 <HAL_I2C_Init+0x92>
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	4a7d      	ldr	r2, [pc, #500]	; (800185c <HAL_I2C_Init+0x27c>)
 8001668:	4293      	cmp	r3, r2
 800166a:	bf94      	ite	ls
 800166c:	2301      	movls	r3, #1
 800166e:	2300      	movhi	r3, #0
 8001670:	b2db      	uxtb	r3, r3
 8001672:	2b00      	cmp	r3, #0
 8001674:	d001      	beq.n	800167a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001676:	2301      	movs	r3, #1
 8001678:	e0e7      	b.n	800184a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	4a78      	ldr	r2, [pc, #480]	; (8001860 <HAL_I2C_Init+0x280>)
 800167e:	fba2 2303 	umull	r2, r3, r2, r3
 8001682:	0c9b      	lsrs	r3, r3, #18
 8001684:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	68ba      	ldr	r2, [r7, #8]
 8001696:	430a      	orrs	r2, r1
 8001698:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	6a1b      	ldr	r3, [r3, #32]
 80016a0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	4a6a      	ldr	r2, [pc, #424]	; (8001854 <HAL_I2C_Init+0x274>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d802      	bhi.n	80016b4 <HAL_I2C_Init+0xd4>
 80016ae:	68bb      	ldr	r3, [r7, #8]
 80016b0:	3301      	adds	r3, #1
 80016b2:	e009      	b.n	80016c8 <HAL_I2C_Init+0xe8>
 80016b4:	68bb      	ldr	r3, [r7, #8]
 80016b6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80016ba:	fb02 f303 	mul.w	r3, r2, r3
 80016be:	4a69      	ldr	r2, [pc, #420]	; (8001864 <HAL_I2C_Init+0x284>)
 80016c0:	fba2 2303 	umull	r2, r3, r2, r3
 80016c4:	099b      	lsrs	r3, r3, #6
 80016c6:	3301      	adds	r3, #1
 80016c8:	687a      	ldr	r2, [r7, #4]
 80016ca:	6812      	ldr	r2, [r2, #0]
 80016cc:	430b      	orrs	r3, r1
 80016ce:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	69db      	ldr	r3, [r3, #28]
 80016d6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80016da:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	495c      	ldr	r1, [pc, #368]	; (8001854 <HAL_I2C_Init+0x274>)
 80016e4:	428b      	cmp	r3, r1
 80016e6:	d819      	bhi.n	800171c <HAL_I2C_Init+0x13c>
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	1e59      	subs	r1, r3, #1
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	005b      	lsls	r3, r3, #1
 80016f2:	fbb1 f3f3 	udiv	r3, r1, r3
 80016f6:	1c59      	adds	r1, r3, #1
 80016f8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80016fc:	400b      	ands	r3, r1
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d00a      	beq.n	8001718 <HAL_I2C_Init+0x138>
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	1e59      	subs	r1, r3, #1
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	005b      	lsls	r3, r3, #1
 800170c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001710:	3301      	adds	r3, #1
 8001712:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001716:	e051      	b.n	80017bc <HAL_I2C_Init+0x1dc>
 8001718:	2304      	movs	r3, #4
 800171a:	e04f      	b.n	80017bc <HAL_I2C_Init+0x1dc>
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	689b      	ldr	r3, [r3, #8]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d111      	bne.n	8001748 <HAL_I2C_Init+0x168>
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	1e58      	subs	r0, r3, #1
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6859      	ldr	r1, [r3, #4]
 800172c:	460b      	mov	r3, r1
 800172e:	005b      	lsls	r3, r3, #1
 8001730:	440b      	add	r3, r1
 8001732:	fbb0 f3f3 	udiv	r3, r0, r3
 8001736:	3301      	adds	r3, #1
 8001738:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800173c:	2b00      	cmp	r3, #0
 800173e:	bf0c      	ite	eq
 8001740:	2301      	moveq	r3, #1
 8001742:	2300      	movne	r3, #0
 8001744:	b2db      	uxtb	r3, r3
 8001746:	e012      	b.n	800176e <HAL_I2C_Init+0x18e>
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	1e58      	subs	r0, r3, #1
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6859      	ldr	r1, [r3, #4]
 8001750:	460b      	mov	r3, r1
 8001752:	009b      	lsls	r3, r3, #2
 8001754:	440b      	add	r3, r1
 8001756:	0099      	lsls	r1, r3, #2
 8001758:	440b      	add	r3, r1
 800175a:	fbb0 f3f3 	udiv	r3, r0, r3
 800175e:	3301      	adds	r3, #1
 8001760:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001764:	2b00      	cmp	r3, #0
 8001766:	bf0c      	ite	eq
 8001768:	2301      	moveq	r3, #1
 800176a:	2300      	movne	r3, #0
 800176c:	b2db      	uxtb	r3, r3
 800176e:	2b00      	cmp	r3, #0
 8001770:	d001      	beq.n	8001776 <HAL_I2C_Init+0x196>
 8001772:	2301      	movs	r3, #1
 8001774:	e022      	b.n	80017bc <HAL_I2C_Init+0x1dc>
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	689b      	ldr	r3, [r3, #8]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d10e      	bne.n	800179c <HAL_I2C_Init+0x1bc>
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	1e58      	subs	r0, r3, #1
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6859      	ldr	r1, [r3, #4]
 8001786:	460b      	mov	r3, r1
 8001788:	005b      	lsls	r3, r3, #1
 800178a:	440b      	add	r3, r1
 800178c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001790:	3301      	adds	r3, #1
 8001792:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001796:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800179a:	e00f      	b.n	80017bc <HAL_I2C_Init+0x1dc>
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	1e58      	subs	r0, r3, #1
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6859      	ldr	r1, [r3, #4]
 80017a4:	460b      	mov	r3, r1
 80017a6:	009b      	lsls	r3, r3, #2
 80017a8:	440b      	add	r3, r1
 80017aa:	0099      	lsls	r1, r3, #2
 80017ac:	440b      	add	r3, r1
 80017ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80017b2:	3301      	adds	r3, #1
 80017b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017b8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80017bc:	6879      	ldr	r1, [r7, #4]
 80017be:	6809      	ldr	r1, [r1, #0]
 80017c0:	4313      	orrs	r3, r2
 80017c2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	69da      	ldr	r2, [r3, #28]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6a1b      	ldr	r3, [r3, #32]
 80017d6:	431a      	orrs	r2, r3
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	430a      	orrs	r2, r1
 80017de:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	689b      	ldr	r3, [r3, #8]
 80017e6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80017ea:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80017ee:	687a      	ldr	r2, [r7, #4]
 80017f0:	6911      	ldr	r1, [r2, #16]
 80017f2:	687a      	ldr	r2, [r7, #4]
 80017f4:	68d2      	ldr	r2, [r2, #12]
 80017f6:	4311      	orrs	r1, r2
 80017f8:	687a      	ldr	r2, [r7, #4]
 80017fa:	6812      	ldr	r2, [r2, #0]
 80017fc:	430b      	orrs	r3, r1
 80017fe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	68db      	ldr	r3, [r3, #12]
 8001806:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	695a      	ldr	r2, [r3, #20]
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	699b      	ldr	r3, [r3, #24]
 8001812:	431a      	orrs	r2, r3
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	430a      	orrs	r2, r1
 800181a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	681a      	ldr	r2, [r3, #0]
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f042 0201 	orr.w	r2, r2, #1
 800182a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	2200      	movs	r2, #0
 8001830:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2220      	movs	r2, #32
 8001836:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	2200      	movs	r2, #0
 800183e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2200      	movs	r2, #0
 8001844:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001848:	2300      	movs	r3, #0
}
 800184a:	4618      	mov	r0, r3
 800184c:	3710      	adds	r7, #16
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	000186a0 	.word	0x000186a0
 8001858:	001e847f 	.word	0x001e847f
 800185c:	003d08ff 	.word	0x003d08ff
 8001860:	431bde83 	.word	0x431bde83
 8001864:	10624dd3 	.word	0x10624dd3

08001868 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8001868:	b480      	push	{r7}
 800186a:	b083      	sub	sp, #12
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	695b      	ldr	r3, [r3, #20]
 8001876:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800187a:	2b80      	cmp	r3, #128	; 0x80
 800187c:	d103      	bne.n	8001886 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	2200      	movs	r2, #0
 8001884:	611a      	str	r2, [r3, #16]
  }
}
 8001886:	bf00      	nop
 8001888:	370c      	adds	r7, #12
 800188a:	46bd      	mov	sp, r7
 800188c:	bc80      	pop	{r7}
 800188e:	4770      	bx	lr

08001890 <HAL_I2C_Slave_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 8001890:	b480      	push	{r7}
 8001892:	b085      	sub	sp, #20
 8001894:	af00      	add	r7, sp, #0
 8001896:	60f8      	str	r0, [r7, #12]
 8001898:	60b9      	str	r1, [r7, #8]
 800189a:	4613      	mov	r3, r2
 800189c:	80fb      	strh	r3, [r7, #6]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80018a4:	b2db      	uxtb	r3, r3
 80018a6:	2b20      	cmp	r3, #32
 80018a8:	d158      	bne.n	800195c <HAL_I2C_Slave_Receive_IT+0xcc>
  {
    if ((pData == NULL) || (Size == 0U))
 80018aa:	68bb      	ldr	r3, [r7, #8]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d002      	beq.n	80018b6 <HAL_I2C_Slave_Receive_IT+0x26>
 80018b0:	88fb      	ldrh	r3, [r7, #6]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d101      	bne.n	80018ba <HAL_I2C_Slave_Receive_IT+0x2a>
    {
      return  HAL_ERROR;
 80018b6:	2301      	movs	r3, #1
 80018b8:	e051      	b.n	800195e <HAL_I2C_Slave_Receive_IT+0xce>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80018c0:	2b01      	cmp	r3, #1
 80018c2:	d101      	bne.n	80018c8 <HAL_I2C_Slave_Receive_IT+0x38>
 80018c4:	2302      	movs	r3, #2
 80018c6:	e04a      	b.n	800195e <HAL_I2C_Slave_Receive_IT+0xce>
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	2201      	movs	r2, #1
 80018cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f003 0301 	and.w	r3, r3, #1
 80018da:	2b01      	cmp	r3, #1
 80018dc:	d007      	beq.n	80018ee <HAL_I2C_Slave_Receive_IT+0x5e>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	681a      	ldr	r2, [r3, #0]
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f042 0201 	orr.w	r2, r2, #1
 80018ec:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	681a      	ldr	r2, [r3, #0]
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80018fc:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	2222      	movs	r2, #34	; 0x22
 8001902:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	2220      	movs	r2, #32
 800190a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	2200      	movs	r2, #0
 8001912:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	68ba      	ldr	r2, [r7, #8]
 8001918:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	88fa      	ldrh	r2, [r7, #6]
 800191e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001924:	b29a      	uxth	r2, r3
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	4a0e      	ldr	r2, [pc, #56]	; (8001968 <HAL_I2C_Slave_Receive_IT+0xd8>)
 800192e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	681a      	ldr	r2, [r3, #0]
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800193e:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	2200      	movs	r2, #0
 8001944:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	685a      	ldr	r2, [r3, #4]
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8001956:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8001958:	2300      	movs	r3, #0
 800195a:	e000      	b.n	800195e <HAL_I2C_Slave_Receive_IT+0xce>
  }
  else
  {
    return HAL_BUSY;
 800195c:	2302      	movs	r3, #2
  }
}
 800195e:	4618      	mov	r0, r3
 8001960:	3714      	adds	r7, #20
 8001962:	46bd      	mov	sp, r7
 8001964:	bc80      	pop	{r7}
 8001966:	4770      	bx	lr
 8001968:	ffff0000 	.word	0xffff0000

0800196c <HAL_I2C_Slave_Seq_Receive_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 800196c:	b480      	push	{r7}
 800196e:	b087      	sub	sp, #28
 8001970:	af00      	add	r7, sp, #0
 8001972:	60f8      	str	r0, [r7, #12]
 8001974:	60b9      	str	r1, [r7, #8]
 8001976:	603b      	str	r3, [r7, #0]
 8001978:	4613      	mov	r3, r2
 800197a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001982:	b2db      	uxtb	r3, r3
 8001984:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8001988:	2b28      	cmp	r3, #40	; 0x28
 800198a:	d15b      	bne.n	8001a44 <HAL_I2C_Slave_Seq_Receive_IT+0xd8>
  {
    if ((pData == NULL) || (Size == 0U))
 800198c:	68bb      	ldr	r3, [r7, #8]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d002      	beq.n	8001998 <HAL_I2C_Slave_Seq_Receive_IT+0x2c>
 8001992:	88fb      	ldrh	r3, [r7, #6]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d101      	bne.n	800199c <HAL_I2C_Slave_Seq_Receive_IT+0x30>
    {
      return  HAL_ERROR;
 8001998:	2301      	movs	r3, #1
 800199a:	e054      	b.n	8001a46 <HAL_I2C_Slave_Seq_Receive_IT+0xda>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80019a2:	2b01      	cmp	r3, #1
 80019a4:	d101      	bne.n	80019aa <HAL_I2C_Slave_Seq_Receive_IT+0x3e>
 80019a6:	2302      	movs	r3, #2
 80019a8:	e04d      	b.n	8001a46 <HAL_I2C_Slave_Seq_Receive_IT+0xda>
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	2201      	movs	r2, #1
 80019ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f003 0301 	and.w	r3, r3, #1
 80019bc:	2b01      	cmp	r3, #1
 80019be:	d007      	beq.n	80019d0 <HAL_I2C_Slave_Seq_Receive_IT+0x64>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	681a      	ldr	r2, [r3, #0]
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f042 0201 	orr.w	r2, r2, #1
 80019ce:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	681a      	ldr	r2, [r3, #0]
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80019de:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	222a      	movs	r2, #42	; 0x2a
 80019e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	2220      	movs	r2, #32
 80019ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	2200      	movs	r2, #0
 80019f4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	68ba      	ldr	r2, [r7, #8]
 80019fa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	88fa      	ldrh	r2, [r7, #6]
 8001a00:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a06:	b29a      	uxth	r2, r3
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	683a      	ldr	r2, [r7, #0]
 8001a10:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a12:	2300      	movs	r3, #0
 8001a14:	617b      	str	r3, [r7, #20]
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	695b      	ldr	r3, [r3, #20]
 8001a1c:	617b      	str	r3, [r7, #20]
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	699b      	ldr	r3, [r3, #24]
 8001a24:	617b      	str	r3, [r7, #20]
 8001a26:	697b      	ldr	r3, [r7, #20]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	685a      	ldr	r2, [r3, #4]
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8001a3e:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8001a40:	2300      	movs	r3, #0
 8001a42:	e000      	b.n	8001a46 <HAL_I2C_Slave_Seq_Receive_IT+0xda>
  }
  else
  {
    return HAL_BUSY;
 8001a44:	2302      	movs	r3, #2
  }
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	371c      	adds	r7, #28
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bc80      	pop	{r7}
 8001a4e:	4770      	bx	lr

08001a50 <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b083      	sub	sp, #12
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a5e:	b2db      	uxtb	r3, r3
 8001a60:	2b20      	cmp	r3, #32
 8001a62:	d124      	bne.n	8001aae <HAL_I2C_EnableListen_IT+0x5e>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2228      	movs	r2, #40	; 0x28
 8001a68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f003 0301 	and.w	r3, r3, #1
 8001a76:	2b01      	cmp	r3, #1
 8001a78:	d007      	beq.n	8001a8a <HAL_I2C_EnableListen_IT+0x3a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	681a      	ldr	r2, [r3, #0]
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f042 0201 	orr.w	r2, r2, #1
 8001a88:	601a      	str	r2, [r3, #0]
    }

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	681a      	ldr	r2, [r3, #0]
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001a98:	601a      	str	r2, [r3, #0]

    /* Enable EVT and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	685a      	ldr	r2, [r3, #4]
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8001aa8:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	e000      	b.n	8001ab0 <HAL_I2C_EnableListen_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8001aae:	2302      	movs	r3, #2
  }
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	370c      	adds	r7, #12
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bc80      	pop	{r7}
 8001ab8:	4770      	bx	lr

08001aba <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001aba:	b580      	push	{r7, lr}
 8001abc:	b088      	sub	sp, #32
 8001abe:	af00      	add	r7, sp, #0
 8001ac0:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ad2:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001ada:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ae2:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001ae4:	7bfb      	ldrb	r3, [r7, #15]
 8001ae6:	2b10      	cmp	r3, #16
 8001ae8:	d003      	beq.n	8001af2 <HAL_I2C_EV_IRQHandler+0x38>
 8001aea:	7bfb      	ldrb	r3, [r7, #15]
 8001aec:	2b40      	cmp	r3, #64	; 0x40
 8001aee:	f040 80b1 	bne.w	8001c54 <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	699b      	ldr	r3, [r3, #24]
 8001af8:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	695b      	ldr	r3, [r3, #20]
 8001b00:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8001b02:	69fb      	ldr	r3, [r7, #28]
 8001b04:	f003 0301 	and.w	r3, r3, #1
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d10d      	bne.n	8001b28 <HAL_I2C_EV_IRQHandler+0x6e>
 8001b0c:	693b      	ldr	r3, [r7, #16]
 8001b0e:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8001b12:	d003      	beq.n	8001b1c <HAL_I2C_EV_IRQHandler+0x62>
 8001b14:	693b      	ldr	r3, [r7, #16]
 8001b16:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8001b1a:	d101      	bne.n	8001b20 <HAL_I2C_EV_IRQHandler+0x66>
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	e000      	b.n	8001b22 <HAL_I2C_EV_IRQHandler+0x68>
 8001b20:	2300      	movs	r3, #0
 8001b22:	2b01      	cmp	r3, #1
 8001b24:	f000 8114 	beq.w	8001d50 <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001b28:	69fb      	ldr	r3, [r7, #28]
 8001b2a:	f003 0301 	and.w	r3, r3, #1
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d00b      	beq.n	8001b4a <HAL_I2C_EV_IRQHandler+0x90>
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d006      	beq.n	8001b4a <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8001b3c:	6878      	ldr	r0, [r7, #4]
 8001b3e:	f001 fc4b 	bl	80033d8 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8001b42:	6878      	ldr	r0, [r7, #4]
 8001b44:	f000 fd4a 	bl	80025dc <I2C_Master_SB>
 8001b48:	e083      	b.n	8001c52 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001b4a:	69fb      	ldr	r3, [r7, #28]
 8001b4c:	f003 0308 	and.w	r3, r3, #8
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d008      	beq.n	8001b66 <HAL_I2C_EV_IRQHandler+0xac>
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d003      	beq.n	8001b66 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 8001b5e:	6878      	ldr	r0, [r7, #4]
 8001b60:	f000 fdc1 	bl	80026e6 <I2C_Master_ADD10>
 8001b64:	e075      	b.n	8001c52 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001b66:	69fb      	ldr	r3, [r7, #28]
 8001b68:	f003 0302 	and.w	r3, r3, #2
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d008      	beq.n	8001b82 <HAL_I2C_EV_IRQHandler+0xc8>
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d003      	beq.n	8001b82 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 8001b7a:	6878      	ldr	r0, [r7, #4]
 8001b7c:	f000 fddc 	bl	8002738 <I2C_Master_ADDR>
 8001b80:	e067      	b.n	8001c52 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8001b82:	69bb      	ldr	r3, [r7, #24]
 8001b84:	f003 0304 	and.w	r3, r3, #4
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d036      	beq.n	8001bfa <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b96:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001b9a:	f000 80db 	beq.w	8001d54 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001b9e:	69fb      	ldr	r3, [r7, #28]
 8001ba0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d00d      	beq.n	8001bc4 <HAL_I2C_EV_IRQHandler+0x10a>
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d008      	beq.n	8001bc4 <HAL_I2C_EV_IRQHandler+0x10a>
 8001bb2:	69fb      	ldr	r3, [r7, #28]
 8001bb4:	f003 0304 	and.w	r3, r3, #4
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d103      	bne.n	8001bc4 <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8001bbc:	6878      	ldr	r0, [r7, #4]
 8001bbe:	f000 f9be 	bl	8001f3e <I2C_MasterTransmit_TXE>
 8001bc2:	e046      	b.n	8001c52 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001bc4:	69fb      	ldr	r3, [r7, #28]
 8001bc6:	f003 0304 	and.w	r3, r3, #4
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	f000 80c2 	beq.w	8001d54 <HAL_I2C_EV_IRQHandler+0x29a>
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	f000 80bc 	beq.w	8001d54 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8001bdc:	7bbb      	ldrb	r3, [r7, #14]
 8001bde:	2b21      	cmp	r3, #33	; 0x21
 8001be0:	d103      	bne.n	8001bea <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8001be2:	6878      	ldr	r0, [r7, #4]
 8001be4:	f000 fa47 	bl	8002076 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001be8:	e0b4      	b.n	8001d54 <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8001bea:	7bfb      	ldrb	r3, [r7, #15]
 8001bec:	2b40      	cmp	r3, #64	; 0x40
 8001bee:	f040 80b1 	bne.w	8001d54 <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8001bf2:	6878      	ldr	r0, [r7, #4]
 8001bf4:	f000 fab5 	bl	8002162 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001bf8:	e0ac      	b.n	8001d54 <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c04:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001c08:	f000 80a4 	beq.w	8001d54 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001c0c:	69fb      	ldr	r3, [r7, #28]
 8001c0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d00d      	beq.n	8001c32 <HAL_I2C_EV_IRQHandler+0x178>
 8001c16:	697b      	ldr	r3, [r7, #20]
 8001c18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d008      	beq.n	8001c32 <HAL_I2C_EV_IRQHandler+0x178>
 8001c20:	69fb      	ldr	r3, [r7, #28]
 8001c22:	f003 0304 	and.w	r3, r3, #4
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d103      	bne.n	8001c32 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8001c2a:	6878      	ldr	r0, [r7, #4]
 8001c2c:	f000 fb31 	bl	8002292 <I2C_MasterReceive_RXNE>
 8001c30:	e00f      	b.n	8001c52 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001c32:	69fb      	ldr	r3, [r7, #28]
 8001c34:	f003 0304 	and.w	r3, r3, #4
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	f000 808b 	beq.w	8001d54 <HAL_I2C_EV_IRQHandler+0x29a>
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	f000 8085 	beq.w	8001d54 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 8001c4a:	6878      	ldr	r0, [r7, #4]
 8001c4c:	f000 fbdc 	bl	8002408 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001c50:	e080      	b.n	8001d54 <HAL_I2C_EV_IRQHandler+0x29a>
 8001c52:	e07f      	b.n	8001d54 <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d004      	beq.n	8001c66 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	695b      	ldr	r3, [r3, #20]
 8001c62:	61fb      	str	r3, [r7, #28]
 8001c64:	e007      	b.n	8001c76 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	699b      	ldr	r3, [r3, #24]
 8001c6c:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	695b      	ldr	r3, [r3, #20]
 8001c74:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001c76:	69fb      	ldr	r3, [r7, #28]
 8001c78:	f003 0302 	and.w	r3, r3, #2
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d011      	beq.n	8001ca4 <HAL_I2C_EV_IRQHandler+0x1ea>
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d00c      	beq.n	8001ca4 <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d003      	beq.n	8001c9a <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	699b      	ldr	r3, [r3, #24]
 8001c98:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8001c9a:	69b9      	ldr	r1, [r7, #24]
 8001c9c:	6878      	ldr	r0, [r7, #4]
 8001c9e:	f000 ffa2 	bl	8002be6 <I2C_Slave_ADDR>
 8001ca2:	e05a      	b.n	8001d5a <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001ca4:	69fb      	ldr	r3, [r7, #28]
 8001ca6:	f003 0310 	and.w	r3, r3, #16
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d008      	beq.n	8001cc0 <HAL_I2C_EV_IRQHandler+0x206>
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d003      	beq.n	8001cc0 <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 8001cb8:	6878      	ldr	r0, [r7, #4]
 8001cba:	f000 ffdd 	bl	8002c78 <I2C_Slave_STOPF>
 8001cbe:	e04c      	b.n	8001d5a <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001cc0:	7bbb      	ldrb	r3, [r7, #14]
 8001cc2:	2b21      	cmp	r3, #33	; 0x21
 8001cc4:	d002      	beq.n	8001ccc <HAL_I2C_EV_IRQHandler+0x212>
 8001cc6:	7bbb      	ldrb	r3, [r7, #14]
 8001cc8:	2b29      	cmp	r3, #41	; 0x29
 8001cca:	d120      	bne.n	8001d0e <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001ccc:	69fb      	ldr	r3, [r7, #28]
 8001cce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d00d      	beq.n	8001cf2 <HAL_I2C_EV_IRQHandler+0x238>
 8001cd6:	697b      	ldr	r3, [r7, #20]
 8001cd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d008      	beq.n	8001cf2 <HAL_I2C_EV_IRQHandler+0x238>
 8001ce0:	69fb      	ldr	r3, [r7, #28]
 8001ce2:	f003 0304 	and.w	r3, r3, #4
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d103      	bne.n	8001cf2 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8001cea:	6878      	ldr	r0, [r7, #4]
 8001cec:	f000 febf 	bl	8002a6e <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001cf0:	e032      	b.n	8001d58 <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001cf2:	69fb      	ldr	r3, [r7, #28]
 8001cf4:	f003 0304 	and.w	r3, r3, #4
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d02d      	beq.n	8001d58 <HAL_I2C_EV_IRQHandler+0x29e>
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d028      	beq.n	8001d58 <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8001d06:	6878      	ldr	r0, [r7, #4]
 8001d08:	f000 feee 	bl	8002ae8 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001d0c:	e024      	b.n	8001d58 <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001d0e:	69fb      	ldr	r3, [r7, #28]
 8001d10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d00d      	beq.n	8001d34 <HAL_I2C_EV_IRQHandler+0x27a>
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d008      	beq.n	8001d34 <HAL_I2C_EV_IRQHandler+0x27a>
 8001d22:	69fb      	ldr	r3, [r7, #28]
 8001d24:	f003 0304 	and.w	r3, r3, #4
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d103      	bne.n	8001d34 <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8001d2c:	6878      	ldr	r0, [r7, #4]
 8001d2e:	f000 fefb 	bl	8002b28 <I2C_SlaveReceive_RXNE>
 8001d32:	e012      	b.n	8001d5a <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001d34:	69fb      	ldr	r3, [r7, #28]
 8001d36:	f003 0304 	and.w	r3, r3, #4
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d00d      	beq.n	8001d5a <HAL_I2C_EV_IRQHandler+0x2a0>
 8001d3e:	697b      	ldr	r3, [r7, #20]
 8001d40:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d008      	beq.n	8001d5a <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8001d48:	6878      	ldr	r0, [r7, #4]
 8001d4a:	f000 ff2b 	bl	8002ba4 <I2C_SlaveReceive_BTF>
 8001d4e:	e004      	b.n	8001d5a <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 8001d50:	bf00      	nop
 8001d52:	e002      	b.n	8001d5a <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001d54:	bf00      	nop
 8001d56:	e000      	b.n	8001d5a <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001d58:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8001d5a:	3720      	adds	r7, #32
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}

08001d60 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b08a      	sub	sp, #40	; 0x28
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	695b      	ldr	r3, [r3, #20]
 8001d6e:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001d82:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001d84:	6a3b      	ldr	r3, [r7, #32]
 8001d86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d015      	beq.n	8001dba <HAL_I2C_ER_IRQHandler+0x5a>
 8001d8e:	69fb      	ldr	r3, [r7, #28]
 8001d90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d010      	beq.n	8001dba <HAL_I2C_ER_IRQHandler+0x5a>
  {
    error |= HAL_I2C_ERROR_BERR;
 8001d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d9a:	f043 0301 	orr.w	r3, r3, #1
 8001d9e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8001da8:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	681a      	ldr	r2, [r3, #0]
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001db8:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001dba:	6a3b      	ldr	r3, [r7, #32]
 8001dbc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d00d      	beq.n	8001de0 <HAL_I2C_ER_IRQHandler+0x80>
 8001dc4:	69fb      	ldr	r3, [r7, #28]
 8001dc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d008      	beq.n	8001de0 <HAL_I2C_ER_IRQHandler+0x80>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8001dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd0:	f043 0302 	orr.w	r3, r3, #2
 8001dd4:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8001dde:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001de0:	6a3b      	ldr	r3, [r7, #32]
 8001de2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d03e      	beq.n	8001e68 <HAL_I2C_ER_IRQHandler+0x108>
 8001dea:	69fb      	ldr	r3, [r7, #28]
 8001dec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d039      	beq.n	8001e68 <HAL_I2C_ER_IRQHandler+0x108>
  {
    tmp1 = CurrentMode;
 8001df4:	7efb      	ldrb	r3, [r7, #27]
 8001df6:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dfc:	b29b      	uxth	r3, r3
 8001dfe:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e06:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0c:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8001e0e:	7ebb      	ldrb	r3, [r7, #26]
 8001e10:	2b20      	cmp	r3, #32
 8001e12:	d112      	bne.n	8001e3a <HAL_I2C_ER_IRQHandler+0xda>
 8001e14:	697b      	ldr	r3, [r7, #20]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d10f      	bne.n	8001e3a <HAL_I2C_ER_IRQHandler+0xda>
 8001e1a:	7cfb      	ldrb	r3, [r7, #19]
 8001e1c:	2b21      	cmp	r3, #33	; 0x21
 8001e1e:	d008      	beq.n	8001e32 <HAL_I2C_ER_IRQHandler+0xd2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8001e20:	7cfb      	ldrb	r3, [r7, #19]
 8001e22:	2b29      	cmp	r3, #41	; 0x29
 8001e24:	d005      	beq.n	8001e32 <HAL_I2C_ER_IRQHandler+0xd2>
 8001e26:	7cfb      	ldrb	r3, [r7, #19]
 8001e28:	2b28      	cmp	r3, #40	; 0x28
 8001e2a:	d106      	bne.n	8001e3a <HAL_I2C_ER_IRQHandler+0xda>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	2b21      	cmp	r3, #33	; 0x21
 8001e30:	d103      	bne.n	8001e3a <HAL_I2C_ER_IRQHandler+0xda>
    {
      I2C_Slave_AF(hi2c);
 8001e32:	6878      	ldr	r0, [r7, #4]
 8001e34:	f001 f850 	bl	8002ed8 <I2C_Slave_AF>
 8001e38:	e016      	b.n	8001e68 <HAL_I2C_ER_IRQHandler+0x108>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001e42:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8001e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e46:	f043 0304 	orr.w	r3, r3, #4
 8001e4a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001e4c:	7efb      	ldrb	r3, [r7, #27]
 8001e4e:	2b10      	cmp	r3, #16
 8001e50:	d002      	beq.n	8001e58 <HAL_I2C_ER_IRQHandler+0xf8>
 8001e52:	7efb      	ldrb	r3, [r7, #27]
 8001e54:	2b40      	cmp	r3, #64	; 0x40
 8001e56:	d107      	bne.n	8001e68 <HAL_I2C_ER_IRQHandler+0x108>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	681a      	ldr	r2, [r3, #0]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e66:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001e68:	6a3b      	ldr	r3, [r7, #32]
 8001e6a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d00d      	beq.n	8001e8e <HAL_I2C_ER_IRQHandler+0x12e>
 8001e72:	69fb      	ldr	r3, [r7, #28]
 8001e74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d008      	beq.n	8001e8e <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8001e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e7e:	f043 0308 	orr.w	r3, r3, #8
 8001e82:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8001e8c:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8001e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d008      	beq.n	8001ea6 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e9a:	431a      	orrs	r2, r3
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8001ea0:	6878      	ldr	r0, [r7, #4]
 8001ea2:	f001 f88d 	bl	8002fc0 <I2C_ITError>
  }
}
 8001ea6:	bf00      	nop
 8001ea8:	3728      	adds	r7, #40	; 0x28
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}

08001eae <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001eae:	b480      	push	{r7}
 8001eb0:	b083      	sub	sp, #12
 8001eb2:	af00      	add	r7, sp, #0
 8001eb4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8001eb6:	bf00      	nop
 8001eb8:	370c      	adds	r7, #12
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bc80      	pop	{r7}
 8001ebe:	4770      	bx	lr

08001ec0 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b083      	sub	sp, #12
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8001ec8:	bf00      	nop
 8001eca:	370c      	adds	r7, #12
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bc80      	pop	{r7}
 8001ed0:	4770      	bx	lr

08001ed2 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001ed2:	b480      	push	{r7}
 8001ed4:	b083      	sub	sp, #12
 8001ed6:	af00      	add	r7, sp, #0
 8001ed8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8001eda:	bf00      	nop
 8001edc:	370c      	adds	r7, #12
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bc80      	pop	{r7}
 8001ee2:	4770      	bx	lr

08001ee4 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b083      	sub	sp, #12
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8001eec:	bf00      	nop
 8001eee:	370c      	adds	r7, #12
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bc80      	pop	{r7}
 8001ef4:	4770      	bx	lr

08001ef6 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001ef6:	b480      	push	{r7}
 8001ef8:	b083      	sub	sp, #12
 8001efa:	af00      	add	r7, sp, #0
 8001efc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8001efe:	bf00      	nop
 8001f00:	370c      	adds	r7, #12
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bc80      	pop	{r7}
 8001f06:	4770      	bx	lr

08001f08 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b083      	sub	sp, #12
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8001f10:	bf00      	nop
 8001f12:	370c      	adds	r7, #12
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bc80      	pop	{r7}
 8001f18:	4770      	bx	lr

08001f1a <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8001f1a:	b480      	push	{r7}
 8001f1c:	b083      	sub	sp, #12
 8001f1e:	af00      	add	r7, sp, #0
 8001f20:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8001f22:	bf00      	nop
 8001f24:	370c      	adds	r7, #12
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bc80      	pop	{r7}
 8001f2a:	4770      	bx	lr

08001f2c <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b083      	sub	sp, #12
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8001f34:	bf00      	nop
 8001f36:	370c      	adds	r7, #12
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bc80      	pop	{r7}
 8001f3c:	4770      	bx	lr

08001f3e <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8001f3e:	b580      	push	{r7, lr}
 8001f40:	b084      	sub	sp, #16
 8001f42:	af00      	add	r7, sp, #0
 8001f44:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f4c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001f54:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f5a:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d150      	bne.n	8002006 <I2C_MasterTransmit_TXE+0xc8>
 8001f64:	7bfb      	ldrb	r3, [r7, #15]
 8001f66:	2b21      	cmp	r3, #33	; 0x21
 8001f68:	d14d      	bne.n	8002006 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001f6a:	68bb      	ldr	r3, [r7, #8]
 8001f6c:	2b08      	cmp	r3, #8
 8001f6e:	d01d      	beq.n	8001fac <I2C_MasterTransmit_TXE+0x6e>
 8001f70:	68bb      	ldr	r3, [r7, #8]
 8001f72:	2b20      	cmp	r3, #32
 8001f74:	d01a      	beq.n	8001fac <I2C_MasterTransmit_TXE+0x6e>
 8001f76:	68bb      	ldr	r3, [r7, #8]
 8001f78:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001f7c:	d016      	beq.n	8001fac <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	685a      	ldr	r2, [r3, #4]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001f8c:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2211      	movs	r2, #17
 8001f92:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2200      	movs	r2, #0
 8001f98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2220      	movs	r2, #32
 8001fa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8001fa4:	6878      	ldr	r0, [r7, #4]
 8001fa6:	f7ff ff82 	bl	8001eae <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001faa:	e060      	b.n	800206e <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	685a      	ldr	r2, [r3, #4]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001fba:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	681a      	ldr	r2, [r3, #0]
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fca:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2200      	movs	r2, #0
 8001fd0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2220      	movs	r2, #32
 8001fd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001fe0:	b2db      	uxtb	r3, r3
 8001fe2:	2b40      	cmp	r3, #64	; 0x40
 8001fe4:	d107      	bne.n	8001ff6 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2200      	movs	r2, #0
 8001fea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8001fee:	6878      	ldr	r0, [r7, #4]
 8001ff0:	f7ff ff81 	bl	8001ef6 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001ff4:	e03b      	b.n	800206e <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8001ffe:	6878      	ldr	r0, [r7, #4]
 8002000:	f7ff ff55 	bl	8001eae <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002004:	e033      	b.n	800206e <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8002006:	7bfb      	ldrb	r3, [r7, #15]
 8002008:	2b21      	cmp	r3, #33	; 0x21
 800200a:	d005      	beq.n	8002018 <I2C_MasterTransmit_TXE+0xda>
 800200c:	7bbb      	ldrb	r3, [r7, #14]
 800200e:	2b40      	cmp	r3, #64	; 0x40
 8002010:	d12d      	bne.n	800206e <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8002012:	7bfb      	ldrb	r3, [r7, #15]
 8002014:	2b22      	cmp	r3, #34	; 0x22
 8002016:	d12a      	bne.n	800206e <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800201c:	b29b      	uxth	r3, r3
 800201e:	2b00      	cmp	r3, #0
 8002020:	d108      	bne.n	8002034 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	685a      	ldr	r2, [r3, #4]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002030:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8002032:	e01c      	b.n	800206e <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800203a:	b2db      	uxtb	r3, r3
 800203c:	2b40      	cmp	r3, #64	; 0x40
 800203e:	d103      	bne.n	8002048 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002040:	6878      	ldr	r0, [r7, #4]
 8002042:	f000 f88e 	bl	8002162 <I2C_MemoryTransmit_TXE_BTF>
}
 8002046:	e012      	b.n	800206e <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800204c:	781a      	ldrb	r2, [r3, #0]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002058:	1c5a      	adds	r2, r3, #1
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002062:	b29b      	uxth	r3, r3
 8002064:	3b01      	subs	r3, #1
 8002066:	b29a      	uxth	r2, r3
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800206c:	e7ff      	b.n	800206e <I2C_MasterTransmit_TXE+0x130>
 800206e:	bf00      	nop
 8002070:	3710      	adds	r7, #16
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}

08002076 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002076:	b580      	push	{r7, lr}
 8002078:	b084      	sub	sp, #16
 800207a:	af00      	add	r7, sp, #0
 800207c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002082:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800208a:	b2db      	uxtb	r3, r3
 800208c:	2b21      	cmp	r3, #33	; 0x21
 800208e:	d164      	bne.n	800215a <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002094:	b29b      	uxth	r3, r3
 8002096:	2b00      	cmp	r3, #0
 8002098:	d012      	beq.n	80020c0 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800209e:	781a      	ldrb	r2, [r3, #0]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020aa:	1c5a      	adds	r2, r3, #1
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020b4:	b29b      	uxth	r3, r3
 80020b6:	3b01      	subs	r3, #1
 80020b8:	b29a      	uxth	r2, r3
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80020be:	e04c      	b.n	800215a <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	2b08      	cmp	r3, #8
 80020c4:	d01d      	beq.n	8002102 <I2C_MasterTransmit_BTF+0x8c>
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	2b20      	cmp	r3, #32
 80020ca:	d01a      	beq.n	8002102 <I2C_MasterTransmit_BTF+0x8c>
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80020d2:	d016      	beq.n	8002102 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	685a      	ldr	r2, [r3, #4]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80020e2:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2211      	movs	r2, #17
 80020e8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2200      	movs	r2, #0
 80020ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2220      	movs	r2, #32
 80020f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80020fa:	6878      	ldr	r0, [r7, #4]
 80020fc:	f7ff fed7 	bl	8001eae <HAL_I2C_MasterTxCpltCallback>
}
 8002100:	e02b      	b.n	800215a <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	685a      	ldr	r2, [r3, #4]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002110:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	681a      	ldr	r2, [r3, #0]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002120:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2200      	movs	r2, #0
 8002126:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2220      	movs	r2, #32
 800212c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002136:	b2db      	uxtb	r3, r3
 8002138:	2b40      	cmp	r3, #64	; 0x40
 800213a:	d107      	bne.n	800214c <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2200      	movs	r2, #0
 8002140:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8002144:	6878      	ldr	r0, [r7, #4]
 8002146:	f7ff fed6 	bl	8001ef6 <HAL_I2C_MemTxCpltCallback>
}
 800214a:	e006      	b.n	800215a <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2200      	movs	r2, #0
 8002150:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8002154:	6878      	ldr	r0, [r7, #4]
 8002156:	f7ff feaa 	bl	8001eae <HAL_I2C_MasterTxCpltCallback>
}
 800215a:	bf00      	nop
 800215c:	3710      	adds	r7, #16
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}

08002162 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8002162:	b580      	push	{r7, lr}
 8002164:	b084      	sub	sp, #16
 8002166:	af00      	add	r7, sp, #0
 8002168:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002170:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002176:	2b00      	cmp	r3, #0
 8002178:	d11d      	bne.n	80021b6 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800217e:	2b01      	cmp	r3, #1
 8002180:	d10b      	bne.n	800219a <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002186:	b2da      	uxtb	r2, r3
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002192:	1c9a      	adds	r2, r3, #2
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8002198:	e077      	b.n	800228a <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800219e:	b29b      	uxth	r3, r3
 80021a0:	121b      	asrs	r3, r3, #8
 80021a2:	b2da      	uxtb	r2, r3
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021ae:	1c5a      	adds	r2, r3, #1
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	651a      	str	r2, [r3, #80]	; 0x50
}
 80021b4:	e069      	b.n	800228a <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021ba:	2b01      	cmp	r3, #1
 80021bc:	d10b      	bne.n	80021d6 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021c2:	b2da      	uxtb	r2, r3
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021ce:	1c5a      	adds	r2, r3, #1
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	651a      	str	r2, [r3, #80]	; 0x50
}
 80021d4:	e059      	b.n	800228a <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021da:	2b02      	cmp	r3, #2
 80021dc:	d152      	bne.n	8002284 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80021de:	7bfb      	ldrb	r3, [r7, #15]
 80021e0:	2b22      	cmp	r3, #34	; 0x22
 80021e2:	d10d      	bne.n	8002200 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	681a      	ldr	r2, [r3, #0]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80021f2:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021f8:	1c5a      	adds	r2, r3, #1
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	651a      	str	r2, [r3, #80]	; 0x50
}
 80021fe:	e044      	b.n	800228a <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002204:	b29b      	uxth	r3, r3
 8002206:	2b00      	cmp	r3, #0
 8002208:	d015      	beq.n	8002236 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 800220a:	7bfb      	ldrb	r3, [r7, #15]
 800220c:	2b21      	cmp	r3, #33	; 0x21
 800220e:	d112      	bne.n	8002236 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002214:	781a      	ldrb	r2, [r3, #0]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002220:	1c5a      	adds	r2, r3, #1
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800222a:	b29b      	uxth	r3, r3
 800222c:	3b01      	subs	r3, #1
 800222e:	b29a      	uxth	r2, r3
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002234:	e029      	b.n	800228a <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800223a:	b29b      	uxth	r3, r3
 800223c:	2b00      	cmp	r3, #0
 800223e:	d124      	bne.n	800228a <I2C_MemoryTransmit_TXE_BTF+0x128>
 8002240:	7bfb      	ldrb	r3, [r7, #15]
 8002242:	2b21      	cmp	r3, #33	; 0x21
 8002244:	d121      	bne.n	800228a <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	685a      	ldr	r2, [r3, #4]
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002254:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	681a      	ldr	r2, [r3, #0]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002264:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2200      	movs	r2, #0
 800226a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2220      	movs	r2, #32
 8002270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2200      	movs	r2, #0
 8002278:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800227c:	6878      	ldr	r0, [r7, #4]
 800227e:	f7ff fe3a 	bl	8001ef6 <HAL_I2C_MemTxCpltCallback>
}
 8002282:	e002      	b.n	800228a <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8002284:	6878      	ldr	r0, [r7, #4]
 8002286:	f7ff faef 	bl	8001868 <I2C_Flush_DR>
}
 800228a:	bf00      	nop
 800228c:	3710      	adds	r7, #16
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}

08002292 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002292:	b580      	push	{r7, lr}
 8002294:	b084      	sub	sp, #16
 8002296:	af00      	add	r7, sp, #0
 8002298:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022a0:	b2db      	uxtb	r3, r3
 80022a2:	2b22      	cmp	r3, #34	; 0x22
 80022a4:	f040 80ac 	bne.w	8002400 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022ac:	b29b      	uxth	r3, r3
 80022ae:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	2b03      	cmp	r3, #3
 80022b4:	d921      	bls.n	80022fa <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	691a      	ldr	r2, [r3, #16]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c0:	b2d2      	uxtb	r2, r2
 80022c2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c8:	1c5a      	adds	r2, r3, #1
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022d2:	b29b      	uxth	r3, r3
 80022d4:	3b01      	subs	r3, #1
 80022d6:	b29a      	uxth	r2, r3
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022e0:	b29b      	uxth	r3, r3
 80022e2:	2b03      	cmp	r3, #3
 80022e4:	f040 808c 	bne.w	8002400 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	685a      	ldr	r2, [r3, #4]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022f6:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 80022f8:	e082      	b.n	8002400 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022fe:	2b02      	cmp	r3, #2
 8002300:	d075      	beq.n	80023ee <I2C_MasterReceive_RXNE+0x15c>
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	2b01      	cmp	r3, #1
 8002306:	d002      	beq.n	800230e <I2C_MasterReceive_RXNE+0x7c>
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d16f      	bne.n	80023ee <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800230e:	6878      	ldr	r0, [r7, #4]
 8002310:	f001 f830 	bl	8003374 <I2C_WaitOnSTOPRequestThroughIT>
 8002314:	4603      	mov	r3, r0
 8002316:	2b00      	cmp	r3, #0
 8002318:	d142      	bne.n	80023a0 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	681a      	ldr	r2, [r3, #0]
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002328:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	685a      	ldr	r2, [r3, #4]
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002338:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	691a      	ldr	r2, [r3, #16]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002344:	b2d2      	uxtb	r2, r2
 8002346:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800234c:	1c5a      	adds	r2, r3, #1
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002356:	b29b      	uxth	r3, r3
 8002358:	3b01      	subs	r3, #1
 800235a:	b29a      	uxth	r2, r3
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2220      	movs	r2, #32
 8002364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800236e:	b2db      	uxtb	r3, r3
 8002370:	2b40      	cmp	r3, #64	; 0x40
 8002372:	d10a      	bne.n	800238a <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2200      	movs	r2, #0
 8002378:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2200      	movs	r2, #0
 8002380:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8002382:	6878      	ldr	r0, [r7, #4]
 8002384:	f7ff fdc0 	bl	8001f08 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002388:	e03a      	b.n	8002400 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2200      	movs	r2, #0
 800238e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2212      	movs	r2, #18
 8002396:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8002398:	6878      	ldr	r0, [r7, #4]
 800239a:	f7ff fd91 	bl	8001ec0 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800239e:	e02f      	b.n	8002400 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	685a      	ldr	r2, [r3, #4]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80023ae:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	691a      	ldr	r2, [r3, #16]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ba:	b2d2      	uxtb	r2, r2
 80023bc:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c2:	1c5a      	adds	r2, r3, #1
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023cc:	b29b      	uxth	r3, r3
 80023ce:	3b01      	subs	r3, #1
 80023d0:	b29a      	uxth	r2, r3
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2220      	movs	r2, #32
 80023da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2200      	movs	r2, #0
 80023e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80023e6:	6878      	ldr	r0, [r7, #4]
 80023e8:	f7ff fd97 	bl	8001f1a <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80023ec:	e008      	b.n	8002400 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	685a      	ldr	r2, [r3, #4]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023fc:	605a      	str	r2, [r3, #4]
}
 80023fe:	e7ff      	b.n	8002400 <I2C_MasterReceive_RXNE+0x16e>
 8002400:	bf00      	nop
 8002402:	3710      	adds	r7, #16
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}

08002408 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b084      	sub	sp, #16
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002414:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800241a:	b29b      	uxth	r3, r3
 800241c:	2b04      	cmp	r3, #4
 800241e:	d11b      	bne.n	8002458 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	685a      	ldr	r2, [r3, #4]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800242e:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	691a      	ldr	r2, [r3, #16]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800243a:	b2d2      	uxtb	r2, r2
 800243c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002442:	1c5a      	adds	r2, r3, #1
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800244c:	b29b      	uxth	r3, r3
 800244e:	3b01      	subs	r3, #1
 8002450:	b29a      	uxth	r2, r3
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8002456:	e0bd      	b.n	80025d4 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800245c:	b29b      	uxth	r3, r3
 800245e:	2b03      	cmp	r3, #3
 8002460:	d129      	bne.n	80024b6 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	685a      	ldr	r2, [r3, #4]
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002470:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	2b04      	cmp	r3, #4
 8002476:	d00a      	beq.n	800248e <I2C_MasterReceive_BTF+0x86>
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	2b02      	cmp	r3, #2
 800247c:	d007      	beq.n	800248e <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	681a      	ldr	r2, [r3, #0]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800248c:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	691a      	ldr	r2, [r3, #16]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002498:	b2d2      	uxtb	r2, r2
 800249a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a0:	1c5a      	adds	r2, r3, #1
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024aa:	b29b      	uxth	r3, r3
 80024ac:	3b01      	subs	r3, #1
 80024ae:	b29a      	uxth	r2, r3
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80024b4:	e08e      	b.n	80025d4 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024ba:	b29b      	uxth	r3, r3
 80024bc:	2b02      	cmp	r3, #2
 80024be:	d176      	bne.n	80025ae <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	2b01      	cmp	r3, #1
 80024c4:	d002      	beq.n	80024cc <I2C_MasterReceive_BTF+0xc4>
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	2b10      	cmp	r3, #16
 80024ca:	d108      	bne.n	80024de <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	681a      	ldr	r2, [r3, #0]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024da:	601a      	str	r2, [r3, #0]
 80024dc:	e019      	b.n	8002512 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	2b04      	cmp	r3, #4
 80024e2:	d002      	beq.n	80024ea <I2C_MasterReceive_BTF+0xe2>
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	2b02      	cmp	r3, #2
 80024e8:	d108      	bne.n	80024fc <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	681a      	ldr	r2, [r3, #0]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80024f8:	601a      	str	r2, [r3, #0]
 80024fa:	e00a      	b.n	8002512 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	2b10      	cmp	r3, #16
 8002500:	d007      	beq.n	8002512 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	681a      	ldr	r2, [r3, #0]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002510:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	691a      	ldr	r2, [r3, #16]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800251c:	b2d2      	uxtb	r2, r2
 800251e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002524:	1c5a      	adds	r2, r3, #1
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800252e:	b29b      	uxth	r3, r3
 8002530:	3b01      	subs	r3, #1
 8002532:	b29a      	uxth	r2, r3
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	691a      	ldr	r2, [r3, #16]
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002542:	b2d2      	uxtb	r2, r2
 8002544:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800254a:	1c5a      	adds	r2, r3, #1
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002554:	b29b      	uxth	r3, r3
 8002556:	3b01      	subs	r3, #1
 8002558:	b29a      	uxth	r2, r3
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	685a      	ldr	r2, [r3, #4]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800256c:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2220      	movs	r2, #32
 8002572:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800257c:	b2db      	uxtb	r3, r3
 800257e:	2b40      	cmp	r3, #64	; 0x40
 8002580:	d10a      	bne.n	8002598 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2200      	movs	r2, #0
 8002586:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2200      	movs	r2, #0
 800258e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002590:	6878      	ldr	r0, [r7, #4]
 8002592:	f7ff fcb9 	bl	8001f08 <HAL_I2C_MemRxCpltCallback>
}
 8002596:	e01d      	b.n	80025d4 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2200      	movs	r2, #0
 800259c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2212      	movs	r2, #18
 80025a4:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80025a6:	6878      	ldr	r0, [r7, #4]
 80025a8:	f7ff fc8a 	bl	8001ec0 <HAL_I2C_MasterRxCpltCallback>
}
 80025ac:	e012      	b.n	80025d4 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	691a      	ldr	r2, [r3, #16]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025b8:	b2d2      	uxtb	r2, r2
 80025ba:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c0:	1c5a      	adds	r2, r3, #1
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025ca:	b29b      	uxth	r3, r3
 80025cc:	3b01      	subs	r3, #1
 80025ce:	b29a      	uxth	r2, r3
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80025d4:	bf00      	nop
 80025d6:	3710      	adds	r7, #16
 80025d8:	46bd      	mov	sp, r7
 80025da:	bd80      	pop	{r7, pc}

080025dc <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80025dc:	b480      	push	{r7}
 80025de:	b083      	sub	sp, #12
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80025ea:	b2db      	uxtb	r3, r3
 80025ec:	2b40      	cmp	r3, #64	; 0x40
 80025ee:	d117      	bne.n	8002620 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d109      	bne.n	800260c <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025fc:	b2db      	uxtb	r3, r3
 80025fe:	461a      	mov	r2, r3
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002608:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800260a:	e067      	b.n	80026dc <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002610:	b2db      	uxtb	r3, r3
 8002612:	f043 0301 	orr.w	r3, r3, #1
 8002616:	b2da      	uxtb	r2, r3
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	611a      	str	r2, [r3, #16]
}
 800261e:	e05d      	b.n	80026dc <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	691b      	ldr	r3, [r3, #16]
 8002624:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002628:	d133      	bne.n	8002692 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002630:	b2db      	uxtb	r3, r3
 8002632:	2b21      	cmp	r3, #33	; 0x21
 8002634:	d109      	bne.n	800264a <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800263a:	b2db      	uxtb	r3, r3
 800263c:	461a      	mov	r2, r3
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002646:	611a      	str	r2, [r3, #16]
 8002648:	e008      	b.n	800265c <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800264e:	b2db      	uxtb	r3, r3
 8002650:	f043 0301 	orr.w	r3, r3, #1
 8002654:	b2da      	uxtb	r2, r3
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002660:	2b00      	cmp	r3, #0
 8002662:	d004      	beq.n	800266e <I2C_Master_SB+0x92>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002668:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800266a:	2b00      	cmp	r3, #0
 800266c:	d108      	bne.n	8002680 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002672:	2b00      	cmp	r3, #0
 8002674:	d032      	beq.n	80026dc <I2C_Master_SB+0x100>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800267a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800267c:	2b00      	cmp	r3, #0
 800267e:	d02d      	beq.n	80026dc <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	685a      	ldr	r2, [r3, #4]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800268e:	605a      	str	r2, [r3, #4]
}
 8002690:	e024      	b.n	80026dc <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002696:	2b00      	cmp	r3, #0
 8002698:	d10e      	bne.n	80026b8 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800269e:	b29b      	uxth	r3, r3
 80026a0:	11db      	asrs	r3, r3, #7
 80026a2:	b2db      	uxtb	r3, r3
 80026a4:	f003 0306 	and.w	r3, r3, #6
 80026a8:	b2db      	uxtb	r3, r3
 80026aa:	f063 030f 	orn	r3, r3, #15
 80026ae:	b2da      	uxtb	r2, r3
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	611a      	str	r2, [r3, #16]
}
 80026b6:	e011      	b.n	80026dc <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026bc:	2b01      	cmp	r3, #1
 80026be:	d10d      	bne.n	80026dc <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026c4:	b29b      	uxth	r3, r3
 80026c6:	11db      	asrs	r3, r3, #7
 80026c8:	b2db      	uxtb	r3, r3
 80026ca:	f003 0306 	and.w	r3, r3, #6
 80026ce:	b2db      	uxtb	r3, r3
 80026d0:	f063 030e 	orn	r3, r3, #14
 80026d4:	b2da      	uxtb	r2, r3
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	611a      	str	r2, [r3, #16]
}
 80026dc:	bf00      	nop
 80026de:	370c      	adds	r7, #12
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bc80      	pop	{r7}
 80026e4:	4770      	bx	lr

080026e6 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80026e6:	b480      	push	{r7}
 80026e8:	b083      	sub	sp, #12
 80026ea:	af00      	add	r7, sp, #0
 80026ec:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026f2:	b2da      	uxtb	r2, r3
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d004      	beq.n	800270c <I2C_Master_ADD10+0x26>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002706:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002708:	2b00      	cmp	r3, #0
 800270a:	d108      	bne.n	800271e <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002710:	2b00      	cmp	r3, #0
 8002712:	d00c      	beq.n	800272e <I2C_Master_ADD10+0x48>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002718:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800271a:	2b00      	cmp	r3, #0
 800271c:	d007      	beq.n	800272e <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	685a      	ldr	r2, [r3, #4]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800272c:	605a      	str	r2, [r3, #4]
  }
}
 800272e:	bf00      	nop
 8002730:	370c      	adds	r7, #12
 8002732:	46bd      	mov	sp, r7
 8002734:	bc80      	pop	{r7}
 8002736:	4770      	bx	lr

08002738 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8002738:	b480      	push	{r7}
 800273a:	b091      	sub	sp, #68	; 0x44
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002746:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800274e:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002754:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800275c:	b2db      	uxtb	r3, r3
 800275e:	2b22      	cmp	r3, #34	; 0x22
 8002760:	f040 8174 	bne.w	8002a4c <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002768:	2b00      	cmp	r3, #0
 800276a:	d10f      	bne.n	800278c <I2C_Master_ADDR+0x54>
 800276c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002770:	2b40      	cmp	r3, #64	; 0x40
 8002772:	d10b      	bne.n	800278c <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002774:	2300      	movs	r3, #0
 8002776:	633b      	str	r3, [r7, #48]	; 0x30
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	695b      	ldr	r3, [r3, #20]
 800277e:	633b      	str	r3, [r7, #48]	; 0x30
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	699b      	ldr	r3, [r3, #24]
 8002786:	633b      	str	r3, [r7, #48]	; 0x30
 8002788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800278a:	e16b      	b.n	8002a64 <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002790:	2b00      	cmp	r3, #0
 8002792:	d11d      	bne.n	80027d0 <I2C_Master_ADDR+0x98>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	691b      	ldr	r3, [r3, #16]
 8002798:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800279c:	d118      	bne.n	80027d0 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800279e:	2300      	movs	r3, #0
 80027a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	695b      	ldr	r3, [r3, #20]
 80027a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	699b      	ldr	r3, [r3, #24]
 80027b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80027b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	681a      	ldr	r2, [r3, #0]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80027c2:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027c8:	1c5a      	adds	r2, r3, #1
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	651a      	str	r2, [r3, #80]	; 0x50
 80027ce:	e149      	b.n	8002a64 <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027d4:	b29b      	uxth	r3, r3
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d113      	bne.n	8002802 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027da:	2300      	movs	r3, #0
 80027dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	695b      	ldr	r3, [r3, #20]
 80027e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	699b      	ldr	r3, [r3, #24]
 80027ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80027ee:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	681a      	ldr	r2, [r3, #0]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027fe:	601a      	str	r2, [r3, #0]
 8002800:	e120      	b.n	8002a44 <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002806:	b29b      	uxth	r3, r3
 8002808:	2b01      	cmp	r3, #1
 800280a:	f040 808a 	bne.w	8002922 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800280e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002810:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002814:	d137      	bne.n	8002886 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	681a      	ldr	r2, [r3, #0]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002824:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002830:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002834:	d113      	bne.n	800285e <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	681a      	ldr	r2, [r3, #0]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002844:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002846:	2300      	movs	r3, #0
 8002848:	627b      	str	r3, [r7, #36]	; 0x24
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	695b      	ldr	r3, [r3, #20]
 8002850:	627b      	str	r3, [r7, #36]	; 0x24
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	699b      	ldr	r3, [r3, #24]
 8002858:	627b      	str	r3, [r7, #36]	; 0x24
 800285a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800285c:	e0f2      	b.n	8002a44 <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800285e:	2300      	movs	r3, #0
 8002860:	623b      	str	r3, [r7, #32]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	695b      	ldr	r3, [r3, #20]
 8002868:	623b      	str	r3, [r7, #32]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	699b      	ldr	r3, [r3, #24]
 8002870:	623b      	str	r3, [r7, #32]
 8002872:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	681a      	ldr	r2, [r3, #0]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002882:	601a      	str	r2, [r3, #0]
 8002884:	e0de      	b.n	8002a44 <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8002886:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002888:	2b08      	cmp	r3, #8
 800288a:	d02e      	beq.n	80028ea <I2C_Master_ADDR+0x1b2>
 800288c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800288e:	2b20      	cmp	r3, #32
 8002890:	d02b      	beq.n	80028ea <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8002892:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002894:	2b12      	cmp	r3, #18
 8002896:	d102      	bne.n	800289e <I2C_Master_ADDR+0x166>
 8002898:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800289a:	2b01      	cmp	r3, #1
 800289c:	d125      	bne.n	80028ea <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800289e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028a0:	2b04      	cmp	r3, #4
 80028a2:	d00e      	beq.n	80028c2 <I2C_Master_ADDR+0x18a>
 80028a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028a6:	2b02      	cmp	r3, #2
 80028a8:	d00b      	beq.n	80028c2 <I2C_Master_ADDR+0x18a>
 80028aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028ac:	2b10      	cmp	r3, #16
 80028ae:	d008      	beq.n	80028c2 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	681a      	ldr	r2, [r3, #0]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028be:	601a      	str	r2, [r3, #0]
 80028c0:	e007      	b.n	80028d2 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	681a      	ldr	r2, [r3, #0]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80028d0:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028d2:	2300      	movs	r3, #0
 80028d4:	61fb      	str	r3, [r7, #28]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	695b      	ldr	r3, [r3, #20]
 80028dc:	61fb      	str	r3, [r7, #28]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	699b      	ldr	r3, [r3, #24]
 80028e4:	61fb      	str	r3, [r7, #28]
 80028e6:	69fb      	ldr	r3, [r7, #28]
 80028e8:	e0ac      	b.n	8002a44 <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	681a      	ldr	r2, [r3, #0]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028f8:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028fa:	2300      	movs	r3, #0
 80028fc:	61bb      	str	r3, [r7, #24]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	695b      	ldr	r3, [r3, #20]
 8002904:	61bb      	str	r3, [r7, #24]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	699b      	ldr	r3, [r3, #24]
 800290c:	61bb      	str	r3, [r7, #24]
 800290e:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	681a      	ldr	r2, [r3, #0]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800291e:	601a      	str	r2, [r3, #0]
 8002920:	e090      	b.n	8002a44 <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002926:	b29b      	uxth	r3, r3
 8002928:	2b02      	cmp	r3, #2
 800292a:	d158      	bne.n	80029de <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800292c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800292e:	2b04      	cmp	r3, #4
 8002930:	d021      	beq.n	8002976 <I2C_Master_ADDR+0x23e>
 8002932:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002934:	2b02      	cmp	r3, #2
 8002936:	d01e      	beq.n	8002976 <I2C_Master_ADDR+0x23e>
 8002938:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800293a:	2b10      	cmp	r3, #16
 800293c:	d01b      	beq.n	8002976 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	681a      	ldr	r2, [r3, #0]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800294c:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800294e:	2300      	movs	r3, #0
 8002950:	617b      	str	r3, [r7, #20]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	695b      	ldr	r3, [r3, #20]
 8002958:	617b      	str	r3, [r7, #20]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	699b      	ldr	r3, [r3, #24]
 8002960:	617b      	str	r3, [r7, #20]
 8002962:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	681a      	ldr	r2, [r3, #0]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002972:	601a      	str	r2, [r3, #0]
 8002974:	e012      	b.n	800299c <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	681a      	ldr	r2, [r3, #0]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002984:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002986:	2300      	movs	r3, #0
 8002988:	613b      	str	r3, [r7, #16]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	695b      	ldr	r3, [r3, #20]
 8002990:	613b      	str	r3, [r7, #16]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	699b      	ldr	r3, [r3, #24]
 8002998:	613b      	str	r3, [r7, #16]
 800299a:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80029a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80029aa:	d14b      	bne.n	8002a44 <I2C_Master_ADDR+0x30c>
 80029ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029ae:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80029b2:	d00b      	beq.n	80029cc <I2C_Master_ADDR+0x294>
 80029b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029b6:	2b01      	cmp	r3, #1
 80029b8:	d008      	beq.n	80029cc <I2C_Master_ADDR+0x294>
 80029ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029bc:	2b08      	cmp	r3, #8
 80029be:	d005      	beq.n	80029cc <I2C_Master_ADDR+0x294>
 80029c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029c2:	2b10      	cmp	r3, #16
 80029c4:	d002      	beq.n	80029cc <I2C_Master_ADDR+0x294>
 80029c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029c8:	2b20      	cmp	r3, #32
 80029ca:	d13b      	bne.n	8002a44 <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	685a      	ldr	r2, [r3, #4]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80029da:	605a      	str	r2, [r3, #4]
 80029dc:	e032      	b.n	8002a44 <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	681a      	ldr	r2, [r3, #0]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80029ec:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80029f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80029fc:	d117      	bne.n	8002a2e <I2C_Master_ADDR+0x2f6>
 80029fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a00:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002a04:	d00b      	beq.n	8002a1e <I2C_Master_ADDR+0x2e6>
 8002a06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a08:	2b01      	cmp	r3, #1
 8002a0a:	d008      	beq.n	8002a1e <I2C_Master_ADDR+0x2e6>
 8002a0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a0e:	2b08      	cmp	r3, #8
 8002a10:	d005      	beq.n	8002a1e <I2C_Master_ADDR+0x2e6>
 8002a12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a14:	2b10      	cmp	r3, #16
 8002a16:	d002      	beq.n	8002a1e <I2C_Master_ADDR+0x2e6>
 8002a18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a1a:	2b20      	cmp	r3, #32
 8002a1c:	d107      	bne.n	8002a2e <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	685a      	ldr	r2, [r3, #4]
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002a2c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a2e:	2300      	movs	r3, #0
 8002a30:	60fb      	str	r3, [r7, #12]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	695b      	ldr	r3, [r3, #20]
 8002a38:	60fb      	str	r3, [r7, #12]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	699b      	ldr	r3, [r3, #24]
 8002a40:	60fb      	str	r3, [r7, #12]
 8002a42:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2200      	movs	r2, #0
 8002a48:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8002a4a:	e00b      	b.n	8002a64 <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	60bb      	str	r3, [r7, #8]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	695b      	ldr	r3, [r3, #20]
 8002a56:	60bb      	str	r3, [r7, #8]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	699b      	ldr	r3, [r3, #24]
 8002a5e:	60bb      	str	r3, [r7, #8]
 8002a60:	68bb      	ldr	r3, [r7, #8]
}
 8002a62:	e7ff      	b.n	8002a64 <I2C_Master_ADDR+0x32c>
 8002a64:	bf00      	nop
 8002a66:	3744      	adds	r7, #68	; 0x44
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bc80      	pop	{r7}
 8002a6c:	4770      	bx	lr

08002a6e <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002a6e:	b580      	push	{r7, lr}
 8002a70:	b084      	sub	sp, #16
 8002a72:	af00      	add	r7, sp, #0
 8002a74:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a7c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a82:	b29b      	uxth	r3, r3
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d02b      	beq.n	8002ae0 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a8c:	781a      	ldrb	r2, [r3, #0]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a98:	1c5a      	adds	r2, r3, #1
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002aa2:	b29b      	uxth	r3, r3
 8002aa4:	3b01      	subs	r3, #1
 8002aa6:	b29a      	uxth	r2, r3
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ab0:	b29b      	uxth	r3, r3
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d114      	bne.n	8002ae0 <I2C_SlaveTransmit_TXE+0x72>
 8002ab6:	7bfb      	ldrb	r3, [r7, #15]
 8002ab8:	2b29      	cmp	r3, #41	; 0x29
 8002aba:	d111      	bne.n	8002ae0 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	685a      	ldr	r2, [r3, #4]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002aca:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2221      	movs	r2, #33	; 0x21
 8002ad0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2228      	movs	r2, #40	; 0x28
 8002ad6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002ada:	6878      	ldr	r0, [r7, #4]
 8002adc:	f7ff f9f9 	bl	8001ed2 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002ae0:	bf00      	nop
 8002ae2:	3710      	adds	r7, #16
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bd80      	pop	{r7, pc}

08002ae8 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b083      	sub	sp, #12
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002af4:	b29b      	uxth	r3, r3
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d011      	beq.n	8002b1e <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002afe:	781a      	ldrb	r2, [r3, #0]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b0a:	1c5a      	adds	r2, r3, #1
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b14:	b29b      	uxth	r3, r3
 8002b16:	3b01      	subs	r3, #1
 8002b18:	b29a      	uxth	r2, r3
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8002b1e:	bf00      	nop
 8002b20:	370c      	adds	r7, #12
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bc80      	pop	{r7}
 8002b26:	4770      	bx	lr

08002b28 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b084      	sub	sp, #16
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b36:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b3c:	b29b      	uxth	r3, r3
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d02c      	beq.n	8002b9c <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	691a      	ldr	r2, [r3, #16]
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b4c:	b2d2      	uxtb	r2, r2
 8002b4e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b54:	1c5a      	adds	r2, r3, #1
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b5e:	b29b      	uxth	r3, r3
 8002b60:	3b01      	subs	r3, #1
 8002b62:	b29a      	uxth	r2, r3
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b6c:	b29b      	uxth	r3, r3
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d114      	bne.n	8002b9c <I2C_SlaveReceive_RXNE+0x74>
 8002b72:	7bfb      	ldrb	r3, [r7, #15]
 8002b74:	2b2a      	cmp	r3, #42	; 0x2a
 8002b76:	d111      	bne.n	8002b9c <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	685a      	ldr	r2, [r3, #4]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b86:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2222      	movs	r2, #34	; 0x22
 8002b8c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2228      	movs	r2, #40	; 0x28
 8002b92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002b96:	6878      	ldr	r0, [r7, #4]
 8002b98:	f7fd ff84 	bl	8000aa4 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002b9c:	bf00      	nop
 8002b9e:	3710      	adds	r7, #16
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bd80      	pop	{r7, pc}

08002ba4 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b083      	sub	sp, #12
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bb0:	b29b      	uxth	r3, r3
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d012      	beq.n	8002bdc <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	691a      	ldr	r2, [r3, #16]
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc0:	b2d2      	uxtb	r2, r2
 8002bc2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc8:	1c5a      	adds	r2, r3, #1
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bd2:	b29b      	uxth	r3, r3
 8002bd4:	3b01      	subs	r3, #1
 8002bd6:	b29a      	uxth	r2, r3
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8002bdc:	bf00      	nop
 8002bde:	370c      	adds	r7, #12
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bc80      	pop	{r7}
 8002be4:	4770      	bx	lr

08002be6 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8002be6:	b580      	push	{r7, lr}
 8002be8:	b084      	sub	sp, #16
 8002bea:	af00      	add	r7, sp, #0
 8002bec:	6078      	str	r0, [r7, #4]
 8002bee:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bfa:	b2db      	uxtb	r3, r3
 8002bfc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002c00:	2b28      	cmp	r3, #40	; 0x28
 8002c02:	d125      	bne.n	8002c50 <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	685a      	ldr	r2, [r3, #4]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c12:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	f003 0304 	and.w	r3, r3, #4
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d101      	bne.n	8002c22 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d103      	bne.n	8002c34 <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	68db      	ldr	r3, [r3, #12]
 8002c30:	81bb      	strh	r3, [r7, #12]
 8002c32:	e002      	b.n	8002c3a <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	699b      	ldr	r3, [r3, #24]
 8002c38:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8002c42:	89ba      	ldrh	r2, [r7, #12]
 8002c44:	7bfb      	ldrb	r3, [r7, #15]
 8002c46:	4619      	mov	r1, r3
 8002c48:	6878      	ldr	r0, [r7, #4]
 8002c4a:	f7fd ff9f 	bl	8000b8c <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002c4e:	e00e      	b.n	8002c6e <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c50:	2300      	movs	r3, #0
 8002c52:	60bb      	str	r3, [r7, #8]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	695b      	ldr	r3, [r3, #20]
 8002c5a:	60bb      	str	r3, [r7, #8]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	699b      	ldr	r3, [r3, #24]
 8002c62:	60bb      	str	r3, [r7, #8]
 8002c64:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8002c6e:	bf00      	nop
 8002c70:	3710      	adds	r7, #16
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}
	...

08002c78 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b084      	sub	sp, #16
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c86:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	685a      	ldr	r2, [r3, #4]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002c96:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8002c98:	2300      	movs	r3, #0
 8002c9a:	60bb      	str	r3, [r7, #8]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	695b      	ldr	r3, [r3, #20]
 8002ca2:	60bb      	str	r3, [r7, #8]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	681a      	ldr	r2, [r3, #0]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f042 0201 	orr.w	r2, r2, #1
 8002cb2:	601a      	str	r2, [r3, #0]
 8002cb4:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	681a      	ldr	r2, [r3, #0]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002cc4:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002cd0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002cd4:	d172      	bne.n	8002dbc <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002cd6:	7bfb      	ldrb	r3, [r7, #15]
 8002cd8:	2b22      	cmp	r3, #34	; 0x22
 8002cda:	d002      	beq.n	8002ce2 <I2C_Slave_STOPF+0x6a>
 8002cdc:	7bfb      	ldrb	r3, [r7, #15]
 8002cde:	2b2a      	cmp	r3, #42	; 0x2a
 8002ce0:	d135      	bne.n	8002d4e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	b29a      	uxth	r2, r3
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cf4:	b29b      	uxth	r3, r3
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d005      	beq.n	8002d06 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cfe:	f043 0204 	orr.w	r2, r3, #4
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	685a      	ldr	r2, [r3, #4]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d14:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f7fe face 	bl	80012bc <HAL_DMA_GetState>
 8002d20:	4603      	mov	r3, r0
 8002d22:	2b01      	cmp	r3, #1
 8002d24:	d049      	beq.n	8002dba <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d2a:	4a69      	ldr	r2, [pc, #420]	; (8002ed0 <I2C_Slave_STOPF+0x258>)
 8002d2c:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d32:	4618      	mov	r0, r3
 8002d34:	f7fe fa4a 	bl	80011cc <HAL_DMA_Abort_IT>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d03d      	beq.n	8002dba <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d44:	687a      	ldr	r2, [r7, #4]
 8002d46:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002d48:	4610      	mov	r0, r2
 8002d4a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002d4c:	e035      	b.n	8002dba <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	b29a      	uxth	r2, r3
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d60:	b29b      	uxth	r3, r3
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d005      	beq.n	8002d72 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d6a:	f043 0204 	orr.w	r2, r3, #4
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	685a      	ldr	r2, [r3, #4]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d80:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d86:	4618      	mov	r0, r3
 8002d88:	f7fe fa98 	bl	80012bc <HAL_DMA_GetState>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	2b01      	cmp	r3, #1
 8002d90:	d014      	beq.n	8002dbc <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d96:	4a4e      	ldr	r2, [pc, #312]	; (8002ed0 <I2C_Slave_STOPF+0x258>)
 8002d98:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f7fe fa14 	bl	80011cc <HAL_DMA_Abort_IT>
 8002da4:	4603      	mov	r3, r0
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d008      	beq.n	8002dbc <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002db0:	687a      	ldr	r2, [r7, #4]
 8002db2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002db4:	4610      	mov	r0, r2
 8002db6:	4798      	blx	r3
 8002db8:	e000      	b.n	8002dbc <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002dba:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dc0:	b29b      	uxth	r3, r3
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d03e      	beq.n	8002e44 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	695b      	ldr	r3, [r3, #20]
 8002dcc:	f003 0304 	and.w	r3, r3, #4
 8002dd0:	2b04      	cmp	r3, #4
 8002dd2:	d112      	bne.n	8002dfa <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	691a      	ldr	r2, [r3, #16]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dde:	b2d2      	uxtb	r2, r2
 8002de0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de6:	1c5a      	adds	r2, r3, #1
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002df0:	b29b      	uxth	r3, r3
 8002df2:	3b01      	subs	r3, #1
 8002df4:	b29a      	uxth	r2, r3
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	695b      	ldr	r3, [r3, #20]
 8002e00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e04:	2b40      	cmp	r3, #64	; 0x40
 8002e06:	d112      	bne.n	8002e2e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	691a      	ldr	r2, [r3, #16]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e12:	b2d2      	uxtb	r2, r2
 8002e14:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e1a:	1c5a      	adds	r2, r3, #1
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e24:	b29b      	uxth	r3, r3
 8002e26:	3b01      	subs	r3, #1
 8002e28:	b29a      	uxth	r2, r3
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e32:	b29b      	uxth	r3, r3
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d005      	beq.n	8002e44 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e3c:	f043 0204 	orr.w	r2, r3, #4
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d003      	beq.n	8002e54 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8002e4c:	6878      	ldr	r0, [r7, #4]
 8002e4e:	f000 f8b7 	bl	8002fc0 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8002e52:	e039      	b.n	8002ec8 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002e54:	7bfb      	ldrb	r3, [r7, #15]
 8002e56:	2b2a      	cmp	r3, #42	; 0x2a
 8002e58:	d109      	bne.n	8002e6e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2228      	movs	r2, #40	; 0x28
 8002e64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002e68:	6878      	ldr	r0, [r7, #4]
 8002e6a:	f7fd fe1b 	bl	8000aa4 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e74:	b2db      	uxtb	r3, r3
 8002e76:	2b28      	cmp	r3, #40	; 0x28
 8002e78:	d111      	bne.n	8002e9e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	4a15      	ldr	r2, [pc, #84]	; (8002ed4 <I2C_Slave_STOPF+0x25c>)
 8002e7e:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2200      	movs	r2, #0
 8002e84:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2220      	movs	r2, #32
 8002e8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2200      	movs	r2, #0
 8002e92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8002e96:	6878      	ldr	r0, [r7, #4]
 8002e98:	f7ff f824 	bl	8001ee4 <HAL_I2C_ListenCpltCallback>
}
 8002e9c:	e014      	b.n	8002ec8 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea2:	2b22      	cmp	r3, #34	; 0x22
 8002ea4:	d002      	beq.n	8002eac <I2C_Slave_STOPF+0x234>
 8002ea6:	7bfb      	ldrb	r3, [r7, #15]
 8002ea8:	2b22      	cmp	r3, #34	; 0x22
 8002eaa:	d10d      	bne.n	8002ec8 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2220      	movs	r2, #32
 8002eb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002ec2:	6878      	ldr	r0, [r7, #4]
 8002ec4:	f7fd fdee 	bl	8000aa4 <HAL_I2C_SlaveRxCpltCallback>
}
 8002ec8:	bf00      	nop
 8002eca:	3710      	adds	r7, #16
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bd80      	pop	{r7, pc}
 8002ed0:	08003225 	.word	0x08003225
 8002ed4:	ffff0000 	.word	0xffff0000

08002ed8 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b084      	sub	sp, #16
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ee6:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eec:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	2b08      	cmp	r3, #8
 8002ef2:	d002      	beq.n	8002efa <I2C_Slave_AF+0x22>
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	2b20      	cmp	r3, #32
 8002ef8:	d129      	bne.n	8002f4e <I2C_Slave_AF+0x76>
 8002efa:	7bfb      	ldrb	r3, [r7, #15]
 8002efc:	2b28      	cmp	r3, #40	; 0x28
 8002efe:	d126      	bne.n	8002f4e <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	4a2e      	ldr	r2, [pc, #184]	; (8002fbc <I2C_Slave_AF+0xe4>)
 8002f04:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	685a      	ldr	r2, [r3, #4]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002f14:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002f1e:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	681a      	ldr	r2, [r3, #0]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f2e:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2200      	movs	r2, #0
 8002f34:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2220      	movs	r2, #32
 8002f3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2200      	movs	r2, #0
 8002f42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8002f46:	6878      	ldr	r0, [r7, #4]
 8002f48:	f7fe ffcc 	bl	8001ee4 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8002f4c:	e031      	b.n	8002fb2 <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002f4e:	7bfb      	ldrb	r3, [r7, #15]
 8002f50:	2b21      	cmp	r3, #33	; 0x21
 8002f52:	d129      	bne.n	8002fa8 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	4a19      	ldr	r2, [pc, #100]	; (8002fbc <I2C_Slave_AF+0xe4>)
 8002f58:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2221      	movs	r2, #33	; 0x21
 8002f5e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2220      	movs	r2, #32
 8002f64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	685a      	ldr	r2, [r3, #4]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002f7e:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002f88:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	681a      	ldr	r2, [r3, #0]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f98:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 8002f9a:	6878      	ldr	r0, [r7, #4]
 8002f9c:	f7fe fc64 	bl	8001868 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002fa0:	6878      	ldr	r0, [r7, #4]
 8002fa2:	f7fe ff96 	bl	8001ed2 <HAL_I2C_SlaveTxCpltCallback>
}
 8002fa6:	e004      	b.n	8002fb2 <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002fb0:	615a      	str	r2, [r3, #20]
}
 8002fb2:	bf00      	nop
 8002fb4:	3710      	adds	r7, #16
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}
 8002fba:	bf00      	nop
 8002fbc:	ffff0000 	.word	0xffff0000

08002fc0 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b084      	sub	sp, #16
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fce:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002fd6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002fd8:	7bbb      	ldrb	r3, [r7, #14]
 8002fda:	2b10      	cmp	r3, #16
 8002fdc:	d002      	beq.n	8002fe4 <I2C_ITError+0x24>
 8002fde:	7bbb      	ldrb	r3, [r7, #14]
 8002fe0:	2b40      	cmp	r3, #64	; 0x40
 8002fe2:	d10a      	bne.n	8002ffa <I2C_ITError+0x3a>
 8002fe4:	7bfb      	ldrb	r3, [r7, #15]
 8002fe6:	2b22      	cmp	r3, #34	; 0x22
 8002fe8:	d107      	bne.n	8002ffa <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	681a      	ldr	r2, [r3, #0]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ff8:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002ffa:	7bfb      	ldrb	r3, [r7, #15]
 8002ffc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003000:	2b28      	cmp	r3, #40	; 0x28
 8003002:	d107      	bne.n	8003014 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2200      	movs	r2, #0
 8003008:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2228      	movs	r2, #40	; 0x28
 800300e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003012:	e015      	b.n	8003040 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800301e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003022:	d00a      	beq.n	800303a <I2C_ITError+0x7a>
 8003024:	7bfb      	ldrb	r3, [r7, #15]
 8003026:	2b60      	cmp	r3, #96	; 0x60
 8003028:	d007      	beq.n	800303a <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2220      	movs	r2, #32
 800302e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2200      	movs	r2, #0
 8003036:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2200      	movs	r2, #0
 800303e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800304a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800304e:	d162      	bne.n	8003116 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	685a      	ldr	r2, [r3, #4]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800305e:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003064:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003068:	b2db      	uxtb	r3, r3
 800306a:	2b01      	cmp	r3, #1
 800306c:	d020      	beq.n	80030b0 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003072:	4a6a      	ldr	r2, [pc, #424]	; (800321c <I2C_ITError+0x25c>)
 8003074:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800307a:	4618      	mov	r0, r3
 800307c:	f7fe f8a6 	bl	80011cc <HAL_DMA_Abort_IT>
 8003080:	4603      	mov	r3, r0
 8003082:	2b00      	cmp	r3, #0
 8003084:	f000 8089 	beq.w	800319a <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	681a      	ldr	r2, [r3, #0]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f022 0201 	bic.w	r2, r2, #1
 8003096:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2220      	movs	r2, #32
 800309c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030a6:	687a      	ldr	r2, [r7, #4]
 80030a8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80030aa:	4610      	mov	r0, r2
 80030ac:	4798      	blx	r3
 80030ae:	e074      	b.n	800319a <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030b4:	4a59      	ldr	r2, [pc, #356]	; (800321c <I2C_ITError+0x25c>)
 80030b6:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030bc:	4618      	mov	r0, r3
 80030be:	f7fe f885 	bl	80011cc <HAL_DMA_Abort_IT>
 80030c2:	4603      	mov	r3, r0
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d068      	beq.n	800319a <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	695b      	ldr	r3, [r3, #20]
 80030ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030d2:	2b40      	cmp	r3, #64	; 0x40
 80030d4:	d10b      	bne.n	80030ee <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	691a      	ldr	r2, [r3, #16]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e0:	b2d2      	uxtb	r2, r2
 80030e2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e8:	1c5a      	adds	r2, r3, #1
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	681a      	ldr	r2, [r3, #0]
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f022 0201 	bic.w	r2, r2, #1
 80030fc:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2220      	movs	r2, #32
 8003102:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800310a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800310c:	687a      	ldr	r2, [r7, #4]
 800310e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003110:	4610      	mov	r0, r2
 8003112:	4798      	blx	r3
 8003114:	e041      	b.n	800319a <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800311c:	b2db      	uxtb	r3, r3
 800311e:	2b60      	cmp	r3, #96	; 0x60
 8003120:	d125      	bne.n	800316e <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2220      	movs	r2, #32
 8003126:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2200      	movs	r2, #0
 800312e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	695b      	ldr	r3, [r3, #20]
 8003136:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800313a:	2b40      	cmp	r3, #64	; 0x40
 800313c:	d10b      	bne.n	8003156 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	691a      	ldr	r2, [r3, #16]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003148:	b2d2      	uxtb	r2, r2
 800314a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003150:	1c5a      	adds	r2, r3, #1
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	681a      	ldr	r2, [r3, #0]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f022 0201 	bic.w	r2, r2, #1
 8003164:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003166:	6878      	ldr	r0, [r7, #4]
 8003168:	f7fe fee0 	bl	8001f2c <HAL_I2C_AbortCpltCallback>
 800316c:	e015      	b.n	800319a <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	695b      	ldr	r3, [r3, #20]
 8003174:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003178:	2b40      	cmp	r3, #64	; 0x40
 800317a:	d10b      	bne.n	8003194 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	691a      	ldr	r2, [r3, #16]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003186:	b2d2      	uxtb	r2, r2
 8003188:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800318e:	1c5a      	adds	r2, r3, #1
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8003194:	6878      	ldr	r0, [r7, #4]
 8003196:	f7fe fec0 	bl	8001f1a <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800319e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	f003 0301 	and.w	r3, r3, #1
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d10e      	bne.n	80031c8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80031aa:	68bb      	ldr	r3, [r7, #8]
 80031ac:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d109      	bne.n	80031c8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80031b4:	68bb      	ldr	r3, [r7, #8]
 80031b6:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d104      	bne.n	80031c8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80031be:	68bb      	ldr	r3, [r7, #8]
 80031c0:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d007      	beq.n	80031d8 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	685a      	ldr	r2, [r3, #4]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80031d6:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031de:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e4:	f003 0304 	and.w	r3, r3, #4
 80031e8:	2b04      	cmp	r3, #4
 80031ea:	d113      	bne.n	8003214 <I2C_ITError+0x254>
 80031ec:	7bfb      	ldrb	r3, [r7, #15]
 80031ee:	2b28      	cmp	r3, #40	; 0x28
 80031f0:	d110      	bne.n	8003214 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	4a0a      	ldr	r2, [pc, #40]	; (8003220 <I2C_ITError+0x260>)
 80031f6:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2200      	movs	r2, #0
 80031fc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2220      	movs	r2, #32
 8003202:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2200      	movs	r2, #0
 800320a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800320e:	6878      	ldr	r0, [r7, #4]
 8003210:	f7fe fe68 	bl	8001ee4 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003214:	bf00      	nop
 8003216:	3710      	adds	r7, #16
 8003218:	46bd      	mov	sp, r7
 800321a:	bd80      	pop	{r7, pc}
 800321c:	08003225 	.word	0x08003225
 8003220:	ffff0000 	.word	0xffff0000

08003224 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b086      	sub	sp, #24
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800322c:	2300      	movs	r3, #0
 800322e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003234:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003236:	697b      	ldr	r3, [r7, #20]
 8003238:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800323c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800323e:	4b4b      	ldr	r3, [pc, #300]	; (800336c <I2C_DMAAbort+0x148>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	08db      	lsrs	r3, r3, #3
 8003244:	4a4a      	ldr	r2, [pc, #296]	; (8003370 <I2C_DMAAbort+0x14c>)
 8003246:	fba2 2303 	umull	r2, r3, r2, r3
 800324a:	0a1a      	lsrs	r2, r3, #8
 800324c:	4613      	mov	r3, r2
 800324e:	009b      	lsls	r3, r3, #2
 8003250:	4413      	add	r3, r2
 8003252:	00da      	lsls	r2, r3, #3
 8003254:	1ad3      	subs	r3, r2, r3
 8003256:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d106      	bne.n	800326c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003262:	f043 0220 	orr.w	r2, r3, #32
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800326a:	e00a      	b.n	8003282 <I2C_DMAAbort+0x5e>
    }
    count--;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	3b01      	subs	r3, #1
 8003270:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800327c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003280:	d0ea      	beq.n	8003258 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003286:	2b00      	cmp	r3, #0
 8003288:	d003      	beq.n	8003292 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800328e:	2200      	movs	r2, #0
 8003290:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003296:	2b00      	cmp	r3, #0
 8003298:	d003      	beq.n	80032a2 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800329e:	2200      	movs	r2, #0
 80032a0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032a2:	697b      	ldr	r3, [r7, #20]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	681a      	ldr	r2, [r3, #0]
 80032a8:	697b      	ldr	r3, [r7, #20]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032b0:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	2200      	movs	r2, #0
 80032b6:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d003      	beq.n	80032c8 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80032c0:	697b      	ldr	r3, [r7, #20]
 80032c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032c4:	2200      	movs	r2, #0
 80032c6:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 80032c8:	697b      	ldr	r3, [r7, #20]
 80032ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d003      	beq.n	80032d8 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032d4:	2200      	movs	r2, #0
 80032d6:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	681a      	ldr	r2, [r3, #0]
 80032de:	697b      	ldr	r3, [r7, #20]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f022 0201 	bic.w	r2, r2, #1
 80032e6:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032ee:	b2db      	uxtb	r3, r3
 80032f0:	2b60      	cmp	r3, #96	; 0x60
 80032f2:	d10e      	bne.n	8003312 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80032f4:	697b      	ldr	r3, [r7, #20]
 80032f6:	2220      	movs	r2, #32
 80032f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	2200      	movs	r2, #0
 8003300:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	2200      	movs	r2, #0
 8003308:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800330a:	6978      	ldr	r0, [r7, #20]
 800330c:	f7fe fe0e 	bl	8001f2c <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003310:	e027      	b.n	8003362 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003312:	7cfb      	ldrb	r3, [r7, #19]
 8003314:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003318:	2b28      	cmp	r3, #40	; 0x28
 800331a:	d117      	bne.n	800334c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 800331c:	697b      	ldr	r3, [r7, #20]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	681a      	ldr	r2, [r3, #0]
 8003322:	697b      	ldr	r3, [r7, #20]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f042 0201 	orr.w	r2, r2, #1
 800332a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800332c:	697b      	ldr	r3, [r7, #20]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	681a      	ldr	r2, [r3, #0]
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800333a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800333c:	697b      	ldr	r3, [r7, #20]
 800333e:	2200      	movs	r2, #0
 8003340:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003342:	697b      	ldr	r3, [r7, #20]
 8003344:	2228      	movs	r2, #40	; 0x28
 8003346:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800334a:	e007      	b.n	800335c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 800334c:	697b      	ldr	r3, [r7, #20]
 800334e:	2220      	movs	r2, #32
 8003350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003354:	697b      	ldr	r3, [r7, #20]
 8003356:	2200      	movs	r2, #0
 8003358:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800335c:	6978      	ldr	r0, [r7, #20]
 800335e:	f7fe fddc 	bl	8001f1a <HAL_I2C_ErrorCallback>
}
 8003362:	bf00      	nop
 8003364:	3718      	adds	r7, #24
 8003366:	46bd      	mov	sp, r7
 8003368:	bd80      	pop	{r7, pc}
 800336a:	bf00      	nop
 800336c:	20000000 	.word	0x20000000
 8003370:	14f8b589 	.word	0x14f8b589

08003374 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8003374:	b480      	push	{r7}
 8003376:	b085      	sub	sp, #20
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800337c:	2300      	movs	r3, #0
 800337e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8003380:	4b13      	ldr	r3, [pc, #76]	; (80033d0 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	08db      	lsrs	r3, r3, #3
 8003386:	4a13      	ldr	r2, [pc, #76]	; (80033d4 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8003388:	fba2 2303 	umull	r2, r3, r2, r3
 800338c:	0a1a      	lsrs	r2, r3, #8
 800338e:	4613      	mov	r3, r2
 8003390:	009b      	lsls	r3, r3, #2
 8003392:	4413      	add	r3, r2
 8003394:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	3b01      	subs	r3, #1
 800339a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d107      	bne.n	80033b2 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a6:	f043 0220 	orr.w	r2, r3, #32
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80033ae:	2301      	movs	r3, #1
 80033b0:	e008      	b.n	80033c4 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80033bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033c0:	d0e9      	beq.n	8003396 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80033c2:	2300      	movs	r3, #0
}
 80033c4:	4618      	mov	r0, r3
 80033c6:	3714      	adds	r7, #20
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bc80      	pop	{r7}
 80033cc:	4770      	bx	lr
 80033ce:	bf00      	nop
 80033d0:	20000000 	.word	0x20000000
 80033d4:	14f8b589 	.word	0x14f8b589

080033d8 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80033d8:	b480      	push	{r7}
 80033da:	b083      	sub	sp, #12
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033e4:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80033e8:	d103      	bne.n	80033f2 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2201      	movs	r2, #1
 80033ee:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80033f0:	e007      	b.n	8003402 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033f6:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80033fa:	d102      	bne.n	8003402 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2208      	movs	r2, #8
 8003400:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8003402:	bf00      	nop
 8003404:	370c      	adds	r7, #12
 8003406:	46bd      	mov	sp, r7
 8003408:	bc80      	pop	{r7}
 800340a:	4770      	bx	lr

0800340c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b086      	sub	sp, #24
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d101      	bne.n	800341e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800341a:	2301      	movs	r3, #1
 800341c:	e272      	b.n	8003904 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f003 0301 	and.w	r3, r3, #1
 8003426:	2b00      	cmp	r3, #0
 8003428:	f000 8087 	beq.w	800353a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800342c:	4b92      	ldr	r3, [pc, #584]	; (8003678 <HAL_RCC_OscConfig+0x26c>)
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	f003 030c 	and.w	r3, r3, #12
 8003434:	2b04      	cmp	r3, #4
 8003436:	d00c      	beq.n	8003452 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003438:	4b8f      	ldr	r3, [pc, #572]	; (8003678 <HAL_RCC_OscConfig+0x26c>)
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	f003 030c 	and.w	r3, r3, #12
 8003440:	2b08      	cmp	r3, #8
 8003442:	d112      	bne.n	800346a <HAL_RCC_OscConfig+0x5e>
 8003444:	4b8c      	ldr	r3, [pc, #560]	; (8003678 <HAL_RCC_OscConfig+0x26c>)
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800344c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003450:	d10b      	bne.n	800346a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003452:	4b89      	ldr	r3, [pc, #548]	; (8003678 <HAL_RCC_OscConfig+0x26c>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800345a:	2b00      	cmp	r3, #0
 800345c:	d06c      	beq.n	8003538 <HAL_RCC_OscConfig+0x12c>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d168      	bne.n	8003538 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003466:	2301      	movs	r3, #1
 8003468:	e24c      	b.n	8003904 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003472:	d106      	bne.n	8003482 <HAL_RCC_OscConfig+0x76>
 8003474:	4b80      	ldr	r3, [pc, #512]	; (8003678 <HAL_RCC_OscConfig+0x26c>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a7f      	ldr	r2, [pc, #508]	; (8003678 <HAL_RCC_OscConfig+0x26c>)
 800347a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800347e:	6013      	str	r3, [r2, #0]
 8003480:	e02e      	b.n	80034e0 <HAL_RCC_OscConfig+0xd4>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d10c      	bne.n	80034a4 <HAL_RCC_OscConfig+0x98>
 800348a:	4b7b      	ldr	r3, [pc, #492]	; (8003678 <HAL_RCC_OscConfig+0x26c>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a7a      	ldr	r2, [pc, #488]	; (8003678 <HAL_RCC_OscConfig+0x26c>)
 8003490:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003494:	6013      	str	r3, [r2, #0]
 8003496:	4b78      	ldr	r3, [pc, #480]	; (8003678 <HAL_RCC_OscConfig+0x26c>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4a77      	ldr	r2, [pc, #476]	; (8003678 <HAL_RCC_OscConfig+0x26c>)
 800349c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80034a0:	6013      	str	r3, [r2, #0]
 80034a2:	e01d      	b.n	80034e0 <HAL_RCC_OscConfig+0xd4>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80034ac:	d10c      	bne.n	80034c8 <HAL_RCC_OscConfig+0xbc>
 80034ae:	4b72      	ldr	r3, [pc, #456]	; (8003678 <HAL_RCC_OscConfig+0x26c>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a71      	ldr	r2, [pc, #452]	; (8003678 <HAL_RCC_OscConfig+0x26c>)
 80034b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80034b8:	6013      	str	r3, [r2, #0]
 80034ba:	4b6f      	ldr	r3, [pc, #444]	; (8003678 <HAL_RCC_OscConfig+0x26c>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a6e      	ldr	r2, [pc, #440]	; (8003678 <HAL_RCC_OscConfig+0x26c>)
 80034c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034c4:	6013      	str	r3, [r2, #0]
 80034c6:	e00b      	b.n	80034e0 <HAL_RCC_OscConfig+0xd4>
 80034c8:	4b6b      	ldr	r3, [pc, #428]	; (8003678 <HAL_RCC_OscConfig+0x26c>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a6a      	ldr	r2, [pc, #424]	; (8003678 <HAL_RCC_OscConfig+0x26c>)
 80034ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034d2:	6013      	str	r3, [r2, #0]
 80034d4:	4b68      	ldr	r3, [pc, #416]	; (8003678 <HAL_RCC_OscConfig+0x26c>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a67      	ldr	r2, [pc, #412]	; (8003678 <HAL_RCC_OscConfig+0x26c>)
 80034da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80034de:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d013      	beq.n	8003510 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034e8:	f7fd fd58 	bl	8000f9c <HAL_GetTick>
 80034ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034ee:	e008      	b.n	8003502 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034f0:	f7fd fd54 	bl	8000f9c <HAL_GetTick>
 80034f4:	4602      	mov	r2, r0
 80034f6:	693b      	ldr	r3, [r7, #16]
 80034f8:	1ad3      	subs	r3, r2, r3
 80034fa:	2b64      	cmp	r3, #100	; 0x64
 80034fc:	d901      	bls.n	8003502 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80034fe:	2303      	movs	r3, #3
 8003500:	e200      	b.n	8003904 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003502:	4b5d      	ldr	r3, [pc, #372]	; (8003678 <HAL_RCC_OscConfig+0x26c>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800350a:	2b00      	cmp	r3, #0
 800350c:	d0f0      	beq.n	80034f0 <HAL_RCC_OscConfig+0xe4>
 800350e:	e014      	b.n	800353a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003510:	f7fd fd44 	bl	8000f9c <HAL_GetTick>
 8003514:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003516:	e008      	b.n	800352a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003518:	f7fd fd40 	bl	8000f9c <HAL_GetTick>
 800351c:	4602      	mov	r2, r0
 800351e:	693b      	ldr	r3, [r7, #16]
 8003520:	1ad3      	subs	r3, r2, r3
 8003522:	2b64      	cmp	r3, #100	; 0x64
 8003524:	d901      	bls.n	800352a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003526:	2303      	movs	r3, #3
 8003528:	e1ec      	b.n	8003904 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800352a:	4b53      	ldr	r3, [pc, #332]	; (8003678 <HAL_RCC_OscConfig+0x26c>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003532:	2b00      	cmp	r3, #0
 8003534:	d1f0      	bne.n	8003518 <HAL_RCC_OscConfig+0x10c>
 8003536:	e000      	b.n	800353a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003538:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f003 0302 	and.w	r3, r3, #2
 8003542:	2b00      	cmp	r3, #0
 8003544:	d063      	beq.n	800360e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003546:	4b4c      	ldr	r3, [pc, #304]	; (8003678 <HAL_RCC_OscConfig+0x26c>)
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	f003 030c 	and.w	r3, r3, #12
 800354e:	2b00      	cmp	r3, #0
 8003550:	d00b      	beq.n	800356a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003552:	4b49      	ldr	r3, [pc, #292]	; (8003678 <HAL_RCC_OscConfig+0x26c>)
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	f003 030c 	and.w	r3, r3, #12
 800355a:	2b08      	cmp	r3, #8
 800355c:	d11c      	bne.n	8003598 <HAL_RCC_OscConfig+0x18c>
 800355e:	4b46      	ldr	r3, [pc, #280]	; (8003678 <HAL_RCC_OscConfig+0x26c>)
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003566:	2b00      	cmp	r3, #0
 8003568:	d116      	bne.n	8003598 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800356a:	4b43      	ldr	r3, [pc, #268]	; (8003678 <HAL_RCC_OscConfig+0x26c>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f003 0302 	and.w	r3, r3, #2
 8003572:	2b00      	cmp	r3, #0
 8003574:	d005      	beq.n	8003582 <HAL_RCC_OscConfig+0x176>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	691b      	ldr	r3, [r3, #16]
 800357a:	2b01      	cmp	r3, #1
 800357c:	d001      	beq.n	8003582 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800357e:	2301      	movs	r3, #1
 8003580:	e1c0      	b.n	8003904 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003582:	4b3d      	ldr	r3, [pc, #244]	; (8003678 <HAL_RCC_OscConfig+0x26c>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	695b      	ldr	r3, [r3, #20]
 800358e:	00db      	lsls	r3, r3, #3
 8003590:	4939      	ldr	r1, [pc, #228]	; (8003678 <HAL_RCC_OscConfig+0x26c>)
 8003592:	4313      	orrs	r3, r2
 8003594:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003596:	e03a      	b.n	800360e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	691b      	ldr	r3, [r3, #16]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d020      	beq.n	80035e2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80035a0:	4b36      	ldr	r3, [pc, #216]	; (800367c <HAL_RCC_OscConfig+0x270>)
 80035a2:	2201      	movs	r2, #1
 80035a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035a6:	f7fd fcf9 	bl	8000f9c <HAL_GetTick>
 80035aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035ac:	e008      	b.n	80035c0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035ae:	f7fd fcf5 	bl	8000f9c <HAL_GetTick>
 80035b2:	4602      	mov	r2, r0
 80035b4:	693b      	ldr	r3, [r7, #16]
 80035b6:	1ad3      	subs	r3, r2, r3
 80035b8:	2b02      	cmp	r3, #2
 80035ba:	d901      	bls.n	80035c0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80035bc:	2303      	movs	r3, #3
 80035be:	e1a1      	b.n	8003904 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035c0:	4b2d      	ldr	r3, [pc, #180]	; (8003678 <HAL_RCC_OscConfig+0x26c>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f003 0302 	and.w	r3, r3, #2
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d0f0      	beq.n	80035ae <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035cc:	4b2a      	ldr	r3, [pc, #168]	; (8003678 <HAL_RCC_OscConfig+0x26c>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	695b      	ldr	r3, [r3, #20]
 80035d8:	00db      	lsls	r3, r3, #3
 80035da:	4927      	ldr	r1, [pc, #156]	; (8003678 <HAL_RCC_OscConfig+0x26c>)
 80035dc:	4313      	orrs	r3, r2
 80035de:	600b      	str	r3, [r1, #0]
 80035e0:	e015      	b.n	800360e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80035e2:	4b26      	ldr	r3, [pc, #152]	; (800367c <HAL_RCC_OscConfig+0x270>)
 80035e4:	2200      	movs	r2, #0
 80035e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035e8:	f7fd fcd8 	bl	8000f9c <HAL_GetTick>
 80035ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035ee:	e008      	b.n	8003602 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035f0:	f7fd fcd4 	bl	8000f9c <HAL_GetTick>
 80035f4:	4602      	mov	r2, r0
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	1ad3      	subs	r3, r2, r3
 80035fa:	2b02      	cmp	r3, #2
 80035fc:	d901      	bls.n	8003602 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80035fe:	2303      	movs	r3, #3
 8003600:	e180      	b.n	8003904 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003602:	4b1d      	ldr	r3, [pc, #116]	; (8003678 <HAL_RCC_OscConfig+0x26c>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f003 0302 	and.w	r3, r3, #2
 800360a:	2b00      	cmp	r3, #0
 800360c:	d1f0      	bne.n	80035f0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f003 0308 	and.w	r3, r3, #8
 8003616:	2b00      	cmp	r3, #0
 8003618:	d03a      	beq.n	8003690 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	699b      	ldr	r3, [r3, #24]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d019      	beq.n	8003656 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003622:	4b17      	ldr	r3, [pc, #92]	; (8003680 <HAL_RCC_OscConfig+0x274>)
 8003624:	2201      	movs	r2, #1
 8003626:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003628:	f7fd fcb8 	bl	8000f9c <HAL_GetTick>
 800362c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800362e:	e008      	b.n	8003642 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003630:	f7fd fcb4 	bl	8000f9c <HAL_GetTick>
 8003634:	4602      	mov	r2, r0
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	1ad3      	subs	r3, r2, r3
 800363a:	2b02      	cmp	r3, #2
 800363c:	d901      	bls.n	8003642 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800363e:	2303      	movs	r3, #3
 8003640:	e160      	b.n	8003904 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003642:	4b0d      	ldr	r3, [pc, #52]	; (8003678 <HAL_RCC_OscConfig+0x26c>)
 8003644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003646:	f003 0302 	and.w	r3, r3, #2
 800364a:	2b00      	cmp	r3, #0
 800364c:	d0f0      	beq.n	8003630 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800364e:	2001      	movs	r0, #1
 8003650:	f000 faba 	bl	8003bc8 <RCC_Delay>
 8003654:	e01c      	b.n	8003690 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003656:	4b0a      	ldr	r3, [pc, #40]	; (8003680 <HAL_RCC_OscConfig+0x274>)
 8003658:	2200      	movs	r2, #0
 800365a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800365c:	f7fd fc9e 	bl	8000f9c <HAL_GetTick>
 8003660:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003662:	e00f      	b.n	8003684 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003664:	f7fd fc9a 	bl	8000f9c <HAL_GetTick>
 8003668:	4602      	mov	r2, r0
 800366a:	693b      	ldr	r3, [r7, #16]
 800366c:	1ad3      	subs	r3, r2, r3
 800366e:	2b02      	cmp	r3, #2
 8003670:	d908      	bls.n	8003684 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003672:	2303      	movs	r3, #3
 8003674:	e146      	b.n	8003904 <HAL_RCC_OscConfig+0x4f8>
 8003676:	bf00      	nop
 8003678:	40021000 	.word	0x40021000
 800367c:	42420000 	.word	0x42420000
 8003680:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003684:	4b92      	ldr	r3, [pc, #584]	; (80038d0 <HAL_RCC_OscConfig+0x4c4>)
 8003686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003688:	f003 0302 	and.w	r3, r3, #2
 800368c:	2b00      	cmp	r3, #0
 800368e:	d1e9      	bne.n	8003664 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f003 0304 	and.w	r3, r3, #4
 8003698:	2b00      	cmp	r3, #0
 800369a:	f000 80a6 	beq.w	80037ea <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800369e:	2300      	movs	r3, #0
 80036a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036a2:	4b8b      	ldr	r3, [pc, #556]	; (80038d0 <HAL_RCC_OscConfig+0x4c4>)
 80036a4:	69db      	ldr	r3, [r3, #28]
 80036a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d10d      	bne.n	80036ca <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036ae:	4b88      	ldr	r3, [pc, #544]	; (80038d0 <HAL_RCC_OscConfig+0x4c4>)
 80036b0:	69db      	ldr	r3, [r3, #28]
 80036b2:	4a87      	ldr	r2, [pc, #540]	; (80038d0 <HAL_RCC_OscConfig+0x4c4>)
 80036b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036b8:	61d3      	str	r3, [r2, #28]
 80036ba:	4b85      	ldr	r3, [pc, #532]	; (80038d0 <HAL_RCC_OscConfig+0x4c4>)
 80036bc:	69db      	ldr	r3, [r3, #28]
 80036be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036c2:	60bb      	str	r3, [r7, #8]
 80036c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036c6:	2301      	movs	r3, #1
 80036c8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036ca:	4b82      	ldr	r3, [pc, #520]	; (80038d4 <HAL_RCC_OscConfig+0x4c8>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d118      	bne.n	8003708 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80036d6:	4b7f      	ldr	r3, [pc, #508]	; (80038d4 <HAL_RCC_OscConfig+0x4c8>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a7e      	ldr	r2, [pc, #504]	; (80038d4 <HAL_RCC_OscConfig+0x4c8>)
 80036dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036e2:	f7fd fc5b 	bl	8000f9c <HAL_GetTick>
 80036e6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036e8:	e008      	b.n	80036fc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036ea:	f7fd fc57 	bl	8000f9c <HAL_GetTick>
 80036ee:	4602      	mov	r2, r0
 80036f0:	693b      	ldr	r3, [r7, #16]
 80036f2:	1ad3      	subs	r3, r2, r3
 80036f4:	2b64      	cmp	r3, #100	; 0x64
 80036f6:	d901      	bls.n	80036fc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80036f8:	2303      	movs	r3, #3
 80036fa:	e103      	b.n	8003904 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036fc:	4b75      	ldr	r3, [pc, #468]	; (80038d4 <HAL_RCC_OscConfig+0x4c8>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003704:	2b00      	cmp	r3, #0
 8003706:	d0f0      	beq.n	80036ea <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	68db      	ldr	r3, [r3, #12]
 800370c:	2b01      	cmp	r3, #1
 800370e:	d106      	bne.n	800371e <HAL_RCC_OscConfig+0x312>
 8003710:	4b6f      	ldr	r3, [pc, #444]	; (80038d0 <HAL_RCC_OscConfig+0x4c4>)
 8003712:	6a1b      	ldr	r3, [r3, #32]
 8003714:	4a6e      	ldr	r2, [pc, #440]	; (80038d0 <HAL_RCC_OscConfig+0x4c4>)
 8003716:	f043 0301 	orr.w	r3, r3, #1
 800371a:	6213      	str	r3, [r2, #32]
 800371c:	e02d      	b.n	800377a <HAL_RCC_OscConfig+0x36e>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	68db      	ldr	r3, [r3, #12]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d10c      	bne.n	8003740 <HAL_RCC_OscConfig+0x334>
 8003726:	4b6a      	ldr	r3, [pc, #424]	; (80038d0 <HAL_RCC_OscConfig+0x4c4>)
 8003728:	6a1b      	ldr	r3, [r3, #32]
 800372a:	4a69      	ldr	r2, [pc, #420]	; (80038d0 <HAL_RCC_OscConfig+0x4c4>)
 800372c:	f023 0301 	bic.w	r3, r3, #1
 8003730:	6213      	str	r3, [r2, #32]
 8003732:	4b67      	ldr	r3, [pc, #412]	; (80038d0 <HAL_RCC_OscConfig+0x4c4>)
 8003734:	6a1b      	ldr	r3, [r3, #32]
 8003736:	4a66      	ldr	r2, [pc, #408]	; (80038d0 <HAL_RCC_OscConfig+0x4c4>)
 8003738:	f023 0304 	bic.w	r3, r3, #4
 800373c:	6213      	str	r3, [r2, #32]
 800373e:	e01c      	b.n	800377a <HAL_RCC_OscConfig+0x36e>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	68db      	ldr	r3, [r3, #12]
 8003744:	2b05      	cmp	r3, #5
 8003746:	d10c      	bne.n	8003762 <HAL_RCC_OscConfig+0x356>
 8003748:	4b61      	ldr	r3, [pc, #388]	; (80038d0 <HAL_RCC_OscConfig+0x4c4>)
 800374a:	6a1b      	ldr	r3, [r3, #32]
 800374c:	4a60      	ldr	r2, [pc, #384]	; (80038d0 <HAL_RCC_OscConfig+0x4c4>)
 800374e:	f043 0304 	orr.w	r3, r3, #4
 8003752:	6213      	str	r3, [r2, #32]
 8003754:	4b5e      	ldr	r3, [pc, #376]	; (80038d0 <HAL_RCC_OscConfig+0x4c4>)
 8003756:	6a1b      	ldr	r3, [r3, #32]
 8003758:	4a5d      	ldr	r2, [pc, #372]	; (80038d0 <HAL_RCC_OscConfig+0x4c4>)
 800375a:	f043 0301 	orr.w	r3, r3, #1
 800375e:	6213      	str	r3, [r2, #32]
 8003760:	e00b      	b.n	800377a <HAL_RCC_OscConfig+0x36e>
 8003762:	4b5b      	ldr	r3, [pc, #364]	; (80038d0 <HAL_RCC_OscConfig+0x4c4>)
 8003764:	6a1b      	ldr	r3, [r3, #32]
 8003766:	4a5a      	ldr	r2, [pc, #360]	; (80038d0 <HAL_RCC_OscConfig+0x4c4>)
 8003768:	f023 0301 	bic.w	r3, r3, #1
 800376c:	6213      	str	r3, [r2, #32]
 800376e:	4b58      	ldr	r3, [pc, #352]	; (80038d0 <HAL_RCC_OscConfig+0x4c4>)
 8003770:	6a1b      	ldr	r3, [r3, #32]
 8003772:	4a57      	ldr	r2, [pc, #348]	; (80038d0 <HAL_RCC_OscConfig+0x4c4>)
 8003774:	f023 0304 	bic.w	r3, r3, #4
 8003778:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	68db      	ldr	r3, [r3, #12]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d015      	beq.n	80037ae <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003782:	f7fd fc0b 	bl	8000f9c <HAL_GetTick>
 8003786:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003788:	e00a      	b.n	80037a0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800378a:	f7fd fc07 	bl	8000f9c <HAL_GetTick>
 800378e:	4602      	mov	r2, r0
 8003790:	693b      	ldr	r3, [r7, #16]
 8003792:	1ad3      	subs	r3, r2, r3
 8003794:	f241 3288 	movw	r2, #5000	; 0x1388
 8003798:	4293      	cmp	r3, r2
 800379a:	d901      	bls.n	80037a0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800379c:	2303      	movs	r3, #3
 800379e:	e0b1      	b.n	8003904 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037a0:	4b4b      	ldr	r3, [pc, #300]	; (80038d0 <HAL_RCC_OscConfig+0x4c4>)
 80037a2:	6a1b      	ldr	r3, [r3, #32]
 80037a4:	f003 0302 	and.w	r3, r3, #2
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d0ee      	beq.n	800378a <HAL_RCC_OscConfig+0x37e>
 80037ac:	e014      	b.n	80037d8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037ae:	f7fd fbf5 	bl	8000f9c <HAL_GetTick>
 80037b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037b4:	e00a      	b.n	80037cc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037b6:	f7fd fbf1 	bl	8000f9c <HAL_GetTick>
 80037ba:	4602      	mov	r2, r0
 80037bc:	693b      	ldr	r3, [r7, #16]
 80037be:	1ad3      	subs	r3, r2, r3
 80037c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d901      	bls.n	80037cc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80037c8:	2303      	movs	r3, #3
 80037ca:	e09b      	b.n	8003904 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037cc:	4b40      	ldr	r3, [pc, #256]	; (80038d0 <HAL_RCC_OscConfig+0x4c4>)
 80037ce:	6a1b      	ldr	r3, [r3, #32]
 80037d0:	f003 0302 	and.w	r3, r3, #2
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d1ee      	bne.n	80037b6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80037d8:	7dfb      	ldrb	r3, [r7, #23]
 80037da:	2b01      	cmp	r3, #1
 80037dc:	d105      	bne.n	80037ea <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037de:	4b3c      	ldr	r3, [pc, #240]	; (80038d0 <HAL_RCC_OscConfig+0x4c4>)
 80037e0:	69db      	ldr	r3, [r3, #28]
 80037e2:	4a3b      	ldr	r2, [pc, #236]	; (80038d0 <HAL_RCC_OscConfig+0x4c4>)
 80037e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037e8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	69db      	ldr	r3, [r3, #28]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	f000 8087 	beq.w	8003902 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80037f4:	4b36      	ldr	r3, [pc, #216]	; (80038d0 <HAL_RCC_OscConfig+0x4c4>)
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	f003 030c 	and.w	r3, r3, #12
 80037fc:	2b08      	cmp	r3, #8
 80037fe:	d061      	beq.n	80038c4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	69db      	ldr	r3, [r3, #28]
 8003804:	2b02      	cmp	r3, #2
 8003806:	d146      	bne.n	8003896 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003808:	4b33      	ldr	r3, [pc, #204]	; (80038d8 <HAL_RCC_OscConfig+0x4cc>)
 800380a:	2200      	movs	r2, #0
 800380c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800380e:	f7fd fbc5 	bl	8000f9c <HAL_GetTick>
 8003812:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003814:	e008      	b.n	8003828 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003816:	f7fd fbc1 	bl	8000f9c <HAL_GetTick>
 800381a:	4602      	mov	r2, r0
 800381c:	693b      	ldr	r3, [r7, #16]
 800381e:	1ad3      	subs	r3, r2, r3
 8003820:	2b02      	cmp	r3, #2
 8003822:	d901      	bls.n	8003828 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003824:	2303      	movs	r3, #3
 8003826:	e06d      	b.n	8003904 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003828:	4b29      	ldr	r3, [pc, #164]	; (80038d0 <HAL_RCC_OscConfig+0x4c4>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003830:	2b00      	cmp	r3, #0
 8003832:	d1f0      	bne.n	8003816 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6a1b      	ldr	r3, [r3, #32]
 8003838:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800383c:	d108      	bne.n	8003850 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800383e:	4b24      	ldr	r3, [pc, #144]	; (80038d0 <HAL_RCC_OscConfig+0x4c4>)
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	689b      	ldr	r3, [r3, #8]
 800384a:	4921      	ldr	r1, [pc, #132]	; (80038d0 <HAL_RCC_OscConfig+0x4c4>)
 800384c:	4313      	orrs	r3, r2
 800384e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003850:	4b1f      	ldr	r3, [pc, #124]	; (80038d0 <HAL_RCC_OscConfig+0x4c4>)
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6a19      	ldr	r1, [r3, #32]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003860:	430b      	orrs	r3, r1
 8003862:	491b      	ldr	r1, [pc, #108]	; (80038d0 <HAL_RCC_OscConfig+0x4c4>)
 8003864:	4313      	orrs	r3, r2
 8003866:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003868:	4b1b      	ldr	r3, [pc, #108]	; (80038d8 <HAL_RCC_OscConfig+0x4cc>)
 800386a:	2201      	movs	r2, #1
 800386c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800386e:	f7fd fb95 	bl	8000f9c <HAL_GetTick>
 8003872:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003874:	e008      	b.n	8003888 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003876:	f7fd fb91 	bl	8000f9c <HAL_GetTick>
 800387a:	4602      	mov	r2, r0
 800387c:	693b      	ldr	r3, [r7, #16]
 800387e:	1ad3      	subs	r3, r2, r3
 8003880:	2b02      	cmp	r3, #2
 8003882:	d901      	bls.n	8003888 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003884:	2303      	movs	r3, #3
 8003886:	e03d      	b.n	8003904 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003888:	4b11      	ldr	r3, [pc, #68]	; (80038d0 <HAL_RCC_OscConfig+0x4c4>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003890:	2b00      	cmp	r3, #0
 8003892:	d0f0      	beq.n	8003876 <HAL_RCC_OscConfig+0x46a>
 8003894:	e035      	b.n	8003902 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003896:	4b10      	ldr	r3, [pc, #64]	; (80038d8 <HAL_RCC_OscConfig+0x4cc>)
 8003898:	2200      	movs	r2, #0
 800389a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800389c:	f7fd fb7e 	bl	8000f9c <HAL_GetTick>
 80038a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038a2:	e008      	b.n	80038b6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038a4:	f7fd fb7a 	bl	8000f9c <HAL_GetTick>
 80038a8:	4602      	mov	r2, r0
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	1ad3      	subs	r3, r2, r3
 80038ae:	2b02      	cmp	r3, #2
 80038b0:	d901      	bls.n	80038b6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80038b2:	2303      	movs	r3, #3
 80038b4:	e026      	b.n	8003904 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038b6:	4b06      	ldr	r3, [pc, #24]	; (80038d0 <HAL_RCC_OscConfig+0x4c4>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d1f0      	bne.n	80038a4 <HAL_RCC_OscConfig+0x498>
 80038c2:	e01e      	b.n	8003902 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	69db      	ldr	r3, [r3, #28]
 80038c8:	2b01      	cmp	r3, #1
 80038ca:	d107      	bne.n	80038dc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80038cc:	2301      	movs	r3, #1
 80038ce:	e019      	b.n	8003904 <HAL_RCC_OscConfig+0x4f8>
 80038d0:	40021000 	.word	0x40021000
 80038d4:	40007000 	.word	0x40007000
 80038d8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80038dc:	4b0b      	ldr	r3, [pc, #44]	; (800390c <HAL_RCC_OscConfig+0x500>)
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6a1b      	ldr	r3, [r3, #32]
 80038ec:	429a      	cmp	r2, r3
 80038ee:	d106      	bne.n	80038fe <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038fa:	429a      	cmp	r2, r3
 80038fc:	d001      	beq.n	8003902 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80038fe:	2301      	movs	r3, #1
 8003900:	e000      	b.n	8003904 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003902:	2300      	movs	r3, #0
}
 8003904:	4618      	mov	r0, r3
 8003906:	3718      	adds	r7, #24
 8003908:	46bd      	mov	sp, r7
 800390a:	bd80      	pop	{r7, pc}
 800390c:	40021000 	.word	0x40021000

08003910 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b084      	sub	sp, #16
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
 8003918:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d101      	bne.n	8003924 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003920:	2301      	movs	r3, #1
 8003922:	e0d0      	b.n	8003ac6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003924:	4b6a      	ldr	r3, [pc, #424]	; (8003ad0 <HAL_RCC_ClockConfig+0x1c0>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f003 0307 	and.w	r3, r3, #7
 800392c:	683a      	ldr	r2, [r7, #0]
 800392e:	429a      	cmp	r2, r3
 8003930:	d910      	bls.n	8003954 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003932:	4b67      	ldr	r3, [pc, #412]	; (8003ad0 <HAL_RCC_ClockConfig+0x1c0>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f023 0207 	bic.w	r2, r3, #7
 800393a:	4965      	ldr	r1, [pc, #404]	; (8003ad0 <HAL_RCC_ClockConfig+0x1c0>)
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	4313      	orrs	r3, r2
 8003940:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003942:	4b63      	ldr	r3, [pc, #396]	; (8003ad0 <HAL_RCC_ClockConfig+0x1c0>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f003 0307 	and.w	r3, r3, #7
 800394a:	683a      	ldr	r2, [r7, #0]
 800394c:	429a      	cmp	r2, r3
 800394e:	d001      	beq.n	8003954 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003950:	2301      	movs	r3, #1
 8003952:	e0b8      	b.n	8003ac6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f003 0302 	and.w	r3, r3, #2
 800395c:	2b00      	cmp	r3, #0
 800395e:	d020      	beq.n	80039a2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f003 0304 	and.w	r3, r3, #4
 8003968:	2b00      	cmp	r3, #0
 800396a:	d005      	beq.n	8003978 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800396c:	4b59      	ldr	r3, [pc, #356]	; (8003ad4 <HAL_RCC_ClockConfig+0x1c4>)
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	4a58      	ldr	r2, [pc, #352]	; (8003ad4 <HAL_RCC_ClockConfig+0x1c4>)
 8003972:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003976:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f003 0308 	and.w	r3, r3, #8
 8003980:	2b00      	cmp	r3, #0
 8003982:	d005      	beq.n	8003990 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003984:	4b53      	ldr	r3, [pc, #332]	; (8003ad4 <HAL_RCC_ClockConfig+0x1c4>)
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	4a52      	ldr	r2, [pc, #328]	; (8003ad4 <HAL_RCC_ClockConfig+0x1c4>)
 800398a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800398e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003990:	4b50      	ldr	r3, [pc, #320]	; (8003ad4 <HAL_RCC_ClockConfig+0x1c4>)
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	689b      	ldr	r3, [r3, #8]
 800399c:	494d      	ldr	r1, [pc, #308]	; (8003ad4 <HAL_RCC_ClockConfig+0x1c4>)
 800399e:	4313      	orrs	r3, r2
 80039a0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f003 0301 	and.w	r3, r3, #1
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d040      	beq.n	8003a30 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	2b01      	cmp	r3, #1
 80039b4:	d107      	bne.n	80039c6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039b6:	4b47      	ldr	r3, [pc, #284]	; (8003ad4 <HAL_RCC_ClockConfig+0x1c4>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d115      	bne.n	80039ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039c2:	2301      	movs	r3, #1
 80039c4:	e07f      	b.n	8003ac6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	2b02      	cmp	r3, #2
 80039cc:	d107      	bne.n	80039de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039ce:	4b41      	ldr	r3, [pc, #260]	; (8003ad4 <HAL_RCC_ClockConfig+0x1c4>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d109      	bne.n	80039ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	e073      	b.n	8003ac6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039de:	4b3d      	ldr	r3, [pc, #244]	; (8003ad4 <HAL_RCC_ClockConfig+0x1c4>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f003 0302 	and.w	r3, r3, #2
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d101      	bne.n	80039ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039ea:	2301      	movs	r3, #1
 80039ec:	e06b      	b.n	8003ac6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80039ee:	4b39      	ldr	r3, [pc, #228]	; (8003ad4 <HAL_RCC_ClockConfig+0x1c4>)
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	f023 0203 	bic.w	r2, r3, #3
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	4936      	ldr	r1, [pc, #216]	; (8003ad4 <HAL_RCC_ClockConfig+0x1c4>)
 80039fc:	4313      	orrs	r3, r2
 80039fe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a00:	f7fd facc 	bl	8000f9c <HAL_GetTick>
 8003a04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a06:	e00a      	b.n	8003a1e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a08:	f7fd fac8 	bl	8000f9c <HAL_GetTick>
 8003a0c:	4602      	mov	r2, r0
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	1ad3      	subs	r3, r2, r3
 8003a12:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d901      	bls.n	8003a1e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003a1a:	2303      	movs	r3, #3
 8003a1c:	e053      	b.n	8003ac6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a1e:	4b2d      	ldr	r3, [pc, #180]	; (8003ad4 <HAL_RCC_ClockConfig+0x1c4>)
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	f003 020c 	and.w	r2, r3, #12
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	009b      	lsls	r3, r3, #2
 8003a2c:	429a      	cmp	r2, r3
 8003a2e:	d1eb      	bne.n	8003a08 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003a30:	4b27      	ldr	r3, [pc, #156]	; (8003ad0 <HAL_RCC_ClockConfig+0x1c0>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f003 0307 	and.w	r3, r3, #7
 8003a38:	683a      	ldr	r2, [r7, #0]
 8003a3a:	429a      	cmp	r2, r3
 8003a3c:	d210      	bcs.n	8003a60 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a3e:	4b24      	ldr	r3, [pc, #144]	; (8003ad0 <HAL_RCC_ClockConfig+0x1c0>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f023 0207 	bic.w	r2, r3, #7
 8003a46:	4922      	ldr	r1, [pc, #136]	; (8003ad0 <HAL_RCC_ClockConfig+0x1c0>)
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a4e:	4b20      	ldr	r3, [pc, #128]	; (8003ad0 <HAL_RCC_ClockConfig+0x1c0>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f003 0307 	and.w	r3, r3, #7
 8003a56:	683a      	ldr	r2, [r7, #0]
 8003a58:	429a      	cmp	r2, r3
 8003a5a:	d001      	beq.n	8003a60 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	e032      	b.n	8003ac6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f003 0304 	and.w	r3, r3, #4
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d008      	beq.n	8003a7e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a6c:	4b19      	ldr	r3, [pc, #100]	; (8003ad4 <HAL_RCC_ClockConfig+0x1c4>)
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	68db      	ldr	r3, [r3, #12]
 8003a78:	4916      	ldr	r1, [pc, #88]	; (8003ad4 <HAL_RCC_ClockConfig+0x1c4>)
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f003 0308 	and.w	r3, r3, #8
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d009      	beq.n	8003a9e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003a8a:	4b12      	ldr	r3, [pc, #72]	; (8003ad4 <HAL_RCC_ClockConfig+0x1c4>)
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	691b      	ldr	r3, [r3, #16]
 8003a96:	00db      	lsls	r3, r3, #3
 8003a98:	490e      	ldr	r1, [pc, #56]	; (8003ad4 <HAL_RCC_ClockConfig+0x1c4>)
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003a9e:	f000 f821 	bl	8003ae4 <HAL_RCC_GetSysClockFreq>
 8003aa2:	4602      	mov	r2, r0
 8003aa4:	4b0b      	ldr	r3, [pc, #44]	; (8003ad4 <HAL_RCC_ClockConfig+0x1c4>)
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	091b      	lsrs	r3, r3, #4
 8003aaa:	f003 030f 	and.w	r3, r3, #15
 8003aae:	490a      	ldr	r1, [pc, #40]	; (8003ad8 <HAL_RCC_ClockConfig+0x1c8>)
 8003ab0:	5ccb      	ldrb	r3, [r1, r3]
 8003ab2:	fa22 f303 	lsr.w	r3, r2, r3
 8003ab6:	4a09      	ldr	r2, [pc, #36]	; (8003adc <HAL_RCC_ClockConfig+0x1cc>)
 8003ab8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003aba:	4b09      	ldr	r3, [pc, #36]	; (8003ae0 <HAL_RCC_ClockConfig+0x1d0>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4618      	mov	r0, r3
 8003ac0:	f7fd fa2a 	bl	8000f18 <HAL_InitTick>

  return HAL_OK;
 8003ac4:	2300      	movs	r3, #0
}
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	3710      	adds	r7, #16
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}
 8003ace:	bf00      	nop
 8003ad0:	40022000 	.word	0x40022000
 8003ad4:	40021000 	.word	0x40021000
 8003ad8:	08004a98 	.word	0x08004a98
 8003adc:	20000000 	.word	0x20000000
 8003ae0:	20000004 	.word	0x20000004

08003ae4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	b087      	sub	sp, #28
 8003ae8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003aea:	2300      	movs	r3, #0
 8003aec:	60fb      	str	r3, [r7, #12]
 8003aee:	2300      	movs	r3, #0
 8003af0:	60bb      	str	r3, [r7, #8]
 8003af2:	2300      	movs	r3, #0
 8003af4:	617b      	str	r3, [r7, #20]
 8003af6:	2300      	movs	r3, #0
 8003af8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003afa:	2300      	movs	r3, #0
 8003afc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003afe:	4b1e      	ldr	r3, [pc, #120]	; (8003b78 <HAL_RCC_GetSysClockFreq+0x94>)
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	f003 030c 	and.w	r3, r3, #12
 8003b0a:	2b04      	cmp	r3, #4
 8003b0c:	d002      	beq.n	8003b14 <HAL_RCC_GetSysClockFreq+0x30>
 8003b0e:	2b08      	cmp	r3, #8
 8003b10:	d003      	beq.n	8003b1a <HAL_RCC_GetSysClockFreq+0x36>
 8003b12:	e027      	b.n	8003b64 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003b14:	4b19      	ldr	r3, [pc, #100]	; (8003b7c <HAL_RCC_GetSysClockFreq+0x98>)
 8003b16:	613b      	str	r3, [r7, #16]
      break;
 8003b18:	e027      	b.n	8003b6a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	0c9b      	lsrs	r3, r3, #18
 8003b1e:	f003 030f 	and.w	r3, r3, #15
 8003b22:	4a17      	ldr	r2, [pc, #92]	; (8003b80 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003b24:	5cd3      	ldrb	r3, [r2, r3]
 8003b26:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d010      	beq.n	8003b54 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003b32:	4b11      	ldr	r3, [pc, #68]	; (8003b78 <HAL_RCC_GetSysClockFreq+0x94>)
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	0c5b      	lsrs	r3, r3, #17
 8003b38:	f003 0301 	and.w	r3, r3, #1
 8003b3c:	4a11      	ldr	r2, [pc, #68]	; (8003b84 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003b3e:	5cd3      	ldrb	r3, [r2, r3]
 8003b40:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	4a0d      	ldr	r2, [pc, #52]	; (8003b7c <HAL_RCC_GetSysClockFreq+0x98>)
 8003b46:	fb03 f202 	mul.w	r2, r3, r2
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b50:	617b      	str	r3, [r7, #20]
 8003b52:	e004      	b.n	8003b5e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	4a0c      	ldr	r2, [pc, #48]	; (8003b88 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003b58:	fb02 f303 	mul.w	r3, r2, r3
 8003b5c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003b5e:	697b      	ldr	r3, [r7, #20]
 8003b60:	613b      	str	r3, [r7, #16]
      break;
 8003b62:	e002      	b.n	8003b6a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003b64:	4b05      	ldr	r3, [pc, #20]	; (8003b7c <HAL_RCC_GetSysClockFreq+0x98>)
 8003b66:	613b      	str	r3, [r7, #16]
      break;
 8003b68:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b6a:	693b      	ldr	r3, [r7, #16]
}
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	371c      	adds	r7, #28
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bc80      	pop	{r7}
 8003b74:	4770      	bx	lr
 8003b76:	bf00      	nop
 8003b78:	40021000 	.word	0x40021000
 8003b7c:	007a1200 	.word	0x007a1200
 8003b80:	08004ab0 	.word	0x08004ab0
 8003b84:	08004ac0 	.word	0x08004ac0
 8003b88:	003d0900 	.word	0x003d0900

08003b8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b90:	4b02      	ldr	r3, [pc, #8]	; (8003b9c <HAL_RCC_GetHCLKFreq+0x10>)
 8003b92:	681b      	ldr	r3, [r3, #0]
}
 8003b94:	4618      	mov	r0, r3
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bc80      	pop	{r7}
 8003b9a:	4770      	bx	lr
 8003b9c:	20000000 	.word	0x20000000

08003ba0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003ba4:	f7ff fff2 	bl	8003b8c <HAL_RCC_GetHCLKFreq>
 8003ba8:	4602      	mov	r2, r0
 8003baa:	4b05      	ldr	r3, [pc, #20]	; (8003bc0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	0a1b      	lsrs	r3, r3, #8
 8003bb0:	f003 0307 	and.w	r3, r3, #7
 8003bb4:	4903      	ldr	r1, [pc, #12]	; (8003bc4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003bb6:	5ccb      	ldrb	r3, [r1, r3]
 8003bb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	bd80      	pop	{r7, pc}
 8003bc0:	40021000 	.word	0x40021000
 8003bc4:	08004aa8 	.word	0x08004aa8

08003bc8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b085      	sub	sp, #20
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003bd0:	4b0a      	ldr	r3, [pc, #40]	; (8003bfc <RCC_Delay+0x34>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a0a      	ldr	r2, [pc, #40]	; (8003c00 <RCC_Delay+0x38>)
 8003bd6:	fba2 2303 	umull	r2, r3, r2, r3
 8003bda:	0a5b      	lsrs	r3, r3, #9
 8003bdc:	687a      	ldr	r2, [r7, #4]
 8003bde:	fb02 f303 	mul.w	r3, r2, r3
 8003be2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003be4:	bf00      	nop
  }
  while (Delay --);
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	1e5a      	subs	r2, r3, #1
 8003bea:	60fa      	str	r2, [r7, #12]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d1f9      	bne.n	8003be4 <RCC_Delay+0x1c>
}
 8003bf0:	bf00      	nop
 8003bf2:	bf00      	nop
 8003bf4:	3714      	adds	r7, #20
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bc80      	pop	{r7}
 8003bfa:	4770      	bx	lr
 8003bfc:	20000000 	.word	0x20000000
 8003c00:	10624dd3 	.word	0x10624dd3

08003c04 <memset>:
 8003c04:	4603      	mov	r3, r0
 8003c06:	4402      	add	r2, r0
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d100      	bne.n	8003c0e <memset+0xa>
 8003c0c:	4770      	bx	lr
 8003c0e:	f803 1b01 	strb.w	r1, [r3], #1
 8003c12:	e7f9      	b.n	8003c08 <memset+0x4>

08003c14 <__errno>:
 8003c14:	4b01      	ldr	r3, [pc, #4]	; (8003c1c <__errno+0x8>)
 8003c16:	6818      	ldr	r0, [r3, #0]
 8003c18:	4770      	bx	lr
 8003c1a:	bf00      	nop
 8003c1c:	20000058 	.word	0x20000058

08003c20 <__libc_init_array>:
 8003c20:	b570      	push	{r4, r5, r6, lr}
 8003c22:	2600      	movs	r6, #0
 8003c24:	4d0c      	ldr	r5, [pc, #48]	; (8003c58 <__libc_init_array+0x38>)
 8003c26:	4c0d      	ldr	r4, [pc, #52]	; (8003c5c <__libc_init_array+0x3c>)
 8003c28:	1b64      	subs	r4, r4, r5
 8003c2a:	10a4      	asrs	r4, r4, #2
 8003c2c:	42a6      	cmp	r6, r4
 8003c2e:	d109      	bne.n	8003c44 <__libc_init_array+0x24>
 8003c30:	f000 ff24 	bl	8004a7c <_init>
 8003c34:	2600      	movs	r6, #0
 8003c36:	4d0a      	ldr	r5, [pc, #40]	; (8003c60 <__libc_init_array+0x40>)
 8003c38:	4c0a      	ldr	r4, [pc, #40]	; (8003c64 <__libc_init_array+0x44>)
 8003c3a:	1b64      	subs	r4, r4, r5
 8003c3c:	10a4      	asrs	r4, r4, #2
 8003c3e:	42a6      	cmp	r6, r4
 8003c40:	d105      	bne.n	8003c4e <__libc_init_array+0x2e>
 8003c42:	bd70      	pop	{r4, r5, r6, pc}
 8003c44:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c48:	4798      	blx	r3
 8003c4a:	3601      	adds	r6, #1
 8003c4c:	e7ee      	b.n	8003c2c <__libc_init_array+0xc>
 8003c4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c52:	4798      	blx	r3
 8003c54:	3601      	adds	r6, #1
 8003c56:	e7f2      	b.n	8003c3e <__libc_init_array+0x1e>
 8003c58:	08004af8 	.word	0x08004af8
 8003c5c:	08004af8 	.word	0x08004af8
 8003c60:	08004af8 	.word	0x08004af8
 8003c64:	08004afc 	.word	0x08004afc

08003c68 <pow>:
 8003c68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003c6c:	4614      	mov	r4, r2
 8003c6e:	461d      	mov	r5, r3
 8003c70:	4680      	mov	r8, r0
 8003c72:	4689      	mov	r9, r1
 8003c74:	f000 f868 	bl	8003d48 <__ieee754_pow>
 8003c78:	4622      	mov	r2, r4
 8003c7a:	4606      	mov	r6, r0
 8003c7c:	460f      	mov	r7, r1
 8003c7e:	462b      	mov	r3, r5
 8003c80:	4620      	mov	r0, r4
 8003c82:	4629      	mov	r1, r5
 8003c84:	f7fc feba 	bl	80009fc <__aeabi_dcmpun>
 8003c88:	bbc8      	cbnz	r0, 8003cfe <pow+0x96>
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	4640      	mov	r0, r8
 8003c90:	4649      	mov	r1, r9
 8003c92:	f7fc fe81 	bl	8000998 <__aeabi_dcmpeq>
 8003c96:	b1b8      	cbz	r0, 8003cc8 <pow+0x60>
 8003c98:	2200      	movs	r2, #0
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	4620      	mov	r0, r4
 8003c9e:	4629      	mov	r1, r5
 8003ca0:	f7fc fe7a 	bl	8000998 <__aeabi_dcmpeq>
 8003ca4:	2800      	cmp	r0, #0
 8003ca6:	d141      	bne.n	8003d2c <pow+0xc4>
 8003ca8:	4620      	mov	r0, r4
 8003caa:	4629      	mov	r1, r5
 8003cac:	f000 f844 	bl	8003d38 <finite>
 8003cb0:	b328      	cbz	r0, 8003cfe <pow+0x96>
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	4620      	mov	r0, r4
 8003cb8:	4629      	mov	r1, r5
 8003cba:	f7fc fe77 	bl	80009ac <__aeabi_dcmplt>
 8003cbe:	b1f0      	cbz	r0, 8003cfe <pow+0x96>
 8003cc0:	f7ff ffa8 	bl	8003c14 <__errno>
 8003cc4:	2322      	movs	r3, #34	; 0x22
 8003cc6:	e019      	b.n	8003cfc <pow+0x94>
 8003cc8:	4630      	mov	r0, r6
 8003cca:	4639      	mov	r1, r7
 8003ccc:	f000 f834 	bl	8003d38 <finite>
 8003cd0:	b9c8      	cbnz	r0, 8003d06 <pow+0x9e>
 8003cd2:	4640      	mov	r0, r8
 8003cd4:	4649      	mov	r1, r9
 8003cd6:	f000 f82f 	bl	8003d38 <finite>
 8003cda:	b1a0      	cbz	r0, 8003d06 <pow+0x9e>
 8003cdc:	4620      	mov	r0, r4
 8003cde:	4629      	mov	r1, r5
 8003ce0:	f000 f82a 	bl	8003d38 <finite>
 8003ce4:	b178      	cbz	r0, 8003d06 <pow+0x9e>
 8003ce6:	4632      	mov	r2, r6
 8003ce8:	463b      	mov	r3, r7
 8003cea:	4630      	mov	r0, r6
 8003cec:	4639      	mov	r1, r7
 8003cee:	f7fc fe85 	bl	80009fc <__aeabi_dcmpun>
 8003cf2:	2800      	cmp	r0, #0
 8003cf4:	d0e4      	beq.n	8003cc0 <pow+0x58>
 8003cf6:	f7ff ff8d 	bl	8003c14 <__errno>
 8003cfa:	2321      	movs	r3, #33	; 0x21
 8003cfc:	6003      	str	r3, [r0, #0]
 8003cfe:	4630      	mov	r0, r6
 8003d00:	4639      	mov	r1, r7
 8003d02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003d06:	2200      	movs	r2, #0
 8003d08:	2300      	movs	r3, #0
 8003d0a:	4630      	mov	r0, r6
 8003d0c:	4639      	mov	r1, r7
 8003d0e:	f7fc fe43 	bl	8000998 <__aeabi_dcmpeq>
 8003d12:	2800      	cmp	r0, #0
 8003d14:	d0f3      	beq.n	8003cfe <pow+0x96>
 8003d16:	4640      	mov	r0, r8
 8003d18:	4649      	mov	r1, r9
 8003d1a:	f000 f80d 	bl	8003d38 <finite>
 8003d1e:	2800      	cmp	r0, #0
 8003d20:	d0ed      	beq.n	8003cfe <pow+0x96>
 8003d22:	4620      	mov	r0, r4
 8003d24:	4629      	mov	r1, r5
 8003d26:	f000 f807 	bl	8003d38 <finite>
 8003d2a:	e7c8      	b.n	8003cbe <pow+0x56>
 8003d2c:	2600      	movs	r6, #0
 8003d2e:	4f01      	ldr	r7, [pc, #4]	; (8003d34 <pow+0xcc>)
 8003d30:	e7e5      	b.n	8003cfe <pow+0x96>
 8003d32:	bf00      	nop
 8003d34:	3ff00000 	.word	0x3ff00000

08003d38 <finite>:
 8003d38:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 8003d3c:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8003d40:	0fc0      	lsrs	r0, r0, #31
 8003d42:	4770      	bx	lr
 8003d44:	0000      	movs	r0, r0
	...

08003d48 <__ieee754_pow>:
 8003d48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d4c:	b093      	sub	sp, #76	; 0x4c
 8003d4e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003d52:	e9dd 2702 	ldrd	r2, r7, [sp, #8]
 8003d56:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 8003d5a:	4689      	mov	r9, r1
 8003d5c:	ea56 0102 	orrs.w	r1, r6, r2
 8003d60:	4680      	mov	r8, r0
 8003d62:	d111      	bne.n	8003d88 <__ieee754_pow+0x40>
 8003d64:	1803      	adds	r3, r0, r0
 8003d66:	f489 2200 	eor.w	r2, r9, #524288	; 0x80000
 8003d6a:	4152      	adcs	r2, r2
 8003d6c:	4299      	cmp	r1, r3
 8003d6e:	4b82      	ldr	r3, [pc, #520]	; (8003f78 <__ieee754_pow+0x230>)
 8003d70:	4193      	sbcs	r3, r2
 8003d72:	f080 84ba 	bcs.w	80046ea <__ieee754_pow+0x9a2>
 8003d76:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003d7a:	4640      	mov	r0, r8
 8003d7c:	4649      	mov	r1, r9
 8003d7e:	f7fc f9ed 	bl	800015c <__adddf3>
 8003d82:	4683      	mov	fp, r0
 8003d84:	468c      	mov	ip, r1
 8003d86:	e06f      	b.n	8003e68 <__ieee754_pow+0x120>
 8003d88:	4b7c      	ldr	r3, [pc, #496]	; (8003f7c <__ieee754_pow+0x234>)
 8003d8a:	f029 4400 	bic.w	r4, r9, #2147483648	; 0x80000000
 8003d8e:	429c      	cmp	r4, r3
 8003d90:	464d      	mov	r5, r9
 8003d92:	4682      	mov	sl, r0
 8003d94:	dc06      	bgt.n	8003da4 <__ieee754_pow+0x5c>
 8003d96:	d101      	bne.n	8003d9c <__ieee754_pow+0x54>
 8003d98:	2800      	cmp	r0, #0
 8003d9a:	d1ec      	bne.n	8003d76 <__ieee754_pow+0x2e>
 8003d9c:	429e      	cmp	r6, r3
 8003d9e:	dc01      	bgt.n	8003da4 <__ieee754_pow+0x5c>
 8003da0:	d10f      	bne.n	8003dc2 <__ieee754_pow+0x7a>
 8003da2:	b172      	cbz	r2, 8003dc2 <__ieee754_pow+0x7a>
 8003da4:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8003da8:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8003dac:	ea55 050a 	orrs.w	r5, r5, sl
 8003db0:	d1e1      	bne.n	8003d76 <__ieee754_pow+0x2e>
 8003db2:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8003db6:	18db      	adds	r3, r3, r3
 8003db8:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8003dbc:	4152      	adcs	r2, r2
 8003dbe:	429d      	cmp	r5, r3
 8003dc0:	e7d5      	b.n	8003d6e <__ieee754_pow+0x26>
 8003dc2:	2d00      	cmp	r5, #0
 8003dc4:	da39      	bge.n	8003e3a <__ieee754_pow+0xf2>
 8003dc6:	4b6e      	ldr	r3, [pc, #440]	; (8003f80 <__ieee754_pow+0x238>)
 8003dc8:	429e      	cmp	r6, r3
 8003dca:	dc52      	bgt.n	8003e72 <__ieee754_pow+0x12a>
 8003dcc:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8003dd0:	429e      	cmp	r6, r3
 8003dd2:	f340 849d 	ble.w	8004710 <__ieee754_pow+0x9c8>
 8003dd6:	1533      	asrs	r3, r6, #20
 8003dd8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8003ddc:	2b14      	cmp	r3, #20
 8003dde:	dd0f      	ble.n	8003e00 <__ieee754_pow+0xb8>
 8003de0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8003de4:	fa22 f103 	lsr.w	r1, r2, r3
 8003de8:	fa01 f303 	lsl.w	r3, r1, r3
 8003dec:	4293      	cmp	r3, r2
 8003dee:	f040 848f 	bne.w	8004710 <__ieee754_pow+0x9c8>
 8003df2:	f001 0101 	and.w	r1, r1, #1
 8003df6:	f1c1 0302 	rsb	r3, r1, #2
 8003dfa:	9300      	str	r3, [sp, #0]
 8003dfc:	b182      	cbz	r2, 8003e20 <__ieee754_pow+0xd8>
 8003dfe:	e05d      	b.n	8003ebc <__ieee754_pow+0x174>
 8003e00:	2a00      	cmp	r2, #0
 8003e02:	d159      	bne.n	8003eb8 <__ieee754_pow+0x170>
 8003e04:	f1c3 0314 	rsb	r3, r3, #20
 8003e08:	fa46 f103 	asr.w	r1, r6, r3
 8003e0c:	fa01 f303 	lsl.w	r3, r1, r3
 8003e10:	42b3      	cmp	r3, r6
 8003e12:	f040 847a 	bne.w	800470a <__ieee754_pow+0x9c2>
 8003e16:	f001 0101 	and.w	r1, r1, #1
 8003e1a:	f1c1 0302 	rsb	r3, r1, #2
 8003e1e:	9300      	str	r3, [sp, #0]
 8003e20:	4b58      	ldr	r3, [pc, #352]	; (8003f84 <__ieee754_pow+0x23c>)
 8003e22:	429e      	cmp	r6, r3
 8003e24:	d132      	bne.n	8003e8c <__ieee754_pow+0x144>
 8003e26:	2f00      	cmp	r7, #0
 8003e28:	f280 846b 	bge.w	8004702 <__ieee754_pow+0x9ba>
 8003e2c:	4642      	mov	r2, r8
 8003e2e:	464b      	mov	r3, r9
 8003e30:	2000      	movs	r0, #0
 8003e32:	4954      	ldr	r1, [pc, #336]	; (8003f84 <__ieee754_pow+0x23c>)
 8003e34:	f7fc fc72 	bl	800071c <__aeabi_ddiv>
 8003e38:	e7a3      	b.n	8003d82 <__ieee754_pow+0x3a>
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	9300      	str	r3, [sp, #0]
 8003e3e:	2a00      	cmp	r2, #0
 8003e40:	d13c      	bne.n	8003ebc <__ieee754_pow+0x174>
 8003e42:	4b4e      	ldr	r3, [pc, #312]	; (8003f7c <__ieee754_pow+0x234>)
 8003e44:	429e      	cmp	r6, r3
 8003e46:	d1eb      	bne.n	8003e20 <__ieee754_pow+0xd8>
 8003e48:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8003e4c:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8003e50:	ea53 030a 	orrs.w	r3, r3, sl
 8003e54:	f000 8449 	beq.w	80046ea <__ieee754_pow+0x9a2>
 8003e58:	4b4b      	ldr	r3, [pc, #300]	; (8003f88 <__ieee754_pow+0x240>)
 8003e5a:	429c      	cmp	r4, r3
 8003e5c:	dd0b      	ble.n	8003e76 <__ieee754_pow+0x12e>
 8003e5e:	2f00      	cmp	r7, #0
 8003e60:	f2c0 8449 	blt.w	80046f6 <__ieee754_pow+0x9ae>
 8003e64:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 8003e68:	4658      	mov	r0, fp
 8003e6a:	4661      	mov	r1, ip
 8003e6c:	b013      	add	sp, #76	; 0x4c
 8003e6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e72:	2302      	movs	r3, #2
 8003e74:	e7e2      	b.n	8003e3c <__ieee754_pow+0xf4>
 8003e76:	2f00      	cmp	r7, #0
 8003e78:	f04f 0b00 	mov.w	fp, #0
 8003e7c:	f04f 0c00 	mov.w	ip, #0
 8003e80:	daf2      	bge.n	8003e68 <__ieee754_pow+0x120>
 8003e82:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 8003e86:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 8003e8a:	e7ed      	b.n	8003e68 <__ieee754_pow+0x120>
 8003e8c:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8003e90:	d106      	bne.n	8003ea0 <__ieee754_pow+0x158>
 8003e92:	4642      	mov	r2, r8
 8003e94:	464b      	mov	r3, r9
 8003e96:	4640      	mov	r0, r8
 8003e98:	4649      	mov	r1, r9
 8003e9a:	f7fc fb15 	bl	80004c8 <__aeabi_dmul>
 8003e9e:	e770      	b.n	8003d82 <__ieee754_pow+0x3a>
 8003ea0:	4b3a      	ldr	r3, [pc, #232]	; (8003f8c <__ieee754_pow+0x244>)
 8003ea2:	429f      	cmp	r7, r3
 8003ea4:	d10a      	bne.n	8003ebc <__ieee754_pow+0x174>
 8003ea6:	2d00      	cmp	r5, #0
 8003ea8:	db08      	blt.n	8003ebc <__ieee754_pow+0x174>
 8003eaa:	4640      	mov	r0, r8
 8003eac:	4649      	mov	r1, r9
 8003eae:	b013      	add	sp, #76	; 0x4c
 8003eb0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003eb4:	f000 bd0a 	b.w	80048cc <__ieee754_sqrt>
 8003eb8:	2300      	movs	r3, #0
 8003eba:	9300      	str	r3, [sp, #0]
 8003ebc:	4640      	mov	r0, r8
 8003ebe:	4649      	mov	r1, r9
 8003ec0:	f000 fc58 	bl	8004774 <fabs>
 8003ec4:	4683      	mov	fp, r0
 8003ec6:	468c      	mov	ip, r1
 8003ec8:	f1ba 0f00 	cmp.w	sl, #0
 8003ecc:	d128      	bne.n	8003f20 <__ieee754_pow+0x1d8>
 8003ece:	b124      	cbz	r4, 8003eda <__ieee754_pow+0x192>
 8003ed0:	4b2c      	ldr	r3, [pc, #176]	; (8003f84 <__ieee754_pow+0x23c>)
 8003ed2:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8003ed6:	429a      	cmp	r2, r3
 8003ed8:	d122      	bne.n	8003f20 <__ieee754_pow+0x1d8>
 8003eda:	2f00      	cmp	r7, #0
 8003edc:	da07      	bge.n	8003eee <__ieee754_pow+0x1a6>
 8003ede:	465a      	mov	r2, fp
 8003ee0:	4663      	mov	r3, ip
 8003ee2:	2000      	movs	r0, #0
 8003ee4:	4927      	ldr	r1, [pc, #156]	; (8003f84 <__ieee754_pow+0x23c>)
 8003ee6:	f7fc fc19 	bl	800071c <__aeabi_ddiv>
 8003eea:	4683      	mov	fp, r0
 8003eec:	468c      	mov	ip, r1
 8003eee:	2d00      	cmp	r5, #0
 8003ef0:	daba      	bge.n	8003e68 <__ieee754_pow+0x120>
 8003ef2:	9b00      	ldr	r3, [sp, #0]
 8003ef4:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8003ef8:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8003efc:	431c      	orrs	r4, r3
 8003efe:	d108      	bne.n	8003f12 <__ieee754_pow+0x1ca>
 8003f00:	465a      	mov	r2, fp
 8003f02:	4663      	mov	r3, ip
 8003f04:	4658      	mov	r0, fp
 8003f06:	4661      	mov	r1, ip
 8003f08:	f7fc f926 	bl	8000158 <__aeabi_dsub>
 8003f0c:	4602      	mov	r2, r0
 8003f0e:	460b      	mov	r3, r1
 8003f10:	e790      	b.n	8003e34 <__ieee754_pow+0xec>
 8003f12:	9b00      	ldr	r3, [sp, #0]
 8003f14:	2b01      	cmp	r3, #1
 8003f16:	d1a7      	bne.n	8003e68 <__ieee754_pow+0x120>
 8003f18:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 8003f1c:	469c      	mov	ip, r3
 8003f1e:	e7a3      	b.n	8003e68 <__ieee754_pow+0x120>
 8003f20:	0feb      	lsrs	r3, r5, #31
 8003f22:	3b01      	subs	r3, #1
 8003f24:	930c      	str	r3, [sp, #48]	; 0x30
 8003f26:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003f28:	9b00      	ldr	r3, [sp, #0]
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	d104      	bne.n	8003f38 <__ieee754_pow+0x1f0>
 8003f2e:	4642      	mov	r2, r8
 8003f30:	464b      	mov	r3, r9
 8003f32:	4640      	mov	r0, r8
 8003f34:	4649      	mov	r1, r9
 8003f36:	e7e7      	b.n	8003f08 <__ieee754_pow+0x1c0>
 8003f38:	4b15      	ldr	r3, [pc, #84]	; (8003f90 <__ieee754_pow+0x248>)
 8003f3a:	429e      	cmp	r6, r3
 8003f3c:	f340 80f6 	ble.w	800412c <__ieee754_pow+0x3e4>
 8003f40:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8003f44:	429e      	cmp	r6, r3
 8003f46:	4b10      	ldr	r3, [pc, #64]	; (8003f88 <__ieee754_pow+0x240>)
 8003f48:	dd09      	ble.n	8003f5e <__ieee754_pow+0x216>
 8003f4a:	429c      	cmp	r4, r3
 8003f4c:	dc0c      	bgt.n	8003f68 <__ieee754_pow+0x220>
 8003f4e:	2f00      	cmp	r7, #0
 8003f50:	da0c      	bge.n	8003f6c <__ieee754_pow+0x224>
 8003f52:	2000      	movs	r0, #0
 8003f54:	b013      	add	sp, #76	; 0x4c
 8003f56:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f5a:	f000 bcb2 	b.w	80048c2 <__math_oflow>
 8003f5e:	429c      	cmp	r4, r3
 8003f60:	dbf5      	blt.n	8003f4e <__ieee754_pow+0x206>
 8003f62:	4b08      	ldr	r3, [pc, #32]	; (8003f84 <__ieee754_pow+0x23c>)
 8003f64:	429c      	cmp	r4, r3
 8003f66:	dd15      	ble.n	8003f94 <__ieee754_pow+0x24c>
 8003f68:	2f00      	cmp	r7, #0
 8003f6a:	dcf2      	bgt.n	8003f52 <__ieee754_pow+0x20a>
 8003f6c:	2000      	movs	r0, #0
 8003f6e:	b013      	add	sp, #76	; 0x4c
 8003f70:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f74:	f000 bca0 	b.w	80048b8 <__math_uflow>
 8003f78:	fff00000 	.word	0xfff00000
 8003f7c:	7ff00000 	.word	0x7ff00000
 8003f80:	433fffff 	.word	0x433fffff
 8003f84:	3ff00000 	.word	0x3ff00000
 8003f88:	3fefffff 	.word	0x3fefffff
 8003f8c:	3fe00000 	.word	0x3fe00000
 8003f90:	41e00000 	.word	0x41e00000
 8003f94:	4661      	mov	r1, ip
 8003f96:	2200      	movs	r2, #0
 8003f98:	4658      	mov	r0, fp
 8003f9a:	4b5f      	ldr	r3, [pc, #380]	; (8004118 <__ieee754_pow+0x3d0>)
 8003f9c:	f7fc f8dc 	bl	8000158 <__aeabi_dsub>
 8003fa0:	a355      	add	r3, pc, #340	; (adr r3, 80040f8 <__ieee754_pow+0x3b0>)
 8003fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fa6:	4604      	mov	r4, r0
 8003fa8:	460d      	mov	r5, r1
 8003faa:	f7fc fa8d 	bl	80004c8 <__aeabi_dmul>
 8003fae:	a354      	add	r3, pc, #336	; (adr r3, 8004100 <__ieee754_pow+0x3b8>)
 8003fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fb4:	4606      	mov	r6, r0
 8003fb6:	460f      	mov	r7, r1
 8003fb8:	4620      	mov	r0, r4
 8003fba:	4629      	mov	r1, r5
 8003fbc:	f7fc fa84 	bl	80004c8 <__aeabi_dmul>
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	4682      	mov	sl, r0
 8003fc4:	468b      	mov	fp, r1
 8003fc6:	4620      	mov	r0, r4
 8003fc8:	4629      	mov	r1, r5
 8003fca:	4b54      	ldr	r3, [pc, #336]	; (800411c <__ieee754_pow+0x3d4>)
 8003fcc:	f7fc fa7c 	bl	80004c8 <__aeabi_dmul>
 8003fd0:	4602      	mov	r2, r0
 8003fd2:	460b      	mov	r3, r1
 8003fd4:	a14c      	add	r1, pc, #304	; (adr r1, 8004108 <__ieee754_pow+0x3c0>)
 8003fd6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003fda:	f7fc f8bd 	bl	8000158 <__aeabi_dsub>
 8003fde:	4622      	mov	r2, r4
 8003fe0:	462b      	mov	r3, r5
 8003fe2:	f7fc fa71 	bl	80004c8 <__aeabi_dmul>
 8003fe6:	4602      	mov	r2, r0
 8003fe8:	460b      	mov	r3, r1
 8003fea:	2000      	movs	r0, #0
 8003fec:	494c      	ldr	r1, [pc, #304]	; (8004120 <__ieee754_pow+0x3d8>)
 8003fee:	f7fc f8b3 	bl	8000158 <__aeabi_dsub>
 8003ff2:	4622      	mov	r2, r4
 8003ff4:	462b      	mov	r3, r5
 8003ff6:	4680      	mov	r8, r0
 8003ff8:	4689      	mov	r9, r1
 8003ffa:	4620      	mov	r0, r4
 8003ffc:	4629      	mov	r1, r5
 8003ffe:	f7fc fa63 	bl	80004c8 <__aeabi_dmul>
 8004002:	4602      	mov	r2, r0
 8004004:	460b      	mov	r3, r1
 8004006:	4640      	mov	r0, r8
 8004008:	4649      	mov	r1, r9
 800400a:	f7fc fa5d 	bl	80004c8 <__aeabi_dmul>
 800400e:	a340      	add	r3, pc, #256	; (adr r3, 8004110 <__ieee754_pow+0x3c8>)
 8004010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004014:	f7fc fa58 	bl	80004c8 <__aeabi_dmul>
 8004018:	4602      	mov	r2, r0
 800401a:	460b      	mov	r3, r1
 800401c:	4650      	mov	r0, sl
 800401e:	4659      	mov	r1, fp
 8004020:	f7fc f89a 	bl	8000158 <__aeabi_dsub>
 8004024:	4602      	mov	r2, r0
 8004026:	460b      	mov	r3, r1
 8004028:	4604      	mov	r4, r0
 800402a:	460d      	mov	r5, r1
 800402c:	4630      	mov	r0, r6
 800402e:	4639      	mov	r1, r7
 8004030:	f7fc f894 	bl	800015c <__adddf3>
 8004034:	2000      	movs	r0, #0
 8004036:	4632      	mov	r2, r6
 8004038:	463b      	mov	r3, r7
 800403a:	4682      	mov	sl, r0
 800403c:	468b      	mov	fp, r1
 800403e:	f7fc f88b 	bl	8000158 <__aeabi_dsub>
 8004042:	4602      	mov	r2, r0
 8004044:	460b      	mov	r3, r1
 8004046:	4620      	mov	r0, r4
 8004048:	4629      	mov	r1, r5
 800404a:	f7fc f885 	bl	8000158 <__aeabi_dsub>
 800404e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8004052:	9b00      	ldr	r3, [sp, #0]
 8004054:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004056:	3b01      	subs	r3, #1
 8004058:	4313      	orrs	r3, r2
 800405a:	f04f 0600 	mov.w	r6, #0
 800405e:	f04f 0200 	mov.w	r2, #0
 8004062:	bf0c      	ite	eq
 8004064:	4b2f      	ldreq	r3, [pc, #188]	; (8004124 <__ieee754_pow+0x3dc>)
 8004066:	4b2c      	ldrne	r3, [pc, #176]	; (8004118 <__ieee754_pow+0x3d0>)
 8004068:	4604      	mov	r4, r0
 800406a:	460d      	mov	r5, r1
 800406c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004070:	e9cd 2300 	strd	r2, r3, [sp]
 8004074:	4632      	mov	r2, r6
 8004076:	463b      	mov	r3, r7
 8004078:	f7fc f86e 	bl	8000158 <__aeabi_dsub>
 800407c:	4652      	mov	r2, sl
 800407e:	465b      	mov	r3, fp
 8004080:	f7fc fa22 	bl	80004c8 <__aeabi_dmul>
 8004084:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004088:	4680      	mov	r8, r0
 800408a:	4689      	mov	r9, r1
 800408c:	4620      	mov	r0, r4
 800408e:	4629      	mov	r1, r5
 8004090:	f7fc fa1a 	bl	80004c8 <__aeabi_dmul>
 8004094:	4602      	mov	r2, r0
 8004096:	460b      	mov	r3, r1
 8004098:	4640      	mov	r0, r8
 800409a:	4649      	mov	r1, r9
 800409c:	f7fc f85e 	bl	800015c <__adddf3>
 80040a0:	4632      	mov	r2, r6
 80040a2:	463b      	mov	r3, r7
 80040a4:	4680      	mov	r8, r0
 80040a6:	4689      	mov	r9, r1
 80040a8:	4650      	mov	r0, sl
 80040aa:	4659      	mov	r1, fp
 80040ac:	f7fc fa0c 	bl	80004c8 <__aeabi_dmul>
 80040b0:	4604      	mov	r4, r0
 80040b2:	460d      	mov	r5, r1
 80040b4:	460b      	mov	r3, r1
 80040b6:	4602      	mov	r2, r0
 80040b8:	4649      	mov	r1, r9
 80040ba:	4640      	mov	r0, r8
 80040bc:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80040c0:	f7fc f84c 	bl	800015c <__adddf3>
 80040c4:	4b18      	ldr	r3, [pc, #96]	; (8004128 <__ieee754_pow+0x3e0>)
 80040c6:	4682      	mov	sl, r0
 80040c8:	4299      	cmp	r1, r3
 80040ca:	460f      	mov	r7, r1
 80040cc:	460e      	mov	r6, r1
 80040ce:	f340 82e7 	ble.w	80046a0 <__ieee754_pow+0x958>
 80040d2:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80040d6:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80040da:	4303      	orrs	r3, r0
 80040dc:	f000 81e2 	beq.w	80044a4 <__ieee754_pow+0x75c>
 80040e0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80040e4:	2200      	movs	r2, #0
 80040e6:	2300      	movs	r3, #0
 80040e8:	f7fc fc60 	bl	80009ac <__aeabi_dcmplt>
 80040ec:	3800      	subs	r0, #0
 80040ee:	bf18      	it	ne
 80040f0:	2001      	movne	r0, #1
 80040f2:	e72f      	b.n	8003f54 <__ieee754_pow+0x20c>
 80040f4:	f3af 8000 	nop.w
 80040f8:	60000000 	.word	0x60000000
 80040fc:	3ff71547 	.word	0x3ff71547
 8004100:	f85ddf44 	.word	0xf85ddf44
 8004104:	3e54ae0b 	.word	0x3e54ae0b
 8004108:	55555555 	.word	0x55555555
 800410c:	3fd55555 	.word	0x3fd55555
 8004110:	652b82fe 	.word	0x652b82fe
 8004114:	3ff71547 	.word	0x3ff71547
 8004118:	3ff00000 	.word	0x3ff00000
 800411c:	3fd00000 	.word	0x3fd00000
 8004120:	3fe00000 	.word	0x3fe00000
 8004124:	bff00000 	.word	0xbff00000
 8004128:	408fffff 	.word	0x408fffff
 800412c:	4bd4      	ldr	r3, [pc, #848]	; (8004480 <__ieee754_pow+0x738>)
 800412e:	2200      	movs	r2, #0
 8004130:	402b      	ands	r3, r5
 8004132:	b943      	cbnz	r3, 8004146 <__ieee754_pow+0x3fe>
 8004134:	4658      	mov	r0, fp
 8004136:	4661      	mov	r1, ip
 8004138:	4bd2      	ldr	r3, [pc, #840]	; (8004484 <__ieee754_pow+0x73c>)
 800413a:	f7fc f9c5 	bl	80004c8 <__aeabi_dmul>
 800413e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8004142:	4683      	mov	fp, r0
 8004144:	460c      	mov	r4, r1
 8004146:	1523      	asrs	r3, r4, #20
 8004148:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800414c:	4413      	add	r3, r2
 800414e:	930b      	str	r3, [sp, #44]	; 0x2c
 8004150:	4bcd      	ldr	r3, [pc, #820]	; (8004488 <__ieee754_pow+0x740>)
 8004152:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8004156:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800415a:	429c      	cmp	r4, r3
 800415c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8004160:	dd08      	ble.n	8004174 <__ieee754_pow+0x42c>
 8004162:	4bca      	ldr	r3, [pc, #808]	; (800448c <__ieee754_pow+0x744>)
 8004164:	429c      	cmp	r4, r3
 8004166:	f340 8164 	ble.w	8004432 <__ieee754_pow+0x6ea>
 800416a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800416c:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8004170:	3301      	adds	r3, #1
 8004172:	930b      	str	r3, [sp, #44]	; 0x2c
 8004174:	2600      	movs	r6, #0
 8004176:	00f3      	lsls	r3, r6, #3
 8004178:	930d      	str	r3, [sp, #52]	; 0x34
 800417a:	4bc5      	ldr	r3, [pc, #788]	; (8004490 <__ieee754_pow+0x748>)
 800417c:	4658      	mov	r0, fp
 800417e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8004182:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004186:	4629      	mov	r1, r5
 8004188:	461a      	mov	r2, r3
 800418a:	e9cd 3408 	strd	r3, r4, [sp, #32]
 800418e:	4623      	mov	r3, r4
 8004190:	f7fb ffe2 	bl	8000158 <__aeabi_dsub>
 8004194:	46da      	mov	sl, fp
 8004196:	462b      	mov	r3, r5
 8004198:	4652      	mov	r2, sl
 800419a:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800419e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80041a2:	f7fb ffdb 	bl	800015c <__adddf3>
 80041a6:	4602      	mov	r2, r0
 80041a8:	460b      	mov	r3, r1
 80041aa:	2000      	movs	r0, #0
 80041ac:	49b9      	ldr	r1, [pc, #740]	; (8004494 <__ieee754_pow+0x74c>)
 80041ae:	f7fc fab5 	bl	800071c <__aeabi_ddiv>
 80041b2:	4602      	mov	r2, r0
 80041b4:	460b      	mov	r3, r1
 80041b6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80041ba:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80041be:	f7fc f983 	bl	80004c8 <__aeabi_dmul>
 80041c2:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80041c6:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 80041ca:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80041ce:	2300      	movs	r3, #0
 80041d0:	2200      	movs	r2, #0
 80041d2:	46ab      	mov	fp, r5
 80041d4:	106d      	asrs	r5, r5, #1
 80041d6:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80041da:	9304      	str	r3, [sp, #16]
 80041dc:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80041e0:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80041e4:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 80041e8:	4640      	mov	r0, r8
 80041ea:	4649      	mov	r1, r9
 80041ec:	4614      	mov	r4, r2
 80041ee:	461d      	mov	r5, r3
 80041f0:	f7fc f96a 	bl	80004c8 <__aeabi_dmul>
 80041f4:	4602      	mov	r2, r0
 80041f6:	460b      	mov	r3, r1
 80041f8:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80041fc:	f7fb ffac 	bl	8000158 <__aeabi_dsub>
 8004200:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004204:	4606      	mov	r6, r0
 8004206:	460f      	mov	r7, r1
 8004208:	4620      	mov	r0, r4
 800420a:	4629      	mov	r1, r5
 800420c:	f7fb ffa4 	bl	8000158 <__aeabi_dsub>
 8004210:	4602      	mov	r2, r0
 8004212:	460b      	mov	r3, r1
 8004214:	4650      	mov	r0, sl
 8004216:	4659      	mov	r1, fp
 8004218:	f7fb ff9e 	bl	8000158 <__aeabi_dsub>
 800421c:	4642      	mov	r2, r8
 800421e:	464b      	mov	r3, r9
 8004220:	f7fc f952 	bl	80004c8 <__aeabi_dmul>
 8004224:	4602      	mov	r2, r0
 8004226:	460b      	mov	r3, r1
 8004228:	4630      	mov	r0, r6
 800422a:	4639      	mov	r1, r7
 800422c:	f7fb ff94 	bl	8000158 <__aeabi_dsub>
 8004230:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004234:	f7fc f948 	bl	80004c8 <__aeabi_dmul>
 8004238:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800423c:	4682      	mov	sl, r0
 800423e:	468b      	mov	fp, r1
 8004240:	4610      	mov	r0, r2
 8004242:	4619      	mov	r1, r3
 8004244:	f7fc f940 	bl	80004c8 <__aeabi_dmul>
 8004248:	a37b      	add	r3, pc, #492	; (adr r3, 8004438 <__ieee754_pow+0x6f0>)
 800424a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800424e:	4604      	mov	r4, r0
 8004250:	460d      	mov	r5, r1
 8004252:	f7fc f939 	bl	80004c8 <__aeabi_dmul>
 8004256:	a37a      	add	r3, pc, #488	; (adr r3, 8004440 <__ieee754_pow+0x6f8>)
 8004258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800425c:	f7fb ff7e 	bl	800015c <__adddf3>
 8004260:	4622      	mov	r2, r4
 8004262:	462b      	mov	r3, r5
 8004264:	f7fc f930 	bl	80004c8 <__aeabi_dmul>
 8004268:	a377      	add	r3, pc, #476	; (adr r3, 8004448 <__ieee754_pow+0x700>)
 800426a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800426e:	f7fb ff75 	bl	800015c <__adddf3>
 8004272:	4622      	mov	r2, r4
 8004274:	462b      	mov	r3, r5
 8004276:	f7fc f927 	bl	80004c8 <__aeabi_dmul>
 800427a:	a375      	add	r3, pc, #468	; (adr r3, 8004450 <__ieee754_pow+0x708>)
 800427c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004280:	f7fb ff6c 	bl	800015c <__adddf3>
 8004284:	4622      	mov	r2, r4
 8004286:	462b      	mov	r3, r5
 8004288:	f7fc f91e 	bl	80004c8 <__aeabi_dmul>
 800428c:	a372      	add	r3, pc, #456	; (adr r3, 8004458 <__ieee754_pow+0x710>)
 800428e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004292:	f7fb ff63 	bl	800015c <__adddf3>
 8004296:	4622      	mov	r2, r4
 8004298:	462b      	mov	r3, r5
 800429a:	f7fc f915 	bl	80004c8 <__aeabi_dmul>
 800429e:	a370      	add	r3, pc, #448	; (adr r3, 8004460 <__ieee754_pow+0x718>)
 80042a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042a4:	f7fb ff5a 	bl	800015c <__adddf3>
 80042a8:	4622      	mov	r2, r4
 80042aa:	4606      	mov	r6, r0
 80042ac:	460f      	mov	r7, r1
 80042ae:	462b      	mov	r3, r5
 80042b0:	4620      	mov	r0, r4
 80042b2:	4629      	mov	r1, r5
 80042b4:	f7fc f908 	bl	80004c8 <__aeabi_dmul>
 80042b8:	4602      	mov	r2, r0
 80042ba:	460b      	mov	r3, r1
 80042bc:	4630      	mov	r0, r6
 80042be:	4639      	mov	r1, r7
 80042c0:	f7fc f902 	bl	80004c8 <__aeabi_dmul>
 80042c4:	4604      	mov	r4, r0
 80042c6:	460d      	mov	r5, r1
 80042c8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80042cc:	4642      	mov	r2, r8
 80042ce:	464b      	mov	r3, r9
 80042d0:	f7fb ff44 	bl	800015c <__adddf3>
 80042d4:	4652      	mov	r2, sl
 80042d6:	465b      	mov	r3, fp
 80042d8:	f7fc f8f6 	bl	80004c8 <__aeabi_dmul>
 80042dc:	4622      	mov	r2, r4
 80042de:	462b      	mov	r3, r5
 80042e0:	f7fb ff3c 	bl	800015c <__adddf3>
 80042e4:	4642      	mov	r2, r8
 80042e6:	4606      	mov	r6, r0
 80042e8:	460f      	mov	r7, r1
 80042ea:	464b      	mov	r3, r9
 80042ec:	4640      	mov	r0, r8
 80042ee:	4649      	mov	r1, r9
 80042f0:	f7fc f8ea 	bl	80004c8 <__aeabi_dmul>
 80042f4:	4602      	mov	r2, r0
 80042f6:	460b      	mov	r3, r1
 80042f8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80042fc:	2200      	movs	r2, #0
 80042fe:	4b66      	ldr	r3, [pc, #408]	; (8004498 <__ieee754_pow+0x750>)
 8004300:	f7fb ff2c 	bl	800015c <__adddf3>
 8004304:	4632      	mov	r2, r6
 8004306:	463b      	mov	r3, r7
 8004308:	f7fb ff28 	bl	800015c <__adddf3>
 800430c:	2400      	movs	r4, #0
 800430e:	460d      	mov	r5, r1
 8004310:	4622      	mov	r2, r4
 8004312:	460b      	mov	r3, r1
 8004314:	4640      	mov	r0, r8
 8004316:	4649      	mov	r1, r9
 8004318:	f7fc f8d6 	bl	80004c8 <__aeabi_dmul>
 800431c:	2200      	movs	r2, #0
 800431e:	4680      	mov	r8, r0
 8004320:	4689      	mov	r9, r1
 8004322:	4620      	mov	r0, r4
 8004324:	4629      	mov	r1, r5
 8004326:	4b5c      	ldr	r3, [pc, #368]	; (8004498 <__ieee754_pow+0x750>)
 8004328:	f7fb ff16 	bl	8000158 <__aeabi_dsub>
 800432c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004330:	f7fb ff12 	bl	8000158 <__aeabi_dsub>
 8004334:	4602      	mov	r2, r0
 8004336:	460b      	mov	r3, r1
 8004338:	4630      	mov	r0, r6
 800433a:	4639      	mov	r1, r7
 800433c:	f7fb ff0c 	bl	8000158 <__aeabi_dsub>
 8004340:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004344:	f7fc f8c0 	bl	80004c8 <__aeabi_dmul>
 8004348:	4622      	mov	r2, r4
 800434a:	4606      	mov	r6, r0
 800434c:	460f      	mov	r7, r1
 800434e:	462b      	mov	r3, r5
 8004350:	4650      	mov	r0, sl
 8004352:	4659      	mov	r1, fp
 8004354:	f7fc f8b8 	bl	80004c8 <__aeabi_dmul>
 8004358:	4602      	mov	r2, r0
 800435a:	460b      	mov	r3, r1
 800435c:	4630      	mov	r0, r6
 800435e:	4639      	mov	r1, r7
 8004360:	f7fb fefc 	bl	800015c <__adddf3>
 8004364:	2400      	movs	r4, #0
 8004366:	4606      	mov	r6, r0
 8004368:	460f      	mov	r7, r1
 800436a:	4602      	mov	r2, r0
 800436c:	460b      	mov	r3, r1
 800436e:	4640      	mov	r0, r8
 8004370:	4649      	mov	r1, r9
 8004372:	f7fb fef3 	bl	800015c <__adddf3>
 8004376:	a33c      	add	r3, pc, #240	; (adr r3, 8004468 <__ieee754_pow+0x720>)
 8004378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800437c:	4620      	mov	r0, r4
 800437e:	460d      	mov	r5, r1
 8004380:	f7fc f8a2 	bl	80004c8 <__aeabi_dmul>
 8004384:	4642      	mov	r2, r8
 8004386:	464b      	mov	r3, r9
 8004388:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800438c:	4620      	mov	r0, r4
 800438e:	4629      	mov	r1, r5
 8004390:	f7fb fee2 	bl	8000158 <__aeabi_dsub>
 8004394:	4602      	mov	r2, r0
 8004396:	460b      	mov	r3, r1
 8004398:	4630      	mov	r0, r6
 800439a:	4639      	mov	r1, r7
 800439c:	f7fb fedc 	bl	8000158 <__aeabi_dsub>
 80043a0:	a333      	add	r3, pc, #204	; (adr r3, 8004470 <__ieee754_pow+0x728>)
 80043a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043a6:	f7fc f88f 	bl	80004c8 <__aeabi_dmul>
 80043aa:	a333      	add	r3, pc, #204	; (adr r3, 8004478 <__ieee754_pow+0x730>)
 80043ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043b0:	4606      	mov	r6, r0
 80043b2:	460f      	mov	r7, r1
 80043b4:	4620      	mov	r0, r4
 80043b6:	4629      	mov	r1, r5
 80043b8:	f7fc f886 	bl	80004c8 <__aeabi_dmul>
 80043bc:	4602      	mov	r2, r0
 80043be:	460b      	mov	r3, r1
 80043c0:	4630      	mov	r0, r6
 80043c2:	4639      	mov	r1, r7
 80043c4:	f7fb feca 	bl	800015c <__adddf3>
 80043c8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80043ca:	4b34      	ldr	r3, [pc, #208]	; (800449c <__ieee754_pow+0x754>)
 80043cc:	4413      	add	r3, r2
 80043ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043d2:	f7fb fec3 	bl	800015c <__adddf3>
 80043d6:	4680      	mov	r8, r0
 80043d8:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80043da:	4689      	mov	r9, r1
 80043dc:	f7fc f80a 	bl	80003f4 <__aeabi_i2d>
 80043e0:	4604      	mov	r4, r0
 80043e2:	460d      	mov	r5, r1
 80043e4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80043e8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80043ea:	4b2d      	ldr	r3, [pc, #180]	; (80044a0 <__ieee754_pow+0x758>)
 80043ec:	4413      	add	r3, r2
 80043ee:	e9d3 6700 	ldrd	r6, r7, [r3]
 80043f2:	4642      	mov	r2, r8
 80043f4:	464b      	mov	r3, r9
 80043f6:	f7fb feb1 	bl	800015c <__adddf3>
 80043fa:	4632      	mov	r2, r6
 80043fc:	463b      	mov	r3, r7
 80043fe:	f7fb fead 	bl	800015c <__adddf3>
 8004402:	4622      	mov	r2, r4
 8004404:	462b      	mov	r3, r5
 8004406:	f7fb fea9 	bl	800015c <__adddf3>
 800440a:	2000      	movs	r0, #0
 800440c:	4622      	mov	r2, r4
 800440e:	462b      	mov	r3, r5
 8004410:	4682      	mov	sl, r0
 8004412:	468b      	mov	fp, r1
 8004414:	f7fb fea0 	bl	8000158 <__aeabi_dsub>
 8004418:	4632      	mov	r2, r6
 800441a:	463b      	mov	r3, r7
 800441c:	f7fb fe9c 	bl	8000158 <__aeabi_dsub>
 8004420:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004424:	f7fb fe98 	bl	8000158 <__aeabi_dsub>
 8004428:	4602      	mov	r2, r0
 800442a:	460b      	mov	r3, r1
 800442c:	4640      	mov	r0, r8
 800442e:	4649      	mov	r1, r9
 8004430:	e60b      	b.n	800404a <__ieee754_pow+0x302>
 8004432:	2601      	movs	r6, #1
 8004434:	e69f      	b.n	8004176 <__ieee754_pow+0x42e>
 8004436:	bf00      	nop
 8004438:	4a454eef 	.word	0x4a454eef
 800443c:	3fca7e28 	.word	0x3fca7e28
 8004440:	93c9db65 	.word	0x93c9db65
 8004444:	3fcd864a 	.word	0x3fcd864a
 8004448:	a91d4101 	.word	0xa91d4101
 800444c:	3fd17460 	.word	0x3fd17460
 8004450:	518f264d 	.word	0x518f264d
 8004454:	3fd55555 	.word	0x3fd55555
 8004458:	db6fabff 	.word	0xdb6fabff
 800445c:	3fdb6db6 	.word	0x3fdb6db6
 8004460:	33333303 	.word	0x33333303
 8004464:	3fe33333 	.word	0x3fe33333
 8004468:	e0000000 	.word	0xe0000000
 800446c:	3feec709 	.word	0x3feec709
 8004470:	dc3a03fd 	.word	0xdc3a03fd
 8004474:	3feec709 	.word	0x3feec709
 8004478:	145b01f5 	.word	0x145b01f5
 800447c:	be3e2fe0 	.word	0xbe3e2fe0
 8004480:	7ff00000 	.word	0x7ff00000
 8004484:	43400000 	.word	0x43400000
 8004488:	0003988e 	.word	0x0003988e
 800448c:	000bb679 	.word	0x000bb679
 8004490:	08004ac8 	.word	0x08004ac8
 8004494:	3ff00000 	.word	0x3ff00000
 8004498:	40080000 	.word	0x40080000
 800449c:	08004ae8 	.word	0x08004ae8
 80044a0:	08004ad8 	.word	0x08004ad8
 80044a4:	a39c      	add	r3, pc, #624	; (adr r3, 8004718 <__ieee754_pow+0x9d0>)
 80044a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044aa:	4640      	mov	r0, r8
 80044ac:	4649      	mov	r1, r9
 80044ae:	f7fb fe55 	bl	800015c <__adddf3>
 80044b2:	4622      	mov	r2, r4
 80044b4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80044b8:	462b      	mov	r3, r5
 80044ba:	4650      	mov	r0, sl
 80044bc:	4639      	mov	r1, r7
 80044be:	f7fb fe4b 	bl	8000158 <__aeabi_dsub>
 80044c2:	4602      	mov	r2, r0
 80044c4:	460b      	mov	r3, r1
 80044c6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80044ca:	f7fc fa8d 	bl	80009e8 <__aeabi_dcmpgt>
 80044ce:	2800      	cmp	r0, #0
 80044d0:	f47f ae06 	bne.w	80040e0 <__ieee754_pow+0x398>
 80044d4:	4aa2      	ldr	r2, [pc, #648]	; (8004760 <__ieee754_pow+0xa18>)
 80044d6:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 80044da:	4293      	cmp	r3, r2
 80044dc:	f340 8100 	ble.w	80046e0 <__ieee754_pow+0x998>
 80044e0:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80044e4:	151b      	asrs	r3, r3, #20
 80044e6:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80044ea:	fa4a fa03 	asr.w	sl, sl, r3
 80044ee:	44b2      	add	sl, r6
 80044f0:	f3ca 510a 	ubfx	r1, sl, #20, #11
 80044f4:	489b      	ldr	r0, [pc, #620]	; (8004764 <__ieee754_pow+0xa1c>)
 80044f6:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80044fa:	4108      	asrs	r0, r1
 80044fc:	ea00 030a 	and.w	r3, r0, sl
 8004500:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8004504:	f1c1 0114 	rsb	r1, r1, #20
 8004508:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800450c:	fa4a fa01 	asr.w	sl, sl, r1
 8004510:	2e00      	cmp	r6, #0
 8004512:	f04f 0200 	mov.w	r2, #0
 8004516:	4620      	mov	r0, r4
 8004518:	4629      	mov	r1, r5
 800451a:	bfb8      	it	lt
 800451c:	f1ca 0a00 	rsblt	sl, sl, #0
 8004520:	f7fb fe1a 	bl	8000158 <__aeabi_dsub>
 8004524:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004528:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800452c:	2400      	movs	r4, #0
 800452e:	4642      	mov	r2, r8
 8004530:	464b      	mov	r3, r9
 8004532:	f7fb fe13 	bl	800015c <__adddf3>
 8004536:	a37a      	add	r3, pc, #488	; (adr r3, 8004720 <__ieee754_pow+0x9d8>)
 8004538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800453c:	4620      	mov	r0, r4
 800453e:	460d      	mov	r5, r1
 8004540:	f7fb ffc2 	bl	80004c8 <__aeabi_dmul>
 8004544:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004548:	4606      	mov	r6, r0
 800454a:	460f      	mov	r7, r1
 800454c:	4620      	mov	r0, r4
 800454e:	4629      	mov	r1, r5
 8004550:	f7fb fe02 	bl	8000158 <__aeabi_dsub>
 8004554:	4602      	mov	r2, r0
 8004556:	460b      	mov	r3, r1
 8004558:	4640      	mov	r0, r8
 800455a:	4649      	mov	r1, r9
 800455c:	f7fb fdfc 	bl	8000158 <__aeabi_dsub>
 8004560:	a371      	add	r3, pc, #452	; (adr r3, 8004728 <__ieee754_pow+0x9e0>)
 8004562:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004566:	f7fb ffaf 	bl	80004c8 <__aeabi_dmul>
 800456a:	a371      	add	r3, pc, #452	; (adr r3, 8004730 <__ieee754_pow+0x9e8>)
 800456c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004570:	4680      	mov	r8, r0
 8004572:	4689      	mov	r9, r1
 8004574:	4620      	mov	r0, r4
 8004576:	4629      	mov	r1, r5
 8004578:	f7fb ffa6 	bl	80004c8 <__aeabi_dmul>
 800457c:	4602      	mov	r2, r0
 800457e:	460b      	mov	r3, r1
 8004580:	4640      	mov	r0, r8
 8004582:	4649      	mov	r1, r9
 8004584:	f7fb fdea 	bl	800015c <__adddf3>
 8004588:	4604      	mov	r4, r0
 800458a:	460d      	mov	r5, r1
 800458c:	4602      	mov	r2, r0
 800458e:	460b      	mov	r3, r1
 8004590:	4630      	mov	r0, r6
 8004592:	4639      	mov	r1, r7
 8004594:	f7fb fde2 	bl	800015c <__adddf3>
 8004598:	4632      	mov	r2, r6
 800459a:	463b      	mov	r3, r7
 800459c:	4680      	mov	r8, r0
 800459e:	4689      	mov	r9, r1
 80045a0:	f7fb fdda 	bl	8000158 <__aeabi_dsub>
 80045a4:	4602      	mov	r2, r0
 80045a6:	460b      	mov	r3, r1
 80045a8:	4620      	mov	r0, r4
 80045aa:	4629      	mov	r1, r5
 80045ac:	f7fb fdd4 	bl	8000158 <__aeabi_dsub>
 80045b0:	4642      	mov	r2, r8
 80045b2:	4606      	mov	r6, r0
 80045b4:	460f      	mov	r7, r1
 80045b6:	464b      	mov	r3, r9
 80045b8:	4640      	mov	r0, r8
 80045ba:	4649      	mov	r1, r9
 80045bc:	f7fb ff84 	bl	80004c8 <__aeabi_dmul>
 80045c0:	a35d      	add	r3, pc, #372	; (adr r3, 8004738 <__ieee754_pow+0x9f0>)
 80045c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045c6:	4604      	mov	r4, r0
 80045c8:	460d      	mov	r5, r1
 80045ca:	f7fb ff7d 	bl	80004c8 <__aeabi_dmul>
 80045ce:	a35c      	add	r3, pc, #368	; (adr r3, 8004740 <__ieee754_pow+0x9f8>)
 80045d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045d4:	f7fb fdc0 	bl	8000158 <__aeabi_dsub>
 80045d8:	4622      	mov	r2, r4
 80045da:	462b      	mov	r3, r5
 80045dc:	f7fb ff74 	bl	80004c8 <__aeabi_dmul>
 80045e0:	a359      	add	r3, pc, #356	; (adr r3, 8004748 <__ieee754_pow+0xa00>)
 80045e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045e6:	f7fb fdb9 	bl	800015c <__adddf3>
 80045ea:	4622      	mov	r2, r4
 80045ec:	462b      	mov	r3, r5
 80045ee:	f7fb ff6b 	bl	80004c8 <__aeabi_dmul>
 80045f2:	a357      	add	r3, pc, #348	; (adr r3, 8004750 <__ieee754_pow+0xa08>)
 80045f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045f8:	f7fb fdae 	bl	8000158 <__aeabi_dsub>
 80045fc:	4622      	mov	r2, r4
 80045fe:	462b      	mov	r3, r5
 8004600:	f7fb ff62 	bl	80004c8 <__aeabi_dmul>
 8004604:	a354      	add	r3, pc, #336	; (adr r3, 8004758 <__ieee754_pow+0xa10>)
 8004606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800460a:	f7fb fda7 	bl	800015c <__adddf3>
 800460e:	4622      	mov	r2, r4
 8004610:	462b      	mov	r3, r5
 8004612:	f7fb ff59 	bl	80004c8 <__aeabi_dmul>
 8004616:	4602      	mov	r2, r0
 8004618:	460b      	mov	r3, r1
 800461a:	4640      	mov	r0, r8
 800461c:	4649      	mov	r1, r9
 800461e:	f7fb fd9b 	bl	8000158 <__aeabi_dsub>
 8004622:	4604      	mov	r4, r0
 8004624:	460d      	mov	r5, r1
 8004626:	4602      	mov	r2, r0
 8004628:	460b      	mov	r3, r1
 800462a:	4640      	mov	r0, r8
 800462c:	4649      	mov	r1, r9
 800462e:	f7fb ff4b 	bl	80004c8 <__aeabi_dmul>
 8004632:	2200      	movs	r2, #0
 8004634:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004638:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800463c:	4620      	mov	r0, r4
 800463e:	4629      	mov	r1, r5
 8004640:	f7fb fd8a 	bl	8000158 <__aeabi_dsub>
 8004644:	4602      	mov	r2, r0
 8004646:	460b      	mov	r3, r1
 8004648:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800464c:	f7fc f866 	bl	800071c <__aeabi_ddiv>
 8004650:	4632      	mov	r2, r6
 8004652:	4604      	mov	r4, r0
 8004654:	460d      	mov	r5, r1
 8004656:	463b      	mov	r3, r7
 8004658:	4640      	mov	r0, r8
 800465a:	4649      	mov	r1, r9
 800465c:	f7fb ff34 	bl	80004c8 <__aeabi_dmul>
 8004660:	4632      	mov	r2, r6
 8004662:	463b      	mov	r3, r7
 8004664:	f7fb fd7a 	bl	800015c <__adddf3>
 8004668:	4602      	mov	r2, r0
 800466a:	460b      	mov	r3, r1
 800466c:	4620      	mov	r0, r4
 800466e:	4629      	mov	r1, r5
 8004670:	f7fb fd72 	bl	8000158 <__aeabi_dsub>
 8004674:	4642      	mov	r2, r8
 8004676:	464b      	mov	r3, r9
 8004678:	f7fb fd6e 	bl	8000158 <__aeabi_dsub>
 800467c:	4602      	mov	r2, r0
 800467e:	460b      	mov	r3, r1
 8004680:	2000      	movs	r0, #0
 8004682:	4939      	ldr	r1, [pc, #228]	; (8004768 <__ieee754_pow+0xa20>)
 8004684:	f7fb fd68 	bl	8000158 <__aeabi_dsub>
 8004688:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800468c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8004690:	da29      	bge.n	80046e6 <__ieee754_pow+0x99e>
 8004692:	4652      	mov	r2, sl
 8004694:	f000 f874 	bl	8004780 <scalbn>
 8004698:	e9dd 2300 	ldrd	r2, r3, [sp]
 800469c:	f7ff bbfd 	b.w	8003e9a <__ieee754_pow+0x152>
 80046a0:	4b32      	ldr	r3, [pc, #200]	; (800476c <__ieee754_pow+0xa24>)
 80046a2:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 80046a6:	429f      	cmp	r7, r3
 80046a8:	f77f af14 	ble.w	80044d4 <__ieee754_pow+0x78c>
 80046ac:	4b30      	ldr	r3, [pc, #192]	; (8004770 <__ieee754_pow+0xa28>)
 80046ae:	440b      	add	r3, r1
 80046b0:	4303      	orrs	r3, r0
 80046b2:	d009      	beq.n	80046c8 <__ieee754_pow+0x980>
 80046b4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80046b8:	2200      	movs	r2, #0
 80046ba:	2300      	movs	r3, #0
 80046bc:	f7fc f976 	bl	80009ac <__aeabi_dcmplt>
 80046c0:	3800      	subs	r0, #0
 80046c2:	bf18      	it	ne
 80046c4:	2001      	movne	r0, #1
 80046c6:	e452      	b.n	8003f6e <__ieee754_pow+0x226>
 80046c8:	4622      	mov	r2, r4
 80046ca:	462b      	mov	r3, r5
 80046cc:	f7fb fd44 	bl	8000158 <__aeabi_dsub>
 80046d0:	4642      	mov	r2, r8
 80046d2:	464b      	mov	r3, r9
 80046d4:	f7fc f97e 	bl	80009d4 <__aeabi_dcmpge>
 80046d8:	2800      	cmp	r0, #0
 80046da:	f43f aefb 	beq.w	80044d4 <__ieee754_pow+0x78c>
 80046de:	e7e9      	b.n	80046b4 <__ieee754_pow+0x96c>
 80046e0:	f04f 0a00 	mov.w	sl, #0
 80046e4:	e720      	b.n	8004528 <__ieee754_pow+0x7e0>
 80046e6:	4621      	mov	r1, r4
 80046e8:	e7d6      	b.n	8004698 <__ieee754_pow+0x950>
 80046ea:	f04f 0b00 	mov.w	fp, #0
 80046ee:	f8df c078 	ldr.w	ip, [pc, #120]	; 8004768 <__ieee754_pow+0xa20>
 80046f2:	f7ff bbb9 	b.w	8003e68 <__ieee754_pow+0x120>
 80046f6:	f04f 0b00 	mov.w	fp, #0
 80046fa:	f04f 0c00 	mov.w	ip, #0
 80046fe:	f7ff bbb3 	b.w	8003e68 <__ieee754_pow+0x120>
 8004702:	4640      	mov	r0, r8
 8004704:	4649      	mov	r1, r9
 8004706:	f7ff bb3c 	b.w	8003d82 <__ieee754_pow+0x3a>
 800470a:	9200      	str	r2, [sp, #0]
 800470c:	f7ff bb88 	b.w	8003e20 <__ieee754_pow+0xd8>
 8004710:	2300      	movs	r3, #0
 8004712:	f7ff bb72 	b.w	8003dfa <__ieee754_pow+0xb2>
 8004716:	bf00      	nop
 8004718:	652b82fe 	.word	0x652b82fe
 800471c:	3c971547 	.word	0x3c971547
 8004720:	00000000 	.word	0x00000000
 8004724:	3fe62e43 	.word	0x3fe62e43
 8004728:	fefa39ef 	.word	0xfefa39ef
 800472c:	3fe62e42 	.word	0x3fe62e42
 8004730:	0ca86c39 	.word	0x0ca86c39
 8004734:	be205c61 	.word	0xbe205c61
 8004738:	72bea4d0 	.word	0x72bea4d0
 800473c:	3e663769 	.word	0x3e663769
 8004740:	c5d26bf1 	.word	0xc5d26bf1
 8004744:	3ebbbd41 	.word	0x3ebbbd41
 8004748:	af25de2c 	.word	0xaf25de2c
 800474c:	3f11566a 	.word	0x3f11566a
 8004750:	16bebd93 	.word	0x16bebd93
 8004754:	3f66c16c 	.word	0x3f66c16c
 8004758:	5555553e 	.word	0x5555553e
 800475c:	3fc55555 	.word	0x3fc55555
 8004760:	3fe00000 	.word	0x3fe00000
 8004764:	fff00000 	.word	0xfff00000
 8004768:	3ff00000 	.word	0x3ff00000
 800476c:	4090cbff 	.word	0x4090cbff
 8004770:	3f6f3400 	.word	0x3f6f3400

08004774 <fabs>:
 8004774:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8004778:	4619      	mov	r1, r3
 800477a:	4770      	bx	lr
 800477c:	0000      	movs	r0, r0
	...

08004780 <scalbn>:
 8004780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004782:	4616      	mov	r6, r2
 8004784:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8004788:	4604      	mov	r4, r0
 800478a:	460d      	mov	r5, r1
 800478c:	460b      	mov	r3, r1
 800478e:	b992      	cbnz	r2, 80047b6 <scalbn+0x36>
 8004790:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8004794:	4303      	orrs	r3, r0
 8004796:	d03c      	beq.n	8004812 <scalbn+0x92>
 8004798:	4b31      	ldr	r3, [pc, #196]	; (8004860 <scalbn+0xe0>)
 800479a:	2200      	movs	r2, #0
 800479c:	f7fb fe94 	bl	80004c8 <__aeabi_dmul>
 80047a0:	4b30      	ldr	r3, [pc, #192]	; (8004864 <scalbn+0xe4>)
 80047a2:	4604      	mov	r4, r0
 80047a4:	429e      	cmp	r6, r3
 80047a6:	460d      	mov	r5, r1
 80047a8:	da0f      	bge.n	80047ca <scalbn+0x4a>
 80047aa:	a329      	add	r3, pc, #164	; (adr r3, 8004850 <scalbn+0xd0>)
 80047ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047b0:	f7fb fe8a 	bl	80004c8 <__aeabi_dmul>
 80047b4:	e006      	b.n	80047c4 <scalbn+0x44>
 80047b6:	f240 77ff 	movw	r7, #2047	; 0x7ff
 80047ba:	42ba      	cmp	r2, r7
 80047bc:	d109      	bne.n	80047d2 <scalbn+0x52>
 80047be:	4602      	mov	r2, r0
 80047c0:	f7fb fccc 	bl	800015c <__adddf3>
 80047c4:	4604      	mov	r4, r0
 80047c6:	460d      	mov	r5, r1
 80047c8:	e023      	b.n	8004812 <scalbn+0x92>
 80047ca:	460b      	mov	r3, r1
 80047cc:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80047d0:	3a36      	subs	r2, #54	; 0x36
 80047d2:	f24c 3150 	movw	r1, #50000	; 0xc350
 80047d6:	428e      	cmp	r6, r1
 80047d8:	dd0e      	ble.n	80047f8 <scalbn+0x78>
 80047da:	a31f      	add	r3, pc, #124	; (adr r3, 8004858 <scalbn+0xd8>)
 80047dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047e0:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 80047e4:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 80047e8:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 80047ec:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 80047f0:	481d      	ldr	r0, [pc, #116]	; (8004868 <scalbn+0xe8>)
 80047f2:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 80047f6:	e7db      	b.n	80047b0 <scalbn+0x30>
 80047f8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80047fc:	4432      	add	r2, r6
 80047fe:	428a      	cmp	r2, r1
 8004800:	dceb      	bgt.n	80047da <scalbn+0x5a>
 8004802:	2a00      	cmp	r2, #0
 8004804:	dd08      	ble.n	8004818 <scalbn+0x98>
 8004806:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800480a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800480e:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8004812:	4620      	mov	r0, r4
 8004814:	4629      	mov	r1, r5
 8004816:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004818:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800481c:	da0c      	bge.n	8004838 <scalbn+0xb8>
 800481e:	a30c      	add	r3, pc, #48	; (adr r3, 8004850 <scalbn+0xd0>)
 8004820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004824:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 8004828:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 800482c:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 8004830:	480e      	ldr	r0, [pc, #56]	; (800486c <scalbn+0xec>)
 8004832:	f041 011f 	orr.w	r1, r1, #31
 8004836:	e7bb      	b.n	80047b0 <scalbn+0x30>
 8004838:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800483c:	3236      	adds	r2, #54	; 0x36
 800483e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004842:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8004846:	4620      	mov	r0, r4
 8004848:	4629      	mov	r1, r5
 800484a:	2200      	movs	r2, #0
 800484c:	4b08      	ldr	r3, [pc, #32]	; (8004870 <scalbn+0xf0>)
 800484e:	e7af      	b.n	80047b0 <scalbn+0x30>
 8004850:	c2f8f359 	.word	0xc2f8f359
 8004854:	01a56e1f 	.word	0x01a56e1f
 8004858:	8800759c 	.word	0x8800759c
 800485c:	7e37e43c 	.word	0x7e37e43c
 8004860:	43500000 	.word	0x43500000
 8004864:	ffff3cb0 	.word	0xffff3cb0
 8004868:	8800759c 	.word	0x8800759c
 800486c:	c2f8f359 	.word	0xc2f8f359
 8004870:	3c900000 	.word	0x3c900000

08004874 <with_errno>:
 8004874:	b570      	push	{r4, r5, r6, lr}
 8004876:	4604      	mov	r4, r0
 8004878:	460d      	mov	r5, r1
 800487a:	4616      	mov	r6, r2
 800487c:	f7ff f9ca 	bl	8003c14 <__errno>
 8004880:	4629      	mov	r1, r5
 8004882:	6006      	str	r6, [r0, #0]
 8004884:	4620      	mov	r0, r4
 8004886:	bd70      	pop	{r4, r5, r6, pc}

08004888 <xflow>:
 8004888:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800488a:	4615      	mov	r5, r2
 800488c:	461c      	mov	r4, r3
 800488e:	b180      	cbz	r0, 80048b2 <xflow+0x2a>
 8004890:	4610      	mov	r0, r2
 8004892:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8004896:	e9cd 0100 	strd	r0, r1, [sp]
 800489a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800489e:	4628      	mov	r0, r5
 80048a0:	4621      	mov	r1, r4
 80048a2:	f7fb fe11 	bl	80004c8 <__aeabi_dmul>
 80048a6:	2222      	movs	r2, #34	; 0x22
 80048a8:	b003      	add	sp, #12
 80048aa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80048ae:	f7ff bfe1 	b.w	8004874 <with_errno>
 80048b2:	4610      	mov	r0, r2
 80048b4:	4619      	mov	r1, r3
 80048b6:	e7ee      	b.n	8004896 <xflow+0xe>

080048b8 <__math_uflow>:
 80048b8:	2200      	movs	r2, #0
 80048ba:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80048be:	f7ff bfe3 	b.w	8004888 <xflow>

080048c2 <__math_oflow>:
 80048c2:	2200      	movs	r2, #0
 80048c4:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 80048c8:	f7ff bfde 	b.w	8004888 <xflow>

080048cc <__ieee754_sqrt>:
 80048cc:	f8df c1a0 	ldr.w	ip, [pc, #416]	; 8004a70 <__ieee754_sqrt+0x1a4>
 80048d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048d4:	ea3c 0c01 	bics.w	ip, ip, r1
 80048d8:	460b      	mov	r3, r1
 80048da:	4606      	mov	r6, r0
 80048dc:	460d      	mov	r5, r1
 80048de:	460a      	mov	r2, r1
 80048e0:	4604      	mov	r4, r0
 80048e2:	d10e      	bne.n	8004902 <__ieee754_sqrt+0x36>
 80048e4:	4602      	mov	r2, r0
 80048e6:	f7fb fdef 	bl	80004c8 <__aeabi_dmul>
 80048ea:	4602      	mov	r2, r0
 80048ec:	460b      	mov	r3, r1
 80048ee:	4630      	mov	r0, r6
 80048f0:	4629      	mov	r1, r5
 80048f2:	f7fb fc33 	bl	800015c <__adddf3>
 80048f6:	4606      	mov	r6, r0
 80048f8:	460d      	mov	r5, r1
 80048fa:	4630      	mov	r0, r6
 80048fc:	4629      	mov	r1, r5
 80048fe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004902:	2900      	cmp	r1, #0
 8004904:	dc0d      	bgt.n	8004922 <__ieee754_sqrt+0x56>
 8004906:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800490a:	ea5c 0c00 	orrs.w	ip, ip, r0
 800490e:	d0f4      	beq.n	80048fa <__ieee754_sqrt+0x2e>
 8004910:	b139      	cbz	r1, 8004922 <__ieee754_sqrt+0x56>
 8004912:	4602      	mov	r2, r0
 8004914:	f7fb fc20 	bl	8000158 <__aeabi_dsub>
 8004918:	4602      	mov	r2, r0
 800491a:	460b      	mov	r3, r1
 800491c:	f7fb fefe 	bl	800071c <__aeabi_ddiv>
 8004920:	e7e9      	b.n	80048f6 <__ieee754_sqrt+0x2a>
 8004922:	1512      	asrs	r2, r2, #20
 8004924:	f000 8089 	beq.w	8004a3a <__ieee754_sqrt+0x16e>
 8004928:	2500      	movs	r5, #0
 800492a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800492e:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8004932:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004936:	07d2      	lsls	r2, r2, #31
 8004938:	bf5c      	itt	pl
 800493a:	005b      	lslpl	r3, r3, #1
 800493c:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 8004940:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8004944:	bf58      	it	pl
 8004946:	0064      	lslpl	r4, r4, #1
 8004948:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800494c:	0062      	lsls	r2, r4, #1
 800494e:	2016      	movs	r0, #22
 8004950:	4629      	mov	r1, r5
 8004952:	f44f 1400 	mov.w	r4, #2097152	; 0x200000
 8004956:	1076      	asrs	r6, r6, #1
 8004958:	190f      	adds	r7, r1, r4
 800495a:	429f      	cmp	r7, r3
 800495c:	bfde      	ittt	le
 800495e:	1bdb      	suble	r3, r3, r7
 8004960:	1939      	addle	r1, r7, r4
 8004962:	192d      	addle	r5, r5, r4
 8004964:	005b      	lsls	r3, r3, #1
 8004966:	3801      	subs	r0, #1
 8004968:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800496c:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8004970:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8004974:	d1f0      	bne.n	8004958 <__ieee754_sqrt+0x8c>
 8004976:	4604      	mov	r4, r0
 8004978:	2720      	movs	r7, #32
 800497a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800497e:	428b      	cmp	r3, r1
 8004980:	eb0c 0e00 	add.w	lr, ip, r0
 8004984:	dc02      	bgt.n	800498c <__ieee754_sqrt+0xc0>
 8004986:	d113      	bne.n	80049b0 <__ieee754_sqrt+0xe4>
 8004988:	4596      	cmp	lr, r2
 800498a:	d811      	bhi.n	80049b0 <__ieee754_sqrt+0xe4>
 800498c:	f1be 0f00 	cmp.w	lr, #0
 8004990:	eb0e 000c 	add.w	r0, lr, ip
 8004994:	da56      	bge.n	8004a44 <__ieee754_sqrt+0x178>
 8004996:	2800      	cmp	r0, #0
 8004998:	db54      	blt.n	8004a44 <__ieee754_sqrt+0x178>
 800499a:	f101 0801 	add.w	r8, r1, #1
 800499e:	1a5b      	subs	r3, r3, r1
 80049a0:	4641      	mov	r1, r8
 80049a2:	4596      	cmp	lr, r2
 80049a4:	bf88      	it	hi
 80049a6:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80049aa:	eba2 020e 	sub.w	r2, r2, lr
 80049ae:	4464      	add	r4, ip
 80049b0:	005b      	lsls	r3, r3, #1
 80049b2:	3f01      	subs	r7, #1
 80049b4:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80049b8:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 80049bc:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80049c0:	d1dd      	bne.n	800497e <__ieee754_sqrt+0xb2>
 80049c2:	4313      	orrs	r3, r2
 80049c4:	d01b      	beq.n	80049fe <__ieee754_sqrt+0x132>
 80049c6:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8004a74 <__ieee754_sqrt+0x1a8>
 80049ca:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8004a78 <__ieee754_sqrt+0x1ac>
 80049ce:	e9da 0100 	ldrd	r0, r1, [sl]
 80049d2:	e9db 2300 	ldrd	r2, r3, [fp]
 80049d6:	f7fb fbbf 	bl	8000158 <__aeabi_dsub>
 80049da:	e9da 8900 	ldrd	r8, r9, [sl]
 80049de:	4602      	mov	r2, r0
 80049e0:	460b      	mov	r3, r1
 80049e2:	4640      	mov	r0, r8
 80049e4:	4649      	mov	r1, r9
 80049e6:	f7fb ffeb 	bl	80009c0 <__aeabi_dcmple>
 80049ea:	b140      	cbz	r0, 80049fe <__ieee754_sqrt+0x132>
 80049ec:	e9da 0100 	ldrd	r0, r1, [sl]
 80049f0:	e9db 2300 	ldrd	r2, r3, [fp]
 80049f4:	f1b4 3fff 	cmp.w	r4, #4294967295
 80049f8:	d126      	bne.n	8004a48 <__ieee754_sqrt+0x17c>
 80049fa:	463c      	mov	r4, r7
 80049fc:	3501      	adds	r5, #1
 80049fe:	106b      	asrs	r3, r5, #1
 8004a00:	0864      	lsrs	r4, r4, #1
 8004a02:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8004a06:	07ea      	lsls	r2, r5, #31
 8004a08:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8004a0c:	bf48      	it	mi
 8004a0e:	f044 4400 	orrmi.w	r4, r4, #2147483648	; 0x80000000
 8004a12:	4620      	mov	r0, r4
 8004a14:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 8004a18:	e76d      	b.n	80048f6 <__ieee754_sqrt+0x2a>
 8004a1a:	0ae3      	lsrs	r3, r4, #11
 8004a1c:	3915      	subs	r1, #21
 8004a1e:	0564      	lsls	r4, r4, #21
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d0fa      	beq.n	8004a1a <__ieee754_sqrt+0x14e>
 8004a24:	02d8      	lsls	r0, r3, #11
 8004a26:	d50a      	bpl.n	8004a3e <__ieee754_sqrt+0x172>
 8004a28:	f1c2 0020 	rsb	r0, r2, #32
 8004a2c:	fa24 f000 	lsr.w	r0, r4, r0
 8004a30:	1e55      	subs	r5, r2, #1
 8004a32:	4094      	lsls	r4, r2
 8004a34:	4303      	orrs	r3, r0
 8004a36:	1b4a      	subs	r2, r1, r5
 8004a38:	e776      	b.n	8004928 <__ieee754_sqrt+0x5c>
 8004a3a:	4611      	mov	r1, r2
 8004a3c:	e7f0      	b.n	8004a20 <__ieee754_sqrt+0x154>
 8004a3e:	005b      	lsls	r3, r3, #1
 8004a40:	3201      	adds	r2, #1
 8004a42:	e7ef      	b.n	8004a24 <__ieee754_sqrt+0x158>
 8004a44:	4688      	mov	r8, r1
 8004a46:	e7aa      	b.n	800499e <__ieee754_sqrt+0xd2>
 8004a48:	f7fb fb88 	bl	800015c <__adddf3>
 8004a4c:	e9da 8900 	ldrd	r8, r9, [sl]
 8004a50:	4602      	mov	r2, r0
 8004a52:	460b      	mov	r3, r1
 8004a54:	4640      	mov	r0, r8
 8004a56:	4649      	mov	r1, r9
 8004a58:	f7fb ffa8 	bl	80009ac <__aeabi_dcmplt>
 8004a5c:	b120      	cbz	r0, 8004a68 <__ieee754_sqrt+0x19c>
 8004a5e:	1ca1      	adds	r1, r4, #2
 8004a60:	bf08      	it	eq
 8004a62:	3501      	addeq	r5, #1
 8004a64:	3402      	adds	r4, #2
 8004a66:	e7ca      	b.n	80049fe <__ieee754_sqrt+0x132>
 8004a68:	3401      	adds	r4, #1
 8004a6a:	f024 0401 	bic.w	r4, r4, #1
 8004a6e:	e7c6      	b.n	80049fe <__ieee754_sqrt+0x132>
 8004a70:	7ff00000 	.word	0x7ff00000
 8004a74:	20000060 	.word	0x20000060
 8004a78:	20000068 	.word	0x20000068

08004a7c <_init>:
 8004a7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a7e:	bf00      	nop
 8004a80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a82:	bc08      	pop	{r3}
 8004a84:	469e      	mov	lr, r3
 8004a86:	4770      	bx	lr

08004a88 <_fini>:
 8004a88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a8a:	bf00      	nop
 8004a8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a8e:	bc08      	pop	{r3}
 8004a90:	469e      	mov	lr, r3
 8004a92:	4770      	bx	lr
