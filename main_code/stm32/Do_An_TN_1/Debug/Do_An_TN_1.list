
Do_An_TN_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e088  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000610  0800e218  0800e218  0000f218  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e828  0800e828  00010230  2**0
                  CONTENTS
  4 .ARM          00000008  0800e828  0800e828  0000f828  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e830  0800e830  00010230  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e830  0800e830  0000f830  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e834  0800e834  0000f834  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000230  20000000  0800e838  00010000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00010230  2**0
                  CONTENTS
 10 .bss          0000c5c0  20000230  20000230  00010230  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  2000c7f0  2000c7f0  00010230  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00010230  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014649  00000000  00000000  00010260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000027b2  00000000  00000000  000248a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001330  00000000  00000000  00027060  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f2b  00000000  00000000  00028390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000035a2  00000000  00000000  000292bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017023  00000000  00000000  0002c85d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d2b2a  00000000  00000000  00043880  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001163aa  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006a24  00000000  00000000  001163f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006a  00000000  00000000  0011ce14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000230 	.word	0x20000230
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800e200 	.word	0x0800e200

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000234 	.word	0x20000234
 80001cc:	0800e200 	.word	0x0800e200

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_frsub>:
 8000c88:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000c8c:	e002      	b.n	8000c94 <__addsf3>
 8000c8e:	bf00      	nop

08000c90 <__aeabi_fsub>:
 8000c90:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000c94 <__addsf3>:
 8000c94:	0042      	lsls	r2, r0, #1
 8000c96:	bf1f      	itttt	ne
 8000c98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c9c:	ea92 0f03 	teqne	r2, r3
 8000ca0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ca4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ca8:	d06a      	beq.n	8000d80 <__addsf3+0xec>
 8000caa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000cae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000cb2:	bfc1      	itttt	gt
 8000cb4:	18d2      	addgt	r2, r2, r3
 8000cb6:	4041      	eorgt	r1, r0
 8000cb8:	4048      	eorgt	r0, r1
 8000cba:	4041      	eorgt	r1, r0
 8000cbc:	bfb8      	it	lt
 8000cbe:	425b      	neglt	r3, r3
 8000cc0:	2b19      	cmp	r3, #25
 8000cc2:	bf88      	it	hi
 8000cc4:	4770      	bxhi	lr
 8000cc6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000cca:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cce:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000cd2:	bf18      	it	ne
 8000cd4:	4240      	negne	r0, r0
 8000cd6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000cda:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000cde:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000ce2:	bf18      	it	ne
 8000ce4:	4249      	negne	r1, r1
 8000ce6:	ea92 0f03 	teq	r2, r3
 8000cea:	d03f      	beq.n	8000d6c <__addsf3+0xd8>
 8000cec:	f1a2 0201 	sub.w	r2, r2, #1
 8000cf0:	fa41 fc03 	asr.w	ip, r1, r3
 8000cf4:	eb10 000c 	adds.w	r0, r0, ip
 8000cf8:	f1c3 0320 	rsb	r3, r3, #32
 8000cfc:	fa01 f103 	lsl.w	r1, r1, r3
 8000d00:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000d04:	d502      	bpl.n	8000d0c <__addsf3+0x78>
 8000d06:	4249      	negs	r1, r1
 8000d08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000d0c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000d10:	d313      	bcc.n	8000d3a <__addsf3+0xa6>
 8000d12:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000d16:	d306      	bcc.n	8000d26 <__addsf3+0x92>
 8000d18:	0840      	lsrs	r0, r0, #1
 8000d1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000d1e:	f102 0201 	add.w	r2, r2, #1
 8000d22:	2afe      	cmp	r2, #254	@ 0xfe
 8000d24:	d251      	bcs.n	8000dca <__addsf3+0x136>
 8000d26:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000d2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d2e:	bf08      	it	eq
 8000d30:	f020 0001 	biceq.w	r0, r0, #1
 8000d34:	ea40 0003 	orr.w	r0, r0, r3
 8000d38:	4770      	bx	lr
 8000d3a:	0049      	lsls	r1, r1, #1
 8000d3c:	eb40 0000 	adc.w	r0, r0, r0
 8000d40:	3a01      	subs	r2, #1
 8000d42:	bf28      	it	cs
 8000d44:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000d48:	d2ed      	bcs.n	8000d26 <__addsf3+0x92>
 8000d4a:	fab0 fc80 	clz	ip, r0
 8000d4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d52:	ebb2 020c 	subs.w	r2, r2, ip
 8000d56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d5a:	bfaa      	itet	ge
 8000d5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d60:	4252      	neglt	r2, r2
 8000d62:	4318      	orrge	r0, r3
 8000d64:	bfbc      	itt	lt
 8000d66:	40d0      	lsrlt	r0, r2
 8000d68:	4318      	orrlt	r0, r3
 8000d6a:	4770      	bx	lr
 8000d6c:	f092 0f00 	teq	r2, #0
 8000d70:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000d74:	bf06      	itte	eq
 8000d76:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000d7a:	3201      	addeq	r2, #1
 8000d7c:	3b01      	subne	r3, #1
 8000d7e:	e7b5      	b.n	8000cec <__addsf3+0x58>
 8000d80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d88:	bf18      	it	ne
 8000d8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d8e:	d021      	beq.n	8000dd4 <__addsf3+0x140>
 8000d90:	ea92 0f03 	teq	r2, r3
 8000d94:	d004      	beq.n	8000da0 <__addsf3+0x10c>
 8000d96:	f092 0f00 	teq	r2, #0
 8000d9a:	bf08      	it	eq
 8000d9c:	4608      	moveq	r0, r1
 8000d9e:	4770      	bx	lr
 8000da0:	ea90 0f01 	teq	r0, r1
 8000da4:	bf1c      	itt	ne
 8000da6:	2000      	movne	r0, #0
 8000da8:	4770      	bxne	lr
 8000daa:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000dae:	d104      	bne.n	8000dba <__addsf3+0x126>
 8000db0:	0040      	lsls	r0, r0, #1
 8000db2:	bf28      	it	cs
 8000db4:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000db8:	4770      	bx	lr
 8000dba:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000dbe:	bf3c      	itt	cc
 8000dc0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000dc4:	4770      	bxcc	lr
 8000dc6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000dca:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000dce:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000dd2:	4770      	bx	lr
 8000dd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000dd8:	bf16      	itet	ne
 8000dda:	4608      	movne	r0, r1
 8000ddc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000de0:	4601      	movne	r1, r0
 8000de2:	0242      	lsls	r2, r0, #9
 8000de4:	bf06      	itte	eq
 8000de6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000dea:	ea90 0f01 	teqeq	r0, r1
 8000dee:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000df2:	4770      	bx	lr

08000df4 <__aeabi_ui2f>:
 8000df4:	f04f 0300 	mov.w	r3, #0
 8000df8:	e004      	b.n	8000e04 <__aeabi_i2f+0x8>
 8000dfa:	bf00      	nop

08000dfc <__aeabi_i2f>:
 8000dfc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000e00:	bf48      	it	mi
 8000e02:	4240      	negmi	r0, r0
 8000e04:	ea5f 0c00 	movs.w	ip, r0
 8000e08:	bf08      	it	eq
 8000e0a:	4770      	bxeq	lr
 8000e0c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000e10:	4601      	mov	r1, r0
 8000e12:	f04f 0000 	mov.w	r0, #0
 8000e16:	e01c      	b.n	8000e52 <__aeabi_l2f+0x2a>

08000e18 <__aeabi_ul2f>:
 8000e18:	ea50 0201 	orrs.w	r2, r0, r1
 8000e1c:	bf08      	it	eq
 8000e1e:	4770      	bxeq	lr
 8000e20:	f04f 0300 	mov.w	r3, #0
 8000e24:	e00a      	b.n	8000e3c <__aeabi_l2f+0x14>
 8000e26:	bf00      	nop

08000e28 <__aeabi_l2f>:
 8000e28:	ea50 0201 	orrs.w	r2, r0, r1
 8000e2c:	bf08      	it	eq
 8000e2e:	4770      	bxeq	lr
 8000e30:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000e34:	d502      	bpl.n	8000e3c <__aeabi_l2f+0x14>
 8000e36:	4240      	negs	r0, r0
 8000e38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e3c:	ea5f 0c01 	movs.w	ip, r1
 8000e40:	bf02      	ittt	eq
 8000e42:	4684      	moveq	ip, r0
 8000e44:	4601      	moveq	r1, r0
 8000e46:	2000      	moveq	r0, #0
 8000e48:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000e4c:	bf08      	it	eq
 8000e4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000e52:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000e56:	fabc f28c 	clz	r2, ip
 8000e5a:	3a08      	subs	r2, #8
 8000e5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e60:	db10      	blt.n	8000e84 <__aeabi_l2f+0x5c>
 8000e62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e66:	4463      	add	r3, ip
 8000e68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e6c:	f1c2 0220 	rsb	r2, r2, #32
 8000e70:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000e74:	fa20 f202 	lsr.w	r2, r0, r2
 8000e78:	eb43 0002 	adc.w	r0, r3, r2
 8000e7c:	bf08      	it	eq
 8000e7e:	f020 0001 	biceq.w	r0, r0, #1
 8000e82:	4770      	bx	lr
 8000e84:	f102 0220 	add.w	r2, r2, #32
 8000e88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e8c:	f1c2 0220 	rsb	r2, r2, #32
 8000e90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e94:	fa21 f202 	lsr.w	r2, r1, r2
 8000e98:	eb43 0002 	adc.w	r0, r3, r2
 8000e9c:	bf08      	it	eq
 8000e9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ea2:	4770      	bx	lr

08000ea4 <__aeabi_uldivmod>:
 8000ea4:	b953      	cbnz	r3, 8000ebc <__aeabi_uldivmod+0x18>
 8000ea6:	b94a      	cbnz	r2, 8000ebc <__aeabi_uldivmod+0x18>
 8000ea8:	2900      	cmp	r1, #0
 8000eaa:	bf08      	it	eq
 8000eac:	2800      	cmpeq	r0, #0
 8000eae:	bf1c      	itt	ne
 8000eb0:	f04f 31ff 	movne.w	r1, #4294967295
 8000eb4:	f04f 30ff 	movne.w	r0, #4294967295
 8000eb8:	f000 b988 	b.w	80011cc <__aeabi_idiv0>
 8000ebc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ec0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ec4:	f000 f824 	bl	8000f10 <__udivmoddi4>
 8000ec8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ecc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ed0:	b004      	add	sp, #16
 8000ed2:	4770      	bx	lr

08000ed4 <__aeabi_d2ulz>:
 8000ed4:	b5d0      	push	{r4, r6, r7, lr}
 8000ed6:	4b0c      	ldr	r3, [pc, #48]	@ (8000f08 <__aeabi_d2ulz+0x34>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	4606      	mov	r6, r0
 8000edc:	460f      	mov	r7, r1
 8000ede:	f7ff fb8b 	bl	80005f8 <__aeabi_dmul>
 8000ee2:	f7ff fe61 	bl	8000ba8 <__aeabi_d2uiz>
 8000ee6:	4604      	mov	r4, r0
 8000ee8:	f7ff fb0c 	bl	8000504 <__aeabi_ui2d>
 8000eec:	4b07      	ldr	r3, [pc, #28]	@ (8000f0c <__aeabi_d2ulz+0x38>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	f7ff fb82 	bl	80005f8 <__aeabi_dmul>
 8000ef4:	4602      	mov	r2, r0
 8000ef6:	460b      	mov	r3, r1
 8000ef8:	4630      	mov	r0, r6
 8000efa:	4639      	mov	r1, r7
 8000efc:	f7ff f9c4 	bl	8000288 <__aeabi_dsub>
 8000f00:	f7ff fe52 	bl	8000ba8 <__aeabi_d2uiz>
 8000f04:	4621      	mov	r1, r4
 8000f06:	bdd0      	pop	{r4, r6, r7, pc}
 8000f08:	3df00000 	.word	0x3df00000
 8000f0c:	41f00000 	.word	0x41f00000

08000f10 <__udivmoddi4>:
 8000f10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000f14:	9d08      	ldr	r5, [sp, #32]
 8000f16:	460c      	mov	r4, r1
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d14e      	bne.n	8000fba <__udivmoddi4+0xaa>
 8000f1c:	4694      	mov	ip, r2
 8000f1e:	458c      	cmp	ip, r1
 8000f20:	4686      	mov	lr, r0
 8000f22:	fab2 f282 	clz	r2, r2
 8000f26:	d962      	bls.n	8000fee <__udivmoddi4+0xde>
 8000f28:	b14a      	cbz	r2, 8000f3e <__udivmoddi4+0x2e>
 8000f2a:	f1c2 0320 	rsb	r3, r2, #32
 8000f2e:	4091      	lsls	r1, r2
 8000f30:	fa20 f303 	lsr.w	r3, r0, r3
 8000f34:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f38:	4319      	orrs	r1, r3
 8000f3a:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f3e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f42:	fa1f f68c 	uxth.w	r6, ip
 8000f46:	fbb1 f4f7 	udiv	r4, r1, r7
 8000f4a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000f4e:	fb07 1114 	mls	r1, r7, r4, r1
 8000f52:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f56:	fb04 f106 	mul.w	r1, r4, r6
 8000f5a:	4299      	cmp	r1, r3
 8000f5c:	d90a      	bls.n	8000f74 <__udivmoddi4+0x64>
 8000f5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f62:	f104 30ff 	add.w	r0, r4, #4294967295
 8000f66:	f080 8112 	bcs.w	800118e <__udivmoddi4+0x27e>
 8000f6a:	4299      	cmp	r1, r3
 8000f6c:	f240 810f 	bls.w	800118e <__udivmoddi4+0x27e>
 8000f70:	3c02      	subs	r4, #2
 8000f72:	4463      	add	r3, ip
 8000f74:	1a59      	subs	r1, r3, r1
 8000f76:	fa1f f38e 	uxth.w	r3, lr
 8000f7a:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f7e:	fb07 1110 	mls	r1, r7, r0, r1
 8000f82:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f86:	fb00 f606 	mul.w	r6, r0, r6
 8000f8a:	429e      	cmp	r6, r3
 8000f8c:	d90a      	bls.n	8000fa4 <__udivmoddi4+0x94>
 8000f8e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f92:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f96:	f080 80fc 	bcs.w	8001192 <__udivmoddi4+0x282>
 8000f9a:	429e      	cmp	r6, r3
 8000f9c:	f240 80f9 	bls.w	8001192 <__udivmoddi4+0x282>
 8000fa0:	4463      	add	r3, ip
 8000fa2:	3802      	subs	r0, #2
 8000fa4:	1b9b      	subs	r3, r3, r6
 8000fa6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000faa:	2100      	movs	r1, #0
 8000fac:	b11d      	cbz	r5, 8000fb6 <__udivmoddi4+0xa6>
 8000fae:	40d3      	lsrs	r3, r2
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	e9c5 3200 	strd	r3, r2, [r5]
 8000fb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fba:	428b      	cmp	r3, r1
 8000fbc:	d905      	bls.n	8000fca <__udivmoddi4+0xba>
 8000fbe:	b10d      	cbz	r5, 8000fc4 <__udivmoddi4+0xb4>
 8000fc0:	e9c5 0100 	strd	r0, r1, [r5]
 8000fc4:	2100      	movs	r1, #0
 8000fc6:	4608      	mov	r0, r1
 8000fc8:	e7f5      	b.n	8000fb6 <__udivmoddi4+0xa6>
 8000fca:	fab3 f183 	clz	r1, r3
 8000fce:	2900      	cmp	r1, #0
 8000fd0:	d146      	bne.n	8001060 <__udivmoddi4+0x150>
 8000fd2:	42a3      	cmp	r3, r4
 8000fd4:	d302      	bcc.n	8000fdc <__udivmoddi4+0xcc>
 8000fd6:	4290      	cmp	r0, r2
 8000fd8:	f0c0 80f0 	bcc.w	80011bc <__udivmoddi4+0x2ac>
 8000fdc:	1a86      	subs	r6, r0, r2
 8000fde:	eb64 0303 	sbc.w	r3, r4, r3
 8000fe2:	2001      	movs	r0, #1
 8000fe4:	2d00      	cmp	r5, #0
 8000fe6:	d0e6      	beq.n	8000fb6 <__udivmoddi4+0xa6>
 8000fe8:	e9c5 6300 	strd	r6, r3, [r5]
 8000fec:	e7e3      	b.n	8000fb6 <__udivmoddi4+0xa6>
 8000fee:	2a00      	cmp	r2, #0
 8000ff0:	f040 8090 	bne.w	8001114 <__udivmoddi4+0x204>
 8000ff4:	eba1 040c 	sub.w	r4, r1, ip
 8000ff8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ffc:	fa1f f78c 	uxth.w	r7, ip
 8001000:	2101      	movs	r1, #1
 8001002:	fbb4 f6f8 	udiv	r6, r4, r8
 8001006:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800100a:	fb08 4416 	mls	r4, r8, r6, r4
 800100e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8001012:	fb07 f006 	mul.w	r0, r7, r6
 8001016:	4298      	cmp	r0, r3
 8001018:	d908      	bls.n	800102c <__udivmoddi4+0x11c>
 800101a:	eb1c 0303 	adds.w	r3, ip, r3
 800101e:	f106 34ff 	add.w	r4, r6, #4294967295
 8001022:	d202      	bcs.n	800102a <__udivmoddi4+0x11a>
 8001024:	4298      	cmp	r0, r3
 8001026:	f200 80cd 	bhi.w	80011c4 <__udivmoddi4+0x2b4>
 800102a:	4626      	mov	r6, r4
 800102c:	1a1c      	subs	r4, r3, r0
 800102e:	fa1f f38e 	uxth.w	r3, lr
 8001032:	fbb4 f0f8 	udiv	r0, r4, r8
 8001036:	fb08 4410 	mls	r4, r8, r0, r4
 800103a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800103e:	fb00 f707 	mul.w	r7, r0, r7
 8001042:	429f      	cmp	r7, r3
 8001044:	d908      	bls.n	8001058 <__udivmoddi4+0x148>
 8001046:	eb1c 0303 	adds.w	r3, ip, r3
 800104a:	f100 34ff 	add.w	r4, r0, #4294967295
 800104e:	d202      	bcs.n	8001056 <__udivmoddi4+0x146>
 8001050:	429f      	cmp	r7, r3
 8001052:	f200 80b0 	bhi.w	80011b6 <__udivmoddi4+0x2a6>
 8001056:	4620      	mov	r0, r4
 8001058:	1bdb      	subs	r3, r3, r7
 800105a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800105e:	e7a5      	b.n	8000fac <__udivmoddi4+0x9c>
 8001060:	f1c1 0620 	rsb	r6, r1, #32
 8001064:	408b      	lsls	r3, r1
 8001066:	fa22 f706 	lsr.w	r7, r2, r6
 800106a:	431f      	orrs	r7, r3
 800106c:	fa20 fc06 	lsr.w	ip, r0, r6
 8001070:	fa04 f301 	lsl.w	r3, r4, r1
 8001074:	ea43 030c 	orr.w	r3, r3, ip
 8001078:	40f4      	lsrs	r4, r6
 800107a:	fa00 f801 	lsl.w	r8, r0, r1
 800107e:	0c38      	lsrs	r0, r7, #16
 8001080:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8001084:	fbb4 fef0 	udiv	lr, r4, r0
 8001088:	fa1f fc87 	uxth.w	ip, r7
 800108c:	fb00 441e 	mls	r4, r0, lr, r4
 8001090:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8001094:	fb0e f90c 	mul.w	r9, lr, ip
 8001098:	45a1      	cmp	r9, r4
 800109a:	fa02 f201 	lsl.w	r2, r2, r1
 800109e:	d90a      	bls.n	80010b6 <__udivmoddi4+0x1a6>
 80010a0:	193c      	adds	r4, r7, r4
 80010a2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80010a6:	f080 8084 	bcs.w	80011b2 <__udivmoddi4+0x2a2>
 80010aa:	45a1      	cmp	r9, r4
 80010ac:	f240 8081 	bls.w	80011b2 <__udivmoddi4+0x2a2>
 80010b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80010b4:	443c      	add	r4, r7
 80010b6:	eba4 0409 	sub.w	r4, r4, r9
 80010ba:	fa1f f983 	uxth.w	r9, r3
 80010be:	fbb4 f3f0 	udiv	r3, r4, r0
 80010c2:	fb00 4413 	mls	r4, r0, r3, r4
 80010c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80010ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80010ce:	45a4      	cmp	ip, r4
 80010d0:	d907      	bls.n	80010e2 <__udivmoddi4+0x1d2>
 80010d2:	193c      	adds	r4, r7, r4
 80010d4:	f103 30ff 	add.w	r0, r3, #4294967295
 80010d8:	d267      	bcs.n	80011aa <__udivmoddi4+0x29a>
 80010da:	45a4      	cmp	ip, r4
 80010dc:	d965      	bls.n	80011aa <__udivmoddi4+0x29a>
 80010de:	3b02      	subs	r3, #2
 80010e0:	443c      	add	r4, r7
 80010e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80010e6:	fba0 9302 	umull	r9, r3, r0, r2
 80010ea:	eba4 040c 	sub.w	r4, r4, ip
 80010ee:	429c      	cmp	r4, r3
 80010f0:	46ce      	mov	lr, r9
 80010f2:	469c      	mov	ip, r3
 80010f4:	d351      	bcc.n	800119a <__udivmoddi4+0x28a>
 80010f6:	d04e      	beq.n	8001196 <__udivmoddi4+0x286>
 80010f8:	b155      	cbz	r5, 8001110 <__udivmoddi4+0x200>
 80010fa:	ebb8 030e 	subs.w	r3, r8, lr
 80010fe:	eb64 040c 	sbc.w	r4, r4, ip
 8001102:	fa04 f606 	lsl.w	r6, r4, r6
 8001106:	40cb      	lsrs	r3, r1
 8001108:	431e      	orrs	r6, r3
 800110a:	40cc      	lsrs	r4, r1
 800110c:	e9c5 6400 	strd	r6, r4, [r5]
 8001110:	2100      	movs	r1, #0
 8001112:	e750      	b.n	8000fb6 <__udivmoddi4+0xa6>
 8001114:	f1c2 0320 	rsb	r3, r2, #32
 8001118:	fa20 f103 	lsr.w	r1, r0, r3
 800111c:	fa0c fc02 	lsl.w	ip, ip, r2
 8001120:	fa24 f303 	lsr.w	r3, r4, r3
 8001124:	4094      	lsls	r4, r2
 8001126:	430c      	orrs	r4, r1
 8001128:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800112c:	fa00 fe02 	lsl.w	lr, r0, r2
 8001130:	fa1f f78c 	uxth.w	r7, ip
 8001134:	fbb3 f0f8 	udiv	r0, r3, r8
 8001138:	fb08 3110 	mls	r1, r8, r0, r3
 800113c:	0c23      	lsrs	r3, r4, #16
 800113e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001142:	fb00 f107 	mul.w	r1, r0, r7
 8001146:	4299      	cmp	r1, r3
 8001148:	d908      	bls.n	800115c <__udivmoddi4+0x24c>
 800114a:	eb1c 0303 	adds.w	r3, ip, r3
 800114e:	f100 36ff 	add.w	r6, r0, #4294967295
 8001152:	d22c      	bcs.n	80011ae <__udivmoddi4+0x29e>
 8001154:	4299      	cmp	r1, r3
 8001156:	d92a      	bls.n	80011ae <__udivmoddi4+0x29e>
 8001158:	3802      	subs	r0, #2
 800115a:	4463      	add	r3, ip
 800115c:	1a5b      	subs	r3, r3, r1
 800115e:	b2a4      	uxth	r4, r4
 8001160:	fbb3 f1f8 	udiv	r1, r3, r8
 8001164:	fb08 3311 	mls	r3, r8, r1, r3
 8001168:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800116c:	fb01 f307 	mul.w	r3, r1, r7
 8001170:	42a3      	cmp	r3, r4
 8001172:	d908      	bls.n	8001186 <__udivmoddi4+0x276>
 8001174:	eb1c 0404 	adds.w	r4, ip, r4
 8001178:	f101 36ff 	add.w	r6, r1, #4294967295
 800117c:	d213      	bcs.n	80011a6 <__udivmoddi4+0x296>
 800117e:	42a3      	cmp	r3, r4
 8001180:	d911      	bls.n	80011a6 <__udivmoddi4+0x296>
 8001182:	3902      	subs	r1, #2
 8001184:	4464      	add	r4, ip
 8001186:	1ae4      	subs	r4, r4, r3
 8001188:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800118c:	e739      	b.n	8001002 <__udivmoddi4+0xf2>
 800118e:	4604      	mov	r4, r0
 8001190:	e6f0      	b.n	8000f74 <__udivmoddi4+0x64>
 8001192:	4608      	mov	r0, r1
 8001194:	e706      	b.n	8000fa4 <__udivmoddi4+0x94>
 8001196:	45c8      	cmp	r8, r9
 8001198:	d2ae      	bcs.n	80010f8 <__udivmoddi4+0x1e8>
 800119a:	ebb9 0e02 	subs.w	lr, r9, r2
 800119e:	eb63 0c07 	sbc.w	ip, r3, r7
 80011a2:	3801      	subs	r0, #1
 80011a4:	e7a8      	b.n	80010f8 <__udivmoddi4+0x1e8>
 80011a6:	4631      	mov	r1, r6
 80011a8:	e7ed      	b.n	8001186 <__udivmoddi4+0x276>
 80011aa:	4603      	mov	r3, r0
 80011ac:	e799      	b.n	80010e2 <__udivmoddi4+0x1d2>
 80011ae:	4630      	mov	r0, r6
 80011b0:	e7d4      	b.n	800115c <__udivmoddi4+0x24c>
 80011b2:	46d6      	mov	lr, sl
 80011b4:	e77f      	b.n	80010b6 <__udivmoddi4+0x1a6>
 80011b6:	4463      	add	r3, ip
 80011b8:	3802      	subs	r0, #2
 80011ba:	e74d      	b.n	8001058 <__udivmoddi4+0x148>
 80011bc:	4606      	mov	r6, r0
 80011be:	4623      	mov	r3, r4
 80011c0:	4608      	mov	r0, r1
 80011c2:	e70f      	b.n	8000fe4 <__udivmoddi4+0xd4>
 80011c4:	3e02      	subs	r6, #2
 80011c6:	4463      	add	r3, ip
 80011c8:	e730      	b.n	800102c <__udivmoddi4+0x11c>
 80011ca:	bf00      	nop

080011cc <__aeabi_idiv0>:
 80011cc:	4770      	bx	lr
 80011ce:	bf00      	nop

080011d0 <Average_5_times>:
float GT_Convert_radian = 0.1047197551;
uint16_t HIGH_Limit_PWM = 999;
uint16_t LOW_Limit_PWM = 0;
int32_t delta = 0;

float Average_5_times(float Var, float Temp[20]){
 80011d0:	b480      	push	{r7}
 80011d2:	b087      	sub	sp, #28
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	ed87 0a01 	vstr	s0, [r7, #4]
 80011da:	6038      	str	r0, [r7, #0]
    float sum = 0, Out_Average_Var; // Initialize sum to 0
 80011dc:	f04f 0300 	mov.w	r3, #0
 80011e0:	617b      	str	r3, [r7, #20]
    for (int i = 0; i < 19; i++)
 80011e2:	2300      	movs	r3, #0
 80011e4:	613b      	str	r3, [r7, #16]
 80011e6:	e019      	b.n	800121c <Average_5_times+0x4c>
    {
        Temp[i] = Temp[i + 1];  // gán giá trị hiện tại vào giá trị trước
 80011e8:	693b      	ldr	r3, [r7, #16]
 80011ea:	3301      	adds	r3, #1
 80011ec:	009b      	lsls	r3, r3, #2
 80011ee:	683a      	ldr	r2, [r7, #0]
 80011f0:	441a      	add	r2, r3
 80011f2:	693b      	ldr	r3, [r7, #16]
 80011f4:	009b      	lsls	r3, r3, #2
 80011f6:	6839      	ldr	r1, [r7, #0]
 80011f8:	440b      	add	r3, r1
 80011fa:	6812      	ldr	r2, [r2, #0]
 80011fc:	601a      	str	r2, [r3, #0]
        sum += Temp[i];        // Cộng dần các giá trị vừa lưu
 80011fe:	693b      	ldr	r3, [r7, #16]
 8001200:	009b      	lsls	r3, r3, #2
 8001202:	683a      	ldr	r2, [r7, #0]
 8001204:	4413      	add	r3, r2
 8001206:	edd3 7a00 	vldr	s15, [r3]
 800120a:	ed97 7a05 	vldr	s14, [r7, #20]
 800120e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001212:	edc7 7a05 	vstr	s15, [r7, #20]
    for (int i = 0; i < 19; i++)
 8001216:	693b      	ldr	r3, [r7, #16]
 8001218:	3301      	adds	r3, #1
 800121a:	613b      	str	r3, [r7, #16]
 800121c:	693b      	ldr	r3, [r7, #16]
 800121e:	2b12      	cmp	r3, #18
 8001220:	dde2      	ble.n	80011e8 <Average_5_times+0x18>
    }
    // Gán giá trị mới nhất
    Temp[19] = Var;
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	334c      	adds	r3, #76	@ 0x4c
 8001226:	687a      	ldr	r2, [r7, #4]
 8001228:	601a      	str	r2, [r3, #0]
    sum += Temp[19] ;
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	334c      	adds	r3, #76	@ 0x4c
 800122e:	edd3 7a00 	vldr	s15, [r3]
 8001232:	ed97 7a05 	vldr	s14, [r7, #20]
 8001236:	ee77 7a27 	vadd.f32	s15, s14, s15
 800123a:	edc7 7a05 	vstr	s15, [r7, #20]
    // Tính trung bình
    Out_Average_Var = sum / 20;
 800123e:	ed97 7a05 	vldr	s14, [r7, #20]
 8001242:	eef3 6a04 	vmov.f32	s13, #52	@ 0x41a00000  20.0
 8001246:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800124a:	edc7 7a03 	vstr	s15, [r7, #12]

    return Out_Average_Var;
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	ee07 3a90 	vmov	s15, r3
}
 8001254:	eeb0 0a67 	vmov.f32	s0, s15
 8001258:	371c      	adds	r7, #28
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr
	...

08001264 <RPM_Calc>:

void read_encoder(TIM_HandleTypeDef* htim, struct Para_Motor* pt_Para_M){
	pt_Para_M->Encoder = __HAL_TIM_GET_COUNTER(htim);
}

void RPM_Calc(TIM_HandleTypeDef* htim, struct Para_Motor* pt_Para_M ){
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
 800126c:	6039      	str	r1, [r7, #0]

	pt_Para_M->Encoder = __HAL_TIM_GET_COUNTER(htim);		// Cập nhật encoder
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	669a      	str	r2, [r3, #104]	@ 0x68
	delta = abs(pt_Para_M->Encoder - pt_Para_M->Encoder_P);		//Lấy chênh lệch 2 khoảng encoder
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001280:	1ad3      	subs	r3, r2, r3
 8001282:	2b00      	cmp	r3, #0
 8001284:	bfb8      	it	lt
 8001286:	425b      	neglt	r3, r3
 8001288:	4a2c      	ldr	r2, [pc, #176]	@ (800133c <RPM_Calc+0xd8>)
 800128a:	6013      	str	r3, [r2, #0]

	// Kiểm tra giá trị chênh lệch lớn hơn nửa vòng là vô lý nên lấy giá trị tràn trừ giá trị chênh lệch
	if (delta >= __HAL_TIM_GET_AUTORELOAD(htim) / 2){
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001292:	085b      	lsrs	r3, r3, #1
 8001294:	4a29      	ldr	r2, [pc, #164]	@ (800133c <RPM_Calc+0xd8>)
 8001296:	6812      	ldr	r2, [r2, #0]
 8001298:	4293      	cmp	r3, r2
 800129a:	d808      	bhi.n	80012ae <RPM_Calc+0x4a>
		delta = __HAL_TIM_GET_AUTORELOAD(htim) - delta;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012a2:	4a26      	ldr	r2, [pc, #152]	@ (800133c <RPM_Calc+0xd8>)
 80012a4:	6812      	ldr	r2, [r2, #0]
 80012a6:	1a9b      	subs	r3, r3, r2
 80012a8:	461a      	mov	r2, r3
 80012aa:	4b24      	ldr	r3, [pc, #144]	@ (800133c <RPM_Calc+0xd8>)
 80012ac:	601a      	str	r2, [r3, #0]
	}
	pt_Para_M->RPM_Avg = (delta / (PPR*4*Time_Interrupt)*60);
 80012ae:	4b23      	ldr	r3, [pc, #140]	@ (800133c <RPM_Calc+0xd8>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	ee07 3a90 	vmov	s15, r3
 80012b6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80012ba:	4b21      	ldr	r3, [pc, #132]	@ (8001340 <RPM_Calc+0xdc>)
 80012bc:	881b      	ldrh	r3, [r3, #0]
 80012be:	009b      	lsls	r3, r3, #2
 80012c0:	ee07 3a90 	vmov	s15, r3
 80012c4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012c8:	4b1e      	ldr	r3, [pc, #120]	@ (8001344 <RPM_Calc+0xe0>)
 80012ca:	edd3 7a00 	vldr	s15, [r3]
 80012ce:	ee27 7a27 	vmul.f32	s14, s14, s15
 80012d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80012d6:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 8001348 <RPM_Calc+0xe4>
 80012da:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	edc3 7a1c 	vstr	s15, [r3, #112]	@ 0x70
	pt_Para_M->RPM = Average_5_times(pt_Para_M->RPM_Avg, pt_Para_M->Temp);
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	edd3 7a1c 	vldr	s15, [r3, #112]	@ 0x70
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	3378      	adds	r3, #120	@ 0x78
 80012ee:	4618      	mov	r0, r3
 80012f0:	eeb0 0a67 	vmov.f32	s0, s15
 80012f4:	f7ff ff6c 	bl	80011d0 <Average_5_times>
 80012f8:	eef0 7a40 	vmov.f32	s15, s0
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	edc3 7a1d 	vstr	s15, [r3, #116]	@ 0x74
	pt_Para_M->Rad_s = (pt_Para_M->RPM/60*2*PI_0)/1.5;  // Rad/s
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	ed93 7a1d 	vldr	s14, [r3, #116]	@ 0x74
 8001308:	eddf 6a0f 	vldr	s13, [pc, #60]	@ 8001348 <RPM_Calc+0xe4>
 800130c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001310:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001314:	4b0d      	ldr	r3, [pc, #52]	@ (800134c <RPM_Calc+0xe8>)
 8001316:	edd3 7a00 	vldr	s15, [r3]
 800131a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800131e:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8001322:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	edc3 7a33 	vstr	s15, [r3, #204]	@ 0xcc

	pt_Para_M->Encoder_P = pt_Para_M->Encoder;
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	66da      	str	r2, [r3, #108]	@ 0x6c

}
 8001334:	bf00      	nop
 8001336:	3708      	adds	r7, #8
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}
 800133c:	20000250 	.word	0x20000250
 8001340:	20000000 	.word	0x20000000
 8001344:	20000004 	.word	0x20000004
 8001348:	42700000 	.word	0x42700000
 800134c:	20000008 	.word	0x20000008

08001350 <Anti_Windup>:

float Anti_Windup(float Out_PWM, uint16_t HIGH_Limit, uint16_t LOW_Limit, float Kb){
 8001350:	b480      	push	{r7}
 8001352:	b087      	sub	sp, #28
 8001354:	af00      	add	r7, sp, #0
 8001356:	ed87 0a03 	vstr	s0, [r7, #12]
 800135a:	4603      	mov	r3, r0
 800135c:	460a      	mov	r2, r1
 800135e:	edc7 0a01 	vstr	s1, [r7, #4]
 8001362:	817b      	strh	r3, [r7, #10]
 8001364:	4613      	mov	r3, r2
 8001366:	813b      	strh	r3, [r7, #8]
    float e_reset = 0;
 8001368:	f04f 0300 	mov.w	r3, #0
 800136c:	617b      	str	r3, [r7, #20]
    float Ui_anti;

    if (Out_PWM > HIGH_Limit){
 800136e:	897b      	ldrh	r3, [r7, #10]
 8001370:	ee07 3a90 	vmov	s15, r3
 8001374:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001378:	ed97 7a03 	vldr	s14, [r7, #12]
 800137c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001380:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001384:	dd0b      	ble.n	800139e <Anti_Windup+0x4e>
        e_reset = (HIGH_Limit - Out_PWM );
 8001386:	897b      	ldrh	r3, [r7, #10]
 8001388:	ee07 3a90 	vmov	s15, r3
 800138c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001390:	edd7 7a03 	vldr	s15, [r7, #12]
 8001394:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001398:	edc7 7a05 	vstr	s15, [r7, #20]
 800139c:	e01a      	b.n	80013d4 <Anti_Windup+0x84>
    }
    else if (Out_PWM < LOW_Limit){
 800139e:	893b      	ldrh	r3, [r7, #8]
 80013a0:	ee07 3a90 	vmov	s15, r3
 80013a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013a8:	ed97 7a03 	vldr	s14, [r7, #12]
 80013ac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80013b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013b4:	d50b      	bpl.n	80013ce <Anti_Windup+0x7e>
        e_reset = (LOW_Limit - Out_PWM);
 80013b6:	893b      	ldrh	r3, [r7, #8]
 80013b8:	ee07 3a90 	vmov	s15, r3
 80013bc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013c0:	edd7 7a03 	vldr	s15, [r7, #12]
 80013c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013c8:	edc7 7a05 	vstr	s15, [r7, #20]
 80013cc:	e002      	b.n	80013d4 <Anti_Windup+0x84>
    }
    else {
        e_reset = 0;
 80013ce:	f04f 0300 	mov.w	r3, #0
 80013d2:	617b      	str	r3, [r7, #20]
    }
    Ui_anti = Time_Interrupt * e_reset * Kb;
 80013d4:	4b0b      	ldr	r3, [pc, #44]	@ (8001404 <Anti_Windup+0xb4>)
 80013d6:	ed93 7a00 	vldr	s14, [r3]
 80013da:	edd7 7a05 	vldr	s15, [r7, #20]
 80013de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013e2:	ed97 7a01 	vldr	s14, [r7, #4]
 80013e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013ea:	edc7 7a04 	vstr	s15, [r7, #16]

    return Ui_anti;
 80013ee:	693b      	ldr	r3, [r7, #16]
 80013f0:	ee07 3a90 	vmov	s15, r3
}
 80013f4:	eeb0 0a67 	vmov.f32	s0, s15
 80013f8:	371c      	adds	r7, #28
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr
 8001402:	bf00      	nop
 8001404:	20000004 	.word	0x20000004

08001408 <PID_control>:

void PID_control(TIM_HandleTypeDef* htim,struct Para_Motor* pt_Para_M, uint32_t channel)
{
 8001408:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800140c:	b084      	sub	sp, #16
 800140e:	af00      	add	r7, sp, #0
 8001410:	60f8      	str	r0, [r7, #12]
 8001412:	60b9      	str	r1, [r7, #8]
 8001414:	607a      	str	r2, [r7, #4]
	pt_Para_M->ek = (pt_Para_M->SP_Rad_s - pt_Para_M->Rad_s);	// Xác định sai số
 8001416:	68bb      	ldr	r3, [r7, #8]
 8001418:	ed93 7a34 	vldr	s14, [r3, #208]	@ 0xd0
 800141c:	68bb      	ldr	r3, [r7, #8]
 800141e:	edd3 7a33 	vldr	s15, [r3, #204]	@ 0xcc
 8001422:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001426:	ee17 0a90 	vmov	r0, s15
 800142a:	f7ff f88d 	bl	8000548 <__aeabi_f2d>
 800142e:	4602      	mov	r2, r0
 8001430:	460b      	mov	r3, r1
 8001432:	68b9      	ldr	r1, [r7, #8]
 8001434:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40

	pt_Para_M->Up = pt_Para_M->Kp * pt_Para_M->ek;			// Xác định Up
 8001438:	68bb      	ldr	r3, [r7, #8]
 800143a:	689b      	ldr	r3, [r3, #8]
 800143c:	4618      	mov	r0, r3
 800143e:	f7ff f883 	bl	8000548 <__aeabi_f2d>
 8001442:	68bb      	ldr	r3, [r7, #8]
 8001444:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8001448:	f7ff f8d6 	bl	80005f8 <__aeabi_dmul>
 800144c:	4602      	mov	r2, r0
 800144e:	460b      	mov	r3, r1
 8001450:	4610      	mov	r0, r2
 8001452:	4619      	mov	r1, r3
 8001454:	f7ff fbc8 	bl	8000be8 <__aeabi_d2f>
 8001458:	4602      	mov	r2, r0
 800145a:	68bb      	ldr	r3, [r7, #8]
 800145c:	619a      	str	r2, [r3, #24]
	pt_Para_M->Ui = pt_Para_M->Ui_1 + pt_Para_M->Ki * pt_Para_M->ek_1 * Time_Interrupt + pt_Para_M->Ui_Antiwindup;
 800145e:	68bb      	ldr	r3, [r7, #8]
 8001460:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	@ 0x28
 8001464:	68bb      	ldr	r3, [r7, #8]
 8001466:	68db      	ldr	r3, [r3, #12]
 8001468:	4618      	mov	r0, r3
 800146a:	f7ff f86d 	bl	8000548 <__aeabi_f2d>
 800146e:	68bb      	ldr	r3, [r7, #8]
 8001470:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	@ 0x48
 8001474:	f7ff f8c0 	bl	80005f8 <__aeabi_dmul>
 8001478:	4602      	mov	r2, r0
 800147a:	460b      	mov	r3, r1
 800147c:	4690      	mov	r8, r2
 800147e:	4699      	mov	r9, r3
 8001480:	4b6d      	ldr	r3, [pc, #436]	@ (8001638 <PID_control+0x230>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4618      	mov	r0, r3
 8001486:	f7ff f85f 	bl	8000548 <__aeabi_f2d>
 800148a:	4602      	mov	r2, r0
 800148c:	460b      	mov	r3, r1
 800148e:	4640      	mov	r0, r8
 8001490:	4649      	mov	r1, r9
 8001492:	f7ff f8b1 	bl	80005f8 <__aeabi_dmul>
 8001496:	4602      	mov	r2, r0
 8001498:	460b      	mov	r3, r1
 800149a:	4620      	mov	r0, r4
 800149c:	4629      	mov	r1, r5
 800149e:	f7fe fef5 	bl	800028c <__adddf3>
 80014a2:	4602      	mov	r2, r0
 80014a4:	460b      	mov	r3, r1
 80014a6:	4610      	mov	r0, r2
 80014a8:	4619      	mov	r1, r3
 80014aa:	68bb      	ldr	r3, [r7, #8]
 80014ac:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 80014b0:	f7fe feec 	bl	800028c <__adddf3>
 80014b4:	4602      	mov	r2, r0
 80014b6:	460b      	mov	r3, r1
 80014b8:	68b9      	ldr	r1, [r7, #8]
 80014ba:	e9c1 2308 	strd	r2, r3, [r1, #32]
	pt_Para_M->Ud = pt_Para_M->Kd * (pt_Para_M->ek - pt_Para_M->ek_1)/Time_Interrupt;
 80014be:	68bb      	ldr	r3, [r7, #8]
 80014c0:	691b      	ldr	r3, [r3, #16]
 80014c2:	4618      	mov	r0, r3
 80014c4:	f7ff f840 	bl	8000548 <__aeabi_f2d>
 80014c8:	4604      	mov	r4, r0
 80014ca:	460d      	mov	r5, r1
 80014cc:	68bb      	ldr	r3, [r7, #8]
 80014ce:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 80014d2:	68bb      	ldr	r3, [r7, #8]
 80014d4:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	@ 0x48
 80014d8:	f7fe fed6 	bl	8000288 <__aeabi_dsub>
 80014dc:	4602      	mov	r2, r0
 80014de:	460b      	mov	r3, r1
 80014e0:	4620      	mov	r0, r4
 80014e2:	4629      	mov	r1, r5
 80014e4:	f7ff f888 	bl	80005f8 <__aeabi_dmul>
 80014e8:	4602      	mov	r2, r0
 80014ea:	460b      	mov	r3, r1
 80014ec:	4614      	mov	r4, r2
 80014ee:	461d      	mov	r5, r3
 80014f0:	4b51      	ldr	r3, [pc, #324]	@ (8001638 <PID_control+0x230>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4618      	mov	r0, r3
 80014f6:	f7ff f827 	bl	8000548 <__aeabi_f2d>
 80014fa:	4602      	mov	r2, r0
 80014fc:	460b      	mov	r3, r1
 80014fe:	4620      	mov	r0, r4
 8001500:	4629      	mov	r1, r5
 8001502:	f7ff f9a3 	bl	800084c <__aeabi_ddiv>
 8001506:	4602      	mov	r2, r0
 8001508:	460b      	mov	r3, r1
 800150a:	4610      	mov	r0, r2
 800150c:	4619      	mov	r1, r3
 800150e:	f7ff fb6b 	bl	8000be8 <__aeabi_d2f>
 8001512:	4602      	mov	r2, r0
 8001514:	68bb      	ldr	r3, [r7, #8]
 8001516:	639a      	str	r2, [r3, #56]	@ 0x38

	// Anti windup
	pt_Para_M->Ui_Antiwindup = Anti_Windup(pt_Para_M->Temp_PWM, HIGH_Limit_PWM, LOW_Limit_PWM, pt_Para_M->Kb);
 8001518:	68bb      	ldr	r3, [r7, #8]
 800151a:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 800151e:	4610      	mov	r0, r2
 8001520:	4619      	mov	r1, r3
 8001522:	f7ff fb61 	bl	8000be8 <__aeabi_d2f>
 8001526:	4604      	mov	r4, r0
 8001528:	4b44      	ldr	r3, [pc, #272]	@ (800163c <PID_control+0x234>)
 800152a:	881a      	ldrh	r2, [r3, #0]
 800152c:	4b44      	ldr	r3, [pc, #272]	@ (8001640 <PID_control+0x238>)
 800152e:	8819      	ldrh	r1, [r3, #0]
 8001530:	68bb      	ldr	r3, [r7, #8]
 8001532:	edd3 7a05 	vldr	s15, [r3, #20]
 8001536:	eef0 0a67 	vmov.f32	s1, s15
 800153a:	4610      	mov	r0, r2
 800153c:	ee00 4a10 	vmov	s0, r4
 8001540:	f7ff ff06 	bl	8001350 <Anti_Windup>
 8001544:	ee10 3a10 	vmov	r3, s0
 8001548:	4618      	mov	r0, r3
 800154a:	f7fe fffd 	bl	8000548 <__aeabi_f2d>
 800154e:	4602      	mov	r2, r0
 8001550:	460b      	mov	r3, r1
 8001552:	68b9      	ldr	r1, [r7, #8]
 8001554:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30

	pt_Para_M->Temp_PWM = pt_Para_M->Up + pt_Para_M->Ui + pt_Para_M->Ud;
 8001558:	68bb      	ldr	r3, [r7, #8]
 800155a:	699b      	ldr	r3, [r3, #24]
 800155c:	4618      	mov	r0, r3
 800155e:	f7fe fff3 	bl	8000548 <__aeabi_f2d>
 8001562:	68bb      	ldr	r3, [r7, #8]
 8001564:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001568:	f7fe fe90 	bl	800028c <__adddf3>
 800156c:	4602      	mov	r2, r0
 800156e:	460b      	mov	r3, r1
 8001570:	4614      	mov	r4, r2
 8001572:	461d      	mov	r5, r3
 8001574:	68bb      	ldr	r3, [r7, #8]
 8001576:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001578:	4618      	mov	r0, r3
 800157a:	f7fe ffe5 	bl	8000548 <__aeabi_f2d>
 800157e:	4602      	mov	r2, r0
 8001580:	460b      	mov	r3, r1
 8001582:	4620      	mov	r0, r4
 8001584:	4629      	mov	r1, r5
 8001586:	f7fe fe81 	bl	800028c <__adddf3>
 800158a:	4602      	mov	r2, r0
 800158c:	460b      	mov	r3, r1
 800158e:	68b9      	ldr	r1, [r7, #8]
 8001590:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50

	pt_Para_M->Temp_PWM_1 = round(pt_Para_M->Temp_PWM);
 8001594:	68bb      	ldr	r3, [r7, #8]
 8001596:	ed93 7b14 	vldr	d7, [r3, #80]	@ 0x50
 800159a:	eeb0 0a47 	vmov.f32	s0, s14
 800159e:	eef0 0a67 	vmov.f32	s1, s15
 80015a2:	f00a fe2b 	bl	800c1fc <round>
 80015a6:	eeb0 7a40 	vmov.f32	s14, s0
 80015aa:	eef0 7a60 	vmov.f32	s15, s1
 80015ae:	68bb      	ldr	r3, [r7, #8]
 80015b0:	ed83 7b16 	vstr	d7, [r3, #88]	@ 0x58

	if (pt_Para_M->Temp_PWM_1 >= 999){
 80015b4:	68bb      	ldr	r3, [r7, #8]
 80015b6:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	@ 0x58
 80015ba:	a31b      	add	r3, pc, #108	@ (adr r3, 8001628 <PID_control+0x220>)
 80015bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015c0:	f7ff faa0 	bl	8000b04 <__aeabi_dcmpge>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d006      	beq.n	80015d8 <PID_control+0x1d0>
		pt_Para_M->Temp_PWM_1 = 999;
 80015ca:	68b9      	ldr	r1, [r7, #8]
 80015cc:	a316      	add	r3, pc, #88	@ (adr r3, 8001628 <PID_control+0x220>)
 80015ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015d2:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
 80015d6:	e010      	b.n	80015fa <PID_control+0x1f2>
	}
	else if (pt_Para_M->Temp_PWM_1 <= -999){
 80015d8:	68bb      	ldr	r3, [r7, #8]
 80015da:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	@ 0x58
 80015de:	a314      	add	r3, pc, #80	@ (adr r3, 8001630 <PID_control+0x228>)
 80015e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015e4:	f7ff fa84 	bl	8000af0 <__aeabi_dcmple>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d005      	beq.n	80015fa <PID_control+0x1f2>
		pt_Para_M->Temp_PWM_1 = -999;
 80015ee:	68b9      	ldr	r1, [r7, #8]
 80015f0:	a30f      	add	r3, pc, #60	@ (adr r3, 8001630 <PID_control+0x228>)
 80015f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015f6:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
	}

	pt_Para_M->ek_1 = pt_Para_M->ek;
 80015fa:	68bb      	ldr	r3, [r7, #8]
 80015fc:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8001600:	68b9      	ldr	r1, [r7, #8]
 8001602:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48
	pt_Para_M->Ui_1 = pt_Para_M->Ui;
 8001606:	68bb      	ldr	r3, [r7, #8]
 8001608:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800160c:	68b9      	ldr	r1, [r7, #8]
 800160e:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
	pt_Para_M->Ud_1 = pt_Para_M->Ud_1;
 8001612:	68bb      	ldr	r3, [r7, #8]
 8001614:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001616:	68bb      	ldr	r3, [r7, #8]
 8001618:	63da      	str	r2, [r3, #60]	@ 0x3c

}
 800161a:	bf00      	nop
 800161c:	3710      	adds	r7, #16
 800161e:	46bd      	mov	sp, r7
 8001620:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001624:	f3af 8000 	nop.w
 8001628:	00000000 	.word	0x00000000
 800162c:	408f3800 	.word	0x408f3800
 8001630:	00000000 	.word	0x00000000
 8001634:	c08f3800 	.word	0xc08f3800
 8001638:	20000004 	.word	0x20000004
 800163c:	2000000c 	.word	0x2000000c
 8001640:	2000024c 	.word	0x2000024c

08001644 <Processing_Error>:

}

// Xử lí sai số
void Processing_Error(struct PID_XY* Theta_Ctrl, struct PID_XY* Pos_Ctrl, struct Possision_Input* Pos, float x_robot, float theta_robot)
{
 8001644:	b480      	push	{r7}
 8001646:	b087      	sub	sp, #28
 8001648:	af00      	add	r7, sp, #0
 800164a:	6178      	str	r0, [r7, #20]
 800164c:	6139      	str	r1, [r7, #16]
 800164e:	60fa      	str	r2, [r7, #12]
 8001650:	ed87 0a02 	vstr	s0, [r7, #8]
 8001654:	edc7 0a01 	vstr	s1, [r7, #4]
	Theta_Ctrl->ek = Pos->theta_tiep_tuyen - theta_robot ; // Sai số góc theta của robot
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	ed93 7a02 	vldr	s14, [r3, #8]
 800165e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001662:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001666:	697b      	ldr	r3, [r7, #20]
 8001668:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
	Pos_Ctrl->ek = -1*(Pos->x - x_robot); // Sai số của PID 2 là hiệu của x quy hoạch và x robot
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	ed93 7a00 	vldr	s14, [r3]
 8001672:	edd7 7a02 	vldr	s15, [r7, #8]
 8001676:	ee77 7a67 	vsub.f32	s15, s14, s15
 800167a:	eef1 7a67 	vneg.f32	s15, s15
 800167e:	693b      	ldr	r3, [r7, #16]
 8001680:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28

}
 8001684:	bf00      	nop
 8001686:	371c      	adds	r7, #28
 8001688:	46bd      	mov	sp, r7
 800168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168e:	4770      	bx	lr

08001690 <PID_XY>:

void PID_XY(struct PID_XY* u1)
{
 8001690:	b480      	push	{r7}
 8001692:	b083      	sub	sp, #12
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
	u1->Up = u1->ek * u1->Kp;  // Khâu P
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	edd3 7a00 	vldr	s15, [r3]
 80016a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	edc3 7a07 	vstr	s15, [r3, #28]
	u1->Ui = u1->Ui_1 + u1->Ki * u1->ek * Time_Interrupt_global;  // Khâu I
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	ed93 7a04 	vldr	s14, [r3, #16]
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	edd3 6a01 	vldr	s13, [r3, #4]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80016c0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80016c4:	4b32      	ldr	r3, [pc, #200]	@ (8001790 <PID_XY+0x100>)
 80016c6:	edd3 7a00 	vldr	s15, [r3]
 80016ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	edc3 7a03 	vstr	s15, [r3, #12]
	u1->Ud = u1->Kd * (u1->ek - u1->ek_1)/(Time_Interrupt_global); // Khâu D
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	ed93 7a02 	vldr	s14, [r3, #8]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	edd3 6a0a 	vldr	s13, [r3, #40]	@ 0x28
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 80016ea:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80016ee:	ee67 6a27 	vmul.f32	s13, s14, s15
 80016f2:	4b27      	ldr	r3, [pc, #156]	@ (8001790 <PID_XY+0x100>)
 80016f4:	ed93 7a00 	vldr	s14, [r3]
 80016f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	edc3 7a05 	vstr	s15, [r3, #20]
	u1->Output_Temp = u1->Up + u1->Ui + u1->Ud;  // Output PID
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	ed93 7a07 	vldr	s14, [r3, #28]
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	edd3 7a03 	vldr	s15, [r3, #12]
 800170e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	edd3 7a05 	vldr	s15, [r3, #20]
 8001718:	ee77 7a27 	vadd.f32	s15, s14, s15
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	edc3 7a08 	vstr	s15, [r3, #32]

	// Limit Output
	if(u1->Output_Temp >= u1->High_Limit)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	ed93 7a08 	vldr	s14, [r3, #32]
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 800172e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001732:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001736:	db04      	blt.n	8001742 <PID_XY+0xb2>
	{
		u1->Output = u1->High_Limit;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	625a      	str	r2, [r3, #36]	@ 0x24
 8001740:	e013      	b.n	800176a <PID_XY+0xda>
	}
	else if(u1->Output_Temp <= u1->Low_Limit)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	ed93 7a08 	vldr	s14, [r3, #32]
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 800174e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001752:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001756:	d804      	bhi.n	8001762 <PID_XY+0xd2>
	{
		u1->Output = u1->Low_Limit;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	625a      	str	r2, [r3, #36]	@ 0x24
 8001760:	e003      	b.n	800176a <PID_XY+0xda>
	}
	else
	{
		u1->Output = u1->Output_Temp;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6a1a      	ldr	r2, [r3, #32]
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	625a      	str	r2, [r3, #36]	@ 0x24
	}

	// Gán lại sai số
	u1->Ui_1 = u1->Ui;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	68da      	ldr	r2, [r3, #12]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	611a      	str	r2, [r3, #16]
	u1->Ud_1 = u1->Ui;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	68da      	ldr	r2, [r3, #12]
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	619a      	str	r2, [r3, #24]
	u1->ek_1 = u1->ek;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8001782:	bf00      	nop
 8001784:	370c      	adds	r7, #12
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr
 800178e:	bf00      	nop
 8001790:	20000028 	.word	0x20000028
 8001794:	00000000 	.word	0x00000000

08001798 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001798:	b5b0      	push	{r4, r5, r7, lr}
 800179a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800179c:	f002 ff10 	bl	80045c0 <HAL_Init>

  /* USER CODE BEGIN Init */
  pt_Para_MR->Kb = 900;
 80017a0:	4b9f      	ldr	r3, [pc, #636]	@ (8001a20 <main+0x288>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a9f      	ldr	r2, [pc, #636]	@ (8001a24 <main+0x28c>)
 80017a6:	615a      	str	r2, [r3, #20]
  pt_Para_MR->Kp = 0.0671641791;
 80017a8:	4b9d      	ldr	r3, [pc, #628]	@ (8001a20 <main+0x288>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a9e      	ldr	r2, [pc, #632]	@ (8001a28 <main+0x290>)
 80017ae:	609a      	str	r2, [r3, #8]
  pt_Para_MR->Ki = 300;
 80017b0:	4b9b      	ldr	r3, [pc, #620]	@ (8001a20 <main+0x288>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a9d      	ldr	r2, [pc, #628]	@ (8001a2c <main+0x294>)
 80017b6:	60da      	str	r2, [r3, #12]
  pt_Para_MR->Kd = 0;
 80017b8:	4b99      	ldr	r3, [pc, #612]	@ (8001a20 <main+0x288>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f04f 0200 	mov.w	r2, #0
 80017c0:	611a      	str	r2, [r3, #16]

  pt_Para_MR->Ui_1 = 0;
 80017c2:	4b97      	ldr	r3, [pc, #604]	@ (8001a20 <main+0x288>)
 80017c4:	6819      	ldr	r1, [r3, #0]
 80017c6:	f04f 0200 	mov.w	r2, #0
 80017ca:	f04f 0300 	mov.w	r3, #0
 80017ce:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
  pt_Para_MR->Ud_1 = 0;
 80017d2:	4b93      	ldr	r3, [pc, #588]	@ (8001a20 <main+0x288>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f04f 0200 	mov.w	r2, #0
 80017da:	63da      	str	r2, [r3, #60]	@ 0x3c

  pt_Para_MR->HIGH = 999;
 80017dc:	4b90      	ldr	r3, [pc, #576]	@ (8001a20 <main+0x288>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a93      	ldr	r2, [pc, #588]	@ (8001a30 <main+0x298>)
 80017e2:	601a      	str	r2, [r3, #0]
  pt_Para_MR->LOW = 0;
 80017e4:	4b8e      	ldr	r3, [pc, #568]	@ (8001a20 <main+0x288>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f04f 0200 	mov.w	r2, #0
 80017ec:	605a      	str	r2, [r3, #4]

  pt_Para_ML->Kb = 900;
 80017ee:	4b91      	ldr	r3, [pc, #580]	@ (8001a34 <main+0x29c>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4a8c      	ldr	r2, [pc, #560]	@ (8001a24 <main+0x28c>)
 80017f4:	615a      	str	r2, [r3, #20]
  pt_Para_ML->Kp = 0.0671641791;
 80017f6:	4b8f      	ldr	r3, [pc, #572]	@ (8001a34 <main+0x29c>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4a8b      	ldr	r2, [pc, #556]	@ (8001a28 <main+0x290>)
 80017fc:	609a      	str	r2, [r3, #8]
  pt_Para_ML->Ki = 300;
 80017fe:	4b8d      	ldr	r3, [pc, #564]	@ (8001a34 <main+0x29c>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4a8a      	ldr	r2, [pc, #552]	@ (8001a2c <main+0x294>)
 8001804:	60da      	str	r2, [r3, #12]
  pt_Para_ML->Kd = 0;
 8001806:	4b8b      	ldr	r3, [pc, #556]	@ (8001a34 <main+0x29c>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f04f 0200 	mov.w	r2, #0
 800180e:	611a      	str	r2, [r3, #16]

  pt_Para_ML->Ui_1 = 0;
 8001810:	4b88      	ldr	r3, [pc, #544]	@ (8001a34 <main+0x29c>)
 8001812:	6819      	ldr	r1, [r3, #0]
 8001814:	f04f 0200 	mov.w	r2, #0
 8001818:	f04f 0300 	mov.w	r3, #0
 800181c:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
  pt_Para_ML->Ud_1 = 0;
 8001820:	4b84      	ldr	r3, [pc, #528]	@ (8001a34 <main+0x29c>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f04f 0200 	mov.w	r2, #0
 8001828:	63da      	str	r2, [r3, #60]	@ 0x3c

  pt_Para_ML->HIGH = 999;
 800182a:	4b82      	ldr	r3, [pc, #520]	@ (8001a34 <main+0x29c>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4a80      	ldr	r2, [pc, #512]	@ (8001a30 <main+0x298>)
 8001830:	601a      	str	r2, [r3, #0]
  pt_Para_ML->LOW = 0;
 8001832:	4b80      	ldr	r3, [pc, #512]	@ (8001a34 <main+0x29c>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f04f 0200 	mov.w	r2, #0
 800183a:	605a      	str	r2, [r3, #4]
//  pt_Para_ML->SP_Rad_s = 1.5;
/* USER CODE END SysInit */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800183c:	f000 f92c 	bl	8001a98 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001840:	f000 fd62 	bl	8002308 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001844:	f000 faa8 	bl	8001d98 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001848:	f000 fafe 	bl	8001e48 <MX_TIM3_Init>
  MX_TIM4_Init();
 800184c:	f000 fb50 	bl	8001ef0 <MX_TIM4_Init>
  MX_I2C1_Init();
 8001850:	f000 f98c 	bl	8001b6c <MX_I2C1_Init>
  MX_I2C2_Init();
 8001854:	f000 f9b8 	bl	8001bc8 <MX_I2C2_Init>
  MX_SPI1_Init();
 8001858:	f000 f9e4 	bl	8001c24 <MX_SPI1_Init>
  MX_TIM1_Init();
 800185c:	f000 fa18 	bl	8001c90 <MX_TIM1_Init>
  MX_TIM5_Init();
 8001860:	f000 fb9a 	bl	8001f98 <MX_TIM5_Init>
  MX_USART1_UART_Init();
 8001864:	f000 fcfc 	bl	8002260 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001868:	f000 fd24 	bl	80022b4 <MX_USART2_UART_Init>
  MX_TIM8_Init();
 800186c:	f000 fc24 	bl	80020b8 <MX_TIM8_Init>
  MX_TIM9_Init();
 8001870:	f000 fc74 	bl	800215c <MX_TIM9_Init>
  MX_TIM6_Init();
 8001874:	f000 fbea 	bl	800204c <MX_TIM6_Init>
  MX_TIM10_Init();
 8001878:	f000 fcaa 	bl	80021d0 <MX_TIM10_Init>
  MX_TIM11_Init();
 800187c:	f000 fccc 	bl	8002218 <MX_TIM11_Init>
//	  AX[i] = AX[i]*1000;
//	  AY[i] = AY[i]*1000;
//  }

  // Khởi tạo
  Initial_Mobile_Robot(pt_Robot);
 8001880:	4b6d      	ldr	r3, [pc, #436]	@ (8001a38 <main+0x2a0>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4618      	mov	r0, r3
 8001886:	f001 faeb 	bl	8002e60 <Initial_Mobile_Robot>
  Initial_PID_XY(pt_PID_posision, pt_PID_theta);
 800188a:	4b6c      	ldr	r3, [pc, #432]	@ (8001a3c <main+0x2a4>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4a6c      	ldr	r2, [pc, #432]	@ (8001a40 <main+0x2a8>)
 8001890:	6812      	ldr	r2, [r2, #0]
 8001892:	4611      	mov	r1, r2
 8001894:	4618      	mov	r0, r3
 8001896:	f001 fb01 	bl	8002e9c <Initial_PID_XY>
  pt_Kine->V_Set = 0.05;
 800189a:	4b6a      	ldr	r3, [pc, #424]	@ (8001a44 <main+0x2ac>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4a6a      	ldr	r2, [pc, #424]	@ (8001a48 <main+0x2b0>)
 80018a0:	615a      	str	r2, [r3, #20]
  pt_Kine->Theta_Real_Robot = 1.57;
 80018a2:	4b68      	ldr	r3, [pc, #416]	@ (8001a44 <main+0x2ac>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4a69      	ldr	r2, [pc, #420]	@ (8001a4c <main+0x2b4>)
 80018a8:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_I2C_SlaveRxCpltCallback(&hi2c1);
 80018aa:	4869      	ldr	r0, [pc, #420]	@ (8001a50 <main+0x2b8>)
 80018ac:	f001 fc04 	bl	80030b8 <HAL_I2C_SlaveRxCpltCallback>
  HAL_TIM_Base_Start_IT(&htim8);  // Timer cho PID DC Motor
 80018b0:	4868      	ldr	r0, [pc, #416]	@ (8001a54 <main+0x2bc>)
 80018b2:	f005 fd83 	bl	80073bc <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim6); // Timer Global
 80018b6:	4868      	ldr	r0, [pc, #416]	@ (8001a58 <main+0x2c0>)
 80018b8:	f005 fd80 	bl	80073bc <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim10); // Timer Stepper
 80018bc:	4867      	ldr	r0, [pc, #412]	@ (8001a5c <main+0x2c4>)
 80018be:	f005 fd7d 	bl	80073bc <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim11); // Timer Init
 80018c2:	4867      	ldr	r0, [pc, #412]	@ (8001a60 <main+0x2c8>)
 80018c4:	f005 fd7a 	bl	80073bc <HAL_TIM_Base_Start_IT>

  HAL_TIM_Encoder_Start_IT(&htim3, TIM_CHANNEL_1 && TIM_CHANNEL_2);
 80018c8:	2100      	movs	r1, #0
 80018ca:	4866      	ldr	r0, [pc, #408]	@ (8001a64 <main+0x2cc>)
 80018cc:	f006 f8ba 	bl	8007a44 <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim4, TIM_CHANNEL_1 && TIM_CHANNEL_2);
 80018d0:	2100      	movs	r1, #0
 80018d2:	4865      	ldr	r0, [pc, #404]	@ (8001a68 <main+0x2d0>)
 80018d4:	f006 f8b6 	bl	8007a44 <HAL_TIM_Encoder_Start_IT>

  HAL_TIM_PWM_Start_IT(&htim5, TIM_CHANNEL_1);
 80018d8:	2100      	movs	r1, #0
 80018da:	4864      	ldr	r0, [pc, #400]	@ (8001a6c <main+0x2d4>)
 80018dc:	f005 fef6 	bl	80076cc <HAL_TIM_PWM_Start_IT>

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80018e0:	2100      	movs	r1, #0
 80018e2:	4863      	ldr	r0, [pc, #396]	@ (8001a70 <main+0x2d8>)
 80018e4:	f005 fe2a 	bl	800753c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80018e8:	2100      	movs	r1, #0
 80018ea:	4862      	ldr	r0, [pc, #392]	@ (8001a74 <main+0x2dc>)
 80018ec:	f005 fe26 	bl	800753c <HAL_TIM_PWM_Start>

    /* USER CODE BEGIN 3 */



	  OUT_01[1] = -1*o1;
 80018f0:	4b61      	ldr	r3, [pc, #388]	@ (8001a78 <main+0x2e0>)
 80018f2:	edd3 7a00 	vldr	s15, [r3]
 80018f6:	eef1 7a67 	vneg.f32	s15, s15
 80018fa:	4b60      	ldr	r3, [pc, #384]	@ (8001a7c <main+0x2e4>)
 80018fc:	edc3 7a01 	vstr	s15, [r3, #4]
	  OUT_01[3] = o1;
 8001900:	4b5d      	ldr	r3, [pc, #372]	@ (8001a78 <main+0x2e0>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a5d      	ldr	r2, [pc, #372]	@ (8001a7c <main+0x2e4>)
 8001906:	60d3      	str	r3, [r2, #12]
	     // Xuất xung PWM PID
//	     __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, pt_Para_MR->Out_PWM);
//	     __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pt_Para_ML->Out_PWM);
//	  Size_Data = sizeof(Data_001);
//	  HAL_UART_Transmit(&huart2, Data_001, Size_Data, 100);
	  EX = pt_pos_1->x - pt_Kine->X_real;
 8001908:	4b5d      	ldr	r3, [pc, #372]	@ (8001a80 <main+0x2e8>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	ed93 7a00 	vldr	s14, [r3]
 8001910:	4b4c      	ldr	r3, [pc, #304]	@ (8001a44 <main+0x2ac>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	edd3 7a00 	vldr	s15, [r3]
 8001918:	ee77 7a67 	vsub.f32	s15, s14, s15
 800191c:	4b59      	ldr	r3, [pc, #356]	@ (8001a84 <main+0x2ec>)
 800191e:	edc3 7a00 	vstr	s15, [r3]
	  EY = pt_pos_1->y - pt_Kine->Y_real;
 8001922:	4b57      	ldr	r3, [pc, #348]	@ (8001a80 <main+0x2e8>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	ed93 7a01 	vldr	s14, [r3, #4]
 800192a:	4b46      	ldr	r3, [pc, #280]	@ (8001a44 <main+0x2ac>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001932:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001936:	4b54      	ldr	r3, [pc, #336]	@ (8001a88 <main+0x2f0>)
 8001938:	edc3 7a00 	vstr	s15, [r3]
	  E_Velocity = pt_Kine->V_Set - pt_Kine->V_real;
 800193c:	4b41      	ldr	r3, [pc, #260]	@ (8001a44 <main+0x2ac>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	ed93 7a05 	vldr	s14, [r3, #20]
 8001944:	4b3f      	ldr	r3, [pc, #252]	@ (8001a44 <main+0x2ac>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	edd3 7a04 	vldr	s15, [r3, #16]
 800194c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001950:	4b4e      	ldr	r3, [pc, #312]	@ (8001a8c <main+0x2f4>)
 8001952:	edc3 7a00 	vstr	s15, [r3]
	  Error_Distance = sqrt(pow(EX,2) + pow(EX,2));
 8001956:	4b4b      	ldr	r3, [pc, #300]	@ (8001a84 <main+0x2ec>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4618      	mov	r0, r3
 800195c:	f7fe fdf4 	bl	8000548 <__aeabi_f2d>
 8001960:	4602      	mov	r2, r0
 8001962:	460b      	mov	r3, r1
 8001964:	ed9f 1b2c 	vldr	d1, [pc, #176]	@ 8001a18 <main+0x280>
 8001968:	ec43 2b10 	vmov	d0, r2, r3
 800196c:	f00a fa1a 	bl	800bda4 <pow>
 8001970:	ec55 4b10 	vmov	r4, r5, d0
 8001974:	4b43      	ldr	r3, [pc, #268]	@ (8001a84 <main+0x2ec>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4618      	mov	r0, r3
 800197a:	f7fe fde5 	bl	8000548 <__aeabi_f2d>
 800197e:	4602      	mov	r2, r0
 8001980:	460b      	mov	r3, r1
 8001982:	ed9f 1b25 	vldr	d1, [pc, #148]	@ 8001a18 <main+0x280>
 8001986:	ec43 2b10 	vmov	d0, r2, r3
 800198a:	f00a fa0b 	bl	800bda4 <pow>
 800198e:	ec53 2b10 	vmov	r2, r3, d0
 8001992:	4620      	mov	r0, r4
 8001994:	4629      	mov	r1, r5
 8001996:	f7fe fc79 	bl	800028c <__adddf3>
 800199a:	4602      	mov	r2, r0
 800199c:	460b      	mov	r3, r1
 800199e:	ec43 2b17 	vmov	d7, r2, r3
 80019a2:	eeb0 0a47 	vmov.f32	s0, s14
 80019a6:	eef0 0a67 	vmov.f32	s1, s15
 80019aa:	f00a fa6b 	bl	800be84 <sqrt>
 80019ae:	ec53 2b10 	vmov	r2, r3, d0
 80019b2:	4610      	mov	r0, r2
 80019b4:	4619      	mov	r1, r3
 80019b6:	f7ff f917 	bl	8000be8 <__aeabi_d2f>
 80019ba:	4603      	mov	r3, r0
 80019bc:	4a34      	ldr	r2, [pc, #208]	@ (8001a90 <main+0x2f8>)
 80019be:	6013      	str	r3, [r2, #0]
	  //UART_1(pt_Kine->V_Set, pt_Kine->V_real,pt_pos_1->x, pt_pos_1->y, pt_Kine->X_Welding, pt_Kine->Y_Welding);
	  UART_1(Mang_Robot_1[0][0], Mang_Robot_1[0][1], pt_pos_1->x, pt_pos_1->y , pt_Kine->X_Welding, pt_Kine->Y_Welding);
 80019c0:	4b34      	ldr	r3, [pc, #208]	@ (8001a94 <main+0x2fc>)
 80019c2:	edd3 7a00 	vldr	s15, [r3]
 80019c6:	4b33      	ldr	r3, [pc, #204]	@ (8001a94 <main+0x2fc>)
 80019c8:	ed93 7a01 	vldr	s14, [r3, #4]
 80019cc:	4b2c      	ldr	r3, [pc, #176]	@ (8001a80 <main+0x2e8>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	edd3 6a00 	vldr	s13, [r3]
 80019d4:	4b2a      	ldr	r3, [pc, #168]	@ (8001a80 <main+0x2e8>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	ed93 6a01 	vldr	s12, [r3, #4]
 80019dc:	4b19      	ldr	r3, [pc, #100]	@ (8001a44 <main+0x2ac>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	edd3 5a14 	vldr	s11, [r3, #80]	@ 0x50
 80019e4:	4b17      	ldr	r3, [pc, #92]	@ (8001a44 <main+0x2ac>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	ed93 5a15 	vldr	s10, [r3, #84]	@ 0x54
 80019ec:	eef0 2a45 	vmov.f32	s5, s10
 80019f0:	eeb0 2a65 	vmov.f32	s4, s11
 80019f4:	eef0 1a46 	vmov.f32	s3, s12
 80019f8:	eeb0 1a66 	vmov.f32	s2, s13
 80019fc:	eef0 0a47 	vmov.f32	s1, s14
 8001a00:	eeb0 0a67 	vmov.f32	s0, s15
 8001a04:	f000 fdb4 	bl	8002570 <UART_1>
//		ssd1306_SetCursor(6*7, 36);
//		ssd1306_WriteString(str10, Font_6x8, White);
//		ssd1306_UpdateScreen();


	  HAL_Delay(50);
 8001a08:	2032      	movs	r0, #50	@ 0x32
 8001a0a:	f002 fe4b 	bl	80046a4 <HAL_Delay>
	  OUT_01[1] = -1*o1;
 8001a0e:	bf00      	nop
 8001a10:	e76e      	b.n	80018f0 <main+0x158>
 8001a12:	bf00      	nop
 8001a14:	f3af 8000 	nop.w
 8001a18:	00000000 	.word	0x00000000
 8001a1c:	40000000 	.word	0x40000000
 8001a20:	2000002c 	.word	0x2000002c
 8001a24:	44610000 	.word	0x44610000
 8001a28:	3d898d60 	.word	0x3d898d60
 8001a2c:	43960000 	.word	0x43960000
 8001a30:	4479c000 	.word	0x4479c000
 8001a34:	20000030 	.word	0x20000030
 8001a38:	20000034 	.word	0x20000034
 8001a3c:	20000040 	.word	0x20000040
 8001a40:	2000003c 	.word	0x2000003c
 8001a44:	20000038 	.word	0x20000038
 8001a48:	3d4ccccd 	.word	0x3d4ccccd
 8001a4c:	3fc8f5c3 	.word	0x3fc8f5c3
 8001a50:	20000254 	.word	0x20000254
 8001a54:	20000504 	.word	0x20000504
 8001a58:	200004bc 	.word	0x200004bc
 8001a5c:	20000594 	.word	0x20000594
 8001a60:	200005dc 	.word	0x200005dc
 8001a64:	200003e4 	.word	0x200003e4
 8001a68:	2000042c 	.word	0x2000042c
 8001a6c:	20000474 	.word	0x20000474
 8001a70:	2000039c 	.word	0x2000039c
 8001a74:	20000354 	.word	0x20000354
 8001a78:	200006b4 	.word	0x200006b4
 8001a7c:	20000010 	.word	0x20000010
 8001a80:	20000044 	.word	0x20000044
 8001a84:	2000c3b8 	.word	0x2000c3b8
 8001a88:	2000c3bc 	.word	0x2000c3bc
 8001a8c:	2000c3c0 	.word	0x2000c3c0
 8001a90:	2000c3c4 	.word	0x2000c3c4
 8001a94:	2000c3c8 	.word	0x2000c3c8

08001a98 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b094      	sub	sp, #80	@ 0x50
 8001a9c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a9e:	f107 0320 	add.w	r3, r7, #32
 8001aa2:	2230      	movs	r2, #48	@ 0x30
 8001aa4:	2100      	movs	r1, #0
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f008 f8b3 	bl	8009c12 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001aac:	f107 030c 	add.w	r3, r7, #12
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	601a      	str	r2, [r3, #0]
 8001ab4:	605a      	str	r2, [r3, #4]
 8001ab6:	609a      	str	r2, [r3, #8]
 8001ab8:	60da      	str	r2, [r3, #12]
 8001aba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001abc:	2300      	movs	r3, #0
 8001abe:	60bb      	str	r3, [r7, #8]
 8001ac0:	4b28      	ldr	r3, [pc, #160]	@ (8001b64 <SystemClock_Config+0xcc>)
 8001ac2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ac4:	4a27      	ldr	r2, [pc, #156]	@ (8001b64 <SystemClock_Config+0xcc>)
 8001ac6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001aca:	6413      	str	r3, [r2, #64]	@ 0x40
 8001acc:	4b25      	ldr	r3, [pc, #148]	@ (8001b64 <SystemClock_Config+0xcc>)
 8001ace:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ad0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ad4:	60bb      	str	r3, [r7, #8]
 8001ad6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ad8:	2300      	movs	r3, #0
 8001ada:	607b      	str	r3, [r7, #4]
 8001adc:	4b22      	ldr	r3, [pc, #136]	@ (8001b68 <SystemClock_Config+0xd0>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a21      	ldr	r2, [pc, #132]	@ (8001b68 <SystemClock_Config+0xd0>)
 8001ae2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ae6:	6013      	str	r3, [r2, #0]
 8001ae8:	4b1f      	ldr	r3, [pc, #124]	@ (8001b68 <SystemClock_Config+0xd0>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001af0:	607b      	str	r3, [r7, #4]
 8001af2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001af4:	2301      	movs	r3, #1
 8001af6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001af8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001afc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001afe:	2302      	movs	r3, #2
 8001b00:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001b02:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001b06:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001b08:	2304      	movs	r3, #4
 8001b0a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8001b0c:	2390      	movs	r3, #144	@ 0x90
 8001b0e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001b10:	2302      	movs	r3, #2
 8001b12:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001b14:	2304      	movs	r3, #4
 8001b16:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b18:	f107 0320 	add.w	r3, r7, #32
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f004 fedd 	bl	80068dc <HAL_RCC_OscConfig>
 8001b22:	4603      	mov	r3, r0
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d001      	beq.n	8001b2c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001b28:	f001 fffa 	bl	8003b20 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b2c:	230f      	movs	r3, #15
 8001b2e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b30:	2302      	movs	r3, #2
 8001b32:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b34:	2300      	movs	r3, #0
 8001b36:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001b38:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001b3c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001b3e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b42:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001b44:	f107 030c 	add.w	r3, r7, #12
 8001b48:	2104      	movs	r1, #4
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f005 f93e 	bl	8006dcc <HAL_RCC_ClockConfig>
 8001b50:	4603      	mov	r3, r0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d001      	beq.n	8001b5a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001b56:	f001 ffe3 	bl	8003b20 <Error_Handler>
  }
}
 8001b5a:	bf00      	nop
 8001b5c:	3750      	adds	r7, #80	@ 0x50
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	40023800 	.word	0x40023800
 8001b68:	40007000 	.word	0x40007000

08001b6c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001b70:	4b12      	ldr	r3, [pc, #72]	@ (8001bbc <MX_I2C1_Init+0x50>)
 8001b72:	4a13      	ldr	r2, [pc, #76]	@ (8001bc0 <MX_I2C1_Init+0x54>)
 8001b74:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001b76:	4b11      	ldr	r3, [pc, #68]	@ (8001bbc <MX_I2C1_Init+0x50>)
 8001b78:	4a12      	ldr	r2, [pc, #72]	@ (8001bc4 <MX_I2C1_Init+0x58>)
 8001b7a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001b7c:	4b0f      	ldr	r3, [pc, #60]	@ (8001bbc <MX_I2C1_Init+0x50>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 36;
 8001b82:	4b0e      	ldr	r3, [pc, #56]	@ (8001bbc <MX_I2C1_Init+0x50>)
 8001b84:	2224      	movs	r2, #36	@ 0x24
 8001b86:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b88:	4b0c      	ldr	r3, [pc, #48]	@ (8001bbc <MX_I2C1_Init+0x50>)
 8001b8a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001b8e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b90:	4b0a      	ldr	r3, [pc, #40]	@ (8001bbc <MX_I2C1_Init+0x50>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001b96:	4b09      	ldr	r3, [pc, #36]	@ (8001bbc <MX_I2C1_Init+0x50>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b9c:	4b07      	ldr	r3, [pc, #28]	@ (8001bbc <MX_I2C1_Init+0x50>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001ba2:	4b06      	ldr	r3, [pc, #24]	@ (8001bbc <MX_I2C1_Init+0x50>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001ba8:	4804      	ldr	r0, [pc, #16]	@ (8001bbc <MX_I2C1_Init+0x50>)
 8001baa:	f003 f8b1 	bl	8004d10 <HAL_I2C_Init>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d001      	beq.n	8001bb8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001bb4:	f001 ffb4 	bl	8003b20 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001bb8:	bf00      	nop
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	20000254 	.word	0x20000254
 8001bc0:	40005400 	.word	0x40005400
 8001bc4:	00061a80 	.word	0x00061a80

08001bc8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001bcc:	4b12      	ldr	r3, [pc, #72]	@ (8001c18 <MX_I2C2_Init+0x50>)
 8001bce:	4a13      	ldr	r2, [pc, #76]	@ (8001c1c <MX_I2C2_Init+0x54>)
 8001bd0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001bd2:	4b11      	ldr	r3, [pc, #68]	@ (8001c18 <MX_I2C2_Init+0x50>)
 8001bd4:	4a12      	ldr	r2, [pc, #72]	@ (8001c20 <MX_I2C2_Init+0x58>)
 8001bd6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001bd8:	4b0f      	ldr	r3, [pc, #60]	@ (8001c18 <MX_I2C2_Init+0x50>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001bde:	4b0e      	ldr	r3, [pc, #56]	@ (8001c18 <MX_I2C2_Init+0x50>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001be4:	4b0c      	ldr	r3, [pc, #48]	@ (8001c18 <MX_I2C2_Init+0x50>)
 8001be6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001bea:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001bec:	4b0a      	ldr	r3, [pc, #40]	@ (8001c18 <MX_I2C2_Init+0x50>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001bf2:	4b09      	ldr	r3, [pc, #36]	@ (8001c18 <MX_I2C2_Init+0x50>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001bf8:	4b07      	ldr	r3, [pc, #28]	@ (8001c18 <MX_I2C2_Init+0x50>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001bfe:	4b06      	ldr	r3, [pc, #24]	@ (8001c18 <MX_I2C2_Init+0x50>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001c04:	4804      	ldr	r0, [pc, #16]	@ (8001c18 <MX_I2C2_Init+0x50>)
 8001c06:	f003 f883 	bl	8004d10 <HAL_I2C_Init>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d001      	beq.n	8001c14 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001c10:	f001 ff86 	bl	8003b20 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001c14:	bf00      	nop
 8001c16:	bd80      	pop	{r7, pc}
 8001c18:	200002a8 	.word	0x200002a8
 8001c1c:	40005800 	.word	0x40005800
 8001c20:	000186a0 	.word	0x000186a0

08001c24 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001c28:	4b17      	ldr	r3, [pc, #92]	@ (8001c88 <MX_SPI1_Init+0x64>)
 8001c2a:	4a18      	ldr	r2, [pc, #96]	@ (8001c8c <MX_SPI1_Init+0x68>)
 8001c2c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001c2e:	4b16      	ldr	r3, [pc, #88]	@ (8001c88 <MX_SPI1_Init+0x64>)
 8001c30:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001c34:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001c36:	4b14      	ldr	r3, [pc, #80]	@ (8001c88 <MX_SPI1_Init+0x64>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001c3c:	4b12      	ldr	r3, [pc, #72]	@ (8001c88 <MX_SPI1_Init+0x64>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c42:	4b11      	ldr	r3, [pc, #68]	@ (8001c88 <MX_SPI1_Init+0x64>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001c48:	4b0f      	ldr	r3, [pc, #60]	@ (8001c88 <MX_SPI1_Init+0x64>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001c4e:	4b0e      	ldr	r3, [pc, #56]	@ (8001c88 <MX_SPI1_Init+0x64>)
 8001c50:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001c54:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001c56:	4b0c      	ldr	r3, [pc, #48]	@ (8001c88 <MX_SPI1_Init+0x64>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c5c:	4b0a      	ldr	r3, [pc, #40]	@ (8001c88 <MX_SPI1_Init+0x64>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001c62:	4b09      	ldr	r3, [pc, #36]	@ (8001c88 <MX_SPI1_Init+0x64>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c68:	4b07      	ldr	r3, [pc, #28]	@ (8001c88 <MX_SPI1_Init+0x64>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001c6e:	4b06      	ldr	r3, [pc, #24]	@ (8001c88 <MX_SPI1_Init+0x64>)
 8001c70:	220a      	movs	r2, #10
 8001c72:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001c74:	4804      	ldr	r0, [pc, #16]	@ (8001c88 <MX_SPI1_Init+0x64>)
 8001c76:	f005 fac9 	bl	800720c <HAL_SPI_Init>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d001      	beq.n	8001c84 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001c80:	f001 ff4e 	bl	8003b20 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001c84:	bf00      	nop
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	200002fc 	.word	0x200002fc
 8001c8c:	40013000 	.word	0x40013000

08001c90 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b092      	sub	sp, #72	@ 0x48
 8001c94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c96:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	601a      	str	r2, [r3, #0]
 8001c9e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ca0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	601a      	str	r2, [r3, #0]
 8001ca8:	605a      	str	r2, [r3, #4]
 8001caa:	609a      	str	r2, [r3, #8]
 8001cac:	60da      	str	r2, [r3, #12]
 8001cae:	611a      	str	r2, [r3, #16]
 8001cb0:	615a      	str	r2, [r3, #20]
 8001cb2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001cb4:	1d3b      	adds	r3, r7, #4
 8001cb6:	2220      	movs	r2, #32
 8001cb8:	2100      	movs	r1, #0
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f007 ffa9 	bl	8009c12 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001cc0:	4b33      	ldr	r3, [pc, #204]	@ (8001d90 <MX_TIM1_Init+0x100>)
 8001cc2:	4a34      	ldr	r2, [pc, #208]	@ (8001d94 <MX_TIM1_Init+0x104>)
 8001cc4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 6;
 8001cc6:	4b32      	ldr	r3, [pc, #200]	@ (8001d90 <MX_TIM1_Init+0x100>)
 8001cc8:	2206      	movs	r2, #6
 8001cca:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ccc:	4b30      	ldr	r3, [pc, #192]	@ (8001d90 <MX_TIM1_Init+0x100>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8001cd2:	4b2f      	ldr	r3, [pc, #188]	@ (8001d90 <MX_TIM1_Init+0x100>)
 8001cd4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001cd8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cda:	4b2d      	ldr	r3, [pc, #180]	@ (8001d90 <MX_TIM1_Init+0x100>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001ce0:	4b2b      	ldr	r3, [pc, #172]	@ (8001d90 <MX_TIM1_Init+0x100>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ce6:	4b2a      	ldr	r3, [pc, #168]	@ (8001d90 <MX_TIM1_Init+0x100>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001cec:	4828      	ldr	r0, [pc, #160]	@ (8001d90 <MX_TIM1_Init+0x100>)
 8001cee:	f005 fbd5 	bl	800749c <HAL_TIM_PWM_Init>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d001      	beq.n	8001cfc <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8001cf8:	f001 ff12 	bl	8003b20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d00:	2300      	movs	r3, #0
 8001d02:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001d04:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001d08:	4619      	mov	r1, r3
 8001d0a:	4821      	ldr	r0, [pc, #132]	@ (8001d90 <MX_TIM1_Init+0x100>)
 8001d0c:	f006 fcfc 	bl	8008708 <HAL_TIMEx_MasterConfigSynchronization>
 8001d10:	4603      	mov	r3, r0
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d001      	beq.n	8001d1a <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8001d16:	f001 ff03 	bl	8003b20 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d1a:	2360      	movs	r3, #96	@ 0x60
 8001d1c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d22:	2300      	movs	r3, #0
 8001d24:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001d26:	2300      	movs	r3, #0
 8001d28:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001d32:	2300      	movs	r3, #0
 8001d34:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d36:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	4619      	mov	r1, r3
 8001d3e:	4814      	ldr	r0, [pc, #80]	@ (8001d90 <MX_TIM1_Init+0x100>)
 8001d40:	f006 f81e 	bl	8007d80 <HAL_TIM_PWM_ConfigChannel>
 8001d44:	4603      	mov	r3, r0
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d001      	beq.n	8001d4e <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8001d4a:	f001 fee9 	bl	8003b20 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001d52:	2300      	movs	r3, #0
 8001d54:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001d56:	2300      	movs	r3, #0
 8001d58:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001d62:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001d66:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001d6c:	1d3b      	adds	r3, r7, #4
 8001d6e:	4619      	mov	r1, r3
 8001d70:	4807      	ldr	r0, [pc, #28]	@ (8001d90 <MX_TIM1_Init+0x100>)
 8001d72:	f006 fd45 	bl	8008800 <HAL_TIMEx_ConfigBreakDeadTime>
 8001d76:	4603      	mov	r3, r0
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d001      	beq.n	8001d80 <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 8001d7c:	f001 fed0 	bl	8003b20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001d80:	4803      	ldr	r0, [pc, #12]	@ (8001d90 <MX_TIM1_Init+0x100>)
 8001d82:	f002 f96f 	bl	8004064 <HAL_TIM_MspPostInit>

}
 8001d86:	bf00      	nop
 8001d88:	3748      	adds	r7, #72	@ 0x48
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	20000354 	.word	0x20000354
 8001d94:	40010000 	.word	0x40010000

08001d98 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b08a      	sub	sp, #40	@ 0x28
 8001d9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d9e:	f107 0320 	add.w	r3, r7, #32
 8001da2:	2200      	movs	r2, #0
 8001da4:	601a      	str	r2, [r3, #0]
 8001da6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001da8:	1d3b      	adds	r3, r7, #4
 8001daa:	2200      	movs	r2, #0
 8001dac:	601a      	str	r2, [r3, #0]
 8001dae:	605a      	str	r2, [r3, #4]
 8001db0:	609a      	str	r2, [r3, #8]
 8001db2:	60da      	str	r2, [r3, #12]
 8001db4:	611a      	str	r2, [r3, #16]
 8001db6:	615a      	str	r2, [r3, #20]
 8001db8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001dba:	4b22      	ldr	r3, [pc, #136]	@ (8001e44 <MX_TIM2_Init+0xac>)
 8001dbc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001dc0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 6;
 8001dc2:	4b20      	ldr	r3, [pc, #128]	@ (8001e44 <MX_TIM2_Init+0xac>)
 8001dc4:	2206      	movs	r2, #6
 8001dc6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dc8:	4b1e      	ldr	r3, [pc, #120]	@ (8001e44 <MX_TIM2_Init+0xac>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8001dce:	4b1d      	ldr	r3, [pc, #116]	@ (8001e44 <MX_TIM2_Init+0xac>)
 8001dd0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001dd4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dd6:	4b1b      	ldr	r3, [pc, #108]	@ (8001e44 <MX_TIM2_Init+0xac>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ddc:	4b19      	ldr	r3, [pc, #100]	@ (8001e44 <MX_TIM2_Init+0xac>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001de2:	4818      	ldr	r0, [pc, #96]	@ (8001e44 <MX_TIM2_Init+0xac>)
 8001de4:	f005 fb5a 	bl	800749c <HAL_TIM_PWM_Init>
 8001de8:	4603      	mov	r3, r0
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d001      	beq.n	8001df2 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001dee:	f001 fe97 	bl	8003b20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001df2:	2300      	movs	r3, #0
 8001df4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001df6:	2300      	movs	r3, #0
 8001df8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001dfa:	f107 0320 	add.w	r3, r7, #32
 8001dfe:	4619      	mov	r1, r3
 8001e00:	4810      	ldr	r0, [pc, #64]	@ (8001e44 <MX_TIM2_Init+0xac>)
 8001e02:	f006 fc81 	bl	8008708 <HAL_TIMEx_MasterConfigSynchronization>
 8001e06:	4603      	mov	r3, r0
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d001      	beq.n	8001e10 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001e0c:	f001 fe88 	bl	8003b20 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e10:	2360      	movs	r3, #96	@ 0x60
 8001e12:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001e14:	2300      	movs	r3, #0
 8001e16:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e20:	1d3b      	adds	r3, r7, #4
 8001e22:	2200      	movs	r2, #0
 8001e24:	4619      	mov	r1, r3
 8001e26:	4807      	ldr	r0, [pc, #28]	@ (8001e44 <MX_TIM2_Init+0xac>)
 8001e28:	f005 ffaa 	bl	8007d80 <HAL_TIM_PWM_ConfigChannel>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d001      	beq.n	8001e36 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8001e32:	f001 fe75 	bl	8003b20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001e36:	4803      	ldr	r0, [pc, #12]	@ (8001e44 <MX_TIM2_Init+0xac>)
 8001e38:	f002 f914 	bl	8004064 <HAL_TIM_MspPostInit>

}
 8001e3c:	bf00      	nop
 8001e3e:	3728      	adds	r7, #40	@ 0x28
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}
 8001e44:	2000039c 	.word	0x2000039c

08001e48 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b08c      	sub	sp, #48	@ 0x30
 8001e4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001e4e:	f107 030c 	add.w	r3, r7, #12
 8001e52:	2224      	movs	r2, #36	@ 0x24
 8001e54:	2100      	movs	r1, #0
 8001e56:	4618      	mov	r0, r3
 8001e58:	f007 fedb 	bl	8009c12 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e5c:	1d3b      	adds	r3, r7, #4
 8001e5e:	2200      	movs	r2, #0
 8001e60:	601a      	str	r2, [r3, #0]
 8001e62:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001e64:	4b20      	ldr	r3, [pc, #128]	@ (8001ee8 <MX_TIM3_Init+0xa0>)
 8001e66:	4a21      	ldr	r2, [pc, #132]	@ (8001eec <MX_TIM3_Init+0xa4>)
 8001e68:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001e6a:	4b1f      	ldr	r3, [pc, #124]	@ (8001ee8 <MX_TIM3_Init+0xa0>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e70:	4b1d      	ldr	r3, [pc, #116]	@ (8001ee8 <MX_TIM3_Init+0xa0>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001e76:	4b1c      	ldr	r3, [pc, #112]	@ (8001ee8 <MX_TIM3_Init+0xa0>)
 8001e78:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001e7c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e7e:	4b1a      	ldr	r3, [pc, #104]	@ (8001ee8 <MX_TIM3_Init+0xa0>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e84:	4b18      	ldr	r3, [pc, #96]	@ (8001ee8 <MX_TIM3_Init+0xa0>)
 8001e86:	2200      	movs	r2, #0
 8001e88:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001e8a:	2303      	movs	r3, #3
 8001e8c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001e92:	2301      	movs	r3, #1
 8001e94:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001e96:	2300      	movs	r3, #0
 8001e98:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001eae:	f107 030c 	add.w	r3, r7, #12
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	480c      	ldr	r0, [pc, #48]	@ (8001ee8 <MX_TIM3_Init+0xa0>)
 8001eb6:	f005 fd1f 	bl	80078f8 <HAL_TIM_Encoder_Init>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d001      	beq.n	8001ec4 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001ec0:	f001 fe2e 	bl	8003b20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001ecc:	1d3b      	adds	r3, r7, #4
 8001ece:	4619      	mov	r1, r3
 8001ed0:	4805      	ldr	r0, [pc, #20]	@ (8001ee8 <MX_TIM3_Init+0xa0>)
 8001ed2:	f006 fc19 	bl	8008708 <HAL_TIMEx_MasterConfigSynchronization>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d001      	beq.n	8001ee0 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001edc:	f001 fe20 	bl	8003b20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001ee0:	bf00      	nop
 8001ee2:	3730      	adds	r7, #48	@ 0x30
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	200003e4 	.word	0x200003e4
 8001eec:	40000400 	.word	0x40000400

08001ef0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b08c      	sub	sp, #48	@ 0x30
 8001ef4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001ef6:	f107 030c 	add.w	r3, r7, #12
 8001efa:	2224      	movs	r2, #36	@ 0x24
 8001efc:	2100      	movs	r1, #0
 8001efe:	4618      	mov	r0, r3
 8001f00:	f007 fe87 	bl	8009c12 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f04:	1d3b      	adds	r3, r7, #4
 8001f06:	2200      	movs	r2, #0
 8001f08:	601a      	str	r2, [r3, #0]
 8001f0a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001f0c:	4b20      	ldr	r3, [pc, #128]	@ (8001f90 <MX_TIM4_Init+0xa0>)
 8001f0e:	4a21      	ldr	r2, [pc, #132]	@ (8001f94 <MX_TIM4_Init+0xa4>)
 8001f10:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001f12:	4b1f      	ldr	r3, [pc, #124]	@ (8001f90 <MX_TIM4_Init+0xa0>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f18:	4b1d      	ldr	r3, [pc, #116]	@ (8001f90 <MX_TIM4_Init+0xa0>)
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001f1e:	4b1c      	ldr	r3, [pc, #112]	@ (8001f90 <MX_TIM4_Init+0xa0>)
 8001f20:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001f24:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f26:	4b1a      	ldr	r3, [pc, #104]	@ (8001f90 <MX_TIM4_Init+0xa0>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f2c:	4b18      	ldr	r3, [pc, #96]	@ (8001f90 <MX_TIM4_Init+0xa0>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001f32:	2303      	movs	r3, #3
 8001f34:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001f36:	2300      	movs	r3, #0
 8001f38:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001f42:	2300      	movs	r3, #0
 8001f44:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001f46:	2300      	movs	r3, #0
 8001f48:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001f52:	2300      	movs	r3, #0
 8001f54:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001f56:	f107 030c 	add.w	r3, r7, #12
 8001f5a:	4619      	mov	r1, r3
 8001f5c:	480c      	ldr	r0, [pc, #48]	@ (8001f90 <MX_TIM4_Init+0xa0>)
 8001f5e:	f005 fccb 	bl	80078f8 <HAL_TIM_Encoder_Init>
 8001f62:	4603      	mov	r3, r0
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d001      	beq.n	8001f6c <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8001f68:	f001 fdda 	bl	8003b20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f70:	2300      	movs	r3, #0
 8001f72:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001f74:	1d3b      	adds	r3, r7, #4
 8001f76:	4619      	mov	r1, r3
 8001f78:	4805      	ldr	r0, [pc, #20]	@ (8001f90 <MX_TIM4_Init+0xa0>)
 8001f7a:	f006 fbc5 	bl	8008708 <HAL_TIMEx_MasterConfigSynchronization>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d001      	beq.n	8001f88 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8001f84:	f001 fdcc 	bl	8003b20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001f88:	bf00      	nop
 8001f8a:	3730      	adds	r7, #48	@ 0x30
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}
 8001f90:	2000042c 	.word	0x2000042c
 8001f94:	40000800 	.word	0x40000800

08001f98 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b08a      	sub	sp, #40	@ 0x28
 8001f9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f9e:	f107 0320 	add.w	r3, r7, #32
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	601a      	str	r2, [r3, #0]
 8001fa6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001fa8:	1d3b      	adds	r3, r7, #4
 8001faa:	2200      	movs	r2, #0
 8001fac:	601a      	str	r2, [r3, #0]
 8001fae:	605a      	str	r2, [r3, #4]
 8001fb0:	609a      	str	r2, [r3, #8]
 8001fb2:	60da      	str	r2, [r3, #12]
 8001fb4:	611a      	str	r2, [r3, #16]
 8001fb6:	615a      	str	r2, [r3, #20]
 8001fb8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001fba:	4b22      	ldr	r3, [pc, #136]	@ (8002044 <MX_TIM5_Init+0xac>)
 8001fbc:	4a22      	ldr	r2, [pc, #136]	@ (8002048 <MX_TIM5_Init+0xb0>)
 8001fbe:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 2057;
 8001fc0:	4b20      	ldr	r3, [pc, #128]	@ (8002044 <MX_TIM5_Init+0xac>)
 8001fc2:	f640 0209 	movw	r2, #2057	@ 0x809
 8001fc6:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fc8:	4b1e      	ldr	r3, [pc, #120]	@ (8002044 <MX_TIM5_Init+0xac>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 99;
 8001fce:	4b1d      	ldr	r3, [pc, #116]	@ (8002044 <MX_TIM5_Init+0xac>)
 8001fd0:	2263      	movs	r2, #99	@ 0x63
 8001fd2:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fd4:	4b1b      	ldr	r3, [pc, #108]	@ (8002044 <MX_TIM5_Init+0xac>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fda:	4b1a      	ldr	r3, [pc, #104]	@ (8002044 <MX_TIM5_Init+0xac>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001fe0:	4818      	ldr	r0, [pc, #96]	@ (8002044 <MX_TIM5_Init+0xac>)
 8001fe2:	f005 fa5b 	bl	800749c <HAL_TIM_PWM_Init>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d001      	beq.n	8001ff0 <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 8001fec:	f001 fd98 	bl	8003b20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001ff8:	f107 0320 	add.w	r3, r7, #32
 8001ffc:	4619      	mov	r1, r3
 8001ffe:	4811      	ldr	r0, [pc, #68]	@ (8002044 <MX_TIM5_Init+0xac>)
 8002000:	f006 fb82 	bl	8008708 <HAL_TIMEx_MasterConfigSynchronization>
 8002004:	4603      	mov	r3, r0
 8002006:	2b00      	cmp	r3, #0
 8002008:	d001      	beq.n	800200e <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 800200a:	f001 fd89 	bl	8003b20 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800200e:	2360      	movs	r3, #96	@ 0x60
 8002010:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002012:	2300      	movs	r3, #0
 8002014:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002016:	2300      	movs	r3, #0
 8002018:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800201a:	2300      	movs	r3, #0
 800201c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800201e:	1d3b      	adds	r3, r7, #4
 8002020:	2200      	movs	r2, #0
 8002022:	4619      	mov	r1, r3
 8002024:	4807      	ldr	r0, [pc, #28]	@ (8002044 <MX_TIM5_Init+0xac>)
 8002026:	f005 feab 	bl	8007d80 <HAL_TIM_PWM_ConfigChannel>
 800202a:	4603      	mov	r3, r0
 800202c:	2b00      	cmp	r3, #0
 800202e:	d001      	beq.n	8002034 <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 8002030:	f001 fd76 	bl	8003b20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8002034:	4803      	ldr	r0, [pc, #12]	@ (8002044 <MX_TIM5_Init+0xac>)
 8002036:	f002 f815 	bl	8004064 <HAL_TIM_MspPostInit>

}
 800203a:	bf00      	nop
 800203c:	3728      	adds	r7, #40	@ 0x28
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	20000474 	.word	0x20000474
 8002048:	40000c00 	.word	0x40000c00

0800204c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b082      	sub	sp, #8
 8002050:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002052:	463b      	mov	r3, r7
 8002054:	2200      	movs	r2, #0
 8002056:	601a      	str	r2, [r3, #0]
 8002058:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800205a:	4b15      	ldr	r3, [pc, #84]	@ (80020b0 <MX_TIM6_Init+0x64>)
 800205c:	4a15      	ldr	r2, [pc, #84]	@ (80020b4 <MX_TIM6_Init+0x68>)
 800205e:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 1439;
 8002060:	4b13      	ldr	r3, [pc, #76]	@ (80020b0 <MX_TIM6_Init+0x64>)
 8002062:	f240 529f 	movw	r2, #1439	@ 0x59f
 8002066:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002068:	4b11      	ldr	r3, [pc, #68]	@ (80020b0 <MX_TIM6_Init+0x64>)
 800206a:	2200      	movs	r2, #0
 800206c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 4999;
 800206e:	4b10      	ldr	r3, [pc, #64]	@ (80020b0 <MX_TIM6_Init+0x64>)
 8002070:	f241 3287 	movw	r2, #4999	@ 0x1387
 8002074:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002076:	4b0e      	ldr	r3, [pc, #56]	@ (80020b0 <MX_TIM6_Init+0x64>)
 8002078:	2200      	movs	r2, #0
 800207a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800207c:	480c      	ldr	r0, [pc, #48]	@ (80020b0 <MX_TIM6_Init+0x64>)
 800207e:	f005 f94e 	bl	800731e <HAL_TIM_Base_Init>
 8002082:	4603      	mov	r3, r0
 8002084:	2b00      	cmp	r3, #0
 8002086:	d001      	beq.n	800208c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8002088:	f001 fd4a 	bl	8003b20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800208c:	2300      	movs	r3, #0
 800208e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002090:	2300      	movs	r3, #0
 8002092:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002094:	463b      	mov	r3, r7
 8002096:	4619      	mov	r1, r3
 8002098:	4805      	ldr	r0, [pc, #20]	@ (80020b0 <MX_TIM6_Init+0x64>)
 800209a:	f006 fb35 	bl	8008708 <HAL_TIMEx_MasterConfigSynchronization>
 800209e:	4603      	mov	r3, r0
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d001      	beq.n	80020a8 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80020a4:	f001 fd3c 	bl	8003b20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80020a8:	bf00      	nop
 80020aa:	3708      	adds	r7, #8
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}
 80020b0:	200004bc 	.word	0x200004bc
 80020b4:	40001000 	.word	0x40001000

080020b8 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b086      	sub	sp, #24
 80020bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80020be:	f107 0308 	add.w	r3, r7, #8
 80020c2:	2200      	movs	r2, #0
 80020c4:	601a      	str	r2, [r3, #0]
 80020c6:	605a      	str	r2, [r3, #4]
 80020c8:	609a      	str	r2, [r3, #8]
 80020ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020cc:	463b      	mov	r3, r7
 80020ce:	2200      	movs	r2, #0
 80020d0:	601a      	str	r2, [r3, #0]
 80020d2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80020d4:	4b1f      	ldr	r3, [pc, #124]	@ (8002154 <MX_TIM8_Init+0x9c>)
 80020d6:	4a20      	ldr	r2, [pc, #128]	@ (8002158 <MX_TIM8_Init+0xa0>)
 80020d8:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 1439;
 80020da:	4b1e      	ldr	r3, [pc, #120]	@ (8002154 <MX_TIM8_Init+0x9c>)
 80020dc:	f240 529f 	movw	r2, #1439	@ 0x59f
 80020e0:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020e2:	4b1c      	ldr	r3, [pc, #112]	@ (8002154 <MX_TIM8_Init+0x9c>)
 80020e4:	2200      	movs	r2, #0
 80020e6:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 499;
 80020e8:	4b1a      	ldr	r3, [pc, #104]	@ (8002154 <MX_TIM8_Init+0x9c>)
 80020ea:	f240 12f3 	movw	r2, #499	@ 0x1f3
 80020ee:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020f0:	4b18      	ldr	r3, [pc, #96]	@ (8002154 <MX_TIM8_Init+0x9c>)
 80020f2:	2200      	movs	r2, #0
 80020f4:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80020f6:	4b17      	ldr	r3, [pc, #92]	@ (8002154 <MX_TIM8_Init+0x9c>)
 80020f8:	2200      	movs	r2, #0
 80020fa:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020fc:	4b15      	ldr	r3, [pc, #84]	@ (8002154 <MX_TIM8_Init+0x9c>)
 80020fe:	2200      	movs	r2, #0
 8002100:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8002102:	4814      	ldr	r0, [pc, #80]	@ (8002154 <MX_TIM8_Init+0x9c>)
 8002104:	f005 f90b 	bl	800731e <HAL_TIM_Base_Init>
 8002108:	4603      	mov	r3, r0
 800210a:	2b00      	cmp	r3, #0
 800210c:	d001      	beq.n	8002112 <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 800210e:	f001 fd07 	bl	8003b20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002112:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002116:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8002118:	f107 0308 	add.w	r3, r7, #8
 800211c:	4619      	mov	r1, r3
 800211e:	480d      	ldr	r0, [pc, #52]	@ (8002154 <MX_TIM8_Init+0x9c>)
 8002120:	f005 fef0 	bl	8007f04 <HAL_TIM_ConfigClockSource>
 8002124:	4603      	mov	r3, r0
 8002126:	2b00      	cmp	r3, #0
 8002128:	d001      	beq.n	800212e <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 800212a:	f001 fcf9 	bl	8003b20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800212e:	2300      	movs	r3, #0
 8002130:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002132:	2300      	movs	r3, #0
 8002134:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002136:	463b      	mov	r3, r7
 8002138:	4619      	mov	r1, r3
 800213a:	4806      	ldr	r0, [pc, #24]	@ (8002154 <MX_TIM8_Init+0x9c>)
 800213c:	f006 fae4 	bl	8008708 <HAL_TIMEx_MasterConfigSynchronization>
 8002140:	4603      	mov	r3, r0
 8002142:	2b00      	cmp	r3, #0
 8002144:	d001      	beq.n	800214a <MX_TIM8_Init+0x92>
  {
    Error_Handler();
 8002146:	f001 fceb 	bl	8003b20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 800214a:	bf00      	nop
 800214c:	3718      	adds	r7, #24
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}
 8002152:	bf00      	nop
 8002154:	20000504 	.word	0x20000504
 8002158:	40010400 	.word	0x40010400

0800215c <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b084      	sub	sp, #16
 8002160:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002162:	463b      	mov	r3, r7
 8002164:	2200      	movs	r2, #0
 8002166:	601a      	str	r2, [r3, #0]
 8002168:	605a      	str	r2, [r3, #4]
 800216a:	609a      	str	r2, [r3, #8]
 800216c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 800216e:	4b16      	ldr	r3, [pc, #88]	@ (80021c8 <MX_TIM9_Init+0x6c>)
 8002170:	4a16      	ldr	r2, [pc, #88]	@ (80021cc <MX_TIM9_Init+0x70>)
 8002172:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 0;
 8002174:	4b14      	ldr	r3, [pc, #80]	@ (80021c8 <MX_TIM9_Init+0x6c>)
 8002176:	2200      	movs	r2, #0
 8002178:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 800217a:	4b13      	ldr	r3, [pc, #76]	@ (80021c8 <MX_TIM9_Init+0x6c>)
 800217c:	2200      	movs	r2, #0
 800217e:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 65535;
 8002180:	4b11      	ldr	r3, [pc, #68]	@ (80021c8 <MX_TIM9_Init+0x6c>)
 8002182:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002186:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002188:	4b0f      	ldr	r3, [pc, #60]	@ (80021c8 <MX_TIM9_Init+0x6c>)
 800218a:	2200      	movs	r2, #0
 800218c:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800218e:	4b0e      	ldr	r3, [pc, #56]	@ (80021c8 <MX_TIM9_Init+0x6c>)
 8002190:	2200      	movs	r2, #0
 8002192:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8002194:	480c      	ldr	r0, [pc, #48]	@ (80021c8 <MX_TIM9_Init+0x6c>)
 8002196:	f005 f8c2 	bl	800731e <HAL_TIM_Base_Init>
 800219a:	4603      	mov	r3, r0
 800219c:	2b00      	cmp	r3, #0
 800219e:	d001      	beq.n	80021a4 <MX_TIM9_Init+0x48>
  {
    Error_Handler();
 80021a0:	f001 fcbe 	bl	8003b20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021a4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80021a8:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 80021aa:	463b      	mov	r3, r7
 80021ac:	4619      	mov	r1, r3
 80021ae:	4806      	ldr	r0, [pc, #24]	@ (80021c8 <MX_TIM9_Init+0x6c>)
 80021b0:	f005 fea8 	bl	8007f04 <HAL_TIM_ConfigClockSource>
 80021b4:	4603      	mov	r3, r0
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d001      	beq.n	80021be <MX_TIM9_Init+0x62>
  {
    Error_Handler();
 80021ba:	f001 fcb1 	bl	8003b20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 80021be:	bf00      	nop
 80021c0:	3710      	adds	r7, #16
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	bf00      	nop
 80021c8:	2000054c 	.word	0x2000054c
 80021cc:	40014000 	.word	0x40014000

080021d0 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80021d4:	4b0e      	ldr	r3, [pc, #56]	@ (8002210 <MX_TIM10_Init+0x40>)
 80021d6:	4a0f      	ldr	r2, [pc, #60]	@ (8002214 <MX_TIM10_Init+0x44>)
 80021d8:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 1439;
 80021da:	4b0d      	ldr	r3, [pc, #52]	@ (8002210 <MX_TIM10_Init+0x40>)
 80021dc:	f240 529f 	movw	r2, #1439	@ 0x59f
 80021e0:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021e2:	4b0b      	ldr	r3, [pc, #44]	@ (8002210 <MX_TIM10_Init+0x40>)
 80021e4:	2200      	movs	r2, #0
 80021e6:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 19999;
 80021e8:	4b09      	ldr	r3, [pc, #36]	@ (8002210 <MX_TIM10_Init+0x40>)
 80021ea:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 80021ee:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021f0:	4b07      	ldr	r3, [pc, #28]	@ (8002210 <MX_TIM10_Init+0x40>)
 80021f2:	2200      	movs	r2, #0
 80021f4:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021f6:	4b06      	ldr	r3, [pc, #24]	@ (8002210 <MX_TIM10_Init+0x40>)
 80021f8:	2200      	movs	r2, #0
 80021fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80021fc:	4804      	ldr	r0, [pc, #16]	@ (8002210 <MX_TIM10_Init+0x40>)
 80021fe:	f005 f88e 	bl	800731e <HAL_TIM_Base_Init>
 8002202:	4603      	mov	r3, r0
 8002204:	2b00      	cmp	r3, #0
 8002206:	d001      	beq.n	800220c <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 8002208:	f001 fc8a 	bl	8003b20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 800220c:	bf00      	nop
 800220e:	bd80      	pop	{r7, pc}
 8002210:	20000594 	.word	0x20000594
 8002214:	40014400 	.word	0x40014400

08002218 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 800221c:	4b0e      	ldr	r3, [pc, #56]	@ (8002258 <MX_TIM11_Init+0x40>)
 800221e:	4a0f      	ldr	r2, [pc, #60]	@ (800225c <MX_TIM11_Init+0x44>)
 8002220:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 1440;
 8002222:	4b0d      	ldr	r3, [pc, #52]	@ (8002258 <MX_TIM11_Init+0x40>)
 8002224:	f44f 62b4 	mov.w	r2, #1440	@ 0x5a0
 8002228:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 800222a:	4b0b      	ldr	r3, [pc, #44]	@ (8002258 <MX_TIM11_Init+0x40>)
 800222c:	2200      	movs	r2, #0
 800222e:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 999;
 8002230:	4b09      	ldr	r3, [pc, #36]	@ (8002258 <MX_TIM11_Init+0x40>)
 8002232:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002236:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002238:	4b07      	ldr	r3, [pc, #28]	@ (8002258 <MX_TIM11_Init+0x40>)
 800223a:	2200      	movs	r2, #0
 800223c:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800223e:	4b06      	ldr	r3, [pc, #24]	@ (8002258 <MX_TIM11_Init+0x40>)
 8002240:	2200      	movs	r2, #0
 8002242:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8002244:	4804      	ldr	r0, [pc, #16]	@ (8002258 <MX_TIM11_Init+0x40>)
 8002246:	f005 f86a 	bl	800731e <HAL_TIM_Base_Init>
 800224a:	4603      	mov	r3, r0
 800224c:	2b00      	cmp	r3, #0
 800224e:	d001      	beq.n	8002254 <MX_TIM11_Init+0x3c>
  {
    Error_Handler();
 8002250:	f001 fc66 	bl	8003b20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8002254:	bf00      	nop
 8002256:	bd80      	pop	{r7, pc}
 8002258:	200005dc 	.word	0x200005dc
 800225c:	40014800 	.word	0x40014800

08002260 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002264:	4b11      	ldr	r3, [pc, #68]	@ (80022ac <MX_USART1_UART_Init+0x4c>)
 8002266:	4a12      	ldr	r2, [pc, #72]	@ (80022b0 <MX_USART1_UART_Init+0x50>)
 8002268:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800226a:	4b10      	ldr	r3, [pc, #64]	@ (80022ac <MX_USART1_UART_Init+0x4c>)
 800226c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002270:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002272:	4b0e      	ldr	r3, [pc, #56]	@ (80022ac <MX_USART1_UART_Init+0x4c>)
 8002274:	2200      	movs	r2, #0
 8002276:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002278:	4b0c      	ldr	r3, [pc, #48]	@ (80022ac <MX_USART1_UART_Init+0x4c>)
 800227a:	2200      	movs	r2, #0
 800227c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800227e:	4b0b      	ldr	r3, [pc, #44]	@ (80022ac <MX_USART1_UART_Init+0x4c>)
 8002280:	2200      	movs	r2, #0
 8002282:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002284:	4b09      	ldr	r3, [pc, #36]	@ (80022ac <MX_USART1_UART_Init+0x4c>)
 8002286:	220c      	movs	r2, #12
 8002288:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800228a:	4b08      	ldr	r3, [pc, #32]	@ (80022ac <MX_USART1_UART_Init+0x4c>)
 800228c:	2200      	movs	r2, #0
 800228e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002290:	4b06      	ldr	r3, [pc, #24]	@ (80022ac <MX_USART1_UART_Init+0x4c>)
 8002292:	2200      	movs	r2, #0
 8002294:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002296:	4805      	ldr	r0, [pc, #20]	@ (80022ac <MX_USART1_UART_Init+0x4c>)
 8002298:	f006 fb18 	bl	80088cc <HAL_UART_Init>
 800229c:	4603      	mov	r3, r0
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d001      	beq.n	80022a6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80022a2:	f001 fc3d 	bl	8003b20 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80022a6:	bf00      	nop
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	20000624 	.word	0x20000624
 80022b0:	40011000 	.word	0x40011000

080022b4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80022b8:	4b11      	ldr	r3, [pc, #68]	@ (8002300 <MX_USART2_UART_Init+0x4c>)
 80022ba:	4a12      	ldr	r2, [pc, #72]	@ (8002304 <MX_USART2_UART_Init+0x50>)
 80022bc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80022be:	4b10      	ldr	r3, [pc, #64]	@ (8002300 <MX_USART2_UART_Init+0x4c>)
 80022c0:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80022c4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80022c6:	4b0e      	ldr	r3, [pc, #56]	@ (8002300 <MX_USART2_UART_Init+0x4c>)
 80022c8:	2200      	movs	r2, #0
 80022ca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80022cc:	4b0c      	ldr	r3, [pc, #48]	@ (8002300 <MX_USART2_UART_Init+0x4c>)
 80022ce:	2200      	movs	r2, #0
 80022d0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80022d2:	4b0b      	ldr	r3, [pc, #44]	@ (8002300 <MX_USART2_UART_Init+0x4c>)
 80022d4:	2200      	movs	r2, #0
 80022d6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80022d8:	4b09      	ldr	r3, [pc, #36]	@ (8002300 <MX_USART2_UART_Init+0x4c>)
 80022da:	220c      	movs	r2, #12
 80022dc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022de:	4b08      	ldr	r3, [pc, #32]	@ (8002300 <MX_USART2_UART_Init+0x4c>)
 80022e0:	2200      	movs	r2, #0
 80022e2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80022e4:	4b06      	ldr	r3, [pc, #24]	@ (8002300 <MX_USART2_UART_Init+0x4c>)
 80022e6:	2200      	movs	r2, #0
 80022e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80022ea:	4805      	ldr	r0, [pc, #20]	@ (8002300 <MX_USART2_UART_Init+0x4c>)
 80022ec:	f006 faee 	bl	80088cc <HAL_UART_Init>
 80022f0:	4603      	mov	r3, r0
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d001      	beq.n	80022fa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80022f6:	f001 fc13 	bl	8003b20 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80022fa:	bf00      	nop
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	2000066c 	.word	0x2000066c
 8002304:	40004400 	.word	0x40004400

08002308 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b08c      	sub	sp, #48	@ 0x30
 800230c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800230e:	f107 031c 	add.w	r3, r7, #28
 8002312:	2200      	movs	r2, #0
 8002314:	601a      	str	r2, [r3, #0]
 8002316:	605a      	str	r2, [r3, #4]
 8002318:	609a      	str	r2, [r3, #8]
 800231a:	60da      	str	r2, [r3, #12]
 800231c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800231e:	2300      	movs	r3, #0
 8002320:	61bb      	str	r3, [r7, #24]
 8002322:	4b55      	ldr	r3, [pc, #340]	@ (8002478 <MX_GPIO_Init+0x170>)
 8002324:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002326:	4a54      	ldr	r2, [pc, #336]	@ (8002478 <MX_GPIO_Init+0x170>)
 8002328:	f043 0310 	orr.w	r3, r3, #16
 800232c:	6313      	str	r3, [r2, #48]	@ 0x30
 800232e:	4b52      	ldr	r3, [pc, #328]	@ (8002478 <MX_GPIO_Init+0x170>)
 8002330:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002332:	f003 0310 	and.w	r3, r3, #16
 8002336:	61bb      	str	r3, [r7, #24]
 8002338:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800233a:	2300      	movs	r3, #0
 800233c:	617b      	str	r3, [r7, #20]
 800233e:	4b4e      	ldr	r3, [pc, #312]	@ (8002478 <MX_GPIO_Init+0x170>)
 8002340:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002342:	4a4d      	ldr	r2, [pc, #308]	@ (8002478 <MX_GPIO_Init+0x170>)
 8002344:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002348:	6313      	str	r3, [r2, #48]	@ 0x30
 800234a:	4b4b      	ldr	r3, [pc, #300]	@ (8002478 <MX_GPIO_Init+0x170>)
 800234c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800234e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002352:	617b      	str	r3, [r7, #20]
 8002354:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002356:	2300      	movs	r3, #0
 8002358:	613b      	str	r3, [r7, #16]
 800235a:	4b47      	ldr	r3, [pc, #284]	@ (8002478 <MX_GPIO_Init+0x170>)
 800235c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800235e:	4a46      	ldr	r2, [pc, #280]	@ (8002478 <MX_GPIO_Init+0x170>)
 8002360:	f043 0304 	orr.w	r3, r3, #4
 8002364:	6313      	str	r3, [r2, #48]	@ 0x30
 8002366:	4b44      	ldr	r3, [pc, #272]	@ (8002478 <MX_GPIO_Init+0x170>)
 8002368:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800236a:	f003 0304 	and.w	r3, r3, #4
 800236e:	613b      	str	r3, [r7, #16]
 8002370:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002372:	2300      	movs	r3, #0
 8002374:	60fb      	str	r3, [r7, #12]
 8002376:	4b40      	ldr	r3, [pc, #256]	@ (8002478 <MX_GPIO_Init+0x170>)
 8002378:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800237a:	4a3f      	ldr	r2, [pc, #252]	@ (8002478 <MX_GPIO_Init+0x170>)
 800237c:	f043 0301 	orr.w	r3, r3, #1
 8002380:	6313      	str	r3, [r2, #48]	@ 0x30
 8002382:	4b3d      	ldr	r3, [pc, #244]	@ (8002478 <MX_GPIO_Init+0x170>)
 8002384:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002386:	f003 0301 	and.w	r3, r3, #1
 800238a:	60fb      	str	r3, [r7, #12]
 800238c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800238e:	2300      	movs	r3, #0
 8002390:	60bb      	str	r3, [r7, #8]
 8002392:	4b39      	ldr	r3, [pc, #228]	@ (8002478 <MX_GPIO_Init+0x170>)
 8002394:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002396:	4a38      	ldr	r2, [pc, #224]	@ (8002478 <MX_GPIO_Init+0x170>)
 8002398:	f043 0302 	orr.w	r3, r3, #2
 800239c:	6313      	str	r3, [r2, #48]	@ 0x30
 800239e:	4b36      	ldr	r3, [pc, #216]	@ (8002478 <MX_GPIO_Init+0x170>)
 80023a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023a2:	f003 0302 	and.w	r3, r3, #2
 80023a6:	60bb      	str	r3, [r7, #8]
 80023a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80023aa:	2300      	movs	r3, #0
 80023ac:	607b      	str	r3, [r7, #4]
 80023ae:	4b32      	ldr	r3, [pc, #200]	@ (8002478 <MX_GPIO_Init+0x170>)
 80023b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023b2:	4a31      	ldr	r2, [pc, #196]	@ (8002478 <MX_GPIO_Init+0x170>)
 80023b4:	f043 0308 	orr.w	r3, r3, #8
 80023b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80023ba:	4b2f      	ldr	r3, [pc, #188]	@ (8002478 <MX_GPIO_Init+0x170>)
 80023bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023be:	f003 0308 	and.w	r3, r3, #8
 80023c2:	607b      	str	r3, [r7, #4]
 80023c4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, RUN_LIGHT_Pin|STOP_LIGHT_Pin|WARNING_LIGHT_Pin|GPIO_PIN_15, GPIO_PIN_RESET);
 80023c6:	2200      	movs	r2, #0
 80023c8:	f248 011c 	movw	r1, #32796	@ 0x801c
 80023cc:	482b      	ldr	r0, [pc, #172]	@ (800247c <MX_GPIO_Init+0x174>)
 80023ce:	f002 fc6b 	bl	8004ca8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 80023d2:	2200      	movs	r2, #0
 80023d4:	210f      	movs	r1, #15
 80023d6:	482a      	ldr	r0, [pc, #168]	@ (8002480 <MX_GPIO_Init+0x178>)
 80023d8:	f002 fc66 	bl	8004ca8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, DIR_L_Pin|DIR_R_Pin|DIR_SERVO_Pin, GPIO_PIN_RESET);
 80023dc:	2200      	movs	r2, #0
 80023de:	21e0      	movs	r1, #224	@ 0xe0
 80023e0:	4828      	ldr	r0, [pc, #160]	@ (8002484 <MX_GPIO_Init+0x17c>)
 80023e2:	f002 fc61 	bl	8004ca8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RUN_LIGHT_Pin STOP_LIGHT_Pin WARNING_LIGHT_Pin */
  GPIO_InitStruct.Pin = RUN_LIGHT_Pin|STOP_LIGHT_Pin|WARNING_LIGHT_Pin;
 80023e6:	231c      	movs	r3, #28
 80023e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023ea:	2301      	movs	r3, #1
 80023ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ee:	2300      	movs	r3, #0
 80023f0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023f2:	2300      	movs	r3, #0
 80023f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80023f6:	f107 031c 	add.w	r3, r7, #28
 80023fa:	4619      	mov	r1, r3
 80023fc:	481f      	ldr	r0, [pc, #124]	@ (800247c <MX_GPIO_Init+0x174>)
 80023fe:	f002 fab7 	bl	8004970 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8002402:	230f      	movs	r3, #15
 8002404:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002406:	2301      	movs	r3, #1
 8002408:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800240a:	2300      	movs	r3, #0
 800240c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800240e:	2300      	movs	r3, #0
 8002410:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002412:	f107 031c 	add.w	r3, r7, #28
 8002416:	4619      	mov	r1, r3
 8002418:	4819      	ldr	r0, [pc, #100]	@ (8002480 <MX_GPIO_Init+0x178>)
 800241a:	f002 faa9 	bl	8004970 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800241e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002422:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002424:	2301      	movs	r3, #1
 8002426:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002428:	2300      	movs	r3, #0
 800242a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800242c:	2303      	movs	r3, #3
 800242e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002430:	f107 031c 	add.w	r3, r7, #28
 8002434:	4619      	mov	r1, r3
 8002436:	4811      	ldr	r0, [pc, #68]	@ (800247c <MX_GPIO_Init+0x174>)
 8002438:	f002 fa9a 	bl	8004970 <HAL_GPIO_Init>

  /*Configure GPIO pins : USER_BUTTON_Pin STOP_Button_Pin START_Button_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin|STOP_Button_Pin|START_Button_Pin;
 800243c:	2307      	movs	r3, #7
 800243e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002440:	2300      	movs	r3, #0
 8002442:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002444:	2300      	movs	r3, #0
 8002446:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002448:	f107 031c 	add.w	r3, r7, #28
 800244c:	4619      	mov	r1, r3
 800244e:	480d      	ldr	r0, [pc, #52]	@ (8002484 <MX_GPIO_Init+0x17c>)
 8002450:	f002 fa8e 	bl	8004970 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIR_L_Pin DIR_R_Pin DIR_SERVO_Pin */
  GPIO_InitStruct.Pin = DIR_L_Pin|DIR_R_Pin|DIR_SERVO_Pin;
 8002454:	23e0      	movs	r3, #224	@ 0xe0
 8002456:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002458:	2301      	movs	r3, #1
 800245a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800245c:	2300      	movs	r3, #0
 800245e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002460:	2300      	movs	r3, #0
 8002462:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002464:	f107 031c 	add.w	r3, r7, #28
 8002468:	4619      	mov	r1, r3
 800246a:	4806      	ldr	r0, [pc, #24]	@ (8002484 <MX_GPIO_Init+0x17c>)
 800246c:	f002 fa80 	bl	8004970 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002470:	bf00      	nop
 8002472:	3730      	adds	r7, #48	@ 0x30
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}
 8002478:	40023800 	.word	0x40023800
 800247c:	40021000 	.word	0x40021000
 8002480:	40020800 	.word	0x40020800
 8002484:	40020c00 	.word	0x40020c00

08002488 <DIR_Servo>:

/* USER CODE BEGIN 4 */
// Stepper
void DIR_Servo(int8_t DIR)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b082      	sub	sp, #8
 800248c:	af00      	add	r7, sp, #0
 800248e:	4603      	mov	r3, r0
 8002490:	71fb      	strb	r3, [r7, #7]
	if(DIR == 1)
 8002492:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002496:	2b01      	cmp	r3, #1
 8002498:	d105      	bne.n	80024a6 <DIR_Servo+0x1e>
	{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, SET);
 800249a:	2201      	movs	r2, #1
 800249c:	2180      	movs	r1, #128	@ 0x80
 800249e:	4809      	ldr	r0, [pc, #36]	@ (80024c4 <DIR_Servo+0x3c>)
 80024a0:	f002 fc02 	bl	8004ca8 <HAL_GPIO_WritePin>
	else if(DIR == -1)
	{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, RESET);
	}

}
 80024a4:	e009      	b.n	80024ba <DIR_Servo+0x32>
	else if(DIR == -1)
 80024a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024ae:	d104      	bne.n	80024ba <DIR_Servo+0x32>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, RESET);
 80024b0:	2200      	movs	r2, #0
 80024b2:	2180      	movs	r1, #128	@ 0x80
 80024b4:	4803      	ldr	r0, [pc, #12]	@ (80024c4 <DIR_Servo+0x3c>)
 80024b6:	f002 fbf7 	bl	8004ca8 <HAL_GPIO_WritePin>
}
 80024ba:	bf00      	nop
 80024bc:	3708      	adds	r7, #8
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	bf00      	nop
 80024c4:	40020c00 	.word	0x40020c00

080024c8 <HAL_TIM_PWM_PulseFinishedCallback>:

// Ham_dem_xung_Serrvo
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b082      	sub	sp, #8
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM5)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a21      	ldr	r2, [pc, #132]	@ (800255c <HAL_TIM_PWM_PulseFinishedCallback+0x94>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d13b      	bne.n	8002552 <HAL_TIM_PWM_PulseFinishedCallback+0x8a>
	{
		if(Counter_AC == Diem_dung)
 80024da:	4b21      	ldr	r3, [pc, #132]	@ (8002560 <HAL_TIM_PWM_PulseFinishedCallback+0x98>)
 80024dc:	681a      	ldr	r2, [r3, #0]
 80024de:	4b21      	ldr	r3, [pc, #132]	@ (8002564 <HAL_TIM_PWM_PulseFinishedCallback+0x9c>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	429a      	cmp	r2, r3
 80024e4:	d104      	bne.n	80024f0 <HAL_TIM_PWM_PulseFinishedCallback+0x28>
		{
			__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_1, 0);
 80024e6:	4b20      	ldr	r3, [pc, #128]	@ (8002568 <HAL_TIM_PWM_PulseFinishedCallback+0xa0>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	2200      	movs	r2, #0
 80024ec:	635a      	str	r2, [r3, #52]	@ 0x34
			__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_1, 49);
			DIR_Servo(DIR);
			Counter_AC-=1;
		}
	}
}
 80024ee:	e030      	b.n	8002552 <HAL_TIM_PWM_PulseFinishedCallback+0x8a>
		else if(Counter_AC < Diem_dung)
 80024f0:	4b1b      	ldr	r3, [pc, #108]	@ (8002560 <HAL_TIM_PWM_PulseFinishedCallback+0x98>)
 80024f2:	681a      	ldr	r2, [r3, #0]
 80024f4:	4b1b      	ldr	r3, [pc, #108]	@ (8002564 <HAL_TIM_PWM_PulseFinishedCallback+0x9c>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	429a      	cmp	r2, r3
 80024fa:	da12      	bge.n	8002522 <HAL_TIM_PWM_PulseFinishedCallback+0x5a>
			DIR = 1;
 80024fc:	4b1b      	ldr	r3, [pc, #108]	@ (800256c <HAL_TIM_PWM_PulseFinishedCallback+0xa4>)
 80024fe:	2201      	movs	r2, #1
 8002500:	701a      	strb	r2, [r3, #0]
			DIR_Servo(DIR);
 8002502:	4b1a      	ldr	r3, [pc, #104]	@ (800256c <HAL_TIM_PWM_PulseFinishedCallback+0xa4>)
 8002504:	f993 3000 	ldrsb.w	r3, [r3]
 8002508:	4618      	mov	r0, r3
 800250a:	f7ff ffbd 	bl	8002488 <DIR_Servo>
			__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_1, 49);
 800250e:	4b16      	ldr	r3, [pc, #88]	@ (8002568 <HAL_TIM_PWM_PulseFinishedCallback+0xa0>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	2231      	movs	r2, #49	@ 0x31
 8002514:	635a      	str	r2, [r3, #52]	@ 0x34
			Counter_AC+=1;
 8002516:	4b12      	ldr	r3, [pc, #72]	@ (8002560 <HAL_TIM_PWM_PulseFinishedCallback+0x98>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	3301      	adds	r3, #1
 800251c:	4a10      	ldr	r2, [pc, #64]	@ (8002560 <HAL_TIM_PWM_PulseFinishedCallback+0x98>)
 800251e:	6013      	str	r3, [r2, #0]
}
 8002520:	e017      	b.n	8002552 <HAL_TIM_PWM_PulseFinishedCallback+0x8a>
		else if(Counter_AC > Diem_dung)
 8002522:	4b0f      	ldr	r3, [pc, #60]	@ (8002560 <HAL_TIM_PWM_PulseFinishedCallback+0x98>)
 8002524:	681a      	ldr	r2, [r3, #0]
 8002526:	4b0f      	ldr	r3, [pc, #60]	@ (8002564 <HAL_TIM_PWM_PulseFinishedCallback+0x9c>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	429a      	cmp	r2, r3
 800252c:	dd11      	ble.n	8002552 <HAL_TIM_PWM_PulseFinishedCallback+0x8a>
			DIR = -1;
 800252e:	4b0f      	ldr	r3, [pc, #60]	@ (800256c <HAL_TIM_PWM_PulseFinishedCallback+0xa4>)
 8002530:	22ff      	movs	r2, #255	@ 0xff
 8002532:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_1, 49);
 8002534:	4b0c      	ldr	r3, [pc, #48]	@ (8002568 <HAL_TIM_PWM_PulseFinishedCallback+0xa0>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	2231      	movs	r2, #49	@ 0x31
 800253a:	635a      	str	r2, [r3, #52]	@ 0x34
			DIR_Servo(DIR);
 800253c:	4b0b      	ldr	r3, [pc, #44]	@ (800256c <HAL_TIM_PWM_PulseFinishedCallback+0xa4>)
 800253e:	f993 3000 	ldrsb.w	r3, [r3]
 8002542:	4618      	mov	r0, r3
 8002544:	f7ff ffa0 	bl	8002488 <DIR_Servo>
			Counter_AC-=1;
 8002548:	4b05      	ldr	r3, [pc, #20]	@ (8002560 <HAL_TIM_PWM_PulseFinishedCallback+0x98>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	3b01      	subs	r3, #1
 800254e:	4a04      	ldr	r2, [pc, #16]	@ (8002560 <HAL_TIM_PWM_PulseFinishedCallback+0x98>)
 8002550:	6013      	str	r3, [r2, #0]
}
 8002552:	bf00      	nop
 8002554:	3708      	adds	r7, #8
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}
 800255a:	bf00      	nop
 800255c:	40000c00 	.word	0x40000c00
 8002560:	2000c3e8 	.word	0x2000c3e8
 8002564:	2000c3ec 	.word	0x2000c3ec
 8002568:	20000474 	.word	0x20000474
 800256c:	2000c3f0 	.word	0x2000c3f0

08002570 <UART_1>:
	float Buoc_ren = 4;  // Bước 4
	Diem_dung = (int32_t)(Khoang_cach_mm*200*phan_giai)/(Buoc_ren);
}
// Duy Nhat
void UART_1(float a1, float a2, float a3, float a4, float a5, float a6)
{
 8002570:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002574:	b0c9      	sub	sp, #292	@ 0x124
 8002576:	af00      	add	r7, sp, #0
 8002578:	ed87 0a1f 	vstr	s0, [r7, #124]	@ 0x7c
 800257c:	edc7 0a1e 	vstr	s1, [r7, #120]	@ 0x78
 8002580:	ed87 1a1d 	vstr	s2, [r7, #116]	@ 0x74
 8002584:	edc7 1a1c 	vstr	s3, [r7, #112]	@ 0x70
 8002588:	ed87 2a1b 	vstr	s4, [r7, #108]	@ 0x6c
 800258c:	edc7 2a1a 	vstr	s5, [r7, #104]	@ 0x68
 8002590:	466b      	mov	r3, sp
 8002592:	607b      	str	r3, [r7, #4]
    //a1 = sin(t) + t ;
    // Giới hạn giá trị chỉ với 4 chữ số sau dấu chấm thập phân
    int integer_part1 = (int)a1;
 8002594:	edd7 7a1f 	vldr	s15, [r7, #124]	@ 0x7c
 8002598:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800259c:	ee17 3a90 	vmov	r3, s15
 80025a0:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    float decimal_part1 = a1 - integer_part1; // Lấy phần thập phân
 80025a4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80025a8:	ee07 3a90 	vmov	s15, r3
 80025ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80025b0:	ed97 7a1f 	vldr	s14, [r7, #124]	@ 0x7c
 80025b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025b8:	edc7 7a46 	vstr	s15, [r7, #280]	@ 0x118
    decimal_part1 *= 10000000; // Dịch chuyển phần thập phân sang trái 4 chữ số
 80025bc:	edd7 7a46 	vldr	s15, [r7, #280]	@ 0x118
 80025c0:	ed9f 7ae3 	vldr	s14, [pc, #908]	@ 8002950 <UART_1+0x3e0>
 80025c4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80025c8:	edc7 7a46 	vstr	s15, [r7, #280]	@ 0x118
    int truncated_decimal1 = (int)decimal_part1; // Chuyển phần thập phân đã dịch chuyển thành số nguyên
 80025cc:	edd7 7a46 	vldr	s15, [r7, #280]	@ 0x118
 80025d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80025d4:	ee17 3a90 	vmov	r3, s15
 80025d8:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
     b1 = integer_part1 + truncated_decimal1 / 10000000.0; // Kết hợp lại phần nguyên và phần thập phân đã cắt
 80025dc:	f8d7 011c 	ldr.w	r0, [r7, #284]	@ 0x11c
 80025e0:	f7fd ffa0 	bl	8000524 <__aeabi_i2d>
 80025e4:	4604      	mov	r4, r0
 80025e6:	460d      	mov	r5, r1
 80025e8:	f8d7 0114 	ldr.w	r0, [r7, #276]	@ 0x114
 80025ec:	f7fd ff9a 	bl	8000524 <__aeabi_i2d>
 80025f0:	a3d5      	add	r3, pc, #852	@ (adr r3, 8002948 <UART_1+0x3d8>)
 80025f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025f6:	f7fe f929 	bl	800084c <__aeabi_ddiv>
 80025fa:	4602      	mov	r2, r0
 80025fc:	460b      	mov	r3, r1
 80025fe:	4620      	mov	r0, r4
 8002600:	4629      	mov	r1, r5
 8002602:	f7fd fe43 	bl	800028c <__adddf3>
 8002606:	4602      	mov	r2, r0
 8002608:	460b      	mov	r3, r1
 800260a:	4610      	mov	r0, r2
 800260c:	4619      	mov	r1, r3
 800260e:	f7fe faeb 	bl	8000be8 <__aeabi_d2f>
 8002612:	4602      	mov	r2, r0
 8002614:	4bcf      	ldr	r3, [pc, #828]	@ (8002954 <UART_1+0x3e4>)
 8002616:	601a      	str	r2, [r3, #0]


     //a2 = 10 + sin(t) + t ;
     int integer_part2 = (int)a2;
 8002618:	edd7 7a1e 	vldr	s15, [r7, #120]	@ 0x78
 800261c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002620:	ee17 3a90 	vmov	r3, s15
 8002624:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
     float decimal_part2 = a2 - integer_part2;
 8002628:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800262c:	ee07 3a90 	vmov	s15, r3
 8002630:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002634:	ed97 7a1e 	vldr	s14, [r7, #120]	@ 0x78
 8002638:	ee77 7a67 	vsub.f32	s15, s14, s15
 800263c:	edc7 7a43 	vstr	s15, [r7, #268]	@ 0x10c
     decimal_part2 *= 10000000;
 8002640:	edd7 7a43 	vldr	s15, [r7, #268]	@ 0x10c
 8002644:	ed9f 7ac2 	vldr	s14, [pc, #776]	@ 8002950 <UART_1+0x3e0>
 8002648:	ee67 7a87 	vmul.f32	s15, s15, s14
 800264c:	edc7 7a43 	vstr	s15, [r7, #268]	@ 0x10c
     int truncated_decimal2 = (int)decimal_part2;
 8002650:	edd7 7a43 	vldr	s15, [r7, #268]	@ 0x10c
 8002654:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002658:	ee17 3a90 	vmov	r3, s15
 800265c:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
      b2 = integer_part2 + truncated_decimal2 / 10000000.0;
 8002660:	f8d7 0110 	ldr.w	r0, [r7, #272]	@ 0x110
 8002664:	f7fd ff5e 	bl	8000524 <__aeabi_i2d>
 8002668:	4604      	mov	r4, r0
 800266a:	460d      	mov	r5, r1
 800266c:	f8d7 0108 	ldr.w	r0, [r7, #264]	@ 0x108
 8002670:	f7fd ff58 	bl	8000524 <__aeabi_i2d>
 8002674:	a3b4      	add	r3, pc, #720	@ (adr r3, 8002948 <UART_1+0x3d8>)
 8002676:	e9d3 2300 	ldrd	r2, r3, [r3]
 800267a:	f7fe f8e7 	bl	800084c <__aeabi_ddiv>
 800267e:	4602      	mov	r2, r0
 8002680:	460b      	mov	r3, r1
 8002682:	4620      	mov	r0, r4
 8002684:	4629      	mov	r1, r5
 8002686:	f7fd fe01 	bl	800028c <__adddf3>
 800268a:	4602      	mov	r2, r0
 800268c:	460b      	mov	r3, r1
 800268e:	4610      	mov	r0, r2
 8002690:	4619      	mov	r1, r3
 8002692:	f7fe faa9 	bl	8000be8 <__aeabi_d2f>
 8002696:	4602      	mov	r2, r0
 8002698:	4baf      	ldr	r3, [pc, #700]	@ (8002958 <UART_1+0x3e8>)
 800269a:	601a      	str	r2, [r3, #0]

     //a3 =10 + sin(t) + t + a ;
     int integer_part3 = (int)a3;
 800269c:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 80026a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80026a4:	ee17 3a90 	vmov	r3, s15
 80026a8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
     float decimal_part3 = a3 - integer_part3;
 80026ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80026b0:	ee07 3a90 	vmov	s15, r3
 80026b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80026b8:	ed97 7a1d 	vldr	s14, [r7, #116]	@ 0x74
 80026bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80026c0:	edc7 7a40 	vstr	s15, [r7, #256]	@ 0x100
     decimal_part3 *= 10000000;
 80026c4:	edd7 7a40 	vldr	s15, [r7, #256]	@ 0x100
 80026c8:	ed9f 7aa1 	vldr	s14, [pc, #644]	@ 8002950 <UART_1+0x3e0>
 80026cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80026d0:	edc7 7a40 	vstr	s15, [r7, #256]	@ 0x100
     int truncated_decimal3 = (int)decimal_part3;
 80026d4:	edd7 7a40 	vldr	s15, [r7, #256]	@ 0x100
 80026d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80026dc:	ee17 3a90 	vmov	r3, s15
 80026e0:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
     b3 = integer_part3 + truncated_decimal3 / 10000000.0;
 80026e4:	f8d7 0104 	ldr.w	r0, [r7, #260]	@ 0x104
 80026e8:	f7fd ff1c 	bl	8000524 <__aeabi_i2d>
 80026ec:	4604      	mov	r4, r0
 80026ee:	460d      	mov	r5, r1
 80026f0:	f8d7 00fc 	ldr.w	r0, [r7, #252]	@ 0xfc
 80026f4:	f7fd ff16 	bl	8000524 <__aeabi_i2d>
 80026f8:	a393      	add	r3, pc, #588	@ (adr r3, 8002948 <UART_1+0x3d8>)
 80026fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026fe:	f7fe f8a5 	bl	800084c <__aeabi_ddiv>
 8002702:	4602      	mov	r2, r0
 8002704:	460b      	mov	r3, r1
 8002706:	4620      	mov	r0, r4
 8002708:	4629      	mov	r1, r5
 800270a:	f7fd fdbf 	bl	800028c <__adddf3>
 800270e:	4602      	mov	r2, r0
 8002710:	460b      	mov	r3, r1
 8002712:	4610      	mov	r0, r2
 8002714:	4619      	mov	r1, r3
 8002716:	f7fe fa67 	bl	8000be8 <__aeabi_d2f>
 800271a:	4602      	mov	r2, r0
 800271c:	4b8f      	ldr	r3, [pc, #572]	@ (800295c <UART_1+0x3ec>)
 800271e:	601a      	str	r2, [r3, #0]

     //a4 =  sin(t) + t ;
     int integer_part4 = (int)a4;
 8002720:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 8002724:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002728:	ee17 3a90 	vmov	r3, s15
 800272c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
     float decimal_part4 = a4 - integer_part4;
 8002730:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002734:	ee07 3a90 	vmov	s15, r3
 8002738:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800273c:	ed97 7a1c 	vldr	s14, [r7, #112]	@ 0x70
 8002740:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002744:	edc7 7a3d 	vstr	s15, [r7, #244]	@ 0xf4
     decimal_part4 *= 10000000;
 8002748:	edd7 7a3d 	vldr	s15, [r7, #244]	@ 0xf4
 800274c:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 8002950 <UART_1+0x3e0>
 8002750:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002754:	edc7 7a3d 	vstr	s15, [r7, #244]	@ 0xf4
     int truncated_decimal4 = (int)decimal_part4;
 8002758:	edd7 7a3d 	vldr	s15, [r7, #244]	@ 0xf4
 800275c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002760:	ee17 3a90 	vmov	r3, s15
 8002764:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
     b4 = integer_part4 + truncated_decimal4 / 10000000.0;
 8002768:	f8d7 00f8 	ldr.w	r0, [r7, #248]	@ 0xf8
 800276c:	f7fd feda 	bl	8000524 <__aeabi_i2d>
 8002770:	4604      	mov	r4, r0
 8002772:	460d      	mov	r5, r1
 8002774:	f8d7 00f0 	ldr.w	r0, [r7, #240]	@ 0xf0
 8002778:	f7fd fed4 	bl	8000524 <__aeabi_i2d>
 800277c:	a372      	add	r3, pc, #456	@ (adr r3, 8002948 <UART_1+0x3d8>)
 800277e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002782:	f7fe f863 	bl	800084c <__aeabi_ddiv>
 8002786:	4602      	mov	r2, r0
 8002788:	460b      	mov	r3, r1
 800278a:	4620      	mov	r0, r4
 800278c:	4629      	mov	r1, r5
 800278e:	f7fd fd7d 	bl	800028c <__adddf3>
 8002792:	4602      	mov	r2, r0
 8002794:	460b      	mov	r3, r1
 8002796:	4610      	mov	r0, r2
 8002798:	4619      	mov	r1, r3
 800279a:	f7fe fa25 	bl	8000be8 <__aeabi_d2f>
 800279e:	4602      	mov	r2, r0
 80027a0:	4b6f      	ldr	r3, [pc, #444]	@ (8002960 <UART_1+0x3f0>)
 80027a2:	601a      	str	r2, [r3, #0]



     int integer_part5 = (int)a5;
 80027a4:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 80027a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80027ac:	ee17 3a90 	vmov	r3, s15
 80027b0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
     float decimal_part5 = a5 - integer_part5;
 80027b4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80027b8:	ee07 3a90 	vmov	s15, r3
 80027bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80027c0:	ed97 7a1b 	vldr	s14, [r7, #108]	@ 0x6c
 80027c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027c8:	edc7 7a3a 	vstr	s15, [r7, #232]	@ 0xe8
     decimal_part5 *= 10000000;
 80027cc:	edd7 7a3a 	vldr	s15, [r7, #232]	@ 0xe8
 80027d0:	ed9f 7a5f 	vldr	s14, [pc, #380]	@ 8002950 <UART_1+0x3e0>
 80027d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80027d8:	edc7 7a3a 	vstr	s15, [r7, #232]	@ 0xe8
     int truncated_decimal5 = (int)decimal_part5;
 80027dc:	edd7 7a3a 	vldr	s15, [r7, #232]	@ 0xe8
 80027e0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80027e4:	ee17 3a90 	vmov	r3, s15
 80027e8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
     b5 = integer_part5 + truncated_decimal5 / 10000000.0;
 80027ec:	f8d7 00ec 	ldr.w	r0, [r7, #236]	@ 0xec
 80027f0:	f7fd fe98 	bl	8000524 <__aeabi_i2d>
 80027f4:	4604      	mov	r4, r0
 80027f6:	460d      	mov	r5, r1
 80027f8:	f8d7 00e4 	ldr.w	r0, [r7, #228]	@ 0xe4
 80027fc:	f7fd fe92 	bl	8000524 <__aeabi_i2d>
 8002800:	a351      	add	r3, pc, #324	@ (adr r3, 8002948 <UART_1+0x3d8>)
 8002802:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002806:	f7fe f821 	bl	800084c <__aeabi_ddiv>
 800280a:	4602      	mov	r2, r0
 800280c:	460b      	mov	r3, r1
 800280e:	4620      	mov	r0, r4
 8002810:	4629      	mov	r1, r5
 8002812:	f7fd fd3b 	bl	800028c <__adddf3>
 8002816:	4602      	mov	r2, r0
 8002818:	460b      	mov	r3, r1
 800281a:	4610      	mov	r0, r2
 800281c:	4619      	mov	r1, r3
 800281e:	f7fe f9e3 	bl	8000be8 <__aeabi_d2f>
 8002822:	4602      	mov	r2, r0
 8002824:	4b4f      	ldr	r3, [pc, #316]	@ (8002964 <UART_1+0x3f4>)
 8002826:	601a      	str	r2, [r3, #0]
     //b5 = c1;


     int integer_part6 = (int)a6;
 8002828:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 800282c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002830:	ee17 3a90 	vmov	r3, s15
 8002834:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
     float decimal_part6 = a6 - integer_part6;
 8002838:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800283c:	ee07 3a90 	vmov	s15, r3
 8002840:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002844:	ed97 7a1a 	vldr	s14, [r7, #104]	@ 0x68
 8002848:	ee77 7a67 	vsub.f32	s15, s14, s15
 800284c:	edc7 7a37 	vstr	s15, [r7, #220]	@ 0xdc
     decimal_part6 *= 10000000;
 8002850:	edd7 7a37 	vldr	s15, [r7, #220]	@ 0xdc
 8002854:	ed9f 7a3e 	vldr	s14, [pc, #248]	@ 8002950 <UART_1+0x3e0>
 8002858:	ee67 7a87 	vmul.f32	s15, s15, s14
 800285c:	edc7 7a37 	vstr	s15, [r7, #220]	@ 0xdc
     int truncated_decimal6 = (int)decimal_part6;
 8002860:	edd7 7a37 	vldr	s15, [r7, #220]	@ 0xdc
 8002864:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002868:	ee17 3a90 	vmov	r3, s15
 800286c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
     b6 = integer_part6 + truncated_decimal6 / 10000000.0;
 8002870:	f8d7 00e0 	ldr.w	r0, [r7, #224]	@ 0xe0
 8002874:	f7fd fe56 	bl	8000524 <__aeabi_i2d>
 8002878:	4604      	mov	r4, r0
 800287a:	460d      	mov	r5, r1
 800287c:	f8d7 00d8 	ldr.w	r0, [r7, #216]	@ 0xd8
 8002880:	f7fd fe50 	bl	8000524 <__aeabi_i2d>
 8002884:	a330      	add	r3, pc, #192	@ (adr r3, 8002948 <UART_1+0x3d8>)
 8002886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800288a:	f7fd ffdf 	bl	800084c <__aeabi_ddiv>
 800288e:	4602      	mov	r2, r0
 8002890:	460b      	mov	r3, r1
 8002892:	4620      	mov	r0, r4
 8002894:	4629      	mov	r1, r5
 8002896:	f7fd fcf9 	bl	800028c <__adddf3>
 800289a:	4602      	mov	r2, r0
 800289c:	460b      	mov	r3, r1
 800289e:	4610      	mov	r0, r2
 80028a0:	4619      	mov	r1, r3
 80028a2:	f7fe f9a1 	bl	8000be8 <__aeabi_d2f>
 80028a6:	4602      	mov	r2, r0
 80028a8:	4b2f      	ldr	r3, [pc, #188]	@ (8002968 <UART_1+0x3f8>)
 80028aa:	601a      	str	r2, [r3, #0]
     //b6 = c2;



    //�?ếm size của mảng trước khi gán
	 sprintf(str1, "%.7f", b1);
 80028ac:	4b29      	ldr	r3, [pc, #164]	@ (8002954 <UART_1+0x3e4>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4618      	mov	r0, r3
 80028b2:	f7fd fe49 	bl	8000548 <__aeabi_f2d>
 80028b6:	4602      	mov	r2, r0
 80028b8:	460b      	mov	r3, r1
 80028ba:	492c      	ldr	r1, [pc, #176]	@ (800296c <UART_1+0x3fc>)
 80028bc:	482c      	ldr	r0, [pc, #176]	@ (8002970 <UART_1+0x400>)
 80028be:	f007 f92b 	bl	8009b18 <siprintf>
	 sprintf(str2, "%.7f", b2);
 80028c2:	4b25      	ldr	r3, [pc, #148]	@ (8002958 <UART_1+0x3e8>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4618      	mov	r0, r3
 80028c8:	f7fd fe3e 	bl	8000548 <__aeabi_f2d>
 80028cc:	4602      	mov	r2, r0
 80028ce:	460b      	mov	r3, r1
 80028d0:	4926      	ldr	r1, [pc, #152]	@ (800296c <UART_1+0x3fc>)
 80028d2:	4828      	ldr	r0, [pc, #160]	@ (8002974 <UART_1+0x404>)
 80028d4:	f007 f920 	bl	8009b18 <siprintf>
	 int length1 = strlen(str1);
 80028d8:	4825      	ldr	r0, [pc, #148]	@ (8002970 <UART_1+0x400>)
 80028da:	f7fd fcc9 	bl	8000270 <strlen>
 80028de:	4603      	mov	r3, r0
 80028e0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
	 int length2 = strlen(str2);
 80028e4:	4823      	ldr	r0, [pc, #140]	@ (8002974 <UART_1+0x404>)
 80028e6:	f7fd fcc3 	bl	8000270 <strlen>
 80028ea:	4603      	mov	r3, r0
 80028ec:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0

	 sprintf(str3, "%.7f", b3);
 80028f0:	4b1a      	ldr	r3, [pc, #104]	@ (800295c <UART_1+0x3ec>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4618      	mov	r0, r3
 80028f6:	f7fd fe27 	bl	8000548 <__aeabi_f2d>
 80028fa:	4602      	mov	r2, r0
 80028fc:	460b      	mov	r3, r1
 80028fe:	491b      	ldr	r1, [pc, #108]	@ (800296c <UART_1+0x3fc>)
 8002900:	481d      	ldr	r0, [pc, #116]	@ (8002978 <UART_1+0x408>)
 8002902:	f007 f909 	bl	8009b18 <siprintf>
	 sprintf(str4, "%.7f", b4);
 8002906:	4b16      	ldr	r3, [pc, #88]	@ (8002960 <UART_1+0x3f0>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4618      	mov	r0, r3
 800290c:	f7fd fe1c 	bl	8000548 <__aeabi_f2d>
 8002910:	4602      	mov	r2, r0
 8002912:	460b      	mov	r3, r1
 8002914:	4915      	ldr	r1, [pc, #84]	@ (800296c <UART_1+0x3fc>)
 8002916:	4819      	ldr	r0, [pc, #100]	@ (800297c <UART_1+0x40c>)
 8002918:	f007 f8fe 	bl	8009b18 <siprintf>
	 int length3 = strlen(str3);
 800291c:	4816      	ldr	r0, [pc, #88]	@ (8002978 <UART_1+0x408>)
 800291e:	f7fd fca7 	bl	8000270 <strlen>
 8002922:	4603      	mov	r3, r0
 8002924:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
	 int length4 = strlen(str4);
 8002928:	4814      	ldr	r0, [pc, #80]	@ (800297c <UART_1+0x40c>)
 800292a:	f7fd fca1 	bl	8000270 <strlen>
 800292e:	4603      	mov	r3, r0
 8002930:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

	 sprintf(str5, "%.7f", b5);
 8002934:	4b0b      	ldr	r3, [pc, #44]	@ (8002964 <UART_1+0x3f4>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4618      	mov	r0, r3
 800293a:	f7fd fe05 	bl	8000548 <__aeabi_f2d>
 800293e:	4602      	mov	r2, r0
 8002940:	460b      	mov	r3, r1
 8002942:	e01d      	b.n	8002980 <UART_1+0x410>
 8002944:	f3af 8000 	nop.w
 8002948:	00000000 	.word	0x00000000
 800294c:	416312d0 	.word	0x416312d0
 8002950:	4b189680 	.word	0x4b189680
 8002954:	2000c3a0 	.word	0x2000c3a0
 8002958:	2000c3a4 	.word	0x2000c3a4
 800295c:	2000c3a8 	.word	0x2000c3a8
 8002960:	2000c3ac 	.word	0x2000c3ac
 8002964:	2000c3b0 	.word	0x2000c3b0
 8002968:	2000c3b4 	.word	0x2000c3b4
 800296c:	0800e218 	.word	0x0800e218
 8002970:	2000c268 	.word	0x2000c268
 8002974:	2000c29c 	.word	0x2000c29c
 8002978:	2000c2d0 	.word	0x2000c2d0
 800297c:	2000c304 	.word	0x2000c304
 8002980:	49da      	ldr	r1, [pc, #872]	@ (8002cec <UART_1+0x77c>)
 8002982:	48db      	ldr	r0, [pc, #876]	@ (8002cf0 <UART_1+0x780>)
 8002984:	f007 f8c8 	bl	8009b18 <siprintf>
	 sprintf(str6, "%.7f", b6);
 8002988:	4bda      	ldr	r3, [pc, #872]	@ (8002cf4 <UART_1+0x784>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4618      	mov	r0, r3
 800298e:	f7fd fddb 	bl	8000548 <__aeabi_f2d>
 8002992:	4602      	mov	r2, r0
 8002994:	460b      	mov	r3, r1
 8002996:	49d5      	ldr	r1, [pc, #852]	@ (8002cec <UART_1+0x77c>)
 8002998:	48d7      	ldr	r0, [pc, #860]	@ (8002cf8 <UART_1+0x788>)
 800299a:	f007 f8bd 	bl	8009b18 <siprintf>
	 int length5 = strlen(str5);
 800299e:	48d4      	ldr	r0, [pc, #848]	@ (8002cf0 <UART_1+0x780>)
 80029a0:	f7fd fc66 	bl	8000270 <strlen>
 80029a4:	4603      	mov	r3, r0
 80029a6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
	 int length6 = strlen(str6);
 80029aa:	48d3      	ldr	r0, [pc, #844]	@ (8002cf8 <UART_1+0x788>)
 80029ac:	f7fd fc60 	bl	8000270 <strlen>
 80029b0:	4603      	mov	r3, r0
 80029b2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0

	 // lấy length vừa tính được định dạng cho chuỗi
	 char str_a1[length1], str_a2[length2];
 80029b6:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 80029ba:	4611      	mov	r1, r2
 80029bc:	460a      	mov	r2, r1
 80029be:	1e53      	subs	r3, r2, #1
 80029c0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80029c4:	460a      	mov	r2, r1
 80029c6:	2300      	movs	r3, #0
 80029c8:	4690      	mov	r8, r2
 80029ca:	4699      	mov	r9, r3
 80029cc:	f04f 0200 	mov.w	r2, #0
 80029d0:	f04f 0300 	mov.w	r3, #0
 80029d4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80029d8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80029dc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80029e0:	460a      	mov	r2, r1
 80029e2:	2300      	movs	r3, #0
 80029e4:	4692      	mov	sl, r2
 80029e6:	469b      	mov	fp, r3
 80029e8:	f04f 0200 	mov.w	r2, #0
 80029ec:	f04f 0300 	mov.w	r3, #0
 80029f0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80029f4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80029f8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80029fc:	6039      	str	r1, [r7, #0]
 80029fe:	460b      	mov	r3, r1
 8002a00:	3307      	adds	r3, #7
 8002a02:	08db      	lsrs	r3, r3, #3
 8002a04:	00db      	lsls	r3, r3, #3
 8002a06:	ebad 0d03 	sub.w	sp, sp, r3
 8002a0a:	466b      	mov	r3, sp
 8002a0c:	3300      	adds	r3, #0
 8002a0e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002a12:	f8d7 00d0 	ldr.w	r0, [r7, #208]	@ 0xd0
 8002a16:	1e43      	subs	r3, r0, #1
 8002a18:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	2300      	movs	r3, #0
 8002a20:	663a      	str	r2, [r7, #96]	@ 0x60
 8002a22:	667b      	str	r3, [r7, #100]	@ 0x64
 8002a24:	f04f 0200 	mov.w	r2, #0
 8002a28:	f04f 0300 	mov.w	r3, #0
 8002a2c:	e9d7 5618 	ldrd	r5, r6, [r7, #96]	@ 0x60
 8002a30:	4634      	mov	r4, r6
 8002a32:	00e3      	lsls	r3, r4, #3
 8002a34:	462c      	mov	r4, r5
 8002a36:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002a3a:	462c      	mov	r4, r5
 8002a3c:	00e2      	lsls	r2, r4, #3
 8002a3e:	4602      	mov	r2, r0
 8002a40:	2300      	movs	r3, #0
 8002a42:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002a44:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002a46:	f04f 0200 	mov.w	r2, #0
 8002a4a:	f04f 0300 	mov.w	r3, #0
 8002a4e:	e9d7 5616 	ldrd	r5, r6, [r7, #88]	@ 0x58
 8002a52:	4634      	mov	r4, r6
 8002a54:	00e3      	lsls	r3, r4, #3
 8002a56:	462c      	mov	r4, r5
 8002a58:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002a5c:	462c      	mov	r4, r5
 8002a5e:	00e2      	lsls	r2, r4, #3
 8002a60:	6638      	str	r0, [r7, #96]	@ 0x60
 8002a62:	4603      	mov	r3, r0
 8002a64:	3307      	adds	r3, #7
 8002a66:	08db      	lsrs	r3, r3, #3
 8002a68:	00db      	lsls	r3, r3, #3
 8002a6a:	ebad 0d03 	sub.w	sp, sp, r3
 8002a6e:	466b      	mov	r3, sp
 8002a70:	3300      	adds	r3, #0
 8002a72:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
	 sprintf(str_a1, "%.7f", b1);
 8002a76:	4ba1      	ldr	r3, [pc, #644]	@ (8002cfc <UART_1+0x78c>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f7fd fd64 	bl	8000548 <__aeabi_f2d>
 8002a80:	4602      	mov	r2, r0
 8002a82:	460b      	mov	r3, r1
 8002a84:	4999      	ldr	r1, [pc, #612]	@ (8002cec <UART_1+0x77c>)
 8002a86:	f8d7 00b8 	ldr.w	r0, [r7, #184]	@ 0xb8
 8002a8a:	f007 f845 	bl	8009b18 <siprintf>
	 sprintf(str_a2, "%.7f", b2);
 8002a8e:	4b9c      	ldr	r3, [pc, #624]	@ (8002d00 <UART_1+0x790>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4618      	mov	r0, r3
 8002a94:	f7fd fd58 	bl	8000548 <__aeabi_f2d>
 8002a98:	4602      	mov	r2, r0
 8002a9a:	460b      	mov	r3, r1
 8002a9c:	4993      	ldr	r1, [pc, #588]	@ (8002cec <UART_1+0x77c>)
 8002a9e:	f8d7 00b0 	ldr.w	r0, [r7, #176]	@ 0xb0
 8002aa2:	f007 f839 	bl	8009b18 <siprintf>

	 char str_a3[length3], str_a4[length4];
 8002aa6:	f8d7 40cc 	ldr.w	r4, [r7, #204]	@ 0xcc
 8002aaa:	1e63      	subs	r3, r4, #1
 8002aac:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002ab0:	4622      	mov	r2, r4
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	653a      	str	r2, [r7, #80]	@ 0x50
 8002ab6:	657b      	str	r3, [r7, #84]	@ 0x54
 8002ab8:	f04f 0200 	mov.w	r2, #0
 8002abc:	f04f 0300 	mov.w	r3, #0
 8002ac0:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8002ac4:	464d      	mov	r5, r9
 8002ac6:	00eb      	lsls	r3, r5, #3
 8002ac8:	4645      	mov	r5, r8
 8002aca:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8002ace:	4645      	mov	r5, r8
 8002ad0:	00ea      	lsls	r2, r5, #3
 8002ad2:	4622      	mov	r2, r4
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	64ba      	str	r2, [r7, #72]	@ 0x48
 8002ad8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002ada:	f04f 0200 	mov.w	r2, #0
 8002ade:	f04f 0300 	mov.w	r3, #0
 8002ae2:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	@ 0x48
 8002ae6:	464d      	mov	r5, r9
 8002ae8:	00eb      	lsls	r3, r5, #3
 8002aea:	4645      	mov	r5, r8
 8002aec:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8002af0:	4645      	mov	r5, r8
 8002af2:	00ea      	lsls	r2, r5, #3
 8002af4:	65bc      	str	r4, [r7, #88]	@ 0x58
 8002af6:	4623      	mov	r3, r4
 8002af8:	3307      	adds	r3, #7
 8002afa:	08db      	lsrs	r3, r3, #3
 8002afc:	00db      	lsls	r3, r3, #3
 8002afe:	ebad 0d03 	sub.w	sp, sp, r3
 8002b02:	466b      	mov	r3, sp
 8002b04:	3300      	adds	r3, #0
 8002b06:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002b0a:	f8d7 60c8 	ldr.w	r6, [r7, #200]	@ 0xc8
 8002b0e:	1e73      	subs	r3, r6, #1
 8002b10:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8002b14:	4632      	mov	r2, r6
 8002b16:	2300      	movs	r3, #0
 8002b18:	643a      	str	r2, [r7, #64]	@ 0x40
 8002b1a:	647b      	str	r3, [r7, #68]	@ 0x44
 8002b1c:	f04f 0200 	mov.w	r2, #0
 8002b20:	f04f 0300 	mov.w	r3, #0
 8002b24:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8002b28:	464d      	mov	r5, r9
 8002b2a:	00eb      	lsls	r3, r5, #3
 8002b2c:	4645      	mov	r5, r8
 8002b2e:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8002b32:	4645      	mov	r5, r8
 8002b34:	00ea      	lsls	r2, r5, #3
 8002b36:	4632      	mov	r2, r6
 8002b38:	2300      	movs	r3, #0
 8002b3a:	63ba      	str	r2, [r7, #56]	@ 0x38
 8002b3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002b3e:	f04f 0200 	mov.w	r2, #0
 8002b42:	f04f 0300 	mov.w	r3, #0
 8002b46:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8002b4a:	464d      	mov	r5, r9
 8002b4c:	00eb      	lsls	r3, r5, #3
 8002b4e:	4645      	mov	r5, r8
 8002b50:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8002b54:	4645      	mov	r5, r8
 8002b56:	00ea      	lsls	r2, r5, #3
 8002b58:	4633      	mov	r3, r6
 8002b5a:	3307      	adds	r3, #7
 8002b5c:	08db      	lsrs	r3, r3, #3
 8002b5e:	00db      	lsls	r3, r3, #3
 8002b60:	ebad 0d03 	sub.w	sp, sp, r3
 8002b64:	466b      	mov	r3, sp
 8002b66:	3300      	adds	r3, #0
 8002b68:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
	 sprintf(str_a3, "%.7f", b3);
 8002b6c:	4b65      	ldr	r3, [pc, #404]	@ (8002d04 <UART_1+0x794>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4618      	mov	r0, r3
 8002b72:	f7fd fce9 	bl	8000548 <__aeabi_f2d>
 8002b76:	4602      	mov	r2, r0
 8002b78:	460b      	mov	r3, r1
 8002b7a:	495c      	ldr	r1, [pc, #368]	@ (8002cec <UART_1+0x77c>)
 8002b7c:	f8d7 00a8 	ldr.w	r0, [r7, #168]	@ 0xa8
 8002b80:	f006 ffca 	bl	8009b18 <siprintf>
	 sprintf(str_a4, "%.7f", b4);
 8002b84:	4b60      	ldr	r3, [pc, #384]	@ (8002d08 <UART_1+0x798>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4618      	mov	r0, r3
 8002b8a:	f7fd fcdd 	bl	8000548 <__aeabi_f2d>
 8002b8e:	4602      	mov	r2, r0
 8002b90:	460b      	mov	r3, r1
 8002b92:	4956      	ldr	r1, [pc, #344]	@ (8002cec <UART_1+0x77c>)
 8002b94:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 8002b98:	f006 ffbe 	bl	8009b18 <siprintf>

	 char str_a5[length5], str_a6[length6];
 8002b9c:	f8d7 50c4 	ldr.w	r5, [r7, #196]	@ 0xc4
 8002ba0:	1e6b      	subs	r3, r5, #1
 8002ba2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002ba6:	462a      	mov	r2, r5
 8002ba8:	2300      	movs	r3, #0
 8002baa:	633a      	str	r2, [r7, #48]	@ 0x30
 8002bac:	637b      	str	r3, [r7, #52]	@ 0x34
 8002bae:	f04f 0200 	mov.w	r2, #0
 8002bb2:	f04f 0300 	mov.w	r3, #0
 8002bb6:	e9d7 890c 	ldrd	r8, r9, [r7, #48]	@ 0x30
 8002bba:	4649      	mov	r1, r9
 8002bbc:	00cb      	lsls	r3, r1, #3
 8002bbe:	4641      	mov	r1, r8
 8002bc0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002bc4:	4641      	mov	r1, r8
 8002bc6:	00ca      	lsls	r2, r1, #3
 8002bc8:	462a      	mov	r2, r5
 8002bca:	2300      	movs	r3, #0
 8002bcc:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002bce:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002bd0:	f04f 0200 	mov.w	r2, #0
 8002bd4:	f04f 0300 	mov.w	r3, #0
 8002bd8:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8002bdc:	4649      	mov	r1, r9
 8002bde:	00cb      	lsls	r3, r1, #3
 8002be0:	4641      	mov	r1, r8
 8002be2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002be6:	4641      	mov	r1, r8
 8002be8:	00ca      	lsls	r2, r1, #3
 8002bea:	462b      	mov	r3, r5
 8002bec:	3307      	adds	r3, #7
 8002bee:	08db      	lsrs	r3, r3, #3
 8002bf0:	00db      	lsls	r3, r3, #3
 8002bf2:	ebad 0d03 	sub.w	sp, sp, r3
 8002bf6:	466b      	mov	r3, sp
 8002bf8:	3300      	adds	r3, #0
 8002bfa:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002bfe:	f8d7 40c0 	ldr.w	r4, [r7, #192]	@ 0xc0
 8002c02:	1e63      	subs	r3, r4, #1
 8002c04:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002c08:	4622      	mov	r2, r4
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	623a      	str	r2, [r7, #32]
 8002c0e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c10:	f04f 0200 	mov.w	r2, #0
 8002c14:	f04f 0300 	mov.w	r3, #0
 8002c18:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002c1c:	4649      	mov	r1, r9
 8002c1e:	00cb      	lsls	r3, r1, #3
 8002c20:	4641      	mov	r1, r8
 8002c22:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002c26:	4641      	mov	r1, r8
 8002c28:	00ca      	lsls	r2, r1, #3
 8002c2a:	4622      	mov	r2, r4
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	61ba      	str	r2, [r7, #24]
 8002c30:	61fb      	str	r3, [r7, #28]
 8002c32:	f04f 0200 	mov.w	r2, #0
 8002c36:	f04f 0300 	mov.w	r3, #0
 8002c3a:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8002c3e:	4649      	mov	r1, r9
 8002c40:	00cb      	lsls	r3, r1, #3
 8002c42:	4641      	mov	r1, r8
 8002c44:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002c48:	4641      	mov	r1, r8
 8002c4a:	00ca      	lsls	r2, r1, #3
 8002c4c:	4623      	mov	r3, r4
 8002c4e:	3307      	adds	r3, #7
 8002c50:	08db      	lsrs	r3, r3, #3
 8002c52:	00db      	lsls	r3, r3, #3
 8002c54:	ebad 0d03 	sub.w	sp, sp, r3
 8002c58:	466b      	mov	r3, sp
 8002c5a:	3300      	adds	r3, #0
 8002c5c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
	 sprintf(str_a5, "%.7f", b5);
 8002c60:	4b2a      	ldr	r3, [pc, #168]	@ (8002d0c <UART_1+0x79c>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4618      	mov	r0, r3
 8002c66:	f7fd fc6f 	bl	8000548 <__aeabi_f2d>
 8002c6a:	4602      	mov	r2, r0
 8002c6c:	460b      	mov	r3, r1
 8002c6e:	491f      	ldr	r1, [pc, #124]	@ (8002cec <UART_1+0x77c>)
 8002c70:	f8d7 0098 	ldr.w	r0, [r7, #152]	@ 0x98
 8002c74:	f006 ff50 	bl	8009b18 <siprintf>
	 sprintf(str_a6, "%.7f", b6);
 8002c78:	4b1e      	ldr	r3, [pc, #120]	@ (8002cf4 <UART_1+0x784>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f7fd fc63 	bl	8000548 <__aeabi_f2d>
 8002c82:	4602      	mov	r2, r0
 8002c84:	460b      	mov	r3, r1
 8002c86:	4919      	ldr	r1, [pc, #100]	@ (8002cec <UART_1+0x77c>)
 8002c88:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 8002c8c:	f006 ff44 	bl	8009b18 <siprintf>

	 // tính tổng size cho mảng data_out
	 uint16_t size_data_out = sizeof(str_a1) + sizeof(str_a2)  + sizeof(str_a3) + sizeof(str_a4)+ sizeof(str_a5) + sizeof(str_a6) + 6;
 8002c90:	883a      	ldrh	r2, [r7, #0]
 8002c92:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 8002c96:	4413      	add	r3, r2
 8002c98:	b29a      	uxth	r2, r3
 8002c9a:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 8002c9e:	4413      	add	r3, r2
 8002ca0:	b29a      	uxth	r2, r3
 8002ca2:	b2b3      	uxth	r3, r6
 8002ca4:	4413      	add	r3, r2
 8002ca6:	b29a      	uxth	r2, r3
 8002ca8:	b2ab      	uxth	r3, r5
 8002caa:	4413      	add	r3, r2
 8002cac:	b29a      	uxth	r2, r3
 8002cae:	b2a3      	uxth	r3, r4
 8002cb0:	4413      	add	r3, r2
 8002cb2:	b29b      	uxth	r3, r3
 8002cb4:	3306      	adds	r3, #6
 8002cb6:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e


	 // ghép lần lượt các chuỗi  vào dataout
	 char data_out[size_data_out];
 8002cba:	f8b7 108e 	ldrh.w	r1, [r7, #142]	@ 0x8e
 8002cbe:	460b      	mov	r3, r1
 8002cc0:	3b01      	subs	r3, #1
 8002cc2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002cc6:	b28b      	uxth	r3, r1
 8002cc8:	2200      	movs	r2, #0
 8002cca:	613b      	str	r3, [r7, #16]
 8002ccc:	617a      	str	r2, [r7, #20]
 8002cce:	f04f 0200 	mov.w	r2, #0
 8002cd2:	f04f 0300 	mov.w	r3, #0
 8002cd6:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002cda:	4628      	mov	r0, r5
 8002cdc:	00c3      	lsls	r3, r0, #3
 8002cde:	4620      	mov	r0, r4
 8002ce0:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8002ce4:	4620      	mov	r0, r4
 8002ce6:	00c2      	lsls	r2, r0, #3
 8002ce8:	b28b      	uxth	r3, r1
 8002cea:	e011      	b.n	8002d10 <UART_1+0x7a0>
 8002cec:	0800e218 	.word	0x0800e218
 8002cf0:	2000c338 	.word	0x2000c338
 8002cf4:	2000c3b4 	.word	0x2000c3b4
 8002cf8:	2000c36c 	.word	0x2000c36c
 8002cfc:	2000c3a0 	.word	0x2000c3a0
 8002d00:	2000c3a4 	.word	0x2000c3a4
 8002d04:	2000c3a8 	.word	0x2000c3a8
 8002d08:	2000c3ac 	.word	0x2000c3ac
 8002d0c:	2000c3b0 	.word	0x2000c3b0
 8002d10:	2200      	movs	r2, #0
 8002d12:	60bb      	str	r3, [r7, #8]
 8002d14:	60fa      	str	r2, [r7, #12]
 8002d16:	f04f 0200 	mov.w	r2, #0
 8002d1a:	f04f 0300 	mov.w	r3, #0
 8002d1e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002d22:	4628      	mov	r0, r5
 8002d24:	00c3      	lsls	r3, r0, #3
 8002d26:	4620      	mov	r0, r4
 8002d28:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8002d2c:	4620      	mov	r0, r4
 8002d2e:	00c2      	lsls	r2, r0, #3
 8002d30:	460b      	mov	r3, r1
 8002d32:	3307      	adds	r3, #7
 8002d34:	08db      	lsrs	r3, r3, #3
 8002d36:	00db      	lsls	r3, r3, #3
 8002d38:	ebad 0d03 	sub.w	sp, sp, r3
 8002d3c:	466b      	mov	r3, sp
 8002d3e:	3300      	adds	r3, #0
 8002d40:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
	 strcpy(data_out, str_a1);
 8002d44:	f8d7 10b8 	ldr.w	r1, [r7, #184]	@ 0xb8
 8002d48:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 8002d4c:	f006 ffef 	bl	8009d2e <strcpy>
	 strcat(data_out, ";");
 8002d50:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 8002d54:	f7fd fa8c 	bl	8000270 <strlen>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	461a      	mov	r2, r3
 8002d5c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002d60:	4413      	add	r3, r2
 8002d62:	493d      	ldr	r1, [pc, #244]	@ (8002e58 <UART_1+0x8e8>)
 8002d64:	461a      	mov	r2, r3
 8002d66:	460b      	mov	r3, r1
 8002d68:	881b      	ldrh	r3, [r3, #0]
 8002d6a:	8013      	strh	r3, [r2, #0]
	 strcat(data_out, str_a2);
 8002d6c:	f8d7 10b0 	ldr.w	r1, [r7, #176]	@ 0xb0
 8002d70:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 8002d74:	f006 ff55 	bl	8009c22 <strcat>
	 strcat(data_out, ";");
 8002d78:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 8002d7c:	f7fd fa78 	bl	8000270 <strlen>
 8002d80:	4603      	mov	r3, r0
 8002d82:	461a      	mov	r2, r3
 8002d84:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002d88:	4413      	add	r3, r2
 8002d8a:	4933      	ldr	r1, [pc, #204]	@ (8002e58 <UART_1+0x8e8>)
 8002d8c:	461a      	mov	r2, r3
 8002d8e:	460b      	mov	r3, r1
 8002d90:	881b      	ldrh	r3, [r3, #0]
 8002d92:	8013      	strh	r3, [r2, #0]

	 strcat(data_out, str_a3);
 8002d94:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 8002d98:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 8002d9c:	f006 ff41 	bl	8009c22 <strcat>
	 strcat(data_out, ";");
 8002da0:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 8002da4:	f7fd fa64 	bl	8000270 <strlen>
 8002da8:	4603      	mov	r3, r0
 8002daa:	461a      	mov	r2, r3
 8002dac:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002db0:	4413      	add	r3, r2
 8002db2:	4929      	ldr	r1, [pc, #164]	@ (8002e58 <UART_1+0x8e8>)
 8002db4:	461a      	mov	r2, r3
 8002db6:	460b      	mov	r3, r1
 8002db8:	881b      	ldrh	r3, [r3, #0]
 8002dba:	8013      	strh	r3, [r2, #0]
	 strcat(data_out, str_a4);
 8002dbc:	f8d7 10a0 	ldr.w	r1, [r7, #160]	@ 0xa0
 8002dc0:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 8002dc4:	f006 ff2d 	bl	8009c22 <strcat>
	 strcat(data_out, ";");
 8002dc8:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 8002dcc:	f7fd fa50 	bl	8000270 <strlen>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	461a      	mov	r2, r3
 8002dd4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002dd8:	4413      	add	r3, r2
 8002dda:	491f      	ldr	r1, [pc, #124]	@ (8002e58 <UART_1+0x8e8>)
 8002ddc:	461a      	mov	r2, r3
 8002dde:	460b      	mov	r3, r1
 8002de0:	881b      	ldrh	r3, [r3, #0]
 8002de2:	8013      	strh	r3, [r2, #0]

	 strcat(data_out, str_a5);
 8002de4:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 8002de8:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 8002dec:	f006 ff19 	bl	8009c22 <strcat>
	 strcat(data_out, ";");
 8002df0:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 8002df4:	f7fd fa3c 	bl	8000270 <strlen>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	461a      	mov	r2, r3
 8002dfc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002e00:	4413      	add	r3, r2
 8002e02:	4915      	ldr	r1, [pc, #84]	@ (8002e58 <UART_1+0x8e8>)
 8002e04:	461a      	mov	r2, r3
 8002e06:	460b      	mov	r3, r1
 8002e08:	881b      	ldrh	r3, [r3, #0]
 8002e0a:	8013      	strh	r3, [r2, #0]
	 strcat(data_out, str_a6);
 8002e0c:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002e10:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 8002e14:	f006 ff05 	bl	8009c22 <strcat>
	 strcat(data_out, ";");
 8002e18:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 8002e1c:	f7fd fa28 	bl	8000270 <strlen>
 8002e20:	4603      	mov	r3, r0
 8002e22:	461a      	mov	r2, r3
 8002e24:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002e28:	4413      	add	r3, r2
 8002e2a:	490b      	ldr	r1, [pc, #44]	@ (8002e58 <UART_1+0x8e8>)
 8002e2c:	461a      	mov	r2, r3
 8002e2e:	460b      	mov	r3, r1
 8002e30:	881b      	ldrh	r3, [r3, #0]
 8002e32:	8013      	strh	r3, [r2, #0]

	 HAL_UART_Transmit(&huart2, data_out, size_data_out , 1000);
 8002e34:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8002e38:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002e3c:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 8002e40:	4806      	ldr	r0, [pc, #24]	@ (8002e5c <UART_1+0x8ec>)
 8002e42:	f005 fd93 	bl	800896c <HAL_UART_Transmit>
 8002e46:	f8d7 d004 	ldr.w	sp, [r7, #4]

}
 8002e4a:	bf00      	nop
 8002e4c:	f507 7792 	add.w	r7, r7, #292	@ 0x124
 8002e50:	46bd      	mov	sp, r7
 8002e52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002e56:	bf00      	nop
 8002e58:	0800e220 	.word	0x0800e220
 8002e5c:	2000066c 	.word	0x2000066c

08002e60 <Initial_Mobile_Robot>:
// Khởi tạo thông số xe
void Initial_Mobile_Robot(struct Para_Mobile_Robot* Ro)
{
 8002e60:	b480      	push	{r7}
 8002e62:	b083      	sub	sp, #12
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
	Ro->L = 0.175; // Khoảng cách 2 bánh xe
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	4a09      	ldr	r2, [pc, #36]	@ (8002e90 <Initial_Mobile_Robot+0x30>)
 8002e6c:	605a      	str	r2, [r3, #4]
	Ro->R = 0.145/2; // Bán kính bánh xe
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	4a08      	ldr	r2, [pc, #32]	@ (8002e94 <Initial_Mobile_Robot+0x34>)
 8002e72:	601a      	str	r2, [r3, #0]
//	Ro->Distance_X_tourch = 0.15;
//	Ro->Distance_Y_tourch = 0.3;
	Ro->Distance_X_tourch = 0.0;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	f04f 0200 	mov.w	r2, #0
 8002e7a:	609a      	str	r2, [r3, #8]
	Ro->Distance_Y_tourch = 0.2;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	4a06      	ldr	r2, [pc, #24]	@ (8002e98 <Initial_Mobile_Robot+0x38>)
 8002e80:	60da      	str	r2, [r3, #12]
}
 8002e82:	bf00      	nop
 8002e84:	370c      	adds	r7, #12
 8002e86:	46bd      	mov	sp, r7
 8002e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8c:	4770      	bx	lr
 8002e8e:	bf00      	nop
 8002e90:	3e333333 	.word	0x3e333333
 8002e94:	3d947ae1 	.word	0x3d947ae1
 8002e98:	3e4ccccd 	.word	0x3e4ccccd

08002e9c <Initial_PID_XY>:

void Initial_PID_XY(struct PID_XY* Pos, struct PID_XY* Theta)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	b083      	sub	sp, #12
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
 8002ea4:	6039      	str	r1, [r7, #0]
//	Theta->Kp = 5.5;
//	Theta->Ki = 0.00;
//	Theta->Kd = 1.64;

		// PID vị trí
		Pos->Kp = 1.5;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	f04f 527f 	mov.w	r2, #1069547520	@ 0x3fc00000
 8002eac:	601a      	str	r2, [r3, #0]
		Pos->Ki = 0.15;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	4a10      	ldr	r2, [pc, #64]	@ (8002ef4 <Initial_PID_XY+0x58>)
 8002eb2:	605a      	str	r2, [r3, #4]
		Pos->Kd  = 3.5;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	4a10      	ldr	r2, [pc, #64]	@ (8002ef8 <Initial_PID_XY+0x5c>)
 8002eb8:	609a      	str	r2, [r3, #8]
		// PID góc tiếp tuyến
		Theta->Kp = 5.5;
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	4a0f      	ldr	r2, [pc, #60]	@ (8002efc <Initial_PID_XY+0x60>)
 8002ebe:	601a      	str	r2, [r3, #0]
		Theta->Ki = 0.00;
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	f04f 0200 	mov.w	r2, #0
 8002ec6:	605a      	str	r2, [r3, #4]
		Theta->Kd = 1.64;
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	4a0d      	ldr	r2, [pc, #52]	@ (8002f00 <Initial_PID_XY+0x64>)
 8002ecc:	609a      	str	r2, [r3, #8]
//	Theta->Kp = 5.5;
//	Theta->Ki = 0.00;
//	Theta->Kd = 1.64;


	Pos->High_Limit = 200.0;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	4a0c      	ldr	r2, [pc, #48]	@ (8002f04 <Initial_PID_XY+0x68>)
 8002ed2:	631a      	str	r2, [r3, #48]	@ 0x30
	Pos->Low_Limit = -200.0;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	4a0c      	ldr	r2, [pc, #48]	@ (8002f08 <Initial_PID_XY+0x6c>)
 8002ed8:	635a      	str	r2, [r3, #52]	@ 0x34
	Theta->High_Limit = 200.0;
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	4a09      	ldr	r2, [pc, #36]	@ (8002f04 <Initial_PID_XY+0x68>)
 8002ede:	631a      	str	r2, [r3, #48]	@ 0x30
	Theta->Low_Limit = -200.0;
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	4a09      	ldr	r2, [pc, #36]	@ (8002f08 <Initial_PID_XY+0x6c>)
 8002ee4:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8002ee6:	bf00      	nop
 8002ee8:	370c      	adds	r7, #12
 8002eea:	46bd      	mov	sp, r7
 8002eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef0:	4770      	bx	lr
 8002ef2:	bf00      	nop
 8002ef4:	3e19999a 	.word	0x3e19999a
 8002ef8:	40600000 	.word	0x40600000
 8002efc:	40b00000 	.word	0x40b00000
 8002f00:	3fd1eb85 	.word	0x3fd1eb85
 8002f04:	43480000 	.word	0x43480000
 8002f08:	c3480000 	.word	0xc3480000

08002f0c <Inverse_Right_Motor>:

// DIR = 0 Forward DIR = 1 Inverse // Tamj th�?i DIR 2 chân
void Inverse_Right_Motor(int DIR)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b082      	sub	sp, #8
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
	if(DIR == 0)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d10a      	bne.n	8002f30 <Inverse_Right_Motor+0x24>
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, SET);
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	2101      	movs	r1, #1
 8002f1e:	480d      	ldr	r0, [pc, #52]	@ (8002f54 <Inverse_Right_Motor+0x48>)
 8002f20:	f001 fec2 	bl	8004ca8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, RESET);
 8002f24:	2200      	movs	r2, #0
 8002f26:	2102      	movs	r1, #2
 8002f28:	480a      	ldr	r0, [pc, #40]	@ (8002f54 <Inverse_Right_Motor+0x48>)
 8002f2a:	f001 febd 	bl	8004ca8 <HAL_GPIO_WritePin>
	else if(DIR == 1)
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, RESET);
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, SET);
	}
}
 8002f2e:	e00c      	b.n	8002f4a <Inverse_Right_Motor+0x3e>
	else if(DIR == 1)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2b01      	cmp	r3, #1
 8002f34:	d109      	bne.n	8002f4a <Inverse_Right_Motor+0x3e>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, RESET);
 8002f36:	2200      	movs	r2, #0
 8002f38:	2101      	movs	r1, #1
 8002f3a:	4806      	ldr	r0, [pc, #24]	@ (8002f54 <Inverse_Right_Motor+0x48>)
 8002f3c:	f001 feb4 	bl	8004ca8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, SET);
 8002f40:	2201      	movs	r2, #1
 8002f42:	2102      	movs	r1, #2
 8002f44:	4803      	ldr	r0, [pc, #12]	@ (8002f54 <Inverse_Right_Motor+0x48>)
 8002f46:	f001 feaf 	bl	8004ca8 <HAL_GPIO_WritePin>
}
 8002f4a:	bf00      	nop
 8002f4c:	3708      	adds	r7, #8
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}
 8002f52:	bf00      	nop
 8002f54:	40020800 	.word	0x40020800

08002f58 <Inverse_Left_Motor>:

void Inverse_Left_Motor(int DIR)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b082      	sub	sp, #8
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
	if(DIR == 0)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d10a      	bne.n	8002f7c <Inverse_Left_Motor+0x24>
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, SET);
 8002f66:	2201      	movs	r2, #1
 8002f68:	2104      	movs	r1, #4
 8002f6a:	480d      	ldr	r0, [pc, #52]	@ (8002fa0 <Inverse_Left_Motor+0x48>)
 8002f6c:	f001 fe9c 	bl	8004ca8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, RESET);
 8002f70:	2200      	movs	r2, #0
 8002f72:	2108      	movs	r1, #8
 8002f74:	480a      	ldr	r0, [pc, #40]	@ (8002fa0 <Inverse_Left_Motor+0x48>)
 8002f76:	f001 fe97 	bl	8004ca8 <HAL_GPIO_WritePin>
	else if(DIR == 1)
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, RESET);
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, SET);
	}
}
 8002f7a:	e00c      	b.n	8002f96 <Inverse_Left_Motor+0x3e>
	else if(DIR == 1)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2b01      	cmp	r3, #1
 8002f80:	d109      	bne.n	8002f96 <Inverse_Left_Motor+0x3e>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, RESET);
 8002f82:	2200      	movs	r2, #0
 8002f84:	2104      	movs	r1, #4
 8002f86:	4806      	ldr	r0, [pc, #24]	@ (8002fa0 <Inverse_Left_Motor+0x48>)
 8002f88:	f001 fe8e 	bl	8004ca8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, SET);
 8002f8c:	2201      	movs	r2, #1
 8002f8e:	2108      	movs	r1, #8
 8002f90:	4803      	ldr	r0, [pc, #12]	@ (8002fa0 <Inverse_Left_Motor+0x48>)
 8002f92:	f001 fe89 	bl	8004ca8 <HAL_GPIO_WritePin>
}
 8002f96:	bf00      	nop
 8002f98:	3708      	adds	r7, #8
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}
 8002f9e:	bf00      	nop
 8002fa0:	40020800 	.word	0x40020800

08002fa4 <Path_planing>:
	return He_so_a;
}

// Quy dao toa do x,y
void Path_planing(float Tap_diem_x[], float Tap_diem_y[], float Mang_Robot[2][2], struct Possision_Input* pos, struct Kinematic* Kine, uint32_t Vi_tri)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b089      	sub	sp, #36	@ 0x24
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	60f8      	str	r0, [r7, #12]
 8002fac:	60b9      	str	r1, [r7, #8]
 8002fae:	607a      	str	r2, [r7, #4]
 8002fb0:	603b      	str	r3, [r7, #0]
	while(Kine->Y_Welding >= Mang_Robot[1][1])
 8002fb2:	e023      	b.n	8002ffc <Path_planing+0x58>
	{
		Vi_tri = Vi_tri + 1;
 8002fb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fb6:	3301      	adds	r3, #1
 8002fb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
		for(int i=0; i<2;i++)
 8002fba:	2300      	movs	r3, #0
 8002fbc:	61fb      	str	r3, [r7, #28]
 8002fbe:	e01a      	b.n	8002ff6 <Path_planing+0x52>
		{
			// Gan lai toa do moi x,y robot se den vao mang Robot
			Mang_Robot[i][0] = Tap_diem_x[Vi_tri+i];
 8002fc0:	69fa      	ldr	r2, [r7, #28]
 8002fc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fc4:	4413      	add	r3, r2
 8002fc6:	009b      	lsls	r3, r3, #2
 8002fc8:	68fa      	ldr	r2, [r7, #12]
 8002fca:	441a      	add	r2, r3
 8002fcc:	69fb      	ldr	r3, [r7, #28]
 8002fce:	00db      	lsls	r3, r3, #3
 8002fd0:	6879      	ldr	r1, [r7, #4]
 8002fd2:	440b      	add	r3, r1
 8002fd4:	6812      	ldr	r2, [r2, #0]
 8002fd6:	601a      	str	r2, [r3, #0]
			Mang_Robot[i][1] = Tap_diem_y[Vi_tri+i];
 8002fd8:	69fa      	ldr	r2, [r7, #28]
 8002fda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fdc:	4413      	add	r3, r2
 8002fde:	009b      	lsls	r3, r3, #2
 8002fe0:	68ba      	ldr	r2, [r7, #8]
 8002fe2:	441a      	add	r2, r3
 8002fe4:	69fb      	ldr	r3, [r7, #28]
 8002fe6:	00db      	lsls	r3, r3, #3
 8002fe8:	6879      	ldr	r1, [r7, #4]
 8002fea:	440b      	add	r3, r1
 8002fec:	6812      	ldr	r2, [r2, #0]
 8002fee:	605a      	str	r2, [r3, #4]
		for(int i=0; i<2;i++)
 8002ff0:	69fb      	ldr	r3, [r7, #28]
 8002ff2:	3301      	adds	r3, #1
 8002ff4:	61fb      	str	r3, [r7, #28]
 8002ff6:	69fb      	ldr	r3, [r7, #28]
 8002ff8:	2b01      	cmp	r3, #1
 8002ffa:	dde1      	ble.n	8002fc0 <Path_planing+0x1c>
	while(Kine->Y_Welding >= Mang_Robot[1][1])
 8002ffc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ffe:	ed93 7a15 	vldr	s14, [r3, #84]	@ 0x54
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	3308      	adds	r3, #8
 8003006:	edd3 7a01 	vldr	s15, [r3, #4]
 800300a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800300e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003012:	dacf      	bge.n	8002fb4 <Path_planing+0x10>
		}
	}
		// Phuong trinh duong thang //* dang so sanh voi x
		float He_so_a = 0;
 8003014:	f04f 0300 	mov.w	r3, #0
 8003018:	61bb      	str	r3, [r7, #24]
		if((Mang_Robot[1][0] - Mang_Robot[0][0]) == 0)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	3308      	adds	r3, #8
 800301e:	ed93 7a00 	vldr	s14, [r3]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	edd3 7a00 	vldr	s15, [r3]
 8003028:	ee77 7a67 	vsub.f32	s15, s14, s15
 800302c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003030:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003034:	d102      	bne.n	800303c <Path_planing+0x98>
		{
			He_so_a = 1000;
 8003036:	4b1f      	ldr	r3, [pc, #124]	@ (80030b4 <Path_planing+0x110>)
 8003038:	61bb      	str	r3, [r7, #24]
 800303a:	e015      	b.n	8003068 <Path_planing+0xc4>
		}
		else
		{
			He_so_a = (Mang_Robot[1][1] - Mang_Robot[0][1])/(Mang_Robot[1][0] - Mang_Robot[0][0]);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	3308      	adds	r3, #8
 8003040:	ed93 7a01 	vldr	s14, [r3, #4]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	edd3 7a01 	vldr	s15, [r3, #4]
 800304a:	ee77 6a67 	vsub.f32	s13, s14, s15
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	3308      	adds	r3, #8
 8003052:	ed93 7a00 	vldr	s14, [r3]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	edd3 7a00 	vldr	s15, [r3]
 800305c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003060:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003064:	edc7 7a06 	vstr	s15, [r7, #24]
		}
		float Temp_Path_1 = Mang_Robot[0][1] - He_so_a*Mang_Robot[0][0]; // b = y1 - ((y2-y1)/(x2-x1))*x1
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	ed93 7a01 	vldr	s14, [r3, #4]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	edd3 6a00 	vldr	s13, [r3]
 8003074:	edd7 7a06 	vldr	s15, [r7, #24]
 8003078:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800307c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003080:	edc7 7a05 	vstr	s15, [r7, #20]

		pos->x = (Kine->Y_Welding- Temp_Path_1)/He_so_a;
 8003084:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003086:	ed93 7a15 	vldr	s14, [r3, #84]	@ 0x54
 800308a:	edd7 7a05 	vldr	s15, [r7, #20]
 800308e:	ee77 6a67 	vsub.f32	s13, s14, s15
 8003092:	ed97 7a06 	vldr	s14, [r7, #24]
 8003096:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	edc3 7a00 	vstr	s15, [r3]


		pos->y = Kine->Y_Welding;
 80030a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030a2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	605a      	str	r2, [r3, #4]
//		float Temp_Path_2 = Kine->Y_Welding - tan(Kine->Theta_Real_Robot + PI/2)*Kine->X_Welding;  // b1 = y_robot - tan(theta + PI/2)*x_robot // He so b phuong trinh vuong goc voi robot
//		pos->x = (Temp_Path_2 - Temp_Path_1)/(He_so_a - tan(Kine->Theta_Real_Robot + PI/2));
//		pos->y = He_so_a*pos->x + Temp_Path_1;


}
 80030a8:	bf00      	nop
 80030aa:	3724      	adds	r7, #36	@ 0x24
 80030ac:	46bd      	mov	sp, r7
 80030ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b2:	4770      	bx	lr
 80030b4:	447a0000 	.word	0x447a0000

080030b8 <HAL_I2C_SlaveRxCpltCallback>:

// Ngat I2C Part 1: ESP32
void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	ed2d 8b02 	vpush	{d8}
 80030be:	b084      	sub	sp, #16
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
	HAL_I2C_Slave_Receive_IT(&hi2c1, RxData, RxSIZE);
 80030c4:	2206      	movs	r2, #6
 80030c6:	499c      	ldr	r1, [pc, #624]	@ (8003338 <HAL_I2C_SlaveRxCpltCallback+0x280>)
 80030c8:	489c      	ldr	r0, [pc, #624]	@ (800333c <HAL_I2C_SlaveRxCpltCallback+0x284>)
 80030ca:	f001 ff7b 	bl	8004fc4 <HAL_I2C_Slave_Receive_IT>
    // Concatenate RxData into a single 32-bit variable
    a_00 = ((uint32_t)RxData[0] << 24) |
 80030ce:	4b9a      	ldr	r3, [pc, #616]	@ (8003338 <HAL_I2C_SlaveRxCpltCallback+0x280>)
 80030d0:	781b      	ldrb	r3, [r3, #0]
 80030d2:	061a      	lsls	r2, r3, #24
        ((uint32_t)RxData[1] << 16) |
 80030d4:	4b98      	ldr	r3, [pc, #608]	@ (8003338 <HAL_I2C_SlaveRxCpltCallback+0x280>)
 80030d6:	785b      	ldrb	r3, [r3, #1]
 80030d8:	041b      	lsls	r3, r3, #16
    a_00 = ((uint32_t)RxData[0] << 24) |
 80030da:	431a      	orrs	r2, r3
        ((uint32_t)RxData[2] << 8) |
 80030dc:	4b96      	ldr	r3, [pc, #600]	@ (8003338 <HAL_I2C_SlaveRxCpltCallback+0x280>)
 80030de:	789b      	ldrb	r3, [r3, #2]
 80030e0:	021b      	lsls	r3, r3, #8
        ((uint32_t)RxData[1] << 16) |
 80030e2:	4313      	orrs	r3, r2
        (uint32_t)RxData[3];
 80030e4:	4a94      	ldr	r2, [pc, #592]	@ (8003338 <HAL_I2C_SlaveRxCpltCallback+0x280>)
 80030e6:	78d2      	ldrb	r2, [r2, #3]
        ((uint32_t)RxData[2] << 8) |
 80030e8:	4313      	orrs	r3, r2
    a_00 = ((uint32_t)RxData[0] << 24) |
 80030ea:	4a95      	ldr	r2, [pc, #596]	@ (8003340 <HAL_I2C_SlaveRxCpltCallback+0x288>)
 80030ec:	6013      	str	r3, [r2, #0]

    // Get the exponent value from RxData
    exponent = RxData[4];
 80030ee:	4b92      	ldr	r3, [pc, #584]	@ (8003338 <HAL_I2C_SlaveRxCpltCallback+0x280>)
 80030f0:	791a      	ldrb	r2, [r3, #4]
 80030f2:	4b94      	ldr	r3, [pc, #592]	@ (8003344 <HAL_I2C_SlaveRxCpltCallback+0x28c>)
 80030f4:	701a      	strb	r2, [r3, #0]

    // Calculate mu and real_num values
    mu = pow(10, exponent);
 80030f6:	4b93      	ldr	r3, [pc, #588]	@ (8003344 <HAL_I2C_SlaveRxCpltCallback+0x28c>)
 80030f8:	781b      	ldrb	r3, [r3, #0]
 80030fa:	4618      	mov	r0, r3
 80030fc:	f7fd fa02 	bl	8000504 <__aeabi_ui2d>
 8003100:	4602      	mov	r2, r0
 8003102:	460b      	mov	r3, r1
 8003104:	ec43 2b11 	vmov	d1, r2, r3
 8003108:	ed9f 0b89 	vldr	d0, [pc, #548]	@ 8003330 <HAL_I2C_SlaveRxCpltCallback+0x278>
 800310c:	f008 fe4a 	bl	800bda4 <pow>
 8003110:	ec53 2b10 	vmov	r2, r3, d0
 8003114:	4610      	mov	r0, r2
 8003116:	4619      	mov	r1, r3
 8003118:	f7fd fedc 	bl	8000ed4 <__aeabi_d2ulz>
 800311c:	4602      	mov	r2, r0
 800311e:	460b      	mov	r3, r1
 8003120:	4989      	ldr	r1, [pc, #548]	@ (8003348 <HAL_I2C_SlaveRxCpltCallback+0x290>)
 8003122:	e9c1 2300 	strd	r2, r3, [r1]
    real_num = (float)((float)a_00/ mu);
 8003126:	4b86      	ldr	r3, [pc, #536]	@ (8003340 <HAL_I2C_SlaveRxCpltCallback+0x288>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	ee07 3a90 	vmov	s15, r3
 800312e:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8003132:	4b85      	ldr	r3, [pc, #532]	@ (8003348 <HAL_I2C_SlaveRxCpltCallback+0x290>)
 8003134:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003138:	4610      	mov	r0, r2
 800313a:	4619      	mov	r1, r3
 800313c:	f7fd fe6c 	bl	8000e18 <__aeabi_ul2f>
 8003140:	ee07 0a10 	vmov	s14, r0
 8003144:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8003148:	4b80      	ldr	r3, [pc, #512]	@ (800334c <HAL_I2C_SlaveRxCpltCallback+0x294>)
 800314a:	edc3 7a00 	vstr	s15, [r3]

    //    RxData[5] = 0000|0000   4 bit dau la x,y: 0001x 0010y   4 bit sau la ma ket thuc: 0001 gui tiep, 0110 ket thuc
    First_4_bits = (RxData[5] >> 4) & 0x0F; // Lay data and voi 0011|0000 de ra duoc 4 bit dau
 800314e:	4b7a      	ldr	r3, [pc, #488]	@ (8003338 <HAL_I2C_SlaveRxCpltCallback+0x280>)
 8003150:	795b      	ldrb	r3, [r3, #5]
 8003152:	091b      	lsrs	r3, r3, #4
 8003154:	b2da      	uxtb	r2, r3
 8003156:	4b7e      	ldr	r3, [pc, #504]	@ (8003350 <HAL_I2C_SlaveRxCpltCallback+0x298>)
 8003158:	701a      	strb	r2, [r3, #0]
    Second_4_bits = RxData[5] & 0x0F; // Lay data and voi 0000|0111 de ra duoc 4 bit sau
 800315a:	4b77      	ldr	r3, [pc, #476]	@ (8003338 <HAL_I2C_SlaveRxCpltCallback+0x280>)
 800315c:	795b      	ldrb	r3, [r3, #5]
 800315e:	f003 030f 	and.w	r3, r3, #15
 8003162:	b2da      	uxtb	r2, r3
 8003164:	4b7b      	ldr	r3, [pc, #492]	@ (8003354 <HAL_I2C_SlaveRxCpltCallback+0x29c>)
 8003166:	701a      	strb	r2, [r3, #0]

    if(Second_4_bits == 0x01 && bit_end == 0) // Ki hieu: tiep tuc gui
 8003168:	4b7a      	ldr	r3, [pc, #488]	@ (8003354 <HAL_I2C_SlaveRxCpltCallback+0x29c>)
 800316a:	781b      	ldrb	r3, [r3, #0]
 800316c:	2b01      	cmp	r3, #1
 800316e:	d152      	bne.n	8003216 <HAL_I2C_SlaveRxCpltCallback+0x15e>
 8003170:	4b79      	ldr	r3, [pc, #484]	@ (8003358 <HAL_I2C_SlaveRxCpltCallback+0x2a0>)
 8003172:	781b      	ldrb	r3, [r3, #0]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d14e      	bne.n	8003216 <HAL_I2C_SlaveRxCpltCallback+0x15e>
	{
    	if(First_4_bits == 0x01) // Neu la X
 8003178:	4b75      	ldr	r3, [pc, #468]	@ (8003350 <HAL_I2C_SlaveRxCpltCallback+0x298>)
 800317a:	781b      	ldrb	r3, [r3, #0]
 800317c:	2b01      	cmp	r3, #1
 800317e:	d123      	bne.n	80031c8 <HAL_I2C_SlaveRxCpltCallback+0x110>
		{
    		Mang_quy_dao_X[Num_X] = real_num;
 8003180:	4b76      	ldr	r3, [pc, #472]	@ (800335c <HAL_I2C_SlaveRxCpltCallback+0x2a4>)
 8003182:	881b      	ldrh	r3, [r3, #0]
 8003184:	4618      	mov	r0, r3
 8003186:	4b71      	ldr	r3, [pc, #452]	@ (800334c <HAL_I2C_SlaveRxCpltCallback+0x294>)
 8003188:	681a      	ldr	r2, [r3, #0]
 800318a:	4975      	ldr	r1, [pc, #468]	@ (8003360 <HAL_I2C_SlaveRxCpltCallback+0x2a8>)
 800318c:	0083      	lsls	r3, r0, #2
 800318e:	440b      	add	r3, r1
 8003190:	601a      	str	r2, [r3, #0]
    		Mang_quy_dao_X_m[Num_X] = -1*Mang_quy_dao_X[Num_X] / 1000;
 8003192:	4b72      	ldr	r3, [pc, #456]	@ (800335c <HAL_I2C_SlaveRxCpltCallback+0x2a4>)
 8003194:	881b      	ldrh	r3, [r3, #0]
 8003196:	4a72      	ldr	r2, [pc, #456]	@ (8003360 <HAL_I2C_SlaveRxCpltCallback+0x2a8>)
 8003198:	009b      	lsls	r3, r3, #2
 800319a:	4413      	add	r3, r2
 800319c:	edd3 7a00 	vldr	s15, [r3]
 80031a0:	eeb1 7a67 	vneg.f32	s14, s15
 80031a4:	4b6d      	ldr	r3, [pc, #436]	@ (800335c <HAL_I2C_SlaveRxCpltCallback+0x2a4>)
 80031a6:	881b      	ldrh	r3, [r3, #0]
 80031a8:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8003364 <HAL_I2C_SlaveRxCpltCallback+0x2ac>
 80031ac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80031b0:	4a6d      	ldr	r2, [pc, #436]	@ (8003368 <HAL_I2C_SlaveRxCpltCallback+0x2b0>)
 80031b2:	009b      	lsls	r3, r3, #2
 80031b4:	4413      	add	r3, r2
 80031b6:	edc3 7a00 	vstr	s15, [r3]
			Num_X = Num_X + 1;
 80031ba:	4b68      	ldr	r3, [pc, #416]	@ (800335c <HAL_I2C_SlaveRxCpltCallback+0x2a4>)
 80031bc:	881b      	ldrh	r3, [r3, #0]
 80031be:	3301      	adds	r3, #1
 80031c0:	b29a      	uxth	r2, r3
 80031c2:	4b66      	ldr	r3, [pc, #408]	@ (800335c <HAL_I2C_SlaveRxCpltCallback+0x2a4>)
 80031c4:	801a      	strh	r2, [r3, #0]
    	if(First_4_bits == 0x01) // Neu la X
 80031c6:	e0a9      	b.n	800331c <HAL_I2C_SlaveRxCpltCallback+0x264>
		}
		else if(First_4_bits == 0x02) // Neu la Y
 80031c8:	4b61      	ldr	r3, [pc, #388]	@ (8003350 <HAL_I2C_SlaveRxCpltCallback+0x298>)
 80031ca:	781b      	ldrb	r3, [r3, #0]
 80031cc:	2b02      	cmp	r3, #2
 80031ce:	f040 80a5 	bne.w	800331c <HAL_I2C_SlaveRxCpltCallback+0x264>
		{
			Mang_quy_dao_Y[Num_Y] = real_num;
 80031d2:	4b66      	ldr	r3, [pc, #408]	@ (800336c <HAL_I2C_SlaveRxCpltCallback+0x2b4>)
 80031d4:	881b      	ldrh	r3, [r3, #0]
 80031d6:	4618      	mov	r0, r3
 80031d8:	4b5c      	ldr	r3, [pc, #368]	@ (800334c <HAL_I2C_SlaveRxCpltCallback+0x294>)
 80031da:	681a      	ldr	r2, [r3, #0]
 80031dc:	4964      	ldr	r1, [pc, #400]	@ (8003370 <HAL_I2C_SlaveRxCpltCallback+0x2b8>)
 80031de:	0083      	lsls	r3, r0, #2
 80031e0:	440b      	add	r3, r1
 80031e2:	601a      	str	r2, [r3, #0]
			Mang_quy_dao_Y_m[Num_Y] = Mang_quy_dao_Y[Num_Y] / 1000;
 80031e4:	4b61      	ldr	r3, [pc, #388]	@ (800336c <HAL_I2C_SlaveRxCpltCallback+0x2b4>)
 80031e6:	881b      	ldrh	r3, [r3, #0]
 80031e8:	4a61      	ldr	r2, [pc, #388]	@ (8003370 <HAL_I2C_SlaveRxCpltCallback+0x2b8>)
 80031ea:	009b      	lsls	r3, r3, #2
 80031ec:	4413      	add	r3, r2
 80031ee:	ed93 7a00 	vldr	s14, [r3]
 80031f2:	4b5e      	ldr	r3, [pc, #376]	@ (800336c <HAL_I2C_SlaveRxCpltCallback+0x2b4>)
 80031f4:	881b      	ldrh	r3, [r3, #0]
 80031f6:	eddf 6a5b 	vldr	s13, [pc, #364]	@ 8003364 <HAL_I2C_SlaveRxCpltCallback+0x2ac>
 80031fa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80031fe:	4a5d      	ldr	r2, [pc, #372]	@ (8003374 <HAL_I2C_SlaveRxCpltCallback+0x2bc>)
 8003200:	009b      	lsls	r3, r3, #2
 8003202:	4413      	add	r3, r2
 8003204:	edc3 7a00 	vstr	s15, [r3]
			Num_Y = Num_Y + 1;
 8003208:	4b58      	ldr	r3, [pc, #352]	@ (800336c <HAL_I2C_SlaveRxCpltCallback+0x2b4>)
 800320a:	881b      	ldrh	r3, [r3, #0]
 800320c:	3301      	adds	r3, #1
 800320e:	b29a      	uxth	r2, r3
 8003210:	4b56      	ldr	r3, [pc, #344]	@ (800336c <HAL_I2C_SlaveRxCpltCallback+0x2b4>)
 8003212:	801a      	strh	r2, [r3, #0]
    	if(First_4_bits == 0x01) // Neu la X
 8003214:	e082      	b.n	800331c <HAL_I2C_SlaveRxCpltCallback+0x264>
		}
	}
    else if(Second_4_bits == 0x06)
 8003216:	4b4f      	ldr	r3, [pc, #316]	@ (8003354 <HAL_I2C_SlaveRxCpltCallback+0x29c>)
 8003218:	781b      	ldrb	r3, [r3, #0]
 800321a:	2b06      	cmp	r3, #6
 800321c:	d17f      	bne.n	800331e <HAL_I2C_SlaveRxCpltCallback+0x266>
    {
    	if(First_4_bits == 0x01) // Neu la X
 800321e:	4b4c      	ldr	r3, [pc, #304]	@ (8003350 <HAL_I2C_SlaveRxCpltCallback+0x298>)
 8003220:	781b      	ldrb	r3, [r3, #0]
 8003222:	2b01      	cmp	r3, #1
 8003224:	d121      	bne.n	800326a <HAL_I2C_SlaveRxCpltCallback+0x1b2>
		{
    		Mang_quy_dao_X[Num_X] = real_num;
 8003226:	4b4d      	ldr	r3, [pc, #308]	@ (800335c <HAL_I2C_SlaveRxCpltCallback+0x2a4>)
 8003228:	881b      	ldrh	r3, [r3, #0]
 800322a:	4618      	mov	r0, r3
 800322c:	4b47      	ldr	r3, [pc, #284]	@ (800334c <HAL_I2C_SlaveRxCpltCallback+0x294>)
 800322e:	681a      	ldr	r2, [r3, #0]
 8003230:	494b      	ldr	r1, [pc, #300]	@ (8003360 <HAL_I2C_SlaveRxCpltCallback+0x2a8>)
 8003232:	0083      	lsls	r3, r0, #2
 8003234:	440b      	add	r3, r1
 8003236:	601a      	str	r2, [r3, #0]
    		Mang_quy_dao_X_m[Num_X] = Mang_quy_dao_X[Num_X] / 1000;
 8003238:	4b48      	ldr	r3, [pc, #288]	@ (800335c <HAL_I2C_SlaveRxCpltCallback+0x2a4>)
 800323a:	881b      	ldrh	r3, [r3, #0]
 800323c:	4a48      	ldr	r2, [pc, #288]	@ (8003360 <HAL_I2C_SlaveRxCpltCallback+0x2a8>)
 800323e:	009b      	lsls	r3, r3, #2
 8003240:	4413      	add	r3, r2
 8003242:	ed93 7a00 	vldr	s14, [r3]
 8003246:	4b45      	ldr	r3, [pc, #276]	@ (800335c <HAL_I2C_SlaveRxCpltCallback+0x2a4>)
 8003248:	881b      	ldrh	r3, [r3, #0]
 800324a:	eddf 6a46 	vldr	s13, [pc, #280]	@ 8003364 <HAL_I2C_SlaveRxCpltCallback+0x2ac>
 800324e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003252:	4a45      	ldr	r2, [pc, #276]	@ (8003368 <HAL_I2C_SlaveRxCpltCallback+0x2b0>)
 8003254:	009b      	lsls	r3, r3, #2
 8003256:	4413      	add	r3, r2
 8003258:	edc3 7a00 	vstr	s15, [r3]
			Num_X = Num_X + 1;
 800325c:	4b3f      	ldr	r3, [pc, #252]	@ (800335c <HAL_I2C_SlaveRxCpltCallback+0x2a4>)
 800325e:	881b      	ldrh	r3, [r3, #0]
 8003260:	3301      	adds	r3, #1
 8003262:	b29a      	uxth	r2, r3
 8003264:	4b3d      	ldr	r3, [pc, #244]	@ (800335c <HAL_I2C_SlaveRxCpltCallback+0x2a4>)
 8003266:	801a      	strh	r2, [r3, #0]
 8003268:	e024      	b.n	80032b4 <HAL_I2C_SlaveRxCpltCallback+0x1fc>
		}
		else if(First_4_bits == 0x02) // Neu la Y
 800326a:	4b39      	ldr	r3, [pc, #228]	@ (8003350 <HAL_I2C_SlaveRxCpltCallback+0x298>)
 800326c:	781b      	ldrb	r3, [r3, #0]
 800326e:	2b02      	cmp	r3, #2
 8003270:	d120      	bne.n	80032b4 <HAL_I2C_SlaveRxCpltCallback+0x1fc>
		{
			Mang_quy_dao_Y[Num_Y] = real_num;
 8003272:	4b3e      	ldr	r3, [pc, #248]	@ (800336c <HAL_I2C_SlaveRxCpltCallback+0x2b4>)
 8003274:	881b      	ldrh	r3, [r3, #0]
 8003276:	4618      	mov	r0, r3
 8003278:	4b34      	ldr	r3, [pc, #208]	@ (800334c <HAL_I2C_SlaveRxCpltCallback+0x294>)
 800327a:	681a      	ldr	r2, [r3, #0]
 800327c:	493c      	ldr	r1, [pc, #240]	@ (8003370 <HAL_I2C_SlaveRxCpltCallback+0x2b8>)
 800327e:	0083      	lsls	r3, r0, #2
 8003280:	440b      	add	r3, r1
 8003282:	601a      	str	r2, [r3, #0]
			Mang_quy_dao_Y_m[Num_Y] = Mang_quy_dao_Y[Num_Y] / 1000;
 8003284:	4b39      	ldr	r3, [pc, #228]	@ (800336c <HAL_I2C_SlaveRxCpltCallback+0x2b4>)
 8003286:	881b      	ldrh	r3, [r3, #0]
 8003288:	4a39      	ldr	r2, [pc, #228]	@ (8003370 <HAL_I2C_SlaveRxCpltCallback+0x2b8>)
 800328a:	009b      	lsls	r3, r3, #2
 800328c:	4413      	add	r3, r2
 800328e:	ed93 7a00 	vldr	s14, [r3]
 8003292:	4b36      	ldr	r3, [pc, #216]	@ (800336c <HAL_I2C_SlaveRxCpltCallback+0x2b4>)
 8003294:	881b      	ldrh	r3, [r3, #0]
 8003296:	eddf 6a33 	vldr	s13, [pc, #204]	@ 8003364 <HAL_I2C_SlaveRxCpltCallback+0x2ac>
 800329a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800329e:	4a35      	ldr	r2, [pc, #212]	@ (8003374 <HAL_I2C_SlaveRxCpltCallback+0x2bc>)
 80032a0:	009b      	lsls	r3, r3, #2
 80032a2:	4413      	add	r3, r2
 80032a4:	edc3 7a00 	vstr	s15, [r3]
			Num_Y = Num_Y + 1;
 80032a8:	4b30      	ldr	r3, [pc, #192]	@ (800336c <HAL_I2C_SlaveRxCpltCallback+0x2b4>)
 80032aa:	881b      	ldrh	r3, [r3, #0]
 80032ac:	3301      	adds	r3, #1
 80032ae:	b29a      	uxth	r2, r3
 80032b0:	4b2e      	ldr	r3, [pc, #184]	@ (800336c <HAL_I2C_SlaveRxCpltCallback+0x2b4>)
 80032b2:	801a      	strh	r2, [r3, #0]
		}

    	// Gan tat cac gia tri con lai bang 0
    	for(int i = Num_Y + 1; i<Max_Array_XY; i++)
 80032b4:	4b2d      	ldr	r3, [pc, #180]	@ (800336c <HAL_I2C_SlaveRxCpltCallback+0x2b4>)
 80032b6:	881b      	ldrh	r3, [r3, #0]
 80032b8:	3301      	adds	r3, #1
 80032ba:	60fb      	str	r3, [r7, #12]
 80032bc:	e022      	b.n	8003304 <HAL_I2C_SlaveRxCpltCallback+0x24c>
    	{
    		Mang_quy_dao_X[Num_X] = 0;
 80032be:	4b27      	ldr	r3, [pc, #156]	@ (800335c <HAL_I2C_SlaveRxCpltCallback+0x2a4>)
 80032c0:	881b      	ldrh	r3, [r3, #0]
 80032c2:	4a27      	ldr	r2, [pc, #156]	@ (8003360 <HAL_I2C_SlaveRxCpltCallback+0x2a8>)
 80032c4:	009b      	lsls	r3, r3, #2
 80032c6:	4413      	add	r3, r2
 80032c8:	f04f 0200 	mov.w	r2, #0
 80032cc:	601a      	str	r2, [r3, #0]
    		Mang_quy_dao_Y[Num_Y] = 0;
 80032ce:	4b27      	ldr	r3, [pc, #156]	@ (800336c <HAL_I2C_SlaveRxCpltCallback+0x2b4>)
 80032d0:	881b      	ldrh	r3, [r3, #0]
 80032d2:	4a27      	ldr	r2, [pc, #156]	@ (8003370 <HAL_I2C_SlaveRxCpltCallback+0x2b8>)
 80032d4:	009b      	lsls	r3, r3, #2
 80032d6:	4413      	add	r3, r2
 80032d8:	f04f 0200 	mov.w	r2, #0
 80032dc:	601a      	str	r2, [r3, #0]
    		Mang_quy_dao_X_m[Num_X] = 0;
 80032de:	4b1f      	ldr	r3, [pc, #124]	@ (800335c <HAL_I2C_SlaveRxCpltCallback+0x2a4>)
 80032e0:	881b      	ldrh	r3, [r3, #0]
 80032e2:	4a21      	ldr	r2, [pc, #132]	@ (8003368 <HAL_I2C_SlaveRxCpltCallback+0x2b0>)
 80032e4:	009b      	lsls	r3, r3, #2
 80032e6:	4413      	add	r3, r2
 80032e8:	f04f 0200 	mov.w	r2, #0
 80032ec:	601a      	str	r2, [r3, #0]
    		Mang_quy_dao_Y_m[Num_Y] = 0;
 80032ee:	4b1f      	ldr	r3, [pc, #124]	@ (800336c <HAL_I2C_SlaveRxCpltCallback+0x2b4>)
 80032f0:	881b      	ldrh	r3, [r3, #0]
 80032f2:	4a20      	ldr	r2, [pc, #128]	@ (8003374 <HAL_I2C_SlaveRxCpltCallback+0x2bc>)
 80032f4:	009b      	lsls	r3, r3, #2
 80032f6:	4413      	add	r3, r2
 80032f8:	f04f 0200 	mov.w	r2, #0
 80032fc:	601a      	str	r2, [r3, #0]
    	for(int i = Num_Y + 1; i<Max_Array_XY; i++)
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	3301      	adds	r3, #1
 8003302:	60fb      	str	r3, [r7, #12]
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 800330a:	4293      	cmp	r3, r2
 800330c:	ddd7      	ble.n	80032be <HAL_I2C_SlaveRxCpltCallback+0x206>
    	}
    	Start_bit_1 = 1;
 800330e:	4b1a      	ldr	r3, [pc, #104]	@ (8003378 <HAL_I2C_SlaveRxCpltCallback+0x2c0>)
 8003310:	2201      	movs	r2, #1
 8003312:	701a      	strb	r2, [r3, #0]
    	bit_end = 1;
 8003314:	4b10      	ldr	r3, [pc, #64]	@ (8003358 <HAL_I2C_SlaveRxCpltCallback+0x2a0>)
 8003316:	2201      	movs	r2, #1
 8003318:	701a      	strb	r2, [r3, #0]
    }
}
 800331a:	e000      	b.n	800331e <HAL_I2C_SlaveRxCpltCallback+0x266>
    	if(First_4_bits == 0x01) // Neu la X
 800331c:	bf00      	nop
}
 800331e:	bf00      	nop
 8003320:	3710      	adds	r7, #16
 8003322:	46bd      	mov	sp, r7
 8003324:	ecbd 8b02 	vpop	{d8}
 8003328:	bd80      	pop	{r7, pc}
 800332a:	bf00      	nop
 800332c:	f3af 8000 	nop.w
 8003330:	00000000 	.word	0x00000000
 8003334:	40240000 	.word	0x40240000
 8003338:	200006c0 	.word	0x200006c0
 800333c:	20000254 	.word	0x20000254
 8003340:	200006c8 	.word	0x200006c8
 8003344:	200006cc 	.word	0x200006cc
 8003348:	200006d0 	.word	0x200006d0
 800334c:	2000c260 	.word	0x2000c260
 8003350:	2000c264 	.word	0x2000c264
 8003354:	2000c265 	.word	0x2000c265
 8003358:	200006d8 	.word	0x200006d8
 800335c:	2000c25c 	.word	0x2000c25c
 8003360:	200006dc 	.word	0x200006dc
 8003364:	447a0000 	.word	0x447a0000
 8003368:	2000649c 	.word	0x2000649c
 800336c:	2000c25e 	.word	0x2000c25e
 8003370:	200035bc 	.word	0x200035bc
 8003374:	2000937c 	.word	0x2000937c
 8003378:	2000c266 	.word	0x2000c266

0800337c <HAL_I2C_AddrCallback>:

// Ngastw I2C Part 2
void HAL_I2C_AddrCallback(I2C_HandleTypeDef*hi2c,uint8_t TransferDirection,uint16_t AddrMatchCode)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b082      	sub	sp, #8
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
 8003384:	460b      	mov	r3, r1
 8003386:	70fb      	strb	r3, [r7, #3]
 8003388:	4613      	mov	r3, r2
 800338a:	803b      	strh	r3, [r7, #0]
		if(TransferDirection == I2C_DIRECTION_TRANSMIT)
 800338c:	78fb      	ldrb	r3, [r7, #3]
 800338e:	2b01      	cmp	r3, #1
 8003390:	d106      	bne.n	80033a0 <HAL_I2C_AddrCallback+0x24>
		{
			HAL_I2C_Slave_Sequential_Receive_IT(hi2c,RxData, RxSIZE,I2C_FIRST_AND_LAST_FRAME);
 8003392:	2308      	movs	r3, #8
 8003394:	2206      	movs	r2, #6
 8003396:	4905      	ldr	r1, [pc, #20]	@ (80033ac <HAL_I2C_AddrCallback+0x30>)
 8003398:	6878      	ldr	r0, [r7, #4]
 800339a:	f001 fe83 	bl	80050a4 <HAL_I2C_Slave_Seq_Receive_IT>
		}
		else
		{
			Error_Handler();
		}
}
 800339e:	e001      	b.n	80033a4 <HAL_I2C_AddrCallback+0x28>
			Error_Handler();
 80033a0:	f000 fbbe 	bl	8003b20 <Error_Handler>
}
 80033a4:	bf00      	nop
 80033a6:	3708      	adds	r7, #8
 80033a8:	46bd      	mov	sp, r7
 80033aa:	bd80      	pop	{r7, pc}
 80033ac:	200006c0 	.word	0x200006c0

080033b0 <HAL_TIM_PeriodElapsedCallback>:



// Ngắt Timer
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80033b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80033b4:	b089      	sub	sp, #36	@ 0x24
 80033b6:	af02      	add	r7, sp, #8
 80033b8:	6078      	str	r0, [r7, #4]
	if (htim -> Instance == TIM8)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a3f      	ldr	r2, [pc, #252]	@ (80034bc <HAL_TIM_PeriodElapsedCallback+0x10c>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	f040 81ab 	bne.w	800371c <HAL_TIM_PeriodElapsedCallback+0x36c>
	{
		HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_15);
 80033c6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80033ca:	483d      	ldr	r0, [pc, #244]	@ (80034c0 <HAL_TIM_PeriodElapsedCallback+0x110>)
 80033cc:	f001 fc85 	bl	8004cda <HAL_GPIO_TogglePin>
//		pt_Kine->V_Set = (pt_Kine->VR_Set + pt_Kine->VL_Set)/2.0;  // v = (v1+v2)/2;
//		pt_Para_MR->SP_Rad_s = pt_Kine->VR_Set/pt_Robot->R;  //wr = v1/R;
//		pt_Para_ML->SP_Rad_s = pt_Kine->VL_Set/pt_Robot->R;  // wl = v2/R

		// �?�?c encoder động cơ trái và phải
		RPM_Calc(&htim3, pt_Para_MR);
 80033d0:	4b3c      	ldr	r3, [pc, #240]	@ (80034c4 <HAL_TIM_PeriodElapsedCallback+0x114>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4619      	mov	r1, r3
 80033d6:	483c      	ldr	r0, [pc, #240]	@ (80034c8 <HAL_TIM_PeriodElapsedCallback+0x118>)
 80033d8:	f7fd ff44 	bl	8001264 <RPM_Calc>
		RPM_Calc(&htim4, pt_Para_ML);
 80033dc:	4b3b      	ldr	r3, [pc, #236]	@ (80034cc <HAL_TIM_PeriodElapsedCallback+0x11c>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4619      	mov	r1, r3
 80033e2:	483b      	ldr	r0, [pc, #236]	@ (80034d0 <HAL_TIM_PeriodElapsedCallback+0x120>)
 80033e4:	f7fd ff3e 	bl	8001264 <RPM_Calc>

		// PID cho động cơ trái và phải
		PID_control(&htim2, pt_Para_MR, TIM_CHANNEL_1);
 80033e8:	4b36      	ldr	r3, [pc, #216]	@ (80034c4 <HAL_TIM_PeriodElapsedCallback+0x114>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	2200      	movs	r2, #0
 80033ee:	4619      	mov	r1, r3
 80033f0:	4838      	ldr	r0, [pc, #224]	@ (80034d4 <HAL_TIM_PeriodElapsedCallback+0x124>)
 80033f2:	f7fe f809 	bl	8001408 <PID_control>
		PID_control(&htim1, pt_Para_ML, TIM_CHANNEL_1);
 80033f6:	4b35      	ldr	r3, [pc, #212]	@ (80034cc <HAL_TIM_PeriodElapsedCallback+0x11c>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	2200      	movs	r2, #0
 80033fc:	4619      	mov	r1, r3
 80033fe:	4836      	ldr	r0, [pc, #216]	@ (80034d8 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8003400:	f7fe f802 	bl	8001408 <PID_control>

		// �?ảo chi�?u khi e âm
		if(pt_Para_MR->Temp_PWM_1 >= 0)
 8003404:	4b2f      	ldr	r3, [pc, #188]	@ (80034c4 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	@ 0x58
 800340c:	f04f 0200 	mov.w	r2, #0
 8003410:	f04f 0300 	mov.w	r3, #0
 8003414:	f7fd fb76 	bl	8000b04 <__aeabi_dcmpge>
 8003418:	4603      	mov	r3, r0
 800341a:	2b00      	cmp	r3, #0
 800341c:	d011      	beq.n	8003442 <HAL_TIM_PeriodElapsedCallback+0x92>
		{
			Inverse_Right_Motor(0);
 800341e:	2000      	movs	r0, #0
 8003420:	f7ff fd74 	bl	8002f0c <Inverse_Right_Motor>
			pt_Para_MR->Out_PWM = (uint16_t)pt_Para_MR->Temp_PWM_1;
 8003424:	4b27      	ldr	r3, [pc, #156]	@ (80034c4 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 800342c:	4925      	ldr	r1, [pc, #148]	@ (80034c4 <HAL_TIM_PeriodElapsedCallback+0x114>)
 800342e:	680e      	ldr	r6, [r1, #0]
 8003430:	4610      	mov	r0, r2
 8003432:	4619      	mov	r1, r3
 8003434:	f7fd fbb8 	bl	8000ba8 <__aeabi_d2uiz>
 8003438:	4603      	mov	r3, r0
 800343a:	b29b      	uxth	r3, r3
 800343c:	f8a6 3060 	strh.w	r3, [r6, #96]	@ 0x60
 8003440:	e020      	b.n	8003484 <HAL_TIM_PeriodElapsedCallback+0xd4>
		}
		else if(pt_Para_MR->Temp_PWM_1 < 0)
 8003442:	4b20      	ldr	r3, [pc, #128]	@ (80034c4 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	@ 0x58
 800344a:	f04f 0200 	mov.w	r2, #0
 800344e:	f04f 0300 	mov.w	r3, #0
 8003452:	f7fd fb43 	bl	8000adc <__aeabi_dcmplt>
 8003456:	4603      	mov	r3, r0
 8003458:	2b00      	cmp	r3, #0
 800345a:	d013      	beq.n	8003484 <HAL_TIM_PeriodElapsedCallback+0xd4>
		{
			Inverse_Right_Motor(1);
 800345c:	2001      	movs	r0, #1
 800345e:	f7ff fd55 	bl	8002f0c <Inverse_Right_Motor>
			pt_Para_MR->Out_PWM = (uint16_t)-pt_Para_MR->Temp_PWM_1;
 8003462:	4b18      	ldr	r3, [pc, #96]	@ (80034c4 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 800346a:	4690      	mov	r8, r2
 800346c:	f083 4900 	eor.w	r9, r3, #2147483648	@ 0x80000000
 8003470:	4b14      	ldr	r3, [pc, #80]	@ (80034c4 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8003472:	681e      	ldr	r6, [r3, #0]
 8003474:	4640      	mov	r0, r8
 8003476:	4649      	mov	r1, r9
 8003478:	f7fd fb96 	bl	8000ba8 <__aeabi_d2uiz>
 800347c:	4603      	mov	r3, r0
 800347e:	b29b      	uxth	r3, r3
 8003480:	f8a6 3060 	strh.w	r3, [r6, #96]	@ 0x60
		}
		if(pt_Para_ML->Out_fPWM >= 0)
 8003484:	4b11      	ldr	r3, [pc, #68]	@ (80034cc <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	edd3 7a19 	vldr	s15, [r3, #100]	@ 0x64
 800348c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003490:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003494:	db22      	blt.n	80034dc <HAL_TIM_PeriodElapsedCallback+0x12c>
		{
			Inverse_Left_Motor(0);
 8003496:	2000      	movs	r0, #0
 8003498:	f7ff fd5e 	bl	8002f58 <Inverse_Left_Motor>
			pt_Para_ML->Out_PWM = (uint16_t)pt_Para_ML->Temp_PWM_1;
 800349c:	4b0b      	ldr	r3, [pc, #44]	@ (80034cc <HAL_TIM_PeriodElapsedCallback+0x11c>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 80034a4:	4909      	ldr	r1, [pc, #36]	@ (80034cc <HAL_TIM_PeriodElapsedCallback+0x11c>)
 80034a6:	680c      	ldr	r4, [r1, #0]
 80034a8:	4610      	mov	r0, r2
 80034aa:	4619      	mov	r1, r3
 80034ac:	f7fd fb7c 	bl	8000ba8 <__aeabi_d2uiz>
 80034b0:	4603      	mov	r3, r0
 80034b2:	b29b      	uxth	r3, r3
 80034b4:	f8a4 3060 	strh.w	r3, [r4, #96]	@ 0x60
 80034b8:	e02d      	b.n	8003516 <HAL_TIM_PeriodElapsedCallback+0x166>
 80034ba:	bf00      	nop
 80034bc:	40010400 	.word	0x40010400
 80034c0:	40021000 	.word	0x40021000
 80034c4:	2000002c 	.word	0x2000002c
 80034c8:	200003e4 	.word	0x200003e4
 80034cc:	20000030 	.word	0x20000030
 80034d0:	2000042c 	.word	0x2000042c
 80034d4:	2000039c 	.word	0x2000039c
 80034d8:	20000354 	.word	0x20000354
		}
		else if(pt_Para_ML->Out_fPWM < 0)
 80034dc:	4b85      	ldr	r3, [pc, #532]	@ (80036f4 <HAL_TIM_PeriodElapsedCallback+0x344>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	edd3 7a19 	vldr	s15, [r3, #100]	@ 0x64
 80034e4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80034e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034ec:	d513      	bpl.n	8003516 <HAL_TIM_PeriodElapsedCallback+0x166>
		{
			Inverse_Left_Motor(1);
 80034ee:	2001      	movs	r0, #1
 80034f0:	f7ff fd32 	bl	8002f58 <Inverse_Left_Motor>
			pt_Para_ML->Out_PWM = (uint16_t)-pt_Para_ML->Temp_PWM_1;
 80034f4:	4b7f      	ldr	r3, [pc, #508]	@ (80036f4 <HAL_TIM_PeriodElapsedCallback+0x344>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 80034fc:	4614      	mov	r4, r2
 80034fe:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8003502:	4b7c      	ldr	r3, [pc, #496]	@ (80036f4 <HAL_TIM_PeriodElapsedCallback+0x344>)
 8003504:	681e      	ldr	r6, [r3, #0]
 8003506:	4620      	mov	r0, r4
 8003508:	4629      	mov	r1, r5
 800350a:	f7fd fb4d 	bl	8000ba8 <__aeabi_d2uiz>
 800350e:	4603      	mov	r3, r0
 8003510:	b29b      	uxth	r3, r3
 8003512:	f8a6 3060 	strh.w	r3, [r6, #96]	@ 0x60
//	     // Xuất xung PWM PID vs Fuzzy
//	     __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, pt_Para_MR->Out_PWM*0.95 + Output_PWM_Fuzzy*0.05);


	     // Xuất xung PWM PID
	     __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, pt_Para_MR->Out_PWM);
 8003516:	4b78      	ldr	r3, [pc, #480]	@ (80036f8 <HAL_TIM_PeriodElapsedCallback+0x348>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800351e:	4b77      	ldr	r3, [pc, #476]	@ (80036fc <HAL_TIM_PeriodElapsedCallback+0x34c>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	635a      	str	r2, [r3, #52]	@ 0x34
	     __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pt_Para_ML->Out_PWM);
 8003524:	4b73      	ldr	r3, [pc, #460]	@ (80036f4 <HAL_TIM_PeriodElapsedCallback+0x344>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800352c:	4b74      	ldr	r3, [pc, #464]	@ (8003700 <HAL_TIM_PeriodElapsedCallback+0x350>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	635a      	str	r2, [r3, #52]	@ 0x34

	     // �?ộng h�?c thuận
	     //Forward_Kinematic(pt_Kine, pt_Robot, pt_Para_MR, pt_Para_ML);
	 	pt_Kine->V_real = (pt_Para_MR->Rad_s + pt_Para_ML->Rad_s)*(pt_Robot->R/2); // Tính vận tốc thực tế cho xe
 8003532:	4b71      	ldr	r3, [pc, #452]	@ (80036f8 <HAL_TIM_PeriodElapsedCallback+0x348>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	ed93 7a33 	vldr	s14, [r3, #204]	@ 0xcc
 800353a:	4b6e      	ldr	r3, [pc, #440]	@ (80036f4 <HAL_TIM_PeriodElapsedCallback+0x344>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	edd3 7a33 	vldr	s15, [r3, #204]	@ 0xcc
 8003542:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003546:	4b6f      	ldr	r3, [pc, #444]	@ (8003704 <HAL_TIM_PeriodElapsedCallback+0x354>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	edd3 6a00 	vldr	s13, [r3]
 800354e:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 8003552:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003556:	4b6c      	ldr	r3, [pc, #432]	@ (8003708 <HAL_TIM_PeriodElapsedCallback+0x358>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800355e:	edc3 7a04 	vstr	s15, [r3, #16]
	 	pt_Kine->W_Real = ((pt_Para_MR->Rad_s - pt_Para_ML->Rad_s)*pt_Robot->R)/(2*pt_Robot->L); // Tốc độ quay của robot hiện tại
 8003562:	4b65      	ldr	r3, [pc, #404]	@ (80036f8 <HAL_TIM_PeriodElapsedCallback+0x348>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	ed93 7a33 	vldr	s14, [r3, #204]	@ 0xcc
 800356a:	4b62      	ldr	r3, [pc, #392]	@ (80036f4 <HAL_TIM_PeriodElapsedCallback+0x344>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	edd3 7a33 	vldr	s15, [r3, #204]	@ 0xcc
 8003572:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003576:	4b63      	ldr	r3, [pc, #396]	@ (8003704 <HAL_TIM_PeriodElapsedCallback+0x354>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	edd3 7a00 	vldr	s15, [r3]
 800357e:	ee67 6a27 	vmul.f32	s13, s14, s15
 8003582:	4b60      	ldr	r3, [pc, #384]	@ (8003704 <HAL_TIM_PeriodElapsedCallback+0x354>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	edd3 7a01 	vldr	s15, [r3, #4]
 800358a:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800358e:	4b5e      	ldr	r3, [pc, #376]	@ (8003708 <HAL_TIM_PeriodElapsedCallback+0x358>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003596:	edc3 7a07 	vstr	s15, [r3, #28]
	 	pt_Kine->X_dot = pt_Kine->V_real*cos(pt_Kine->Theta_Real_Robot); // x dot
 800359a:	4b5b      	ldr	r3, [pc, #364]	@ (8003708 <HAL_TIM_PeriodElapsedCallback+0x358>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	691b      	ldr	r3, [r3, #16]
 80035a0:	4618      	mov	r0, r3
 80035a2:	f7fc ffd1 	bl	8000548 <__aeabi_f2d>
 80035a6:	4604      	mov	r4, r0
 80035a8:	460d      	mov	r5, r1
 80035aa:	4b57      	ldr	r3, [pc, #348]	@ (8003708 <HAL_TIM_PeriodElapsedCallback+0x358>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035b0:	4618      	mov	r0, r3
 80035b2:	f7fc ffc9 	bl	8000548 <__aeabi_f2d>
 80035b6:	4602      	mov	r2, r0
 80035b8:	460b      	mov	r3, r1
 80035ba:	ec43 2b10 	vmov	d0, r2, r3
 80035be:	f008 fc8f 	bl	800bee0 <cos>
 80035c2:	ec53 2b10 	vmov	r2, r3, d0
 80035c6:	4620      	mov	r0, r4
 80035c8:	4629      	mov	r1, r5
 80035ca:	f7fd f815 	bl	80005f8 <__aeabi_dmul>
 80035ce:	4602      	mov	r2, r0
 80035d0:	460b      	mov	r3, r1
 80035d2:	494d      	ldr	r1, [pc, #308]	@ (8003708 <HAL_TIM_PeriodElapsedCallback+0x358>)
 80035d4:	680c      	ldr	r4, [r1, #0]
 80035d6:	4610      	mov	r0, r2
 80035d8:	4619      	mov	r1, r3
 80035da:	f7fd fb05 	bl	8000be8 <__aeabi_d2f>
 80035de:	4603      	mov	r3, r0
 80035e0:	60a3      	str	r3, [r4, #8]
	 	pt_Kine->Y_dot = pt_Kine->V_real*sin(pt_Kine->Theta_Real_Robot); // y dot
 80035e2:	4b49      	ldr	r3, [pc, #292]	@ (8003708 <HAL_TIM_PeriodElapsedCallback+0x358>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	691b      	ldr	r3, [r3, #16]
 80035e8:	4618      	mov	r0, r3
 80035ea:	f7fc ffad 	bl	8000548 <__aeabi_f2d>
 80035ee:	4604      	mov	r4, r0
 80035f0:	460d      	mov	r5, r1
 80035f2:	4b45      	ldr	r3, [pc, #276]	@ (8003708 <HAL_TIM_PeriodElapsedCallback+0x358>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035f8:	4618      	mov	r0, r3
 80035fa:	f7fc ffa5 	bl	8000548 <__aeabi_f2d>
 80035fe:	4602      	mov	r2, r0
 8003600:	460b      	mov	r3, r1
 8003602:	ec43 2b10 	vmov	d0, r2, r3
 8003606:	f008 fcbf 	bl	800bf88 <sin>
 800360a:	ec53 2b10 	vmov	r2, r3, d0
 800360e:	4620      	mov	r0, r4
 8003610:	4629      	mov	r1, r5
 8003612:	f7fc fff1 	bl	80005f8 <__aeabi_dmul>
 8003616:	4602      	mov	r2, r0
 8003618:	460b      	mov	r3, r1
 800361a:	493b      	ldr	r1, [pc, #236]	@ (8003708 <HAL_TIM_PeriodElapsedCallback+0x358>)
 800361c:	680c      	ldr	r4, [r1, #0]
 800361e:	4610      	mov	r0, r2
 8003620:	4619      	mov	r1, r3
 8003622:	f7fd fae1 	bl	8000be8 <__aeabi_d2f>
 8003626:	4603      	mov	r3, r0
 8003628:	60e3      	str	r3, [r4, #12]
	 	// Tích phân để ra x,y hiện tại của robot
	 	pt_Kine->X_real = pt_Kine->X_real + pt_Kine->X_dot*Time_Interrupt; // Vị trí của robot phương X
 800362a:	4b37      	ldr	r3, [pc, #220]	@ (8003708 <HAL_TIM_PeriodElapsedCallback+0x358>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	ed93 7a00 	vldr	s14, [r3]
 8003632:	4b35      	ldr	r3, [pc, #212]	@ (8003708 <HAL_TIM_PeriodElapsedCallback+0x358>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	edd3 6a02 	vldr	s13, [r3, #8]
 800363a:	4b34      	ldr	r3, [pc, #208]	@ (800370c <HAL_TIM_PeriodElapsedCallback+0x35c>)
 800363c:	edd3 7a00 	vldr	s15, [r3]
 8003640:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003644:	4b30      	ldr	r3, [pc, #192]	@ (8003708 <HAL_TIM_PeriodElapsedCallback+0x358>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	ee77 7a27 	vadd.f32	s15, s14, s15
 800364c:	edc3 7a00 	vstr	s15, [r3]
	 	pt_Kine->Y_real = pt_Kine->Y_real + pt_Kine->Y_dot*Time_Interrupt; // Vị trí của robot phương Y
 8003650:	4b2d      	ldr	r3, [pc, #180]	@ (8003708 <HAL_TIM_PeriodElapsedCallback+0x358>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	ed93 7a01 	vldr	s14, [r3, #4]
 8003658:	4b2b      	ldr	r3, [pc, #172]	@ (8003708 <HAL_TIM_PeriodElapsedCallback+0x358>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	edd3 6a03 	vldr	s13, [r3, #12]
 8003660:	4b2a      	ldr	r3, [pc, #168]	@ (800370c <HAL_TIM_PeriodElapsedCallback+0x35c>)
 8003662:	edd3 7a00 	vldr	s15, [r3]
 8003666:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800366a:	4b27      	ldr	r3, [pc, #156]	@ (8003708 <HAL_TIM_PeriodElapsedCallback+0x358>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003672:	edc3 7a01 	vstr	s15, [r3, #4]

	 	// Chuyen sang mm
	 	pt_Kine->X_real_mm = pt_Kine->X_real * 1000;
 8003676:	4b24      	ldr	r3, [pc, #144]	@ (8003708 <HAL_TIM_PeriodElapsedCallback+0x358>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	edd3 7a00 	vldr	s15, [r3]
 800367e:	4b22      	ldr	r3, [pc, #136]	@ (8003708 <HAL_TIM_PeriodElapsedCallback+0x358>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 8003710 <HAL_TIM_PeriodElapsedCallback+0x360>
 8003686:	ee67 7a87 	vmul.f32	s15, s15, s14
 800368a:	edc3 7a12 	vstr	s15, [r3, #72]	@ 0x48
	 	pt_Kine->Y_real_mm = pt_Kine->Y_real * 1000;
 800368e:	4b1e      	ldr	r3, [pc, #120]	@ (8003708 <HAL_TIM_PeriodElapsedCallback+0x358>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	edd3 7a01 	vldr	s15, [r3, #4]
 8003696:	4b1c      	ldr	r3, [pc, #112]	@ (8003708 <HAL_TIM_PeriodElapsedCallback+0x358>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8003710 <HAL_TIM_PeriodElapsedCallback+0x360>
 800369e:	ee67 7a87 	vmul.f32	s15, s15, s14
 80036a2:	edc3 7a13 	vstr	s15, [r3, #76]	@ 0x4c
//	 	else
//	 	    Xw = x_robot - d*cos(theta_robot - PI/2) - (L+Delta_L)*sin(theta_robot - PI/2);
//	 	    Yw = y_robot + (L+Delta_L)*cos(theta_robot - PI/2) + d*sin(theta_robot - PI/2);
//	 	end

	 	pt_Kine->Theta_Real_Robot = pt_Kine->Theta_Real_Robot + pt_Kine->W_Real * Time_Interrupt; // Cập nhật theta
 80036a6:	4b18      	ldr	r3, [pc, #96]	@ (8003708 <HAL_TIM_PeriodElapsedCallback+0x358>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 80036ae:	4b16      	ldr	r3, [pc, #88]	@ (8003708 <HAL_TIM_PeriodElapsedCallback+0x358>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	edd3 6a07 	vldr	s13, [r3, #28]
 80036b6:	4b15      	ldr	r3, [pc, #84]	@ (800370c <HAL_TIM_PeriodElapsedCallback+0x35c>)
 80036b8:	edd3 7a00 	vldr	s15, [r3]
 80036bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80036c0:	4b11      	ldr	r3, [pc, #68]	@ (8003708 <HAL_TIM_PeriodElapsedCallback+0x358>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036c8:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

	 	float Delta_L = 0;
 80036cc:	f04f 0300 	mov.w	r3, #0
 80036d0:	60bb      	str	r3, [r7, #8]
//	 	pt_Kine->Y_Welding = pt_Kine->Y_real + (pt_Robot->Distance_Y_tourch+Delta_L)*cos(pt_Kine->Theta_Real_Robot) + pt_Robot->Distance_X_tourch*sin(pt_Kine->Theta_Real_Robot);

//	 	pt_Kine->X_Welding = pt_Kine->X_real + pt_Robot->Distance_X_tourch*cos(pt_Kine->Theta_Real_Robot) - (pt_Robot->Distance_Y_tourch+Stepper_L )*sin(pt_Kine->Theta_Real_Robot);
//	 	pt_Kine->Y_Welding = pt_Kine->Y_real + (pt_Robot->Distance_Y_tourch+Stepper_L)*cos(pt_Kine->Theta_Real_Robot) + pt_Robot->Distance_X_tourch*sin(pt_Kine->Theta_Real_Robot);

	 	pt_Kine->X_Welding = pt_Kine->X_real;
 80036d2:	4b0d      	ldr	r3, [pc, #52]	@ (8003708 <HAL_TIM_PeriodElapsedCallback+0x358>)
 80036d4:	681a      	ldr	r2, [r3, #0]
 80036d6:	4b0c      	ldr	r3, [pc, #48]	@ (8003708 <HAL_TIM_PeriodElapsedCallback+0x358>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	6812      	ldr	r2, [r2, #0]
 80036dc:	651a      	str	r2, [r3, #80]	@ 0x50
	 	pt_Kine->Y_Welding = pt_Kine->Y_real;
 80036de:	4b0a      	ldr	r3, [pc, #40]	@ (8003708 <HAL_TIM_PeriodElapsedCallback+0x358>)
 80036e0:	681a      	ldr	r2, [r3, #0]
 80036e2:	4b09      	ldr	r3, [pc, #36]	@ (8003708 <HAL_TIM_PeriodElapsedCallback+0x358>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	6852      	ldr	r2, [r2, #4]
 80036e8:	655a      	str	r2, [r3, #84]	@ 0x54

	     // Gán lại sai số
		error_integration_fuzzy_P = error_integration_fuzzy ;  // Gán sai số tích luỹ
 80036ea:	4b0a      	ldr	r3, [pc, #40]	@ (8003714 <HAL_TIM_PeriodElapsedCallback+0x364>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a0a      	ldr	r2, [pc, #40]	@ (8003718 <HAL_TIM_PeriodElapsedCallback+0x368>)
 80036f0:	6013      	str	r3, [r2, #0]
				  Mang_Robot_1[i][1] = Mang_quy_dao_Y_m[Vi_tri_1 + i];
			  }
			  Start_bit_2 = 1;
		  }
	}
}
 80036f2:	e1f2      	b.n	8003ada <HAL_TIM_PeriodElapsedCallback+0x72a>
 80036f4:	20000030 	.word	0x20000030
 80036f8:	2000002c 	.word	0x2000002c
 80036fc:	2000039c 	.word	0x2000039c
 8003700:	20000354 	.word	0x20000354
 8003704:	20000034 	.word	0x20000034
 8003708:	20000038 	.word	0x20000038
 800370c:	20000004 	.word	0x20000004
 8003710:	447a0000 	.word	0x447a0000
 8003714:	200006b8 	.word	0x200006b8
 8003718:	200006bc 	.word	0x200006bc
	else if (htim->Instance == TIM6)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a9f      	ldr	r2, [pc, #636]	@ (80039a0 <HAL_TIM_PeriodElapsedCallback+0x5f0>)
 8003722:	4293      	cmp	r3, r2
 8003724:	f040 8166 	bne.w	80039f4 <HAL_TIM_PeriodElapsedCallback+0x644>
		if(Start_bit_2 == 1)
 8003728:	4b9e      	ldr	r3, [pc, #632]	@ (80039a4 <HAL_TIM_PeriodElapsedCallback+0x5f4>)
 800372a:	781b      	ldrb	r3, [r3, #0]
 800372c:	2b01      	cmp	r3, #1
 800372e:	f040 81d4 	bne.w	8003ada <HAL_TIM_PeriodElapsedCallback+0x72a>
			Path_planing(Mang_quy_dao_X_m, Mang_quy_dao_Y_m, Mang_Robot_1, pt_pos_1, pt_Kine, Vi_tri_1);
 8003732:	4b9d      	ldr	r3, [pc, #628]	@ (80039a8 <HAL_TIM_PeriodElapsedCallback+0x5f8>)
 8003734:	6819      	ldr	r1, [r3, #0]
 8003736:	4b9d      	ldr	r3, [pc, #628]	@ (80039ac <HAL_TIM_PeriodElapsedCallback+0x5fc>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4a9d      	ldr	r2, [pc, #628]	@ (80039b0 <HAL_TIM_PeriodElapsedCallback+0x600>)
 800373c:	6812      	ldr	r2, [r2, #0]
 800373e:	9201      	str	r2, [sp, #4]
 8003740:	9300      	str	r3, [sp, #0]
 8003742:	460b      	mov	r3, r1
 8003744:	4a9b      	ldr	r2, [pc, #620]	@ (80039b4 <HAL_TIM_PeriodElapsedCallback+0x604>)
 8003746:	499c      	ldr	r1, [pc, #624]	@ (80039b8 <HAL_TIM_PeriodElapsedCallback+0x608>)
 8003748:	489c      	ldr	r0, [pc, #624]	@ (80039bc <HAL_TIM_PeriodElapsedCallback+0x60c>)
 800374a:	f7ff fc2b 	bl	8002fa4 <Path_planing>
			pt_pos_1->theta_tiep_tuyen = atan2(Mang_Robot_1[1][1] - Mang_Robot_1[0][1],Mang_Robot_1[1][0]-Mang_Robot_1[0][0]);
 800374e:	4b99      	ldr	r3, [pc, #612]	@ (80039b4 <HAL_TIM_PeriodElapsedCallback+0x604>)
 8003750:	ed93 7a03 	vldr	s14, [r3, #12]
 8003754:	4b97      	ldr	r3, [pc, #604]	@ (80039b4 <HAL_TIM_PeriodElapsedCallback+0x604>)
 8003756:	edd3 7a01 	vldr	s15, [r3, #4]
 800375a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800375e:	ee17 0a90 	vmov	r0, s15
 8003762:	f7fc fef1 	bl	8000548 <__aeabi_f2d>
 8003766:	4604      	mov	r4, r0
 8003768:	460d      	mov	r5, r1
 800376a:	4b92      	ldr	r3, [pc, #584]	@ (80039b4 <HAL_TIM_PeriodElapsedCallback+0x604>)
 800376c:	ed93 7a02 	vldr	s14, [r3, #8]
 8003770:	4b90      	ldr	r3, [pc, #576]	@ (80039b4 <HAL_TIM_PeriodElapsedCallback+0x604>)
 8003772:	edd3 7a00 	vldr	s15, [r3]
 8003776:	ee77 7a67 	vsub.f32	s15, s14, s15
 800377a:	ee17 0a90 	vmov	r0, s15
 800377e:	f7fc fee3 	bl	8000548 <__aeabi_f2d>
 8003782:	4602      	mov	r2, r0
 8003784:	460b      	mov	r3, r1
 8003786:	ec43 2b11 	vmov	d1, r2, r3
 800378a:	ec45 4b10 	vmov	d0, r4, r5
 800378e:	f008 fb07 	bl	800bda0 <atan2>
 8003792:	ec51 0b10 	vmov	r0, r1, d0
 8003796:	4b84      	ldr	r3, [pc, #528]	@ (80039a8 <HAL_TIM_PeriodElapsedCallback+0x5f8>)
 8003798:	681c      	ldr	r4, [r3, #0]
 800379a:	f7fd fa25 	bl	8000be8 <__aeabi_d2f>
 800379e:	4603      	mov	r3, r0
 80037a0:	60a3      	str	r3, [r4, #8]
			Processing_Error(pt_PID_theta, pt_PID_posision, pt_pos_1, pt_Kine->X_Welding, pt_Kine->Theta_Real_Robot);
 80037a2:	4b87      	ldr	r3, [pc, #540]	@ (80039c0 <HAL_TIM_PeriodElapsedCallback+0x610>)
 80037a4:	6818      	ldr	r0, [r3, #0]
 80037a6:	4b87      	ldr	r3, [pc, #540]	@ (80039c4 <HAL_TIM_PeriodElapsedCallback+0x614>)
 80037a8:	6819      	ldr	r1, [r3, #0]
 80037aa:	4b7f      	ldr	r3, [pc, #508]	@ (80039a8 <HAL_TIM_PeriodElapsedCallback+0x5f8>)
 80037ac:	681a      	ldr	r2, [r3, #0]
 80037ae:	4b7f      	ldr	r3, [pc, #508]	@ (80039ac <HAL_TIM_PeriodElapsedCallback+0x5fc>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 80037b6:	4b7d      	ldr	r3, [pc, #500]	@ (80039ac <HAL_TIM_PeriodElapsedCallback+0x5fc>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 80037be:	eef0 0a47 	vmov.f32	s1, s14
 80037c2:	eeb0 0a67 	vmov.f32	s0, s15
 80037c6:	f7fd ff3d 	bl	8001644 <Processing_Error>
			ek_mm = pt_PID_posision->ek * 1000;
 80037ca:	4b7e      	ldr	r3, [pc, #504]	@ (80039c4 <HAL_TIM_PeriodElapsedCallback+0x614>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80037d2:	ed9f 7a7d 	vldr	s14, [pc, #500]	@ 80039c8 <HAL_TIM_PeriodElapsedCallback+0x618>
 80037d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80037da:	4b7c      	ldr	r3, [pc, #496]	@ (80039cc <HAL_TIM_PeriodElapsedCallback+0x61c>)
 80037dc:	edc3 7a00 	vstr	s15, [r3]
			ek_degree = pt_PID_theta->ek * 180/PI;
 80037e0:	4b77      	ldr	r3, [pc, #476]	@ (80039c0 <HAL_TIM_PeriodElapsedCallback+0x610>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80037e8:	ed9f 7a79 	vldr	s14, [pc, #484]	@ 80039d0 <HAL_TIM_PeriodElapsedCallback+0x620>
 80037ec:	ee67 6a87 	vmul.f32	s13, s15, s14
 80037f0:	4b78      	ldr	r3, [pc, #480]	@ (80039d4 <HAL_TIM_PeriodElapsedCallback+0x624>)
 80037f2:	ed93 7a00 	vldr	s14, [r3]
 80037f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80037fa:	4b77      	ldr	r3, [pc, #476]	@ (80039d8 <HAL_TIM_PeriodElapsedCallback+0x628>)
 80037fc:	edc3 7a00 	vstr	s15, [r3]
			float em = pt_PID_posision->ek*1000;
 8003800:	4b70      	ldr	r3, [pc, #448]	@ (80039c4 <HAL_TIM_PeriodElapsedCallback+0x614>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8003808:	ed9f 7a6f 	vldr	s14, [pc, #444]	@ 80039c8 <HAL_TIM_PeriodElapsedCallback+0x618>
 800380c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003810:	edc7 7a03 	vstr	s15, [r7, #12]
			if(em >= 20)
 8003814:	edd7 7a03 	vldr	s15, [r7, #12]
 8003818:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 800381c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003820:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003824:	db02      	blt.n	800382c <HAL_TIM_PeriodElapsedCallback+0x47c>
				em = 20;
 8003826:	4b6d      	ldr	r3, [pc, #436]	@ (80039dc <HAL_TIM_PeriodElapsedCallback+0x62c>)
 8003828:	60fb      	str	r3, [r7, #12]
 800382a:	e00a      	b.n	8003842 <HAL_TIM_PeriodElapsedCallback+0x492>
			else if(em <= -20)
 800382c:	edd7 7a03 	vldr	s15, [r7, #12]
 8003830:	eebb 7a04 	vmov.f32	s14, #180	@ 0xc1a00000 -20.0
 8003834:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003838:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800383c:	d801      	bhi.n	8003842 <HAL_TIM_PeriodElapsedCallback+0x492>
				em = -20;
 800383e:	4b68      	ldr	r3, [pc, #416]	@ (80039e0 <HAL_TIM_PeriodElapsedCallback+0x630>)
 8003840:	60fb      	str	r3, [r7, #12]
			PID_XY(pt_PID_posision); // PID vị trí
 8003842:	4b60      	ldr	r3, [pc, #384]	@ (80039c4 <HAL_TIM_PeriodElapsedCallback+0x614>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4618      	mov	r0, r3
 8003848:	f7fd ff22 	bl	8001690 <PID_XY>
			PID_XY(pt_PID_theta);  // PID góc tiếp tuyến
 800384c:	4b5c      	ldr	r3, [pc, #368]	@ (80039c0 <HAL_TIM_PeriodElapsedCallback+0x610>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4618      	mov	r0, r3
 8003852:	f7fd ff1d 	bl	8001690 <PID_XY>
			Output_PID_K_0 = (pt_PID_posision->Output + pt_PID_theta->Output)/2.0;
 8003856:	4b5b      	ldr	r3, [pc, #364]	@ (80039c4 <HAL_TIM_PeriodElapsedCallback+0x614>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 800385e:	4b58      	ldr	r3, [pc, #352]	@ (80039c0 <HAL_TIM_PeriodElapsedCallback+0x610>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8003866:	ee37 7a27 	vadd.f32	s14, s14, s15
 800386a:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800386e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003872:	4b5c      	ldr	r3, [pc, #368]	@ (80039e4 <HAL_TIM_PeriodElapsedCallback+0x634>)
 8003874:	edc3 7a00 	vstr	s15, [r3]
			pt_Kine->VR_Set =   Output_PID_K_0 * (pt_Robot->L / 2.0)   + pt_Kine->V_Set; // v1 = u1*L/2 + vconst;
 8003878:	4b5a      	ldr	r3, [pc, #360]	@ (80039e4 <HAL_TIM_PeriodElapsedCallback+0x634>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4618      	mov	r0, r3
 800387e:	f7fc fe63 	bl	8000548 <__aeabi_f2d>
 8003882:	4604      	mov	r4, r0
 8003884:	460d      	mov	r5, r1
 8003886:	4b58      	ldr	r3, [pc, #352]	@ (80039e8 <HAL_TIM_PeriodElapsedCallback+0x638>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	4618      	mov	r0, r3
 800388e:	f7fc fe5b 	bl	8000548 <__aeabi_f2d>
 8003892:	f04f 0200 	mov.w	r2, #0
 8003896:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800389a:	f7fc ffd7 	bl	800084c <__aeabi_ddiv>
 800389e:	4602      	mov	r2, r0
 80038a0:	460b      	mov	r3, r1
 80038a2:	4620      	mov	r0, r4
 80038a4:	4629      	mov	r1, r5
 80038a6:	f7fc fea7 	bl	80005f8 <__aeabi_dmul>
 80038aa:	4602      	mov	r2, r0
 80038ac:	460b      	mov	r3, r1
 80038ae:	4614      	mov	r4, r2
 80038b0:	461d      	mov	r5, r3
 80038b2:	4b3e      	ldr	r3, [pc, #248]	@ (80039ac <HAL_TIM_PeriodElapsedCallback+0x5fc>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	695b      	ldr	r3, [r3, #20]
 80038b8:	4618      	mov	r0, r3
 80038ba:	f7fc fe45 	bl	8000548 <__aeabi_f2d>
 80038be:	4602      	mov	r2, r0
 80038c0:	460b      	mov	r3, r1
 80038c2:	4620      	mov	r0, r4
 80038c4:	4629      	mov	r1, r5
 80038c6:	f7fc fce1 	bl	800028c <__adddf3>
 80038ca:	4602      	mov	r2, r0
 80038cc:	460b      	mov	r3, r1
 80038ce:	4937      	ldr	r1, [pc, #220]	@ (80039ac <HAL_TIM_PeriodElapsedCallback+0x5fc>)
 80038d0:	680c      	ldr	r4, [r1, #0]
 80038d2:	4610      	mov	r0, r2
 80038d4:	4619      	mov	r1, r3
 80038d6:	f7fd f987 	bl	8000be8 <__aeabi_d2f>
 80038da:	4603      	mov	r3, r0
 80038dc:	63a3      	str	r3, [r4, #56]	@ 0x38
			pt_Kine->VL_Set = -(Output_PID_K_0 * (pt_Robot->L / 2.0))  + pt_Kine->V_Set; // v2 = -u1*L/2 + vconst;
 80038de:	4b33      	ldr	r3, [pc, #204]	@ (80039ac <HAL_TIM_PeriodElapsedCallback+0x5fc>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	695b      	ldr	r3, [r3, #20]
 80038e4:	4618      	mov	r0, r3
 80038e6:	f7fc fe2f 	bl	8000548 <__aeabi_f2d>
 80038ea:	4604      	mov	r4, r0
 80038ec:	460d      	mov	r5, r1
 80038ee:	4b3d      	ldr	r3, [pc, #244]	@ (80039e4 <HAL_TIM_PeriodElapsedCallback+0x634>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4618      	mov	r0, r3
 80038f4:	f7fc fe28 	bl	8000548 <__aeabi_f2d>
 80038f8:	4680      	mov	r8, r0
 80038fa:	4689      	mov	r9, r1
 80038fc:	4b3a      	ldr	r3, [pc, #232]	@ (80039e8 <HAL_TIM_PeriodElapsedCallback+0x638>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	4618      	mov	r0, r3
 8003904:	f7fc fe20 	bl	8000548 <__aeabi_f2d>
 8003908:	f04f 0200 	mov.w	r2, #0
 800390c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8003910:	f7fc ff9c 	bl	800084c <__aeabi_ddiv>
 8003914:	4602      	mov	r2, r0
 8003916:	460b      	mov	r3, r1
 8003918:	4640      	mov	r0, r8
 800391a:	4649      	mov	r1, r9
 800391c:	f7fc fe6c 	bl	80005f8 <__aeabi_dmul>
 8003920:	4602      	mov	r2, r0
 8003922:	460b      	mov	r3, r1
 8003924:	4620      	mov	r0, r4
 8003926:	4629      	mov	r1, r5
 8003928:	f7fc fcae 	bl	8000288 <__aeabi_dsub>
 800392c:	4602      	mov	r2, r0
 800392e:	460b      	mov	r3, r1
 8003930:	491e      	ldr	r1, [pc, #120]	@ (80039ac <HAL_TIM_PeriodElapsedCallback+0x5fc>)
 8003932:	680c      	ldr	r4, [r1, #0]
 8003934:	4610      	mov	r0, r2
 8003936:	4619      	mov	r1, r3
 8003938:	f7fd f956 	bl	8000be8 <__aeabi_d2f>
 800393c:	4603      	mov	r3, r0
 800393e:	6423      	str	r3, [r4, #64]	@ 0x40
			pt_Kine->V_Set_1 = (pt_Kine->VR_Set + pt_Kine->VL_Set)/2.0;  // v = (v1+v2)/2;
 8003940:	4b1a      	ldr	r3, [pc, #104]	@ (80039ac <HAL_TIM_PeriodElapsedCallback+0x5fc>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 8003948:	4b18      	ldr	r3, [pc, #96]	@ (80039ac <HAL_TIM_PeriodElapsedCallback+0x5fc>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8003950:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003954:	4b15      	ldr	r3, [pc, #84]	@ (80039ac <HAL_TIM_PeriodElapsedCallback+0x5fc>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800395c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003960:	edc3 7a06 	vstr	s15, [r3, #24]
			pt_Para_MR->SP_Rad_s = pt_Kine->VR_Set/pt_Robot->R;  //wr = v1/R;
 8003964:	4b11      	ldr	r3, [pc, #68]	@ (80039ac <HAL_TIM_PeriodElapsedCallback+0x5fc>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	edd3 6a0e 	vldr	s13, [r3, #56]	@ 0x38
 800396c:	4b1e      	ldr	r3, [pc, #120]	@ (80039e8 <HAL_TIM_PeriodElapsedCallback+0x638>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	ed93 7a00 	vldr	s14, [r3]
 8003974:	4b1d      	ldr	r3, [pc, #116]	@ (80039ec <HAL_TIM_PeriodElapsedCallback+0x63c>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800397c:	edc3 7a34 	vstr	s15, [r3, #208]	@ 0xd0
			pt_Para_ML->SP_Rad_s = pt_Kine->VL_Set/pt_Robot->R;  // wl = v2/R
 8003980:	4b0a      	ldr	r3, [pc, #40]	@ (80039ac <HAL_TIM_PeriodElapsedCallback+0x5fc>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	edd3 6a10 	vldr	s13, [r3, #64]	@ 0x40
 8003988:	4b17      	ldr	r3, [pc, #92]	@ (80039e8 <HAL_TIM_PeriodElapsedCallback+0x638>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	ed93 7a00 	vldr	s14, [r3]
 8003990:	4b17      	ldr	r3, [pc, #92]	@ (80039f0 <HAL_TIM_PeriodElapsedCallback+0x640>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003998:	edc3 7a34 	vstr	s15, [r3, #208]	@ 0xd0
}
 800399c:	e09d      	b.n	8003ada <HAL_TIM_PeriodElapsedCallback+0x72a>
 800399e:	bf00      	nop
 80039a0:	40001000 	.word	0x40001000
 80039a4:	2000c267 	.word	0x2000c267
 80039a8:	20000044 	.word	0x20000044
 80039ac:	20000038 	.word	0x20000038
 80039b0:	2000c3d8 	.word	0x2000c3d8
 80039b4:	2000c3c8 	.word	0x2000c3c8
 80039b8:	2000937c 	.word	0x2000937c
 80039bc:	2000649c 	.word	0x2000649c
 80039c0:	2000003c 	.word	0x2000003c
 80039c4:	20000040 	.word	0x20000040
 80039c8:	447a0000 	.word	0x447a0000
 80039cc:	2000c3dc 	.word	0x2000c3dc
 80039d0:	43340000 	.word	0x43340000
 80039d4:	20000024 	.word	0x20000024
 80039d8:	2000c3e0 	.word	0x2000c3e0
 80039dc:	41a00000 	.word	0x41a00000
 80039e0:	c1a00000 	.word	0xc1a00000
 80039e4:	2000c3f4 	.word	0x2000c3f4
 80039e8:	20000034 	.word	0x20000034
 80039ec:	2000002c 	.word	0x2000002c
 80039f0:	20000030 	.word	0x20000030
	else if (htim->Instance == TIM10)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a3f      	ldr	r2, [pc, #252]	@ (8003af8 <HAL_TIM_PeriodElapsedCallback+0x748>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d06d      	beq.n	8003ada <HAL_TIM_PeriodElapsedCallback+0x72a>
	else if (htim->Instance == TIM11)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a3e      	ldr	r2, [pc, #248]	@ (8003afc <HAL_TIM_PeriodElapsedCallback+0x74c>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d168      	bne.n	8003ada <HAL_TIM_PeriodElapsedCallback+0x72a>
		if(Start_bit_1 == 1)
 8003a08:	4b3d      	ldr	r3, [pc, #244]	@ (8003b00 <HAL_TIM_PeriodElapsedCallback+0x750>)
 8003a0a:	781b      	ldrb	r3, [r3, #0]
 8003a0c:	2b01      	cmp	r3, #1
 8003a0e:	d112      	bne.n	8003a36 <HAL_TIM_PeriodElapsedCallback+0x686>
			  Time_10 = Time_10 + 0.01;
 8003a10:	4b3c      	ldr	r3, [pc, #240]	@ (8003b04 <HAL_TIM_PeriodElapsedCallback+0x754>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4618      	mov	r0, r3
 8003a16:	f7fc fd97 	bl	8000548 <__aeabi_f2d>
 8003a1a:	a333      	add	r3, pc, #204	@ (adr r3, 8003ae8 <HAL_TIM_PeriodElapsedCallback+0x738>)
 8003a1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a20:	f7fc fc34 	bl	800028c <__adddf3>
 8003a24:	4602      	mov	r2, r0
 8003a26:	460b      	mov	r3, r1
 8003a28:	4610      	mov	r0, r2
 8003a2a:	4619      	mov	r1, r3
 8003a2c:	f7fd f8dc 	bl	8000be8 <__aeabi_d2f>
 8003a30:	4603      	mov	r3, r0
 8003a32:	4a34      	ldr	r2, [pc, #208]	@ (8003b04 <HAL_TIM_PeriodElapsedCallback+0x754>)
 8003a34:	6013      	str	r3, [r2, #0]
		if(Start_bit_1 == 1 && Time_10 < 0.1)
 8003a36:	4b32      	ldr	r3, [pc, #200]	@ (8003b00 <HAL_TIM_PeriodElapsedCallback+0x750>)
 8003a38:	781b      	ldrb	r3, [r3, #0]
 8003a3a:	2b01      	cmp	r3, #1
 8003a3c:	d14d      	bne.n	8003ada <HAL_TIM_PeriodElapsedCallback+0x72a>
 8003a3e:	4b31      	ldr	r3, [pc, #196]	@ (8003b04 <HAL_TIM_PeriodElapsedCallback+0x754>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4618      	mov	r0, r3
 8003a44:	f7fc fd80 	bl	8000548 <__aeabi_f2d>
 8003a48:	a329      	add	r3, pc, #164	@ (adr r3, 8003af0 <HAL_TIM_PeriodElapsedCallback+0x740>)
 8003a4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a4e:	f7fd f845 	bl	8000adc <__aeabi_dcmplt>
 8003a52:	4603      	mov	r3, r0
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d100      	bne.n	8003a5a <HAL_TIM_PeriodElapsedCallback+0x6aa>
}
 8003a58:	e03f      	b.n	8003ada <HAL_TIM_PeriodElapsedCallback+0x72a>
			  pt_Kine->X_Welding = Mang_quy_dao_X_m[0];
 8003a5a:	4b2b      	ldr	r3, [pc, #172]	@ (8003b08 <HAL_TIM_PeriodElapsedCallback+0x758>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a2b      	ldr	r2, [pc, #172]	@ (8003b0c <HAL_TIM_PeriodElapsedCallback+0x75c>)
 8003a60:	6812      	ldr	r2, [r2, #0]
 8003a62:	651a      	str	r2, [r3, #80]	@ 0x50
			  pt_Kine->Y_Welding = Mang_quy_dao_Y_m[0];
 8003a64:	4b28      	ldr	r3, [pc, #160]	@ (8003b08 <HAL_TIM_PeriodElapsedCallback+0x758>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a29      	ldr	r2, [pc, #164]	@ (8003b10 <HAL_TIM_PeriodElapsedCallback+0x760>)
 8003a6a:	6812      	ldr	r2, [r2, #0]
 8003a6c:	655a      	str	r2, [r3, #84]	@ 0x54
			  pt_Kine->X_real = pt_Kine->X_Welding;
 8003a6e:	4b26      	ldr	r3, [pc, #152]	@ (8003b08 <HAL_TIM_PeriodElapsedCallback+0x758>)
 8003a70:	681a      	ldr	r2, [r3, #0]
 8003a72:	4b25      	ldr	r3, [pc, #148]	@ (8003b08 <HAL_TIM_PeriodElapsedCallback+0x758>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003a78:	601a      	str	r2, [r3, #0]
			  pt_Kine->Y_real = pt_Kine->Y_Welding;
 8003a7a:	4b23      	ldr	r3, [pc, #140]	@ (8003b08 <HAL_TIM_PeriodElapsedCallback+0x758>)
 8003a7c:	681a      	ldr	r2, [r3, #0]
 8003a7e:	4b22      	ldr	r3, [pc, #136]	@ (8003b08 <HAL_TIM_PeriodElapsedCallback+0x758>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8003a84:	605a      	str	r2, [r3, #4]
			  float Delta_L = 0;
 8003a86:	f04f 0300 	mov.w	r3, #0
 8003a8a:	613b      	str	r3, [r7, #16]
			  for(int i=0; i<2; i++)
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	617b      	str	r3, [r7, #20]
 8003a90:	e01d      	b.n	8003ace <HAL_TIM_PeriodElapsedCallback+0x71e>
				  Mang_Robot_1[i][0] = Mang_quy_dao_X_m[Vi_tri_1 + i];
 8003a92:	4b20      	ldr	r3, [pc, #128]	@ (8003b14 <HAL_TIM_PeriodElapsedCallback+0x764>)
 8003a94:	681a      	ldr	r2, [r3, #0]
 8003a96:	697b      	ldr	r3, [r7, #20]
 8003a98:	4413      	add	r3, r2
 8003a9a:	4a1c      	ldr	r2, [pc, #112]	@ (8003b0c <HAL_TIM_PeriodElapsedCallback+0x75c>)
 8003a9c:	009b      	lsls	r3, r3, #2
 8003a9e:	4413      	add	r3, r2
 8003aa0:	681a      	ldr	r2, [r3, #0]
 8003aa2:	491d      	ldr	r1, [pc, #116]	@ (8003b18 <HAL_TIM_PeriodElapsedCallback+0x768>)
 8003aa4:	697b      	ldr	r3, [r7, #20]
 8003aa6:	00db      	lsls	r3, r3, #3
 8003aa8:	440b      	add	r3, r1
 8003aaa:	601a      	str	r2, [r3, #0]
				  Mang_Robot_1[i][1] = Mang_quy_dao_Y_m[Vi_tri_1 + i];
 8003aac:	4b19      	ldr	r3, [pc, #100]	@ (8003b14 <HAL_TIM_PeriodElapsedCallback+0x764>)
 8003aae:	681a      	ldr	r2, [r3, #0]
 8003ab0:	697b      	ldr	r3, [r7, #20]
 8003ab2:	4413      	add	r3, r2
 8003ab4:	4a16      	ldr	r2, [pc, #88]	@ (8003b10 <HAL_TIM_PeriodElapsedCallback+0x760>)
 8003ab6:	009b      	lsls	r3, r3, #2
 8003ab8:	4413      	add	r3, r2
 8003aba:	681a      	ldr	r2, [r3, #0]
 8003abc:	4916      	ldr	r1, [pc, #88]	@ (8003b18 <HAL_TIM_PeriodElapsedCallback+0x768>)
 8003abe:	697b      	ldr	r3, [r7, #20]
 8003ac0:	00db      	lsls	r3, r3, #3
 8003ac2:	440b      	add	r3, r1
 8003ac4:	3304      	adds	r3, #4
 8003ac6:	601a      	str	r2, [r3, #0]
			  for(int i=0; i<2; i++)
 8003ac8:	697b      	ldr	r3, [r7, #20]
 8003aca:	3301      	adds	r3, #1
 8003acc:	617b      	str	r3, [r7, #20]
 8003ace:	697b      	ldr	r3, [r7, #20]
 8003ad0:	2b01      	cmp	r3, #1
 8003ad2:	ddde      	ble.n	8003a92 <HAL_TIM_PeriodElapsedCallback+0x6e2>
			  Start_bit_2 = 1;
 8003ad4:	4b11      	ldr	r3, [pc, #68]	@ (8003b1c <HAL_TIM_PeriodElapsedCallback+0x76c>)
 8003ad6:	2201      	movs	r2, #1
 8003ad8:	701a      	strb	r2, [r3, #0]
}
 8003ada:	bf00      	nop
 8003adc:	371c      	adds	r7, #28
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003ae4:	f3af 8000 	nop.w
 8003ae8:	47ae147b 	.word	0x47ae147b
 8003aec:	3f847ae1 	.word	0x3f847ae1
 8003af0:	9999999a 	.word	0x9999999a
 8003af4:	3fb99999 	.word	0x3fb99999
 8003af8:	40014400 	.word	0x40014400
 8003afc:	40014800 	.word	0x40014800
 8003b00:	2000c266 	.word	0x2000c266
 8003b04:	2000c3e4 	.word	0x2000c3e4
 8003b08:	20000038 	.word	0x20000038
 8003b0c:	2000649c 	.word	0x2000649c
 8003b10:	2000937c 	.word	0x2000937c
 8003b14:	2000c3d8 	.word	0x2000c3d8
 8003b18:	2000c3c8 	.word	0x2000c3c8
 8003b1c:	2000c267 	.word	0x2000c267

08003b20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003b20:	b480      	push	{r7}
 8003b22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003b24:	b672      	cpsid	i
}
 8003b26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003b28:	bf00      	nop
 8003b2a:	e7fd      	b.n	8003b28 <Error_Handler+0x8>

08003b2c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	b083      	sub	sp, #12
 8003b30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b32:	2300      	movs	r3, #0
 8003b34:	607b      	str	r3, [r7, #4]
 8003b36:	4b10      	ldr	r3, [pc, #64]	@ (8003b78 <HAL_MspInit+0x4c>)
 8003b38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b3a:	4a0f      	ldr	r2, [pc, #60]	@ (8003b78 <HAL_MspInit+0x4c>)
 8003b3c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003b40:	6453      	str	r3, [r2, #68]	@ 0x44
 8003b42:	4b0d      	ldr	r3, [pc, #52]	@ (8003b78 <HAL_MspInit+0x4c>)
 8003b44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b46:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003b4a:	607b      	str	r3, [r7, #4]
 8003b4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003b4e:	2300      	movs	r3, #0
 8003b50:	603b      	str	r3, [r7, #0]
 8003b52:	4b09      	ldr	r3, [pc, #36]	@ (8003b78 <HAL_MspInit+0x4c>)
 8003b54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b56:	4a08      	ldr	r2, [pc, #32]	@ (8003b78 <HAL_MspInit+0x4c>)
 8003b58:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b5c:	6413      	str	r3, [r2, #64]	@ 0x40
 8003b5e:	4b06      	ldr	r3, [pc, #24]	@ (8003b78 <HAL_MspInit+0x4c>)
 8003b60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b66:	603b      	str	r3, [r7, #0]
 8003b68:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003b6a:	bf00      	nop
 8003b6c:	370c      	adds	r7, #12
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b74:	4770      	bx	lr
 8003b76:	bf00      	nop
 8003b78:	40023800 	.word	0x40023800

08003b7c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b08c      	sub	sp, #48	@ 0x30
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b84:	f107 031c 	add.w	r3, r7, #28
 8003b88:	2200      	movs	r2, #0
 8003b8a:	601a      	str	r2, [r3, #0]
 8003b8c:	605a      	str	r2, [r3, #4]
 8003b8e:	609a      	str	r2, [r3, #8]
 8003b90:	60da      	str	r2, [r3, #12]
 8003b92:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4a36      	ldr	r2, [pc, #216]	@ (8003c74 <HAL_I2C_MspInit+0xf8>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d134      	bne.n	8003c08 <HAL_I2C_MspInit+0x8c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	61bb      	str	r3, [r7, #24]
 8003ba2:	4b35      	ldr	r3, [pc, #212]	@ (8003c78 <HAL_I2C_MspInit+0xfc>)
 8003ba4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ba6:	4a34      	ldr	r2, [pc, #208]	@ (8003c78 <HAL_I2C_MspInit+0xfc>)
 8003ba8:	f043 0302 	orr.w	r3, r3, #2
 8003bac:	6313      	str	r3, [r2, #48]	@ 0x30
 8003bae:	4b32      	ldr	r3, [pc, #200]	@ (8003c78 <HAL_I2C_MspInit+0xfc>)
 8003bb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bb2:	f003 0302 	and.w	r3, r3, #2
 8003bb6:	61bb      	str	r3, [r7, #24]
 8003bb8:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ESP32_SCL_Pin|ESP32_SDA_Pin;
 8003bba:	23c0      	movs	r3, #192	@ 0xc0
 8003bbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003bbe:	2312      	movs	r3, #18
 8003bc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003bc6:	2303      	movs	r3, #3
 8003bc8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003bca:	2304      	movs	r3, #4
 8003bcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003bce:	f107 031c 	add.w	r3, r7, #28
 8003bd2:	4619      	mov	r1, r3
 8003bd4:	4829      	ldr	r0, [pc, #164]	@ (8003c7c <HAL_I2C_MspInit+0x100>)
 8003bd6:	f000 fecb 	bl	8004970 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003bda:	2300      	movs	r3, #0
 8003bdc:	617b      	str	r3, [r7, #20]
 8003bde:	4b26      	ldr	r3, [pc, #152]	@ (8003c78 <HAL_I2C_MspInit+0xfc>)
 8003be0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003be2:	4a25      	ldr	r2, [pc, #148]	@ (8003c78 <HAL_I2C_MspInit+0xfc>)
 8003be4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003be8:	6413      	str	r3, [r2, #64]	@ 0x40
 8003bea:	4b23      	ldr	r3, [pc, #140]	@ (8003c78 <HAL_I2C_MspInit+0xfc>)
 8003bec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bee:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003bf2:	617b      	str	r3, [r7, #20]
 8003bf4:	697b      	ldr	r3, [r7, #20]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	2100      	movs	r1, #0
 8003bfa:	201f      	movs	r0, #31
 8003bfc:	f000 fe51 	bl	80048a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8003c00:	201f      	movs	r0, #31
 8003c02:	f000 fe6a 	bl	80048da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8003c06:	e031      	b.n	8003c6c <HAL_I2C_MspInit+0xf0>
  else if(hi2c->Instance==I2C2)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a1c      	ldr	r2, [pc, #112]	@ (8003c80 <HAL_I2C_MspInit+0x104>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d12c      	bne.n	8003c6c <HAL_I2C_MspInit+0xf0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c12:	2300      	movs	r3, #0
 8003c14:	613b      	str	r3, [r7, #16]
 8003c16:	4b18      	ldr	r3, [pc, #96]	@ (8003c78 <HAL_I2C_MspInit+0xfc>)
 8003c18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c1a:	4a17      	ldr	r2, [pc, #92]	@ (8003c78 <HAL_I2C_MspInit+0xfc>)
 8003c1c:	f043 0302 	orr.w	r3, r3, #2
 8003c20:	6313      	str	r3, [r2, #48]	@ 0x30
 8003c22:	4b15      	ldr	r3, [pc, #84]	@ (8003c78 <HAL_I2C_MspInit+0xfc>)
 8003c24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c26:	f003 0302 	and.w	r3, r3, #2
 8003c2a:	613b      	str	r3, [r7, #16]
 8003c2c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = SCL_LCD_Pin|SDA_LCD_Pin;
 8003c2e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8003c32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003c34:	2312      	movs	r3, #18
 8003c36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c38:	2300      	movs	r3, #0
 8003c3a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c3c:	2303      	movs	r3, #3
 8003c3e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8003c40:	2304      	movs	r3, #4
 8003c42:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c44:	f107 031c 	add.w	r3, r7, #28
 8003c48:	4619      	mov	r1, r3
 8003c4a:	480c      	ldr	r0, [pc, #48]	@ (8003c7c <HAL_I2C_MspInit+0x100>)
 8003c4c:	f000 fe90 	bl	8004970 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003c50:	2300      	movs	r3, #0
 8003c52:	60fb      	str	r3, [r7, #12]
 8003c54:	4b08      	ldr	r3, [pc, #32]	@ (8003c78 <HAL_I2C_MspInit+0xfc>)
 8003c56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c58:	4a07      	ldr	r2, [pc, #28]	@ (8003c78 <HAL_I2C_MspInit+0xfc>)
 8003c5a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003c5e:	6413      	str	r3, [r2, #64]	@ 0x40
 8003c60:	4b05      	ldr	r3, [pc, #20]	@ (8003c78 <HAL_I2C_MspInit+0xfc>)
 8003c62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c64:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c68:	60fb      	str	r3, [r7, #12]
 8003c6a:	68fb      	ldr	r3, [r7, #12]
}
 8003c6c:	bf00      	nop
 8003c6e:	3730      	adds	r7, #48	@ 0x30
 8003c70:	46bd      	mov	sp, r7
 8003c72:	bd80      	pop	{r7, pc}
 8003c74:	40005400 	.word	0x40005400
 8003c78:	40023800 	.word	0x40023800
 8003c7c:	40020400 	.word	0x40020400
 8003c80:	40005800 	.word	0x40005800

08003c84 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b08a      	sub	sp, #40	@ 0x28
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c8c:	f107 0314 	add.w	r3, r7, #20
 8003c90:	2200      	movs	r2, #0
 8003c92:	601a      	str	r2, [r3, #0]
 8003c94:	605a      	str	r2, [r3, #4]
 8003c96:	609a      	str	r2, [r3, #8]
 8003c98:	60da      	str	r2, [r3, #12]
 8003c9a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a19      	ldr	r2, [pc, #100]	@ (8003d08 <HAL_SPI_MspInit+0x84>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d12b      	bne.n	8003cfe <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	613b      	str	r3, [r7, #16]
 8003caa:	4b18      	ldr	r3, [pc, #96]	@ (8003d0c <HAL_SPI_MspInit+0x88>)
 8003cac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cae:	4a17      	ldr	r2, [pc, #92]	@ (8003d0c <HAL_SPI_MspInit+0x88>)
 8003cb0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003cb4:	6453      	str	r3, [r2, #68]	@ 0x44
 8003cb6:	4b15      	ldr	r3, [pc, #84]	@ (8003d0c <HAL_SPI_MspInit+0x88>)
 8003cb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cba:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003cbe:	613b      	str	r3, [r7, #16]
 8003cc0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	60fb      	str	r3, [r7, #12]
 8003cc6:	4b11      	ldr	r3, [pc, #68]	@ (8003d0c <HAL_SPI_MspInit+0x88>)
 8003cc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cca:	4a10      	ldr	r2, [pc, #64]	@ (8003d0c <HAL_SPI_MspInit+0x88>)
 8003ccc:	f043 0302 	orr.w	r3, r3, #2
 8003cd0:	6313      	str	r3, [r2, #48]	@ 0x30
 8003cd2:	4b0e      	ldr	r3, [pc, #56]	@ (8003d0c <HAL_SPI_MspInit+0x88>)
 8003cd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cd6:	f003 0302 	and.w	r3, r3, #2
 8003cda:	60fb      	str	r3, [r7, #12]
 8003cdc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SCK_MAX7219_Pin|MISO_MAX7129_Pin|MOSI_MAX7129_Pin;
 8003cde:	2338      	movs	r3, #56	@ 0x38
 8003ce0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ce2:	2302      	movs	r3, #2
 8003ce4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003cea:	2303      	movs	r3, #3
 8003cec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003cee:	2305      	movs	r3, #5
 8003cf0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003cf2:	f107 0314 	add.w	r3, r7, #20
 8003cf6:	4619      	mov	r1, r3
 8003cf8:	4805      	ldr	r0, [pc, #20]	@ (8003d10 <HAL_SPI_MspInit+0x8c>)
 8003cfa:	f000 fe39 	bl	8004970 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003cfe:	bf00      	nop
 8003d00:	3728      	adds	r7, #40	@ 0x28
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bd80      	pop	{r7, pc}
 8003d06:	bf00      	nop
 8003d08:	40013000 	.word	0x40013000
 8003d0c:	40023800 	.word	0x40023800
 8003d10:	40020400 	.word	0x40020400

08003d14 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b086      	sub	sp, #24
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a32      	ldr	r2, [pc, #200]	@ (8003dec <HAL_TIM_PWM_MspInit+0xd8>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d126      	bne.n	8003d74 <HAL_TIM_PWM_MspInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003d26:	2300      	movs	r3, #0
 8003d28:	617b      	str	r3, [r7, #20]
 8003d2a:	4b31      	ldr	r3, [pc, #196]	@ (8003df0 <HAL_TIM_PWM_MspInit+0xdc>)
 8003d2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d2e:	4a30      	ldr	r2, [pc, #192]	@ (8003df0 <HAL_TIM_PWM_MspInit+0xdc>)
 8003d30:	f043 0301 	orr.w	r3, r3, #1
 8003d34:	6453      	str	r3, [r2, #68]	@ 0x44
 8003d36:	4b2e      	ldr	r3, [pc, #184]	@ (8003df0 <HAL_TIM_PWM_MspInit+0xdc>)
 8003d38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d3a:	f003 0301 	and.w	r3, r3, #1
 8003d3e:	617b      	str	r3, [r7, #20]
 8003d40:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8003d42:	2200      	movs	r2, #0
 8003d44:	2100      	movs	r1, #0
 8003d46:	2018      	movs	r0, #24
 8003d48:	f000 fdab 	bl	80048a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8003d4c:	2018      	movs	r0, #24
 8003d4e:	f000 fdc4 	bl	80048da <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8003d52:	2200      	movs	r2, #0
 8003d54:	2100      	movs	r1, #0
 8003d56:	2019      	movs	r0, #25
 8003d58:	f000 fda3 	bl	80048a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8003d5c:	2019      	movs	r0, #25
 8003d5e:	f000 fdbc 	bl	80048da <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8003d62:	2200      	movs	r2, #0
 8003d64:	2100      	movs	r1, #0
 8003d66:	201a      	movs	r0, #26
 8003d68:	f000 fd9b 	bl	80048a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8003d6c:	201a      	movs	r0, #26
 8003d6e:	f000 fdb4 	bl	80048da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8003d72:	e036      	b.n	8003de2 <HAL_TIM_PWM_MspInit+0xce>
  else if(htim_pwm->Instance==TIM2)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d7c:	d116      	bne.n	8003dac <HAL_TIM_PWM_MspInit+0x98>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003d7e:	2300      	movs	r3, #0
 8003d80:	613b      	str	r3, [r7, #16]
 8003d82:	4b1b      	ldr	r3, [pc, #108]	@ (8003df0 <HAL_TIM_PWM_MspInit+0xdc>)
 8003d84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d86:	4a1a      	ldr	r2, [pc, #104]	@ (8003df0 <HAL_TIM_PWM_MspInit+0xdc>)
 8003d88:	f043 0301 	orr.w	r3, r3, #1
 8003d8c:	6413      	str	r3, [r2, #64]	@ 0x40
 8003d8e:	4b18      	ldr	r3, [pc, #96]	@ (8003df0 <HAL_TIM_PWM_MspInit+0xdc>)
 8003d90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d92:	f003 0301 	and.w	r3, r3, #1
 8003d96:	613b      	str	r3, [r7, #16]
 8003d98:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	2100      	movs	r1, #0
 8003d9e:	201c      	movs	r0, #28
 8003da0:	f000 fd7f 	bl	80048a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003da4:	201c      	movs	r0, #28
 8003da6:	f000 fd98 	bl	80048da <HAL_NVIC_EnableIRQ>
}
 8003daa:	e01a      	b.n	8003de2 <HAL_TIM_PWM_MspInit+0xce>
  else if(htim_pwm->Instance==TIM5)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a10      	ldr	r2, [pc, #64]	@ (8003df4 <HAL_TIM_PWM_MspInit+0xe0>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d115      	bne.n	8003de2 <HAL_TIM_PWM_MspInit+0xce>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003db6:	2300      	movs	r3, #0
 8003db8:	60fb      	str	r3, [r7, #12]
 8003dba:	4b0d      	ldr	r3, [pc, #52]	@ (8003df0 <HAL_TIM_PWM_MspInit+0xdc>)
 8003dbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dbe:	4a0c      	ldr	r2, [pc, #48]	@ (8003df0 <HAL_TIM_PWM_MspInit+0xdc>)
 8003dc0:	f043 0308 	orr.w	r3, r3, #8
 8003dc4:	6413      	str	r3, [r2, #64]	@ 0x40
 8003dc6:	4b0a      	ldr	r3, [pc, #40]	@ (8003df0 <HAL_TIM_PWM_MspInit+0xdc>)
 8003dc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dca:	f003 0308 	and.w	r3, r3, #8
 8003dce:	60fb      	str	r3, [r7, #12]
 8003dd0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	2100      	movs	r1, #0
 8003dd6:	2032      	movs	r0, #50	@ 0x32
 8003dd8:	f000 fd63 	bl	80048a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8003ddc:	2032      	movs	r0, #50	@ 0x32
 8003dde:	f000 fd7c 	bl	80048da <HAL_NVIC_EnableIRQ>
}
 8003de2:	bf00      	nop
 8003de4:	3718      	adds	r7, #24
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bd80      	pop	{r7, pc}
 8003dea:	bf00      	nop
 8003dec:	40010000 	.word	0x40010000
 8003df0:	40023800 	.word	0x40023800
 8003df4:	40000c00 	.word	0x40000c00

08003df8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b08c      	sub	sp, #48	@ 0x30
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e00:	f107 031c 	add.w	r3, r7, #28
 8003e04:	2200      	movs	r2, #0
 8003e06:	601a      	str	r2, [r3, #0]
 8003e08:	605a      	str	r2, [r3, #4]
 8003e0a:	609a      	str	r2, [r3, #8]
 8003e0c:	60da      	str	r2, [r3, #12]
 8003e0e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4a3a      	ldr	r2, [pc, #232]	@ (8003f00 <HAL_TIM_Encoder_MspInit+0x108>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d134      	bne.n	8003e84 <HAL_TIM_Encoder_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	61bb      	str	r3, [r7, #24]
 8003e1e:	4b39      	ldr	r3, [pc, #228]	@ (8003f04 <HAL_TIM_Encoder_MspInit+0x10c>)
 8003e20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e22:	4a38      	ldr	r2, [pc, #224]	@ (8003f04 <HAL_TIM_Encoder_MspInit+0x10c>)
 8003e24:	f043 0302 	orr.w	r3, r3, #2
 8003e28:	6413      	str	r3, [r2, #64]	@ 0x40
 8003e2a:	4b36      	ldr	r3, [pc, #216]	@ (8003f04 <HAL_TIM_Encoder_MspInit+0x10c>)
 8003e2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e2e:	f003 0302 	and.w	r3, r3, #2
 8003e32:	61bb      	str	r3, [r7, #24]
 8003e34:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e36:	2300      	movs	r3, #0
 8003e38:	617b      	str	r3, [r7, #20]
 8003e3a:	4b32      	ldr	r3, [pc, #200]	@ (8003f04 <HAL_TIM_Encoder_MspInit+0x10c>)
 8003e3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e3e:	4a31      	ldr	r2, [pc, #196]	@ (8003f04 <HAL_TIM_Encoder_MspInit+0x10c>)
 8003e40:	f043 0301 	orr.w	r3, r3, #1
 8003e44:	6313      	str	r3, [r2, #48]	@ 0x30
 8003e46:	4b2f      	ldr	r3, [pc, #188]	@ (8003f04 <HAL_TIM_Encoder_MspInit+0x10c>)
 8003e48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e4a:	f003 0301 	and.w	r3, r3, #1
 8003e4e:	617b      	str	r3, [r7, #20]
 8003e50:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = ENCODER_R1_Pin|ENCODER_R2_Pin;
 8003e52:	23c0      	movs	r3, #192	@ 0xc0
 8003e54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e56:	2302      	movs	r3, #2
 8003e58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e5e:	2300      	movs	r3, #0
 8003e60:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003e62:	2302      	movs	r3, #2
 8003e64:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e66:	f107 031c 	add.w	r3, r7, #28
 8003e6a:	4619      	mov	r1, r3
 8003e6c:	4826      	ldr	r0, [pc, #152]	@ (8003f08 <HAL_TIM_Encoder_MspInit+0x110>)
 8003e6e:	f000 fd7f 	bl	8004970 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003e72:	2200      	movs	r2, #0
 8003e74:	2100      	movs	r1, #0
 8003e76:	201d      	movs	r0, #29
 8003e78:	f000 fd13 	bl	80048a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003e7c:	201d      	movs	r0, #29
 8003e7e:	f000 fd2c 	bl	80048da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003e82:	e039      	b.n	8003ef8 <HAL_TIM_Encoder_MspInit+0x100>
  else if(htim_encoder->Instance==TIM4)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a20      	ldr	r2, [pc, #128]	@ (8003f0c <HAL_TIM_Encoder_MspInit+0x114>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d134      	bne.n	8003ef8 <HAL_TIM_Encoder_MspInit+0x100>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003e8e:	2300      	movs	r3, #0
 8003e90:	613b      	str	r3, [r7, #16]
 8003e92:	4b1c      	ldr	r3, [pc, #112]	@ (8003f04 <HAL_TIM_Encoder_MspInit+0x10c>)
 8003e94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e96:	4a1b      	ldr	r2, [pc, #108]	@ (8003f04 <HAL_TIM_Encoder_MspInit+0x10c>)
 8003e98:	f043 0304 	orr.w	r3, r3, #4
 8003e9c:	6413      	str	r3, [r2, #64]	@ 0x40
 8003e9e:	4b19      	ldr	r3, [pc, #100]	@ (8003f04 <HAL_TIM_Encoder_MspInit+0x10c>)
 8003ea0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ea2:	f003 0304 	and.w	r3, r3, #4
 8003ea6:	613b      	str	r3, [r7, #16]
 8003ea8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003eaa:	2300      	movs	r3, #0
 8003eac:	60fb      	str	r3, [r7, #12]
 8003eae:	4b15      	ldr	r3, [pc, #84]	@ (8003f04 <HAL_TIM_Encoder_MspInit+0x10c>)
 8003eb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003eb2:	4a14      	ldr	r2, [pc, #80]	@ (8003f04 <HAL_TIM_Encoder_MspInit+0x10c>)
 8003eb4:	f043 0308 	orr.w	r3, r3, #8
 8003eb8:	6313      	str	r3, [r2, #48]	@ 0x30
 8003eba:	4b12      	ldr	r3, [pc, #72]	@ (8003f04 <HAL_TIM_Encoder_MspInit+0x10c>)
 8003ebc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ebe:	f003 0308 	and.w	r3, r3, #8
 8003ec2:	60fb      	str	r3, [r7, #12]
 8003ec4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ENCODER_L1_Pin|ENCODER_L2_Pin;
 8003ec6:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8003eca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ecc:	2302      	movs	r3, #2
 8003ece:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003ed8:	2302      	movs	r3, #2
 8003eda:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003edc:	f107 031c 	add.w	r3, r7, #28
 8003ee0:	4619      	mov	r1, r3
 8003ee2:	480b      	ldr	r0, [pc, #44]	@ (8003f10 <HAL_TIM_Encoder_MspInit+0x118>)
 8003ee4:	f000 fd44 	bl	8004970 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8003ee8:	2200      	movs	r2, #0
 8003eea:	2100      	movs	r1, #0
 8003eec:	201e      	movs	r0, #30
 8003eee:	f000 fcd8 	bl	80048a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003ef2:	201e      	movs	r0, #30
 8003ef4:	f000 fcf1 	bl	80048da <HAL_NVIC_EnableIRQ>
}
 8003ef8:	bf00      	nop
 8003efa:	3730      	adds	r7, #48	@ 0x30
 8003efc:	46bd      	mov	sp, r7
 8003efe:	bd80      	pop	{r7, pc}
 8003f00:	40000400 	.word	0x40000400
 8003f04:	40023800 	.word	0x40023800
 8003f08:	40020000 	.word	0x40020000
 8003f0c:	40000800 	.word	0x40000800
 8003f10:	40020c00 	.word	0x40020c00

08003f14 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b088      	sub	sp, #32
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a4a      	ldr	r2, [pc, #296]	@ (800404c <HAL_TIM_Base_MspInit+0x138>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d116      	bne.n	8003f54 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003f26:	2300      	movs	r3, #0
 8003f28:	61fb      	str	r3, [r7, #28]
 8003f2a:	4b49      	ldr	r3, [pc, #292]	@ (8004050 <HAL_TIM_Base_MspInit+0x13c>)
 8003f2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f2e:	4a48      	ldr	r2, [pc, #288]	@ (8004050 <HAL_TIM_Base_MspInit+0x13c>)
 8003f30:	f043 0310 	orr.w	r3, r3, #16
 8003f34:	6413      	str	r3, [r2, #64]	@ 0x40
 8003f36:	4b46      	ldr	r3, [pc, #280]	@ (8004050 <HAL_TIM_Base_MspInit+0x13c>)
 8003f38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f3a:	f003 0310 	and.w	r3, r3, #16
 8003f3e:	61fb      	str	r3, [r7, #28]
 8003f40:	69fb      	ldr	r3, [r7, #28]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8003f42:	2200      	movs	r2, #0
 8003f44:	2100      	movs	r1, #0
 8003f46:	2036      	movs	r0, #54	@ 0x36
 8003f48:	f000 fcab 	bl	80048a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003f4c:	2036      	movs	r0, #54	@ 0x36
 8003f4e:	f000 fcc4 	bl	80048da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8003f52:	e076      	b.n	8004042 <HAL_TIM_Base_MspInit+0x12e>
  else if(htim_base->Instance==TIM8)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4a3e      	ldr	r2, [pc, #248]	@ (8004054 <HAL_TIM_Base_MspInit+0x140>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d11e      	bne.n	8003f9c <HAL_TIM_Base_MspInit+0x88>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003f5e:	2300      	movs	r3, #0
 8003f60:	61bb      	str	r3, [r7, #24]
 8003f62:	4b3b      	ldr	r3, [pc, #236]	@ (8004050 <HAL_TIM_Base_MspInit+0x13c>)
 8003f64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f66:	4a3a      	ldr	r2, [pc, #232]	@ (8004050 <HAL_TIM_Base_MspInit+0x13c>)
 8003f68:	f043 0302 	orr.w	r3, r3, #2
 8003f6c:	6453      	str	r3, [r2, #68]	@ 0x44
 8003f6e:	4b38      	ldr	r3, [pc, #224]	@ (8004050 <HAL_TIM_Base_MspInit+0x13c>)
 8003f70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f72:	f003 0302 	and.w	r3, r3, #2
 8003f76:	61bb      	str	r3, [r7, #24]
 8003f78:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	2100      	movs	r1, #0
 8003f7e:	202b      	movs	r0, #43	@ 0x2b
 8003f80:	f000 fc8f 	bl	80048a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8003f84:	202b      	movs	r0, #43	@ 0x2b
 8003f86:	f000 fca8 	bl	80048da <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	2100      	movs	r1, #0
 8003f8e:	202c      	movs	r0, #44	@ 0x2c
 8003f90:	f000 fc87 	bl	80048a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8003f94:	202c      	movs	r0, #44	@ 0x2c
 8003f96:	f000 fca0 	bl	80048da <HAL_NVIC_EnableIRQ>
}
 8003f9a:	e052      	b.n	8004042 <HAL_TIM_Base_MspInit+0x12e>
  else if(htim_base->Instance==TIM9)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a2d      	ldr	r2, [pc, #180]	@ (8004058 <HAL_TIM_Base_MspInit+0x144>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d116      	bne.n	8003fd4 <HAL_TIM_Base_MspInit+0xc0>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	617b      	str	r3, [r7, #20]
 8003faa:	4b29      	ldr	r3, [pc, #164]	@ (8004050 <HAL_TIM_Base_MspInit+0x13c>)
 8003fac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fae:	4a28      	ldr	r2, [pc, #160]	@ (8004050 <HAL_TIM_Base_MspInit+0x13c>)
 8003fb0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003fb4:	6453      	str	r3, [r2, #68]	@ 0x44
 8003fb6:	4b26      	ldr	r3, [pc, #152]	@ (8004050 <HAL_TIM_Base_MspInit+0x13c>)
 8003fb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003fbe:	617b      	str	r3, [r7, #20]
 8003fc0:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	2100      	movs	r1, #0
 8003fc6:	2018      	movs	r0, #24
 8003fc8:	f000 fc6b 	bl	80048a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8003fcc:	2018      	movs	r0, #24
 8003fce:	f000 fc84 	bl	80048da <HAL_NVIC_EnableIRQ>
}
 8003fd2:	e036      	b.n	8004042 <HAL_TIM_Base_MspInit+0x12e>
  else if(htim_base->Instance==TIM10)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a20      	ldr	r2, [pc, #128]	@ (800405c <HAL_TIM_Base_MspInit+0x148>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d116      	bne.n	800400c <HAL_TIM_Base_MspInit+0xf8>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8003fde:	2300      	movs	r3, #0
 8003fe0:	613b      	str	r3, [r7, #16]
 8003fe2:	4b1b      	ldr	r3, [pc, #108]	@ (8004050 <HAL_TIM_Base_MspInit+0x13c>)
 8003fe4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fe6:	4a1a      	ldr	r2, [pc, #104]	@ (8004050 <HAL_TIM_Base_MspInit+0x13c>)
 8003fe8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003fec:	6453      	str	r3, [r2, #68]	@ 0x44
 8003fee:	4b18      	ldr	r3, [pc, #96]	@ (8004050 <HAL_TIM_Base_MspInit+0x13c>)
 8003ff0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ff2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ff6:	613b      	str	r3, [r7, #16]
 8003ff8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	2100      	movs	r1, #0
 8003ffe:	2019      	movs	r0, #25
 8004000:	f000 fc4f 	bl	80048a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8004004:	2019      	movs	r0, #25
 8004006:	f000 fc68 	bl	80048da <HAL_NVIC_EnableIRQ>
}
 800400a:	e01a      	b.n	8004042 <HAL_TIM_Base_MspInit+0x12e>
  else if(htim_base->Instance==TIM11)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a13      	ldr	r2, [pc, #76]	@ (8004060 <HAL_TIM_Base_MspInit+0x14c>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d115      	bne.n	8004042 <HAL_TIM_Base_MspInit+0x12e>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8004016:	2300      	movs	r3, #0
 8004018:	60fb      	str	r3, [r7, #12]
 800401a:	4b0d      	ldr	r3, [pc, #52]	@ (8004050 <HAL_TIM_Base_MspInit+0x13c>)
 800401c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800401e:	4a0c      	ldr	r2, [pc, #48]	@ (8004050 <HAL_TIM_Base_MspInit+0x13c>)
 8004020:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004024:	6453      	str	r3, [r2, #68]	@ 0x44
 8004026:	4b0a      	ldr	r3, [pc, #40]	@ (8004050 <HAL_TIM_Base_MspInit+0x13c>)
 8004028:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800402a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800402e:	60fb      	str	r3, [r7, #12]
 8004030:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8004032:	2200      	movs	r2, #0
 8004034:	2100      	movs	r1, #0
 8004036:	201a      	movs	r0, #26
 8004038:	f000 fc33 	bl	80048a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 800403c:	201a      	movs	r0, #26
 800403e:	f000 fc4c 	bl	80048da <HAL_NVIC_EnableIRQ>
}
 8004042:	bf00      	nop
 8004044:	3720      	adds	r7, #32
 8004046:	46bd      	mov	sp, r7
 8004048:	bd80      	pop	{r7, pc}
 800404a:	bf00      	nop
 800404c:	40001000 	.word	0x40001000
 8004050:	40023800 	.word	0x40023800
 8004054:	40010400 	.word	0x40010400
 8004058:	40014000 	.word	0x40014000
 800405c:	40014400 	.word	0x40014400
 8004060:	40014800 	.word	0x40014800

08004064 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b08a      	sub	sp, #40	@ 0x28
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800406c:	f107 0314 	add.w	r3, r7, #20
 8004070:	2200      	movs	r2, #0
 8004072:	601a      	str	r2, [r3, #0]
 8004074:	605a      	str	r2, [r3, #4]
 8004076:	609a      	str	r2, [r3, #8]
 8004078:	60da      	str	r2, [r3, #12]
 800407a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4a36      	ldr	r2, [pc, #216]	@ (800415c <HAL_TIM_MspPostInit+0xf8>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d11f      	bne.n	80040c6 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004086:	2300      	movs	r3, #0
 8004088:	613b      	str	r3, [r7, #16]
 800408a:	4b35      	ldr	r3, [pc, #212]	@ (8004160 <HAL_TIM_MspPostInit+0xfc>)
 800408c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800408e:	4a34      	ldr	r2, [pc, #208]	@ (8004160 <HAL_TIM_MspPostInit+0xfc>)
 8004090:	f043 0310 	orr.w	r3, r3, #16
 8004094:	6313      	str	r3, [r2, #48]	@ 0x30
 8004096:	4b32      	ldr	r3, [pc, #200]	@ (8004160 <HAL_TIM_MspPostInit+0xfc>)
 8004098:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800409a:	f003 0310 	and.w	r3, r3, #16
 800409e:	613b      	str	r3, [r7, #16]
 80040a0:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = PWM_L_Pin;
 80040a2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80040a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040a8:	2302      	movs	r3, #2
 80040aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040ac:	2300      	movs	r3, #0
 80040ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040b0:	2300      	movs	r3, #0
 80040b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80040b4:	2301      	movs	r3, #1
 80040b6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(PWM_L_GPIO_Port, &GPIO_InitStruct);
 80040b8:	f107 0314 	add.w	r3, r7, #20
 80040bc:	4619      	mov	r1, r3
 80040be:	4829      	ldr	r0, [pc, #164]	@ (8004164 <HAL_TIM_MspPostInit+0x100>)
 80040c0:	f000 fc56 	bl	8004970 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 80040c4:	e046      	b.n	8004154 <HAL_TIM_MspPostInit+0xf0>
  else if(htim->Instance==TIM2)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040ce:	d11e      	bne.n	800410e <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80040d0:	2300      	movs	r3, #0
 80040d2:	60fb      	str	r3, [r7, #12]
 80040d4:	4b22      	ldr	r3, [pc, #136]	@ (8004160 <HAL_TIM_MspPostInit+0xfc>)
 80040d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040d8:	4a21      	ldr	r2, [pc, #132]	@ (8004160 <HAL_TIM_MspPostInit+0xfc>)
 80040da:	f043 0301 	orr.w	r3, r3, #1
 80040de:	6313      	str	r3, [r2, #48]	@ 0x30
 80040e0:	4b1f      	ldr	r3, [pc, #124]	@ (8004160 <HAL_TIM_MspPostInit+0xfc>)
 80040e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040e4:	f003 0301 	and.w	r3, r3, #1
 80040e8:	60fb      	str	r3, [r7, #12]
 80040ea:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM_R_Pin;
 80040ec:	2320      	movs	r3, #32
 80040ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040f0:	2302      	movs	r3, #2
 80040f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040f4:	2300      	movs	r3, #0
 80040f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040f8:	2300      	movs	r3, #0
 80040fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80040fc:	2301      	movs	r3, #1
 80040fe:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(PWM_R_GPIO_Port, &GPIO_InitStruct);
 8004100:	f107 0314 	add.w	r3, r7, #20
 8004104:	4619      	mov	r1, r3
 8004106:	4818      	ldr	r0, [pc, #96]	@ (8004168 <HAL_TIM_MspPostInit+0x104>)
 8004108:	f000 fc32 	bl	8004970 <HAL_GPIO_Init>
}
 800410c:	e022      	b.n	8004154 <HAL_TIM_MspPostInit+0xf0>
  else if(htim->Instance==TIM5)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4a16      	ldr	r2, [pc, #88]	@ (800416c <HAL_TIM_MspPostInit+0x108>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d11d      	bne.n	8004154 <HAL_TIM_MspPostInit+0xf0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004118:	2300      	movs	r3, #0
 800411a:	60bb      	str	r3, [r7, #8]
 800411c:	4b10      	ldr	r3, [pc, #64]	@ (8004160 <HAL_TIM_MspPostInit+0xfc>)
 800411e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004120:	4a0f      	ldr	r2, [pc, #60]	@ (8004160 <HAL_TIM_MspPostInit+0xfc>)
 8004122:	f043 0301 	orr.w	r3, r3, #1
 8004126:	6313      	str	r3, [r2, #48]	@ 0x30
 8004128:	4b0d      	ldr	r3, [pc, #52]	@ (8004160 <HAL_TIM_MspPostInit+0xfc>)
 800412a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800412c:	f003 0301 	and.w	r3, r3, #1
 8004130:	60bb      	str	r3, [r7, #8]
 8004132:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PULSE_STEPPER_Pin;
 8004134:	2301      	movs	r3, #1
 8004136:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004138:	2302      	movs	r3, #2
 800413a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800413c:	2300      	movs	r3, #0
 800413e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004140:	2300      	movs	r3, #0
 8004142:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8004144:	2302      	movs	r3, #2
 8004146:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(PULSE_STEPPER_GPIO_Port, &GPIO_InitStruct);
 8004148:	f107 0314 	add.w	r3, r7, #20
 800414c:	4619      	mov	r1, r3
 800414e:	4806      	ldr	r0, [pc, #24]	@ (8004168 <HAL_TIM_MspPostInit+0x104>)
 8004150:	f000 fc0e 	bl	8004970 <HAL_GPIO_Init>
}
 8004154:	bf00      	nop
 8004156:	3728      	adds	r7, #40	@ 0x28
 8004158:	46bd      	mov	sp, r7
 800415a:	bd80      	pop	{r7, pc}
 800415c:	40010000 	.word	0x40010000
 8004160:	40023800 	.word	0x40023800
 8004164:	40021000 	.word	0x40021000
 8004168:	40020000 	.word	0x40020000
 800416c:	40000c00 	.word	0x40000c00

08004170 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b08c      	sub	sp, #48	@ 0x30
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004178:	f107 031c 	add.w	r3, r7, #28
 800417c:	2200      	movs	r2, #0
 800417e:	601a      	str	r2, [r3, #0]
 8004180:	605a      	str	r2, [r3, #4]
 8004182:	609a      	str	r2, [r3, #8]
 8004184:	60da      	str	r2, [r3, #12]
 8004186:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4a32      	ldr	r2, [pc, #200]	@ (8004258 <HAL_UART_MspInit+0xe8>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d12d      	bne.n	80041ee <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004192:	2300      	movs	r3, #0
 8004194:	61bb      	str	r3, [r7, #24]
 8004196:	4b31      	ldr	r3, [pc, #196]	@ (800425c <HAL_UART_MspInit+0xec>)
 8004198:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800419a:	4a30      	ldr	r2, [pc, #192]	@ (800425c <HAL_UART_MspInit+0xec>)
 800419c:	f043 0310 	orr.w	r3, r3, #16
 80041a0:	6453      	str	r3, [r2, #68]	@ 0x44
 80041a2:	4b2e      	ldr	r3, [pc, #184]	@ (800425c <HAL_UART_MspInit+0xec>)
 80041a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041a6:	f003 0310 	and.w	r3, r3, #16
 80041aa:	61bb      	str	r3, [r7, #24]
 80041ac:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80041ae:	2300      	movs	r3, #0
 80041b0:	617b      	str	r3, [r7, #20]
 80041b2:	4b2a      	ldr	r3, [pc, #168]	@ (800425c <HAL_UART_MspInit+0xec>)
 80041b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041b6:	4a29      	ldr	r2, [pc, #164]	@ (800425c <HAL_UART_MspInit+0xec>)
 80041b8:	f043 0301 	orr.w	r3, r3, #1
 80041bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80041be:	4b27      	ldr	r3, [pc, #156]	@ (800425c <HAL_UART_MspInit+0xec>)
 80041c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041c2:	f003 0301 	and.w	r3, r3, #1
 80041c6:	617b      	str	r3, [r7, #20]
 80041c8:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = TX_ESP32_Pin|RX_ESP32_Pin;
 80041ca:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80041ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041d0:	2302      	movs	r3, #2
 80041d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041d4:	2300      	movs	r3, #0
 80041d6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80041d8:	2303      	movs	r3, #3
 80041da:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80041dc:	2307      	movs	r3, #7
 80041de:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80041e0:	f107 031c 	add.w	r3, r7, #28
 80041e4:	4619      	mov	r1, r3
 80041e6:	481e      	ldr	r0, [pc, #120]	@ (8004260 <HAL_UART_MspInit+0xf0>)
 80041e8:	f000 fbc2 	bl	8004970 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80041ec:	e030      	b.n	8004250 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART2)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4a1c      	ldr	r2, [pc, #112]	@ (8004264 <HAL_UART_MspInit+0xf4>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d12b      	bne.n	8004250 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 80041f8:	2300      	movs	r3, #0
 80041fa:	613b      	str	r3, [r7, #16]
 80041fc:	4b17      	ldr	r3, [pc, #92]	@ (800425c <HAL_UART_MspInit+0xec>)
 80041fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004200:	4a16      	ldr	r2, [pc, #88]	@ (800425c <HAL_UART_MspInit+0xec>)
 8004202:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004206:	6413      	str	r3, [r2, #64]	@ 0x40
 8004208:	4b14      	ldr	r3, [pc, #80]	@ (800425c <HAL_UART_MspInit+0xec>)
 800420a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800420c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004210:	613b      	str	r3, [r7, #16]
 8004212:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004214:	2300      	movs	r3, #0
 8004216:	60fb      	str	r3, [r7, #12]
 8004218:	4b10      	ldr	r3, [pc, #64]	@ (800425c <HAL_UART_MspInit+0xec>)
 800421a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800421c:	4a0f      	ldr	r2, [pc, #60]	@ (800425c <HAL_UART_MspInit+0xec>)
 800421e:	f043 0301 	orr.w	r3, r3, #1
 8004222:	6313      	str	r3, [r2, #48]	@ 0x30
 8004224:	4b0d      	ldr	r3, [pc, #52]	@ (800425c <HAL_UART_MspInit+0xec>)
 8004226:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004228:	f003 0301 	and.w	r3, r3, #1
 800422c:	60fb      	str	r3, [r7, #12]
 800422e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TX_HC05_Pin|RX_HC05_Pin;
 8004230:	230c      	movs	r3, #12
 8004232:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004234:	2302      	movs	r3, #2
 8004236:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004238:	2300      	movs	r3, #0
 800423a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800423c:	2303      	movs	r3, #3
 800423e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004240:	2307      	movs	r3, #7
 8004242:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004244:	f107 031c 	add.w	r3, r7, #28
 8004248:	4619      	mov	r1, r3
 800424a:	4805      	ldr	r0, [pc, #20]	@ (8004260 <HAL_UART_MspInit+0xf0>)
 800424c:	f000 fb90 	bl	8004970 <HAL_GPIO_Init>
}
 8004250:	bf00      	nop
 8004252:	3730      	adds	r7, #48	@ 0x30
 8004254:	46bd      	mov	sp, r7
 8004256:	bd80      	pop	{r7, pc}
 8004258:	40011000 	.word	0x40011000
 800425c:	40023800 	.word	0x40023800
 8004260:	40020000 	.word	0x40020000
 8004264:	40004400 	.word	0x40004400

08004268 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004268:	b480      	push	{r7}
 800426a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800426c:	bf00      	nop
 800426e:	e7fd      	b.n	800426c <NMI_Handler+0x4>

08004270 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004270:	b480      	push	{r7}
 8004272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004274:	bf00      	nop
 8004276:	e7fd      	b.n	8004274 <HardFault_Handler+0x4>

08004278 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004278:	b480      	push	{r7}
 800427a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800427c:	bf00      	nop
 800427e:	e7fd      	b.n	800427c <MemManage_Handler+0x4>

08004280 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004280:	b480      	push	{r7}
 8004282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004284:	bf00      	nop
 8004286:	e7fd      	b.n	8004284 <BusFault_Handler+0x4>

08004288 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004288:	b480      	push	{r7}
 800428a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800428c:	bf00      	nop
 800428e:	e7fd      	b.n	800428c <UsageFault_Handler+0x4>

08004290 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004290:	b480      	push	{r7}
 8004292:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004294:	bf00      	nop
 8004296:	46bd      	mov	sp, r7
 8004298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429c:	4770      	bx	lr

0800429e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800429e:	b480      	push	{r7}
 80042a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80042a2:	bf00      	nop
 80042a4:	46bd      	mov	sp, r7
 80042a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042aa:	4770      	bx	lr

080042ac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80042ac:	b480      	push	{r7}
 80042ae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80042b0:	bf00      	nop
 80042b2:	46bd      	mov	sp, r7
 80042b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b8:	4770      	bx	lr

080042ba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80042ba:	b580      	push	{r7, lr}
 80042bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80042be:	f000 f9d1 	bl	8004664 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80042c2:	bf00      	nop
 80042c4:	bd80      	pop	{r7, pc}
	...

080042c8 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80042cc:	4803      	ldr	r0, [pc, #12]	@ (80042dc <TIM1_BRK_TIM9_IRQHandler+0x14>)
 80042ce:	f003 fc67 	bl	8007ba0 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim9);
 80042d2:	4803      	ldr	r0, [pc, #12]	@ (80042e0 <TIM1_BRK_TIM9_IRQHandler+0x18>)
 80042d4:	f003 fc64 	bl	8007ba0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 80042d8:	bf00      	nop
 80042da:	bd80      	pop	{r7, pc}
 80042dc:	20000354 	.word	0x20000354
 80042e0:	2000054c 	.word	0x2000054c

080042e4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80042e8:	4803      	ldr	r0, [pc, #12]	@ (80042f8 <TIM1_UP_TIM10_IRQHandler+0x14>)
 80042ea:	f003 fc59 	bl	8007ba0 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 80042ee:	4803      	ldr	r0, [pc, #12]	@ (80042fc <TIM1_UP_TIM10_IRQHandler+0x18>)
 80042f0:	f003 fc56 	bl	8007ba0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80042f4:	bf00      	nop
 80042f6:	bd80      	pop	{r7, pc}
 80042f8:	20000354 	.word	0x20000354
 80042fc:	20000594 	.word	0x20000594

08004300 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004304:	4803      	ldr	r0, [pc, #12]	@ (8004314 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 8004306:	f003 fc4b 	bl	8007ba0 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 800430a:	4803      	ldr	r0, [pc, #12]	@ (8004318 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 800430c:	f003 fc48 	bl	8007ba0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8004310:	bf00      	nop
 8004312:	bd80      	pop	{r7, pc}
 8004314:	20000354 	.word	0x20000354
 8004318:	200005dc 	.word	0x200005dc

0800431c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004320:	4802      	ldr	r0, [pc, #8]	@ (800432c <TIM2_IRQHandler+0x10>)
 8004322:	f003 fc3d 	bl	8007ba0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004326:	bf00      	nop
 8004328:	bd80      	pop	{r7, pc}
 800432a:	bf00      	nop
 800432c:	2000039c 	.word	0x2000039c

08004330 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8004334:	4802      	ldr	r0, [pc, #8]	@ (8004340 <TIM3_IRQHandler+0x10>)
 8004336:	f003 fc33 	bl	8007ba0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800433a:	bf00      	nop
 800433c:	bd80      	pop	{r7, pc}
 800433e:	bf00      	nop
 8004340:	200003e4 	.word	0x200003e4

08004344 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8004348:	4802      	ldr	r0, [pc, #8]	@ (8004354 <TIM4_IRQHandler+0x10>)
 800434a:	f003 fc29 	bl	8007ba0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800434e:	bf00      	nop
 8004350:	bd80      	pop	{r7, pc}
 8004352:	bf00      	nop
 8004354:	2000042c 	.word	0x2000042c

08004358 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800435c:	4802      	ldr	r0, [pc, #8]	@ (8004368 <I2C1_EV_IRQHandler+0x10>)
 800435e:	f000 ff14 	bl	800518a <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8004362:	bf00      	nop
 8004364:	bd80      	pop	{r7, pc}
 8004366:	bf00      	nop
 8004368:	20000254 	.word	0x20000254

0800436c <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8004370:	4802      	ldr	r0, [pc, #8]	@ (800437c <TIM8_BRK_TIM12_IRQHandler+0x10>)
 8004372:	f003 fc15 	bl	8007ba0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 8004376:	bf00      	nop
 8004378:	bd80      	pop	{r7, pc}
 800437a:	bf00      	nop
 800437c:	20000504 	.word	0x20000504

08004380 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8004384:	4802      	ldr	r0, [pc, #8]	@ (8004390 <TIM8_UP_TIM13_IRQHandler+0x10>)
 8004386:	f003 fc0b 	bl	8007ba0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 800438a:	bf00      	nop
 800438c:	bd80      	pop	{r7, pc}
 800438e:	bf00      	nop
 8004390:	20000504 	.word	0x20000504

08004394 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8004398:	4802      	ldr	r0, [pc, #8]	@ (80043a4 <TIM5_IRQHandler+0x10>)
 800439a:	f003 fc01 	bl	8007ba0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800439e:	bf00      	nop
 80043a0:	bd80      	pop	{r7, pc}
 80043a2:	bf00      	nop
 80043a4:	20000474 	.word	0x20000474

080043a8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80043ac:	4802      	ldr	r0, [pc, #8]	@ (80043b8 <TIM6_DAC_IRQHandler+0x10>)
 80043ae:	f003 fbf7 	bl	8007ba0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80043b2:	bf00      	nop
 80043b4:	bd80      	pop	{r7, pc}
 80043b6:	bf00      	nop
 80043b8:	200004bc 	.word	0x200004bc

080043bc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80043bc:	b480      	push	{r7}
 80043be:	af00      	add	r7, sp, #0
  return 1;
 80043c0:	2301      	movs	r3, #1
}
 80043c2:	4618      	mov	r0, r3
 80043c4:	46bd      	mov	sp, r7
 80043c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ca:	4770      	bx	lr

080043cc <_kill>:

int _kill(int pid, int sig)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b082      	sub	sp, #8
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
 80043d4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80043d6:	f005 fc7d 	bl	8009cd4 <__errno>
 80043da:	4603      	mov	r3, r0
 80043dc:	2216      	movs	r2, #22
 80043de:	601a      	str	r2, [r3, #0]
  return -1;
 80043e0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80043e4:	4618      	mov	r0, r3
 80043e6:	3708      	adds	r7, #8
 80043e8:	46bd      	mov	sp, r7
 80043ea:	bd80      	pop	{r7, pc}

080043ec <_exit>:

void _exit (int status)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b082      	sub	sp, #8
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80043f4:	f04f 31ff 	mov.w	r1, #4294967295
 80043f8:	6878      	ldr	r0, [r7, #4]
 80043fa:	f7ff ffe7 	bl	80043cc <_kill>
  while (1) {}    /* Make sure we hang here */
 80043fe:	bf00      	nop
 8004400:	e7fd      	b.n	80043fe <_exit+0x12>

08004402 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004402:	b580      	push	{r7, lr}
 8004404:	b086      	sub	sp, #24
 8004406:	af00      	add	r7, sp, #0
 8004408:	60f8      	str	r0, [r7, #12]
 800440a:	60b9      	str	r1, [r7, #8]
 800440c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800440e:	2300      	movs	r3, #0
 8004410:	617b      	str	r3, [r7, #20]
 8004412:	e00a      	b.n	800442a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004414:	f3af 8000 	nop.w
 8004418:	4601      	mov	r1, r0
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	1c5a      	adds	r2, r3, #1
 800441e:	60ba      	str	r2, [r7, #8]
 8004420:	b2ca      	uxtb	r2, r1
 8004422:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004424:	697b      	ldr	r3, [r7, #20]
 8004426:	3301      	adds	r3, #1
 8004428:	617b      	str	r3, [r7, #20]
 800442a:	697a      	ldr	r2, [r7, #20]
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	429a      	cmp	r2, r3
 8004430:	dbf0      	blt.n	8004414 <_read+0x12>
  }

  return len;
 8004432:	687b      	ldr	r3, [r7, #4]
}
 8004434:	4618      	mov	r0, r3
 8004436:	3718      	adds	r7, #24
 8004438:	46bd      	mov	sp, r7
 800443a:	bd80      	pop	{r7, pc}

0800443c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b086      	sub	sp, #24
 8004440:	af00      	add	r7, sp, #0
 8004442:	60f8      	str	r0, [r7, #12]
 8004444:	60b9      	str	r1, [r7, #8]
 8004446:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004448:	2300      	movs	r3, #0
 800444a:	617b      	str	r3, [r7, #20]
 800444c:	e009      	b.n	8004462 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	1c5a      	adds	r2, r3, #1
 8004452:	60ba      	str	r2, [r7, #8]
 8004454:	781b      	ldrb	r3, [r3, #0]
 8004456:	4618      	mov	r0, r3
 8004458:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800445c:	697b      	ldr	r3, [r7, #20]
 800445e:	3301      	adds	r3, #1
 8004460:	617b      	str	r3, [r7, #20]
 8004462:	697a      	ldr	r2, [r7, #20]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	429a      	cmp	r2, r3
 8004468:	dbf1      	blt.n	800444e <_write+0x12>
  }
  return len;
 800446a:	687b      	ldr	r3, [r7, #4]
}
 800446c:	4618      	mov	r0, r3
 800446e:	3718      	adds	r7, #24
 8004470:	46bd      	mov	sp, r7
 8004472:	bd80      	pop	{r7, pc}

08004474 <_close>:

int _close(int file)
{
 8004474:	b480      	push	{r7}
 8004476:	b083      	sub	sp, #12
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800447c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004480:	4618      	mov	r0, r3
 8004482:	370c      	adds	r7, #12
 8004484:	46bd      	mov	sp, r7
 8004486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448a:	4770      	bx	lr

0800448c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800448c:	b480      	push	{r7}
 800448e:	b083      	sub	sp, #12
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
 8004494:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800449c:	605a      	str	r2, [r3, #4]
  return 0;
 800449e:	2300      	movs	r3, #0
}
 80044a0:	4618      	mov	r0, r3
 80044a2:	370c      	adds	r7, #12
 80044a4:	46bd      	mov	sp, r7
 80044a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044aa:	4770      	bx	lr

080044ac <_isatty>:

int _isatty(int file)
{
 80044ac:	b480      	push	{r7}
 80044ae:	b083      	sub	sp, #12
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80044b4:	2301      	movs	r3, #1
}
 80044b6:	4618      	mov	r0, r3
 80044b8:	370c      	adds	r7, #12
 80044ba:	46bd      	mov	sp, r7
 80044bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c0:	4770      	bx	lr

080044c2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80044c2:	b480      	push	{r7}
 80044c4:	b085      	sub	sp, #20
 80044c6:	af00      	add	r7, sp, #0
 80044c8:	60f8      	str	r0, [r7, #12]
 80044ca:	60b9      	str	r1, [r7, #8]
 80044cc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80044ce:	2300      	movs	r3, #0
}
 80044d0:	4618      	mov	r0, r3
 80044d2:	3714      	adds	r7, #20
 80044d4:	46bd      	mov	sp, r7
 80044d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044da:	4770      	bx	lr

080044dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b086      	sub	sp, #24
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80044e4:	4a14      	ldr	r2, [pc, #80]	@ (8004538 <_sbrk+0x5c>)
 80044e6:	4b15      	ldr	r3, [pc, #84]	@ (800453c <_sbrk+0x60>)
 80044e8:	1ad3      	subs	r3, r2, r3
 80044ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80044ec:	697b      	ldr	r3, [r7, #20]
 80044ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80044f0:	4b13      	ldr	r3, [pc, #76]	@ (8004540 <_sbrk+0x64>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d102      	bne.n	80044fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80044f8:	4b11      	ldr	r3, [pc, #68]	@ (8004540 <_sbrk+0x64>)
 80044fa:	4a12      	ldr	r2, [pc, #72]	@ (8004544 <_sbrk+0x68>)
 80044fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80044fe:	4b10      	ldr	r3, [pc, #64]	@ (8004540 <_sbrk+0x64>)
 8004500:	681a      	ldr	r2, [r3, #0]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	4413      	add	r3, r2
 8004506:	693a      	ldr	r2, [r7, #16]
 8004508:	429a      	cmp	r2, r3
 800450a:	d207      	bcs.n	800451c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800450c:	f005 fbe2 	bl	8009cd4 <__errno>
 8004510:	4603      	mov	r3, r0
 8004512:	220c      	movs	r2, #12
 8004514:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004516:	f04f 33ff 	mov.w	r3, #4294967295
 800451a:	e009      	b.n	8004530 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800451c:	4b08      	ldr	r3, [pc, #32]	@ (8004540 <_sbrk+0x64>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004522:	4b07      	ldr	r3, [pc, #28]	@ (8004540 <_sbrk+0x64>)
 8004524:	681a      	ldr	r2, [r3, #0]
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	4413      	add	r3, r2
 800452a:	4a05      	ldr	r2, [pc, #20]	@ (8004540 <_sbrk+0x64>)
 800452c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800452e:	68fb      	ldr	r3, [r7, #12]
}
 8004530:	4618      	mov	r0, r3
 8004532:	3718      	adds	r7, #24
 8004534:	46bd      	mov	sp, r7
 8004536:	bd80      	pop	{r7, pc}
 8004538:	20020000 	.word	0x20020000
 800453c:	00000400 	.word	0x00000400
 8004540:	2000c69c 	.word	0x2000c69c
 8004544:	2000c7f0 	.word	0x2000c7f0

08004548 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004548:	b480      	push	{r7}
 800454a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800454c:	4b06      	ldr	r3, [pc, #24]	@ (8004568 <SystemInit+0x20>)
 800454e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004552:	4a05      	ldr	r2, [pc, #20]	@ (8004568 <SystemInit+0x20>)
 8004554:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004558:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800455c:	bf00      	nop
 800455e:	46bd      	mov	sp, r7
 8004560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004564:	4770      	bx	lr
 8004566:	bf00      	nop
 8004568:	e000ed00 	.word	0xe000ed00

0800456c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800456c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80045a4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8004570:	f7ff ffea 	bl	8004548 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004574:	480c      	ldr	r0, [pc, #48]	@ (80045a8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004576:	490d      	ldr	r1, [pc, #52]	@ (80045ac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004578:	4a0d      	ldr	r2, [pc, #52]	@ (80045b0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800457a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800457c:	e002      	b.n	8004584 <LoopCopyDataInit>

0800457e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800457e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004580:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004582:	3304      	adds	r3, #4

08004584 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004584:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004586:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004588:	d3f9      	bcc.n	800457e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800458a:	4a0a      	ldr	r2, [pc, #40]	@ (80045b4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800458c:	4c0a      	ldr	r4, [pc, #40]	@ (80045b8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800458e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004590:	e001      	b.n	8004596 <LoopFillZerobss>

08004592 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004592:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004594:	3204      	adds	r2, #4

08004596 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004596:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004598:	d3fb      	bcc.n	8004592 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800459a:	f005 fba1 	bl	8009ce0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800459e:	f7fd f8fb 	bl	8001798 <main>
  bx  lr    
 80045a2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80045a4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80045a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80045ac:	20000230 	.word	0x20000230
  ldr r2, =_sidata
 80045b0:	0800e838 	.word	0x0800e838
  ldr r2, =_sbss
 80045b4:	20000230 	.word	0x20000230
  ldr r4, =_ebss
 80045b8:	2000c7f0 	.word	0x2000c7f0

080045bc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80045bc:	e7fe      	b.n	80045bc <ADC_IRQHandler>
	...

080045c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80045c4:	4b0e      	ldr	r3, [pc, #56]	@ (8004600 <HAL_Init+0x40>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4a0d      	ldr	r2, [pc, #52]	@ (8004600 <HAL_Init+0x40>)
 80045ca:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80045ce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80045d0:	4b0b      	ldr	r3, [pc, #44]	@ (8004600 <HAL_Init+0x40>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4a0a      	ldr	r2, [pc, #40]	@ (8004600 <HAL_Init+0x40>)
 80045d6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80045da:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80045dc:	4b08      	ldr	r3, [pc, #32]	@ (8004600 <HAL_Init+0x40>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4a07      	ldr	r2, [pc, #28]	@ (8004600 <HAL_Init+0x40>)
 80045e2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80045e6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80045e8:	2003      	movs	r0, #3
 80045ea:	f000 f94f 	bl	800488c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80045ee:	200f      	movs	r0, #15
 80045f0:	f000 f808 	bl	8004604 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80045f4:	f7ff fa9a 	bl	8003b2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80045f8:	2300      	movs	r3, #0
}
 80045fa:	4618      	mov	r0, r3
 80045fc:	bd80      	pop	{r7, pc}
 80045fe:	bf00      	nop
 8004600:	40023c00 	.word	0x40023c00

08004604 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b082      	sub	sp, #8
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800460c:	4b12      	ldr	r3, [pc, #72]	@ (8004658 <HAL_InitTick+0x54>)
 800460e:	681a      	ldr	r2, [r3, #0]
 8004610:	4b12      	ldr	r3, [pc, #72]	@ (800465c <HAL_InitTick+0x58>)
 8004612:	781b      	ldrb	r3, [r3, #0]
 8004614:	4619      	mov	r1, r3
 8004616:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800461a:	fbb3 f3f1 	udiv	r3, r3, r1
 800461e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004622:	4618      	mov	r0, r3
 8004624:	f000 f967 	bl	80048f6 <HAL_SYSTICK_Config>
 8004628:	4603      	mov	r3, r0
 800462a:	2b00      	cmp	r3, #0
 800462c:	d001      	beq.n	8004632 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800462e:	2301      	movs	r3, #1
 8004630:	e00e      	b.n	8004650 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2b0f      	cmp	r3, #15
 8004636:	d80a      	bhi.n	800464e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004638:	2200      	movs	r2, #0
 800463a:	6879      	ldr	r1, [r7, #4]
 800463c:	f04f 30ff 	mov.w	r0, #4294967295
 8004640:	f000 f92f 	bl	80048a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004644:	4a06      	ldr	r2, [pc, #24]	@ (8004660 <HAL_InitTick+0x5c>)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800464a:	2300      	movs	r3, #0
 800464c:	e000      	b.n	8004650 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800464e:	2301      	movs	r3, #1
}
 8004650:	4618      	mov	r0, r3
 8004652:	3708      	adds	r7, #8
 8004654:	46bd      	mov	sp, r7
 8004656:	bd80      	pop	{r7, pc}
 8004658:	20000048 	.word	0x20000048
 800465c:	20000050 	.word	0x20000050
 8004660:	2000004c 	.word	0x2000004c

08004664 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004664:	b480      	push	{r7}
 8004666:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004668:	4b06      	ldr	r3, [pc, #24]	@ (8004684 <HAL_IncTick+0x20>)
 800466a:	781b      	ldrb	r3, [r3, #0]
 800466c:	461a      	mov	r2, r3
 800466e:	4b06      	ldr	r3, [pc, #24]	@ (8004688 <HAL_IncTick+0x24>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4413      	add	r3, r2
 8004674:	4a04      	ldr	r2, [pc, #16]	@ (8004688 <HAL_IncTick+0x24>)
 8004676:	6013      	str	r3, [r2, #0]
}
 8004678:	bf00      	nop
 800467a:	46bd      	mov	sp, r7
 800467c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004680:	4770      	bx	lr
 8004682:	bf00      	nop
 8004684:	20000050 	.word	0x20000050
 8004688:	2000c6a0 	.word	0x2000c6a0

0800468c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800468c:	b480      	push	{r7}
 800468e:	af00      	add	r7, sp, #0
  return uwTick;
 8004690:	4b03      	ldr	r3, [pc, #12]	@ (80046a0 <HAL_GetTick+0x14>)
 8004692:	681b      	ldr	r3, [r3, #0]
}
 8004694:	4618      	mov	r0, r3
 8004696:	46bd      	mov	sp, r7
 8004698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469c:	4770      	bx	lr
 800469e:	bf00      	nop
 80046a0:	2000c6a0 	.word	0x2000c6a0

080046a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b084      	sub	sp, #16
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80046ac:	f7ff ffee 	bl	800468c <HAL_GetTick>
 80046b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046bc:	d005      	beq.n	80046ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80046be:	4b0a      	ldr	r3, [pc, #40]	@ (80046e8 <HAL_Delay+0x44>)
 80046c0:	781b      	ldrb	r3, [r3, #0]
 80046c2:	461a      	mov	r2, r3
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	4413      	add	r3, r2
 80046c8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80046ca:	bf00      	nop
 80046cc:	f7ff ffde 	bl	800468c <HAL_GetTick>
 80046d0:	4602      	mov	r2, r0
 80046d2:	68bb      	ldr	r3, [r7, #8]
 80046d4:	1ad3      	subs	r3, r2, r3
 80046d6:	68fa      	ldr	r2, [r7, #12]
 80046d8:	429a      	cmp	r2, r3
 80046da:	d8f7      	bhi.n	80046cc <HAL_Delay+0x28>
  {
  }
}
 80046dc:	bf00      	nop
 80046de:	bf00      	nop
 80046e0:	3710      	adds	r7, #16
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bd80      	pop	{r7, pc}
 80046e6:	bf00      	nop
 80046e8:	20000050 	.word	0x20000050

080046ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80046ec:	b480      	push	{r7}
 80046ee:	b085      	sub	sp, #20
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	f003 0307 	and.w	r3, r3, #7
 80046fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80046fc:	4b0c      	ldr	r3, [pc, #48]	@ (8004730 <__NVIC_SetPriorityGrouping+0x44>)
 80046fe:	68db      	ldr	r3, [r3, #12]
 8004700:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004702:	68ba      	ldr	r2, [r7, #8]
 8004704:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004708:	4013      	ands	r3, r2
 800470a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004710:	68bb      	ldr	r3, [r7, #8]
 8004712:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004714:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004718:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800471c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800471e:	4a04      	ldr	r2, [pc, #16]	@ (8004730 <__NVIC_SetPriorityGrouping+0x44>)
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	60d3      	str	r3, [r2, #12]
}
 8004724:	bf00      	nop
 8004726:	3714      	adds	r7, #20
 8004728:	46bd      	mov	sp, r7
 800472a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472e:	4770      	bx	lr
 8004730:	e000ed00 	.word	0xe000ed00

08004734 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004734:	b480      	push	{r7}
 8004736:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004738:	4b04      	ldr	r3, [pc, #16]	@ (800474c <__NVIC_GetPriorityGrouping+0x18>)
 800473a:	68db      	ldr	r3, [r3, #12]
 800473c:	0a1b      	lsrs	r3, r3, #8
 800473e:	f003 0307 	and.w	r3, r3, #7
}
 8004742:	4618      	mov	r0, r3
 8004744:	46bd      	mov	sp, r7
 8004746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474a:	4770      	bx	lr
 800474c:	e000ed00 	.word	0xe000ed00

08004750 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004750:	b480      	push	{r7}
 8004752:	b083      	sub	sp, #12
 8004754:	af00      	add	r7, sp, #0
 8004756:	4603      	mov	r3, r0
 8004758:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800475a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800475e:	2b00      	cmp	r3, #0
 8004760:	db0b      	blt.n	800477a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004762:	79fb      	ldrb	r3, [r7, #7]
 8004764:	f003 021f 	and.w	r2, r3, #31
 8004768:	4907      	ldr	r1, [pc, #28]	@ (8004788 <__NVIC_EnableIRQ+0x38>)
 800476a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800476e:	095b      	lsrs	r3, r3, #5
 8004770:	2001      	movs	r0, #1
 8004772:	fa00 f202 	lsl.w	r2, r0, r2
 8004776:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800477a:	bf00      	nop
 800477c:	370c      	adds	r7, #12
 800477e:	46bd      	mov	sp, r7
 8004780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004784:	4770      	bx	lr
 8004786:	bf00      	nop
 8004788:	e000e100 	.word	0xe000e100

0800478c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800478c:	b480      	push	{r7}
 800478e:	b083      	sub	sp, #12
 8004790:	af00      	add	r7, sp, #0
 8004792:	4603      	mov	r3, r0
 8004794:	6039      	str	r1, [r7, #0]
 8004796:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004798:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800479c:	2b00      	cmp	r3, #0
 800479e:	db0a      	blt.n	80047b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	b2da      	uxtb	r2, r3
 80047a4:	490c      	ldr	r1, [pc, #48]	@ (80047d8 <__NVIC_SetPriority+0x4c>)
 80047a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047aa:	0112      	lsls	r2, r2, #4
 80047ac:	b2d2      	uxtb	r2, r2
 80047ae:	440b      	add	r3, r1
 80047b0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80047b4:	e00a      	b.n	80047cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	b2da      	uxtb	r2, r3
 80047ba:	4908      	ldr	r1, [pc, #32]	@ (80047dc <__NVIC_SetPriority+0x50>)
 80047bc:	79fb      	ldrb	r3, [r7, #7]
 80047be:	f003 030f 	and.w	r3, r3, #15
 80047c2:	3b04      	subs	r3, #4
 80047c4:	0112      	lsls	r2, r2, #4
 80047c6:	b2d2      	uxtb	r2, r2
 80047c8:	440b      	add	r3, r1
 80047ca:	761a      	strb	r2, [r3, #24]
}
 80047cc:	bf00      	nop
 80047ce:	370c      	adds	r7, #12
 80047d0:	46bd      	mov	sp, r7
 80047d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d6:	4770      	bx	lr
 80047d8:	e000e100 	.word	0xe000e100
 80047dc:	e000ed00 	.word	0xe000ed00

080047e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80047e0:	b480      	push	{r7}
 80047e2:	b089      	sub	sp, #36	@ 0x24
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	60f8      	str	r0, [r7, #12]
 80047e8:	60b9      	str	r1, [r7, #8]
 80047ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	f003 0307 	and.w	r3, r3, #7
 80047f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80047f4:	69fb      	ldr	r3, [r7, #28]
 80047f6:	f1c3 0307 	rsb	r3, r3, #7
 80047fa:	2b04      	cmp	r3, #4
 80047fc:	bf28      	it	cs
 80047fe:	2304      	movcs	r3, #4
 8004800:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004802:	69fb      	ldr	r3, [r7, #28]
 8004804:	3304      	adds	r3, #4
 8004806:	2b06      	cmp	r3, #6
 8004808:	d902      	bls.n	8004810 <NVIC_EncodePriority+0x30>
 800480a:	69fb      	ldr	r3, [r7, #28]
 800480c:	3b03      	subs	r3, #3
 800480e:	e000      	b.n	8004812 <NVIC_EncodePriority+0x32>
 8004810:	2300      	movs	r3, #0
 8004812:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004814:	f04f 32ff 	mov.w	r2, #4294967295
 8004818:	69bb      	ldr	r3, [r7, #24]
 800481a:	fa02 f303 	lsl.w	r3, r2, r3
 800481e:	43da      	mvns	r2, r3
 8004820:	68bb      	ldr	r3, [r7, #8]
 8004822:	401a      	ands	r2, r3
 8004824:	697b      	ldr	r3, [r7, #20]
 8004826:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004828:	f04f 31ff 	mov.w	r1, #4294967295
 800482c:	697b      	ldr	r3, [r7, #20]
 800482e:	fa01 f303 	lsl.w	r3, r1, r3
 8004832:	43d9      	mvns	r1, r3
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004838:	4313      	orrs	r3, r2
         );
}
 800483a:	4618      	mov	r0, r3
 800483c:	3724      	adds	r7, #36	@ 0x24
 800483e:	46bd      	mov	sp, r7
 8004840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004844:	4770      	bx	lr
	...

08004848 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b082      	sub	sp, #8
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	3b01      	subs	r3, #1
 8004854:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004858:	d301      	bcc.n	800485e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800485a:	2301      	movs	r3, #1
 800485c:	e00f      	b.n	800487e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800485e:	4a0a      	ldr	r2, [pc, #40]	@ (8004888 <SysTick_Config+0x40>)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	3b01      	subs	r3, #1
 8004864:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004866:	210f      	movs	r1, #15
 8004868:	f04f 30ff 	mov.w	r0, #4294967295
 800486c:	f7ff ff8e 	bl	800478c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004870:	4b05      	ldr	r3, [pc, #20]	@ (8004888 <SysTick_Config+0x40>)
 8004872:	2200      	movs	r2, #0
 8004874:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004876:	4b04      	ldr	r3, [pc, #16]	@ (8004888 <SysTick_Config+0x40>)
 8004878:	2207      	movs	r2, #7
 800487a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800487c:	2300      	movs	r3, #0
}
 800487e:	4618      	mov	r0, r3
 8004880:	3708      	adds	r7, #8
 8004882:	46bd      	mov	sp, r7
 8004884:	bd80      	pop	{r7, pc}
 8004886:	bf00      	nop
 8004888:	e000e010 	.word	0xe000e010

0800488c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b082      	sub	sp, #8
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004894:	6878      	ldr	r0, [r7, #4]
 8004896:	f7ff ff29 	bl	80046ec <__NVIC_SetPriorityGrouping>
}
 800489a:	bf00      	nop
 800489c:	3708      	adds	r7, #8
 800489e:	46bd      	mov	sp, r7
 80048a0:	bd80      	pop	{r7, pc}

080048a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80048a2:	b580      	push	{r7, lr}
 80048a4:	b086      	sub	sp, #24
 80048a6:	af00      	add	r7, sp, #0
 80048a8:	4603      	mov	r3, r0
 80048aa:	60b9      	str	r1, [r7, #8]
 80048ac:	607a      	str	r2, [r7, #4]
 80048ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80048b0:	2300      	movs	r3, #0
 80048b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80048b4:	f7ff ff3e 	bl	8004734 <__NVIC_GetPriorityGrouping>
 80048b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80048ba:	687a      	ldr	r2, [r7, #4]
 80048bc:	68b9      	ldr	r1, [r7, #8]
 80048be:	6978      	ldr	r0, [r7, #20]
 80048c0:	f7ff ff8e 	bl	80047e0 <NVIC_EncodePriority>
 80048c4:	4602      	mov	r2, r0
 80048c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80048ca:	4611      	mov	r1, r2
 80048cc:	4618      	mov	r0, r3
 80048ce:	f7ff ff5d 	bl	800478c <__NVIC_SetPriority>
}
 80048d2:	bf00      	nop
 80048d4:	3718      	adds	r7, #24
 80048d6:	46bd      	mov	sp, r7
 80048d8:	bd80      	pop	{r7, pc}

080048da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80048da:	b580      	push	{r7, lr}
 80048dc:	b082      	sub	sp, #8
 80048de:	af00      	add	r7, sp, #0
 80048e0:	4603      	mov	r3, r0
 80048e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80048e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048e8:	4618      	mov	r0, r3
 80048ea:	f7ff ff31 	bl	8004750 <__NVIC_EnableIRQ>
}
 80048ee:	bf00      	nop
 80048f0:	3708      	adds	r7, #8
 80048f2:	46bd      	mov	sp, r7
 80048f4:	bd80      	pop	{r7, pc}

080048f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80048f6:	b580      	push	{r7, lr}
 80048f8:	b082      	sub	sp, #8
 80048fa:	af00      	add	r7, sp, #0
 80048fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80048fe:	6878      	ldr	r0, [r7, #4]
 8004900:	f7ff ffa2 	bl	8004848 <SysTick_Config>
 8004904:	4603      	mov	r3, r0
}
 8004906:	4618      	mov	r0, r3
 8004908:	3708      	adds	r7, #8
 800490a:	46bd      	mov	sp, r7
 800490c:	bd80      	pop	{r7, pc}

0800490e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800490e:	b480      	push	{r7}
 8004910:	b083      	sub	sp, #12
 8004912:	af00      	add	r7, sp, #0
 8004914:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800491c:	b2db      	uxtb	r3, r3
 800491e:	2b02      	cmp	r3, #2
 8004920:	d004      	beq.n	800492c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2280      	movs	r2, #128	@ 0x80
 8004926:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004928:	2301      	movs	r3, #1
 800492a:	e00c      	b.n	8004946 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2205      	movs	r2, #5
 8004930:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	681a      	ldr	r2, [r3, #0]
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f022 0201 	bic.w	r2, r2, #1
 8004942:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004944:	2300      	movs	r3, #0
}
 8004946:	4618      	mov	r0, r3
 8004948:	370c      	adds	r7, #12
 800494a:	46bd      	mov	sp, r7
 800494c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004950:	4770      	bx	lr

08004952 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8004952:	b480      	push	{r7}
 8004954:	b083      	sub	sp, #12
 8004956:	af00      	add	r7, sp, #0
 8004958:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004960:	b2db      	uxtb	r3, r3
}
 8004962:	4618      	mov	r0, r3
 8004964:	370c      	adds	r7, #12
 8004966:	46bd      	mov	sp, r7
 8004968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496c:	4770      	bx	lr
	...

08004970 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004970:	b480      	push	{r7}
 8004972:	b089      	sub	sp, #36	@ 0x24
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
 8004978:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800497a:	2300      	movs	r3, #0
 800497c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800497e:	2300      	movs	r3, #0
 8004980:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004982:	2300      	movs	r3, #0
 8004984:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004986:	2300      	movs	r3, #0
 8004988:	61fb      	str	r3, [r7, #28]
 800498a:	e16b      	b.n	8004c64 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800498c:	2201      	movs	r2, #1
 800498e:	69fb      	ldr	r3, [r7, #28]
 8004990:	fa02 f303 	lsl.w	r3, r2, r3
 8004994:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	697a      	ldr	r2, [r7, #20]
 800499c:	4013      	ands	r3, r2
 800499e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80049a0:	693a      	ldr	r2, [r7, #16]
 80049a2:	697b      	ldr	r3, [r7, #20]
 80049a4:	429a      	cmp	r2, r3
 80049a6:	f040 815a 	bne.w	8004c5e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	f003 0303 	and.w	r3, r3, #3
 80049b2:	2b01      	cmp	r3, #1
 80049b4:	d005      	beq.n	80049c2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80049be:	2b02      	cmp	r3, #2
 80049c0:	d130      	bne.n	8004a24 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	689b      	ldr	r3, [r3, #8]
 80049c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80049c8:	69fb      	ldr	r3, [r7, #28]
 80049ca:	005b      	lsls	r3, r3, #1
 80049cc:	2203      	movs	r2, #3
 80049ce:	fa02 f303 	lsl.w	r3, r2, r3
 80049d2:	43db      	mvns	r3, r3
 80049d4:	69ba      	ldr	r2, [r7, #24]
 80049d6:	4013      	ands	r3, r2
 80049d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	68da      	ldr	r2, [r3, #12]
 80049de:	69fb      	ldr	r3, [r7, #28]
 80049e0:	005b      	lsls	r3, r3, #1
 80049e2:	fa02 f303 	lsl.w	r3, r2, r3
 80049e6:	69ba      	ldr	r2, [r7, #24]
 80049e8:	4313      	orrs	r3, r2
 80049ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	69ba      	ldr	r2, [r7, #24]
 80049f0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80049f8:	2201      	movs	r2, #1
 80049fa:	69fb      	ldr	r3, [r7, #28]
 80049fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004a00:	43db      	mvns	r3, r3
 8004a02:	69ba      	ldr	r2, [r7, #24]
 8004a04:	4013      	ands	r3, r2
 8004a06:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	685b      	ldr	r3, [r3, #4]
 8004a0c:	091b      	lsrs	r3, r3, #4
 8004a0e:	f003 0201 	and.w	r2, r3, #1
 8004a12:	69fb      	ldr	r3, [r7, #28]
 8004a14:	fa02 f303 	lsl.w	r3, r2, r3
 8004a18:	69ba      	ldr	r2, [r7, #24]
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	69ba      	ldr	r2, [r7, #24]
 8004a22:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	685b      	ldr	r3, [r3, #4]
 8004a28:	f003 0303 	and.w	r3, r3, #3
 8004a2c:	2b03      	cmp	r3, #3
 8004a2e:	d017      	beq.n	8004a60 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	68db      	ldr	r3, [r3, #12]
 8004a34:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004a36:	69fb      	ldr	r3, [r7, #28]
 8004a38:	005b      	lsls	r3, r3, #1
 8004a3a:	2203      	movs	r2, #3
 8004a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a40:	43db      	mvns	r3, r3
 8004a42:	69ba      	ldr	r2, [r7, #24]
 8004a44:	4013      	ands	r3, r2
 8004a46:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	689a      	ldr	r2, [r3, #8]
 8004a4c:	69fb      	ldr	r3, [r7, #28]
 8004a4e:	005b      	lsls	r3, r3, #1
 8004a50:	fa02 f303 	lsl.w	r3, r2, r3
 8004a54:	69ba      	ldr	r2, [r7, #24]
 8004a56:	4313      	orrs	r3, r2
 8004a58:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	69ba      	ldr	r2, [r7, #24]
 8004a5e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	f003 0303 	and.w	r3, r3, #3
 8004a68:	2b02      	cmp	r3, #2
 8004a6a:	d123      	bne.n	8004ab4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004a6c:	69fb      	ldr	r3, [r7, #28]
 8004a6e:	08da      	lsrs	r2, r3, #3
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	3208      	adds	r2, #8
 8004a74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a78:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004a7a:	69fb      	ldr	r3, [r7, #28]
 8004a7c:	f003 0307 	and.w	r3, r3, #7
 8004a80:	009b      	lsls	r3, r3, #2
 8004a82:	220f      	movs	r2, #15
 8004a84:	fa02 f303 	lsl.w	r3, r2, r3
 8004a88:	43db      	mvns	r3, r3
 8004a8a:	69ba      	ldr	r2, [r7, #24]
 8004a8c:	4013      	ands	r3, r2
 8004a8e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	691a      	ldr	r2, [r3, #16]
 8004a94:	69fb      	ldr	r3, [r7, #28]
 8004a96:	f003 0307 	and.w	r3, r3, #7
 8004a9a:	009b      	lsls	r3, r3, #2
 8004a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8004aa0:	69ba      	ldr	r2, [r7, #24]
 8004aa2:	4313      	orrs	r3, r2
 8004aa4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004aa6:	69fb      	ldr	r3, [r7, #28]
 8004aa8:	08da      	lsrs	r2, r3, #3
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	3208      	adds	r2, #8
 8004aae:	69b9      	ldr	r1, [r7, #24]
 8004ab0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004aba:	69fb      	ldr	r3, [r7, #28]
 8004abc:	005b      	lsls	r3, r3, #1
 8004abe:	2203      	movs	r2, #3
 8004ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ac4:	43db      	mvns	r3, r3
 8004ac6:	69ba      	ldr	r2, [r7, #24]
 8004ac8:	4013      	ands	r3, r2
 8004aca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	685b      	ldr	r3, [r3, #4]
 8004ad0:	f003 0203 	and.w	r2, r3, #3
 8004ad4:	69fb      	ldr	r3, [r7, #28]
 8004ad6:	005b      	lsls	r3, r3, #1
 8004ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8004adc:	69ba      	ldr	r2, [r7, #24]
 8004ade:	4313      	orrs	r3, r2
 8004ae0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	69ba      	ldr	r2, [r7, #24]
 8004ae6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	685b      	ldr	r3, [r3, #4]
 8004aec:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	f000 80b4 	beq.w	8004c5e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004af6:	2300      	movs	r3, #0
 8004af8:	60fb      	str	r3, [r7, #12]
 8004afa:	4b60      	ldr	r3, [pc, #384]	@ (8004c7c <HAL_GPIO_Init+0x30c>)
 8004afc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004afe:	4a5f      	ldr	r2, [pc, #380]	@ (8004c7c <HAL_GPIO_Init+0x30c>)
 8004b00:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004b04:	6453      	str	r3, [r2, #68]	@ 0x44
 8004b06:	4b5d      	ldr	r3, [pc, #372]	@ (8004c7c <HAL_GPIO_Init+0x30c>)
 8004b08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b0a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004b0e:	60fb      	str	r3, [r7, #12]
 8004b10:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004b12:	4a5b      	ldr	r2, [pc, #364]	@ (8004c80 <HAL_GPIO_Init+0x310>)
 8004b14:	69fb      	ldr	r3, [r7, #28]
 8004b16:	089b      	lsrs	r3, r3, #2
 8004b18:	3302      	adds	r3, #2
 8004b1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004b20:	69fb      	ldr	r3, [r7, #28]
 8004b22:	f003 0303 	and.w	r3, r3, #3
 8004b26:	009b      	lsls	r3, r3, #2
 8004b28:	220f      	movs	r2, #15
 8004b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b2e:	43db      	mvns	r3, r3
 8004b30:	69ba      	ldr	r2, [r7, #24]
 8004b32:	4013      	ands	r3, r2
 8004b34:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	4a52      	ldr	r2, [pc, #328]	@ (8004c84 <HAL_GPIO_Init+0x314>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d02b      	beq.n	8004b96 <HAL_GPIO_Init+0x226>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	4a51      	ldr	r2, [pc, #324]	@ (8004c88 <HAL_GPIO_Init+0x318>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d025      	beq.n	8004b92 <HAL_GPIO_Init+0x222>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	4a50      	ldr	r2, [pc, #320]	@ (8004c8c <HAL_GPIO_Init+0x31c>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d01f      	beq.n	8004b8e <HAL_GPIO_Init+0x21e>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	4a4f      	ldr	r2, [pc, #316]	@ (8004c90 <HAL_GPIO_Init+0x320>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d019      	beq.n	8004b8a <HAL_GPIO_Init+0x21a>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	4a4e      	ldr	r2, [pc, #312]	@ (8004c94 <HAL_GPIO_Init+0x324>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d013      	beq.n	8004b86 <HAL_GPIO_Init+0x216>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	4a4d      	ldr	r2, [pc, #308]	@ (8004c98 <HAL_GPIO_Init+0x328>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d00d      	beq.n	8004b82 <HAL_GPIO_Init+0x212>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	4a4c      	ldr	r2, [pc, #304]	@ (8004c9c <HAL_GPIO_Init+0x32c>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d007      	beq.n	8004b7e <HAL_GPIO_Init+0x20e>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	4a4b      	ldr	r2, [pc, #300]	@ (8004ca0 <HAL_GPIO_Init+0x330>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d101      	bne.n	8004b7a <HAL_GPIO_Init+0x20a>
 8004b76:	2307      	movs	r3, #7
 8004b78:	e00e      	b.n	8004b98 <HAL_GPIO_Init+0x228>
 8004b7a:	2308      	movs	r3, #8
 8004b7c:	e00c      	b.n	8004b98 <HAL_GPIO_Init+0x228>
 8004b7e:	2306      	movs	r3, #6
 8004b80:	e00a      	b.n	8004b98 <HAL_GPIO_Init+0x228>
 8004b82:	2305      	movs	r3, #5
 8004b84:	e008      	b.n	8004b98 <HAL_GPIO_Init+0x228>
 8004b86:	2304      	movs	r3, #4
 8004b88:	e006      	b.n	8004b98 <HAL_GPIO_Init+0x228>
 8004b8a:	2303      	movs	r3, #3
 8004b8c:	e004      	b.n	8004b98 <HAL_GPIO_Init+0x228>
 8004b8e:	2302      	movs	r3, #2
 8004b90:	e002      	b.n	8004b98 <HAL_GPIO_Init+0x228>
 8004b92:	2301      	movs	r3, #1
 8004b94:	e000      	b.n	8004b98 <HAL_GPIO_Init+0x228>
 8004b96:	2300      	movs	r3, #0
 8004b98:	69fa      	ldr	r2, [r7, #28]
 8004b9a:	f002 0203 	and.w	r2, r2, #3
 8004b9e:	0092      	lsls	r2, r2, #2
 8004ba0:	4093      	lsls	r3, r2
 8004ba2:	69ba      	ldr	r2, [r7, #24]
 8004ba4:	4313      	orrs	r3, r2
 8004ba6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004ba8:	4935      	ldr	r1, [pc, #212]	@ (8004c80 <HAL_GPIO_Init+0x310>)
 8004baa:	69fb      	ldr	r3, [r7, #28]
 8004bac:	089b      	lsrs	r3, r3, #2
 8004bae:	3302      	adds	r3, #2
 8004bb0:	69ba      	ldr	r2, [r7, #24]
 8004bb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004bb6:	4b3b      	ldr	r3, [pc, #236]	@ (8004ca4 <HAL_GPIO_Init+0x334>)
 8004bb8:	689b      	ldr	r3, [r3, #8]
 8004bba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004bbc:	693b      	ldr	r3, [r7, #16]
 8004bbe:	43db      	mvns	r3, r3
 8004bc0:	69ba      	ldr	r2, [r7, #24]
 8004bc2:	4013      	ands	r3, r2
 8004bc4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	685b      	ldr	r3, [r3, #4]
 8004bca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d003      	beq.n	8004bda <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004bd2:	69ba      	ldr	r2, [r7, #24]
 8004bd4:	693b      	ldr	r3, [r7, #16]
 8004bd6:	4313      	orrs	r3, r2
 8004bd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004bda:	4a32      	ldr	r2, [pc, #200]	@ (8004ca4 <HAL_GPIO_Init+0x334>)
 8004bdc:	69bb      	ldr	r3, [r7, #24]
 8004bde:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004be0:	4b30      	ldr	r3, [pc, #192]	@ (8004ca4 <HAL_GPIO_Init+0x334>)
 8004be2:	68db      	ldr	r3, [r3, #12]
 8004be4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004be6:	693b      	ldr	r3, [r7, #16]
 8004be8:	43db      	mvns	r3, r3
 8004bea:	69ba      	ldr	r2, [r7, #24]
 8004bec:	4013      	ands	r3, r2
 8004bee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	685b      	ldr	r3, [r3, #4]
 8004bf4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d003      	beq.n	8004c04 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004bfc:	69ba      	ldr	r2, [r7, #24]
 8004bfe:	693b      	ldr	r3, [r7, #16]
 8004c00:	4313      	orrs	r3, r2
 8004c02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004c04:	4a27      	ldr	r2, [pc, #156]	@ (8004ca4 <HAL_GPIO_Init+0x334>)
 8004c06:	69bb      	ldr	r3, [r7, #24]
 8004c08:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004c0a:	4b26      	ldr	r3, [pc, #152]	@ (8004ca4 <HAL_GPIO_Init+0x334>)
 8004c0c:	685b      	ldr	r3, [r3, #4]
 8004c0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c10:	693b      	ldr	r3, [r7, #16]
 8004c12:	43db      	mvns	r3, r3
 8004c14:	69ba      	ldr	r2, [r7, #24]
 8004c16:	4013      	ands	r3, r2
 8004c18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	685b      	ldr	r3, [r3, #4]
 8004c1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d003      	beq.n	8004c2e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004c26:	69ba      	ldr	r2, [r7, #24]
 8004c28:	693b      	ldr	r3, [r7, #16]
 8004c2a:	4313      	orrs	r3, r2
 8004c2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004c2e:	4a1d      	ldr	r2, [pc, #116]	@ (8004ca4 <HAL_GPIO_Init+0x334>)
 8004c30:	69bb      	ldr	r3, [r7, #24]
 8004c32:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004c34:	4b1b      	ldr	r3, [pc, #108]	@ (8004ca4 <HAL_GPIO_Init+0x334>)
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c3a:	693b      	ldr	r3, [r7, #16]
 8004c3c:	43db      	mvns	r3, r3
 8004c3e:	69ba      	ldr	r2, [r7, #24]
 8004c40:	4013      	ands	r3, r2
 8004c42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	685b      	ldr	r3, [r3, #4]
 8004c48:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d003      	beq.n	8004c58 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004c50:	69ba      	ldr	r2, [r7, #24]
 8004c52:	693b      	ldr	r3, [r7, #16]
 8004c54:	4313      	orrs	r3, r2
 8004c56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004c58:	4a12      	ldr	r2, [pc, #72]	@ (8004ca4 <HAL_GPIO_Init+0x334>)
 8004c5a:	69bb      	ldr	r3, [r7, #24]
 8004c5c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004c5e:	69fb      	ldr	r3, [r7, #28]
 8004c60:	3301      	adds	r3, #1
 8004c62:	61fb      	str	r3, [r7, #28]
 8004c64:	69fb      	ldr	r3, [r7, #28]
 8004c66:	2b0f      	cmp	r3, #15
 8004c68:	f67f ae90 	bls.w	800498c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004c6c:	bf00      	nop
 8004c6e:	bf00      	nop
 8004c70:	3724      	adds	r7, #36	@ 0x24
 8004c72:	46bd      	mov	sp, r7
 8004c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c78:	4770      	bx	lr
 8004c7a:	bf00      	nop
 8004c7c:	40023800 	.word	0x40023800
 8004c80:	40013800 	.word	0x40013800
 8004c84:	40020000 	.word	0x40020000
 8004c88:	40020400 	.word	0x40020400
 8004c8c:	40020800 	.word	0x40020800
 8004c90:	40020c00 	.word	0x40020c00
 8004c94:	40021000 	.word	0x40021000
 8004c98:	40021400 	.word	0x40021400
 8004c9c:	40021800 	.word	0x40021800
 8004ca0:	40021c00 	.word	0x40021c00
 8004ca4:	40013c00 	.word	0x40013c00

08004ca8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004ca8:	b480      	push	{r7}
 8004caa:	b083      	sub	sp, #12
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
 8004cb0:	460b      	mov	r3, r1
 8004cb2:	807b      	strh	r3, [r7, #2]
 8004cb4:	4613      	mov	r3, r2
 8004cb6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004cb8:	787b      	ldrb	r3, [r7, #1]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d003      	beq.n	8004cc6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004cbe:	887a      	ldrh	r2, [r7, #2]
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004cc4:	e003      	b.n	8004cce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004cc6:	887b      	ldrh	r3, [r7, #2]
 8004cc8:	041a      	lsls	r2, r3, #16
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	619a      	str	r2, [r3, #24]
}
 8004cce:	bf00      	nop
 8004cd0:	370c      	adds	r7, #12
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd8:	4770      	bx	lr

08004cda <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004cda:	b480      	push	{r7}
 8004cdc:	b085      	sub	sp, #20
 8004cde:	af00      	add	r7, sp, #0
 8004ce0:	6078      	str	r0, [r7, #4]
 8004ce2:	460b      	mov	r3, r1
 8004ce4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	695b      	ldr	r3, [r3, #20]
 8004cea:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004cec:	887a      	ldrh	r2, [r7, #2]
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	4013      	ands	r3, r2
 8004cf2:	041a      	lsls	r2, r3, #16
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	43d9      	mvns	r1, r3
 8004cf8:	887b      	ldrh	r3, [r7, #2]
 8004cfa:	400b      	ands	r3, r1
 8004cfc:	431a      	orrs	r2, r3
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	619a      	str	r2, [r3, #24]
}
 8004d02:	bf00      	nop
 8004d04:	3714      	adds	r7, #20
 8004d06:	46bd      	mov	sp, r7
 8004d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0c:	4770      	bx	lr
	...

08004d10 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b084      	sub	sp, #16
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d101      	bne.n	8004d22 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004d1e:	2301      	movs	r3, #1
 8004d20:	e12b      	b.n	8004f7a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d28:	b2db      	uxtb	r3, r3
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d106      	bne.n	8004d3c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2200      	movs	r2, #0
 8004d32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004d36:	6878      	ldr	r0, [r7, #4]
 8004d38:	f7fe ff20 	bl	8003b7c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2224      	movs	r2, #36	@ 0x24
 8004d40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	681a      	ldr	r2, [r3, #0]
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f022 0201 	bic.w	r2, r2, #1
 8004d52:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	681a      	ldr	r2, [r3, #0]
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004d62:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	681a      	ldr	r2, [r3, #0]
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004d72:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004d74:	f002 fa22 	bl	80071bc <HAL_RCC_GetPCLK1Freq>
 8004d78:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	685b      	ldr	r3, [r3, #4]
 8004d7e:	4a81      	ldr	r2, [pc, #516]	@ (8004f84 <HAL_I2C_Init+0x274>)
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d807      	bhi.n	8004d94 <HAL_I2C_Init+0x84>
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	4a80      	ldr	r2, [pc, #512]	@ (8004f88 <HAL_I2C_Init+0x278>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	bf94      	ite	ls
 8004d8c:	2301      	movls	r3, #1
 8004d8e:	2300      	movhi	r3, #0
 8004d90:	b2db      	uxtb	r3, r3
 8004d92:	e006      	b.n	8004da2 <HAL_I2C_Init+0x92>
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	4a7d      	ldr	r2, [pc, #500]	@ (8004f8c <HAL_I2C_Init+0x27c>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	bf94      	ite	ls
 8004d9c:	2301      	movls	r3, #1
 8004d9e:	2300      	movhi	r3, #0
 8004da0:	b2db      	uxtb	r3, r3
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d001      	beq.n	8004daa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004da6:	2301      	movs	r3, #1
 8004da8:	e0e7      	b.n	8004f7a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	4a78      	ldr	r2, [pc, #480]	@ (8004f90 <HAL_I2C_Init+0x280>)
 8004dae:	fba2 2303 	umull	r2, r3, r2, r3
 8004db2:	0c9b      	lsrs	r3, r3, #18
 8004db4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	685b      	ldr	r3, [r3, #4]
 8004dbc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	68ba      	ldr	r2, [r7, #8]
 8004dc6:	430a      	orrs	r2, r1
 8004dc8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	6a1b      	ldr	r3, [r3, #32]
 8004dd0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	685b      	ldr	r3, [r3, #4]
 8004dd8:	4a6a      	ldr	r2, [pc, #424]	@ (8004f84 <HAL_I2C_Init+0x274>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d802      	bhi.n	8004de4 <HAL_I2C_Init+0xd4>
 8004dde:	68bb      	ldr	r3, [r7, #8]
 8004de0:	3301      	adds	r3, #1
 8004de2:	e009      	b.n	8004df8 <HAL_I2C_Init+0xe8>
 8004de4:	68bb      	ldr	r3, [r7, #8]
 8004de6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004dea:	fb02 f303 	mul.w	r3, r2, r3
 8004dee:	4a69      	ldr	r2, [pc, #420]	@ (8004f94 <HAL_I2C_Init+0x284>)
 8004df0:	fba2 2303 	umull	r2, r3, r2, r3
 8004df4:	099b      	lsrs	r3, r3, #6
 8004df6:	3301      	adds	r3, #1
 8004df8:	687a      	ldr	r2, [r7, #4]
 8004dfa:	6812      	ldr	r2, [r2, #0]
 8004dfc:	430b      	orrs	r3, r1
 8004dfe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	69db      	ldr	r3, [r3, #28]
 8004e06:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004e0a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	685b      	ldr	r3, [r3, #4]
 8004e12:	495c      	ldr	r1, [pc, #368]	@ (8004f84 <HAL_I2C_Init+0x274>)
 8004e14:	428b      	cmp	r3, r1
 8004e16:	d819      	bhi.n	8004e4c <HAL_I2C_Init+0x13c>
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	1e59      	subs	r1, r3, #1
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	685b      	ldr	r3, [r3, #4]
 8004e20:	005b      	lsls	r3, r3, #1
 8004e22:	fbb1 f3f3 	udiv	r3, r1, r3
 8004e26:	1c59      	adds	r1, r3, #1
 8004e28:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004e2c:	400b      	ands	r3, r1
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d00a      	beq.n	8004e48 <HAL_I2C_Init+0x138>
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	1e59      	subs	r1, r3, #1
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	685b      	ldr	r3, [r3, #4]
 8004e3a:	005b      	lsls	r3, r3, #1
 8004e3c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004e40:	3301      	adds	r3, #1
 8004e42:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e46:	e051      	b.n	8004eec <HAL_I2C_Init+0x1dc>
 8004e48:	2304      	movs	r3, #4
 8004e4a:	e04f      	b.n	8004eec <HAL_I2C_Init+0x1dc>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	689b      	ldr	r3, [r3, #8]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d111      	bne.n	8004e78 <HAL_I2C_Init+0x168>
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	1e58      	subs	r0, r3, #1
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6859      	ldr	r1, [r3, #4]
 8004e5c:	460b      	mov	r3, r1
 8004e5e:	005b      	lsls	r3, r3, #1
 8004e60:	440b      	add	r3, r1
 8004e62:	fbb0 f3f3 	udiv	r3, r0, r3
 8004e66:	3301      	adds	r3, #1
 8004e68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	bf0c      	ite	eq
 8004e70:	2301      	moveq	r3, #1
 8004e72:	2300      	movne	r3, #0
 8004e74:	b2db      	uxtb	r3, r3
 8004e76:	e012      	b.n	8004e9e <HAL_I2C_Init+0x18e>
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	1e58      	subs	r0, r3, #1
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6859      	ldr	r1, [r3, #4]
 8004e80:	460b      	mov	r3, r1
 8004e82:	009b      	lsls	r3, r3, #2
 8004e84:	440b      	add	r3, r1
 8004e86:	0099      	lsls	r1, r3, #2
 8004e88:	440b      	add	r3, r1
 8004e8a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004e8e:	3301      	adds	r3, #1
 8004e90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	bf0c      	ite	eq
 8004e98:	2301      	moveq	r3, #1
 8004e9a:	2300      	movne	r3, #0
 8004e9c:	b2db      	uxtb	r3, r3
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d001      	beq.n	8004ea6 <HAL_I2C_Init+0x196>
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	e022      	b.n	8004eec <HAL_I2C_Init+0x1dc>
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	689b      	ldr	r3, [r3, #8]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d10e      	bne.n	8004ecc <HAL_I2C_Init+0x1bc>
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	1e58      	subs	r0, r3, #1
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6859      	ldr	r1, [r3, #4]
 8004eb6:	460b      	mov	r3, r1
 8004eb8:	005b      	lsls	r3, r3, #1
 8004eba:	440b      	add	r3, r1
 8004ebc:	fbb0 f3f3 	udiv	r3, r0, r3
 8004ec0:	3301      	adds	r3, #1
 8004ec2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ec6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004eca:	e00f      	b.n	8004eec <HAL_I2C_Init+0x1dc>
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	1e58      	subs	r0, r3, #1
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6859      	ldr	r1, [r3, #4]
 8004ed4:	460b      	mov	r3, r1
 8004ed6:	009b      	lsls	r3, r3, #2
 8004ed8:	440b      	add	r3, r1
 8004eda:	0099      	lsls	r1, r3, #2
 8004edc:	440b      	add	r3, r1
 8004ede:	fbb0 f3f3 	udiv	r3, r0, r3
 8004ee2:	3301      	adds	r3, #1
 8004ee4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ee8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004eec:	6879      	ldr	r1, [r7, #4]
 8004eee:	6809      	ldr	r1, [r1, #0]
 8004ef0:	4313      	orrs	r3, r2
 8004ef2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	69da      	ldr	r2, [r3, #28]
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6a1b      	ldr	r3, [r3, #32]
 8004f06:	431a      	orrs	r2, r3
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	430a      	orrs	r2, r1
 8004f0e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	689b      	ldr	r3, [r3, #8]
 8004f16:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004f1a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004f1e:	687a      	ldr	r2, [r7, #4]
 8004f20:	6911      	ldr	r1, [r2, #16]
 8004f22:	687a      	ldr	r2, [r7, #4]
 8004f24:	68d2      	ldr	r2, [r2, #12]
 8004f26:	4311      	orrs	r1, r2
 8004f28:	687a      	ldr	r2, [r7, #4]
 8004f2a:	6812      	ldr	r2, [r2, #0]
 8004f2c:	430b      	orrs	r3, r1
 8004f2e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	68db      	ldr	r3, [r3, #12]
 8004f36:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	695a      	ldr	r2, [r3, #20]
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	699b      	ldr	r3, [r3, #24]
 8004f42:	431a      	orrs	r2, r3
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	430a      	orrs	r2, r1
 8004f4a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	681a      	ldr	r2, [r3, #0]
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f042 0201 	orr.w	r2, r2, #1
 8004f5a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2200      	movs	r2, #0
 8004f60:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2220      	movs	r2, #32
 8004f66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2200      	movs	r2, #0
 8004f74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004f78:	2300      	movs	r3, #0
}
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	3710      	adds	r7, #16
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	bd80      	pop	{r7, pc}
 8004f82:	bf00      	nop
 8004f84:	000186a0 	.word	0x000186a0
 8004f88:	001e847f 	.word	0x001e847f
 8004f8c:	003d08ff 	.word	0x003d08ff
 8004f90:	431bde83 	.word	0x431bde83
 8004f94:	10624dd3 	.word	0x10624dd3

08004f98 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8004f98:	b480      	push	{r7}
 8004f9a:	b083      	sub	sp, #12
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	695b      	ldr	r3, [r3, #20]
 8004fa6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004faa:	2b80      	cmp	r3, #128	@ 0x80
 8004fac:	d103      	bne.n	8004fb6 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	611a      	str	r2, [r3, #16]
  }
}
 8004fb6:	bf00      	nop
 8004fb8:	370c      	adds	r7, #12
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc0:	4770      	bx	lr
	...

08004fc4 <HAL_I2C_Slave_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	b085      	sub	sp, #20
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	60f8      	str	r0, [r7, #12]
 8004fcc:	60b9      	str	r1, [r7, #8]
 8004fce:	4613      	mov	r3, r2
 8004fd0:	80fb      	strh	r3, [r7, #6]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004fd8:	b2db      	uxtb	r3, r3
 8004fda:	2b20      	cmp	r3, #32
 8004fdc:	d158      	bne.n	8005090 <HAL_I2C_Slave_Receive_IT+0xcc>
  {
    if ((pData == NULL) || (Size == 0U))
 8004fde:	68bb      	ldr	r3, [r7, #8]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d002      	beq.n	8004fea <HAL_I2C_Slave_Receive_IT+0x26>
 8004fe4:	88fb      	ldrh	r3, [r7, #6]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d101      	bne.n	8004fee <HAL_I2C_Slave_Receive_IT+0x2a>
    {
      return  HAL_ERROR;
 8004fea:	2301      	movs	r3, #1
 8004fec:	e051      	b.n	8005092 <HAL_I2C_Slave_Receive_IT+0xce>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004ff4:	2b01      	cmp	r3, #1
 8004ff6:	d101      	bne.n	8004ffc <HAL_I2C_Slave_Receive_IT+0x38>
 8004ff8:	2302      	movs	r3, #2
 8004ffa:	e04a      	b.n	8005092 <HAL_I2C_Slave_Receive_IT+0xce>
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	2201      	movs	r2, #1
 8005000:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f003 0301 	and.w	r3, r3, #1
 800500e:	2b01      	cmp	r3, #1
 8005010:	d007      	beq.n	8005022 <HAL_I2C_Slave_Receive_IT+0x5e>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	681a      	ldr	r2, [r3, #0]
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f042 0201 	orr.w	r2, r2, #1
 8005020:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	681a      	ldr	r2, [r3, #0]
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005030:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	2222      	movs	r2, #34	@ 0x22
 8005036:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	2220      	movs	r2, #32
 800503e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	2200      	movs	r2, #0
 8005046:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	68ba      	ldr	r2, [r7, #8]
 800504c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	88fa      	ldrh	r2, [r7, #6]
 8005052:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005058:	b29a      	uxth	r2, r3
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	4a0f      	ldr	r2, [pc, #60]	@ (80050a0 <HAL_I2C_Slave_Receive_IT+0xdc>)
 8005062:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	681a      	ldr	r2, [r3, #0]
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005072:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	2200      	movs	r2, #0
 8005078:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	685a      	ldr	r2, [r3, #4]
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 800508a:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 800508c:	2300      	movs	r3, #0
 800508e:	e000      	b.n	8005092 <HAL_I2C_Slave_Receive_IT+0xce>
  }
  else
  {
    return HAL_BUSY;
 8005090:	2302      	movs	r3, #2
  }
}
 8005092:	4618      	mov	r0, r3
 8005094:	3714      	adds	r7, #20
 8005096:	46bd      	mov	sp, r7
 8005098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509c:	4770      	bx	lr
 800509e:	bf00      	nop
 80050a0:	ffff0000 	.word	0xffff0000

080050a4 <HAL_I2C_Slave_Seq_Receive_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 80050a4:	b480      	push	{r7}
 80050a6:	b087      	sub	sp, #28
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	60f8      	str	r0, [r7, #12]
 80050ac:	60b9      	str	r1, [r7, #8]
 80050ae:	603b      	str	r3, [r7, #0]
 80050b0:	4613      	mov	r3, r2
 80050b2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80050ba:	b2db      	uxtb	r3, r3
 80050bc:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80050c0:	2b28      	cmp	r3, #40	@ 0x28
 80050c2:	d15b      	bne.n	800517c <HAL_I2C_Slave_Seq_Receive_IT+0xd8>
  {
    if ((pData == NULL) || (Size == 0U))
 80050c4:	68bb      	ldr	r3, [r7, #8]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d002      	beq.n	80050d0 <HAL_I2C_Slave_Seq_Receive_IT+0x2c>
 80050ca:	88fb      	ldrh	r3, [r7, #6]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d101      	bne.n	80050d4 <HAL_I2C_Slave_Seq_Receive_IT+0x30>
    {
      return  HAL_ERROR;
 80050d0:	2301      	movs	r3, #1
 80050d2:	e054      	b.n	800517e <HAL_I2C_Slave_Seq_Receive_IT+0xda>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80050da:	2b01      	cmp	r3, #1
 80050dc:	d101      	bne.n	80050e2 <HAL_I2C_Slave_Seq_Receive_IT+0x3e>
 80050de:	2302      	movs	r3, #2
 80050e0:	e04d      	b.n	800517e <HAL_I2C_Slave_Seq_Receive_IT+0xda>
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	2201      	movs	r2, #1
 80050e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f003 0301 	and.w	r3, r3, #1
 80050f4:	2b01      	cmp	r3, #1
 80050f6:	d007      	beq.n	8005108 <HAL_I2C_Slave_Seq_Receive_IT+0x64>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	681a      	ldr	r2, [r3, #0]
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f042 0201 	orr.w	r2, r2, #1
 8005106:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	681a      	ldr	r2, [r3, #0]
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005116:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	222a      	movs	r2, #42	@ 0x2a
 800511c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	2220      	movs	r2, #32
 8005124:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	2200      	movs	r2, #0
 800512c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	68ba      	ldr	r2, [r7, #8]
 8005132:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	88fa      	ldrh	r2, [r7, #6]
 8005138:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800513e:	b29a      	uxth	r2, r3
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = XferOptions;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	683a      	ldr	r2, [r7, #0]
 8005148:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800514a:	2300      	movs	r3, #0
 800514c:	617b      	str	r3, [r7, #20]
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	695b      	ldr	r3, [r3, #20]
 8005154:	617b      	str	r3, [r7, #20]
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	699b      	ldr	r3, [r3, #24]
 800515c:	617b      	str	r3, [r7, #20]
 800515e:	697b      	ldr	r3, [r7, #20]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	2200      	movs	r2, #0
 8005164:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	685a      	ldr	r2, [r3, #4]
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 8005176:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8005178:	2300      	movs	r3, #0
 800517a:	e000      	b.n	800517e <HAL_I2C_Slave_Seq_Receive_IT+0xda>
  }
  else
  {
    return HAL_BUSY;
 800517c:	2302      	movs	r3, #2
  }
}
 800517e:	4618      	mov	r0, r3
 8005180:	371c      	adds	r7, #28
 8005182:	46bd      	mov	sp, r7
 8005184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005188:	4770      	bx	lr

0800518a <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800518a:	b580      	push	{r7, lr}
 800518c:	b088      	sub	sp, #32
 800518e:	af00      	add	r7, sp, #0
 8005190:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8005192:	2300      	movs	r3, #0
 8005194:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	685b      	ldr	r3, [r3, #4]
 800519c:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051a2:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80051aa:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80051b2:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80051b4:	7bfb      	ldrb	r3, [r7, #15]
 80051b6:	2b10      	cmp	r3, #16
 80051b8:	d003      	beq.n	80051c2 <HAL_I2C_EV_IRQHandler+0x38>
 80051ba:	7bfb      	ldrb	r3, [r7, #15]
 80051bc:	2b40      	cmp	r3, #64	@ 0x40
 80051be:	f040 80b1 	bne.w	8005324 <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	699b      	ldr	r3, [r3, #24]
 80051c8:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	695b      	ldr	r3, [r3, #20]
 80051d0:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80051d2:	69fb      	ldr	r3, [r7, #28]
 80051d4:	f003 0301 	and.w	r3, r3, #1
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d10d      	bne.n	80051f8 <HAL_I2C_EV_IRQHandler+0x6e>
 80051dc:	693b      	ldr	r3, [r7, #16]
 80051de:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 80051e2:	d003      	beq.n	80051ec <HAL_I2C_EV_IRQHandler+0x62>
 80051e4:	693b      	ldr	r3, [r7, #16]
 80051e6:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80051ea:	d101      	bne.n	80051f0 <HAL_I2C_EV_IRQHandler+0x66>
 80051ec:	2301      	movs	r3, #1
 80051ee:	e000      	b.n	80051f2 <HAL_I2C_EV_IRQHandler+0x68>
 80051f0:	2300      	movs	r3, #0
 80051f2:	2b01      	cmp	r3, #1
 80051f4:	f000 8114 	beq.w	8005420 <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80051f8:	69fb      	ldr	r3, [r7, #28]
 80051fa:	f003 0301 	and.w	r3, r3, #1
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d00b      	beq.n	800521a <HAL_I2C_EV_IRQHandler+0x90>
 8005202:	697b      	ldr	r3, [r7, #20]
 8005204:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005208:	2b00      	cmp	r3, #0
 800520a:	d006      	beq.n	800521a <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800520c:	6878      	ldr	r0, [r7, #4]
 800520e:	f001 fb49 	bl	80068a4 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8005212:	6878      	ldr	r0, [r7, #4]
 8005214:	f000 fcc3 	bl	8005b9e <I2C_Master_SB>
 8005218:	e083      	b.n	8005322 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800521a:	69fb      	ldr	r3, [r7, #28]
 800521c:	f003 0308 	and.w	r3, r3, #8
 8005220:	2b00      	cmp	r3, #0
 8005222:	d008      	beq.n	8005236 <HAL_I2C_EV_IRQHandler+0xac>
 8005224:	697b      	ldr	r3, [r7, #20]
 8005226:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800522a:	2b00      	cmp	r3, #0
 800522c:	d003      	beq.n	8005236 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 800522e:	6878      	ldr	r0, [r7, #4]
 8005230:	f000 fd3b 	bl	8005caa <I2C_Master_ADD10>
 8005234:	e075      	b.n	8005322 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005236:	69fb      	ldr	r3, [r7, #28]
 8005238:	f003 0302 	and.w	r3, r3, #2
 800523c:	2b00      	cmp	r3, #0
 800523e:	d008      	beq.n	8005252 <HAL_I2C_EV_IRQHandler+0xc8>
 8005240:	697b      	ldr	r3, [r7, #20]
 8005242:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005246:	2b00      	cmp	r3, #0
 8005248:	d003      	beq.n	8005252 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 800524a:	6878      	ldr	r0, [r7, #4]
 800524c:	f000 fd57 	bl	8005cfe <I2C_Master_ADDR>
 8005250:	e067      	b.n	8005322 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8005252:	69bb      	ldr	r3, [r7, #24]
 8005254:	f003 0304 	and.w	r3, r3, #4
 8005258:	2b00      	cmp	r3, #0
 800525a:	d036      	beq.n	80052ca <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	685b      	ldr	r3, [r3, #4]
 8005262:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005266:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800526a:	f000 80db 	beq.w	8005424 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800526e:	69fb      	ldr	r3, [r7, #28]
 8005270:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005274:	2b00      	cmp	r3, #0
 8005276:	d00d      	beq.n	8005294 <HAL_I2C_EV_IRQHandler+0x10a>
 8005278:	697b      	ldr	r3, [r7, #20]
 800527a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800527e:	2b00      	cmp	r3, #0
 8005280:	d008      	beq.n	8005294 <HAL_I2C_EV_IRQHandler+0x10a>
 8005282:	69fb      	ldr	r3, [r7, #28]
 8005284:	f003 0304 	and.w	r3, r3, #4
 8005288:	2b00      	cmp	r3, #0
 800528a:	d103      	bne.n	8005294 <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800528c:	6878      	ldr	r0, [r7, #4]
 800528e:	f000 f91f 	bl	80054d0 <I2C_MasterTransmit_TXE>
 8005292:	e046      	b.n	8005322 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005294:	69fb      	ldr	r3, [r7, #28]
 8005296:	f003 0304 	and.w	r3, r3, #4
 800529a:	2b00      	cmp	r3, #0
 800529c:	f000 80c2 	beq.w	8005424 <HAL_I2C_EV_IRQHandler+0x29a>
 80052a0:	697b      	ldr	r3, [r7, #20]
 80052a2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	f000 80bc 	beq.w	8005424 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80052ac:	7bbb      	ldrb	r3, [r7, #14]
 80052ae:	2b21      	cmp	r3, #33	@ 0x21
 80052b0:	d103      	bne.n	80052ba <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80052b2:	6878      	ldr	r0, [r7, #4]
 80052b4:	f000 f9a8 	bl	8005608 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80052b8:	e0b4      	b.n	8005424 <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80052ba:	7bfb      	ldrb	r3, [r7, #15]
 80052bc:	2b40      	cmp	r3, #64	@ 0x40
 80052be:	f040 80b1 	bne.w	8005424 <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80052c2:	6878      	ldr	r0, [r7, #4]
 80052c4:	f000 fa16 	bl	80056f4 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80052c8:	e0ac      	b.n	8005424 <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	685b      	ldr	r3, [r3, #4]
 80052d0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80052d4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80052d8:	f000 80a4 	beq.w	8005424 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80052dc:	69fb      	ldr	r3, [r7, #28]
 80052de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d00d      	beq.n	8005302 <HAL_I2C_EV_IRQHandler+0x178>
 80052e6:	697b      	ldr	r3, [r7, #20]
 80052e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d008      	beq.n	8005302 <HAL_I2C_EV_IRQHandler+0x178>
 80052f0:	69fb      	ldr	r3, [r7, #28]
 80052f2:	f003 0304 	and.w	r3, r3, #4
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d103      	bne.n	8005302 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80052fa:	6878      	ldr	r0, [r7, #4]
 80052fc:	f000 fa92 	bl	8005824 <I2C_MasterReceive_RXNE>
 8005300:	e00f      	b.n	8005322 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005302:	69fb      	ldr	r3, [r7, #28]
 8005304:	f003 0304 	and.w	r3, r3, #4
 8005308:	2b00      	cmp	r3, #0
 800530a:	f000 808b 	beq.w	8005424 <HAL_I2C_EV_IRQHandler+0x29a>
 800530e:	697b      	ldr	r3, [r7, #20]
 8005310:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005314:	2b00      	cmp	r3, #0
 8005316:	f000 8085 	beq.w	8005424 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 800531a:	6878      	ldr	r0, [r7, #4]
 800531c:	f000 fb4a 	bl	80059b4 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005320:	e080      	b.n	8005424 <HAL_I2C_EV_IRQHandler+0x29a>
 8005322:	e07f      	b.n	8005424 <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005328:	2b00      	cmp	r3, #0
 800532a:	d004      	beq.n	8005336 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	695b      	ldr	r3, [r3, #20]
 8005332:	61fb      	str	r3, [r7, #28]
 8005334:	e007      	b.n	8005346 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	699b      	ldr	r3, [r3, #24]
 800533c:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	695b      	ldr	r3, [r3, #20]
 8005344:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005346:	69fb      	ldr	r3, [r7, #28]
 8005348:	f003 0302 	and.w	r3, r3, #2
 800534c:	2b00      	cmp	r3, #0
 800534e:	d011      	beq.n	8005374 <HAL_I2C_EV_IRQHandler+0x1ea>
 8005350:	697b      	ldr	r3, [r7, #20]
 8005352:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005356:	2b00      	cmp	r3, #0
 8005358:	d00c      	beq.n	8005374 <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800535e:	2b00      	cmp	r3, #0
 8005360:	d003      	beq.n	800536a <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	699b      	ldr	r3, [r3, #24]
 8005368:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800536a:	69b9      	ldr	r1, [r7, #24]
 800536c:	6878      	ldr	r0, [r7, #4]
 800536e:	f000 ff15 	bl	800619c <I2C_Slave_ADDR>
 8005372:	e05a      	b.n	800542a <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005374:	69fb      	ldr	r3, [r7, #28]
 8005376:	f003 0310 	and.w	r3, r3, #16
 800537a:	2b00      	cmp	r3, #0
 800537c:	d008      	beq.n	8005390 <HAL_I2C_EV_IRQHandler+0x206>
 800537e:	697b      	ldr	r3, [r7, #20]
 8005380:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005384:	2b00      	cmp	r3, #0
 8005386:	d003      	beq.n	8005390 <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 8005388:	6878      	ldr	r0, [r7, #4]
 800538a:	f000 ff4f 	bl	800622c <I2C_Slave_STOPF>
 800538e:	e04c      	b.n	800542a <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005390:	7bbb      	ldrb	r3, [r7, #14]
 8005392:	2b21      	cmp	r3, #33	@ 0x21
 8005394:	d002      	beq.n	800539c <HAL_I2C_EV_IRQHandler+0x212>
 8005396:	7bbb      	ldrb	r3, [r7, #14]
 8005398:	2b29      	cmp	r3, #41	@ 0x29
 800539a:	d120      	bne.n	80053de <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800539c:	69fb      	ldr	r3, [r7, #28]
 800539e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d00d      	beq.n	80053c2 <HAL_I2C_EV_IRQHandler+0x238>
 80053a6:	697b      	ldr	r3, [r7, #20]
 80053a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d008      	beq.n	80053c2 <HAL_I2C_EV_IRQHandler+0x238>
 80053b0:	69fb      	ldr	r3, [r7, #28]
 80053b2:	f003 0304 	and.w	r3, r3, #4
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d103      	bne.n	80053c2 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80053ba:	6878      	ldr	r0, [r7, #4]
 80053bc:	f000 fe30 	bl	8006020 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80053c0:	e032      	b.n	8005428 <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80053c2:	69fb      	ldr	r3, [r7, #28]
 80053c4:	f003 0304 	and.w	r3, r3, #4
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d02d      	beq.n	8005428 <HAL_I2C_EV_IRQHandler+0x29e>
 80053cc:	697b      	ldr	r3, [r7, #20]
 80053ce:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d028      	beq.n	8005428 <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80053d6:	6878      	ldr	r0, [r7, #4]
 80053d8:	f000 fe5f 	bl	800609a <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80053dc:	e024      	b.n	8005428 <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80053de:	69fb      	ldr	r3, [r7, #28]
 80053e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d00d      	beq.n	8005404 <HAL_I2C_EV_IRQHandler+0x27a>
 80053e8:	697b      	ldr	r3, [r7, #20]
 80053ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d008      	beq.n	8005404 <HAL_I2C_EV_IRQHandler+0x27a>
 80053f2:	69fb      	ldr	r3, [r7, #28]
 80053f4:	f003 0304 	and.w	r3, r3, #4
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d103      	bne.n	8005404 <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80053fc:	6878      	ldr	r0, [r7, #4]
 80053fe:	f000 fe6d 	bl	80060dc <I2C_SlaveReceive_RXNE>
 8005402:	e012      	b.n	800542a <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005404:	69fb      	ldr	r3, [r7, #28]
 8005406:	f003 0304 	and.w	r3, r3, #4
 800540a:	2b00      	cmp	r3, #0
 800540c:	d00d      	beq.n	800542a <HAL_I2C_EV_IRQHandler+0x2a0>
 800540e:	697b      	ldr	r3, [r7, #20]
 8005410:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005414:	2b00      	cmp	r3, #0
 8005416:	d008      	beq.n	800542a <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8005418:	6878      	ldr	r0, [r7, #4]
 800541a:	f000 fe9d 	bl	8006158 <I2C_SlaveReceive_BTF>
 800541e:	e004      	b.n	800542a <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 8005420:	bf00      	nop
 8005422:	e002      	b.n	800542a <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005424:	bf00      	nop
 8005426:	e000      	b.n	800542a <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005428:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 800542a:	3720      	adds	r7, #32
 800542c:	46bd      	mov	sp, r7
 800542e:	bd80      	pop	{r7, pc}

08005430 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005430:	b480      	push	{r7}
 8005432:	b083      	sub	sp, #12
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8005438:	bf00      	nop
 800543a:	370c      	adds	r7, #12
 800543c:	46bd      	mov	sp, r7
 800543e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005442:	4770      	bx	lr

08005444 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005444:	b480      	push	{r7}
 8005446:	b083      	sub	sp, #12
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800544c:	bf00      	nop
 800544e:	370c      	adds	r7, #12
 8005450:	46bd      	mov	sp, r7
 8005452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005456:	4770      	bx	lr

08005458 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005458:	b480      	push	{r7}
 800545a:	b083      	sub	sp, #12
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8005460:	bf00      	nop
 8005462:	370c      	adds	r7, #12
 8005464:	46bd      	mov	sp, r7
 8005466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546a:	4770      	bx	lr

0800546c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800546c:	b480      	push	{r7}
 800546e:	b083      	sub	sp, #12
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8005474:	bf00      	nop
 8005476:	370c      	adds	r7, #12
 8005478:	46bd      	mov	sp, r7
 800547a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547e:	4770      	bx	lr

08005480 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005480:	b480      	push	{r7}
 8005482:	b083      	sub	sp, #12
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8005488:	bf00      	nop
 800548a:	370c      	adds	r7, #12
 800548c:	46bd      	mov	sp, r7
 800548e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005492:	4770      	bx	lr

08005494 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005494:	b480      	push	{r7}
 8005496:	b083      	sub	sp, #12
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800549c:	bf00      	nop
 800549e:	370c      	adds	r7, #12
 80054a0:	46bd      	mov	sp, r7
 80054a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a6:	4770      	bx	lr

080054a8 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80054a8:	b480      	push	{r7}
 80054aa:	b083      	sub	sp, #12
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80054b0:	bf00      	nop
 80054b2:	370c      	adds	r7, #12
 80054b4:	46bd      	mov	sp, r7
 80054b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ba:	4770      	bx	lr

080054bc <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80054bc:	b480      	push	{r7}
 80054be:	b083      	sub	sp, #12
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80054c4:	bf00      	nop
 80054c6:	370c      	adds	r7, #12
 80054c8:	46bd      	mov	sp, r7
 80054ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ce:	4770      	bx	lr

080054d0 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b084      	sub	sp, #16
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80054de:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80054e6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054ec:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d150      	bne.n	8005598 <I2C_MasterTransmit_TXE+0xc8>
 80054f6:	7bfb      	ldrb	r3, [r7, #15]
 80054f8:	2b21      	cmp	r3, #33	@ 0x21
 80054fa:	d14d      	bne.n	8005598 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80054fc:	68bb      	ldr	r3, [r7, #8]
 80054fe:	2b08      	cmp	r3, #8
 8005500:	d01d      	beq.n	800553e <I2C_MasterTransmit_TXE+0x6e>
 8005502:	68bb      	ldr	r3, [r7, #8]
 8005504:	2b20      	cmp	r3, #32
 8005506:	d01a      	beq.n	800553e <I2C_MasterTransmit_TXE+0x6e>
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800550e:	d016      	beq.n	800553e <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	685a      	ldr	r2, [r3, #4]
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800551e:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2211      	movs	r2, #17
 8005524:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2200      	movs	r2, #0
 800552a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2220      	movs	r2, #32
 8005532:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8005536:	6878      	ldr	r0, [r7, #4]
 8005538:	f7ff ff7a 	bl	8005430 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800553c:	e060      	b.n	8005600 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	685a      	ldr	r2, [r3, #4]
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800554c:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	681a      	ldr	r2, [r3, #0]
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800555c:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2200      	movs	r2, #0
 8005562:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2220      	movs	r2, #32
 8005568:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005572:	b2db      	uxtb	r3, r3
 8005574:	2b40      	cmp	r3, #64	@ 0x40
 8005576:	d107      	bne.n	8005588 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2200      	movs	r2, #0
 800557c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8005580:	6878      	ldr	r0, [r7, #4]
 8005582:	f7ff ff7d 	bl	8005480 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005586:	e03b      	b.n	8005600 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2200      	movs	r2, #0
 800558c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005590:	6878      	ldr	r0, [r7, #4]
 8005592:	f7ff ff4d 	bl	8005430 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005596:	e033      	b.n	8005600 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8005598:	7bfb      	ldrb	r3, [r7, #15]
 800559a:	2b21      	cmp	r3, #33	@ 0x21
 800559c:	d005      	beq.n	80055aa <I2C_MasterTransmit_TXE+0xda>
 800559e:	7bbb      	ldrb	r3, [r7, #14]
 80055a0:	2b40      	cmp	r3, #64	@ 0x40
 80055a2:	d12d      	bne.n	8005600 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80055a4:	7bfb      	ldrb	r3, [r7, #15]
 80055a6:	2b22      	cmp	r3, #34	@ 0x22
 80055a8:	d12a      	bne.n	8005600 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055ae:	b29b      	uxth	r3, r3
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d108      	bne.n	80055c6 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	685a      	ldr	r2, [r3, #4]
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80055c2:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80055c4:	e01c      	b.n	8005600 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80055cc:	b2db      	uxtb	r3, r3
 80055ce:	2b40      	cmp	r3, #64	@ 0x40
 80055d0:	d103      	bne.n	80055da <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80055d2:	6878      	ldr	r0, [r7, #4]
 80055d4:	f000 f88e 	bl	80056f4 <I2C_MemoryTransmit_TXE_BTF>
}
 80055d8:	e012      	b.n	8005600 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055de:	781a      	ldrb	r2, [r3, #0]
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055ea:	1c5a      	adds	r2, r3, #1
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055f4:	b29b      	uxth	r3, r3
 80055f6:	3b01      	subs	r3, #1
 80055f8:	b29a      	uxth	r2, r3
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80055fe:	e7ff      	b.n	8005600 <I2C_MasterTransmit_TXE+0x130>
 8005600:	bf00      	nop
 8005602:	3710      	adds	r7, #16
 8005604:	46bd      	mov	sp, r7
 8005606:	bd80      	pop	{r7, pc}

08005608 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b084      	sub	sp, #16
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005614:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800561c:	b2db      	uxtb	r3, r3
 800561e:	2b21      	cmp	r3, #33	@ 0x21
 8005620:	d164      	bne.n	80056ec <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005626:	b29b      	uxth	r3, r3
 8005628:	2b00      	cmp	r3, #0
 800562a:	d012      	beq.n	8005652 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005630:	781a      	ldrb	r2, [r3, #0]
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800563c:	1c5a      	adds	r2, r3, #1
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005646:	b29b      	uxth	r3, r3
 8005648:	3b01      	subs	r3, #1
 800564a:	b29a      	uxth	r2, r3
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8005650:	e04c      	b.n	80056ec <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	2b08      	cmp	r3, #8
 8005656:	d01d      	beq.n	8005694 <I2C_MasterTransmit_BTF+0x8c>
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	2b20      	cmp	r3, #32
 800565c:	d01a      	beq.n	8005694 <I2C_MasterTransmit_BTF+0x8c>
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005664:	d016      	beq.n	8005694 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	685a      	ldr	r2, [r3, #4]
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005674:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2211      	movs	r2, #17
 800567a:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2200      	movs	r2, #0
 8005680:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2220      	movs	r2, #32
 8005688:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800568c:	6878      	ldr	r0, [r7, #4]
 800568e:	f7ff fecf 	bl	8005430 <HAL_I2C_MasterTxCpltCallback>
}
 8005692:	e02b      	b.n	80056ec <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	685a      	ldr	r2, [r3, #4]
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80056a2:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	681a      	ldr	r2, [r3, #0]
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80056b2:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2200      	movs	r2, #0
 80056b8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2220      	movs	r2, #32
 80056be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80056c8:	b2db      	uxtb	r3, r3
 80056ca:	2b40      	cmp	r3, #64	@ 0x40
 80056cc:	d107      	bne.n	80056de <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2200      	movs	r2, #0
 80056d2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80056d6:	6878      	ldr	r0, [r7, #4]
 80056d8:	f7ff fed2 	bl	8005480 <HAL_I2C_MemTxCpltCallback>
}
 80056dc:	e006      	b.n	80056ec <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2200      	movs	r2, #0
 80056e2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80056e6:	6878      	ldr	r0, [r7, #4]
 80056e8:	f7ff fea2 	bl	8005430 <HAL_I2C_MasterTxCpltCallback>
}
 80056ec:	bf00      	nop
 80056ee:	3710      	adds	r7, #16
 80056f0:	46bd      	mov	sp, r7
 80056f2:	bd80      	pop	{r7, pc}

080056f4 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b084      	sub	sp, #16
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005702:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005708:	2b00      	cmp	r3, #0
 800570a:	d11d      	bne.n	8005748 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005710:	2b01      	cmp	r3, #1
 8005712:	d10b      	bne.n	800572c <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005718:	b2da      	uxtb	r2, r3
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005724:	1c9a      	adds	r2, r3, #2
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 800572a:	e077      	b.n	800581c <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005730:	b29b      	uxth	r3, r3
 8005732:	121b      	asrs	r3, r3, #8
 8005734:	b2da      	uxtb	r2, r3
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005740:	1c5a      	adds	r2, r3, #1
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8005746:	e069      	b.n	800581c <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800574c:	2b01      	cmp	r3, #1
 800574e:	d10b      	bne.n	8005768 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005754:	b2da      	uxtb	r2, r3
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005760:	1c5a      	adds	r2, r3, #1
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8005766:	e059      	b.n	800581c <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800576c:	2b02      	cmp	r3, #2
 800576e:	d152      	bne.n	8005816 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8005770:	7bfb      	ldrb	r3, [r7, #15]
 8005772:	2b22      	cmp	r3, #34	@ 0x22
 8005774:	d10d      	bne.n	8005792 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	681a      	ldr	r2, [r3, #0]
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005784:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800578a:	1c5a      	adds	r2, r3, #1
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8005790:	e044      	b.n	800581c <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005796:	b29b      	uxth	r3, r3
 8005798:	2b00      	cmp	r3, #0
 800579a:	d015      	beq.n	80057c8 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 800579c:	7bfb      	ldrb	r3, [r7, #15]
 800579e:	2b21      	cmp	r3, #33	@ 0x21
 80057a0:	d112      	bne.n	80057c8 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057a6:	781a      	ldrb	r2, [r3, #0]
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057b2:	1c5a      	adds	r2, r3, #1
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057bc:	b29b      	uxth	r3, r3
 80057be:	3b01      	subs	r3, #1
 80057c0:	b29a      	uxth	r2, r3
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80057c6:	e029      	b.n	800581c <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057cc:	b29b      	uxth	r3, r3
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d124      	bne.n	800581c <I2C_MemoryTransmit_TXE_BTF+0x128>
 80057d2:	7bfb      	ldrb	r3, [r7, #15]
 80057d4:	2b21      	cmp	r3, #33	@ 0x21
 80057d6:	d121      	bne.n	800581c <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	685a      	ldr	r2, [r3, #4]
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80057e6:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	681a      	ldr	r2, [r3, #0]
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80057f6:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2200      	movs	r2, #0
 80057fc:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2220      	movs	r2, #32
 8005802:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2200      	movs	r2, #0
 800580a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800580e:	6878      	ldr	r0, [r7, #4]
 8005810:	f7ff fe36 	bl	8005480 <HAL_I2C_MemTxCpltCallback>
}
 8005814:	e002      	b.n	800581c <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8005816:	6878      	ldr	r0, [r7, #4]
 8005818:	f7ff fbbe 	bl	8004f98 <I2C_Flush_DR>
}
 800581c:	bf00      	nop
 800581e:	3710      	adds	r7, #16
 8005820:	46bd      	mov	sp, r7
 8005822:	bd80      	pop	{r7, pc}

08005824 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005824:	b580      	push	{r7, lr}
 8005826:	b084      	sub	sp, #16
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005832:	b2db      	uxtb	r3, r3
 8005834:	2b22      	cmp	r3, #34	@ 0x22
 8005836:	f040 80b9 	bne.w	80059ac <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800583e:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005844:	b29b      	uxth	r3, r3
 8005846:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8005848:	68bb      	ldr	r3, [r7, #8]
 800584a:	2b03      	cmp	r3, #3
 800584c:	d921      	bls.n	8005892 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	691a      	ldr	r2, [r3, #16]
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005858:	b2d2      	uxtb	r2, r2
 800585a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005860:	1c5a      	adds	r2, r3, #1
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800586a:	b29b      	uxth	r3, r3
 800586c:	3b01      	subs	r3, #1
 800586e:	b29a      	uxth	r2, r3
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005878:	b29b      	uxth	r3, r3
 800587a:	2b03      	cmp	r3, #3
 800587c:	f040 8096 	bne.w	80059ac <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	685a      	ldr	r2, [r3, #4]
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800588e:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8005890:	e08c      	b.n	80059ac <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005896:	2b02      	cmp	r3, #2
 8005898:	d07f      	beq.n	800599a <I2C_MasterReceive_RXNE+0x176>
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	2b01      	cmp	r3, #1
 800589e:	d002      	beq.n	80058a6 <I2C_MasterReceive_RXNE+0x82>
 80058a0:	68bb      	ldr	r3, [r7, #8]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d179      	bne.n	800599a <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80058a6:	6878      	ldr	r0, [r7, #4]
 80058a8:	f000 ffca 	bl	8006840 <I2C_WaitOnSTOPRequestThroughIT>
 80058ac:	4603      	mov	r3, r0
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d14c      	bne.n	800594c <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	681a      	ldr	r2, [r3, #0]
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80058c0:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	685a      	ldr	r2, [r3, #4]
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80058d0:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	691a      	ldr	r2, [r3, #16]
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058dc:	b2d2      	uxtb	r2, r2
 80058de:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058e4:	1c5a      	adds	r2, r3, #1
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058ee:	b29b      	uxth	r3, r3
 80058f0:	3b01      	subs	r3, #1
 80058f2:	b29a      	uxth	r2, r3
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2220      	movs	r2, #32
 80058fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005906:	b2db      	uxtb	r3, r3
 8005908:	2b40      	cmp	r3, #64	@ 0x40
 800590a:	d10a      	bne.n	8005922 <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2200      	movs	r2, #0
 8005910:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2200      	movs	r2, #0
 8005918:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800591a:	6878      	ldr	r0, [r7, #4]
 800591c:	f7ff fdba 	bl	8005494 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005920:	e044      	b.n	80059ac <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2200      	movs	r2, #0
 8005926:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	2b08      	cmp	r3, #8
 800592e:	d002      	beq.n	8005936 <I2C_MasterReceive_RXNE+0x112>
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	2b20      	cmp	r3, #32
 8005934:	d103      	bne.n	800593e <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2200      	movs	r2, #0
 800593a:	631a      	str	r2, [r3, #48]	@ 0x30
 800593c:	e002      	b.n	8005944 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2212      	movs	r2, #18
 8005942:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8005944:	6878      	ldr	r0, [r7, #4]
 8005946:	f7ff fd7d 	bl	8005444 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800594a:	e02f      	b.n	80059ac <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	685a      	ldr	r2, [r3, #4]
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800595a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	691a      	ldr	r2, [r3, #16]
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005966:	b2d2      	uxtb	r2, r2
 8005968:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800596e:	1c5a      	adds	r2, r3, #1
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005978:	b29b      	uxth	r3, r3
 800597a:	3b01      	subs	r3, #1
 800597c:	b29a      	uxth	r2, r3
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2220      	movs	r2, #32
 8005986:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2200      	movs	r2, #0
 800598e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8005992:	6878      	ldr	r0, [r7, #4]
 8005994:	f7ff fd88 	bl	80054a8 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005998:	e008      	b.n	80059ac <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	685a      	ldr	r2, [r3, #4]
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80059a8:	605a      	str	r2, [r3, #4]
}
 80059aa:	e7ff      	b.n	80059ac <I2C_MasterReceive_RXNE+0x188>
 80059ac:	bf00      	nop
 80059ae:	3710      	adds	r7, #16
 80059b0:	46bd      	mov	sp, r7
 80059b2:	bd80      	pop	{r7, pc}

080059b4 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b084      	sub	sp, #16
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059c0:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059c6:	b29b      	uxth	r3, r3
 80059c8:	2b04      	cmp	r3, #4
 80059ca:	d11b      	bne.n	8005a04 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	685a      	ldr	r2, [r3, #4]
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80059da:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	691a      	ldr	r2, [r3, #16]
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059e6:	b2d2      	uxtb	r2, r2
 80059e8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059ee:	1c5a      	adds	r2, r3, #1
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059f8:	b29b      	uxth	r3, r3
 80059fa:	3b01      	subs	r3, #1
 80059fc:	b29a      	uxth	r2, r3
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8005a02:	e0c8      	b.n	8005b96 <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 3U)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a08:	b29b      	uxth	r3, r3
 8005a0a:	2b03      	cmp	r3, #3
 8005a0c:	d129      	bne.n	8005a62 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	685a      	ldr	r2, [r3, #4]
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005a1c:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	2b04      	cmp	r3, #4
 8005a22:	d00a      	beq.n	8005a3a <I2C_MasterReceive_BTF+0x86>
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	2b02      	cmp	r3, #2
 8005a28:	d007      	beq.n	8005a3a <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	681a      	ldr	r2, [r3, #0]
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005a38:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	691a      	ldr	r2, [r3, #16]
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a44:	b2d2      	uxtb	r2, r2
 8005a46:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a4c:	1c5a      	adds	r2, r3, #1
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a56:	b29b      	uxth	r3, r3
 8005a58:	3b01      	subs	r3, #1
 8005a5a:	b29a      	uxth	r2, r3
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8005a60:	e099      	b.n	8005b96 <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 2U)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a66:	b29b      	uxth	r3, r3
 8005a68:	2b02      	cmp	r3, #2
 8005a6a:	f040 8081 	bne.w	8005b70 <I2C_MasterReceive_BTF+0x1bc>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	2b01      	cmp	r3, #1
 8005a72:	d002      	beq.n	8005a7a <I2C_MasterReceive_BTF+0xc6>
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	2b10      	cmp	r3, #16
 8005a78:	d108      	bne.n	8005a8c <I2C_MasterReceive_BTF+0xd8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	681a      	ldr	r2, [r3, #0]
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005a88:	601a      	str	r2, [r3, #0]
 8005a8a:	e019      	b.n	8005ac0 <I2C_MasterReceive_BTF+0x10c>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	2b04      	cmp	r3, #4
 8005a90:	d002      	beq.n	8005a98 <I2C_MasterReceive_BTF+0xe4>
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	2b02      	cmp	r3, #2
 8005a96:	d108      	bne.n	8005aaa <I2C_MasterReceive_BTF+0xf6>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	681a      	ldr	r2, [r3, #0]
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005aa6:	601a      	str	r2, [r3, #0]
 8005aa8:	e00a      	b.n	8005ac0 <I2C_MasterReceive_BTF+0x10c>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	2b10      	cmp	r3, #16
 8005aae:	d007      	beq.n	8005ac0 <I2C_MasterReceive_BTF+0x10c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	681a      	ldr	r2, [r3, #0]
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005abe:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	691a      	ldr	r2, [r3, #16]
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005aca:	b2d2      	uxtb	r2, r2
 8005acc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ad2:	1c5a      	adds	r2, r3, #1
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005adc:	b29b      	uxth	r3, r3
 8005ade:	3b01      	subs	r3, #1
 8005ae0:	b29a      	uxth	r2, r3
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	691a      	ldr	r2, [r3, #16]
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005af0:	b2d2      	uxtb	r2, r2
 8005af2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005af8:	1c5a      	adds	r2, r3, #1
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b02:	b29b      	uxth	r3, r3
 8005b04:	3b01      	subs	r3, #1
 8005b06:	b29a      	uxth	r2, r3
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	685a      	ldr	r2, [r3, #4]
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8005b1a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2220      	movs	r2, #32
 8005b20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005b2a:	b2db      	uxtb	r3, r3
 8005b2c:	2b40      	cmp	r3, #64	@ 0x40
 8005b2e:	d10a      	bne.n	8005b46 <I2C_MasterReceive_BTF+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2200      	movs	r2, #0
 8005b34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8005b3e:	6878      	ldr	r0, [r7, #4]
 8005b40:	f7ff fca8 	bl	8005494 <HAL_I2C_MemRxCpltCallback>
}
 8005b44:	e027      	b.n	8005b96 <I2C_MasterReceive_BTF+0x1e2>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	2200      	movs	r2, #0
 8005b4a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	2b08      	cmp	r3, #8
 8005b52:	d002      	beq.n	8005b5a <I2C_MasterReceive_BTF+0x1a6>
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	2b20      	cmp	r3, #32
 8005b58:	d103      	bne.n	8005b62 <I2C_MasterReceive_BTF+0x1ae>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	631a      	str	r2, [r3, #48]	@ 0x30
 8005b60:	e002      	b.n	8005b68 <I2C_MasterReceive_BTF+0x1b4>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2212      	movs	r2, #18
 8005b66:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8005b68:	6878      	ldr	r0, [r7, #4]
 8005b6a:	f7ff fc6b 	bl	8005444 <HAL_I2C_MasterRxCpltCallback>
}
 8005b6e:	e012      	b.n	8005b96 <I2C_MasterReceive_BTF+0x1e2>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	691a      	ldr	r2, [r3, #16]
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b7a:	b2d2      	uxtb	r2, r2
 8005b7c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b82:	1c5a      	adds	r2, r3, #1
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b8c:	b29b      	uxth	r3, r3
 8005b8e:	3b01      	subs	r3, #1
 8005b90:	b29a      	uxth	r2, r3
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8005b96:	bf00      	nop
 8005b98:	3710      	adds	r7, #16
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	bd80      	pop	{r7, pc}

08005b9e <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8005b9e:	b480      	push	{r7}
 8005ba0:	b083      	sub	sp, #12
 8005ba2:	af00      	add	r7, sp, #0
 8005ba4:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005bac:	b2db      	uxtb	r3, r3
 8005bae:	2b40      	cmp	r3, #64	@ 0x40
 8005bb0:	d117      	bne.n	8005be2 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d109      	bne.n	8005bce <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005bbe:	b2db      	uxtb	r3, r3
 8005bc0:	461a      	mov	r2, r3
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005bca:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8005bcc:	e067      	b.n	8005c9e <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005bd2:	b2db      	uxtb	r3, r3
 8005bd4:	f043 0301 	orr.w	r3, r3, #1
 8005bd8:	b2da      	uxtb	r2, r3
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	611a      	str	r2, [r3, #16]
}
 8005be0:	e05d      	b.n	8005c9e <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	691b      	ldr	r3, [r3, #16]
 8005be6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005bea:	d133      	bne.n	8005c54 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005bf2:	b2db      	uxtb	r3, r3
 8005bf4:	2b21      	cmp	r3, #33	@ 0x21
 8005bf6:	d109      	bne.n	8005c0c <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005bfc:	b2db      	uxtb	r3, r3
 8005bfe:	461a      	mov	r2, r3
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005c08:	611a      	str	r2, [r3, #16]
 8005c0a:	e008      	b.n	8005c1e <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c10:	b2db      	uxtb	r3, r3
 8005c12:	f043 0301 	orr.w	r3, r3, #1
 8005c16:	b2da      	uxtb	r2, r3
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d004      	beq.n	8005c30 <I2C_Master_SB+0x92>
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d108      	bne.n	8005c42 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d032      	beq.n	8005c9e <I2C_Master_SB+0x100>
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d02d      	beq.n	8005c9e <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	685a      	ldr	r2, [r3, #4]
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005c50:	605a      	str	r2, [r3, #4]
}
 8005c52:	e024      	b.n	8005c9e <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d10e      	bne.n	8005c7a <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c60:	b29b      	uxth	r3, r3
 8005c62:	11db      	asrs	r3, r3, #7
 8005c64:	b2db      	uxtb	r3, r3
 8005c66:	f003 0306 	and.w	r3, r3, #6
 8005c6a:	b2db      	uxtb	r3, r3
 8005c6c:	f063 030f 	orn	r3, r3, #15
 8005c70:	b2da      	uxtb	r2, r3
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	611a      	str	r2, [r3, #16]
}
 8005c78:	e011      	b.n	8005c9e <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c7e:	2b01      	cmp	r3, #1
 8005c80:	d10d      	bne.n	8005c9e <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c86:	b29b      	uxth	r3, r3
 8005c88:	11db      	asrs	r3, r3, #7
 8005c8a:	b2db      	uxtb	r3, r3
 8005c8c:	f003 0306 	and.w	r3, r3, #6
 8005c90:	b2db      	uxtb	r3, r3
 8005c92:	f063 030e 	orn	r3, r3, #14
 8005c96:	b2da      	uxtb	r2, r3
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	611a      	str	r2, [r3, #16]
}
 8005c9e:	bf00      	nop
 8005ca0:	370c      	adds	r7, #12
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca8:	4770      	bx	lr

08005caa <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8005caa:	b480      	push	{r7}
 8005cac:	b083      	sub	sp, #12
 8005cae:	af00      	add	r7, sp, #0
 8005cb0:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005cb6:	b2da      	uxtb	r2, r3
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d004      	beq.n	8005cd0 <I2C_Master_ADD10+0x26>
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005cca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d108      	bne.n	8005ce2 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d00c      	beq.n	8005cf2 <I2C_Master_ADD10+0x48>
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cdc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d007      	beq.n	8005cf2 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	685a      	ldr	r2, [r3, #4]
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005cf0:	605a      	str	r2, [r3, #4]
  }
}
 8005cf2:	bf00      	nop
 8005cf4:	370c      	adds	r7, #12
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfc:	4770      	bx	lr

08005cfe <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8005cfe:	b480      	push	{r7}
 8005d00:	b091      	sub	sp, #68	@ 0x44
 8005d02:	af00      	add	r7, sp, #0
 8005d04:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005d0c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d14:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d1a:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005d22:	b2db      	uxtb	r3, r3
 8005d24:	2b22      	cmp	r3, #34	@ 0x22
 8005d26:	f040 8169 	bne.w	8005ffc <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d10f      	bne.n	8005d52 <I2C_Master_ADDR+0x54>
 8005d32:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8005d36:	2b40      	cmp	r3, #64	@ 0x40
 8005d38:	d10b      	bne.n	8005d52 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	633b      	str	r3, [r7, #48]	@ 0x30
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	695b      	ldr	r3, [r3, #20]
 8005d44:	633b      	str	r3, [r7, #48]	@ 0x30
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	699b      	ldr	r3, [r3, #24]
 8005d4c:	633b      	str	r3, [r7, #48]	@ 0x30
 8005d4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d50:	e160      	b.n	8006014 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d11d      	bne.n	8005d96 <I2C_Master_ADDR+0x98>
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	691b      	ldr	r3, [r3, #16]
 8005d5e:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8005d62:	d118      	bne.n	8005d96 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d64:	2300      	movs	r3, #0
 8005d66:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	695b      	ldr	r3, [r3, #20]
 8005d6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	699b      	ldr	r3, [r3, #24]
 8005d76:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005d78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	681a      	ldr	r2, [r3, #0]
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005d88:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d8e:	1c5a      	adds	r2, r3, #1
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	651a      	str	r2, [r3, #80]	@ 0x50
 8005d94:	e13e      	b.n	8006014 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d9a:	b29b      	uxth	r3, r3
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d113      	bne.n	8005dc8 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005da0:	2300      	movs	r3, #0
 8005da2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	695b      	ldr	r3, [r3, #20]
 8005daa:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	699b      	ldr	r3, [r3, #24]
 8005db2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005db4:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	681a      	ldr	r2, [r3, #0]
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005dc4:	601a      	str	r2, [r3, #0]
 8005dc6:	e115      	b.n	8005ff4 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005dcc:	b29b      	uxth	r3, r3
 8005dce:	2b01      	cmp	r3, #1
 8005dd0:	f040 808a 	bne.w	8005ee8 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8005dd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005dd6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005dda:	d137      	bne.n	8005e4c <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	681a      	ldr	r2, [r3, #0]
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005dea:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	685b      	ldr	r3, [r3, #4]
 8005df2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005df6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005dfa:	d113      	bne.n	8005e24 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	681a      	ldr	r2, [r3, #0]
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005e0a:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	695b      	ldr	r3, [r3, #20]
 8005e16:	627b      	str	r3, [r7, #36]	@ 0x24
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	699b      	ldr	r3, [r3, #24]
 8005e1e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005e20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e22:	e0e7      	b.n	8005ff4 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e24:	2300      	movs	r3, #0
 8005e26:	623b      	str	r3, [r7, #32]
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	695b      	ldr	r3, [r3, #20]
 8005e2e:	623b      	str	r3, [r7, #32]
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	699b      	ldr	r3, [r3, #24]
 8005e36:	623b      	str	r3, [r7, #32]
 8005e38:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	681a      	ldr	r2, [r3, #0]
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005e48:	601a      	str	r2, [r3, #0]
 8005e4a:	e0d3      	b.n	8005ff4 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8005e4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e4e:	2b08      	cmp	r3, #8
 8005e50:	d02e      	beq.n	8005eb0 <I2C_Master_ADDR+0x1b2>
 8005e52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e54:	2b20      	cmp	r3, #32
 8005e56:	d02b      	beq.n	8005eb0 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8005e58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e5a:	2b12      	cmp	r3, #18
 8005e5c:	d102      	bne.n	8005e64 <I2C_Master_ADDR+0x166>
 8005e5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e60:	2b01      	cmp	r3, #1
 8005e62:	d125      	bne.n	8005eb0 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005e64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e66:	2b04      	cmp	r3, #4
 8005e68:	d00e      	beq.n	8005e88 <I2C_Master_ADDR+0x18a>
 8005e6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e6c:	2b02      	cmp	r3, #2
 8005e6e:	d00b      	beq.n	8005e88 <I2C_Master_ADDR+0x18a>
 8005e70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e72:	2b10      	cmp	r3, #16
 8005e74:	d008      	beq.n	8005e88 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	681a      	ldr	r2, [r3, #0]
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005e84:	601a      	str	r2, [r3, #0]
 8005e86:	e007      	b.n	8005e98 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	681a      	ldr	r2, [r3, #0]
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005e96:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e98:	2300      	movs	r3, #0
 8005e9a:	61fb      	str	r3, [r7, #28]
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	695b      	ldr	r3, [r3, #20]
 8005ea2:	61fb      	str	r3, [r7, #28]
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	699b      	ldr	r3, [r3, #24]
 8005eaa:	61fb      	str	r3, [r7, #28]
 8005eac:	69fb      	ldr	r3, [r7, #28]
 8005eae:	e0a1      	b.n	8005ff4 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	681a      	ldr	r2, [r3, #0]
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005ebe:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	61bb      	str	r3, [r7, #24]
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	695b      	ldr	r3, [r3, #20]
 8005eca:	61bb      	str	r3, [r7, #24]
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	699b      	ldr	r3, [r3, #24]
 8005ed2:	61bb      	str	r3, [r7, #24]
 8005ed4:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	681a      	ldr	r2, [r3, #0]
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005ee4:	601a      	str	r2, [r3, #0]
 8005ee6:	e085      	b.n	8005ff4 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005eec:	b29b      	uxth	r3, r3
 8005eee:	2b02      	cmp	r3, #2
 8005ef0:	d14d      	bne.n	8005f8e <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005ef2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ef4:	2b04      	cmp	r3, #4
 8005ef6:	d016      	beq.n	8005f26 <I2C_Master_ADDR+0x228>
 8005ef8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005efa:	2b02      	cmp	r3, #2
 8005efc:	d013      	beq.n	8005f26 <I2C_Master_ADDR+0x228>
 8005efe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f00:	2b10      	cmp	r3, #16
 8005f02:	d010      	beq.n	8005f26 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	681a      	ldr	r2, [r3, #0]
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005f12:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	681a      	ldr	r2, [r3, #0]
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005f22:	601a      	str	r2, [r3, #0]
 8005f24:	e007      	b.n	8005f36 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	681a      	ldr	r2, [r3, #0]
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005f34:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	685b      	ldr	r3, [r3, #4]
 8005f3c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005f40:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005f44:	d117      	bne.n	8005f76 <I2C_Master_ADDR+0x278>
 8005f46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f48:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005f4c:	d00b      	beq.n	8005f66 <I2C_Master_ADDR+0x268>
 8005f4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f50:	2b01      	cmp	r3, #1
 8005f52:	d008      	beq.n	8005f66 <I2C_Master_ADDR+0x268>
 8005f54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f56:	2b08      	cmp	r3, #8
 8005f58:	d005      	beq.n	8005f66 <I2C_Master_ADDR+0x268>
 8005f5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f5c:	2b10      	cmp	r3, #16
 8005f5e:	d002      	beq.n	8005f66 <I2C_Master_ADDR+0x268>
 8005f60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f62:	2b20      	cmp	r3, #32
 8005f64:	d107      	bne.n	8005f76 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	685a      	ldr	r2, [r3, #4]
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005f74:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f76:	2300      	movs	r3, #0
 8005f78:	617b      	str	r3, [r7, #20]
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	695b      	ldr	r3, [r3, #20]
 8005f80:	617b      	str	r3, [r7, #20]
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	699b      	ldr	r3, [r3, #24]
 8005f88:	617b      	str	r3, [r7, #20]
 8005f8a:	697b      	ldr	r3, [r7, #20]
 8005f8c:	e032      	b.n	8005ff4 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	681a      	ldr	r2, [r3, #0]
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005f9c:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	685b      	ldr	r3, [r3, #4]
 8005fa4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005fa8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005fac:	d117      	bne.n	8005fde <I2C_Master_ADDR+0x2e0>
 8005fae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fb0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005fb4:	d00b      	beq.n	8005fce <I2C_Master_ADDR+0x2d0>
 8005fb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fb8:	2b01      	cmp	r3, #1
 8005fba:	d008      	beq.n	8005fce <I2C_Master_ADDR+0x2d0>
 8005fbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fbe:	2b08      	cmp	r3, #8
 8005fc0:	d005      	beq.n	8005fce <I2C_Master_ADDR+0x2d0>
 8005fc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fc4:	2b10      	cmp	r3, #16
 8005fc6:	d002      	beq.n	8005fce <I2C_Master_ADDR+0x2d0>
 8005fc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fca:	2b20      	cmp	r3, #32
 8005fcc:	d107      	bne.n	8005fde <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	685a      	ldr	r2, [r3, #4]
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005fdc:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005fde:	2300      	movs	r3, #0
 8005fe0:	613b      	str	r3, [r7, #16]
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	695b      	ldr	r3, [r3, #20]
 8005fe8:	613b      	str	r3, [r7, #16]
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	699b      	ldr	r3, [r3, #24]
 8005ff0:	613b      	str	r3, [r7, #16]
 8005ff2:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8005ffa:	e00b      	b.n	8006014 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	60fb      	str	r3, [r7, #12]
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	695b      	ldr	r3, [r3, #20]
 8006006:	60fb      	str	r3, [r7, #12]
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	699b      	ldr	r3, [r3, #24]
 800600e:	60fb      	str	r3, [r7, #12]
 8006010:	68fb      	ldr	r3, [r7, #12]
}
 8006012:	e7ff      	b.n	8006014 <I2C_Master_ADDR+0x316>
 8006014:	bf00      	nop
 8006016:	3744      	adds	r7, #68	@ 0x44
 8006018:	46bd      	mov	sp, r7
 800601a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601e:	4770      	bx	lr

08006020 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8006020:	b580      	push	{r7, lr}
 8006022:	b084      	sub	sp, #16
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800602e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006034:	b29b      	uxth	r3, r3
 8006036:	2b00      	cmp	r3, #0
 8006038:	d02b      	beq.n	8006092 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800603e:	781a      	ldrb	r2, [r3, #0]
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800604a:	1c5a      	adds	r2, r3, #1
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006054:	b29b      	uxth	r3, r3
 8006056:	3b01      	subs	r3, #1
 8006058:	b29a      	uxth	r2, r3
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006062:	b29b      	uxth	r3, r3
 8006064:	2b00      	cmp	r3, #0
 8006066:	d114      	bne.n	8006092 <I2C_SlaveTransmit_TXE+0x72>
 8006068:	7bfb      	ldrb	r3, [r7, #15]
 800606a:	2b29      	cmp	r3, #41	@ 0x29
 800606c:	d111      	bne.n	8006092 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	685a      	ldr	r2, [r3, #4]
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800607c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2221      	movs	r2, #33	@ 0x21
 8006082:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2228      	movs	r2, #40	@ 0x28
 8006088:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800608c:	6878      	ldr	r0, [r7, #4]
 800608e:	f7ff f9e3 	bl	8005458 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8006092:	bf00      	nop
 8006094:	3710      	adds	r7, #16
 8006096:	46bd      	mov	sp, r7
 8006098:	bd80      	pop	{r7, pc}

0800609a <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800609a:	b480      	push	{r7}
 800609c:	b083      	sub	sp, #12
 800609e:	af00      	add	r7, sp, #0
 80060a0:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80060a6:	b29b      	uxth	r3, r3
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d011      	beq.n	80060d0 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060b0:	781a      	ldrb	r2, [r3, #0]
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060bc:	1c5a      	adds	r2, r3, #1
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80060c6:	b29b      	uxth	r3, r3
 80060c8:	3b01      	subs	r3, #1
 80060ca:	b29a      	uxth	r2, r3
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 80060d0:	bf00      	nop
 80060d2:	370c      	adds	r7, #12
 80060d4:	46bd      	mov	sp, r7
 80060d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060da:	4770      	bx	lr

080060dc <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80060dc:	b580      	push	{r7, lr}
 80060de:	b084      	sub	sp, #16
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80060ea:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80060f0:	b29b      	uxth	r3, r3
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d02c      	beq.n	8006150 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	691a      	ldr	r2, [r3, #16]
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006100:	b2d2      	uxtb	r2, r2
 8006102:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006108:	1c5a      	adds	r2, r3, #1
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006112:	b29b      	uxth	r3, r3
 8006114:	3b01      	subs	r3, #1
 8006116:	b29a      	uxth	r2, r3
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006120:	b29b      	uxth	r3, r3
 8006122:	2b00      	cmp	r3, #0
 8006124:	d114      	bne.n	8006150 <I2C_SlaveReceive_RXNE+0x74>
 8006126:	7bfb      	ldrb	r3, [r7, #15]
 8006128:	2b2a      	cmp	r3, #42	@ 0x2a
 800612a:	d111      	bne.n	8006150 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	685a      	ldr	r2, [r3, #4]
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800613a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2222      	movs	r2, #34	@ 0x22
 8006140:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	2228      	movs	r2, #40	@ 0x28
 8006146:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800614a:	6878      	ldr	r0, [r7, #4]
 800614c:	f7fc ffb4 	bl	80030b8 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8006150:	bf00      	nop
 8006152:	3710      	adds	r7, #16
 8006154:	46bd      	mov	sp, r7
 8006156:	bd80      	pop	{r7, pc}

08006158 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8006158:	b480      	push	{r7}
 800615a:	b083      	sub	sp, #12
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006164:	b29b      	uxth	r3, r3
 8006166:	2b00      	cmp	r3, #0
 8006168:	d012      	beq.n	8006190 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	691a      	ldr	r2, [r3, #16]
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006174:	b2d2      	uxtb	r2, r2
 8006176:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800617c:	1c5a      	adds	r2, r3, #1
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006186:	b29b      	uxth	r3, r3
 8006188:	3b01      	subs	r3, #1
 800618a:	b29a      	uxth	r2, r3
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8006190:	bf00      	nop
 8006192:	370c      	adds	r7, #12
 8006194:	46bd      	mov	sp, r7
 8006196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619a:	4770      	bx	lr

0800619c <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800619c:	b580      	push	{r7, lr}
 800619e:	b084      	sub	sp, #16
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
 80061a4:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80061a6:	2300      	movs	r3, #0
 80061a8:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80061b0:	b2db      	uxtb	r3, r3
 80061b2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80061b6:	2b28      	cmp	r3, #40	@ 0x28
 80061b8:	d125      	bne.n	8006206 <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	685a      	ldr	r2, [r3, #4]
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80061c8:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	f003 0304 	and.w	r3, r3, #4
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d101      	bne.n	80061d8 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80061d4:	2301      	movs	r3, #1
 80061d6:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d103      	bne.n	80061ea <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	68db      	ldr	r3, [r3, #12]
 80061e6:	81bb      	strh	r3, [r7, #12]
 80061e8:	e002      	b.n	80061f0 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	699b      	ldr	r3, [r3, #24]
 80061ee:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2200      	movs	r2, #0
 80061f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80061f8:	89ba      	ldrh	r2, [r7, #12]
 80061fa:	7bfb      	ldrb	r3, [r7, #15]
 80061fc:	4619      	mov	r1, r3
 80061fe:	6878      	ldr	r0, [r7, #4]
 8006200:	f7fd f8bc 	bl	800337c <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8006204:	e00e      	b.n	8006224 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006206:	2300      	movs	r3, #0
 8006208:	60bb      	str	r3, [r7, #8]
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	695b      	ldr	r3, [r3, #20]
 8006210:	60bb      	str	r3, [r7, #8]
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	699b      	ldr	r3, [r3, #24]
 8006218:	60bb      	str	r3, [r7, #8]
 800621a:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2200      	movs	r2, #0
 8006220:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8006224:	bf00      	nop
 8006226:	3710      	adds	r7, #16
 8006228:	46bd      	mov	sp, r7
 800622a:	bd80      	pop	{r7, pc}

0800622c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 800622c:	b580      	push	{r7, lr}
 800622e:	b084      	sub	sp, #16
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800623a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	685a      	ldr	r2, [r3, #4]
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800624a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800624c:	2300      	movs	r3, #0
 800624e:	60bb      	str	r3, [r7, #8]
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	695b      	ldr	r3, [r3, #20]
 8006256:	60bb      	str	r3, [r7, #8]
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	681a      	ldr	r2, [r3, #0]
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f042 0201 	orr.w	r2, r2, #1
 8006266:	601a      	str	r2, [r3, #0]
 8006268:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	681a      	ldr	r2, [r3, #0]
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006278:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	685b      	ldr	r3, [r3, #4]
 8006280:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006284:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006288:	d172      	bne.n	8006370 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800628a:	7bfb      	ldrb	r3, [r7, #15]
 800628c:	2b22      	cmp	r3, #34	@ 0x22
 800628e:	d002      	beq.n	8006296 <I2C_Slave_STOPF+0x6a>
 8006290:	7bfb      	ldrb	r3, [r7, #15]
 8006292:	2b2a      	cmp	r3, #42	@ 0x2a
 8006294:	d135      	bne.n	8006302 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	685b      	ldr	r3, [r3, #4]
 800629e:	b29a      	uxth	r2, r3
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80062a8:	b29b      	uxth	r3, r3
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d005      	beq.n	80062ba <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062b2:	f043 0204 	orr.w	r2, r3, #4
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	685a      	ldr	r2, [r3, #4]
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80062c8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062ce:	4618      	mov	r0, r3
 80062d0:	f7fe fb3f 	bl	8004952 <HAL_DMA_GetState>
 80062d4:	4603      	mov	r3, r0
 80062d6:	2b01      	cmp	r3, #1
 80062d8:	d049      	beq.n	800636e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062de:	4a69      	ldr	r2, [pc, #420]	@ (8006484 <I2C_Slave_STOPF+0x258>)
 80062e0:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062e6:	4618      	mov	r0, r3
 80062e8:	f7fe fb11 	bl	800490e <HAL_DMA_Abort_IT>
 80062ec:	4603      	mov	r3, r0
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d03d      	beq.n	800636e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80062f8:	687a      	ldr	r2, [r7, #4]
 80062fa:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80062fc:	4610      	mov	r0, r2
 80062fe:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006300:	e035      	b.n	800636e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	685b      	ldr	r3, [r3, #4]
 800630a:	b29a      	uxth	r2, r3
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006314:	b29b      	uxth	r3, r3
 8006316:	2b00      	cmp	r3, #0
 8006318:	d005      	beq.n	8006326 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800631e:	f043 0204 	orr.w	r2, r3, #4
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	685a      	ldr	r2, [r3, #4]
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006334:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800633a:	4618      	mov	r0, r3
 800633c:	f7fe fb09 	bl	8004952 <HAL_DMA_GetState>
 8006340:	4603      	mov	r3, r0
 8006342:	2b01      	cmp	r3, #1
 8006344:	d014      	beq.n	8006370 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800634a:	4a4e      	ldr	r2, [pc, #312]	@ (8006484 <I2C_Slave_STOPF+0x258>)
 800634c:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006352:	4618      	mov	r0, r3
 8006354:	f7fe fadb 	bl	800490e <HAL_DMA_Abort_IT>
 8006358:	4603      	mov	r3, r0
 800635a:	2b00      	cmp	r3, #0
 800635c:	d008      	beq.n	8006370 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006362:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006364:	687a      	ldr	r2, [r7, #4]
 8006366:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006368:	4610      	mov	r0, r2
 800636a:	4798      	blx	r3
 800636c:	e000      	b.n	8006370 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800636e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006374:	b29b      	uxth	r3, r3
 8006376:	2b00      	cmp	r3, #0
 8006378:	d03e      	beq.n	80063f8 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	695b      	ldr	r3, [r3, #20]
 8006380:	f003 0304 	and.w	r3, r3, #4
 8006384:	2b04      	cmp	r3, #4
 8006386:	d112      	bne.n	80063ae <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	691a      	ldr	r2, [r3, #16]
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006392:	b2d2      	uxtb	r2, r2
 8006394:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800639a:	1c5a      	adds	r2, r3, #1
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80063a4:	b29b      	uxth	r3, r3
 80063a6:	3b01      	subs	r3, #1
 80063a8:	b29a      	uxth	r2, r3
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	695b      	ldr	r3, [r3, #20]
 80063b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063b8:	2b40      	cmp	r3, #64	@ 0x40
 80063ba:	d112      	bne.n	80063e2 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	691a      	ldr	r2, [r3, #16]
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063c6:	b2d2      	uxtb	r2, r2
 80063c8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063ce:	1c5a      	adds	r2, r3, #1
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80063d8:	b29b      	uxth	r3, r3
 80063da:	3b01      	subs	r3, #1
 80063dc:	b29a      	uxth	r2, r3
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80063e6:	b29b      	uxth	r3, r3
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d005      	beq.n	80063f8 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063f0:	f043 0204 	orr.w	r2, r3, #4
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d003      	beq.n	8006408 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8006400:	6878      	ldr	r0, [r7, #4]
 8006402:	f000 f843 	bl	800648c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8006406:	e039      	b.n	800647c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006408:	7bfb      	ldrb	r3, [r7, #15]
 800640a:	2b2a      	cmp	r3, #42	@ 0x2a
 800640c:	d109      	bne.n	8006422 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	2200      	movs	r2, #0
 8006412:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2228      	movs	r2, #40	@ 0x28
 8006418:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800641c:	6878      	ldr	r0, [r7, #4]
 800641e:	f7fc fe4b 	bl	80030b8 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006428:	b2db      	uxtb	r3, r3
 800642a:	2b28      	cmp	r3, #40	@ 0x28
 800642c:	d111      	bne.n	8006452 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	4a15      	ldr	r2, [pc, #84]	@ (8006488 <I2C_Slave_STOPF+0x25c>)
 8006432:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2200      	movs	r2, #0
 8006438:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	2220      	movs	r2, #32
 800643e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	2200      	movs	r2, #0
 8006446:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800644a:	6878      	ldr	r0, [r7, #4]
 800644c:	f7ff f80e 	bl	800546c <HAL_I2C_ListenCpltCallback>
}
 8006450:	e014      	b.n	800647c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006456:	2b22      	cmp	r3, #34	@ 0x22
 8006458:	d002      	beq.n	8006460 <I2C_Slave_STOPF+0x234>
 800645a:	7bfb      	ldrb	r3, [r7, #15]
 800645c:	2b22      	cmp	r3, #34	@ 0x22
 800645e:	d10d      	bne.n	800647c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2200      	movs	r2, #0
 8006464:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	2220      	movs	r2, #32
 800646a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	2200      	movs	r2, #0
 8006472:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006476:	6878      	ldr	r0, [r7, #4]
 8006478:	f7fc fe1e 	bl	80030b8 <HAL_I2C_SlaveRxCpltCallback>
}
 800647c:	bf00      	nop
 800647e:	3710      	adds	r7, #16
 8006480:	46bd      	mov	sp, r7
 8006482:	bd80      	pop	{r7, pc}
 8006484:	080066f1 	.word	0x080066f1
 8006488:	ffff0000 	.word	0xffff0000

0800648c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800648c:	b580      	push	{r7, lr}
 800648e:	b084      	sub	sp, #16
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800649a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80064a2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80064a4:	7bbb      	ldrb	r3, [r7, #14]
 80064a6:	2b10      	cmp	r3, #16
 80064a8:	d002      	beq.n	80064b0 <I2C_ITError+0x24>
 80064aa:	7bbb      	ldrb	r3, [r7, #14]
 80064ac:	2b40      	cmp	r3, #64	@ 0x40
 80064ae:	d10a      	bne.n	80064c6 <I2C_ITError+0x3a>
 80064b0:	7bfb      	ldrb	r3, [r7, #15]
 80064b2:	2b22      	cmp	r3, #34	@ 0x22
 80064b4:	d107      	bne.n	80064c6 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	681a      	ldr	r2, [r3, #0]
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80064c4:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80064c6:	7bfb      	ldrb	r3, [r7, #15]
 80064c8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80064cc:	2b28      	cmp	r3, #40	@ 0x28
 80064ce:	d107      	bne.n	80064e0 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2200      	movs	r2, #0
 80064d4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	2228      	movs	r2, #40	@ 0x28
 80064da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80064de:	e015      	b.n	800650c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	685b      	ldr	r3, [r3, #4]
 80064e6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80064ea:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80064ee:	d00a      	beq.n	8006506 <I2C_ITError+0x7a>
 80064f0:	7bfb      	ldrb	r3, [r7, #15]
 80064f2:	2b60      	cmp	r3, #96	@ 0x60
 80064f4:	d007      	beq.n	8006506 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	2220      	movs	r2, #32
 80064fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	2200      	movs	r2, #0
 8006502:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	2200      	movs	r2, #0
 800650a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	685b      	ldr	r3, [r3, #4]
 8006512:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006516:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800651a:	d162      	bne.n	80065e2 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	685a      	ldr	r2, [r3, #4]
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800652a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006530:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006534:	b2db      	uxtb	r3, r3
 8006536:	2b01      	cmp	r3, #1
 8006538:	d020      	beq.n	800657c <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800653e:	4a6a      	ldr	r2, [pc, #424]	@ (80066e8 <I2C_ITError+0x25c>)
 8006540:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006546:	4618      	mov	r0, r3
 8006548:	f7fe f9e1 	bl	800490e <HAL_DMA_Abort_IT>
 800654c:	4603      	mov	r3, r0
 800654e:	2b00      	cmp	r3, #0
 8006550:	f000 8089 	beq.w	8006666 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	681a      	ldr	r2, [r3, #0]
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f022 0201 	bic.w	r2, r2, #1
 8006562:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2220      	movs	r2, #32
 8006568:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006570:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006572:	687a      	ldr	r2, [r7, #4]
 8006574:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006576:	4610      	mov	r0, r2
 8006578:	4798      	blx	r3
 800657a:	e074      	b.n	8006666 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006580:	4a59      	ldr	r2, [pc, #356]	@ (80066e8 <I2C_ITError+0x25c>)
 8006582:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006588:	4618      	mov	r0, r3
 800658a:	f7fe f9c0 	bl	800490e <HAL_DMA_Abort_IT>
 800658e:	4603      	mov	r3, r0
 8006590:	2b00      	cmp	r3, #0
 8006592:	d068      	beq.n	8006666 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	695b      	ldr	r3, [r3, #20]
 800659a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800659e:	2b40      	cmp	r3, #64	@ 0x40
 80065a0:	d10b      	bne.n	80065ba <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	691a      	ldr	r2, [r3, #16]
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065ac:	b2d2      	uxtb	r2, r2
 80065ae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065b4:	1c5a      	adds	r2, r3, #1
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	681a      	ldr	r2, [r3, #0]
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f022 0201 	bic.w	r2, r2, #1
 80065c8:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	2220      	movs	r2, #32
 80065ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80065d8:	687a      	ldr	r2, [r7, #4]
 80065da:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80065dc:	4610      	mov	r0, r2
 80065de:	4798      	blx	r3
 80065e0:	e041      	b.n	8006666 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80065e8:	b2db      	uxtb	r3, r3
 80065ea:	2b60      	cmp	r3, #96	@ 0x60
 80065ec:	d125      	bne.n	800663a <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	2220      	movs	r2, #32
 80065f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	2200      	movs	r2, #0
 80065fa:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	695b      	ldr	r3, [r3, #20]
 8006602:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006606:	2b40      	cmp	r3, #64	@ 0x40
 8006608:	d10b      	bne.n	8006622 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	691a      	ldr	r2, [r3, #16]
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006614:	b2d2      	uxtb	r2, r2
 8006616:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800661c:	1c5a      	adds	r2, r3, #1
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	681a      	ldr	r2, [r3, #0]
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f022 0201 	bic.w	r2, r2, #1
 8006630:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006632:	6878      	ldr	r0, [r7, #4]
 8006634:	f7fe ff42 	bl	80054bc <HAL_I2C_AbortCpltCallback>
 8006638:	e015      	b.n	8006666 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	695b      	ldr	r3, [r3, #20]
 8006640:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006644:	2b40      	cmp	r3, #64	@ 0x40
 8006646:	d10b      	bne.n	8006660 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	691a      	ldr	r2, [r3, #16]
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006652:	b2d2      	uxtb	r2, r2
 8006654:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800665a:	1c5a      	adds	r2, r3, #1
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8006660:	6878      	ldr	r0, [r7, #4]
 8006662:	f7fe ff21 	bl	80054a8 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800666a:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800666c:	68bb      	ldr	r3, [r7, #8]
 800666e:	f003 0301 	and.w	r3, r3, #1
 8006672:	2b00      	cmp	r3, #0
 8006674:	d10e      	bne.n	8006694 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8006676:	68bb      	ldr	r3, [r7, #8]
 8006678:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800667c:	2b00      	cmp	r3, #0
 800667e:	d109      	bne.n	8006694 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8006680:	68bb      	ldr	r3, [r7, #8]
 8006682:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8006686:	2b00      	cmp	r3, #0
 8006688:	d104      	bne.n	8006694 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800668a:	68bb      	ldr	r3, [r7, #8]
 800668c:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8006690:	2b00      	cmp	r3, #0
 8006692:	d007      	beq.n	80066a4 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	685a      	ldr	r2, [r3, #4]
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80066a2:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80066aa:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066b0:	f003 0304 	and.w	r3, r3, #4
 80066b4:	2b04      	cmp	r3, #4
 80066b6:	d113      	bne.n	80066e0 <I2C_ITError+0x254>
 80066b8:	7bfb      	ldrb	r3, [r7, #15]
 80066ba:	2b28      	cmp	r3, #40	@ 0x28
 80066bc:	d110      	bne.n	80066e0 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	4a0a      	ldr	r2, [pc, #40]	@ (80066ec <I2C_ITError+0x260>)
 80066c2:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2200      	movs	r2, #0
 80066c8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	2220      	movs	r2, #32
 80066ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	2200      	movs	r2, #0
 80066d6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80066da:	6878      	ldr	r0, [r7, #4]
 80066dc:	f7fe fec6 	bl	800546c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80066e0:	bf00      	nop
 80066e2:	3710      	adds	r7, #16
 80066e4:	46bd      	mov	sp, r7
 80066e6:	bd80      	pop	{r7, pc}
 80066e8:	080066f1 	.word	0x080066f1
 80066ec:	ffff0000 	.word	0xffff0000

080066f0 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b086      	sub	sp, #24
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80066f8:	2300      	movs	r3, #0
 80066fa:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006700:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006702:	697b      	ldr	r3, [r7, #20]
 8006704:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006708:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800670a:	4b4b      	ldr	r3, [pc, #300]	@ (8006838 <I2C_DMAAbort+0x148>)
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	08db      	lsrs	r3, r3, #3
 8006710:	4a4a      	ldr	r2, [pc, #296]	@ (800683c <I2C_DMAAbort+0x14c>)
 8006712:	fba2 2303 	umull	r2, r3, r2, r3
 8006716:	0a1a      	lsrs	r2, r3, #8
 8006718:	4613      	mov	r3, r2
 800671a:	009b      	lsls	r3, r3, #2
 800671c:	4413      	add	r3, r2
 800671e:	00da      	lsls	r2, r3, #3
 8006720:	1ad3      	subs	r3, r2, r3
 8006722:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d106      	bne.n	8006738 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800672a:	697b      	ldr	r3, [r7, #20]
 800672c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800672e:	f043 0220 	orr.w	r2, r3, #32
 8006732:	697b      	ldr	r3, [r7, #20]
 8006734:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8006736:	e00a      	b.n	800674e <I2C_DMAAbort+0x5e>
    }
    count--;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	3b01      	subs	r3, #1
 800673c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800673e:	697b      	ldr	r3, [r7, #20]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006748:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800674c:	d0ea      	beq.n	8006724 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800674e:	697b      	ldr	r3, [r7, #20]
 8006750:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006752:	2b00      	cmp	r3, #0
 8006754:	d003      	beq.n	800675e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8006756:	697b      	ldr	r3, [r7, #20]
 8006758:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800675a:	2200      	movs	r2, #0
 800675c:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800675e:	697b      	ldr	r3, [r7, #20]
 8006760:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006762:	2b00      	cmp	r3, #0
 8006764:	d003      	beq.n	800676e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8006766:	697b      	ldr	r3, [r7, #20]
 8006768:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800676a:	2200      	movs	r2, #0
 800676c:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800676e:	697b      	ldr	r3, [r7, #20]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	681a      	ldr	r2, [r3, #0]
 8006774:	697b      	ldr	r3, [r7, #20]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800677c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800677e:	697b      	ldr	r3, [r7, #20]
 8006780:	2200      	movs	r2, #0
 8006782:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8006784:	697b      	ldr	r3, [r7, #20]
 8006786:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006788:	2b00      	cmp	r3, #0
 800678a:	d003      	beq.n	8006794 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800678c:	697b      	ldr	r3, [r7, #20]
 800678e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006790:	2200      	movs	r2, #0
 8006792:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8006794:	697b      	ldr	r3, [r7, #20]
 8006796:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006798:	2b00      	cmp	r3, #0
 800679a:	d003      	beq.n	80067a4 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800679c:	697b      	ldr	r3, [r7, #20]
 800679e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067a0:	2200      	movs	r2, #0
 80067a2:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80067a4:	697b      	ldr	r3, [r7, #20]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	681a      	ldr	r2, [r3, #0]
 80067aa:	697b      	ldr	r3, [r7, #20]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f022 0201 	bic.w	r2, r2, #1
 80067b2:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80067b4:	697b      	ldr	r3, [r7, #20]
 80067b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80067ba:	b2db      	uxtb	r3, r3
 80067bc:	2b60      	cmp	r3, #96	@ 0x60
 80067be:	d10e      	bne.n	80067de <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80067c0:	697b      	ldr	r3, [r7, #20]
 80067c2:	2220      	movs	r2, #32
 80067c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80067c8:	697b      	ldr	r3, [r7, #20]
 80067ca:	2200      	movs	r2, #0
 80067cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80067d0:	697b      	ldr	r3, [r7, #20]
 80067d2:	2200      	movs	r2, #0
 80067d4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80067d6:	6978      	ldr	r0, [r7, #20]
 80067d8:	f7fe fe70 	bl	80054bc <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80067dc:	e027      	b.n	800682e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80067de:	7cfb      	ldrb	r3, [r7, #19]
 80067e0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80067e4:	2b28      	cmp	r3, #40	@ 0x28
 80067e6:	d117      	bne.n	8006818 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80067e8:	697b      	ldr	r3, [r7, #20]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	681a      	ldr	r2, [r3, #0]
 80067ee:	697b      	ldr	r3, [r7, #20]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	f042 0201 	orr.w	r2, r2, #1
 80067f6:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80067f8:	697b      	ldr	r3, [r7, #20]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	681a      	ldr	r2, [r3, #0]
 80067fe:	697b      	ldr	r3, [r7, #20]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006806:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8006808:	697b      	ldr	r3, [r7, #20]
 800680a:	2200      	movs	r2, #0
 800680c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800680e:	697b      	ldr	r3, [r7, #20]
 8006810:	2228      	movs	r2, #40	@ 0x28
 8006812:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8006816:	e007      	b.n	8006828 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8006818:	697b      	ldr	r3, [r7, #20]
 800681a:	2220      	movs	r2, #32
 800681c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006820:	697b      	ldr	r3, [r7, #20]
 8006822:	2200      	movs	r2, #0
 8006824:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8006828:	6978      	ldr	r0, [r7, #20]
 800682a:	f7fe fe3d 	bl	80054a8 <HAL_I2C_ErrorCallback>
}
 800682e:	bf00      	nop
 8006830:	3718      	adds	r7, #24
 8006832:	46bd      	mov	sp, r7
 8006834:	bd80      	pop	{r7, pc}
 8006836:	bf00      	nop
 8006838:	20000048 	.word	0x20000048
 800683c:	14f8b589 	.word	0x14f8b589

08006840 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8006840:	b480      	push	{r7}
 8006842:	b085      	sub	sp, #20
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006848:	2300      	movs	r3, #0
 800684a:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800684c:	4b13      	ldr	r3, [pc, #76]	@ (800689c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	08db      	lsrs	r3, r3, #3
 8006852:	4a13      	ldr	r2, [pc, #76]	@ (80068a0 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8006854:	fba2 2303 	umull	r2, r3, r2, r3
 8006858:	0a1a      	lsrs	r2, r3, #8
 800685a:	4613      	mov	r3, r2
 800685c:	009b      	lsls	r3, r3, #2
 800685e:	4413      	add	r3, r2
 8006860:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	3b01      	subs	r3, #1
 8006866:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	2b00      	cmp	r3, #0
 800686c:	d107      	bne.n	800687e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006872:	f043 0220 	orr.w	r2, r3, #32
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 800687a:	2301      	movs	r3, #1
 800687c:	e008      	b.n	8006890 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006888:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800688c:	d0e9      	beq.n	8006862 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800688e:	2300      	movs	r3, #0
}
 8006890:	4618      	mov	r0, r3
 8006892:	3714      	adds	r7, #20
 8006894:	46bd      	mov	sp, r7
 8006896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689a:	4770      	bx	lr
 800689c:	20000048 	.word	0x20000048
 80068a0:	14f8b589 	.word	0x14f8b589

080068a4 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80068a4:	b480      	push	{r7}
 80068a6:	b083      	sub	sp, #12
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068b0:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 80068b4:	d103      	bne.n	80068be <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	2201      	movs	r2, #1
 80068ba:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80068bc:	e007      	b.n	80068ce <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068c2:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80068c6:	d102      	bne.n	80068ce <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2208      	movs	r2, #8
 80068cc:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 80068ce:	bf00      	nop
 80068d0:	370c      	adds	r7, #12
 80068d2:	46bd      	mov	sp, r7
 80068d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d8:	4770      	bx	lr
	...

080068dc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80068dc:	b580      	push	{r7, lr}
 80068de:	b086      	sub	sp, #24
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d101      	bne.n	80068ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80068ea:	2301      	movs	r3, #1
 80068ec:	e267      	b.n	8006dbe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f003 0301 	and.w	r3, r3, #1
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d075      	beq.n	80069e6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80068fa:	4b88      	ldr	r3, [pc, #544]	@ (8006b1c <HAL_RCC_OscConfig+0x240>)
 80068fc:	689b      	ldr	r3, [r3, #8]
 80068fe:	f003 030c 	and.w	r3, r3, #12
 8006902:	2b04      	cmp	r3, #4
 8006904:	d00c      	beq.n	8006920 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006906:	4b85      	ldr	r3, [pc, #532]	@ (8006b1c <HAL_RCC_OscConfig+0x240>)
 8006908:	689b      	ldr	r3, [r3, #8]
 800690a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800690e:	2b08      	cmp	r3, #8
 8006910:	d112      	bne.n	8006938 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006912:	4b82      	ldr	r3, [pc, #520]	@ (8006b1c <HAL_RCC_OscConfig+0x240>)
 8006914:	685b      	ldr	r3, [r3, #4]
 8006916:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800691a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800691e:	d10b      	bne.n	8006938 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006920:	4b7e      	ldr	r3, [pc, #504]	@ (8006b1c <HAL_RCC_OscConfig+0x240>)
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006928:	2b00      	cmp	r3, #0
 800692a:	d05b      	beq.n	80069e4 <HAL_RCC_OscConfig+0x108>
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	685b      	ldr	r3, [r3, #4]
 8006930:	2b00      	cmp	r3, #0
 8006932:	d157      	bne.n	80069e4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006934:	2301      	movs	r3, #1
 8006936:	e242      	b.n	8006dbe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	685b      	ldr	r3, [r3, #4]
 800693c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006940:	d106      	bne.n	8006950 <HAL_RCC_OscConfig+0x74>
 8006942:	4b76      	ldr	r3, [pc, #472]	@ (8006b1c <HAL_RCC_OscConfig+0x240>)
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	4a75      	ldr	r2, [pc, #468]	@ (8006b1c <HAL_RCC_OscConfig+0x240>)
 8006948:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800694c:	6013      	str	r3, [r2, #0]
 800694e:	e01d      	b.n	800698c <HAL_RCC_OscConfig+0xb0>
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	685b      	ldr	r3, [r3, #4]
 8006954:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006958:	d10c      	bne.n	8006974 <HAL_RCC_OscConfig+0x98>
 800695a:	4b70      	ldr	r3, [pc, #448]	@ (8006b1c <HAL_RCC_OscConfig+0x240>)
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	4a6f      	ldr	r2, [pc, #444]	@ (8006b1c <HAL_RCC_OscConfig+0x240>)
 8006960:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006964:	6013      	str	r3, [r2, #0]
 8006966:	4b6d      	ldr	r3, [pc, #436]	@ (8006b1c <HAL_RCC_OscConfig+0x240>)
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	4a6c      	ldr	r2, [pc, #432]	@ (8006b1c <HAL_RCC_OscConfig+0x240>)
 800696c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006970:	6013      	str	r3, [r2, #0]
 8006972:	e00b      	b.n	800698c <HAL_RCC_OscConfig+0xb0>
 8006974:	4b69      	ldr	r3, [pc, #420]	@ (8006b1c <HAL_RCC_OscConfig+0x240>)
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	4a68      	ldr	r2, [pc, #416]	@ (8006b1c <HAL_RCC_OscConfig+0x240>)
 800697a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800697e:	6013      	str	r3, [r2, #0]
 8006980:	4b66      	ldr	r3, [pc, #408]	@ (8006b1c <HAL_RCC_OscConfig+0x240>)
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	4a65      	ldr	r2, [pc, #404]	@ (8006b1c <HAL_RCC_OscConfig+0x240>)
 8006986:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800698a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	685b      	ldr	r3, [r3, #4]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d013      	beq.n	80069bc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006994:	f7fd fe7a 	bl	800468c <HAL_GetTick>
 8006998:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800699a:	e008      	b.n	80069ae <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800699c:	f7fd fe76 	bl	800468c <HAL_GetTick>
 80069a0:	4602      	mov	r2, r0
 80069a2:	693b      	ldr	r3, [r7, #16]
 80069a4:	1ad3      	subs	r3, r2, r3
 80069a6:	2b64      	cmp	r3, #100	@ 0x64
 80069a8:	d901      	bls.n	80069ae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80069aa:	2303      	movs	r3, #3
 80069ac:	e207      	b.n	8006dbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80069ae:	4b5b      	ldr	r3, [pc, #364]	@ (8006b1c <HAL_RCC_OscConfig+0x240>)
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d0f0      	beq.n	800699c <HAL_RCC_OscConfig+0xc0>
 80069ba:	e014      	b.n	80069e6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80069bc:	f7fd fe66 	bl	800468c <HAL_GetTick>
 80069c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80069c2:	e008      	b.n	80069d6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80069c4:	f7fd fe62 	bl	800468c <HAL_GetTick>
 80069c8:	4602      	mov	r2, r0
 80069ca:	693b      	ldr	r3, [r7, #16]
 80069cc:	1ad3      	subs	r3, r2, r3
 80069ce:	2b64      	cmp	r3, #100	@ 0x64
 80069d0:	d901      	bls.n	80069d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80069d2:	2303      	movs	r3, #3
 80069d4:	e1f3      	b.n	8006dbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80069d6:	4b51      	ldr	r3, [pc, #324]	@ (8006b1c <HAL_RCC_OscConfig+0x240>)
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d1f0      	bne.n	80069c4 <HAL_RCC_OscConfig+0xe8>
 80069e2:	e000      	b.n	80069e6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80069e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f003 0302 	and.w	r3, r3, #2
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d063      	beq.n	8006aba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80069f2:	4b4a      	ldr	r3, [pc, #296]	@ (8006b1c <HAL_RCC_OscConfig+0x240>)
 80069f4:	689b      	ldr	r3, [r3, #8]
 80069f6:	f003 030c 	and.w	r3, r3, #12
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d00b      	beq.n	8006a16 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80069fe:	4b47      	ldr	r3, [pc, #284]	@ (8006b1c <HAL_RCC_OscConfig+0x240>)
 8006a00:	689b      	ldr	r3, [r3, #8]
 8006a02:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006a06:	2b08      	cmp	r3, #8
 8006a08:	d11c      	bne.n	8006a44 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006a0a:	4b44      	ldr	r3, [pc, #272]	@ (8006b1c <HAL_RCC_OscConfig+0x240>)
 8006a0c:	685b      	ldr	r3, [r3, #4]
 8006a0e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d116      	bne.n	8006a44 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006a16:	4b41      	ldr	r3, [pc, #260]	@ (8006b1c <HAL_RCC_OscConfig+0x240>)
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	f003 0302 	and.w	r3, r3, #2
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d005      	beq.n	8006a2e <HAL_RCC_OscConfig+0x152>
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	68db      	ldr	r3, [r3, #12]
 8006a26:	2b01      	cmp	r3, #1
 8006a28:	d001      	beq.n	8006a2e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006a2a:	2301      	movs	r3, #1
 8006a2c:	e1c7      	b.n	8006dbe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a2e:	4b3b      	ldr	r3, [pc, #236]	@ (8006b1c <HAL_RCC_OscConfig+0x240>)
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	691b      	ldr	r3, [r3, #16]
 8006a3a:	00db      	lsls	r3, r3, #3
 8006a3c:	4937      	ldr	r1, [pc, #220]	@ (8006b1c <HAL_RCC_OscConfig+0x240>)
 8006a3e:	4313      	orrs	r3, r2
 8006a40:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006a42:	e03a      	b.n	8006aba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	68db      	ldr	r3, [r3, #12]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d020      	beq.n	8006a8e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006a4c:	4b34      	ldr	r3, [pc, #208]	@ (8006b20 <HAL_RCC_OscConfig+0x244>)
 8006a4e:	2201      	movs	r2, #1
 8006a50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a52:	f7fd fe1b 	bl	800468c <HAL_GetTick>
 8006a56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006a58:	e008      	b.n	8006a6c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006a5a:	f7fd fe17 	bl	800468c <HAL_GetTick>
 8006a5e:	4602      	mov	r2, r0
 8006a60:	693b      	ldr	r3, [r7, #16]
 8006a62:	1ad3      	subs	r3, r2, r3
 8006a64:	2b02      	cmp	r3, #2
 8006a66:	d901      	bls.n	8006a6c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006a68:	2303      	movs	r3, #3
 8006a6a:	e1a8      	b.n	8006dbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006a6c:	4b2b      	ldr	r3, [pc, #172]	@ (8006b1c <HAL_RCC_OscConfig+0x240>)
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	f003 0302 	and.w	r3, r3, #2
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d0f0      	beq.n	8006a5a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a78:	4b28      	ldr	r3, [pc, #160]	@ (8006b1c <HAL_RCC_OscConfig+0x240>)
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	691b      	ldr	r3, [r3, #16]
 8006a84:	00db      	lsls	r3, r3, #3
 8006a86:	4925      	ldr	r1, [pc, #148]	@ (8006b1c <HAL_RCC_OscConfig+0x240>)
 8006a88:	4313      	orrs	r3, r2
 8006a8a:	600b      	str	r3, [r1, #0]
 8006a8c:	e015      	b.n	8006aba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006a8e:	4b24      	ldr	r3, [pc, #144]	@ (8006b20 <HAL_RCC_OscConfig+0x244>)
 8006a90:	2200      	movs	r2, #0
 8006a92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a94:	f7fd fdfa 	bl	800468c <HAL_GetTick>
 8006a98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006a9a:	e008      	b.n	8006aae <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006a9c:	f7fd fdf6 	bl	800468c <HAL_GetTick>
 8006aa0:	4602      	mov	r2, r0
 8006aa2:	693b      	ldr	r3, [r7, #16]
 8006aa4:	1ad3      	subs	r3, r2, r3
 8006aa6:	2b02      	cmp	r3, #2
 8006aa8:	d901      	bls.n	8006aae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006aaa:	2303      	movs	r3, #3
 8006aac:	e187      	b.n	8006dbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006aae:	4b1b      	ldr	r3, [pc, #108]	@ (8006b1c <HAL_RCC_OscConfig+0x240>)
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	f003 0302 	and.w	r3, r3, #2
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d1f0      	bne.n	8006a9c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	f003 0308 	and.w	r3, r3, #8
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d036      	beq.n	8006b34 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	695b      	ldr	r3, [r3, #20]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d016      	beq.n	8006afc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006ace:	4b15      	ldr	r3, [pc, #84]	@ (8006b24 <HAL_RCC_OscConfig+0x248>)
 8006ad0:	2201      	movs	r2, #1
 8006ad2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ad4:	f7fd fdda 	bl	800468c <HAL_GetTick>
 8006ad8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006ada:	e008      	b.n	8006aee <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006adc:	f7fd fdd6 	bl	800468c <HAL_GetTick>
 8006ae0:	4602      	mov	r2, r0
 8006ae2:	693b      	ldr	r3, [r7, #16]
 8006ae4:	1ad3      	subs	r3, r2, r3
 8006ae6:	2b02      	cmp	r3, #2
 8006ae8:	d901      	bls.n	8006aee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006aea:	2303      	movs	r3, #3
 8006aec:	e167      	b.n	8006dbe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006aee:	4b0b      	ldr	r3, [pc, #44]	@ (8006b1c <HAL_RCC_OscConfig+0x240>)
 8006af0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006af2:	f003 0302 	and.w	r3, r3, #2
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d0f0      	beq.n	8006adc <HAL_RCC_OscConfig+0x200>
 8006afa:	e01b      	b.n	8006b34 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006afc:	4b09      	ldr	r3, [pc, #36]	@ (8006b24 <HAL_RCC_OscConfig+0x248>)
 8006afe:	2200      	movs	r2, #0
 8006b00:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006b02:	f7fd fdc3 	bl	800468c <HAL_GetTick>
 8006b06:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006b08:	e00e      	b.n	8006b28 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006b0a:	f7fd fdbf 	bl	800468c <HAL_GetTick>
 8006b0e:	4602      	mov	r2, r0
 8006b10:	693b      	ldr	r3, [r7, #16]
 8006b12:	1ad3      	subs	r3, r2, r3
 8006b14:	2b02      	cmp	r3, #2
 8006b16:	d907      	bls.n	8006b28 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006b18:	2303      	movs	r3, #3
 8006b1a:	e150      	b.n	8006dbe <HAL_RCC_OscConfig+0x4e2>
 8006b1c:	40023800 	.word	0x40023800
 8006b20:	42470000 	.word	0x42470000
 8006b24:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006b28:	4b88      	ldr	r3, [pc, #544]	@ (8006d4c <HAL_RCC_OscConfig+0x470>)
 8006b2a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006b2c:	f003 0302 	and.w	r3, r3, #2
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d1ea      	bne.n	8006b0a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f003 0304 	and.w	r3, r3, #4
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	f000 8097 	beq.w	8006c70 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006b42:	2300      	movs	r3, #0
 8006b44:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006b46:	4b81      	ldr	r3, [pc, #516]	@ (8006d4c <HAL_RCC_OscConfig+0x470>)
 8006b48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d10f      	bne.n	8006b72 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006b52:	2300      	movs	r3, #0
 8006b54:	60bb      	str	r3, [r7, #8]
 8006b56:	4b7d      	ldr	r3, [pc, #500]	@ (8006d4c <HAL_RCC_OscConfig+0x470>)
 8006b58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b5a:	4a7c      	ldr	r2, [pc, #496]	@ (8006d4c <HAL_RCC_OscConfig+0x470>)
 8006b5c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006b60:	6413      	str	r3, [r2, #64]	@ 0x40
 8006b62:	4b7a      	ldr	r3, [pc, #488]	@ (8006d4c <HAL_RCC_OscConfig+0x470>)
 8006b64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006b6a:	60bb      	str	r3, [r7, #8]
 8006b6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006b6e:	2301      	movs	r3, #1
 8006b70:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b72:	4b77      	ldr	r3, [pc, #476]	@ (8006d50 <HAL_RCC_OscConfig+0x474>)
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d118      	bne.n	8006bb0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006b7e:	4b74      	ldr	r3, [pc, #464]	@ (8006d50 <HAL_RCC_OscConfig+0x474>)
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	4a73      	ldr	r2, [pc, #460]	@ (8006d50 <HAL_RCC_OscConfig+0x474>)
 8006b84:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006b88:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006b8a:	f7fd fd7f 	bl	800468c <HAL_GetTick>
 8006b8e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b90:	e008      	b.n	8006ba4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006b92:	f7fd fd7b 	bl	800468c <HAL_GetTick>
 8006b96:	4602      	mov	r2, r0
 8006b98:	693b      	ldr	r3, [r7, #16]
 8006b9a:	1ad3      	subs	r3, r2, r3
 8006b9c:	2b02      	cmp	r3, #2
 8006b9e:	d901      	bls.n	8006ba4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006ba0:	2303      	movs	r3, #3
 8006ba2:	e10c      	b.n	8006dbe <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006ba4:	4b6a      	ldr	r3, [pc, #424]	@ (8006d50 <HAL_RCC_OscConfig+0x474>)
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d0f0      	beq.n	8006b92 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	689b      	ldr	r3, [r3, #8]
 8006bb4:	2b01      	cmp	r3, #1
 8006bb6:	d106      	bne.n	8006bc6 <HAL_RCC_OscConfig+0x2ea>
 8006bb8:	4b64      	ldr	r3, [pc, #400]	@ (8006d4c <HAL_RCC_OscConfig+0x470>)
 8006bba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006bbc:	4a63      	ldr	r2, [pc, #396]	@ (8006d4c <HAL_RCC_OscConfig+0x470>)
 8006bbe:	f043 0301 	orr.w	r3, r3, #1
 8006bc2:	6713      	str	r3, [r2, #112]	@ 0x70
 8006bc4:	e01c      	b.n	8006c00 <HAL_RCC_OscConfig+0x324>
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	689b      	ldr	r3, [r3, #8]
 8006bca:	2b05      	cmp	r3, #5
 8006bcc:	d10c      	bne.n	8006be8 <HAL_RCC_OscConfig+0x30c>
 8006bce:	4b5f      	ldr	r3, [pc, #380]	@ (8006d4c <HAL_RCC_OscConfig+0x470>)
 8006bd0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006bd2:	4a5e      	ldr	r2, [pc, #376]	@ (8006d4c <HAL_RCC_OscConfig+0x470>)
 8006bd4:	f043 0304 	orr.w	r3, r3, #4
 8006bd8:	6713      	str	r3, [r2, #112]	@ 0x70
 8006bda:	4b5c      	ldr	r3, [pc, #368]	@ (8006d4c <HAL_RCC_OscConfig+0x470>)
 8006bdc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006bde:	4a5b      	ldr	r2, [pc, #364]	@ (8006d4c <HAL_RCC_OscConfig+0x470>)
 8006be0:	f043 0301 	orr.w	r3, r3, #1
 8006be4:	6713      	str	r3, [r2, #112]	@ 0x70
 8006be6:	e00b      	b.n	8006c00 <HAL_RCC_OscConfig+0x324>
 8006be8:	4b58      	ldr	r3, [pc, #352]	@ (8006d4c <HAL_RCC_OscConfig+0x470>)
 8006bea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006bec:	4a57      	ldr	r2, [pc, #348]	@ (8006d4c <HAL_RCC_OscConfig+0x470>)
 8006bee:	f023 0301 	bic.w	r3, r3, #1
 8006bf2:	6713      	str	r3, [r2, #112]	@ 0x70
 8006bf4:	4b55      	ldr	r3, [pc, #340]	@ (8006d4c <HAL_RCC_OscConfig+0x470>)
 8006bf6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006bf8:	4a54      	ldr	r2, [pc, #336]	@ (8006d4c <HAL_RCC_OscConfig+0x470>)
 8006bfa:	f023 0304 	bic.w	r3, r3, #4
 8006bfe:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	689b      	ldr	r3, [r3, #8]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d015      	beq.n	8006c34 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c08:	f7fd fd40 	bl	800468c <HAL_GetTick>
 8006c0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c0e:	e00a      	b.n	8006c26 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006c10:	f7fd fd3c 	bl	800468c <HAL_GetTick>
 8006c14:	4602      	mov	r2, r0
 8006c16:	693b      	ldr	r3, [r7, #16]
 8006c18:	1ad3      	subs	r3, r2, r3
 8006c1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006c1e:	4293      	cmp	r3, r2
 8006c20:	d901      	bls.n	8006c26 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006c22:	2303      	movs	r3, #3
 8006c24:	e0cb      	b.n	8006dbe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c26:	4b49      	ldr	r3, [pc, #292]	@ (8006d4c <HAL_RCC_OscConfig+0x470>)
 8006c28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006c2a:	f003 0302 	and.w	r3, r3, #2
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d0ee      	beq.n	8006c10 <HAL_RCC_OscConfig+0x334>
 8006c32:	e014      	b.n	8006c5e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006c34:	f7fd fd2a 	bl	800468c <HAL_GetTick>
 8006c38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006c3a:	e00a      	b.n	8006c52 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006c3c:	f7fd fd26 	bl	800468c <HAL_GetTick>
 8006c40:	4602      	mov	r2, r0
 8006c42:	693b      	ldr	r3, [r7, #16]
 8006c44:	1ad3      	subs	r3, r2, r3
 8006c46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006c4a:	4293      	cmp	r3, r2
 8006c4c:	d901      	bls.n	8006c52 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006c4e:	2303      	movs	r3, #3
 8006c50:	e0b5      	b.n	8006dbe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006c52:	4b3e      	ldr	r3, [pc, #248]	@ (8006d4c <HAL_RCC_OscConfig+0x470>)
 8006c54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006c56:	f003 0302 	and.w	r3, r3, #2
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d1ee      	bne.n	8006c3c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006c5e:	7dfb      	ldrb	r3, [r7, #23]
 8006c60:	2b01      	cmp	r3, #1
 8006c62:	d105      	bne.n	8006c70 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006c64:	4b39      	ldr	r3, [pc, #228]	@ (8006d4c <HAL_RCC_OscConfig+0x470>)
 8006c66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c68:	4a38      	ldr	r2, [pc, #224]	@ (8006d4c <HAL_RCC_OscConfig+0x470>)
 8006c6a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006c6e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	699b      	ldr	r3, [r3, #24]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	f000 80a1 	beq.w	8006dbc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006c7a:	4b34      	ldr	r3, [pc, #208]	@ (8006d4c <HAL_RCC_OscConfig+0x470>)
 8006c7c:	689b      	ldr	r3, [r3, #8]
 8006c7e:	f003 030c 	and.w	r3, r3, #12
 8006c82:	2b08      	cmp	r3, #8
 8006c84:	d05c      	beq.n	8006d40 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	699b      	ldr	r3, [r3, #24]
 8006c8a:	2b02      	cmp	r3, #2
 8006c8c:	d141      	bne.n	8006d12 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c8e:	4b31      	ldr	r3, [pc, #196]	@ (8006d54 <HAL_RCC_OscConfig+0x478>)
 8006c90:	2200      	movs	r2, #0
 8006c92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c94:	f7fd fcfa 	bl	800468c <HAL_GetTick>
 8006c98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c9a:	e008      	b.n	8006cae <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006c9c:	f7fd fcf6 	bl	800468c <HAL_GetTick>
 8006ca0:	4602      	mov	r2, r0
 8006ca2:	693b      	ldr	r3, [r7, #16]
 8006ca4:	1ad3      	subs	r3, r2, r3
 8006ca6:	2b02      	cmp	r3, #2
 8006ca8:	d901      	bls.n	8006cae <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006caa:	2303      	movs	r3, #3
 8006cac:	e087      	b.n	8006dbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006cae:	4b27      	ldr	r3, [pc, #156]	@ (8006d4c <HAL_RCC_OscConfig+0x470>)
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d1f0      	bne.n	8006c9c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	69da      	ldr	r2, [r3, #28]
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	6a1b      	ldr	r3, [r3, #32]
 8006cc2:	431a      	orrs	r2, r3
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cc8:	019b      	lsls	r3, r3, #6
 8006cca:	431a      	orrs	r2, r3
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cd0:	085b      	lsrs	r3, r3, #1
 8006cd2:	3b01      	subs	r3, #1
 8006cd4:	041b      	lsls	r3, r3, #16
 8006cd6:	431a      	orrs	r2, r3
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cdc:	061b      	lsls	r3, r3, #24
 8006cde:	491b      	ldr	r1, [pc, #108]	@ (8006d4c <HAL_RCC_OscConfig+0x470>)
 8006ce0:	4313      	orrs	r3, r2
 8006ce2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006ce4:	4b1b      	ldr	r3, [pc, #108]	@ (8006d54 <HAL_RCC_OscConfig+0x478>)
 8006ce6:	2201      	movs	r2, #1
 8006ce8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006cea:	f7fd fccf 	bl	800468c <HAL_GetTick>
 8006cee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006cf0:	e008      	b.n	8006d04 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006cf2:	f7fd fccb 	bl	800468c <HAL_GetTick>
 8006cf6:	4602      	mov	r2, r0
 8006cf8:	693b      	ldr	r3, [r7, #16]
 8006cfa:	1ad3      	subs	r3, r2, r3
 8006cfc:	2b02      	cmp	r3, #2
 8006cfe:	d901      	bls.n	8006d04 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006d00:	2303      	movs	r3, #3
 8006d02:	e05c      	b.n	8006dbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006d04:	4b11      	ldr	r3, [pc, #68]	@ (8006d4c <HAL_RCC_OscConfig+0x470>)
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d0f0      	beq.n	8006cf2 <HAL_RCC_OscConfig+0x416>
 8006d10:	e054      	b.n	8006dbc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006d12:	4b10      	ldr	r3, [pc, #64]	@ (8006d54 <HAL_RCC_OscConfig+0x478>)
 8006d14:	2200      	movs	r2, #0
 8006d16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d18:	f7fd fcb8 	bl	800468c <HAL_GetTick>
 8006d1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006d1e:	e008      	b.n	8006d32 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006d20:	f7fd fcb4 	bl	800468c <HAL_GetTick>
 8006d24:	4602      	mov	r2, r0
 8006d26:	693b      	ldr	r3, [r7, #16]
 8006d28:	1ad3      	subs	r3, r2, r3
 8006d2a:	2b02      	cmp	r3, #2
 8006d2c:	d901      	bls.n	8006d32 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006d2e:	2303      	movs	r3, #3
 8006d30:	e045      	b.n	8006dbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006d32:	4b06      	ldr	r3, [pc, #24]	@ (8006d4c <HAL_RCC_OscConfig+0x470>)
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d1f0      	bne.n	8006d20 <HAL_RCC_OscConfig+0x444>
 8006d3e:	e03d      	b.n	8006dbc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	699b      	ldr	r3, [r3, #24]
 8006d44:	2b01      	cmp	r3, #1
 8006d46:	d107      	bne.n	8006d58 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006d48:	2301      	movs	r3, #1
 8006d4a:	e038      	b.n	8006dbe <HAL_RCC_OscConfig+0x4e2>
 8006d4c:	40023800 	.word	0x40023800
 8006d50:	40007000 	.word	0x40007000
 8006d54:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006d58:	4b1b      	ldr	r3, [pc, #108]	@ (8006dc8 <HAL_RCC_OscConfig+0x4ec>)
 8006d5a:	685b      	ldr	r3, [r3, #4]
 8006d5c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	699b      	ldr	r3, [r3, #24]
 8006d62:	2b01      	cmp	r3, #1
 8006d64:	d028      	beq.n	8006db8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006d70:	429a      	cmp	r2, r3
 8006d72:	d121      	bne.n	8006db8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d7e:	429a      	cmp	r2, r3
 8006d80:	d11a      	bne.n	8006db8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006d82:	68fa      	ldr	r2, [r7, #12]
 8006d84:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006d88:	4013      	ands	r3, r2
 8006d8a:	687a      	ldr	r2, [r7, #4]
 8006d8c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006d8e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006d90:	4293      	cmp	r3, r2
 8006d92:	d111      	bne.n	8006db8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d9e:	085b      	lsrs	r3, r3, #1
 8006da0:	3b01      	subs	r3, #1
 8006da2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006da4:	429a      	cmp	r2, r3
 8006da6:	d107      	bne.n	8006db8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006db2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006db4:	429a      	cmp	r2, r3
 8006db6:	d001      	beq.n	8006dbc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006db8:	2301      	movs	r3, #1
 8006dba:	e000      	b.n	8006dbe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006dbc:	2300      	movs	r3, #0
}
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	3718      	adds	r7, #24
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	bd80      	pop	{r7, pc}
 8006dc6:	bf00      	nop
 8006dc8:	40023800 	.word	0x40023800

08006dcc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006dcc:	b580      	push	{r7, lr}
 8006dce:	b084      	sub	sp, #16
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
 8006dd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d101      	bne.n	8006de0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006ddc:	2301      	movs	r3, #1
 8006dde:	e0cc      	b.n	8006f7a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006de0:	4b68      	ldr	r3, [pc, #416]	@ (8006f84 <HAL_RCC_ClockConfig+0x1b8>)
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f003 0307 	and.w	r3, r3, #7
 8006de8:	683a      	ldr	r2, [r7, #0]
 8006dea:	429a      	cmp	r2, r3
 8006dec:	d90c      	bls.n	8006e08 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006dee:	4b65      	ldr	r3, [pc, #404]	@ (8006f84 <HAL_RCC_ClockConfig+0x1b8>)
 8006df0:	683a      	ldr	r2, [r7, #0]
 8006df2:	b2d2      	uxtb	r2, r2
 8006df4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006df6:	4b63      	ldr	r3, [pc, #396]	@ (8006f84 <HAL_RCC_ClockConfig+0x1b8>)
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f003 0307 	and.w	r3, r3, #7
 8006dfe:	683a      	ldr	r2, [r7, #0]
 8006e00:	429a      	cmp	r2, r3
 8006e02:	d001      	beq.n	8006e08 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006e04:	2301      	movs	r3, #1
 8006e06:	e0b8      	b.n	8006f7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	f003 0302 	and.w	r3, r3, #2
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d020      	beq.n	8006e56 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f003 0304 	and.w	r3, r3, #4
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d005      	beq.n	8006e2c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006e20:	4b59      	ldr	r3, [pc, #356]	@ (8006f88 <HAL_RCC_ClockConfig+0x1bc>)
 8006e22:	689b      	ldr	r3, [r3, #8]
 8006e24:	4a58      	ldr	r2, [pc, #352]	@ (8006f88 <HAL_RCC_ClockConfig+0x1bc>)
 8006e26:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006e2a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	f003 0308 	and.w	r3, r3, #8
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d005      	beq.n	8006e44 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006e38:	4b53      	ldr	r3, [pc, #332]	@ (8006f88 <HAL_RCC_ClockConfig+0x1bc>)
 8006e3a:	689b      	ldr	r3, [r3, #8]
 8006e3c:	4a52      	ldr	r2, [pc, #328]	@ (8006f88 <HAL_RCC_ClockConfig+0x1bc>)
 8006e3e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006e42:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006e44:	4b50      	ldr	r3, [pc, #320]	@ (8006f88 <HAL_RCC_ClockConfig+0x1bc>)
 8006e46:	689b      	ldr	r3, [r3, #8]
 8006e48:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	689b      	ldr	r3, [r3, #8]
 8006e50:	494d      	ldr	r1, [pc, #308]	@ (8006f88 <HAL_RCC_ClockConfig+0x1bc>)
 8006e52:	4313      	orrs	r3, r2
 8006e54:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	f003 0301 	and.w	r3, r3, #1
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d044      	beq.n	8006eec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	685b      	ldr	r3, [r3, #4]
 8006e66:	2b01      	cmp	r3, #1
 8006e68:	d107      	bne.n	8006e7a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006e6a:	4b47      	ldr	r3, [pc, #284]	@ (8006f88 <HAL_RCC_ClockConfig+0x1bc>)
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d119      	bne.n	8006eaa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006e76:	2301      	movs	r3, #1
 8006e78:	e07f      	b.n	8006f7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	685b      	ldr	r3, [r3, #4]
 8006e7e:	2b02      	cmp	r3, #2
 8006e80:	d003      	beq.n	8006e8a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006e86:	2b03      	cmp	r3, #3
 8006e88:	d107      	bne.n	8006e9a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006e8a:	4b3f      	ldr	r3, [pc, #252]	@ (8006f88 <HAL_RCC_ClockConfig+0x1bc>)
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d109      	bne.n	8006eaa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006e96:	2301      	movs	r3, #1
 8006e98:	e06f      	b.n	8006f7a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006e9a:	4b3b      	ldr	r3, [pc, #236]	@ (8006f88 <HAL_RCC_ClockConfig+0x1bc>)
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	f003 0302 	and.w	r3, r3, #2
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d101      	bne.n	8006eaa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006ea6:	2301      	movs	r3, #1
 8006ea8:	e067      	b.n	8006f7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006eaa:	4b37      	ldr	r3, [pc, #220]	@ (8006f88 <HAL_RCC_ClockConfig+0x1bc>)
 8006eac:	689b      	ldr	r3, [r3, #8]
 8006eae:	f023 0203 	bic.w	r2, r3, #3
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	685b      	ldr	r3, [r3, #4]
 8006eb6:	4934      	ldr	r1, [pc, #208]	@ (8006f88 <HAL_RCC_ClockConfig+0x1bc>)
 8006eb8:	4313      	orrs	r3, r2
 8006eba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006ebc:	f7fd fbe6 	bl	800468c <HAL_GetTick>
 8006ec0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006ec2:	e00a      	b.n	8006eda <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006ec4:	f7fd fbe2 	bl	800468c <HAL_GetTick>
 8006ec8:	4602      	mov	r2, r0
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	1ad3      	subs	r3, r2, r3
 8006ece:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006ed2:	4293      	cmp	r3, r2
 8006ed4:	d901      	bls.n	8006eda <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006ed6:	2303      	movs	r3, #3
 8006ed8:	e04f      	b.n	8006f7a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006eda:	4b2b      	ldr	r3, [pc, #172]	@ (8006f88 <HAL_RCC_ClockConfig+0x1bc>)
 8006edc:	689b      	ldr	r3, [r3, #8]
 8006ede:	f003 020c 	and.w	r2, r3, #12
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	685b      	ldr	r3, [r3, #4]
 8006ee6:	009b      	lsls	r3, r3, #2
 8006ee8:	429a      	cmp	r2, r3
 8006eea:	d1eb      	bne.n	8006ec4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006eec:	4b25      	ldr	r3, [pc, #148]	@ (8006f84 <HAL_RCC_ClockConfig+0x1b8>)
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	f003 0307 	and.w	r3, r3, #7
 8006ef4:	683a      	ldr	r2, [r7, #0]
 8006ef6:	429a      	cmp	r2, r3
 8006ef8:	d20c      	bcs.n	8006f14 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006efa:	4b22      	ldr	r3, [pc, #136]	@ (8006f84 <HAL_RCC_ClockConfig+0x1b8>)
 8006efc:	683a      	ldr	r2, [r7, #0]
 8006efe:	b2d2      	uxtb	r2, r2
 8006f00:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f02:	4b20      	ldr	r3, [pc, #128]	@ (8006f84 <HAL_RCC_ClockConfig+0x1b8>)
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	f003 0307 	and.w	r3, r3, #7
 8006f0a:	683a      	ldr	r2, [r7, #0]
 8006f0c:	429a      	cmp	r2, r3
 8006f0e:	d001      	beq.n	8006f14 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006f10:	2301      	movs	r3, #1
 8006f12:	e032      	b.n	8006f7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	f003 0304 	and.w	r3, r3, #4
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d008      	beq.n	8006f32 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006f20:	4b19      	ldr	r3, [pc, #100]	@ (8006f88 <HAL_RCC_ClockConfig+0x1bc>)
 8006f22:	689b      	ldr	r3, [r3, #8]
 8006f24:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	68db      	ldr	r3, [r3, #12]
 8006f2c:	4916      	ldr	r1, [pc, #88]	@ (8006f88 <HAL_RCC_ClockConfig+0x1bc>)
 8006f2e:	4313      	orrs	r3, r2
 8006f30:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	f003 0308 	and.w	r3, r3, #8
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d009      	beq.n	8006f52 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006f3e:	4b12      	ldr	r3, [pc, #72]	@ (8006f88 <HAL_RCC_ClockConfig+0x1bc>)
 8006f40:	689b      	ldr	r3, [r3, #8]
 8006f42:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	691b      	ldr	r3, [r3, #16]
 8006f4a:	00db      	lsls	r3, r3, #3
 8006f4c:	490e      	ldr	r1, [pc, #56]	@ (8006f88 <HAL_RCC_ClockConfig+0x1bc>)
 8006f4e:	4313      	orrs	r3, r2
 8006f50:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006f52:	f000 f821 	bl	8006f98 <HAL_RCC_GetSysClockFreq>
 8006f56:	4602      	mov	r2, r0
 8006f58:	4b0b      	ldr	r3, [pc, #44]	@ (8006f88 <HAL_RCC_ClockConfig+0x1bc>)
 8006f5a:	689b      	ldr	r3, [r3, #8]
 8006f5c:	091b      	lsrs	r3, r3, #4
 8006f5e:	f003 030f 	and.w	r3, r3, #15
 8006f62:	490a      	ldr	r1, [pc, #40]	@ (8006f8c <HAL_RCC_ClockConfig+0x1c0>)
 8006f64:	5ccb      	ldrb	r3, [r1, r3]
 8006f66:	fa22 f303 	lsr.w	r3, r2, r3
 8006f6a:	4a09      	ldr	r2, [pc, #36]	@ (8006f90 <HAL_RCC_ClockConfig+0x1c4>)
 8006f6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006f6e:	4b09      	ldr	r3, [pc, #36]	@ (8006f94 <HAL_RCC_ClockConfig+0x1c8>)
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	4618      	mov	r0, r3
 8006f74:	f7fd fb46 	bl	8004604 <HAL_InitTick>

  return HAL_OK;
 8006f78:	2300      	movs	r3, #0
}
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	3710      	adds	r7, #16
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	bd80      	pop	{r7, pc}
 8006f82:	bf00      	nop
 8006f84:	40023c00 	.word	0x40023c00
 8006f88:	40023800 	.word	0x40023800
 8006f8c:	0800e224 	.word	0x0800e224
 8006f90:	20000048 	.word	0x20000048
 8006f94:	2000004c 	.word	0x2000004c

08006f98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006f98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006f9c:	b094      	sub	sp, #80	@ 0x50
 8006f9e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006fa0:	2300      	movs	r3, #0
 8006fa2:	647b      	str	r3, [r7, #68]	@ 0x44
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006fa8:	2300      	movs	r3, #0
 8006faa:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8006fac:	2300      	movs	r3, #0
 8006fae:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006fb0:	4b79      	ldr	r3, [pc, #484]	@ (8007198 <HAL_RCC_GetSysClockFreq+0x200>)
 8006fb2:	689b      	ldr	r3, [r3, #8]
 8006fb4:	f003 030c 	and.w	r3, r3, #12
 8006fb8:	2b08      	cmp	r3, #8
 8006fba:	d00d      	beq.n	8006fd8 <HAL_RCC_GetSysClockFreq+0x40>
 8006fbc:	2b08      	cmp	r3, #8
 8006fbe:	f200 80e1 	bhi.w	8007184 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d002      	beq.n	8006fcc <HAL_RCC_GetSysClockFreq+0x34>
 8006fc6:	2b04      	cmp	r3, #4
 8006fc8:	d003      	beq.n	8006fd2 <HAL_RCC_GetSysClockFreq+0x3a>
 8006fca:	e0db      	b.n	8007184 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006fcc:	4b73      	ldr	r3, [pc, #460]	@ (800719c <HAL_RCC_GetSysClockFreq+0x204>)
 8006fce:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8006fd0:	e0db      	b.n	800718a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006fd2:	4b73      	ldr	r3, [pc, #460]	@ (80071a0 <HAL_RCC_GetSysClockFreq+0x208>)
 8006fd4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006fd6:	e0d8      	b.n	800718a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006fd8:	4b6f      	ldr	r3, [pc, #444]	@ (8007198 <HAL_RCC_GetSysClockFreq+0x200>)
 8006fda:	685b      	ldr	r3, [r3, #4]
 8006fdc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006fe0:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006fe2:	4b6d      	ldr	r3, [pc, #436]	@ (8007198 <HAL_RCC_GetSysClockFreq+0x200>)
 8006fe4:	685b      	ldr	r3, [r3, #4]
 8006fe6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d063      	beq.n	80070b6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006fee:	4b6a      	ldr	r3, [pc, #424]	@ (8007198 <HAL_RCC_GetSysClockFreq+0x200>)
 8006ff0:	685b      	ldr	r3, [r3, #4]
 8006ff2:	099b      	lsrs	r3, r3, #6
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006ff8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006ffa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ffc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007000:	633b      	str	r3, [r7, #48]	@ 0x30
 8007002:	2300      	movs	r3, #0
 8007004:	637b      	str	r3, [r7, #52]	@ 0x34
 8007006:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800700a:	4622      	mov	r2, r4
 800700c:	462b      	mov	r3, r5
 800700e:	f04f 0000 	mov.w	r0, #0
 8007012:	f04f 0100 	mov.w	r1, #0
 8007016:	0159      	lsls	r1, r3, #5
 8007018:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800701c:	0150      	lsls	r0, r2, #5
 800701e:	4602      	mov	r2, r0
 8007020:	460b      	mov	r3, r1
 8007022:	4621      	mov	r1, r4
 8007024:	1a51      	subs	r1, r2, r1
 8007026:	6139      	str	r1, [r7, #16]
 8007028:	4629      	mov	r1, r5
 800702a:	eb63 0301 	sbc.w	r3, r3, r1
 800702e:	617b      	str	r3, [r7, #20]
 8007030:	f04f 0200 	mov.w	r2, #0
 8007034:	f04f 0300 	mov.w	r3, #0
 8007038:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800703c:	4659      	mov	r1, fp
 800703e:	018b      	lsls	r3, r1, #6
 8007040:	4651      	mov	r1, sl
 8007042:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007046:	4651      	mov	r1, sl
 8007048:	018a      	lsls	r2, r1, #6
 800704a:	4651      	mov	r1, sl
 800704c:	ebb2 0801 	subs.w	r8, r2, r1
 8007050:	4659      	mov	r1, fp
 8007052:	eb63 0901 	sbc.w	r9, r3, r1
 8007056:	f04f 0200 	mov.w	r2, #0
 800705a:	f04f 0300 	mov.w	r3, #0
 800705e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007062:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007066:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800706a:	4690      	mov	r8, r2
 800706c:	4699      	mov	r9, r3
 800706e:	4623      	mov	r3, r4
 8007070:	eb18 0303 	adds.w	r3, r8, r3
 8007074:	60bb      	str	r3, [r7, #8]
 8007076:	462b      	mov	r3, r5
 8007078:	eb49 0303 	adc.w	r3, r9, r3
 800707c:	60fb      	str	r3, [r7, #12]
 800707e:	f04f 0200 	mov.w	r2, #0
 8007082:	f04f 0300 	mov.w	r3, #0
 8007086:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800708a:	4629      	mov	r1, r5
 800708c:	024b      	lsls	r3, r1, #9
 800708e:	4621      	mov	r1, r4
 8007090:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007094:	4621      	mov	r1, r4
 8007096:	024a      	lsls	r2, r1, #9
 8007098:	4610      	mov	r0, r2
 800709a:	4619      	mov	r1, r3
 800709c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800709e:	2200      	movs	r2, #0
 80070a0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80070a2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80070a4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80070a8:	f7f9 fefc 	bl	8000ea4 <__aeabi_uldivmod>
 80070ac:	4602      	mov	r2, r0
 80070ae:	460b      	mov	r3, r1
 80070b0:	4613      	mov	r3, r2
 80070b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80070b4:	e058      	b.n	8007168 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80070b6:	4b38      	ldr	r3, [pc, #224]	@ (8007198 <HAL_RCC_GetSysClockFreq+0x200>)
 80070b8:	685b      	ldr	r3, [r3, #4]
 80070ba:	099b      	lsrs	r3, r3, #6
 80070bc:	2200      	movs	r2, #0
 80070be:	4618      	mov	r0, r3
 80070c0:	4611      	mov	r1, r2
 80070c2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80070c6:	623b      	str	r3, [r7, #32]
 80070c8:	2300      	movs	r3, #0
 80070ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80070cc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80070d0:	4642      	mov	r2, r8
 80070d2:	464b      	mov	r3, r9
 80070d4:	f04f 0000 	mov.w	r0, #0
 80070d8:	f04f 0100 	mov.w	r1, #0
 80070dc:	0159      	lsls	r1, r3, #5
 80070de:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80070e2:	0150      	lsls	r0, r2, #5
 80070e4:	4602      	mov	r2, r0
 80070e6:	460b      	mov	r3, r1
 80070e8:	4641      	mov	r1, r8
 80070ea:	ebb2 0a01 	subs.w	sl, r2, r1
 80070ee:	4649      	mov	r1, r9
 80070f0:	eb63 0b01 	sbc.w	fp, r3, r1
 80070f4:	f04f 0200 	mov.w	r2, #0
 80070f8:	f04f 0300 	mov.w	r3, #0
 80070fc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007100:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007104:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007108:	ebb2 040a 	subs.w	r4, r2, sl
 800710c:	eb63 050b 	sbc.w	r5, r3, fp
 8007110:	f04f 0200 	mov.w	r2, #0
 8007114:	f04f 0300 	mov.w	r3, #0
 8007118:	00eb      	lsls	r3, r5, #3
 800711a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800711e:	00e2      	lsls	r2, r4, #3
 8007120:	4614      	mov	r4, r2
 8007122:	461d      	mov	r5, r3
 8007124:	4643      	mov	r3, r8
 8007126:	18e3      	adds	r3, r4, r3
 8007128:	603b      	str	r3, [r7, #0]
 800712a:	464b      	mov	r3, r9
 800712c:	eb45 0303 	adc.w	r3, r5, r3
 8007130:	607b      	str	r3, [r7, #4]
 8007132:	f04f 0200 	mov.w	r2, #0
 8007136:	f04f 0300 	mov.w	r3, #0
 800713a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800713e:	4629      	mov	r1, r5
 8007140:	028b      	lsls	r3, r1, #10
 8007142:	4621      	mov	r1, r4
 8007144:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007148:	4621      	mov	r1, r4
 800714a:	028a      	lsls	r2, r1, #10
 800714c:	4610      	mov	r0, r2
 800714e:	4619      	mov	r1, r3
 8007150:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007152:	2200      	movs	r2, #0
 8007154:	61bb      	str	r3, [r7, #24]
 8007156:	61fa      	str	r2, [r7, #28]
 8007158:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800715c:	f7f9 fea2 	bl	8000ea4 <__aeabi_uldivmod>
 8007160:	4602      	mov	r2, r0
 8007162:	460b      	mov	r3, r1
 8007164:	4613      	mov	r3, r2
 8007166:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007168:	4b0b      	ldr	r3, [pc, #44]	@ (8007198 <HAL_RCC_GetSysClockFreq+0x200>)
 800716a:	685b      	ldr	r3, [r3, #4]
 800716c:	0c1b      	lsrs	r3, r3, #16
 800716e:	f003 0303 	and.w	r3, r3, #3
 8007172:	3301      	adds	r3, #1
 8007174:	005b      	lsls	r3, r3, #1
 8007176:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8007178:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800717a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800717c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007180:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007182:	e002      	b.n	800718a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007184:	4b05      	ldr	r3, [pc, #20]	@ (800719c <HAL_RCC_GetSysClockFreq+0x204>)
 8007186:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007188:	bf00      	nop
    }
  }
  return sysclockfreq;
 800718a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800718c:	4618      	mov	r0, r3
 800718e:	3750      	adds	r7, #80	@ 0x50
 8007190:	46bd      	mov	sp, r7
 8007192:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007196:	bf00      	nop
 8007198:	40023800 	.word	0x40023800
 800719c:	00f42400 	.word	0x00f42400
 80071a0:	007a1200 	.word	0x007a1200

080071a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80071a4:	b480      	push	{r7}
 80071a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80071a8:	4b03      	ldr	r3, [pc, #12]	@ (80071b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80071aa:	681b      	ldr	r3, [r3, #0]
}
 80071ac:	4618      	mov	r0, r3
 80071ae:	46bd      	mov	sp, r7
 80071b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b4:	4770      	bx	lr
 80071b6:	bf00      	nop
 80071b8:	20000048 	.word	0x20000048

080071bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80071bc:	b580      	push	{r7, lr}
 80071be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80071c0:	f7ff fff0 	bl	80071a4 <HAL_RCC_GetHCLKFreq>
 80071c4:	4602      	mov	r2, r0
 80071c6:	4b05      	ldr	r3, [pc, #20]	@ (80071dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80071c8:	689b      	ldr	r3, [r3, #8]
 80071ca:	0a9b      	lsrs	r3, r3, #10
 80071cc:	f003 0307 	and.w	r3, r3, #7
 80071d0:	4903      	ldr	r1, [pc, #12]	@ (80071e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80071d2:	5ccb      	ldrb	r3, [r1, r3]
 80071d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80071d8:	4618      	mov	r0, r3
 80071da:	bd80      	pop	{r7, pc}
 80071dc:	40023800 	.word	0x40023800
 80071e0:	0800e234 	.word	0x0800e234

080071e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80071e4:	b580      	push	{r7, lr}
 80071e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80071e8:	f7ff ffdc 	bl	80071a4 <HAL_RCC_GetHCLKFreq>
 80071ec:	4602      	mov	r2, r0
 80071ee:	4b05      	ldr	r3, [pc, #20]	@ (8007204 <HAL_RCC_GetPCLK2Freq+0x20>)
 80071f0:	689b      	ldr	r3, [r3, #8]
 80071f2:	0b5b      	lsrs	r3, r3, #13
 80071f4:	f003 0307 	and.w	r3, r3, #7
 80071f8:	4903      	ldr	r1, [pc, #12]	@ (8007208 <HAL_RCC_GetPCLK2Freq+0x24>)
 80071fa:	5ccb      	ldrb	r3, [r1, r3]
 80071fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007200:	4618      	mov	r0, r3
 8007202:	bd80      	pop	{r7, pc}
 8007204:	40023800 	.word	0x40023800
 8007208:	0800e234 	.word	0x0800e234

0800720c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800720c:	b580      	push	{r7, lr}
 800720e:	b082      	sub	sp, #8
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2b00      	cmp	r3, #0
 8007218:	d101      	bne.n	800721e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800721a:	2301      	movs	r3, #1
 800721c:	e07b      	b.n	8007316 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007222:	2b00      	cmp	r3, #0
 8007224:	d108      	bne.n	8007238 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	685b      	ldr	r3, [r3, #4]
 800722a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800722e:	d009      	beq.n	8007244 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2200      	movs	r2, #0
 8007234:	61da      	str	r2, [r3, #28]
 8007236:	e005      	b.n	8007244 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2200      	movs	r2, #0
 800723c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	2200      	movs	r2, #0
 8007242:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2200      	movs	r2, #0
 8007248:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007250:	b2db      	uxtb	r3, r3
 8007252:	2b00      	cmp	r3, #0
 8007254:	d106      	bne.n	8007264 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	2200      	movs	r2, #0
 800725a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800725e:	6878      	ldr	r0, [r7, #4]
 8007260:	f7fc fd10 	bl	8003c84 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2202      	movs	r2, #2
 8007268:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	681a      	ldr	r2, [r3, #0]
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800727a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	685b      	ldr	r3, [r3, #4]
 8007280:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	689b      	ldr	r3, [r3, #8]
 8007288:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800728c:	431a      	orrs	r2, r3
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	68db      	ldr	r3, [r3, #12]
 8007292:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007296:	431a      	orrs	r2, r3
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	691b      	ldr	r3, [r3, #16]
 800729c:	f003 0302 	and.w	r3, r3, #2
 80072a0:	431a      	orrs	r2, r3
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	695b      	ldr	r3, [r3, #20]
 80072a6:	f003 0301 	and.w	r3, r3, #1
 80072aa:	431a      	orrs	r2, r3
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	699b      	ldr	r3, [r3, #24]
 80072b0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80072b4:	431a      	orrs	r2, r3
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	69db      	ldr	r3, [r3, #28]
 80072ba:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80072be:	431a      	orrs	r2, r3
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	6a1b      	ldr	r3, [r3, #32]
 80072c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80072c8:	ea42 0103 	orr.w	r1, r2, r3
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072d0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	430a      	orrs	r2, r1
 80072da:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	699b      	ldr	r3, [r3, #24]
 80072e0:	0c1b      	lsrs	r3, r3, #16
 80072e2:	f003 0104 	and.w	r1, r3, #4
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072ea:	f003 0210 	and.w	r2, r3, #16
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	430a      	orrs	r2, r1
 80072f4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	69da      	ldr	r2, [r3, #28]
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007304:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	2200      	movs	r2, #0
 800730a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2201      	movs	r2, #1
 8007310:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8007314:	2300      	movs	r3, #0
}
 8007316:	4618      	mov	r0, r3
 8007318:	3708      	adds	r7, #8
 800731a:	46bd      	mov	sp, r7
 800731c:	bd80      	pop	{r7, pc}

0800731e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800731e:	b580      	push	{r7, lr}
 8007320:	b082      	sub	sp, #8
 8007322:	af00      	add	r7, sp, #0
 8007324:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	2b00      	cmp	r3, #0
 800732a:	d101      	bne.n	8007330 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800732c:	2301      	movs	r3, #1
 800732e:	e041      	b.n	80073b4 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007336:	b2db      	uxtb	r3, r3
 8007338:	2b00      	cmp	r3, #0
 800733a:	d106      	bne.n	800734a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2200      	movs	r2, #0
 8007340:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007344:	6878      	ldr	r0, [r7, #4]
 8007346:	f7fc fde5 	bl	8003f14 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	2202      	movs	r2, #2
 800734e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681a      	ldr	r2, [r3, #0]
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	3304      	adds	r3, #4
 800735a:	4619      	mov	r1, r3
 800735c:	4610      	mov	r0, r2
 800735e:	f000 feb7 	bl	80080d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	2201      	movs	r2, #1
 8007366:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	2201      	movs	r2, #1
 800736e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	2201      	movs	r2, #1
 8007376:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	2201      	movs	r2, #1
 800737e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	2201      	movs	r2, #1
 8007386:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	2201      	movs	r2, #1
 800738e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	2201      	movs	r2, #1
 8007396:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	2201      	movs	r2, #1
 800739e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	2201      	movs	r2, #1
 80073a6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	2201      	movs	r2, #1
 80073ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80073b2:	2300      	movs	r3, #0
}
 80073b4:	4618      	mov	r0, r3
 80073b6:	3708      	adds	r7, #8
 80073b8:	46bd      	mov	sp, r7
 80073ba:	bd80      	pop	{r7, pc}

080073bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80073bc:	b480      	push	{r7}
 80073be:	b085      	sub	sp, #20
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80073ca:	b2db      	uxtb	r3, r3
 80073cc:	2b01      	cmp	r3, #1
 80073ce:	d001      	beq.n	80073d4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80073d0:	2301      	movs	r3, #1
 80073d2:	e04e      	b.n	8007472 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2202      	movs	r2, #2
 80073d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	68da      	ldr	r2, [r3, #12]
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	f042 0201 	orr.w	r2, r2, #1
 80073ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	4a23      	ldr	r2, [pc, #140]	@ (8007480 <HAL_TIM_Base_Start_IT+0xc4>)
 80073f2:	4293      	cmp	r3, r2
 80073f4:	d022      	beq.n	800743c <HAL_TIM_Base_Start_IT+0x80>
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80073fe:	d01d      	beq.n	800743c <HAL_TIM_Base_Start_IT+0x80>
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	4a1f      	ldr	r2, [pc, #124]	@ (8007484 <HAL_TIM_Base_Start_IT+0xc8>)
 8007406:	4293      	cmp	r3, r2
 8007408:	d018      	beq.n	800743c <HAL_TIM_Base_Start_IT+0x80>
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	4a1e      	ldr	r2, [pc, #120]	@ (8007488 <HAL_TIM_Base_Start_IT+0xcc>)
 8007410:	4293      	cmp	r3, r2
 8007412:	d013      	beq.n	800743c <HAL_TIM_Base_Start_IT+0x80>
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	4a1c      	ldr	r2, [pc, #112]	@ (800748c <HAL_TIM_Base_Start_IT+0xd0>)
 800741a:	4293      	cmp	r3, r2
 800741c:	d00e      	beq.n	800743c <HAL_TIM_Base_Start_IT+0x80>
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	4a1b      	ldr	r2, [pc, #108]	@ (8007490 <HAL_TIM_Base_Start_IT+0xd4>)
 8007424:	4293      	cmp	r3, r2
 8007426:	d009      	beq.n	800743c <HAL_TIM_Base_Start_IT+0x80>
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	4a19      	ldr	r2, [pc, #100]	@ (8007494 <HAL_TIM_Base_Start_IT+0xd8>)
 800742e:	4293      	cmp	r3, r2
 8007430:	d004      	beq.n	800743c <HAL_TIM_Base_Start_IT+0x80>
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	4a18      	ldr	r2, [pc, #96]	@ (8007498 <HAL_TIM_Base_Start_IT+0xdc>)
 8007438:	4293      	cmp	r3, r2
 800743a:	d111      	bne.n	8007460 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	689b      	ldr	r3, [r3, #8]
 8007442:	f003 0307 	and.w	r3, r3, #7
 8007446:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	2b06      	cmp	r3, #6
 800744c:	d010      	beq.n	8007470 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	681a      	ldr	r2, [r3, #0]
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	f042 0201 	orr.w	r2, r2, #1
 800745c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800745e:	e007      	b.n	8007470 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	681a      	ldr	r2, [r3, #0]
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	f042 0201 	orr.w	r2, r2, #1
 800746e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007470:	2300      	movs	r3, #0
}
 8007472:	4618      	mov	r0, r3
 8007474:	3714      	adds	r7, #20
 8007476:	46bd      	mov	sp, r7
 8007478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747c:	4770      	bx	lr
 800747e:	bf00      	nop
 8007480:	40010000 	.word	0x40010000
 8007484:	40000400 	.word	0x40000400
 8007488:	40000800 	.word	0x40000800
 800748c:	40000c00 	.word	0x40000c00
 8007490:	40010400 	.word	0x40010400
 8007494:	40014000 	.word	0x40014000
 8007498:	40001800 	.word	0x40001800

0800749c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800749c:	b580      	push	{r7, lr}
 800749e:	b082      	sub	sp, #8
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d101      	bne.n	80074ae <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80074aa:	2301      	movs	r3, #1
 80074ac:	e041      	b.n	8007532 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80074b4:	b2db      	uxtb	r3, r3
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d106      	bne.n	80074c8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	2200      	movs	r2, #0
 80074be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80074c2:	6878      	ldr	r0, [r7, #4]
 80074c4:	f7fc fc26 	bl	8003d14 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2202      	movs	r2, #2
 80074cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681a      	ldr	r2, [r3, #0]
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	3304      	adds	r3, #4
 80074d8:	4619      	mov	r1, r3
 80074da:	4610      	mov	r0, r2
 80074dc:	f000 fdf8 	bl	80080d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2201      	movs	r2, #1
 80074e4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	2201      	movs	r2, #1
 80074ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2201      	movs	r2, #1
 80074f4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2201      	movs	r2, #1
 80074fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	2201      	movs	r2, #1
 8007504:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	2201      	movs	r2, #1
 800750c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2201      	movs	r2, #1
 8007514:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	2201      	movs	r2, #1
 800751c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	2201      	movs	r2, #1
 8007524:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	2201      	movs	r2, #1
 800752c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007530:	2300      	movs	r3, #0
}
 8007532:	4618      	mov	r0, r3
 8007534:	3708      	adds	r7, #8
 8007536:	46bd      	mov	sp, r7
 8007538:	bd80      	pop	{r7, pc}
	...

0800753c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800753c:	b580      	push	{r7, lr}
 800753e:	b084      	sub	sp, #16
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]
 8007544:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007546:	683b      	ldr	r3, [r7, #0]
 8007548:	2b00      	cmp	r3, #0
 800754a:	d109      	bne.n	8007560 <HAL_TIM_PWM_Start+0x24>
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007552:	b2db      	uxtb	r3, r3
 8007554:	2b01      	cmp	r3, #1
 8007556:	bf14      	ite	ne
 8007558:	2301      	movne	r3, #1
 800755a:	2300      	moveq	r3, #0
 800755c:	b2db      	uxtb	r3, r3
 800755e:	e022      	b.n	80075a6 <HAL_TIM_PWM_Start+0x6a>
 8007560:	683b      	ldr	r3, [r7, #0]
 8007562:	2b04      	cmp	r3, #4
 8007564:	d109      	bne.n	800757a <HAL_TIM_PWM_Start+0x3e>
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800756c:	b2db      	uxtb	r3, r3
 800756e:	2b01      	cmp	r3, #1
 8007570:	bf14      	ite	ne
 8007572:	2301      	movne	r3, #1
 8007574:	2300      	moveq	r3, #0
 8007576:	b2db      	uxtb	r3, r3
 8007578:	e015      	b.n	80075a6 <HAL_TIM_PWM_Start+0x6a>
 800757a:	683b      	ldr	r3, [r7, #0]
 800757c:	2b08      	cmp	r3, #8
 800757e:	d109      	bne.n	8007594 <HAL_TIM_PWM_Start+0x58>
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007586:	b2db      	uxtb	r3, r3
 8007588:	2b01      	cmp	r3, #1
 800758a:	bf14      	ite	ne
 800758c:	2301      	movne	r3, #1
 800758e:	2300      	moveq	r3, #0
 8007590:	b2db      	uxtb	r3, r3
 8007592:	e008      	b.n	80075a6 <HAL_TIM_PWM_Start+0x6a>
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800759a:	b2db      	uxtb	r3, r3
 800759c:	2b01      	cmp	r3, #1
 800759e:	bf14      	ite	ne
 80075a0:	2301      	movne	r3, #1
 80075a2:	2300      	moveq	r3, #0
 80075a4:	b2db      	uxtb	r3, r3
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d001      	beq.n	80075ae <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80075aa:	2301      	movs	r3, #1
 80075ac:	e07c      	b.n	80076a8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80075ae:	683b      	ldr	r3, [r7, #0]
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d104      	bne.n	80075be <HAL_TIM_PWM_Start+0x82>
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	2202      	movs	r2, #2
 80075b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80075bc:	e013      	b.n	80075e6 <HAL_TIM_PWM_Start+0xaa>
 80075be:	683b      	ldr	r3, [r7, #0]
 80075c0:	2b04      	cmp	r3, #4
 80075c2:	d104      	bne.n	80075ce <HAL_TIM_PWM_Start+0x92>
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2202      	movs	r2, #2
 80075c8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80075cc:	e00b      	b.n	80075e6 <HAL_TIM_PWM_Start+0xaa>
 80075ce:	683b      	ldr	r3, [r7, #0]
 80075d0:	2b08      	cmp	r3, #8
 80075d2:	d104      	bne.n	80075de <HAL_TIM_PWM_Start+0xa2>
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	2202      	movs	r2, #2
 80075d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80075dc:	e003      	b.n	80075e6 <HAL_TIM_PWM_Start+0xaa>
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	2202      	movs	r2, #2
 80075e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	2201      	movs	r2, #1
 80075ec:	6839      	ldr	r1, [r7, #0]
 80075ee:	4618      	mov	r0, r3
 80075f0:	f001 f864 	bl	80086bc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	4a2d      	ldr	r2, [pc, #180]	@ (80076b0 <HAL_TIM_PWM_Start+0x174>)
 80075fa:	4293      	cmp	r3, r2
 80075fc:	d004      	beq.n	8007608 <HAL_TIM_PWM_Start+0xcc>
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	4a2c      	ldr	r2, [pc, #176]	@ (80076b4 <HAL_TIM_PWM_Start+0x178>)
 8007604:	4293      	cmp	r3, r2
 8007606:	d101      	bne.n	800760c <HAL_TIM_PWM_Start+0xd0>
 8007608:	2301      	movs	r3, #1
 800760a:	e000      	b.n	800760e <HAL_TIM_PWM_Start+0xd2>
 800760c:	2300      	movs	r3, #0
 800760e:	2b00      	cmp	r3, #0
 8007610:	d007      	beq.n	8007622 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007620:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	4a22      	ldr	r2, [pc, #136]	@ (80076b0 <HAL_TIM_PWM_Start+0x174>)
 8007628:	4293      	cmp	r3, r2
 800762a:	d022      	beq.n	8007672 <HAL_TIM_PWM_Start+0x136>
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007634:	d01d      	beq.n	8007672 <HAL_TIM_PWM_Start+0x136>
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	4a1f      	ldr	r2, [pc, #124]	@ (80076b8 <HAL_TIM_PWM_Start+0x17c>)
 800763c:	4293      	cmp	r3, r2
 800763e:	d018      	beq.n	8007672 <HAL_TIM_PWM_Start+0x136>
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	4a1d      	ldr	r2, [pc, #116]	@ (80076bc <HAL_TIM_PWM_Start+0x180>)
 8007646:	4293      	cmp	r3, r2
 8007648:	d013      	beq.n	8007672 <HAL_TIM_PWM_Start+0x136>
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	4a1c      	ldr	r2, [pc, #112]	@ (80076c0 <HAL_TIM_PWM_Start+0x184>)
 8007650:	4293      	cmp	r3, r2
 8007652:	d00e      	beq.n	8007672 <HAL_TIM_PWM_Start+0x136>
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	4a16      	ldr	r2, [pc, #88]	@ (80076b4 <HAL_TIM_PWM_Start+0x178>)
 800765a:	4293      	cmp	r3, r2
 800765c:	d009      	beq.n	8007672 <HAL_TIM_PWM_Start+0x136>
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	4a18      	ldr	r2, [pc, #96]	@ (80076c4 <HAL_TIM_PWM_Start+0x188>)
 8007664:	4293      	cmp	r3, r2
 8007666:	d004      	beq.n	8007672 <HAL_TIM_PWM_Start+0x136>
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	4a16      	ldr	r2, [pc, #88]	@ (80076c8 <HAL_TIM_PWM_Start+0x18c>)
 800766e:	4293      	cmp	r3, r2
 8007670:	d111      	bne.n	8007696 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	689b      	ldr	r3, [r3, #8]
 8007678:	f003 0307 	and.w	r3, r3, #7
 800767c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	2b06      	cmp	r3, #6
 8007682:	d010      	beq.n	80076a6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	681a      	ldr	r2, [r3, #0]
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	f042 0201 	orr.w	r2, r2, #1
 8007692:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007694:	e007      	b.n	80076a6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	681a      	ldr	r2, [r3, #0]
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	f042 0201 	orr.w	r2, r2, #1
 80076a4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80076a6:	2300      	movs	r3, #0
}
 80076a8:	4618      	mov	r0, r3
 80076aa:	3710      	adds	r7, #16
 80076ac:	46bd      	mov	sp, r7
 80076ae:	bd80      	pop	{r7, pc}
 80076b0:	40010000 	.word	0x40010000
 80076b4:	40010400 	.word	0x40010400
 80076b8:	40000400 	.word	0x40000400
 80076bc:	40000800 	.word	0x40000800
 80076c0:	40000c00 	.word	0x40000c00
 80076c4:	40014000 	.word	0x40014000
 80076c8:	40001800 	.word	0x40001800

080076cc <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80076cc:	b580      	push	{r7, lr}
 80076ce:	b084      	sub	sp, #16
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]
 80076d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80076d6:	2300      	movs	r3, #0
 80076d8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80076da:	683b      	ldr	r3, [r7, #0]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d109      	bne.n	80076f4 <HAL_TIM_PWM_Start_IT+0x28>
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80076e6:	b2db      	uxtb	r3, r3
 80076e8:	2b01      	cmp	r3, #1
 80076ea:	bf14      	ite	ne
 80076ec:	2301      	movne	r3, #1
 80076ee:	2300      	moveq	r3, #0
 80076f0:	b2db      	uxtb	r3, r3
 80076f2:	e022      	b.n	800773a <HAL_TIM_PWM_Start_IT+0x6e>
 80076f4:	683b      	ldr	r3, [r7, #0]
 80076f6:	2b04      	cmp	r3, #4
 80076f8:	d109      	bne.n	800770e <HAL_TIM_PWM_Start_IT+0x42>
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007700:	b2db      	uxtb	r3, r3
 8007702:	2b01      	cmp	r3, #1
 8007704:	bf14      	ite	ne
 8007706:	2301      	movne	r3, #1
 8007708:	2300      	moveq	r3, #0
 800770a:	b2db      	uxtb	r3, r3
 800770c:	e015      	b.n	800773a <HAL_TIM_PWM_Start_IT+0x6e>
 800770e:	683b      	ldr	r3, [r7, #0]
 8007710:	2b08      	cmp	r3, #8
 8007712:	d109      	bne.n	8007728 <HAL_TIM_PWM_Start_IT+0x5c>
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800771a:	b2db      	uxtb	r3, r3
 800771c:	2b01      	cmp	r3, #1
 800771e:	bf14      	ite	ne
 8007720:	2301      	movne	r3, #1
 8007722:	2300      	moveq	r3, #0
 8007724:	b2db      	uxtb	r3, r3
 8007726:	e008      	b.n	800773a <HAL_TIM_PWM_Start_IT+0x6e>
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800772e:	b2db      	uxtb	r3, r3
 8007730:	2b01      	cmp	r3, #1
 8007732:	bf14      	ite	ne
 8007734:	2301      	movne	r3, #1
 8007736:	2300      	moveq	r3, #0
 8007738:	b2db      	uxtb	r3, r3
 800773a:	2b00      	cmp	r3, #0
 800773c:	d001      	beq.n	8007742 <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 800773e:	2301      	movs	r3, #1
 8007740:	e0c7      	b.n	80078d2 <HAL_TIM_PWM_Start_IT+0x206>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007742:	683b      	ldr	r3, [r7, #0]
 8007744:	2b00      	cmp	r3, #0
 8007746:	d104      	bne.n	8007752 <HAL_TIM_PWM_Start_IT+0x86>
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	2202      	movs	r2, #2
 800774c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007750:	e013      	b.n	800777a <HAL_TIM_PWM_Start_IT+0xae>
 8007752:	683b      	ldr	r3, [r7, #0]
 8007754:	2b04      	cmp	r3, #4
 8007756:	d104      	bne.n	8007762 <HAL_TIM_PWM_Start_IT+0x96>
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	2202      	movs	r2, #2
 800775c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007760:	e00b      	b.n	800777a <HAL_TIM_PWM_Start_IT+0xae>
 8007762:	683b      	ldr	r3, [r7, #0]
 8007764:	2b08      	cmp	r3, #8
 8007766:	d104      	bne.n	8007772 <HAL_TIM_PWM_Start_IT+0xa6>
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	2202      	movs	r2, #2
 800776c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007770:	e003      	b.n	800777a <HAL_TIM_PWM_Start_IT+0xae>
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	2202      	movs	r2, #2
 8007776:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  switch (Channel)
 800777a:	683b      	ldr	r3, [r7, #0]
 800777c:	2b0c      	cmp	r3, #12
 800777e:	d841      	bhi.n	8007804 <HAL_TIM_PWM_Start_IT+0x138>
 8007780:	a201      	add	r2, pc, #4	@ (adr r2, 8007788 <HAL_TIM_PWM_Start_IT+0xbc>)
 8007782:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007786:	bf00      	nop
 8007788:	080077bd 	.word	0x080077bd
 800778c:	08007805 	.word	0x08007805
 8007790:	08007805 	.word	0x08007805
 8007794:	08007805 	.word	0x08007805
 8007798:	080077cf 	.word	0x080077cf
 800779c:	08007805 	.word	0x08007805
 80077a0:	08007805 	.word	0x08007805
 80077a4:	08007805 	.word	0x08007805
 80077a8:	080077e1 	.word	0x080077e1
 80077ac:	08007805 	.word	0x08007805
 80077b0:	08007805 	.word	0x08007805
 80077b4:	08007805 	.word	0x08007805
 80077b8:	080077f3 	.word	0x080077f3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	68da      	ldr	r2, [r3, #12]
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	f042 0202 	orr.w	r2, r2, #2
 80077ca:	60da      	str	r2, [r3, #12]
      break;
 80077cc:	e01d      	b.n	800780a <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	68da      	ldr	r2, [r3, #12]
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	f042 0204 	orr.w	r2, r2, #4
 80077dc:	60da      	str	r2, [r3, #12]
      break;
 80077de:	e014      	b.n	800780a <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	68da      	ldr	r2, [r3, #12]
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	f042 0208 	orr.w	r2, r2, #8
 80077ee:	60da      	str	r2, [r3, #12]
      break;
 80077f0:	e00b      	b.n	800780a <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	68da      	ldr	r2, [r3, #12]
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	f042 0210 	orr.w	r2, r2, #16
 8007800:	60da      	str	r2, [r3, #12]
      break;
 8007802:	e002      	b.n	800780a <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8007804:	2301      	movs	r3, #1
 8007806:	73fb      	strb	r3, [r7, #15]
      break;
 8007808:	bf00      	nop
  }

  if (status == HAL_OK)
 800780a:	7bfb      	ldrb	r3, [r7, #15]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d15f      	bne.n	80078d0 <HAL_TIM_PWM_Start_IT+0x204>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	2201      	movs	r2, #1
 8007816:	6839      	ldr	r1, [r7, #0]
 8007818:	4618      	mov	r0, r3
 800781a:	f000 ff4f 	bl	80086bc <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	4a2e      	ldr	r2, [pc, #184]	@ (80078dc <HAL_TIM_PWM_Start_IT+0x210>)
 8007824:	4293      	cmp	r3, r2
 8007826:	d004      	beq.n	8007832 <HAL_TIM_PWM_Start_IT+0x166>
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	4a2c      	ldr	r2, [pc, #176]	@ (80078e0 <HAL_TIM_PWM_Start_IT+0x214>)
 800782e:	4293      	cmp	r3, r2
 8007830:	d101      	bne.n	8007836 <HAL_TIM_PWM_Start_IT+0x16a>
 8007832:	2301      	movs	r3, #1
 8007834:	e000      	b.n	8007838 <HAL_TIM_PWM_Start_IT+0x16c>
 8007836:	2300      	movs	r3, #0
 8007838:	2b00      	cmp	r3, #0
 800783a:	d007      	beq.n	800784c <HAL_TIM_PWM_Start_IT+0x180>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800784a:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	4a22      	ldr	r2, [pc, #136]	@ (80078dc <HAL_TIM_PWM_Start_IT+0x210>)
 8007852:	4293      	cmp	r3, r2
 8007854:	d022      	beq.n	800789c <HAL_TIM_PWM_Start_IT+0x1d0>
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800785e:	d01d      	beq.n	800789c <HAL_TIM_PWM_Start_IT+0x1d0>
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	4a1f      	ldr	r2, [pc, #124]	@ (80078e4 <HAL_TIM_PWM_Start_IT+0x218>)
 8007866:	4293      	cmp	r3, r2
 8007868:	d018      	beq.n	800789c <HAL_TIM_PWM_Start_IT+0x1d0>
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	4a1e      	ldr	r2, [pc, #120]	@ (80078e8 <HAL_TIM_PWM_Start_IT+0x21c>)
 8007870:	4293      	cmp	r3, r2
 8007872:	d013      	beq.n	800789c <HAL_TIM_PWM_Start_IT+0x1d0>
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	4a1c      	ldr	r2, [pc, #112]	@ (80078ec <HAL_TIM_PWM_Start_IT+0x220>)
 800787a:	4293      	cmp	r3, r2
 800787c:	d00e      	beq.n	800789c <HAL_TIM_PWM_Start_IT+0x1d0>
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	4a17      	ldr	r2, [pc, #92]	@ (80078e0 <HAL_TIM_PWM_Start_IT+0x214>)
 8007884:	4293      	cmp	r3, r2
 8007886:	d009      	beq.n	800789c <HAL_TIM_PWM_Start_IT+0x1d0>
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	4a18      	ldr	r2, [pc, #96]	@ (80078f0 <HAL_TIM_PWM_Start_IT+0x224>)
 800788e:	4293      	cmp	r3, r2
 8007890:	d004      	beq.n	800789c <HAL_TIM_PWM_Start_IT+0x1d0>
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	4a17      	ldr	r2, [pc, #92]	@ (80078f4 <HAL_TIM_PWM_Start_IT+0x228>)
 8007898:	4293      	cmp	r3, r2
 800789a:	d111      	bne.n	80078c0 <HAL_TIM_PWM_Start_IT+0x1f4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	689b      	ldr	r3, [r3, #8]
 80078a2:	f003 0307 	and.w	r3, r3, #7
 80078a6:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80078a8:	68bb      	ldr	r3, [r7, #8]
 80078aa:	2b06      	cmp	r3, #6
 80078ac:	d010      	beq.n	80078d0 <HAL_TIM_PWM_Start_IT+0x204>
      {
        __HAL_TIM_ENABLE(htim);
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	681a      	ldr	r2, [r3, #0]
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	f042 0201 	orr.w	r2, r2, #1
 80078bc:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80078be:	e007      	b.n	80078d0 <HAL_TIM_PWM_Start_IT+0x204>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	681a      	ldr	r2, [r3, #0]
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	f042 0201 	orr.w	r2, r2, #1
 80078ce:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80078d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80078d2:	4618      	mov	r0, r3
 80078d4:	3710      	adds	r7, #16
 80078d6:	46bd      	mov	sp, r7
 80078d8:	bd80      	pop	{r7, pc}
 80078da:	bf00      	nop
 80078dc:	40010000 	.word	0x40010000
 80078e0:	40010400 	.word	0x40010400
 80078e4:	40000400 	.word	0x40000400
 80078e8:	40000800 	.word	0x40000800
 80078ec:	40000c00 	.word	0x40000c00
 80078f0:	40014000 	.word	0x40014000
 80078f4:	40001800 	.word	0x40001800

080078f8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80078f8:	b580      	push	{r7, lr}
 80078fa:	b086      	sub	sp, #24
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	6078      	str	r0, [r7, #4]
 8007900:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	2b00      	cmp	r3, #0
 8007906:	d101      	bne.n	800790c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8007908:	2301      	movs	r3, #1
 800790a:	e097      	b.n	8007a3c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007912:	b2db      	uxtb	r3, r3
 8007914:	2b00      	cmp	r3, #0
 8007916:	d106      	bne.n	8007926 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	2200      	movs	r2, #0
 800791c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8007920:	6878      	ldr	r0, [r7, #4]
 8007922:	f7fc fa69 	bl	8003df8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	2202      	movs	r2, #2
 800792a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	689b      	ldr	r3, [r3, #8]
 8007934:	687a      	ldr	r2, [r7, #4]
 8007936:	6812      	ldr	r2, [r2, #0]
 8007938:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800793c:	f023 0307 	bic.w	r3, r3, #7
 8007940:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681a      	ldr	r2, [r3, #0]
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	3304      	adds	r3, #4
 800794a:	4619      	mov	r1, r3
 800794c:	4610      	mov	r0, r2
 800794e:	f000 fbbf 	bl	80080d0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	689b      	ldr	r3, [r3, #8]
 8007958:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	699b      	ldr	r3, [r3, #24]
 8007960:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	6a1b      	ldr	r3, [r3, #32]
 8007968:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800796a:	683b      	ldr	r3, [r7, #0]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	697a      	ldr	r2, [r7, #20]
 8007970:	4313      	orrs	r3, r2
 8007972:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007974:	693b      	ldr	r3, [r7, #16]
 8007976:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800797a:	f023 0303 	bic.w	r3, r3, #3
 800797e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007980:	683b      	ldr	r3, [r7, #0]
 8007982:	689a      	ldr	r2, [r3, #8]
 8007984:	683b      	ldr	r3, [r7, #0]
 8007986:	699b      	ldr	r3, [r3, #24]
 8007988:	021b      	lsls	r3, r3, #8
 800798a:	4313      	orrs	r3, r2
 800798c:	693a      	ldr	r2, [r7, #16]
 800798e:	4313      	orrs	r3, r2
 8007990:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8007992:	693b      	ldr	r3, [r7, #16]
 8007994:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8007998:	f023 030c 	bic.w	r3, r3, #12
 800799c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800799e:	693b      	ldr	r3, [r7, #16]
 80079a0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80079a4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80079a8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80079aa:	683b      	ldr	r3, [r7, #0]
 80079ac:	68da      	ldr	r2, [r3, #12]
 80079ae:	683b      	ldr	r3, [r7, #0]
 80079b0:	69db      	ldr	r3, [r3, #28]
 80079b2:	021b      	lsls	r3, r3, #8
 80079b4:	4313      	orrs	r3, r2
 80079b6:	693a      	ldr	r2, [r7, #16]
 80079b8:	4313      	orrs	r3, r2
 80079ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80079bc:	683b      	ldr	r3, [r7, #0]
 80079be:	691b      	ldr	r3, [r3, #16]
 80079c0:	011a      	lsls	r2, r3, #4
 80079c2:	683b      	ldr	r3, [r7, #0]
 80079c4:	6a1b      	ldr	r3, [r3, #32]
 80079c6:	031b      	lsls	r3, r3, #12
 80079c8:	4313      	orrs	r3, r2
 80079ca:	693a      	ldr	r2, [r7, #16]
 80079cc:	4313      	orrs	r3, r2
 80079ce:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80079d6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80079de:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80079e0:	683b      	ldr	r3, [r7, #0]
 80079e2:	685a      	ldr	r2, [r3, #4]
 80079e4:	683b      	ldr	r3, [r7, #0]
 80079e6:	695b      	ldr	r3, [r3, #20]
 80079e8:	011b      	lsls	r3, r3, #4
 80079ea:	4313      	orrs	r3, r2
 80079ec:	68fa      	ldr	r2, [r7, #12]
 80079ee:	4313      	orrs	r3, r2
 80079f0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	697a      	ldr	r2, [r7, #20]
 80079f8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	693a      	ldr	r2, [r7, #16]
 8007a00:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	68fa      	ldr	r2, [r7, #12]
 8007a08:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	2201      	movs	r2, #1
 8007a0e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	2201      	movs	r2, #1
 8007a16:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	2201      	movs	r2, #1
 8007a1e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	2201      	movs	r2, #1
 8007a26:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	2201      	movs	r2, #1
 8007a2e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	2201      	movs	r2, #1
 8007a36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007a3a:	2300      	movs	r3, #0
}
 8007a3c:	4618      	mov	r0, r3
 8007a3e:	3718      	adds	r7, #24
 8007a40:	46bd      	mov	sp, r7
 8007a42:	bd80      	pop	{r7, pc}

08007a44 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007a44:	b580      	push	{r7, lr}
 8007a46:	b084      	sub	sp, #16
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	6078      	str	r0, [r7, #4]
 8007a4c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007a54:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007a5c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007a64:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007a6c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8007a6e:	683b      	ldr	r3, [r7, #0]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d110      	bne.n	8007a96 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007a74:	7bfb      	ldrb	r3, [r7, #15]
 8007a76:	2b01      	cmp	r3, #1
 8007a78:	d102      	bne.n	8007a80 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8007a7a:	7b7b      	ldrb	r3, [r7, #13]
 8007a7c:	2b01      	cmp	r3, #1
 8007a7e:	d001      	beq.n	8007a84 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8007a80:	2301      	movs	r3, #1
 8007a82:	e089      	b.n	8007b98 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	2202      	movs	r2, #2
 8007a88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	2202      	movs	r2, #2
 8007a90:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007a94:	e031      	b.n	8007afa <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8007a96:	683b      	ldr	r3, [r7, #0]
 8007a98:	2b04      	cmp	r3, #4
 8007a9a:	d110      	bne.n	8007abe <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007a9c:	7bbb      	ldrb	r3, [r7, #14]
 8007a9e:	2b01      	cmp	r3, #1
 8007aa0:	d102      	bne.n	8007aa8 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007aa2:	7b3b      	ldrb	r3, [r7, #12]
 8007aa4:	2b01      	cmp	r3, #1
 8007aa6:	d001      	beq.n	8007aac <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8007aa8:	2301      	movs	r3, #1
 8007aaa:	e075      	b.n	8007b98 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	2202      	movs	r2, #2
 8007ab0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	2202      	movs	r2, #2
 8007ab8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007abc:	e01d      	b.n	8007afa <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007abe:	7bfb      	ldrb	r3, [r7, #15]
 8007ac0:	2b01      	cmp	r3, #1
 8007ac2:	d108      	bne.n	8007ad6 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007ac4:	7bbb      	ldrb	r3, [r7, #14]
 8007ac6:	2b01      	cmp	r3, #1
 8007ac8:	d105      	bne.n	8007ad6 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007aca:	7b7b      	ldrb	r3, [r7, #13]
 8007acc:	2b01      	cmp	r3, #1
 8007ace:	d102      	bne.n	8007ad6 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007ad0:	7b3b      	ldrb	r3, [r7, #12]
 8007ad2:	2b01      	cmp	r3, #1
 8007ad4:	d001      	beq.n	8007ada <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8007ad6:	2301      	movs	r3, #1
 8007ad8:	e05e      	b.n	8007b98 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	2202      	movs	r2, #2
 8007ade:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	2202      	movs	r2, #2
 8007ae6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	2202      	movs	r2, #2
 8007aee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	2202      	movs	r2, #2
 8007af6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8007afa:	683b      	ldr	r3, [r7, #0]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d003      	beq.n	8007b08 <HAL_TIM_Encoder_Start_IT+0xc4>
 8007b00:	683b      	ldr	r3, [r7, #0]
 8007b02:	2b04      	cmp	r3, #4
 8007b04:	d010      	beq.n	8007b28 <HAL_TIM_Encoder_Start_IT+0xe4>
 8007b06:	e01f      	b.n	8007b48 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	2201      	movs	r2, #1
 8007b0e:	2100      	movs	r1, #0
 8007b10:	4618      	mov	r0, r3
 8007b12:	f000 fdd3 	bl	80086bc <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	68da      	ldr	r2, [r3, #12]
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	f042 0202 	orr.w	r2, r2, #2
 8007b24:	60da      	str	r2, [r3, #12]
      break;
 8007b26:	e02e      	b.n	8007b86 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	2201      	movs	r2, #1
 8007b2e:	2104      	movs	r1, #4
 8007b30:	4618      	mov	r0, r3
 8007b32:	f000 fdc3 	bl	80086bc <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	68da      	ldr	r2, [r3, #12]
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	f042 0204 	orr.w	r2, r2, #4
 8007b44:	60da      	str	r2, [r3, #12]
      break;
 8007b46:	e01e      	b.n	8007b86 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	2201      	movs	r2, #1
 8007b4e:	2100      	movs	r1, #0
 8007b50:	4618      	mov	r0, r3
 8007b52:	f000 fdb3 	bl	80086bc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	2201      	movs	r2, #1
 8007b5c:	2104      	movs	r1, #4
 8007b5e:	4618      	mov	r0, r3
 8007b60:	f000 fdac 	bl	80086bc <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	68da      	ldr	r2, [r3, #12]
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	f042 0202 	orr.w	r2, r2, #2
 8007b72:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	68da      	ldr	r2, [r3, #12]
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	f042 0204 	orr.w	r2, r2, #4
 8007b82:	60da      	str	r2, [r3, #12]
      break;
 8007b84:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	681a      	ldr	r2, [r3, #0]
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	f042 0201 	orr.w	r2, r2, #1
 8007b94:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007b96:	2300      	movs	r3, #0
}
 8007b98:	4618      	mov	r0, r3
 8007b9a:	3710      	adds	r7, #16
 8007b9c:	46bd      	mov	sp, r7
 8007b9e:	bd80      	pop	{r7, pc}

08007ba0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007ba0:	b580      	push	{r7, lr}
 8007ba2:	b084      	sub	sp, #16
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	68db      	ldr	r3, [r3, #12]
 8007bae:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	691b      	ldr	r3, [r3, #16]
 8007bb6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007bb8:	68bb      	ldr	r3, [r7, #8]
 8007bba:	f003 0302 	and.w	r3, r3, #2
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d020      	beq.n	8007c04 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	f003 0302 	and.w	r3, r3, #2
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d01b      	beq.n	8007c04 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	f06f 0202 	mvn.w	r2, #2
 8007bd4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	2201      	movs	r2, #1
 8007bda:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	699b      	ldr	r3, [r3, #24]
 8007be2:	f003 0303 	and.w	r3, r3, #3
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d003      	beq.n	8007bf2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007bea:	6878      	ldr	r0, [r7, #4]
 8007bec:	f000 fa5b 	bl	80080a6 <HAL_TIM_IC_CaptureCallback>
 8007bf0:	e005      	b.n	8007bfe <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007bf2:	6878      	ldr	r0, [r7, #4]
 8007bf4:	f000 fa4d 	bl	8008092 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007bf8:	6878      	ldr	r0, [r7, #4]
 8007bfa:	f7fa fc65 	bl	80024c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	2200      	movs	r2, #0
 8007c02:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007c04:	68bb      	ldr	r3, [r7, #8]
 8007c06:	f003 0304 	and.w	r3, r3, #4
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d020      	beq.n	8007c50 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	f003 0304 	and.w	r3, r3, #4
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d01b      	beq.n	8007c50 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	f06f 0204 	mvn.w	r2, #4
 8007c20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	2202      	movs	r2, #2
 8007c26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	699b      	ldr	r3, [r3, #24]
 8007c2e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d003      	beq.n	8007c3e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007c36:	6878      	ldr	r0, [r7, #4]
 8007c38:	f000 fa35 	bl	80080a6 <HAL_TIM_IC_CaptureCallback>
 8007c3c:	e005      	b.n	8007c4a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c3e:	6878      	ldr	r0, [r7, #4]
 8007c40:	f000 fa27 	bl	8008092 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c44:	6878      	ldr	r0, [r7, #4]
 8007c46:	f7fa fc3f 	bl	80024c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	2200      	movs	r2, #0
 8007c4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007c50:	68bb      	ldr	r3, [r7, #8]
 8007c52:	f003 0308 	and.w	r3, r3, #8
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d020      	beq.n	8007c9c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	f003 0308 	and.w	r3, r3, #8
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d01b      	beq.n	8007c9c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	f06f 0208 	mvn.w	r2, #8
 8007c6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	2204      	movs	r2, #4
 8007c72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	69db      	ldr	r3, [r3, #28]
 8007c7a:	f003 0303 	and.w	r3, r3, #3
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d003      	beq.n	8007c8a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007c82:	6878      	ldr	r0, [r7, #4]
 8007c84:	f000 fa0f 	bl	80080a6 <HAL_TIM_IC_CaptureCallback>
 8007c88:	e005      	b.n	8007c96 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c8a:	6878      	ldr	r0, [r7, #4]
 8007c8c:	f000 fa01 	bl	8008092 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c90:	6878      	ldr	r0, [r7, #4]
 8007c92:	f7fa fc19 	bl	80024c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	2200      	movs	r2, #0
 8007c9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007c9c:	68bb      	ldr	r3, [r7, #8]
 8007c9e:	f003 0310 	and.w	r3, r3, #16
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d020      	beq.n	8007ce8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	f003 0310 	and.w	r3, r3, #16
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d01b      	beq.n	8007ce8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	f06f 0210 	mvn.w	r2, #16
 8007cb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	2208      	movs	r2, #8
 8007cbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	69db      	ldr	r3, [r3, #28]
 8007cc6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d003      	beq.n	8007cd6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007cce:	6878      	ldr	r0, [r7, #4]
 8007cd0:	f000 f9e9 	bl	80080a6 <HAL_TIM_IC_CaptureCallback>
 8007cd4:	e005      	b.n	8007ce2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007cd6:	6878      	ldr	r0, [r7, #4]
 8007cd8:	f000 f9db 	bl	8008092 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007cdc:	6878      	ldr	r0, [r7, #4]
 8007cde:	f7fa fbf3 	bl	80024c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	2200      	movs	r2, #0
 8007ce6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007ce8:	68bb      	ldr	r3, [r7, #8]
 8007cea:	f003 0301 	and.w	r3, r3, #1
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d00c      	beq.n	8007d0c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	f003 0301 	and.w	r3, r3, #1
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d007      	beq.n	8007d0c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	f06f 0201 	mvn.w	r2, #1
 8007d04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007d06:	6878      	ldr	r0, [r7, #4]
 8007d08:	f7fb fb52 	bl	80033b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8007d0c:	68bb      	ldr	r3, [r7, #8]
 8007d0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d00c      	beq.n	8007d30 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d007      	beq.n	8007d30 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8007d28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007d2a:	6878      	ldr	r0, [r7, #4]
 8007d2c:	f000 fdc4 	bl	80088b8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007d30:	68bb      	ldr	r3, [r7, #8]
 8007d32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d00c      	beq.n	8007d54 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d007      	beq.n	8007d54 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007d4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007d4e:	6878      	ldr	r0, [r7, #4]
 8007d50:	f000 f9b3 	bl	80080ba <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007d54:	68bb      	ldr	r3, [r7, #8]
 8007d56:	f003 0320 	and.w	r3, r3, #32
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d00c      	beq.n	8007d78 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	f003 0320 	and.w	r3, r3, #32
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d007      	beq.n	8007d78 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	f06f 0220 	mvn.w	r2, #32
 8007d70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007d72:	6878      	ldr	r0, [r7, #4]
 8007d74:	f000 fd96 	bl	80088a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007d78:	bf00      	nop
 8007d7a:	3710      	adds	r7, #16
 8007d7c:	46bd      	mov	sp, r7
 8007d7e:	bd80      	pop	{r7, pc}

08007d80 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007d80:	b580      	push	{r7, lr}
 8007d82:	b086      	sub	sp, #24
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	60f8      	str	r0, [r7, #12]
 8007d88:	60b9      	str	r1, [r7, #8]
 8007d8a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007d96:	2b01      	cmp	r3, #1
 8007d98:	d101      	bne.n	8007d9e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007d9a:	2302      	movs	r3, #2
 8007d9c:	e0ae      	b.n	8007efc <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	2201      	movs	r2, #1
 8007da2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	2b0c      	cmp	r3, #12
 8007daa:	f200 809f 	bhi.w	8007eec <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007dae:	a201      	add	r2, pc, #4	@ (adr r2, 8007db4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007db0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007db4:	08007de9 	.word	0x08007de9
 8007db8:	08007eed 	.word	0x08007eed
 8007dbc:	08007eed 	.word	0x08007eed
 8007dc0:	08007eed 	.word	0x08007eed
 8007dc4:	08007e29 	.word	0x08007e29
 8007dc8:	08007eed 	.word	0x08007eed
 8007dcc:	08007eed 	.word	0x08007eed
 8007dd0:	08007eed 	.word	0x08007eed
 8007dd4:	08007e6b 	.word	0x08007e6b
 8007dd8:	08007eed 	.word	0x08007eed
 8007ddc:	08007eed 	.word	0x08007eed
 8007de0:	08007eed 	.word	0x08007eed
 8007de4:	08007eab 	.word	0x08007eab
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	68b9      	ldr	r1, [r7, #8]
 8007dee:	4618      	mov	r0, r3
 8007df0:	f000 fa1a 	bl	8008228 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	699a      	ldr	r2, [r3, #24]
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	f042 0208 	orr.w	r2, r2, #8
 8007e02:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	699a      	ldr	r2, [r3, #24]
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	f022 0204 	bic.w	r2, r2, #4
 8007e12:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	6999      	ldr	r1, [r3, #24]
 8007e1a:	68bb      	ldr	r3, [r7, #8]
 8007e1c:	691a      	ldr	r2, [r3, #16]
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	430a      	orrs	r2, r1
 8007e24:	619a      	str	r2, [r3, #24]
      break;
 8007e26:	e064      	b.n	8007ef2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	68b9      	ldr	r1, [r7, #8]
 8007e2e:	4618      	mov	r0, r3
 8007e30:	f000 fa6a 	bl	8008308 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	699a      	ldr	r2, [r3, #24]
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007e42:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	699a      	ldr	r2, [r3, #24]
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007e52:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	6999      	ldr	r1, [r3, #24]
 8007e5a:	68bb      	ldr	r3, [r7, #8]
 8007e5c:	691b      	ldr	r3, [r3, #16]
 8007e5e:	021a      	lsls	r2, r3, #8
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	430a      	orrs	r2, r1
 8007e66:	619a      	str	r2, [r3, #24]
      break;
 8007e68:	e043      	b.n	8007ef2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	68b9      	ldr	r1, [r7, #8]
 8007e70:	4618      	mov	r0, r3
 8007e72:	f000 fabf 	bl	80083f4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	69da      	ldr	r2, [r3, #28]
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	f042 0208 	orr.w	r2, r2, #8
 8007e84:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	69da      	ldr	r2, [r3, #28]
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	f022 0204 	bic.w	r2, r2, #4
 8007e94:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	69d9      	ldr	r1, [r3, #28]
 8007e9c:	68bb      	ldr	r3, [r7, #8]
 8007e9e:	691a      	ldr	r2, [r3, #16]
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	430a      	orrs	r2, r1
 8007ea6:	61da      	str	r2, [r3, #28]
      break;
 8007ea8:	e023      	b.n	8007ef2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	68b9      	ldr	r1, [r7, #8]
 8007eb0:	4618      	mov	r0, r3
 8007eb2:	f000 fb13 	bl	80084dc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	69da      	ldr	r2, [r3, #28]
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007ec4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	69da      	ldr	r2, [r3, #28]
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007ed4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	69d9      	ldr	r1, [r3, #28]
 8007edc:	68bb      	ldr	r3, [r7, #8]
 8007ede:	691b      	ldr	r3, [r3, #16]
 8007ee0:	021a      	lsls	r2, r3, #8
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	430a      	orrs	r2, r1
 8007ee8:	61da      	str	r2, [r3, #28]
      break;
 8007eea:	e002      	b.n	8007ef2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007eec:	2301      	movs	r3, #1
 8007eee:	75fb      	strb	r3, [r7, #23]
      break;
 8007ef0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	2200      	movs	r2, #0
 8007ef6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007efa:	7dfb      	ldrb	r3, [r7, #23]
}
 8007efc:	4618      	mov	r0, r3
 8007efe:	3718      	adds	r7, #24
 8007f00:	46bd      	mov	sp, r7
 8007f02:	bd80      	pop	{r7, pc}

08007f04 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007f04:	b580      	push	{r7, lr}
 8007f06:	b084      	sub	sp, #16
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	6078      	str	r0, [r7, #4]
 8007f0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007f0e:	2300      	movs	r3, #0
 8007f10:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007f18:	2b01      	cmp	r3, #1
 8007f1a:	d101      	bne.n	8007f20 <HAL_TIM_ConfigClockSource+0x1c>
 8007f1c:	2302      	movs	r3, #2
 8007f1e:	e0b4      	b.n	800808a <HAL_TIM_ConfigClockSource+0x186>
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	2201      	movs	r2, #1
 8007f24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	2202      	movs	r2, #2
 8007f2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	689b      	ldr	r3, [r3, #8]
 8007f36:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007f38:	68bb      	ldr	r3, [r7, #8]
 8007f3a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007f3e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007f40:	68bb      	ldr	r3, [r7, #8]
 8007f42:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007f46:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	68ba      	ldr	r2, [r7, #8]
 8007f4e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007f50:	683b      	ldr	r3, [r7, #0]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007f58:	d03e      	beq.n	8007fd8 <HAL_TIM_ConfigClockSource+0xd4>
 8007f5a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007f5e:	f200 8087 	bhi.w	8008070 <HAL_TIM_ConfigClockSource+0x16c>
 8007f62:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007f66:	f000 8086 	beq.w	8008076 <HAL_TIM_ConfigClockSource+0x172>
 8007f6a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007f6e:	d87f      	bhi.n	8008070 <HAL_TIM_ConfigClockSource+0x16c>
 8007f70:	2b70      	cmp	r3, #112	@ 0x70
 8007f72:	d01a      	beq.n	8007faa <HAL_TIM_ConfigClockSource+0xa6>
 8007f74:	2b70      	cmp	r3, #112	@ 0x70
 8007f76:	d87b      	bhi.n	8008070 <HAL_TIM_ConfigClockSource+0x16c>
 8007f78:	2b60      	cmp	r3, #96	@ 0x60
 8007f7a:	d050      	beq.n	800801e <HAL_TIM_ConfigClockSource+0x11a>
 8007f7c:	2b60      	cmp	r3, #96	@ 0x60
 8007f7e:	d877      	bhi.n	8008070 <HAL_TIM_ConfigClockSource+0x16c>
 8007f80:	2b50      	cmp	r3, #80	@ 0x50
 8007f82:	d03c      	beq.n	8007ffe <HAL_TIM_ConfigClockSource+0xfa>
 8007f84:	2b50      	cmp	r3, #80	@ 0x50
 8007f86:	d873      	bhi.n	8008070 <HAL_TIM_ConfigClockSource+0x16c>
 8007f88:	2b40      	cmp	r3, #64	@ 0x40
 8007f8a:	d058      	beq.n	800803e <HAL_TIM_ConfigClockSource+0x13a>
 8007f8c:	2b40      	cmp	r3, #64	@ 0x40
 8007f8e:	d86f      	bhi.n	8008070 <HAL_TIM_ConfigClockSource+0x16c>
 8007f90:	2b30      	cmp	r3, #48	@ 0x30
 8007f92:	d064      	beq.n	800805e <HAL_TIM_ConfigClockSource+0x15a>
 8007f94:	2b30      	cmp	r3, #48	@ 0x30
 8007f96:	d86b      	bhi.n	8008070 <HAL_TIM_ConfigClockSource+0x16c>
 8007f98:	2b20      	cmp	r3, #32
 8007f9a:	d060      	beq.n	800805e <HAL_TIM_ConfigClockSource+0x15a>
 8007f9c:	2b20      	cmp	r3, #32
 8007f9e:	d867      	bhi.n	8008070 <HAL_TIM_ConfigClockSource+0x16c>
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d05c      	beq.n	800805e <HAL_TIM_ConfigClockSource+0x15a>
 8007fa4:	2b10      	cmp	r3, #16
 8007fa6:	d05a      	beq.n	800805e <HAL_TIM_ConfigClockSource+0x15a>
 8007fa8:	e062      	b.n	8008070 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007fae:	683b      	ldr	r3, [r7, #0]
 8007fb0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007fb2:	683b      	ldr	r3, [r7, #0]
 8007fb4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007fb6:	683b      	ldr	r3, [r7, #0]
 8007fb8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007fba:	f000 fb5f 	bl	800867c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	689b      	ldr	r3, [r3, #8]
 8007fc4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007fc6:	68bb      	ldr	r3, [r7, #8]
 8007fc8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007fcc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	68ba      	ldr	r2, [r7, #8]
 8007fd4:	609a      	str	r2, [r3, #8]
      break;
 8007fd6:	e04f      	b.n	8008078 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007fdc:	683b      	ldr	r3, [r7, #0]
 8007fde:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007fe0:	683b      	ldr	r3, [r7, #0]
 8007fe2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007fe4:	683b      	ldr	r3, [r7, #0]
 8007fe6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007fe8:	f000 fb48 	bl	800867c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	689a      	ldr	r2, [r3, #8]
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007ffa:	609a      	str	r2, [r3, #8]
      break;
 8007ffc:	e03c      	b.n	8008078 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008002:	683b      	ldr	r3, [r7, #0]
 8008004:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008006:	683b      	ldr	r3, [r7, #0]
 8008008:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800800a:	461a      	mov	r2, r3
 800800c:	f000 fabc 	bl	8008588 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	2150      	movs	r1, #80	@ 0x50
 8008016:	4618      	mov	r0, r3
 8008018:	f000 fb15 	bl	8008646 <TIM_ITRx_SetConfig>
      break;
 800801c:	e02c      	b.n	8008078 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008022:	683b      	ldr	r3, [r7, #0]
 8008024:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008026:	683b      	ldr	r3, [r7, #0]
 8008028:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800802a:	461a      	mov	r2, r3
 800802c:	f000 fadb 	bl	80085e6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	2160      	movs	r1, #96	@ 0x60
 8008036:	4618      	mov	r0, r3
 8008038:	f000 fb05 	bl	8008646 <TIM_ITRx_SetConfig>
      break;
 800803c:	e01c      	b.n	8008078 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008042:	683b      	ldr	r3, [r7, #0]
 8008044:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008046:	683b      	ldr	r3, [r7, #0]
 8008048:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800804a:	461a      	mov	r2, r3
 800804c:	f000 fa9c 	bl	8008588 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	2140      	movs	r1, #64	@ 0x40
 8008056:	4618      	mov	r0, r3
 8008058:	f000 faf5 	bl	8008646 <TIM_ITRx_SetConfig>
      break;
 800805c:	e00c      	b.n	8008078 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681a      	ldr	r2, [r3, #0]
 8008062:	683b      	ldr	r3, [r7, #0]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	4619      	mov	r1, r3
 8008068:	4610      	mov	r0, r2
 800806a:	f000 faec 	bl	8008646 <TIM_ITRx_SetConfig>
      break;
 800806e:	e003      	b.n	8008078 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008070:	2301      	movs	r3, #1
 8008072:	73fb      	strb	r3, [r7, #15]
      break;
 8008074:	e000      	b.n	8008078 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008076:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	2201      	movs	r2, #1
 800807c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	2200      	movs	r2, #0
 8008084:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008088:	7bfb      	ldrb	r3, [r7, #15]
}
 800808a:	4618      	mov	r0, r3
 800808c:	3710      	adds	r7, #16
 800808e:	46bd      	mov	sp, r7
 8008090:	bd80      	pop	{r7, pc}

08008092 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008092:	b480      	push	{r7}
 8008094:	b083      	sub	sp, #12
 8008096:	af00      	add	r7, sp, #0
 8008098:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800809a:	bf00      	nop
 800809c:	370c      	adds	r7, #12
 800809e:	46bd      	mov	sp, r7
 80080a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a4:	4770      	bx	lr

080080a6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80080a6:	b480      	push	{r7}
 80080a8:	b083      	sub	sp, #12
 80080aa:	af00      	add	r7, sp, #0
 80080ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80080ae:	bf00      	nop
 80080b0:	370c      	adds	r7, #12
 80080b2:	46bd      	mov	sp, r7
 80080b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b8:	4770      	bx	lr

080080ba <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80080ba:	b480      	push	{r7}
 80080bc:	b083      	sub	sp, #12
 80080be:	af00      	add	r7, sp, #0
 80080c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80080c2:	bf00      	nop
 80080c4:	370c      	adds	r7, #12
 80080c6:	46bd      	mov	sp, r7
 80080c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080cc:	4770      	bx	lr
	...

080080d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80080d0:	b480      	push	{r7}
 80080d2:	b085      	sub	sp, #20
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	6078      	str	r0, [r7, #4]
 80080d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	4a46      	ldr	r2, [pc, #280]	@ (80081fc <TIM_Base_SetConfig+0x12c>)
 80080e4:	4293      	cmp	r3, r2
 80080e6:	d013      	beq.n	8008110 <TIM_Base_SetConfig+0x40>
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80080ee:	d00f      	beq.n	8008110 <TIM_Base_SetConfig+0x40>
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	4a43      	ldr	r2, [pc, #268]	@ (8008200 <TIM_Base_SetConfig+0x130>)
 80080f4:	4293      	cmp	r3, r2
 80080f6:	d00b      	beq.n	8008110 <TIM_Base_SetConfig+0x40>
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	4a42      	ldr	r2, [pc, #264]	@ (8008204 <TIM_Base_SetConfig+0x134>)
 80080fc:	4293      	cmp	r3, r2
 80080fe:	d007      	beq.n	8008110 <TIM_Base_SetConfig+0x40>
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	4a41      	ldr	r2, [pc, #260]	@ (8008208 <TIM_Base_SetConfig+0x138>)
 8008104:	4293      	cmp	r3, r2
 8008106:	d003      	beq.n	8008110 <TIM_Base_SetConfig+0x40>
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	4a40      	ldr	r2, [pc, #256]	@ (800820c <TIM_Base_SetConfig+0x13c>)
 800810c:	4293      	cmp	r3, r2
 800810e:	d108      	bne.n	8008122 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008116:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008118:	683b      	ldr	r3, [r7, #0]
 800811a:	685b      	ldr	r3, [r3, #4]
 800811c:	68fa      	ldr	r2, [r7, #12]
 800811e:	4313      	orrs	r3, r2
 8008120:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	4a35      	ldr	r2, [pc, #212]	@ (80081fc <TIM_Base_SetConfig+0x12c>)
 8008126:	4293      	cmp	r3, r2
 8008128:	d02b      	beq.n	8008182 <TIM_Base_SetConfig+0xb2>
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008130:	d027      	beq.n	8008182 <TIM_Base_SetConfig+0xb2>
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	4a32      	ldr	r2, [pc, #200]	@ (8008200 <TIM_Base_SetConfig+0x130>)
 8008136:	4293      	cmp	r3, r2
 8008138:	d023      	beq.n	8008182 <TIM_Base_SetConfig+0xb2>
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	4a31      	ldr	r2, [pc, #196]	@ (8008204 <TIM_Base_SetConfig+0x134>)
 800813e:	4293      	cmp	r3, r2
 8008140:	d01f      	beq.n	8008182 <TIM_Base_SetConfig+0xb2>
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	4a30      	ldr	r2, [pc, #192]	@ (8008208 <TIM_Base_SetConfig+0x138>)
 8008146:	4293      	cmp	r3, r2
 8008148:	d01b      	beq.n	8008182 <TIM_Base_SetConfig+0xb2>
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	4a2f      	ldr	r2, [pc, #188]	@ (800820c <TIM_Base_SetConfig+0x13c>)
 800814e:	4293      	cmp	r3, r2
 8008150:	d017      	beq.n	8008182 <TIM_Base_SetConfig+0xb2>
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	4a2e      	ldr	r2, [pc, #184]	@ (8008210 <TIM_Base_SetConfig+0x140>)
 8008156:	4293      	cmp	r3, r2
 8008158:	d013      	beq.n	8008182 <TIM_Base_SetConfig+0xb2>
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	4a2d      	ldr	r2, [pc, #180]	@ (8008214 <TIM_Base_SetConfig+0x144>)
 800815e:	4293      	cmp	r3, r2
 8008160:	d00f      	beq.n	8008182 <TIM_Base_SetConfig+0xb2>
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	4a2c      	ldr	r2, [pc, #176]	@ (8008218 <TIM_Base_SetConfig+0x148>)
 8008166:	4293      	cmp	r3, r2
 8008168:	d00b      	beq.n	8008182 <TIM_Base_SetConfig+0xb2>
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	4a2b      	ldr	r2, [pc, #172]	@ (800821c <TIM_Base_SetConfig+0x14c>)
 800816e:	4293      	cmp	r3, r2
 8008170:	d007      	beq.n	8008182 <TIM_Base_SetConfig+0xb2>
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	4a2a      	ldr	r2, [pc, #168]	@ (8008220 <TIM_Base_SetConfig+0x150>)
 8008176:	4293      	cmp	r3, r2
 8008178:	d003      	beq.n	8008182 <TIM_Base_SetConfig+0xb2>
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	4a29      	ldr	r2, [pc, #164]	@ (8008224 <TIM_Base_SetConfig+0x154>)
 800817e:	4293      	cmp	r3, r2
 8008180:	d108      	bne.n	8008194 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008188:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800818a:	683b      	ldr	r3, [r7, #0]
 800818c:	68db      	ldr	r3, [r3, #12]
 800818e:	68fa      	ldr	r2, [r7, #12]
 8008190:	4313      	orrs	r3, r2
 8008192:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800819a:	683b      	ldr	r3, [r7, #0]
 800819c:	695b      	ldr	r3, [r3, #20]
 800819e:	4313      	orrs	r3, r2
 80081a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	68fa      	ldr	r2, [r7, #12]
 80081a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80081a8:	683b      	ldr	r3, [r7, #0]
 80081aa:	689a      	ldr	r2, [r3, #8]
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80081b0:	683b      	ldr	r3, [r7, #0]
 80081b2:	681a      	ldr	r2, [r3, #0]
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	4a10      	ldr	r2, [pc, #64]	@ (80081fc <TIM_Base_SetConfig+0x12c>)
 80081bc:	4293      	cmp	r3, r2
 80081be:	d003      	beq.n	80081c8 <TIM_Base_SetConfig+0xf8>
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	4a12      	ldr	r2, [pc, #72]	@ (800820c <TIM_Base_SetConfig+0x13c>)
 80081c4:	4293      	cmp	r3, r2
 80081c6:	d103      	bne.n	80081d0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80081c8:	683b      	ldr	r3, [r7, #0]
 80081ca:	691a      	ldr	r2, [r3, #16]
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	2201      	movs	r2, #1
 80081d4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	691b      	ldr	r3, [r3, #16]
 80081da:	f003 0301 	and.w	r3, r3, #1
 80081de:	2b01      	cmp	r3, #1
 80081e0:	d105      	bne.n	80081ee <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	691b      	ldr	r3, [r3, #16]
 80081e6:	f023 0201 	bic.w	r2, r3, #1
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	611a      	str	r2, [r3, #16]
  }
}
 80081ee:	bf00      	nop
 80081f0:	3714      	adds	r7, #20
 80081f2:	46bd      	mov	sp, r7
 80081f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f8:	4770      	bx	lr
 80081fa:	bf00      	nop
 80081fc:	40010000 	.word	0x40010000
 8008200:	40000400 	.word	0x40000400
 8008204:	40000800 	.word	0x40000800
 8008208:	40000c00 	.word	0x40000c00
 800820c:	40010400 	.word	0x40010400
 8008210:	40014000 	.word	0x40014000
 8008214:	40014400 	.word	0x40014400
 8008218:	40014800 	.word	0x40014800
 800821c:	40001800 	.word	0x40001800
 8008220:	40001c00 	.word	0x40001c00
 8008224:	40002000 	.word	0x40002000

08008228 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008228:	b480      	push	{r7}
 800822a:	b087      	sub	sp, #28
 800822c:	af00      	add	r7, sp, #0
 800822e:	6078      	str	r0, [r7, #4]
 8008230:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	6a1b      	ldr	r3, [r3, #32]
 8008236:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	6a1b      	ldr	r3, [r3, #32]
 800823c:	f023 0201 	bic.w	r2, r3, #1
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	685b      	ldr	r3, [r3, #4]
 8008248:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	699b      	ldr	r3, [r3, #24]
 800824e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008256:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	f023 0303 	bic.w	r3, r3, #3
 800825e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008260:	683b      	ldr	r3, [r7, #0]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	68fa      	ldr	r2, [r7, #12]
 8008266:	4313      	orrs	r3, r2
 8008268:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800826a:	697b      	ldr	r3, [r7, #20]
 800826c:	f023 0302 	bic.w	r3, r3, #2
 8008270:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008272:	683b      	ldr	r3, [r7, #0]
 8008274:	689b      	ldr	r3, [r3, #8]
 8008276:	697a      	ldr	r2, [r7, #20]
 8008278:	4313      	orrs	r3, r2
 800827a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	4a20      	ldr	r2, [pc, #128]	@ (8008300 <TIM_OC1_SetConfig+0xd8>)
 8008280:	4293      	cmp	r3, r2
 8008282:	d003      	beq.n	800828c <TIM_OC1_SetConfig+0x64>
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	4a1f      	ldr	r2, [pc, #124]	@ (8008304 <TIM_OC1_SetConfig+0xdc>)
 8008288:	4293      	cmp	r3, r2
 800828a:	d10c      	bne.n	80082a6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800828c:	697b      	ldr	r3, [r7, #20]
 800828e:	f023 0308 	bic.w	r3, r3, #8
 8008292:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008294:	683b      	ldr	r3, [r7, #0]
 8008296:	68db      	ldr	r3, [r3, #12]
 8008298:	697a      	ldr	r2, [r7, #20]
 800829a:	4313      	orrs	r3, r2
 800829c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800829e:	697b      	ldr	r3, [r7, #20]
 80082a0:	f023 0304 	bic.w	r3, r3, #4
 80082a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	4a15      	ldr	r2, [pc, #84]	@ (8008300 <TIM_OC1_SetConfig+0xd8>)
 80082aa:	4293      	cmp	r3, r2
 80082ac:	d003      	beq.n	80082b6 <TIM_OC1_SetConfig+0x8e>
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	4a14      	ldr	r2, [pc, #80]	@ (8008304 <TIM_OC1_SetConfig+0xdc>)
 80082b2:	4293      	cmp	r3, r2
 80082b4:	d111      	bne.n	80082da <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80082b6:	693b      	ldr	r3, [r7, #16]
 80082b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80082bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80082be:	693b      	ldr	r3, [r7, #16]
 80082c0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80082c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80082c6:	683b      	ldr	r3, [r7, #0]
 80082c8:	695b      	ldr	r3, [r3, #20]
 80082ca:	693a      	ldr	r2, [r7, #16]
 80082cc:	4313      	orrs	r3, r2
 80082ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80082d0:	683b      	ldr	r3, [r7, #0]
 80082d2:	699b      	ldr	r3, [r3, #24]
 80082d4:	693a      	ldr	r2, [r7, #16]
 80082d6:	4313      	orrs	r3, r2
 80082d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	693a      	ldr	r2, [r7, #16]
 80082de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	68fa      	ldr	r2, [r7, #12]
 80082e4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80082e6:	683b      	ldr	r3, [r7, #0]
 80082e8:	685a      	ldr	r2, [r3, #4]
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	697a      	ldr	r2, [r7, #20]
 80082f2:	621a      	str	r2, [r3, #32]
}
 80082f4:	bf00      	nop
 80082f6:	371c      	adds	r7, #28
 80082f8:	46bd      	mov	sp, r7
 80082fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fe:	4770      	bx	lr
 8008300:	40010000 	.word	0x40010000
 8008304:	40010400 	.word	0x40010400

08008308 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008308:	b480      	push	{r7}
 800830a:	b087      	sub	sp, #28
 800830c:	af00      	add	r7, sp, #0
 800830e:	6078      	str	r0, [r7, #4]
 8008310:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	6a1b      	ldr	r3, [r3, #32]
 8008316:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	6a1b      	ldr	r3, [r3, #32]
 800831c:	f023 0210 	bic.w	r2, r3, #16
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	685b      	ldr	r3, [r3, #4]
 8008328:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	699b      	ldr	r3, [r3, #24]
 800832e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008336:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800833e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008340:	683b      	ldr	r3, [r7, #0]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	021b      	lsls	r3, r3, #8
 8008346:	68fa      	ldr	r2, [r7, #12]
 8008348:	4313      	orrs	r3, r2
 800834a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800834c:	697b      	ldr	r3, [r7, #20]
 800834e:	f023 0320 	bic.w	r3, r3, #32
 8008352:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008354:	683b      	ldr	r3, [r7, #0]
 8008356:	689b      	ldr	r3, [r3, #8]
 8008358:	011b      	lsls	r3, r3, #4
 800835a:	697a      	ldr	r2, [r7, #20]
 800835c:	4313      	orrs	r3, r2
 800835e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	4a22      	ldr	r2, [pc, #136]	@ (80083ec <TIM_OC2_SetConfig+0xe4>)
 8008364:	4293      	cmp	r3, r2
 8008366:	d003      	beq.n	8008370 <TIM_OC2_SetConfig+0x68>
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	4a21      	ldr	r2, [pc, #132]	@ (80083f0 <TIM_OC2_SetConfig+0xe8>)
 800836c:	4293      	cmp	r3, r2
 800836e:	d10d      	bne.n	800838c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008370:	697b      	ldr	r3, [r7, #20]
 8008372:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008376:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008378:	683b      	ldr	r3, [r7, #0]
 800837a:	68db      	ldr	r3, [r3, #12]
 800837c:	011b      	lsls	r3, r3, #4
 800837e:	697a      	ldr	r2, [r7, #20]
 8008380:	4313      	orrs	r3, r2
 8008382:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008384:	697b      	ldr	r3, [r7, #20]
 8008386:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800838a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	4a17      	ldr	r2, [pc, #92]	@ (80083ec <TIM_OC2_SetConfig+0xe4>)
 8008390:	4293      	cmp	r3, r2
 8008392:	d003      	beq.n	800839c <TIM_OC2_SetConfig+0x94>
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	4a16      	ldr	r2, [pc, #88]	@ (80083f0 <TIM_OC2_SetConfig+0xe8>)
 8008398:	4293      	cmp	r3, r2
 800839a:	d113      	bne.n	80083c4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800839c:	693b      	ldr	r3, [r7, #16]
 800839e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80083a2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80083a4:	693b      	ldr	r3, [r7, #16]
 80083a6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80083aa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80083ac:	683b      	ldr	r3, [r7, #0]
 80083ae:	695b      	ldr	r3, [r3, #20]
 80083b0:	009b      	lsls	r3, r3, #2
 80083b2:	693a      	ldr	r2, [r7, #16]
 80083b4:	4313      	orrs	r3, r2
 80083b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80083b8:	683b      	ldr	r3, [r7, #0]
 80083ba:	699b      	ldr	r3, [r3, #24]
 80083bc:	009b      	lsls	r3, r3, #2
 80083be:	693a      	ldr	r2, [r7, #16]
 80083c0:	4313      	orrs	r3, r2
 80083c2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	693a      	ldr	r2, [r7, #16]
 80083c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	68fa      	ldr	r2, [r7, #12]
 80083ce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80083d0:	683b      	ldr	r3, [r7, #0]
 80083d2:	685a      	ldr	r2, [r3, #4]
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	697a      	ldr	r2, [r7, #20]
 80083dc:	621a      	str	r2, [r3, #32]
}
 80083de:	bf00      	nop
 80083e0:	371c      	adds	r7, #28
 80083e2:	46bd      	mov	sp, r7
 80083e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e8:	4770      	bx	lr
 80083ea:	bf00      	nop
 80083ec:	40010000 	.word	0x40010000
 80083f0:	40010400 	.word	0x40010400

080083f4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80083f4:	b480      	push	{r7}
 80083f6:	b087      	sub	sp, #28
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	6078      	str	r0, [r7, #4]
 80083fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	6a1b      	ldr	r3, [r3, #32]
 8008402:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	6a1b      	ldr	r3, [r3, #32]
 8008408:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	685b      	ldr	r3, [r3, #4]
 8008414:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	69db      	ldr	r3, [r3, #28]
 800841a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008422:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	f023 0303 	bic.w	r3, r3, #3
 800842a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800842c:	683b      	ldr	r3, [r7, #0]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	68fa      	ldr	r2, [r7, #12]
 8008432:	4313      	orrs	r3, r2
 8008434:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008436:	697b      	ldr	r3, [r7, #20]
 8008438:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800843c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800843e:	683b      	ldr	r3, [r7, #0]
 8008440:	689b      	ldr	r3, [r3, #8]
 8008442:	021b      	lsls	r3, r3, #8
 8008444:	697a      	ldr	r2, [r7, #20]
 8008446:	4313      	orrs	r3, r2
 8008448:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	4a21      	ldr	r2, [pc, #132]	@ (80084d4 <TIM_OC3_SetConfig+0xe0>)
 800844e:	4293      	cmp	r3, r2
 8008450:	d003      	beq.n	800845a <TIM_OC3_SetConfig+0x66>
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	4a20      	ldr	r2, [pc, #128]	@ (80084d8 <TIM_OC3_SetConfig+0xe4>)
 8008456:	4293      	cmp	r3, r2
 8008458:	d10d      	bne.n	8008476 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800845a:	697b      	ldr	r3, [r7, #20]
 800845c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008460:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008462:	683b      	ldr	r3, [r7, #0]
 8008464:	68db      	ldr	r3, [r3, #12]
 8008466:	021b      	lsls	r3, r3, #8
 8008468:	697a      	ldr	r2, [r7, #20]
 800846a:	4313      	orrs	r3, r2
 800846c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800846e:	697b      	ldr	r3, [r7, #20]
 8008470:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008474:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	4a16      	ldr	r2, [pc, #88]	@ (80084d4 <TIM_OC3_SetConfig+0xe0>)
 800847a:	4293      	cmp	r3, r2
 800847c:	d003      	beq.n	8008486 <TIM_OC3_SetConfig+0x92>
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	4a15      	ldr	r2, [pc, #84]	@ (80084d8 <TIM_OC3_SetConfig+0xe4>)
 8008482:	4293      	cmp	r3, r2
 8008484:	d113      	bne.n	80084ae <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008486:	693b      	ldr	r3, [r7, #16]
 8008488:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800848c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800848e:	693b      	ldr	r3, [r7, #16]
 8008490:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008494:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008496:	683b      	ldr	r3, [r7, #0]
 8008498:	695b      	ldr	r3, [r3, #20]
 800849a:	011b      	lsls	r3, r3, #4
 800849c:	693a      	ldr	r2, [r7, #16]
 800849e:	4313      	orrs	r3, r2
 80084a0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80084a2:	683b      	ldr	r3, [r7, #0]
 80084a4:	699b      	ldr	r3, [r3, #24]
 80084a6:	011b      	lsls	r3, r3, #4
 80084a8:	693a      	ldr	r2, [r7, #16]
 80084aa:	4313      	orrs	r3, r2
 80084ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	693a      	ldr	r2, [r7, #16]
 80084b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	68fa      	ldr	r2, [r7, #12]
 80084b8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80084ba:	683b      	ldr	r3, [r7, #0]
 80084bc:	685a      	ldr	r2, [r3, #4]
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	697a      	ldr	r2, [r7, #20]
 80084c6:	621a      	str	r2, [r3, #32]
}
 80084c8:	bf00      	nop
 80084ca:	371c      	adds	r7, #28
 80084cc:	46bd      	mov	sp, r7
 80084ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d2:	4770      	bx	lr
 80084d4:	40010000 	.word	0x40010000
 80084d8:	40010400 	.word	0x40010400

080084dc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80084dc:	b480      	push	{r7}
 80084de:	b087      	sub	sp, #28
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	6078      	str	r0, [r7, #4]
 80084e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	6a1b      	ldr	r3, [r3, #32]
 80084ea:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	6a1b      	ldr	r3, [r3, #32]
 80084f0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	685b      	ldr	r3, [r3, #4]
 80084fc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	69db      	ldr	r3, [r3, #28]
 8008502:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800850a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008512:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008514:	683b      	ldr	r3, [r7, #0]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	021b      	lsls	r3, r3, #8
 800851a:	68fa      	ldr	r2, [r7, #12]
 800851c:	4313      	orrs	r3, r2
 800851e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008520:	693b      	ldr	r3, [r7, #16]
 8008522:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008526:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008528:	683b      	ldr	r3, [r7, #0]
 800852a:	689b      	ldr	r3, [r3, #8]
 800852c:	031b      	lsls	r3, r3, #12
 800852e:	693a      	ldr	r2, [r7, #16]
 8008530:	4313      	orrs	r3, r2
 8008532:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	4a12      	ldr	r2, [pc, #72]	@ (8008580 <TIM_OC4_SetConfig+0xa4>)
 8008538:	4293      	cmp	r3, r2
 800853a:	d003      	beq.n	8008544 <TIM_OC4_SetConfig+0x68>
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	4a11      	ldr	r2, [pc, #68]	@ (8008584 <TIM_OC4_SetConfig+0xa8>)
 8008540:	4293      	cmp	r3, r2
 8008542:	d109      	bne.n	8008558 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008544:	697b      	ldr	r3, [r7, #20]
 8008546:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800854a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800854c:	683b      	ldr	r3, [r7, #0]
 800854e:	695b      	ldr	r3, [r3, #20]
 8008550:	019b      	lsls	r3, r3, #6
 8008552:	697a      	ldr	r2, [r7, #20]
 8008554:	4313      	orrs	r3, r2
 8008556:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	697a      	ldr	r2, [r7, #20]
 800855c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	68fa      	ldr	r2, [r7, #12]
 8008562:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008564:	683b      	ldr	r3, [r7, #0]
 8008566:	685a      	ldr	r2, [r3, #4]
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	693a      	ldr	r2, [r7, #16]
 8008570:	621a      	str	r2, [r3, #32]
}
 8008572:	bf00      	nop
 8008574:	371c      	adds	r7, #28
 8008576:	46bd      	mov	sp, r7
 8008578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857c:	4770      	bx	lr
 800857e:	bf00      	nop
 8008580:	40010000 	.word	0x40010000
 8008584:	40010400 	.word	0x40010400

08008588 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008588:	b480      	push	{r7}
 800858a:	b087      	sub	sp, #28
 800858c:	af00      	add	r7, sp, #0
 800858e:	60f8      	str	r0, [r7, #12]
 8008590:	60b9      	str	r1, [r7, #8]
 8008592:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	6a1b      	ldr	r3, [r3, #32]
 8008598:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	6a1b      	ldr	r3, [r3, #32]
 800859e:	f023 0201 	bic.w	r2, r3, #1
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	699b      	ldr	r3, [r3, #24]
 80085aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80085ac:	693b      	ldr	r3, [r7, #16]
 80085ae:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80085b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	011b      	lsls	r3, r3, #4
 80085b8:	693a      	ldr	r2, [r7, #16]
 80085ba:	4313      	orrs	r3, r2
 80085bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80085be:	697b      	ldr	r3, [r7, #20]
 80085c0:	f023 030a 	bic.w	r3, r3, #10
 80085c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80085c6:	697a      	ldr	r2, [r7, #20]
 80085c8:	68bb      	ldr	r3, [r7, #8]
 80085ca:	4313      	orrs	r3, r2
 80085cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	693a      	ldr	r2, [r7, #16]
 80085d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	697a      	ldr	r2, [r7, #20]
 80085d8:	621a      	str	r2, [r3, #32]
}
 80085da:	bf00      	nop
 80085dc:	371c      	adds	r7, #28
 80085de:	46bd      	mov	sp, r7
 80085e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e4:	4770      	bx	lr

080085e6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80085e6:	b480      	push	{r7}
 80085e8:	b087      	sub	sp, #28
 80085ea:	af00      	add	r7, sp, #0
 80085ec:	60f8      	str	r0, [r7, #12]
 80085ee:	60b9      	str	r1, [r7, #8]
 80085f0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	6a1b      	ldr	r3, [r3, #32]
 80085f6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	6a1b      	ldr	r3, [r3, #32]
 80085fc:	f023 0210 	bic.w	r2, r3, #16
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	699b      	ldr	r3, [r3, #24]
 8008608:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800860a:	693b      	ldr	r3, [r7, #16]
 800860c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008610:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	031b      	lsls	r3, r3, #12
 8008616:	693a      	ldr	r2, [r7, #16]
 8008618:	4313      	orrs	r3, r2
 800861a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800861c:	697b      	ldr	r3, [r7, #20]
 800861e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008622:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008624:	68bb      	ldr	r3, [r7, #8]
 8008626:	011b      	lsls	r3, r3, #4
 8008628:	697a      	ldr	r2, [r7, #20]
 800862a:	4313      	orrs	r3, r2
 800862c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	693a      	ldr	r2, [r7, #16]
 8008632:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	697a      	ldr	r2, [r7, #20]
 8008638:	621a      	str	r2, [r3, #32]
}
 800863a:	bf00      	nop
 800863c:	371c      	adds	r7, #28
 800863e:	46bd      	mov	sp, r7
 8008640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008644:	4770      	bx	lr

08008646 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008646:	b480      	push	{r7}
 8008648:	b085      	sub	sp, #20
 800864a:	af00      	add	r7, sp, #0
 800864c:	6078      	str	r0, [r7, #4]
 800864e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	689b      	ldr	r3, [r3, #8]
 8008654:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800865c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800865e:	683a      	ldr	r2, [r7, #0]
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	4313      	orrs	r3, r2
 8008664:	f043 0307 	orr.w	r3, r3, #7
 8008668:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	68fa      	ldr	r2, [r7, #12]
 800866e:	609a      	str	r2, [r3, #8]
}
 8008670:	bf00      	nop
 8008672:	3714      	adds	r7, #20
 8008674:	46bd      	mov	sp, r7
 8008676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800867a:	4770      	bx	lr

0800867c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800867c:	b480      	push	{r7}
 800867e:	b087      	sub	sp, #28
 8008680:	af00      	add	r7, sp, #0
 8008682:	60f8      	str	r0, [r7, #12]
 8008684:	60b9      	str	r1, [r7, #8]
 8008686:	607a      	str	r2, [r7, #4]
 8008688:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	689b      	ldr	r3, [r3, #8]
 800868e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008690:	697b      	ldr	r3, [r7, #20]
 8008692:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008696:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008698:	683b      	ldr	r3, [r7, #0]
 800869a:	021a      	lsls	r2, r3, #8
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	431a      	orrs	r2, r3
 80086a0:	68bb      	ldr	r3, [r7, #8]
 80086a2:	4313      	orrs	r3, r2
 80086a4:	697a      	ldr	r2, [r7, #20]
 80086a6:	4313      	orrs	r3, r2
 80086a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	697a      	ldr	r2, [r7, #20]
 80086ae:	609a      	str	r2, [r3, #8]
}
 80086b0:	bf00      	nop
 80086b2:	371c      	adds	r7, #28
 80086b4:	46bd      	mov	sp, r7
 80086b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ba:	4770      	bx	lr

080086bc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80086bc:	b480      	push	{r7}
 80086be:	b087      	sub	sp, #28
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	60f8      	str	r0, [r7, #12]
 80086c4:	60b9      	str	r1, [r7, #8]
 80086c6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80086c8:	68bb      	ldr	r3, [r7, #8]
 80086ca:	f003 031f 	and.w	r3, r3, #31
 80086ce:	2201      	movs	r2, #1
 80086d0:	fa02 f303 	lsl.w	r3, r2, r3
 80086d4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	6a1a      	ldr	r2, [r3, #32]
 80086da:	697b      	ldr	r3, [r7, #20]
 80086dc:	43db      	mvns	r3, r3
 80086de:	401a      	ands	r2, r3
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	6a1a      	ldr	r2, [r3, #32]
 80086e8:	68bb      	ldr	r3, [r7, #8]
 80086ea:	f003 031f 	and.w	r3, r3, #31
 80086ee:	6879      	ldr	r1, [r7, #4]
 80086f0:	fa01 f303 	lsl.w	r3, r1, r3
 80086f4:	431a      	orrs	r2, r3
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	621a      	str	r2, [r3, #32]
}
 80086fa:	bf00      	nop
 80086fc:	371c      	adds	r7, #28
 80086fe:	46bd      	mov	sp, r7
 8008700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008704:	4770      	bx	lr
	...

08008708 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008708:	b480      	push	{r7}
 800870a:	b085      	sub	sp, #20
 800870c:	af00      	add	r7, sp, #0
 800870e:	6078      	str	r0, [r7, #4]
 8008710:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008718:	2b01      	cmp	r3, #1
 800871a:	d101      	bne.n	8008720 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800871c:	2302      	movs	r3, #2
 800871e:	e05a      	b.n	80087d6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	2201      	movs	r2, #1
 8008724:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	2202      	movs	r2, #2
 800872c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	685b      	ldr	r3, [r3, #4]
 8008736:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	689b      	ldr	r3, [r3, #8]
 800873e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008746:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008748:	683b      	ldr	r3, [r7, #0]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	68fa      	ldr	r2, [r7, #12]
 800874e:	4313      	orrs	r3, r2
 8008750:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	68fa      	ldr	r2, [r7, #12]
 8008758:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	4a21      	ldr	r2, [pc, #132]	@ (80087e4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008760:	4293      	cmp	r3, r2
 8008762:	d022      	beq.n	80087aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800876c:	d01d      	beq.n	80087aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	4a1d      	ldr	r2, [pc, #116]	@ (80087e8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008774:	4293      	cmp	r3, r2
 8008776:	d018      	beq.n	80087aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	4a1b      	ldr	r2, [pc, #108]	@ (80087ec <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800877e:	4293      	cmp	r3, r2
 8008780:	d013      	beq.n	80087aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	4a1a      	ldr	r2, [pc, #104]	@ (80087f0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008788:	4293      	cmp	r3, r2
 800878a:	d00e      	beq.n	80087aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	4a18      	ldr	r2, [pc, #96]	@ (80087f4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008792:	4293      	cmp	r3, r2
 8008794:	d009      	beq.n	80087aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	4a17      	ldr	r2, [pc, #92]	@ (80087f8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800879c:	4293      	cmp	r3, r2
 800879e:	d004      	beq.n	80087aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	4a15      	ldr	r2, [pc, #84]	@ (80087fc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80087a6:	4293      	cmp	r3, r2
 80087a8:	d10c      	bne.n	80087c4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80087aa:	68bb      	ldr	r3, [r7, #8]
 80087ac:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80087b0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80087b2:	683b      	ldr	r3, [r7, #0]
 80087b4:	685b      	ldr	r3, [r3, #4]
 80087b6:	68ba      	ldr	r2, [r7, #8]
 80087b8:	4313      	orrs	r3, r2
 80087ba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	68ba      	ldr	r2, [r7, #8]
 80087c2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	2201      	movs	r2, #1
 80087c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	2200      	movs	r2, #0
 80087d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80087d4:	2300      	movs	r3, #0
}
 80087d6:	4618      	mov	r0, r3
 80087d8:	3714      	adds	r7, #20
 80087da:	46bd      	mov	sp, r7
 80087dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e0:	4770      	bx	lr
 80087e2:	bf00      	nop
 80087e4:	40010000 	.word	0x40010000
 80087e8:	40000400 	.word	0x40000400
 80087ec:	40000800 	.word	0x40000800
 80087f0:	40000c00 	.word	0x40000c00
 80087f4:	40010400 	.word	0x40010400
 80087f8:	40014000 	.word	0x40014000
 80087fc:	40001800 	.word	0x40001800

08008800 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008800:	b480      	push	{r7}
 8008802:	b085      	sub	sp, #20
 8008804:	af00      	add	r7, sp, #0
 8008806:	6078      	str	r0, [r7, #4]
 8008808:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800880a:	2300      	movs	r3, #0
 800880c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008814:	2b01      	cmp	r3, #1
 8008816:	d101      	bne.n	800881c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008818:	2302      	movs	r3, #2
 800881a:	e03d      	b.n	8008898 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	2201      	movs	r2, #1
 8008820:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800882a:	683b      	ldr	r3, [r7, #0]
 800882c:	68db      	ldr	r3, [r3, #12]
 800882e:	4313      	orrs	r3, r2
 8008830:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008838:	683b      	ldr	r3, [r7, #0]
 800883a:	689b      	ldr	r3, [r3, #8]
 800883c:	4313      	orrs	r3, r2
 800883e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8008846:	683b      	ldr	r3, [r7, #0]
 8008848:	685b      	ldr	r3, [r3, #4]
 800884a:	4313      	orrs	r3, r2
 800884c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8008854:	683b      	ldr	r3, [r7, #0]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	4313      	orrs	r3, r2
 800885a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008862:	683b      	ldr	r3, [r7, #0]
 8008864:	691b      	ldr	r3, [r3, #16]
 8008866:	4313      	orrs	r3, r2
 8008868:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8008870:	683b      	ldr	r3, [r7, #0]
 8008872:	695b      	ldr	r3, [r3, #20]
 8008874:	4313      	orrs	r3, r2
 8008876:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800887e:	683b      	ldr	r3, [r7, #0]
 8008880:	69db      	ldr	r3, [r3, #28]
 8008882:	4313      	orrs	r3, r2
 8008884:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	68fa      	ldr	r2, [r7, #12]
 800888c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	2200      	movs	r2, #0
 8008892:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008896:	2300      	movs	r3, #0
}
 8008898:	4618      	mov	r0, r3
 800889a:	3714      	adds	r7, #20
 800889c:	46bd      	mov	sp, r7
 800889e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a2:	4770      	bx	lr

080088a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80088a4:	b480      	push	{r7}
 80088a6:	b083      	sub	sp, #12
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80088ac:	bf00      	nop
 80088ae:	370c      	adds	r7, #12
 80088b0:	46bd      	mov	sp, r7
 80088b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b6:	4770      	bx	lr

080088b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80088b8:	b480      	push	{r7}
 80088ba:	b083      	sub	sp, #12
 80088bc:	af00      	add	r7, sp, #0
 80088be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80088c0:	bf00      	nop
 80088c2:	370c      	adds	r7, #12
 80088c4:	46bd      	mov	sp, r7
 80088c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ca:	4770      	bx	lr

080088cc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80088cc:	b580      	push	{r7, lr}
 80088ce:	b082      	sub	sp, #8
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d101      	bne.n	80088de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80088da:	2301      	movs	r3, #1
 80088dc:	e042      	b.n	8008964 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80088e4:	b2db      	uxtb	r3, r3
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d106      	bne.n	80088f8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	2200      	movs	r2, #0
 80088ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80088f2:	6878      	ldr	r0, [r7, #4]
 80088f4:	f7fb fc3c 	bl	8004170 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	2224      	movs	r2, #36	@ 0x24
 80088fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	68da      	ldr	r2, [r3, #12]
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800890e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008910:	6878      	ldr	r0, [r7, #4]
 8008912:	f000 f973 	bl	8008bfc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	691a      	ldr	r2, [r3, #16]
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008924:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	695a      	ldr	r2, [r3, #20]
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008934:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	68da      	ldr	r2, [r3, #12]
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008944:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	2200      	movs	r2, #0
 800894a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	2220      	movs	r2, #32
 8008950:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	2220      	movs	r2, #32
 8008958:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	2200      	movs	r2, #0
 8008960:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8008962:	2300      	movs	r3, #0
}
 8008964:	4618      	mov	r0, r3
 8008966:	3708      	adds	r7, #8
 8008968:	46bd      	mov	sp, r7
 800896a:	bd80      	pop	{r7, pc}

0800896c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800896c:	b580      	push	{r7, lr}
 800896e:	b08a      	sub	sp, #40	@ 0x28
 8008970:	af02      	add	r7, sp, #8
 8008972:	60f8      	str	r0, [r7, #12]
 8008974:	60b9      	str	r1, [r7, #8]
 8008976:	603b      	str	r3, [r7, #0]
 8008978:	4613      	mov	r3, r2
 800897a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800897c:	2300      	movs	r3, #0
 800897e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008986:	b2db      	uxtb	r3, r3
 8008988:	2b20      	cmp	r3, #32
 800898a:	d175      	bne.n	8008a78 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800898c:	68bb      	ldr	r3, [r7, #8]
 800898e:	2b00      	cmp	r3, #0
 8008990:	d002      	beq.n	8008998 <HAL_UART_Transmit+0x2c>
 8008992:	88fb      	ldrh	r3, [r7, #6]
 8008994:	2b00      	cmp	r3, #0
 8008996:	d101      	bne.n	800899c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008998:	2301      	movs	r3, #1
 800899a:	e06e      	b.n	8008a7a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	2200      	movs	r2, #0
 80089a0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	2221      	movs	r2, #33	@ 0x21
 80089a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80089aa:	f7fb fe6f 	bl	800468c <HAL_GetTick>
 80089ae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	88fa      	ldrh	r2, [r7, #6]
 80089b4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	88fa      	ldrh	r2, [r7, #6]
 80089ba:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	689b      	ldr	r3, [r3, #8]
 80089c0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80089c4:	d108      	bne.n	80089d8 <HAL_UART_Transmit+0x6c>
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	691b      	ldr	r3, [r3, #16]
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d104      	bne.n	80089d8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80089ce:	2300      	movs	r3, #0
 80089d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80089d2:	68bb      	ldr	r3, [r7, #8]
 80089d4:	61bb      	str	r3, [r7, #24]
 80089d6:	e003      	b.n	80089e0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80089d8:	68bb      	ldr	r3, [r7, #8]
 80089da:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80089dc:	2300      	movs	r3, #0
 80089de:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80089e0:	e02e      	b.n	8008a40 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80089e2:	683b      	ldr	r3, [r7, #0]
 80089e4:	9300      	str	r3, [sp, #0]
 80089e6:	697b      	ldr	r3, [r7, #20]
 80089e8:	2200      	movs	r2, #0
 80089ea:	2180      	movs	r1, #128	@ 0x80
 80089ec:	68f8      	ldr	r0, [r7, #12]
 80089ee:	f000 f848 	bl	8008a82 <UART_WaitOnFlagUntilTimeout>
 80089f2:	4603      	mov	r3, r0
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d005      	beq.n	8008a04 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	2220      	movs	r2, #32
 80089fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8008a00:	2303      	movs	r3, #3
 8008a02:	e03a      	b.n	8008a7a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8008a04:	69fb      	ldr	r3, [r7, #28]
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d10b      	bne.n	8008a22 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008a0a:	69bb      	ldr	r3, [r7, #24]
 8008a0c:	881b      	ldrh	r3, [r3, #0]
 8008a0e:	461a      	mov	r2, r3
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008a18:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008a1a:	69bb      	ldr	r3, [r7, #24]
 8008a1c:	3302      	adds	r3, #2
 8008a1e:	61bb      	str	r3, [r7, #24]
 8008a20:	e007      	b.n	8008a32 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008a22:	69fb      	ldr	r3, [r7, #28]
 8008a24:	781a      	ldrb	r2, [r3, #0]
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008a2c:	69fb      	ldr	r3, [r7, #28]
 8008a2e:	3301      	adds	r3, #1
 8008a30:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008a36:	b29b      	uxth	r3, r3
 8008a38:	3b01      	subs	r3, #1
 8008a3a:	b29a      	uxth	r2, r3
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008a44:	b29b      	uxth	r3, r3
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d1cb      	bne.n	80089e2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008a4a:	683b      	ldr	r3, [r7, #0]
 8008a4c:	9300      	str	r3, [sp, #0]
 8008a4e:	697b      	ldr	r3, [r7, #20]
 8008a50:	2200      	movs	r2, #0
 8008a52:	2140      	movs	r1, #64	@ 0x40
 8008a54:	68f8      	ldr	r0, [r7, #12]
 8008a56:	f000 f814 	bl	8008a82 <UART_WaitOnFlagUntilTimeout>
 8008a5a:	4603      	mov	r3, r0
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d005      	beq.n	8008a6c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	2220      	movs	r2, #32
 8008a64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8008a68:	2303      	movs	r3, #3
 8008a6a:	e006      	b.n	8008a7a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	2220      	movs	r2, #32
 8008a70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8008a74:	2300      	movs	r3, #0
 8008a76:	e000      	b.n	8008a7a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8008a78:	2302      	movs	r3, #2
  }
}
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	3720      	adds	r7, #32
 8008a7e:	46bd      	mov	sp, r7
 8008a80:	bd80      	pop	{r7, pc}

08008a82 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008a82:	b580      	push	{r7, lr}
 8008a84:	b086      	sub	sp, #24
 8008a86:	af00      	add	r7, sp, #0
 8008a88:	60f8      	str	r0, [r7, #12]
 8008a8a:	60b9      	str	r1, [r7, #8]
 8008a8c:	603b      	str	r3, [r7, #0]
 8008a8e:	4613      	mov	r3, r2
 8008a90:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008a92:	e03b      	b.n	8008b0c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008a94:	6a3b      	ldr	r3, [r7, #32]
 8008a96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a9a:	d037      	beq.n	8008b0c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008a9c:	f7fb fdf6 	bl	800468c <HAL_GetTick>
 8008aa0:	4602      	mov	r2, r0
 8008aa2:	683b      	ldr	r3, [r7, #0]
 8008aa4:	1ad3      	subs	r3, r2, r3
 8008aa6:	6a3a      	ldr	r2, [r7, #32]
 8008aa8:	429a      	cmp	r2, r3
 8008aaa:	d302      	bcc.n	8008ab2 <UART_WaitOnFlagUntilTimeout+0x30>
 8008aac:	6a3b      	ldr	r3, [r7, #32]
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d101      	bne.n	8008ab6 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008ab2:	2303      	movs	r3, #3
 8008ab4:	e03a      	b.n	8008b2c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	68db      	ldr	r3, [r3, #12]
 8008abc:	f003 0304 	and.w	r3, r3, #4
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d023      	beq.n	8008b0c <UART_WaitOnFlagUntilTimeout+0x8a>
 8008ac4:	68bb      	ldr	r3, [r7, #8]
 8008ac6:	2b80      	cmp	r3, #128	@ 0x80
 8008ac8:	d020      	beq.n	8008b0c <UART_WaitOnFlagUntilTimeout+0x8a>
 8008aca:	68bb      	ldr	r3, [r7, #8]
 8008acc:	2b40      	cmp	r3, #64	@ 0x40
 8008ace:	d01d      	beq.n	8008b0c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	f003 0308 	and.w	r3, r3, #8
 8008ada:	2b08      	cmp	r3, #8
 8008adc:	d116      	bne.n	8008b0c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8008ade:	2300      	movs	r3, #0
 8008ae0:	617b      	str	r3, [r7, #20]
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	617b      	str	r3, [r7, #20]
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	685b      	ldr	r3, [r3, #4]
 8008af0:	617b      	str	r3, [r7, #20]
 8008af2:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008af4:	68f8      	ldr	r0, [r7, #12]
 8008af6:	f000 f81d 	bl	8008b34 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	2208      	movs	r2, #8
 8008afe:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	2200      	movs	r2, #0
 8008b04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8008b08:	2301      	movs	r3, #1
 8008b0a:	e00f      	b.n	8008b2c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	681a      	ldr	r2, [r3, #0]
 8008b12:	68bb      	ldr	r3, [r7, #8]
 8008b14:	4013      	ands	r3, r2
 8008b16:	68ba      	ldr	r2, [r7, #8]
 8008b18:	429a      	cmp	r2, r3
 8008b1a:	bf0c      	ite	eq
 8008b1c:	2301      	moveq	r3, #1
 8008b1e:	2300      	movne	r3, #0
 8008b20:	b2db      	uxtb	r3, r3
 8008b22:	461a      	mov	r2, r3
 8008b24:	79fb      	ldrb	r3, [r7, #7]
 8008b26:	429a      	cmp	r2, r3
 8008b28:	d0b4      	beq.n	8008a94 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008b2a:	2300      	movs	r3, #0
}
 8008b2c:	4618      	mov	r0, r3
 8008b2e:	3718      	adds	r7, #24
 8008b30:	46bd      	mov	sp, r7
 8008b32:	bd80      	pop	{r7, pc}

08008b34 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008b34:	b480      	push	{r7}
 8008b36:	b095      	sub	sp, #84	@ 0x54
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	330c      	adds	r3, #12
 8008b42:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b46:	e853 3f00 	ldrex	r3, [r3]
 8008b4a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008b4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b4e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008b52:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	330c      	adds	r3, #12
 8008b5a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008b5c:	643a      	str	r2, [r7, #64]	@ 0x40
 8008b5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b60:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008b62:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008b64:	e841 2300 	strex	r3, r2, [r1]
 8008b68:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008b6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d1e5      	bne.n	8008b3c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	3314      	adds	r3, #20
 8008b76:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b78:	6a3b      	ldr	r3, [r7, #32]
 8008b7a:	e853 3f00 	ldrex	r3, [r3]
 8008b7e:	61fb      	str	r3, [r7, #28]
   return(result);
 8008b80:	69fb      	ldr	r3, [r7, #28]
 8008b82:	f023 0301 	bic.w	r3, r3, #1
 8008b86:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	3314      	adds	r3, #20
 8008b8e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008b90:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008b92:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b94:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008b96:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008b98:	e841 2300 	strex	r3, r2, [r1]
 8008b9c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008b9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d1e5      	bne.n	8008b70 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ba8:	2b01      	cmp	r3, #1
 8008baa:	d119      	bne.n	8008be0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	330c      	adds	r3, #12
 8008bb2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	e853 3f00 	ldrex	r3, [r3]
 8008bba:	60bb      	str	r3, [r7, #8]
   return(result);
 8008bbc:	68bb      	ldr	r3, [r7, #8]
 8008bbe:	f023 0310 	bic.w	r3, r3, #16
 8008bc2:	647b      	str	r3, [r7, #68]	@ 0x44
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	330c      	adds	r3, #12
 8008bca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008bcc:	61ba      	str	r2, [r7, #24]
 8008bce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bd0:	6979      	ldr	r1, [r7, #20]
 8008bd2:	69ba      	ldr	r2, [r7, #24]
 8008bd4:	e841 2300 	strex	r3, r2, [r1]
 8008bd8:	613b      	str	r3, [r7, #16]
   return(result);
 8008bda:	693b      	ldr	r3, [r7, #16]
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d1e5      	bne.n	8008bac <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	2220      	movs	r2, #32
 8008be4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	2200      	movs	r2, #0
 8008bec:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8008bee:	bf00      	nop
 8008bf0:	3754      	adds	r7, #84	@ 0x54
 8008bf2:	46bd      	mov	sp, r7
 8008bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf8:	4770      	bx	lr
	...

08008bfc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008bfc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008c00:	b0c0      	sub	sp, #256	@ 0x100
 8008c02:	af00      	add	r7, sp, #0
 8008c04:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008c08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	691b      	ldr	r3, [r3, #16]
 8008c10:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8008c14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008c18:	68d9      	ldr	r1, [r3, #12]
 8008c1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008c1e:	681a      	ldr	r2, [r3, #0]
 8008c20:	ea40 0301 	orr.w	r3, r0, r1
 8008c24:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008c26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008c2a:	689a      	ldr	r2, [r3, #8]
 8008c2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008c30:	691b      	ldr	r3, [r3, #16]
 8008c32:	431a      	orrs	r2, r3
 8008c34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008c38:	695b      	ldr	r3, [r3, #20]
 8008c3a:	431a      	orrs	r2, r3
 8008c3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008c40:	69db      	ldr	r3, [r3, #28]
 8008c42:	4313      	orrs	r3, r2
 8008c44:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008c48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	68db      	ldr	r3, [r3, #12]
 8008c50:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8008c54:	f021 010c 	bic.w	r1, r1, #12
 8008c58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008c5c:	681a      	ldr	r2, [r3, #0]
 8008c5e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8008c62:	430b      	orrs	r3, r1
 8008c64:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008c66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	695b      	ldr	r3, [r3, #20]
 8008c6e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8008c72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008c76:	6999      	ldr	r1, [r3, #24]
 8008c78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008c7c:	681a      	ldr	r2, [r3, #0]
 8008c7e:	ea40 0301 	orr.w	r3, r0, r1
 8008c82:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008c84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008c88:	681a      	ldr	r2, [r3, #0]
 8008c8a:	4b8f      	ldr	r3, [pc, #572]	@ (8008ec8 <UART_SetConfig+0x2cc>)
 8008c8c:	429a      	cmp	r2, r3
 8008c8e:	d005      	beq.n	8008c9c <UART_SetConfig+0xa0>
 8008c90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008c94:	681a      	ldr	r2, [r3, #0]
 8008c96:	4b8d      	ldr	r3, [pc, #564]	@ (8008ecc <UART_SetConfig+0x2d0>)
 8008c98:	429a      	cmp	r2, r3
 8008c9a:	d104      	bne.n	8008ca6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008c9c:	f7fe faa2 	bl	80071e4 <HAL_RCC_GetPCLK2Freq>
 8008ca0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8008ca4:	e003      	b.n	8008cae <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008ca6:	f7fe fa89 	bl	80071bc <HAL_RCC_GetPCLK1Freq>
 8008caa:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008cae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008cb2:	69db      	ldr	r3, [r3, #28]
 8008cb4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008cb8:	f040 810c 	bne.w	8008ed4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008cbc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008cc0:	2200      	movs	r2, #0
 8008cc2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008cc6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8008cca:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8008cce:	4622      	mov	r2, r4
 8008cd0:	462b      	mov	r3, r5
 8008cd2:	1891      	adds	r1, r2, r2
 8008cd4:	65b9      	str	r1, [r7, #88]	@ 0x58
 8008cd6:	415b      	adcs	r3, r3
 8008cd8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008cda:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8008cde:	4621      	mov	r1, r4
 8008ce0:	eb12 0801 	adds.w	r8, r2, r1
 8008ce4:	4629      	mov	r1, r5
 8008ce6:	eb43 0901 	adc.w	r9, r3, r1
 8008cea:	f04f 0200 	mov.w	r2, #0
 8008cee:	f04f 0300 	mov.w	r3, #0
 8008cf2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008cf6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008cfa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008cfe:	4690      	mov	r8, r2
 8008d00:	4699      	mov	r9, r3
 8008d02:	4623      	mov	r3, r4
 8008d04:	eb18 0303 	adds.w	r3, r8, r3
 8008d08:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008d0c:	462b      	mov	r3, r5
 8008d0e:	eb49 0303 	adc.w	r3, r9, r3
 8008d12:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008d16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008d1a:	685b      	ldr	r3, [r3, #4]
 8008d1c:	2200      	movs	r2, #0
 8008d1e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008d22:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8008d26:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8008d2a:	460b      	mov	r3, r1
 8008d2c:	18db      	adds	r3, r3, r3
 8008d2e:	653b      	str	r3, [r7, #80]	@ 0x50
 8008d30:	4613      	mov	r3, r2
 8008d32:	eb42 0303 	adc.w	r3, r2, r3
 8008d36:	657b      	str	r3, [r7, #84]	@ 0x54
 8008d38:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8008d3c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8008d40:	f7f8 f8b0 	bl	8000ea4 <__aeabi_uldivmod>
 8008d44:	4602      	mov	r2, r0
 8008d46:	460b      	mov	r3, r1
 8008d48:	4b61      	ldr	r3, [pc, #388]	@ (8008ed0 <UART_SetConfig+0x2d4>)
 8008d4a:	fba3 2302 	umull	r2, r3, r3, r2
 8008d4e:	095b      	lsrs	r3, r3, #5
 8008d50:	011c      	lsls	r4, r3, #4
 8008d52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008d56:	2200      	movs	r2, #0
 8008d58:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008d5c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8008d60:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8008d64:	4642      	mov	r2, r8
 8008d66:	464b      	mov	r3, r9
 8008d68:	1891      	adds	r1, r2, r2
 8008d6a:	64b9      	str	r1, [r7, #72]	@ 0x48
 8008d6c:	415b      	adcs	r3, r3
 8008d6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008d70:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8008d74:	4641      	mov	r1, r8
 8008d76:	eb12 0a01 	adds.w	sl, r2, r1
 8008d7a:	4649      	mov	r1, r9
 8008d7c:	eb43 0b01 	adc.w	fp, r3, r1
 8008d80:	f04f 0200 	mov.w	r2, #0
 8008d84:	f04f 0300 	mov.w	r3, #0
 8008d88:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008d8c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008d90:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008d94:	4692      	mov	sl, r2
 8008d96:	469b      	mov	fp, r3
 8008d98:	4643      	mov	r3, r8
 8008d9a:	eb1a 0303 	adds.w	r3, sl, r3
 8008d9e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008da2:	464b      	mov	r3, r9
 8008da4:	eb4b 0303 	adc.w	r3, fp, r3
 8008da8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008dac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008db0:	685b      	ldr	r3, [r3, #4]
 8008db2:	2200      	movs	r2, #0
 8008db4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008db8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8008dbc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8008dc0:	460b      	mov	r3, r1
 8008dc2:	18db      	adds	r3, r3, r3
 8008dc4:	643b      	str	r3, [r7, #64]	@ 0x40
 8008dc6:	4613      	mov	r3, r2
 8008dc8:	eb42 0303 	adc.w	r3, r2, r3
 8008dcc:	647b      	str	r3, [r7, #68]	@ 0x44
 8008dce:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8008dd2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8008dd6:	f7f8 f865 	bl	8000ea4 <__aeabi_uldivmod>
 8008dda:	4602      	mov	r2, r0
 8008ddc:	460b      	mov	r3, r1
 8008dde:	4611      	mov	r1, r2
 8008de0:	4b3b      	ldr	r3, [pc, #236]	@ (8008ed0 <UART_SetConfig+0x2d4>)
 8008de2:	fba3 2301 	umull	r2, r3, r3, r1
 8008de6:	095b      	lsrs	r3, r3, #5
 8008de8:	2264      	movs	r2, #100	@ 0x64
 8008dea:	fb02 f303 	mul.w	r3, r2, r3
 8008dee:	1acb      	subs	r3, r1, r3
 8008df0:	00db      	lsls	r3, r3, #3
 8008df2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8008df6:	4b36      	ldr	r3, [pc, #216]	@ (8008ed0 <UART_SetConfig+0x2d4>)
 8008df8:	fba3 2302 	umull	r2, r3, r3, r2
 8008dfc:	095b      	lsrs	r3, r3, #5
 8008dfe:	005b      	lsls	r3, r3, #1
 8008e00:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8008e04:	441c      	add	r4, r3
 8008e06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008e0a:	2200      	movs	r2, #0
 8008e0c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008e10:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8008e14:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8008e18:	4642      	mov	r2, r8
 8008e1a:	464b      	mov	r3, r9
 8008e1c:	1891      	adds	r1, r2, r2
 8008e1e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8008e20:	415b      	adcs	r3, r3
 8008e22:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008e24:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8008e28:	4641      	mov	r1, r8
 8008e2a:	1851      	adds	r1, r2, r1
 8008e2c:	6339      	str	r1, [r7, #48]	@ 0x30
 8008e2e:	4649      	mov	r1, r9
 8008e30:	414b      	adcs	r3, r1
 8008e32:	637b      	str	r3, [r7, #52]	@ 0x34
 8008e34:	f04f 0200 	mov.w	r2, #0
 8008e38:	f04f 0300 	mov.w	r3, #0
 8008e3c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8008e40:	4659      	mov	r1, fp
 8008e42:	00cb      	lsls	r3, r1, #3
 8008e44:	4651      	mov	r1, sl
 8008e46:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008e4a:	4651      	mov	r1, sl
 8008e4c:	00ca      	lsls	r2, r1, #3
 8008e4e:	4610      	mov	r0, r2
 8008e50:	4619      	mov	r1, r3
 8008e52:	4603      	mov	r3, r0
 8008e54:	4642      	mov	r2, r8
 8008e56:	189b      	adds	r3, r3, r2
 8008e58:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008e5c:	464b      	mov	r3, r9
 8008e5e:	460a      	mov	r2, r1
 8008e60:	eb42 0303 	adc.w	r3, r2, r3
 8008e64:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008e68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008e6c:	685b      	ldr	r3, [r3, #4]
 8008e6e:	2200      	movs	r2, #0
 8008e70:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008e74:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8008e78:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008e7c:	460b      	mov	r3, r1
 8008e7e:	18db      	adds	r3, r3, r3
 8008e80:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008e82:	4613      	mov	r3, r2
 8008e84:	eb42 0303 	adc.w	r3, r2, r3
 8008e88:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008e8a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8008e8e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8008e92:	f7f8 f807 	bl	8000ea4 <__aeabi_uldivmod>
 8008e96:	4602      	mov	r2, r0
 8008e98:	460b      	mov	r3, r1
 8008e9a:	4b0d      	ldr	r3, [pc, #52]	@ (8008ed0 <UART_SetConfig+0x2d4>)
 8008e9c:	fba3 1302 	umull	r1, r3, r3, r2
 8008ea0:	095b      	lsrs	r3, r3, #5
 8008ea2:	2164      	movs	r1, #100	@ 0x64
 8008ea4:	fb01 f303 	mul.w	r3, r1, r3
 8008ea8:	1ad3      	subs	r3, r2, r3
 8008eaa:	00db      	lsls	r3, r3, #3
 8008eac:	3332      	adds	r3, #50	@ 0x32
 8008eae:	4a08      	ldr	r2, [pc, #32]	@ (8008ed0 <UART_SetConfig+0x2d4>)
 8008eb0:	fba2 2303 	umull	r2, r3, r2, r3
 8008eb4:	095b      	lsrs	r3, r3, #5
 8008eb6:	f003 0207 	and.w	r2, r3, #7
 8008eba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	4422      	add	r2, r4
 8008ec2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008ec4:	e106      	b.n	80090d4 <UART_SetConfig+0x4d8>
 8008ec6:	bf00      	nop
 8008ec8:	40011000 	.word	0x40011000
 8008ecc:	40011400 	.word	0x40011400
 8008ed0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008ed4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008ed8:	2200      	movs	r2, #0
 8008eda:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008ede:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8008ee2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8008ee6:	4642      	mov	r2, r8
 8008ee8:	464b      	mov	r3, r9
 8008eea:	1891      	adds	r1, r2, r2
 8008eec:	6239      	str	r1, [r7, #32]
 8008eee:	415b      	adcs	r3, r3
 8008ef0:	627b      	str	r3, [r7, #36]	@ 0x24
 8008ef2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008ef6:	4641      	mov	r1, r8
 8008ef8:	1854      	adds	r4, r2, r1
 8008efa:	4649      	mov	r1, r9
 8008efc:	eb43 0501 	adc.w	r5, r3, r1
 8008f00:	f04f 0200 	mov.w	r2, #0
 8008f04:	f04f 0300 	mov.w	r3, #0
 8008f08:	00eb      	lsls	r3, r5, #3
 8008f0a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008f0e:	00e2      	lsls	r2, r4, #3
 8008f10:	4614      	mov	r4, r2
 8008f12:	461d      	mov	r5, r3
 8008f14:	4643      	mov	r3, r8
 8008f16:	18e3      	adds	r3, r4, r3
 8008f18:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008f1c:	464b      	mov	r3, r9
 8008f1e:	eb45 0303 	adc.w	r3, r5, r3
 8008f22:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008f26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008f2a:	685b      	ldr	r3, [r3, #4]
 8008f2c:	2200      	movs	r2, #0
 8008f2e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008f32:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008f36:	f04f 0200 	mov.w	r2, #0
 8008f3a:	f04f 0300 	mov.w	r3, #0
 8008f3e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8008f42:	4629      	mov	r1, r5
 8008f44:	008b      	lsls	r3, r1, #2
 8008f46:	4621      	mov	r1, r4
 8008f48:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008f4c:	4621      	mov	r1, r4
 8008f4e:	008a      	lsls	r2, r1, #2
 8008f50:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8008f54:	f7f7 ffa6 	bl	8000ea4 <__aeabi_uldivmod>
 8008f58:	4602      	mov	r2, r0
 8008f5a:	460b      	mov	r3, r1
 8008f5c:	4b60      	ldr	r3, [pc, #384]	@ (80090e0 <UART_SetConfig+0x4e4>)
 8008f5e:	fba3 2302 	umull	r2, r3, r3, r2
 8008f62:	095b      	lsrs	r3, r3, #5
 8008f64:	011c      	lsls	r4, r3, #4
 8008f66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008f6a:	2200      	movs	r2, #0
 8008f6c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008f70:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8008f74:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8008f78:	4642      	mov	r2, r8
 8008f7a:	464b      	mov	r3, r9
 8008f7c:	1891      	adds	r1, r2, r2
 8008f7e:	61b9      	str	r1, [r7, #24]
 8008f80:	415b      	adcs	r3, r3
 8008f82:	61fb      	str	r3, [r7, #28]
 8008f84:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008f88:	4641      	mov	r1, r8
 8008f8a:	1851      	adds	r1, r2, r1
 8008f8c:	6139      	str	r1, [r7, #16]
 8008f8e:	4649      	mov	r1, r9
 8008f90:	414b      	adcs	r3, r1
 8008f92:	617b      	str	r3, [r7, #20]
 8008f94:	f04f 0200 	mov.w	r2, #0
 8008f98:	f04f 0300 	mov.w	r3, #0
 8008f9c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008fa0:	4659      	mov	r1, fp
 8008fa2:	00cb      	lsls	r3, r1, #3
 8008fa4:	4651      	mov	r1, sl
 8008fa6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008faa:	4651      	mov	r1, sl
 8008fac:	00ca      	lsls	r2, r1, #3
 8008fae:	4610      	mov	r0, r2
 8008fb0:	4619      	mov	r1, r3
 8008fb2:	4603      	mov	r3, r0
 8008fb4:	4642      	mov	r2, r8
 8008fb6:	189b      	adds	r3, r3, r2
 8008fb8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008fbc:	464b      	mov	r3, r9
 8008fbe:	460a      	mov	r2, r1
 8008fc0:	eb42 0303 	adc.w	r3, r2, r3
 8008fc4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008fc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008fcc:	685b      	ldr	r3, [r3, #4]
 8008fce:	2200      	movs	r2, #0
 8008fd0:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008fd2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8008fd4:	f04f 0200 	mov.w	r2, #0
 8008fd8:	f04f 0300 	mov.w	r3, #0
 8008fdc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8008fe0:	4649      	mov	r1, r9
 8008fe2:	008b      	lsls	r3, r1, #2
 8008fe4:	4641      	mov	r1, r8
 8008fe6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008fea:	4641      	mov	r1, r8
 8008fec:	008a      	lsls	r2, r1, #2
 8008fee:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8008ff2:	f7f7 ff57 	bl	8000ea4 <__aeabi_uldivmod>
 8008ff6:	4602      	mov	r2, r0
 8008ff8:	460b      	mov	r3, r1
 8008ffa:	4611      	mov	r1, r2
 8008ffc:	4b38      	ldr	r3, [pc, #224]	@ (80090e0 <UART_SetConfig+0x4e4>)
 8008ffe:	fba3 2301 	umull	r2, r3, r3, r1
 8009002:	095b      	lsrs	r3, r3, #5
 8009004:	2264      	movs	r2, #100	@ 0x64
 8009006:	fb02 f303 	mul.w	r3, r2, r3
 800900a:	1acb      	subs	r3, r1, r3
 800900c:	011b      	lsls	r3, r3, #4
 800900e:	3332      	adds	r3, #50	@ 0x32
 8009010:	4a33      	ldr	r2, [pc, #204]	@ (80090e0 <UART_SetConfig+0x4e4>)
 8009012:	fba2 2303 	umull	r2, r3, r2, r3
 8009016:	095b      	lsrs	r3, r3, #5
 8009018:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800901c:	441c      	add	r4, r3
 800901e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009022:	2200      	movs	r2, #0
 8009024:	673b      	str	r3, [r7, #112]	@ 0x70
 8009026:	677a      	str	r2, [r7, #116]	@ 0x74
 8009028:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800902c:	4642      	mov	r2, r8
 800902e:	464b      	mov	r3, r9
 8009030:	1891      	adds	r1, r2, r2
 8009032:	60b9      	str	r1, [r7, #8]
 8009034:	415b      	adcs	r3, r3
 8009036:	60fb      	str	r3, [r7, #12]
 8009038:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800903c:	4641      	mov	r1, r8
 800903e:	1851      	adds	r1, r2, r1
 8009040:	6039      	str	r1, [r7, #0]
 8009042:	4649      	mov	r1, r9
 8009044:	414b      	adcs	r3, r1
 8009046:	607b      	str	r3, [r7, #4]
 8009048:	f04f 0200 	mov.w	r2, #0
 800904c:	f04f 0300 	mov.w	r3, #0
 8009050:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009054:	4659      	mov	r1, fp
 8009056:	00cb      	lsls	r3, r1, #3
 8009058:	4651      	mov	r1, sl
 800905a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800905e:	4651      	mov	r1, sl
 8009060:	00ca      	lsls	r2, r1, #3
 8009062:	4610      	mov	r0, r2
 8009064:	4619      	mov	r1, r3
 8009066:	4603      	mov	r3, r0
 8009068:	4642      	mov	r2, r8
 800906a:	189b      	adds	r3, r3, r2
 800906c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800906e:	464b      	mov	r3, r9
 8009070:	460a      	mov	r2, r1
 8009072:	eb42 0303 	adc.w	r3, r2, r3
 8009076:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009078:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800907c:	685b      	ldr	r3, [r3, #4]
 800907e:	2200      	movs	r2, #0
 8009080:	663b      	str	r3, [r7, #96]	@ 0x60
 8009082:	667a      	str	r2, [r7, #100]	@ 0x64
 8009084:	f04f 0200 	mov.w	r2, #0
 8009088:	f04f 0300 	mov.w	r3, #0
 800908c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8009090:	4649      	mov	r1, r9
 8009092:	008b      	lsls	r3, r1, #2
 8009094:	4641      	mov	r1, r8
 8009096:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800909a:	4641      	mov	r1, r8
 800909c:	008a      	lsls	r2, r1, #2
 800909e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80090a2:	f7f7 feff 	bl	8000ea4 <__aeabi_uldivmod>
 80090a6:	4602      	mov	r2, r0
 80090a8:	460b      	mov	r3, r1
 80090aa:	4b0d      	ldr	r3, [pc, #52]	@ (80090e0 <UART_SetConfig+0x4e4>)
 80090ac:	fba3 1302 	umull	r1, r3, r3, r2
 80090b0:	095b      	lsrs	r3, r3, #5
 80090b2:	2164      	movs	r1, #100	@ 0x64
 80090b4:	fb01 f303 	mul.w	r3, r1, r3
 80090b8:	1ad3      	subs	r3, r2, r3
 80090ba:	011b      	lsls	r3, r3, #4
 80090bc:	3332      	adds	r3, #50	@ 0x32
 80090be:	4a08      	ldr	r2, [pc, #32]	@ (80090e0 <UART_SetConfig+0x4e4>)
 80090c0:	fba2 2303 	umull	r2, r3, r2, r3
 80090c4:	095b      	lsrs	r3, r3, #5
 80090c6:	f003 020f 	and.w	r2, r3, #15
 80090ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	4422      	add	r2, r4
 80090d2:	609a      	str	r2, [r3, #8]
}
 80090d4:	bf00      	nop
 80090d6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80090da:	46bd      	mov	sp, r7
 80090dc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80090e0:	51eb851f 	.word	0x51eb851f

080090e4 <__cvt>:
 80090e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80090e8:	ec57 6b10 	vmov	r6, r7, d0
 80090ec:	2f00      	cmp	r7, #0
 80090ee:	460c      	mov	r4, r1
 80090f0:	4619      	mov	r1, r3
 80090f2:	463b      	mov	r3, r7
 80090f4:	bfbb      	ittet	lt
 80090f6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80090fa:	461f      	movlt	r7, r3
 80090fc:	2300      	movge	r3, #0
 80090fe:	232d      	movlt	r3, #45	@ 0x2d
 8009100:	700b      	strb	r3, [r1, #0]
 8009102:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009104:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8009108:	4691      	mov	r9, r2
 800910a:	f023 0820 	bic.w	r8, r3, #32
 800910e:	bfbc      	itt	lt
 8009110:	4632      	movlt	r2, r6
 8009112:	4616      	movlt	r6, r2
 8009114:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009118:	d005      	beq.n	8009126 <__cvt+0x42>
 800911a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800911e:	d100      	bne.n	8009122 <__cvt+0x3e>
 8009120:	3401      	adds	r4, #1
 8009122:	2102      	movs	r1, #2
 8009124:	e000      	b.n	8009128 <__cvt+0x44>
 8009126:	2103      	movs	r1, #3
 8009128:	ab03      	add	r3, sp, #12
 800912a:	9301      	str	r3, [sp, #4]
 800912c:	ab02      	add	r3, sp, #8
 800912e:	9300      	str	r3, [sp, #0]
 8009130:	ec47 6b10 	vmov	d0, r6, r7
 8009134:	4653      	mov	r3, sl
 8009136:	4622      	mov	r2, r4
 8009138:	f000 fe9a 	bl	8009e70 <_dtoa_r>
 800913c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8009140:	4605      	mov	r5, r0
 8009142:	d119      	bne.n	8009178 <__cvt+0x94>
 8009144:	f019 0f01 	tst.w	r9, #1
 8009148:	d00e      	beq.n	8009168 <__cvt+0x84>
 800914a:	eb00 0904 	add.w	r9, r0, r4
 800914e:	2200      	movs	r2, #0
 8009150:	2300      	movs	r3, #0
 8009152:	4630      	mov	r0, r6
 8009154:	4639      	mov	r1, r7
 8009156:	f7f7 fcb7 	bl	8000ac8 <__aeabi_dcmpeq>
 800915a:	b108      	cbz	r0, 8009160 <__cvt+0x7c>
 800915c:	f8cd 900c 	str.w	r9, [sp, #12]
 8009160:	2230      	movs	r2, #48	@ 0x30
 8009162:	9b03      	ldr	r3, [sp, #12]
 8009164:	454b      	cmp	r3, r9
 8009166:	d31e      	bcc.n	80091a6 <__cvt+0xc2>
 8009168:	9b03      	ldr	r3, [sp, #12]
 800916a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800916c:	1b5b      	subs	r3, r3, r5
 800916e:	4628      	mov	r0, r5
 8009170:	6013      	str	r3, [r2, #0]
 8009172:	b004      	add	sp, #16
 8009174:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009178:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800917c:	eb00 0904 	add.w	r9, r0, r4
 8009180:	d1e5      	bne.n	800914e <__cvt+0x6a>
 8009182:	7803      	ldrb	r3, [r0, #0]
 8009184:	2b30      	cmp	r3, #48	@ 0x30
 8009186:	d10a      	bne.n	800919e <__cvt+0xba>
 8009188:	2200      	movs	r2, #0
 800918a:	2300      	movs	r3, #0
 800918c:	4630      	mov	r0, r6
 800918e:	4639      	mov	r1, r7
 8009190:	f7f7 fc9a 	bl	8000ac8 <__aeabi_dcmpeq>
 8009194:	b918      	cbnz	r0, 800919e <__cvt+0xba>
 8009196:	f1c4 0401 	rsb	r4, r4, #1
 800919a:	f8ca 4000 	str.w	r4, [sl]
 800919e:	f8da 3000 	ldr.w	r3, [sl]
 80091a2:	4499      	add	r9, r3
 80091a4:	e7d3      	b.n	800914e <__cvt+0x6a>
 80091a6:	1c59      	adds	r1, r3, #1
 80091a8:	9103      	str	r1, [sp, #12]
 80091aa:	701a      	strb	r2, [r3, #0]
 80091ac:	e7d9      	b.n	8009162 <__cvt+0x7e>

080091ae <__exponent>:
 80091ae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80091b0:	2900      	cmp	r1, #0
 80091b2:	bfba      	itte	lt
 80091b4:	4249      	neglt	r1, r1
 80091b6:	232d      	movlt	r3, #45	@ 0x2d
 80091b8:	232b      	movge	r3, #43	@ 0x2b
 80091ba:	2909      	cmp	r1, #9
 80091bc:	7002      	strb	r2, [r0, #0]
 80091be:	7043      	strb	r3, [r0, #1]
 80091c0:	dd29      	ble.n	8009216 <__exponent+0x68>
 80091c2:	f10d 0307 	add.w	r3, sp, #7
 80091c6:	461d      	mov	r5, r3
 80091c8:	270a      	movs	r7, #10
 80091ca:	461a      	mov	r2, r3
 80091cc:	fbb1 f6f7 	udiv	r6, r1, r7
 80091d0:	fb07 1416 	mls	r4, r7, r6, r1
 80091d4:	3430      	adds	r4, #48	@ 0x30
 80091d6:	f802 4c01 	strb.w	r4, [r2, #-1]
 80091da:	460c      	mov	r4, r1
 80091dc:	2c63      	cmp	r4, #99	@ 0x63
 80091de:	f103 33ff 	add.w	r3, r3, #4294967295
 80091e2:	4631      	mov	r1, r6
 80091e4:	dcf1      	bgt.n	80091ca <__exponent+0x1c>
 80091e6:	3130      	adds	r1, #48	@ 0x30
 80091e8:	1e94      	subs	r4, r2, #2
 80091ea:	f803 1c01 	strb.w	r1, [r3, #-1]
 80091ee:	1c41      	adds	r1, r0, #1
 80091f0:	4623      	mov	r3, r4
 80091f2:	42ab      	cmp	r3, r5
 80091f4:	d30a      	bcc.n	800920c <__exponent+0x5e>
 80091f6:	f10d 0309 	add.w	r3, sp, #9
 80091fa:	1a9b      	subs	r3, r3, r2
 80091fc:	42ac      	cmp	r4, r5
 80091fe:	bf88      	it	hi
 8009200:	2300      	movhi	r3, #0
 8009202:	3302      	adds	r3, #2
 8009204:	4403      	add	r3, r0
 8009206:	1a18      	subs	r0, r3, r0
 8009208:	b003      	add	sp, #12
 800920a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800920c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8009210:	f801 6f01 	strb.w	r6, [r1, #1]!
 8009214:	e7ed      	b.n	80091f2 <__exponent+0x44>
 8009216:	2330      	movs	r3, #48	@ 0x30
 8009218:	3130      	adds	r1, #48	@ 0x30
 800921a:	7083      	strb	r3, [r0, #2]
 800921c:	70c1      	strb	r1, [r0, #3]
 800921e:	1d03      	adds	r3, r0, #4
 8009220:	e7f1      	b.n	8009206 <__exponent+0x58>
	...

08009224 <_printf_float>:
 8009224:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009228:	b08d      	sub	sp, #52	@ 0x34
 800922a:	460c      	mov	r4, r1
 800922c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8009230:	4616      	mov	r6, r2
 8009232:	461f      	mov	r7, r3
 8009234:	4605      	mov	r5, r0
 8009236:	f000 fd03 	bl	8009c40 <_localeconv_r>
 800923a:	6803      	ldr	r3, [r0, #0]
 800923c:	9304      	str	r3, [sp, #16]
 800923e:	4618      	mov	r0, r3
 8009240:	f7f7 f816 	bl	8000270 <strlen>
 8009244:	2300      	movs	r3, #0
 8009246:	930a      	str	r3, [sp, #40]	@ 0x28
 8009248:	f8d8 3000 	ldr.w	r3, [r8]
 800924c:	9005      	str	r0, [sp, #20]
 800924e:	3307      	adds	r3, #7
 8009250:	f023 0307 	bic.w	r3, r3, #7
 8009254:	f103 0208 	add.w	r2, r3, #8
 8009258:	f894 a018 	ldrb.w	sl, [r4, #24]
 800925c:	f8d4 b000 	ldr.w	fp, [r4]
 8009260:	f8c8 2000 	str.w	r2, [r8]
 8009264:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009268:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800926c:	9307      	str	r3, [sp, #28]
 800926e:	f8cd 8018 	str.w	r8, [sp, #24]
 8009272:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8009276:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800927a:	4b9c      	ldr	r3, [pc, #624]	@ (80094ec <_printf_float+0x2c8>)
 800927c:	f04f 32ff 	mov.w	r2, #4294967295
 8009280:	f7f7 fc54 	bl	8000b2c <__aeabi_dcmpun>
 8009284:	bb70      	cbnz	r0, 80092e4 <_printf_float+0xc0>
 8009286:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800928a:	4b98      	ldr	r3, [pc, #608]	@ (80094ec <_printf_float+0x2c8>)
 800928c:	f04f 32ff 	mov.w	r2, #4294967295
 8009290:	f7f7 fc2e 	bl	8000af0 <__aeabi_dcmple>
 8009294:	bb30      	cbnz	r0, 80092e4 <_printf_float+0xc0>
 8009296:	2200      	movs	r2, #0
 8009298:	2300      	movs	r3, #0
 800929a:	4640      	mov	r0, r8
 800929c:	4649      	mov	r1, r9
 800929e:	f7f7 fc1d 	bl	8000adc <__aeabi_dcmplt>
 80092a2:	b110      	cbz	r0, 80092aa <_printf_float+0x86>
 80092a4:	232d      	movs	r3, #45	@ 0x2d
 80092a6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80092aa:	4a91      	ldr	r2, [pc, #580]	@ (80094f0 <_printf_float+0x2cc>)
 80092ac:	4b91      	ldr	r3, [pc, #580]	@ (80094f4 <_printf_float+0x2d0>)
 80092ae:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80092b2:	bf94      	ite	ls
 80092b4:	4690      	movls	r8, r2
 80092b6:	4698      	movhi	r8, r3
 80092b8:	2303      	movs	r3, #3
 80092ba:	6123      	str	r3, [r4, #16]
 80092bc:	f02b 0304 	bic.w	r3, fp, #4
 80092c0:	6023      	str	r3, [r4, #0]
 80092c2:	f04f 0900 	mov.w	r9, #0
 80092c6:	9700      	str	r7, [sp, #0]
 80092c8:	4633      	mov	r3, r6
 80092ca:	aa0b      	add	r2, sp, #44	@ 0x2c
 80092cc:	4621      	mov	r1, r4
 80092ce:	4628      	mov	r0, r5
 80092d0:	f000 f9d2 	bl	8009678 <_printf_common>
 80092d4:	3001      	adds	r0, #1
 80092d6:	f040 808d 	bne.w	80093f4 <_printf_float+0x1d0>
 80092da:	f04f 30ff 	mov.w	r0, #4294967295
 80092de:	b00d      	add	sp, #52	@ 0x34
 80092e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092e4:	4642      	mov	r2, r8
 80092e6:	464b      	mov	r3, r9
 80092e8:	4640      	mov	r0, r8
 80092ea:	4649      	mov	r1, r9
 80092ec:	f7f7 fc1e 	bl	8000b2c <__aeabi_dcmpun>
 80092f0:	b140      	cbz	r0, 8009304 <_printf_float+0xe0>
 80092f2:	464b      	mov	r3, r9
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	bfbc      	itt	lt
 80092f8:	232d      	movlt	r3, #45	@ 0x2d
 80092fa:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80092fe:	4a7e      	ldr	r2, [pc, #504]	@ (80094f8 <_printf_float+0x2d4>)
 8009300:	4b7e      	ldr	r3, [pc, #504]	@ (80094fc <_printf_float+0x2d8>)
 8009302:	e7d4      	b.n	80092ae <_printf_float+0x8a>
 8009304:	6863      	ldr	r3, [r4, #4]
 8009306:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800930a:	9206      	str	r2, [sp, #24]
 800930c:	1c5a      	adds	r2, r3, #1
 800930e:	d13b      	bne.n	8009388 <_printf_float+0x164>
 8009310:	2306      	movs	r3, #6
 8009312:	6063      	str	r3, [r4, #4]
 8009314:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8009318:	2300      	movs	r3, #0
 800931a:	6022      	str	r2, [r4, #0]
 800931c:	9303      	str	r3, [sp, #12]
 800931e:	ab0a      	add	r3, sp, #40	@ 0x28
 8009320:	e9cd a301 	strd	sl, r3, [sp, #4]
 8009324:	ab09      	add	r3, sp, #36	@ 0x24
 8009326:	9300      	str	r3, [sp, #0]
 8009328:	6861      	ldr	r1, [r4, #4]
 800932a:	ec49 8b10 	vmov	d0, r8, r9
 800932e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8009332:	4628      	mov	r0, r5
 8009334:	f7ff fed6 	bl	80090e4 <__cvt>
 8009338:	9b06      	ldr	r3, [sp, #24]
 800933a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800933c:	2b47      	cmp	r3, #71	@ 0x47
 800933e:	4680      	mov	r8, r0
 8009340:	d129      	bne.n	8009396 <_printf_float+0x172>
 8009342:	1cc8      	adds	r0, r1, #3
 8009344:	db02      	blt.n	800934c <_printf_float+0x128>
 8009346:	6863      	ldr	r3, [r4, #4]
 8009348:	4299      	cmp	r1, r3
 800934a:	dd41      	ble.n	80093d0 <_printf_float+0x1ac>
 800934c:	f1aa 0a02 	sub.w	sl, sl, #2
 8009350:	fa5f fa8a 	uxtb.w	sl, sl
 8009354:	3901      	subs	r1, #1
 8009356:	4652      	mov	r2, sl
 8009358:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800935c:	9109      	str	r1, [sp, #36]	@ 0x24
 800935e:	f7ff ff26 	bl	80091ae <__exponent>
 8009362:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009364:	1813      	adds	r3, r2, r0
 8009366:	2a01      	cmp	r2, #1
 8009368:	4681      	mov	r9, r0
 800936a:	6123      	str	r3, [r4, #16]
 800936c:	dc02      	bgt.n	8009374 <_printf_float+0x150>
 800936e:	6822      	ldr	r2, [r4, #0]
 8009370:	07d2      	lsls	r2, r2, #31
 8009372:	d501      	bpl.n	8009378 <_printf_float+0x154>
 8009374:	3301      	adds	r3, #1
 8009376:	6123      	str	r3, [r4, #16]
 8009378:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800937c:	2b00      	cmp	r3, #0
 800937e:	d0a2      	beq.n	80092c6 <_printf_float+0xa2>
 8009380:	232d      	movs	r3, #45	@ 0x2d
 8009382:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009386:	e79e      	b.n	80092c6 <_printf_float+0xa2>
 8009388:	9a06      	ldr	r2, [sp, #24]
 800938a:	2a47      	cmp	r2, #71	@ 0x47
 800938c:	d1c2      	bne.n	8009314 <_printf_float+0xf0>
 800938e:	2b00      	cmp	r3, #0
 8009390:	d1c0      	bne.n	8009314 <_printf_float+0xf0>
 8009392:	2301      	movs	r3, #1
 8009394:	e7bd      	b.n	8009312 <_printf_float+0xee>
 8009396:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800939a:	d9db      	bls.n	8009354 <_printf_float+0x130>
 800939c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80093a0:	d118      	bne.n	80093d4 <_printf_float+0x1b0>
 80093a2:	2900      	cmp	r1, #0
 80093a4:	6863      	ldr	r3, [r4, #4]
 80093a6:	dd0b      	ble.n	80093c0 <_printf_float+0x19c>
 80093a8:	6121      	str	r1, [r4, #16]
 80093aa:	b913      	cbnz	r3, 80093b2 <_printf_float+0x18e>
 80093ac:	6822      	ldr	r2, [r4, #0]
 80093ae:	07d0      	lsls	r0, r2, #31
 80093b0:	d502      	bpl.n	80093b8 <_printf_float+0x194>
 80093b2:	3301      	adds	r3, #1
 80093b4:	440b      	add	r3, r1
 80093b6:	6123      	str	r3, [r4, #16]
 80093b8:	65a1      	str	r1, [r4, #88]	@ 0x58
 80093ba:	f04f 0900 	mov.w	r9, #0
 80093be:	e7db      	b.n	8009378 <_printf_float+0x154>
 80093c0:	b913      	cbnz	r3, 80093c8 <_printf_float+0x1a4>
 80093c2:	6822      	ldr	r2, [r4, #0]
 80093c4:	07d2      	lsls	r2, r2, #31
 80093c6:	d501      	bpl.n	80093cc <_printf_float+0x1a8>
 80093c8:	3302      	adds	r3, #2
 80093ca:	e7f4      	b.n	80093b6 <_printf_float+0x192>
 80093cc:	2301      	movs	r3, #1
 80093ce:	e7f2      	b.n	80093b6 <_printf_float+0x192>
 80093d0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80093d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80093d6:	4299      	cmp	r1, r3
 80093d8:	db05      	blt.n	80093e6 <_printf_float+0x1c2>
 80093da:	6823      	ldr	r3, [r4, #0]
 80093dc:	6121      	str	r1, [r4, #16]
 80093de:	07d8      	lsls	r0, r3, #31
 80093e0:	d5ea      	bpl.n	80093b8 <_printf_float+0x194>
 80093e2:	1c4b      	adds	r3, r1, #1
 80093e4:	e7e7      	b.n	80093b6 <_printf_float+0x192>
 80093e6:	2900      	cmp	r1, #0
 80093e8:	bfd4      	ite	le
 80093ea:	f1c1 0202 	rsble	r2, r1, #2
 80093ee:	2201      	movgt	r2, #1
 80093f0:	4413      	add	r3, r2
 80093f2:	e7e0      	b.n	80093b6 <_printf_float+0x192>
 80093f4:	6823      	ldr	r3, [r4, #0]
 80093f6:	055a      	lsls	r2, r3, #21
 80093f8:	d407      	bmi.n	800940a <_printf_float+0x1e6>
 80093fa:	6923      	ldr	r3, [r4, #16]
 80093fc:	4642      	mov	r2, r8
 80093fe:	4631      	mov	r1, r6
 8009400:	4628      	mov	r0, r5
 8009402:	47b8      	blx	r7
 8009404:	3001      	adds	r0, #1
 8009406:	d12b      	bne.n	8009460 <_printf_float+0x23c>
 8009408:	e767      	b.n	80092da <_printf_float+0xb6>
 800940a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800940e:	f240 80dd 	bls.w	80095cc <_printf_float+0x3a8>
 8009412:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009416:	2200      	movs	r2, #0
 8009418:	2300      	movs	r3, #0
 800941a:	f7f7 fb55 	bl	8000ac8 <__aeabi_dcmpeq>
 800941e:	2800      	cmp	r0, #0
 8009420:	d033      	beq.n	800948a <_printf_float+0x266>
 8009422:	4a37      	ldr	r2, [pc, #220]	@ (8009500 <_printf_float+0x2dc>)
 8009424:	2301      	movs	r3, #1
 8009426:	4631      	mov	r1, r6
 8009428:	4628      	mov	r0, r5
 800942a:	47b8      	blx	r7
 800942c:	3001      	adds	r0, #1
 800942e:	f43f af54 	beq.w	80092da <_printf_float+0xb6>
 8009432:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8009436:	4543      	cmp	r3, r8
 8009438:	db02      	blt.n	8009440 <_printf_float+0x21c>
 800943a:	6823      	ldr	r3, [r4, #0]
 800943c:	07d8      	lsls	r0, r3, #31
 800943e:	d50f      	bpl.n	8009460 <_printf_float+0x23c>
 8009440:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009444:	4631      	mov	r1, r6
 8009446:	4628      	mov	r0, r5
 8009448:	47b8      	blx	r7
 800944a:	3001      	adds	r0, #1
 800944c:	f43f af45 	beq.w	80092da <_printf_float+0xb6>
 8009450:	f04f 0900 	mov.w	r9, #0
 8009454:	f108 38ff 	add.w	r8, r8, #4294967295
 8009458:	f104 0a1a 	add.w	sl, r4, #26
 800945c:	45c8      	cmp	r8, r9
 800945e:	dc09      	bgt.n	8009474 <_printf_float+0x250>
 8009460:	6823      	ldr	r3, [r4, #0]
 8009462:	079b      	lsls	r3, r3, #30
 8009464:	f100 8103 	bmi.w	800966e <_printf_float+0x44a>
 8009468:	68e0      	ldr	r0, [r4, #12]
 800946a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800946c:	4298      	cmp	r0, r3
 800946e:	bfb8      	it	lt
 8009470:	4618      	movlt	r0, r3
 8009472:	e734      	b.n	80092de <_printf_float+0xba>
 8009474:	2301      	movs	r3, #1
 8009476:	4652      	mov	r2, sl
 8009478:	4631      	mov	r1, r6
 800947a:	4628      	mov	r0, r5
 800947c:	47b8      	blx	r7
 800947e:	3001      	adds	r0, #1
 8009480:	f43f af2b 	beq.w	80092da <_printf_float+0xb6>
 8009484:	f109 0901 	add.w	r9, r9, #1
 8009488:	e7e8      	b.n	800945c <_printf_float+0x238>
 800948a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800948c:	2b00      	cmp	r3, #0
 800948e:	dc39      	bgt.n	8009504 <_printf_float+0x2e0>
 8009490:	4a1b      	ldr	r2, [pc, #108]	@ (8009500 <_printf_float+0x2dc>)
 8009492:	2301      	movs	r3, #1
 8009494:	4631      	mov	r1, r6
 8009496:	4628      	mov	r0, r5
 8009498:	47b8      	blx	r7
 800949a:	3001      	adds	r0, #1
 800949c:	f43f af1d 	beq.w	80092da <_printf_float+0xb6>
 80094a0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80094a4:	ea59 0303 	orrs.w	r3, r9, r3
 80094a8:	d102      	bne.n	80094b0 <_printf_float+0x28c>
 80094aa:	6823      	ldr	r3, [r4, #0]
 80094ac:	07d9      	lsls	r1, r3, #31
 80094ae:	d5d7      	bpl.n	8009460 <_printf_float+0x23c>
 80094b0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80094b4:	4631      	mov	r1, r6
 80094b6:	4628      	mov	r0, r5
 80094b8:	47b8      	blx	r7
 80094ba:	3001      	adds	r0, #1
 80094bc:	f43f af0d 	beq.w	80092da <_printf_float+0xb6>
 80094c0:	f04f 0a00 	mov.w	sl, #0
 80094c4:	f104 0b1a 	add.w	fp, r4, #26
 80094c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80094ca:	425b      	negs	r3, r3
 80094cc:	4553      	cmp	r3, sl
 80094ce:	dc01      	bgt.n	80094d4 <_printf_float+0x2b0>
 80094d0:	464b      	mov	r3, r9
 80094d2:	e793      	b.n	80093fc <_printf_float+0x1d8>
 80094d4:	2301      	movs	r3, #1
 80094d6:	465a      	mov	r2, fp
 80094d8:	4631      	mov	r1, r6
 80094da:	4628      	mov	r0, r5
 80094dc:	47b8      	blx	r7
 80094de:	3001      	adds	r0, #1
 80094e0:	f43f aefb 	beq.w	80092da <_printf_float+0xb6>
 80094e4:	f10a 0a01 	add.w	sl, sl, #1
 80094e8:	e7ee      	b.n	80094c8 <_printf_float+0x2a4>
 80094ea:	bf00      	nop
 80094ec:	7fefffff 	.word	0x7fefffff
 80094f0:	0800e23c 	.word	0x0800e23c
 80094f4:	0800e240 	.word	0x0800e240
 80094f8:	0800e244 	.word	0x0800e244
 80094fc:	0800e248 	.word	0x0800e248
 8009500:	0800e24c 	.word	0x0800e24c
 8009504:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009506:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800950a:	4553      	cmp	r3, sl
 800950c:	bfa8      	it	ge
 800950e:	4653      	movge	r3, sl
 8009510:	2b00      	cmp	r3, #0
 8009512:	4699      	mov	r9, r3
 8009514:	dc36      	bgt.n	8009584 <_printf_float+0x360>
 8009516:	f04f 0b00 	mov.w	fp, #0
 800951a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800951e:	f104 021a 	add.w	r2, r4, #26
 8009522:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009524:	9306      	str	r3, [sp, #24]
 8009526:	eba3 0309 	sub.w	r3, r3, r9
 800952a:	455b      	cmp	r3, fp
 800952c:	dc31      	bgt.n	8009592 <_printf_float+0x36e>
 800952e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009530:	459a      	cmp	sl, r3
 8009532:	dc3a      	bgt.n	80095aa <_printf_float+0x386>
 8009534:	6823      	ldr	r3, [r4, #0]
 8009536:	07da      	lsls	r2, r3, #31
 8009538:	d437      	bmi.n	80095aa <_printf_float+0x386>
 800953a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800953c:	ebaa 0903 	sub.w	r9, sl, r3
 8009540:	9b06      	ldr	r3, [sp, #24]
 8009542:	ebaa 0303 	sub.w	r3, sl, r3
 8009546:	4599      	cmp	r9, r3
 8009548:	bfa8      	it	ge
 800954a:	4699      	movge	r9, r3
 800954c:	f1b9 0f00 	cmp.w	r9, #0
 8009550:	dc33      	bgt.n	80095ba <_printf_float+0x396>
 8009552:	f04f 0800 	mov.w	r8, #0
 8009556:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800955a:	f104 0b1a 	add.w	fp, r4, #26
 800955e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009560:	ebaa 0303 	sub.w	r3, sl, r3
 8009564:	eba3 0309 	sub.w	r3, r3, r9
 8009568:	4543      	cmp	r3, r8
 800956a:	f77f af79 	ble.w	8009460 <_printf_float+0x23c>
 800956e:	2301      	movs	r3, #1
 8009570:	465a      	mov	r2, fp
 8009572:	4631      	mov	r1, r6
 8009574:	4628      	mov	r0, r5
 8009576:	47b8      	blx	r7
 8009578:	3001      	adds	r0, #1
 800957a:	f43f aeae 	beq.w	80092da <_printf_float+0xb6>
 800957e:	f108 0801 	add.w	r8, r8, #1
 8009582:	e7ec      	b.n	800955e <_printf_float+0x33a>
 8009584:	4642      	mov	r2, r8
 8009586:	4631      	mov	r1, r6
 8009588:	4628      	mov	r0, r5
 800958a:	47b8      	blx	r7
 800958c:	3001      	adds	r0, #1
 800958e:	d1c2      	bne.n	8009516 <_printf_float+0x2f2>
 8009590:	e6a3      	b.n	80092da <_printf_float+0xb6>
 8009592:	2301      	movs	r3, #1
 8009594:	4631      	mov	r1, r6
 8009596:	4628      	mov	r0, r5
 8009598:	9206      	str	r2, [sp, #24]
 800959a:	47b8      	blx	r7
 800959c:	3001      	adds	r0, #1
 800959e:	f43f ae9c 	beq.w	80092da <_printf_float+0xb6>
 80095a2:	9a06      	ldr	r2, [sp, #24]
 80095a4:	f10b 0b01 	add.w	fp, fp, #1
 80095a8:	e7bb      	b.n	8009522 <_printf_float+0x2fe>
 80095aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80095ae:	4631      	mov	r1, r6
 80095b0:	4628      	mov	r0, r5
 80095b2:	47b8      	blx	r7
 80095b4:	3001      	adds	r0, #1
 80095b6:	d1c0      	bne.n	800953a <_printf_float+0x316>
 80095b8:	e68f      	b.n	80092da <_printf_float+0xb6>
 80095ba:	9a06      	ldr	r2, [sp, #24]
 80095bc:	464b      	mov	r3, r9
 80095be:	4442      	add	r2, r8
 80095c0:	4631      	mov	r1, r6
 80095c2:	4628      	mov	r0, r5
 80095c4:	47b8      	blx	r7
 80095c6:	3001      	adds	r0, #1
 80095c8:	d1c3      	bne.n	8009552 <_printf_float+0x32e>
 80095ca:	e686      	b.n	80092da <_printf_float+0xb6>
 80095cc:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80095d0:	f1ba 0f01 	cmp.w	sl, #1
 80095d4:	dc01      	bgt.n	80095da <_printf_float+0x3b6>
 80095d6:	07db      	lsls	r3, r3, #31
 80095d8:	d536      	bpl.n	8009648 <_printf_float+0x424>
 80095da:	2301      	movs	r3, #1
 80095dc:	4642      	mov	r2, r8
 80095de:	4631      	mov	r1, r6
 80095e0:	4628      	mov	r0, r5
 80095e2:	47b8      	blx	r7
 80095e4:	3001      	adds	r0, #1
 80095e6:	f43f ae78 	beq.w	80092da <_printf_float+0xb6>
 80095ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80095ee:	4631      	mov	r1, r6
 80095f0:	4628      	mov	r0, r5
 80095f2:	47b8      	blx	r7
 80095f4:	3001      	adds	r0, #1
 80095f6:	f43f ae70 	beq.w	80092da <_printf_float+0xb6>
 80095fa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80095fe:	2200      	movs	r2, #0
 8009600:	2300      	movs	r3, #0
 8009602:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009606:	f7f7 fa5f 	bl	8000ac8 <__aeabi_dcmpeq>
 800960a:	b9c0      	cbnz	r0, 800963e <_printf_float+0x41a>
 800960c:	4653      	mov	r3, sl
 800960e:	f108 0201 	add.w	r2, r8, #1
 8009612:	4631      	mov	r1, r6
 8009614:	4628      	mov	r0, r5
 8009616:	47b8      	blx	r7
 8009618:	3001      	adds	r0, #1
 800961a:	d10c      	bne.n	8009636 <_printf_float+0x412>
 800961c:	e65d      	b.n	80092da <_printf_float+0xb6>
 800961e:	2301      	movs	r3, #1
 8009620:	465a      	mov	r2, fp
 8009622:	4631      	mov	r1, r6
 8009624:	4628      	mov	r0, r5
 8009626:	47b8      	blx	r7
 8009628:	3001      	adds	r0, #1
 800962a:	f43f ae56 	beq.w	80092da <_printf_float+0xb6>
 800962e:	f108 0801 	add.w	r8, r8, #1
 8009632:	45d0      	cmp	r8, sl
 8009634:	dbf3      	blt.n	800961e <_printf_float+0x3fa>
 8009636:	464b      	mov	r3, r9
 8009638:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800963c:	e6df      	b.n	80093fe <_printf_float+0x1da>
 800963e:	f04f 0800 	mov.w	r8, #0
 8009642:	f104 0b1a 	add.w	fp, r4, #26
 8009646:	e7f4      	b.n	8009632 <_printf_float+0x40e>
 8009648:	2301      	movs	r3, #1
 800964a:	4642      	mov	r2, r8
 800964c:	e7e1      	b.n	8009612 <_printf_float+0x3ee>
 800964e:	2301      	movs	r3, #1
 8009650:	464a      	mov	r2, r9
 8009652:	4631      	mov	r1, r6
 8009654:	4628      	mov	r0, r5
 8009656:	47b8      	blx	r7
 8009658:	3001      	adds	r0, #1
 800965a:	f43f ae3e 	beq.w	80092da <_printf_float+0xb6>
 800965e:	f108 0801 	add.w	r8, r8, #1
 8009662:	68e3      	ldr	r3, [r4, #12]
 8009664:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009666:	1a5b      	subs	r3, r3, r1
 8009668:	4543      	cmp	r3, r8
 800966a:	dcf0      	bgt.n	800964e <_printf_float+0x42a>
 800966c:	e6fc      	b.n	8009468 <_printf_float+0x244>
 800966e:	f04f 0800 	mov.w	r8, #0
 8009672:	f104 0919 	add.w	r9, r4, #25
 8009676:	e7f4      	b.n	8009662 <_printf_float+0x43e>

08009678 <_printf_common>:
 8009678:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800967c:	4616      	mov	r6, r2
 800967e:	4698      	mov	r8, r3
 8009680:	688a      	ldr	r2, [r1, #8]
 8009682:	690b      	ldr	r3, [r1, #16]
 8009684:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009688:	4293      	cmp	r3, r2
 800968a:	bfb8      	it	lt
 800968c:	4613      	movlt	r3, r2
 800968e:	6033      	str	r3, [r6, #0]
 8009690:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009694:	4607      	mov	r7, r0
 8009696:	460c      	mov	r4, r1
 8009698:	b10a      	cbz	r2, 800969e <_printf_common+0x26>
 800969a:	3301      	adds	r3, #1
 800969c:	6033      	str	r3, [r6, #0]
 800969e:	6823      	ldr	r3, [r4, #0]
 80096a0:	0699      	lsls	r1, r3, #26
 80096a2:	bf42      	ittt	mi
 80096a4:	6833      	ldrmi	r3, [r6, #0]
 80096a6:	3302      	addmi	r3, #2
 80096a8:	6033      	strmi	r3, [r6, #0]
 80096aa:	6825      	ldr	r5, [r4, #0]
 80096ac:	f015 0506 	ands.w	r5, r5, #6
 80096b0:	d106      	bne.n	80096c0 <_printf_common+0x48>
 80096b2:	f104 0a19 	add.w	sl, r4, #25
 80096b6:	68e3      	ldr	r3, [r4, #12]
 80096b8:	6832      	ldr	r2, [r6, #0]
 80096ba:	1a9b      	subs	r3, r3, r2
 80096bc:	42ab      	cmp	r3, r5
 80096be:	dc26      	bgt.n	800970e <_printf_common+0x96>
 80096c0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80096c4:	6822      	ldr	r2, [r4, #0]
 80096c6:	3b00      	subs	r3, #0
 80096c8:	bf18      	it	ne
 80096ca:	2301      	movne	r3, #1
 80096cc:	0692      	lsls	r2, r2, #26
 80096ce:	d42b      	bmi.n	8009728 <_printf_common+0xb0>
 80096d0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80096d4:	4641      	mov	r1, r8
 80096d6:	4638      	mov	r0, r7
 80096d8:	47c8      	blx	r9
 80096da:	3001      	adds	r0, #1
 80096dc:	d01e      	beq.n	800971c <_printf_common+0xa4>
 80096de:	6823      	ldr	r3, [r4, #0]
 80096e0:	6922      	ldr	r2, [r4, #16]
 80096e2:	f003 0306 	and.w	r3, r3, #6
 80096e6:	2b04      	cmp	r3, #4
 80096e8:	bf02      	ittt	eq
 80096ea:	68e5      	ldreq	r5, [r4, #12]
 80096ec:	6833      	ldreq	r3, [r6, #0]
 80096ee:	1aed      	subeq	r5, r5, r3
 80096f0:	68a3      	ldr	r3, [r4, #8]
 80096f2:	bf0c      	ite	eq
 80096f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80096f8:	2500      	movne	r5, #0
 80096fa:	4293      	cmp	r3, r2
 80096fc:	bfc4      	itt	gt
 80096fe:	1a9b      	subgt	r3, r3, r2
 8009700:	18ed      	addgt	r5, r5, r3
 8009702:	2600      	movs	r6, #0
 8009704:	341a      	adds	r4, #26
 8009706:	42b5      	cmp	r5, r6
 8009708:	d11a      	bne.n	8009740 <_printf_common+0xc8>
 800970a:	2000      	movs	r0, #0
 800970c:	e008      	b.n	8009720 <_printf_common+0xa8>
 800970e:	2301      	movs	r3, #1
 8009710:	4652      	mov	r2, sl
 8009712:	4641      	mov	r1, r8
 8009714:	4638      	mov	r0, r7
 8009716:	47c8      	blx	r9
 8009718:	3001      	adds	r0, #1
 800971a:	d103      	bne.n	8009724 <_printf_common+0xac>
 800971c:	f04f 30ff 	mov.w	r0, #4294967295
 8009720:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009724:	3501      	adds	r5, #1
 8009726:	e7c6      	b.n	80096b6 <_printf_common+0x3e>
 8009728:	18e1      	adds	r1, r4, r3
 800972a:	1c5a      	adds	r2, r3, #1
 800972c:	2030      	movs	r0, #48	@ 0x30
 800972e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009732:	4422      	add	r2, r4
 8009734:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009738:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800973c:	3302      	adds	r3, #2
 800973e:	e7c7      	b.n	80096d0 <_printf_common+0x58>
 8009740:	2301      	movs	r3, #1
 8009742:	4622      	mov	r2, r4
 8009744:	4641      	mov	r1, r8
 8009746:	4638      	mov	r0, r7
 8009748:	47c8      	blx	r9
 800974a:	3001      	adds	r0, #1
 800974c:	d0e6      	beq.n	800971c <_printf_common+0xa4>
 800974e:	3601      	adds	r6, #1
 8009750:	e7d9      	b.n	8009706 <_printf_common+0x8e>
	...

08009754 <_printf_i>:
 8009754:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009758:	7e0f      	ldrb	r7, [r1, #24]
 800975a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800975c:	2f78      	cmp	r7, #120	@ 0x78
 800975e:	4691      	mov	r9, r2
 8009760:	4680      	mov	r8, r0
 8009762:	460c      	mov	r4, r1
 8009764:	469a      	mov	sl, r3
 8009766:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800976a:	d807      	bhi.n	800977c <_printf_i+0x28>
 800976c:	2f62      	cmp	r7, #98	@ 0x62
 800976e:	d80a      	bhi.n	8009786 <_printf_i+0x32>
 8009770:	2f00      	cmp	r7, #0
 8009772:	f000 80d2 	beq.w	800991a <_printf_i+0x1c6>
 8009776:	2f58      	cmp	r7, #88	@ 0x58
 8009778:	f000 80b9 	beq.w	80098ee <_printf_i+0x19a>
 800977c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009780:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009784:	e03a      	b.n	80097fc <_printf_i+0xa8>
 8009786:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800978a:	2b15      	cmp	r3, #21
 800978c:	d8f6      	bhi.n	800977c <_printf_i+0x28>
 800978e:	a101      	add	r1, pc, #4	@ (adr r1, 8009794 <_printf_i+0x40>)
 8009790:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009794:	080097ed 	.word	0x080097ed
 8009798:	08009801 	.word	0x08009801
 800979c:	0800977d 	.word	0x0800977d
 80097a0:	0800977d 	.word	0x0800977d
 80097a4:	0800977d 	.word	0x0800977d
 80097a8:	0800977d 	.word	0x0800977d
 80097ac:	08009801 	.word	0x08009801
 80097b0:	0800977d 	.word	0x0800977d
 80097b4:	0800977d 	.word	0x0800977d
 80097b8:	0800977d 	.word	0x0800977d
 80097bc:	0800977d 	.word	0x0800977d
 80097c0:	08009901 	.word	0x08009901
 80097c4:	0800982b 	.word	0x0800982b
 80097c8:	080098bb 	.word	0x080098bb
 80097cc:	0800977d 	.word	0x0800977d
 80097d0:	0800977d 	.word	0x0800977d
 80097d4:	08009923 	.word	0x08009923
 80097d8:	0800977d 	.word	0x0800977d
 80097dc:	0800982b 	.word	0x0800982b
 80097e0:	0800977d 	.word	0x0800977d
 80097e4:	0800977d 	.word	0x0800977d
 80097e8:	080098c3 	.word	0x080098c3
 80097ec:	6833      	ldr	r3, [r6, #0]
 80097ee:	1d1a      	adds	r2, r3, #4
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	6032      	str	r2, [r6, #0]
 80097f4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80097f8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80097fc:	2301      	movs	r3, #1
 80097fe:	e09d      	b.n	800993c <_printf_i+0x1e8>
 8009800:	6833      	ldr	r3, [r6, #0]
 8009802:	6820      	ldr	r0, [r4, #0]
 8009804:	1d19      	adds	r1, r3, #4
 8009806:	6031      	str	r1, [r6, #0]
 8009808:	0606      	lsls	r6, r0, #24
 800980a:	d501      	bpl.n	8009810 <_printf_i+0xbc>
 800980c:	681d      	ldr	r5, [r3, #0]
 800980e:	e003      	b.n	8009818 <_printf_i+0xc4>
 8009810:	0645      	lsls	r5, r0, #25
 8009812:	d5fb      	bpl.n	800980c <_printf_i+0xb8>
 8009814:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009818:	2d00      	cmp	r5, #0
 800981a:	da03      	bge.n	8009824 <_printf_i+0xd0>
 800981c:	232d      	movs	r3, #45	@ 0x2d
 800981e:	426d      	negs	r5, r5
 8009820:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009824:	4859      	ldr	r0, [pc, #356]	@ (800998c <_printf_i+0x238>)
 8009826:	230a      	movs	r3, #10
 8009828:	e011      	b.n	800984e <_printf_i+0xfa>
 800982a:	6821      	ldr	r1, [r4, #0]
 800982c:	6833      	ldr	r3, [r6, #0]
 800982e:	0608      	lsls	r0, r1, #24
 8009830:	f853 5b04 	ldr.w	r5, [r3], #4
 8009834:	d402      	bmi.n	800983c <_printf_i+0xe8>
 8009836:	0649      	lsls	r1, r1, #25
 8009838:	bf48      	it	mi
 800983a:	b2ad      	uxthmi	r5, r5
 800983c:	2f6f      	cmp	r7, #111	@ 0x6f
 800983e:	4853      	ldr	r0, [pc, #332]	@ (800998c <_printf_i+0x238>)
 8009840:	6033      	str	r3, [r6, #0]
 8009842:	bf14      	ite	ne
 8009844:	230a      	movne	r3, #10
 8009846:	2308      	moveq	r3, #8
 8009848:	2100      	movs	r1, #0
 800984a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800984e:	6866      	ldr	r6, [r4, #4]
 8009850:	60a6      	str	r6, [r4, #8]
 8009852:	2e00      	cmp	r6, #0
 8009854:	bfa2      	ittt	ge
 8009856:	6821      	ldrge	r1, [r4, #0]
 8009858:	f021 0104 	bicge.w	r1, r1, #4
 800985c:	6021      	strge	r1, [r4, #0]
 800985e:	b90d      	cbnz	r5, 8009864 <_printf_i+0x110>
 8009860:	2e00      	cmp	r6, #0
 8009862:	d04b      	beq.n	80098fc <_printf_i+0x1a8>
 8009864:	4616      	mov	r6, r2
 8009866:	fbb5 f1f3 	udiv	r1, r5, r3
 800986a:	fb03 5711 	mls	r7, r3, r1, r5
 800986e:	5dc7      	ldrb	r7, [r0, r7]
 8009870:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009874:	462f      	mov	r7, r5
 8009876:	42bb      	cmp	r3, r7
 8009878:	460d      	mov	r5, r1
 800987a:	d9f4      	bls.n	8009866 <_printf_i+0x112>
 800987c:	2b08      	cmp	r3, #8
 800987e:	d10b      	bne.n	8009898 <_printf_i+0x144>
 8009880:	6823      	ldr	r3, [r4, #0]
 8009882:	07df      	lsls	r7, r3, #31
 8009884:	d508      	bpl.n	8009898 <_printf_i+0x144>
 8009886:	6923      	ldr	r3, [r4, #16]
 8009888:	6861      	ldr	r1, [r4, #4]
 800988a:	4299      	cmp	r1, r3
 800988c:	bfde      	ittt	le
 800988e:	2330      	movle	r3, #48	@ 0x30
 8009890:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009894:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009898:	1b92      	subs	r2, r2, r6
 800989a:	6122      	str	r2, [r4, #16]
 800989c:	f8cd a000 	str.w	sl, [sp]
 80098a0:	464b      	mov	r3, r9
 80098a2:	aa03      	add	r2, sp, #12
 80098a4:	4621      	mov	r1, r4
 80098a6:	4640      	mov	r0, r8
 80098a8:	f7ff fee6 	bl	8009678 <_printf_common>
 80098ac:	3001      	adds	r0, #1
 80098ae:	d14a      	bne.n	8009946 <_printf_i+0x1f2>
 80098b0:	f04f 30ff 	mov.w	r0, #4294967295
 80098b4:	b004      	add	sp, #16
 80098b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80098ba:	6823      	ldr	r3, [r4, #0]
 80098bc:	f043 0320 	orr.w	r3, r3, #32
 80098c0:	6023      	str	r3, [r4, #0]
 80098c2:	4833      	ldr	r0, [pc, #204]	@ (8009990 <_printf_i+0x23c>)
 80098c4:	2778      	movs	r7, #120	@ 0x78
 80098c6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80098ca:	6823      	ldr	r3, [r4, #0]
 80098cc:	6831      	ldr	r1, [r6, #0]
 80098ce:	061f      	lsls	r7, r3, #24
 80098d0:	f851 5b04 	ldr.w	r5, [r1], #4
 80098d4:	d402      	bmi.n	80098dc <_printf_i+0x188>
 80098d6:	065f      	lsls	r7, r3, #25
 80098d8:	bf48      	it	mi
 80098da:	b2ad      	uxthmi	r5, r5
 80098dc:	6031      	str	r1, [r6, #0]
 80098de:	07d9      	lsls	r1, r3, #31
 80098e0:	bf44      	itt	mi
 80098e2:	f043 0320 	orrmi.w	r3, r3, #32
 80098e6:	6023      	strmi	r3, [r4, #0]
 80098e8:	b11d      	cbz	r5, 80098f2 <_printf_i+0x19e>
 80098ea:	2310      	movs	r3, #16
 80098ec:	e7ac      	b.n	8009848 <_printf_i+0xf4>
 80098ee:	4827      	ldr	r0, [pc, #156]	@ (800998c <_printf_i+0x238>)
 80098f0:	e7e9      	b.n	80098c6 <_printf_i+0x172>
 80098f2:	6823      	ldr	r3, [r4, #0]
 80098f4:	f023 0320 	bic.w	r3, r3, #32
 80098f8:	6023      	str	r3, [r4, #0]
 80098fa:	e7f6      	b.n	80098ea <_printf_i+0x196>
 80098fc:	4616      	mov	r6, r2
 80098fe:	e7bd      	b.n	800987c <_printf_i+0x128>
 8009900:	6833      	ldr	r3, [r6, #0]
 8009902:	6825      	ldr	r5, [r4, #0]
 8009904:	6961      	ldr	r1, [r4, #20]
 8009906:	1d18      	adds	r0, r3, #4
 8009908:	6030      	str	r0, [r6, #0]
 800990a:	062e      	lsls	r6, r5, #24
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	d501      	bpl.n	8009914 <_printf_i+0x1c0>
 8009910:	6019      	str	r1, [r3, #0]
 8009912:	e002      	b.n	800991a <_printf_i+0x1c6>
 8009914:	0668      	lsls	r0, r5, #25
 8009916:	d5fb      	bpl.n	8009910 <_printf_i+0x1bc>
 8009918:	8019      	strh	r1, [r3, #0]
 800991a:	2300      	movs	r3, #0
 800991c:	6123      	str	r3, [r4, #16]
 800991e:	4616      	mov	r6, r2
 8009920:	e7bc      	b.n	800989c <_printf_i+0x148>
 8009922:	6833      	ldr	r3, [r6, #0]
 8009924:	1d1a      	adds	r2, r3, #4
 8009926:	6032      	str	r2, [r6, #0]
 8009928:	681e      	ldr	r6, [r3, #0]
 800992a:	6862      	ldr	r2, [r4, #4]
 800992c:	2100      	movs	r1, #0
 800992e:	4630      	mov	r0, r6
 8009930:	f7f6 fc4e 	bl	80001d0 <memchr>
 8009934:	b108      	cbz	r0, 800993a <_printf_i+0x1e6>
 8009936:	1b80      	subs	r0, r0, r6
 8009938:	6060      	str	r0, [r4, #4]
 800993a:	6863      	ldr	r3, [r4, #4]
 800993c:	6123      	str	r3, [r4, #16]
 800993e:	2300      	movs	r3, #0
 8009940:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009944:	e7aa      	b.n	800989c <_printf_i+0x148>
 8009946:	6923      	ldr	r3, [r4, #16]
 8009948:	4632      	mov	r2, r6
 800994a:	4649      	mov	r1, r9
 800994c:	4640      	mov	r0, r8
 800994e:	47d0      	blx	sl
 8009950:	3001      	adds	r0, #1
 8009952:	d0ad      	beq.n	80098b0 <_printf_i+0x15c>
 8009954:	6823      	ldr	r3, [r4, #0]
 8009956:	079b      	lsls	r3, r3, #30
 8009958:	d413      	bmi.n	8009982 <_printf_i+0x22e>
 800995a:	68e0      	ldr	r0, [r4, #12]
 800995c:	9b03      	ldr	r3, [sp, #12]
 800995e:	4298      	cmp	r0, r3
 8009960:	bfb8      	it	lt
 8009962:	4618      	movlt	r0, r3
 8009964:	e7a6      	b.n	80098b4 <_printf_i+0x160>
 8009966:	2301      	movs	r3, #1
 8009968:	4632      	mov	r2, r6
 800996a:	4649      	mov	r1, r9
 800996c:	4640      	mov	r0, r8
 800996e:	47d0      	blx	sl
 8009970:	3001      	adds	r0, #1
 8009972:	d09d      	beq.n	80098b0 <_printf_i+0x15c>
 8009974:	3501      	adds	r5, #1
 8009976:	68e3      	ldr	r3, [r4, #12]
 8009978:	9903      	ldr	r1, [sp, #12]
 800997a:	1a5b      	subs	r3, r3, r1
 800997c:	42ab      	cmp	r3, r5
 800997e:	dcf2      	bgt.n	8009966 <_printf_i+0x212>
 8009980:	e7eb      	b.n	800995a <_printf_i+0x206>
 8009982:	2500      	movs	r5, #0
 8009984:	f104 0619 	add.w	r6, r4, #25
 8009988:	e7f5      	b.n	8009976 <_printf_i+0x222>
 800998a:	bf00      	nop
 800998c:	0800e24e 	.word	0x0800e24e
 8009990:	0800e25f 	.word	0x0800e25f

08009994 <std>:
 8009994:	2300      	movs	r3, #0
 8009996:	b510      	push	{r4, lr}
 8009998:	4604      	mov	r4, r0
 800999a:	e9c0 3300 	strd	r3, r3, [r0]
 800999e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80099a2:	6083      	str	r3, [r0, #8]
 80099a4:	8181      	strh	r1, [r0, #12]
 80099a6:	6643      	str	r3, [r0, #100]	@ 0x64
 80099a8:	81c2      	strh	r2, [r0, #14]
 80099aa:	6183      	str	r3, [r0, #24]
 80099ac:	4619      	mov	r1, r3
 80099ae:	2208      	movs	r2, #8
 80099b0:	305c      	adds	r0, #92	@ 0x5c
 80099b2:	f000 f92e 	bl	8009c12 <memset>
 80099b6:	4b0d      	ldr	r3, [pc, #52]	@ (80099ec <std+0x58>)
 80099b8:	6263      	str	r3, [r4, #36]	@ 0x24
 80099ba:	4b0d      	ldr	r3, [pc, #52]	@ (80099f0 <std+0x5c>)
 80099bc:	62a3      	str	r3, [r4, #40]	@ 0x28
 80099be:	4b0d      	ldr	r3, [pc, #52]	@ (80099f4 <std+0x60>)
 80099c0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80099c2:	4b0d      	ldr	r3, [pc, #52]	@ (80099f8 <std+0x64>)
 80099c4:	6323      	str	r3, [r4, #48]	@ 0x30
 80099c6:	4b0d      	ldr	r3, [pc, #52]	@ (80099fc <std+0x68>)
 80099c8:	6224      	str	r4, [r4, #32]
 80099ca:	429c      	cmp	r4, r3
 80099cc:	d006      	beq.n	80099dc <std+0x48>
 80099ce:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80099d2:	4294      	cmp	r4, r2
 80099d4:	d002      	beq.n	80099dc <std+0x48>
 80099d6:	33d0      	adds	r3, #208	@ 0xd0
 80099d8:	429c      	cmp	r4, r3
 80099da:	d105      	bne.n	80099e8 <std+0x54>
 80099dc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80099e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80099e4:	f000 b9a0 	b.w	8009d28 <__retarget_lock_init_recursive>
 80099e8:	bd10      	pop	{r4, pc}
 80099ea:	bf00      	nop
 80099ec:	08009b59 	.word	0x08009b59
 80099f0:	08009b7b 	.word	0x08009b7b
 80099f4:	08009bb3 	.word	0x08009bb3
 80099f8:	08009bd7 	.word	0x08009bd7
 80099fc:	2000c6a4 	.word	0x2000c6a4

08009a00 <stdio_exit_handler>:
 8009a00:	4a02      	ldr	r2, [pc, #8]	@ (8009a0c <stdio_exit_handler+0xc>)
 8009a02:	4903      	ldr	r1, [pc, #12]	@ (8009a10 <stdio_exit_handler+0x10>)
 8009a04:	4803      	ldr	r0, [pc, #12]	@ (8009a14 <stdio_exit_handler+0x14>)
 8009a06:	f000 b869 	b.w	8009adc <_fwalk_sglue>
 8009a0a:	bf00      	nop
 8009a0c:	20000054 	.word	0x20000054
 8009a10:	0800b6b5 	.word	0x0800b6b5
 8009a14:	20000064 	.word	0x20000064

08009a18 <cleanup_stdio>:
 8009a18:	6841      	ldr	r1, [r0, #4]
 8009a1a:	4b0c      	ldr	r3, [pc, #48]	@ (8009a4c <cleanup_stdio+0x34>)
 8009a1c:	4299      	cmp	r1, r3
 8009a1e:	b510      	push	{r4, lr}
 8009a20:	4604      	mov	r4, r0
 8009a22:	d001      	beq.n	8009a28 <cleanup_stdio+0x10>
 8009a24:	f001 fe46 	bl	800b6b4 <_fflush_r>
 8009a28:	68a1      	ldr	r1, [r4, #8]
 8009a2a:	4b09      	ldr	r3, [pc, #36]	@ (8009a50 <cleanup_stdio+0x38>)
 8009a2c:	4299      	cmp	r1, r3
 8009a2e:	d002      	beq.n	8009a36 <cleanup_stdio+0x1e>
 8009a30:	4620      	mov	r0, r4
 8009a32:	f001 fe3f 	bl	800b6b4 <_fflush_r>
 8009a36:	68e1      	ldr	r1, [r4, #12]
 8009a38:	4b06      	ldr	r3, [pc, #24]	@ (8009a54 <cleanup_stdio+0x3c>)
 8009a3a:	4299      	cmp	r1, r3
 8009a3c:	d004      	beq.n	8009a48 <cleanup_stdio+0x30>
 8009a3e:	4620      	mov	r0, r4
 8009a40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009a44:	f001 be36 	b.w	800b6b4 <_fflush_r>
 8009a48:	bd10      	pop	{r4, pc}
 8009a4a:	bf00      	nop
 8009a4c:	2000c6a4 	.word	0x2000c6a4
 8009a50:	2000c70c 	.word	0x2000c70c
 8009a54:	2000c774 	.word	0x2000c774

08009a58 <global_stdio_init.part.0>:
 8009a58:	b510      	push	{r4, lr}
 8009a5a:	4b0b      	ldr	r3, [pc, #44]	@ (8009a88 <global_stdio_init.part.0+0x30>)
 8009a5c:	4c0b      	ldr	r4, [pc, #44]	@ (8009a8c <global_stdio_init.part.0+0x34>)
 8009a5e:	4a0c      	ldr	r2, [pc, #48]	@ (8009a90 <global_stdio_init.part.0+0x38>)
 8009a60:	601a      	str	r2, [r3, #0]
 8009a62:	4620      	mov	r0, r4
 8009a64:	2200      	movs	r2, #0
 8009a66:	2104      	movs	r1, #4
 8009a68:	f7ff ff94 	bl	8009994 <std>
 8009a6c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009a70:	2201      	movs	r2, #1
 8009a72:	2109      	movs	r1, #9
 8009a74:	f7ff ff8e 	bl	8009994 <std>
 8009a78:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009a7c:	2202      	movs	r2, #2
 8009a7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009a82:	2112      	movs	r1, #18
 8009a84:	f7ff bf86 	b.w	8009994 <std>
 8009a88:	2000c7dc 	.word	0x2000c7dc
 8009a8c:	2000c6a4 	.word	0x2000c6a4
 8009a90:	08009a01 	.word	0x08009a01

08009a94 <__sfp_lock_acquire>:
 8009a94:	4801      	ldr	r0, [pc, #4]	@ (8009a9c <__sfp_lock_acquire+0x8>)
 8009a96:	f000 b948 	b.w	8009d2a <__retarget_lock_acquire_recursive>
 8009a9a:	bf00      	nop
 8009a9c:	2000c7e5 	.word	0x2000c7e5

08009aa0 <__sfp_lock_release>:
 8009aa0:	4801      	ldr	r0, [pc, #4]	@ (8009aa8 <__sfp_lock_release+0x8>)
 8009aa2:	f000 b943 	b.w	8009d2c <__retarget_lock_release_recursive>
 8009aa6:	bf00      	nop
 8009aa8:	2000c7e5 	.word	0x2000c7e5

08009aac <__sinit>:
 8009aac:	b510      	push	{r4, lr}
 8009aae:	4604      	mov	r4, r0
 8009ab0:	f7ff fff0 	bl	8009a94 <__sfp_lock_acquire>
 8009ab4:	6a23      	ldr	r3, [r4, #32]
 8009ab6:	b11b      	cbz	r3, 8009ac0 <__sinit+0x14>
 8009ab8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009abc:	f7ff bff0 	b.w	8009aa0 <__sfp_lock_release>
 8009ac0:	4b04      	ldr	r3, [pc, #16]	@ (8009ad4 <__sinit+0x28>)
 8009ac2:	6223      	str	r3, [r4, #32]
 8009ac4:	4b04      	ldr	r3, [pc, #16]	@ (8009ad8 <__sinit+0x2c>)
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d1f5      	bne.n	8009ab8 <__sinit+0xc>
 8009acc:	f7ff ffc4 	bl	8009a58 <global_stdio_init.part.0>
 8009ad0:	e7f2      	b.n	8009ab8 <__sinit+0xc>
 8009ad2:	bf00      	nop
 8009ad4:	08009a19 	.word	0x08009a19
 8009ad8:	2000c7dc 	.word	0x2000c7dc

08009adc <_fwalk_sglue>:
 8009adc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009ae0:	4607      	mov	r7, r0
 8009ae2:	4688      	mov	r8, r1
 8009ae4:	4614      	mov	r4, r2
 8009ae6:	2600      	movs	r6, #0
 8009ae8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009aec:	f1b9 0901 	subs.w	r9, r9, #1
 8009af0:	d505      	bpl.n	8009afe <_fwalk_sglue+0x22>
 8009af2:	6824      	ldr	r4, [r4, #0]
 8009af4:	2c00      	cmp	r4, #0
 8009af6:	d1f7      	bne.n	8009ae8 <_fwalk_sglue+0xc>
 8009af8:	4630      	mov	r0, r6
 8009afa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009afe:	89ab      	ldrh	r3, [r5, #12]
 8009b00:	2b01      	cmp	r3, #1
 8009b02:	d907      	bls.n	8009b14 <_fwalk_sglue+0x38>
 8009b04:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009b08:	3301      	adds	r3, #1
 8009b0a:	d003      	beq.n	8009b14 <_fwalk_sglue+0x38>
 8009b0c:	4629      	mov	r1, r5
 8009b0e:	4638      	mov	r0, r7
 8009b10:	47c0      	blx	r8
 8009b12:	4306      	orrs	r6, r0
 8009b14:	3568      	adds	r5, #104	@ 0x68
 8009b16:	e7e9      	b.n	8009aec <_fwalk_sglue+0x10>

08009b18 <siprintf>:
 8009b18:	b40e      	push	{r1, r2, r3}
 8009b1a:	b500      	push	{lr}
 8009b1c:	b09c      	sub	sp, #112	@ 0x70
 8009b1e:	ab1d      	add	r3, sp, #116	@ 0x74
 8009b20:	9002      	str	r0, [sp, #8]
 8009b22:	9006      	str	r0, [sp, #24]
 8009b24:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8009b28:	4809      	ldr	r0, [pc, #36]	@ (8009b50 <siprintf+0x38>)
 8009b2a:	9107      	str	r1, [sp, #28]
 8009b2c:	9104      	str	r1, [sp, #16]
 8009b2e:	4909      	ldr	r1, [pc, #36]	@ (8009b54 <siprintf+0x3c>)
 8009b30:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b34:	9105      	str	r1, [sp, #20]
 8009b36:	6800      	ldr	r0, [r0, #0]
 8009b38:	9301      	str	r3, [sp, #4]
 8009b3a:	a902      	add	r1, sp, #8
 8009b3c:	f001 fc3a 	bl	800b3b4 <_svfiprintf_r>
 8009b40:	9b02      	ldr	r3, [sp, #8]
 8009b42:	2200      	movs	r2, #0
 8009b44:	701a      	strb	r2, [r3, #0]
 8009b46:	b01c      	add	sp, #112	@ 0x70
 8009b48:	f85d eb04 	ldr.w	lr, [sp], #4
 8009b4c:	b003      	add	sp, #12
 8009b4e:	4770      	bx	lr
 8009b50:	20000060 	.word	0x20000060
 8009b54:	ffff0208 	.word	0xffff0208

08009b58 <__sread>:
 8009b58:	b510      	push	{r4, lr}
 8009b5a:	460c      	mov	r4, r1
 8009b5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b60:	f000 f894 	bl	8009c8c <_read_r>
 8009b64:	2800      	cmp	r0, #0
 8009b66:	bfab      	itete	ge
 8009b68:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009b6a:	89a3      	ldrhlt	r3, [r4, #12]
 8009b6c:	181b      	addge	r3, r3, r0
 8009b6e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009b72:	bfac      	ite	ge
 8009b74:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009b76:	81a3      	strhlt	r3, [r4, #12]
 8009b78:	bd10      	pop	{r4, pc}

08009b7a <__swrite>:
 8009b7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b7e:	461f      	mov	r7, r3
 8009b80:	898b      	ldrh	r3, [r1, #12]
 8009b82:	05db      	lsls	r3, r3, #23
 8009b84:	4605      	mov	r5, r0
 8009b86:	460c      	mov	r4, r1
 8009b88:	4616      	mov	r6, r2
 8009b8a:	d505      	bpl.n	8009b98 <__swrite+0x1e>
 8009b8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b90:	2302      	movs	r3, #2
 8009b92:	2200      	movs	r2, #0
 8009b94:	f000 f868 	bl	8009c68 <_lseek_r>
 8009b98:	89a3      	ldrh	r3, [r4, #12]
 8009b9a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009b9e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009ba2:	81a3      	strh	r3, [r4, #12]
 8009ba4:	4632      	mov	r2, r6
 8009ba6:	463b      	mov	r3, r7
 8009ba8:	4628      	mov	r0, r5
 8009baa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009bae:	f000 b87f 	b.w	8009cb0 <_write_r>

08009bb2 <__sseek>:
 8009bb2:	b510      	push	{r4, lr}
 8009bb4:	460c      	mov	r4, r1
 8009bb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009bba:	f000 f855 	bl	8009c68 <_lseek_r>
 8009bbe:	1c43      	adds	r3, r0, #1
 8009bc0:	89a3      	ldrh	r3, [r4, #12]
 8009bc2:	bf15      	itete	ne
 8009bc4:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009bc6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009bca:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009bce:	81a3      	strheq	r3, [r4, #12]
 8009bd0:	bf18      	it	ne
 8009bd2:	81a3      	strhne	r3, [r4, #12]
 8009bd4:	bd10      	pop	{r4, pc}

08009bd6 <__sclose>:
 8009bd6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009bda:	f000 b835 	b.w	8009c48 <_close_r>

08009bde <memmove>:
 8009bde:	4288      	cmp	r0, r1
 8009be0:	b510      	push	{r4, lr}
 8009be2:	eb01 0402 	add.w	r4, r1, r2
 8009be6:	d902      	bls.n	8009bee <memmove+0x10>
 8009be8:	4284      	cmp	r4, r0
 8009bea:	4623      	mov	r3, r4
 8009bec:	d807      	bhi.n	8009bfe <memmove+0x20>
 8009bee:	1e43      	subs	r3, r0, #1
 8009bf0:	42a1      	cmp	r1, r4
 8009bf2:	d008      	beq.n	8009c06 <memmove+0x28>
 8009bf4:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009bf8:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009bfc:	e7f8      	b.n	8009bf0 <memmove+0x12>
 8009bfe:	4402      	add	r2, r0
 8009c00:	4601      	mov	r1, r0
 8009c02:	428a      	cmp	r2, r1
 8009c04:	d100      	bne.n	8009c08 <memmove+0x2a>
 8009c06:	bd10      	pop	{r4, pc}
 8009c08:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009c0c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009c10:	e7f7      	b.n	8009c02 <memmove+0x24>

08009c12 <memset>:
 8009c12:	4402      	add	r2, r0
 8009c14:	4603      	mov	r3, r0
 8009c16:	4293      	cmp	r3, r2
 8009c18:	d100      	bne.n	8009c1c <memset+0xa>
 8009c1a:	4770      	bx	lr
 8009c1c:	f803 1b01 	strb.w	r1, [r3], #1
 8009c20:	e7f9      	b.n	8009c16 <memset+0x4>

08009c22 <strcat>:
 8009c22:	b510      	push	{r4, lr}
 8009c24:	4602      	mov	r2, r0
 8009c26:	7814      	ldrb	r4, [r2, #0]
 8009c28:	4613      	mov	r3, r2
 8009c2a:	3201      	adds	r2, #1
 8009c2c:	2c00      	cmp	r4, #0
 8009c2e:	d1fa      	bne.n	8009c26 <strcat+0x4>
 8009c30:	3b01      	subs	r3, #1
 8009c32:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009c36:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009c3a:	2a00      	cmp	r2, #0
 8009c3c:	d1f9      	bne.n	8009c32 <strcat+0x10>
 8009c3e:	bd10      	pop	{r4, pc}

08009c40 <_localeconv_r>:
 8009c40:	4800      	ldr	r0, [pc, #0]	@ (8009c44 <_localeconv_r+0x4>)
 8009c42:	4770      	bx	lr
 8009c44:	200001a0 	.word	0x200001a0

08009c48 <_close_r>:
 8009c48:	b538      	push	{r3, r4, r5, lr}
 8009c4a:	4d06      	ldr	r5, [pc, #24]	@ (8009c64 <_close_r+0x1c>)
 8009c4c:	2300      	movs	r3, #0
 8009c4e:	4604      	mov	r4, r0
 8009c50:	4608      	mov	r0, r1
 8009c52:	602b      	str	r3, [r5, #0]
 8009c54:	f7fa fc0e 	bl	8004474 <_close>
 8009c58:	1c43      	adds	r3, r0, #1
 8009c5a:	d102      	bne.n	8009c62 <_close_r+0x1a>
 8009c5c:	682b      	ldr	r3, [r5, #0]
 8009c5e:	b103      	cbz	r3, 8009c62 <_close_r+0x1a>
 8009c60:	6023      	str	r3, [r4, #0]
 8009c62:	bd38      	pop	{r3, r4, r5, pc}
 8009c64:	2000c7e0 	.word	0x2000c7e0

08009c68 <_lseek_r>:
 8009c68:	b538      	push	{r3, r4, r5, lr}
 8009c6a:	4d07      	ldr	r5, [pc, #28]	@ (8009c88 <_lseek_r+0x20>)
 8009c6c:	4604      	mov	r4, r0
 8009c6e:	4608      	mov	r0, r1
 8009c70:	4611      	mov	r1, r2
 8009c72:	2200      	movs	r2, #0
 8009c74:	602a      	str	r2, [r5, #0]
 8009c76:	461a      	mov	r2, r3
 8009c78:	f7fa fc23 	bl	80044c2 <_lseek>
 8009c7c:	1c43      	adds	r3, r0, #1
 8009c7e:	d102      	bne.n	8009c86 <_lseek_r+0x1e>
 8009c80:	682b      	ldr	r3, [r5, #0]
 8009c82:	b103      	cbz	r3, 8009c86 <_lseek_r+0x1e>
 8009c84:	6023      	str	r3, [r4, #0]
 8009c86:	bd38      	pop	{r3, r4, r5, pc}
 8009c88:	2000c7e0 	.word	0x2000c7e0

08009c8c <_read_r>:
 8009c8c:	b538      	push	{r3, r4, r5, lr}
 8009c8e:	4d07      	ldr	r5, [pc, #28]	@ (8009cac <_read_r+0x20>)
 8009c90:	4604      	mov	r4, r0
 8009c92:	4608      	mov	r0, r1
 8009c94:	4611      	mov	r1, r2
 8009c96:	2200      	movs	r2, #0
 8009c98:	602a      	str	r2, [r5, #0]
 8009c9a:	461a      	mov	r2, r3
 8009c9c:	f7fa fbb1 	bl	8004402 <_read>
 8009ca0:	1c43      	adds	r3, r0, #1
 8009ca2:	d102      	bne.n	8009caa <_read_r+0x1e>
 8009ca4:	682b      	ldr	r3, [r5, #0]
 8009ca6:	b103      	cbz	r3, 8009caa <_read_r+0x1e>
 8009ca8:	6023      	str	r3, [r4, #0]
 8009caa:	bd38      	pop	{r3, r4, r5, pc}
 8009cac:	2000c7e0 	.word	0x2000c7e0

08009cb0 <_write_r>:
 8009cb0:	b538      	push	{r3, r4, r5, lr}
 8009cb2:	4d07      	ldr	r5, [pc, #28]	@ (8009cd0 <_write_r+0x20>)
 8009cb4:	4604      	mov	r4, r0
 8009cb6:	4608      	mov	r0, r1
 8009cb8:	4611      	mov	r1, r2
 8009cba:	2200      	movs	r2, #0
 8009cbc:	602a      	str	r2, [r5, #0]
 8009cbe:	461a      	mov	r2, r3
 8009cc0:	f7fa fbbc 	bl	800443c <_write>
 8009cc4:	1c43      	adds	r3, r0, #1
 8009cc6:	d102      	bne.n	8009cce <_write_r+0x1e>
 8009cc8:	682b      	ldr	r3, [r5, #0]
 8009cca:	b103      	cbz	r3, 8009cce <_write_r+0x1e>
 8009ccc:	6023      	str	r3, [r4, #0]
 8009cce:	bd38      	pop	{r3, r4, r5, pc}
 8009cd0:	2000c7e0 	.word	0x2000c7e0

08009cd4 <__errno>:
 8009cd4:	4b01      	ldr	r3, [pc, #4]	@ (8009cdc <__errno+0x8>)
 8009cd6:	6818      	ldr	r0, [r3, #0]
 8009cd8:	4770      	bx	lr
 8009cda:	bf00      	nop
 8009cdc:	20000060 	.word	0x20000060

08009ce0 <__libc_init_array>:
 8009ce0:	b570      	push	{r4, r5, r6, lr}
 8009ce2:	4d0d      	ldr	r5, [pc, #52]	@ (8009d18 <__libc_init_array+0x38>)
 8009ce4:	4c0d      	ldr	r4, [pc, #52]	@ (8009d1c <__libc_init_array+0x3c>)
 8009ce6:	1b64      	subs	r4, r4, r5
 8009ce8:	10a4      	asrs	r4, r4, #2
 8009cea:	2600      	movs	r6, #0
 8009cec:	42a6      	cmp	r6, r4
 8009cee:	d109      	bne.n	8009d04 <__libc_init_array+0x24>
 8009cf0:	4d0b      	ldr	r5, [pc, #44]	@ (8009d20 <__libc_init_array+0x40>)
 8009cf2:	4c0c      	ldr	r4, [pc, #48]	@ (8009d24 <__libc_init_array+0x44>)
 8009cf4:	f004 fa84 	bl	800e200 <_init>
 8009cf8:	1b64      	subs	r4, r4, r5
 8009cfa:	10a4      	asrs	r4, r4, #2
 8009cfc:	2600      	movs	r6, #0
 8009cfe:	42a6      	cmp	r6, r4
 8009d00:	d105      	bne.n	8009d0e <__libc_init_array+0x2e>
 8009d02:	bd70      	pop	{r4, r5, r6, pc}
 8009d04:	f855 3b04 	ldr.w	r3, [r5], #4
 8009d08:	4798      	blx	r3
 8009d0a:	3601      	adds	r6, #1
 8009d0c:	e7ee      	b.n	8009cec <__libc_init_array+0xc>
 8009d0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009d12:	4798      	blx	r3
 8009d14:	3601      	adds	r6, #1
 8009d16:	e7f2      	b.n	8009cfe <__libc_init_array+0x1e>
 8009d18:	0800e830 	.word	0x0800e830
 8009d1c:	0800e830 	.word	0x0800e830
 8009d20:	0800e830 	.word	0x0800e830
 8009d24:	0800e834 	.word	0x0800e834

08009d28 <__retarget_lock_init_recursive>:
 8009d28:	4770      	bx	lr

08009d2a <__retarget_lock_acquire_recursive>:
 8009d2a:	4770      	bx	lr

08009d2c <__retarget_lock_release_recursive>:
 8009d2c:	4770      	bx	lr

08009d2e <strcpy>:
 8009d2e:	4603      	mov	r3, r0
 8009d30:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009d34:	f803 2b01 	strb.w	r2, [r3], #1
 8009d38:	2a00      	cmp	r2, #0
 8009d3a:	d1f9      	bne.n	8009d30 <strcpy+0x2>
 8009d3c:	4770      	bx	lr

08009d3e <memcpy>:
 8009d3e:	440a      	add	r2, r1
 8009d40:	4291      	cmp	r1, r2
 8009d42:	f100 33ff 	add.w	r3, r0, #4294967295
 8009d46:	d100      	bne.n	8009d4a <memcpy+0xc>
 8009d48:	4770      	bx	lr
 8009d4a:	b510      	push	{r4, lr}
 8009d4c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009d50:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009d54:	4291      	cmp	r1, r2
 8009d56:	d1f9      	bne.n	8009d4c <memcpy+0xe>
 8009d58:	bd10      	pop	{r4, pc}

08009d5a <quorem>:
 8009d5a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d5e:	6903      	ldr	r3, [r0, #16]
 8009d60:	690c      	ldr	r4, [r1, #16]
 8009d62:	42a3      	cmp	r3, r4
 8009d64:	4607      	mov	r7, r0
 8009d66:	db7e      	blt.n	8009e66 <quorem+0x10c>
 8009d68:	3c01      	subs	r4, #1
 8009d6a:	f101 0814 	add.w	r8, r1, #20
 8009d6e:	00a3      	lsls	r3, r4, #2
 8009d70:	f100 0514 	add.w	r5, r0, #20
 8009d74:	9300      	str	r3, [sp, #0]
 8009d76:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009d7a:	9301      	str	r3, [sp, #4]
 8009d7c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009d80:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009d84:	3301      	adds	r3, #1
 8009d86:	429a      	cmp	r2, r3
 8009d88:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009d8c:	fbb2 f6f3 	udiv	r6, r2, r3
 8009d90:	d32e      	bcc.n	8009df0 <quorem+0x96>
 8009d92:	f04f 0a00 	mov.w	sl, #0
 8009d96:	46c4      	mov	ip, r8
 8009d98:	46ae      	mov	lr, r5
 8009d9a:	46d3      	mov	fp, sl
 8009d9c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009da0:	b298      	uxth	r0, r3
 8009da2:	fb06 a000 	mla	r0, r6, r0, sl
 8009da6:	0c02      	lsrs	r2, r0, #16
 8009da8:	0c1b      	lsrs	r3, r3, #16
 8009daa:	fb06 2303 	mla	r3, r6, r3, r2
 8009dae:	f8de 2000 	ldr.w	r2, [lr]
 8009db2:	b280      	uxth	r0, r0
 8009db4:	b292      	uxth	r2, r2
 8009db6:	1a12      	subs	r2, r2, r0
 8009db8:	445a      	add	r2, fp
 8009dba:	f8de 0000 	ldr.w	r0, [lr]
 8009dbe:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009dc2:	b29b      	uxth	r3, r3
 8009dc4:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8009dc8:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8009dcc:	b292      	uxth	r2, r2
 8009dce:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8009dd2:	45e1      	cmp	r9, ip
 8009dd4:	f84e 2b04 	str.w	r2, [lr], #4
 8009dd8:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8009ddc:	d2de      	bcs.n	8009d9c <quorem+0x42>
 8009dde:	9b00      	ldr	r3, [sp, #0]
 8009de0:	58eb      	ldr	r3, [r5, r3]
 8009de2:	b92b      	cbnz	r3, 8009df0 <quorem+0x96>
 8009de4:	9b01      	ldr	r3, [sp, #4]
 8009de6:	3b04      	subs	r3, #4
 8009de8:	429d      	cmp	r5, r3
 8009dea:	461a      	mov	r2, r3
 8009dec:	d32f      	bcc.n	8009e4e <quorem+0xf4>
 8009dee:	613c      	str	r4, [r7, #16]
 8009df0:	4638      	mov	r0, r7
 8009df2:	f001 f97b 	bl	800b0ec <__mcmp>
 8009df6:	2800      	cmp	r0, #0
 8009df8:	db25      	blt.n	8009e46 <quorem+0xec>
 8009dfa:	4629      	mov	r1, r5
 8009dfc:	2000      	movs	r0, #0
 8009dfe:	f858 2b04 	ldr.w	r2, [r8], #4
 8009e02:	f8d1 c000 	ldr.w	ip, [r1]
 8009e06:	fa1f fe82 	uxth.w	lr, r2
 8009e0a:	fa1f f38c 	uxth.w	r3, ip
 8009e0e:	eba3 030e 	sub.w	r3, r3, lr
 8009e12:	4403      	add	r3, r0
 8009e14:	0c12      	lsrs	r2, r2, #16
 8009e16:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8009e1a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8009e1e:	b29b      	uxth	r3, r3
 8009e20:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009e24:	45c1      	cmp	r9, r8
 8009e26:	f841 3b04 	str.w	r3, [r1], #4
 8009e2a:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009e2e:	d2e6      	bcs.n	8009dfe <quorem+0xa4>
 8009e30:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009e34:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009e38:	b922      	cbnz	r2, 8009e44 <quorem+0xea>
 8009e3a:	3b04      	subs	r3, #4
 8009e3c:	429d      	cmp	r5, r3
 8009e3e:	461a      	mov	r2, r3
 8009e40:	d30b      	bcc.n	8009e5a <quorem+0x100>
 8009e42:	613c      	str	r4, [r7, #16]
 8009e44:	3601      	adds	r6, #1
 8009e46:	4630      	mov	r0, r6
 8009e48:	b003      	add	sp, #12
 8009e4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e4e:	6812      	ldr	r2, [r2, #0]
 8009e50:	3b04      	subs	r3, #4
 8009e52:	2a00      	cmp	r2, #0
 8009e54:	d1cb      	bne.n	8009dee <quorem+0x94>
 8009e56:	3c01      	subs	r4, #1
 8009e58:	e7c6      	b.n	8009de8 <quorem+0x8e>
 8009e5a:	6812      	ldr	r2, [r2, #0]
 8009e5c:	3b04      	subs	r3, #4
 8009e5e:	2a00      	cmp	r2, #0
 8009e60:	d1ef      	bne.n	8009e42 <quorem+0xe8>
 8009e62:	3c01      	subs	r4, #1
 8009e64:	e7ea      	b.n	8009e3c <quorem+0xe2>
 8009e66:	2000      	movs	r0, #0
 8009e68:	e7ee      	b.n	8009e48 <quorem+0xee>
 8009e6a:	0000      	movs	r0, r0
 8009e6c:	0000      	movs	r0, r0
	...

08009e70 <_dtoa_r>:
 8009e70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e74:	69c7      	ldr	r7, [r0, #28]
 8009e76:	b099      	sub	sp, #100	@ 0x64
 8009e78:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009e7c:	ec55 4b10 	vmov	r4, r5, d0
 8009e80:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8009e82:	9109      	str	r1, [sp, #36]	@ 0x24
 8009e84:	4683      	mov	fp, r0
 8009e86:	920e      	str	r2, [sp, #56]	@ 0x38
 8009e88:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009e8a:	b97f      	cbnz	r7, 8009eac <_dtoa_r+0x3c>
 8009e8c:	2010      	movs	r0, #16
 8009e8e:	f000 fdfd 	bl	800aa8c <malloc>
 8009e92:	4602      	mov	r2, r0
 8009e94:	f8cb 001c 	str.w	r0, [fp, #28]
 8009e98:	b920      	cbnz	r0, 8009ea4 <_dtoa_r+0x34>
 8009e9a:	4ba7      	ldr	r3, [pc, #668]	@ (800a138 <_dtoa_r+0x2c8>)
 8009e9c:	21ef      	movs	r1, #239	@ 0xef
 8009e9e:	48a7      	ldr	r0, [pc, #668]	@ (800a13c <_dtoa_r+0x2cc>)
 8009ea0:	f001 fc40 	bl	800b724 <__assert_func>
 8009ea4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009ea8:	6007      	str	r7, [r0, #0]
 8009eaa:	60c7      	str	r7, [r0, #12]
 8009eac:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009eb0:	6819      	ldr	r1, [r3, #0]
 8009eb2:	b159      	cbz	r1, 8009ecc <_dtoa_r+0x5c>
 8009eb4:	685a      	ldr	r2, [r3, #4]
 8009eb6:	604a      	str	r2, [r1, #4]
 8009eb8:	2301      	movs	r3, #1
 8009eba:	4093      	lsls	r3, r2
 8009ebc:	608b      	str	r3, [r1, #8]
 8009ebe:	4658      	mov	r0, fp
 8009ec0:	f000 feda 	bl	800ac78 <_Bfree>
 8009ec4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009ec8:	2200      	movs	r2, #0
 8009eca:	601a      	str	r2, [r3, #0]
 8009ecc:	1e2b      	subs	r3, r5, #0
 8009ece:	bfb9      	ittee	lt
 8009ed0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8009ed4:	9303      	strlt	r3, [sp, #12]
 8009ed6:	2300      	movge	r3, #0
 8009ed8:	6033      	strge	r3, [r6, #0]
 8009eda:	9f03      	ldr	r7, [sp, #12]
 8009edc:	4b98      	ldr	r3, [pc, #608]	@ (800a140 <_dtoa_r+0x2d0>)
 8009ede:	bfbc      	itt	lt
 8009ee0:	2201      	movlt	r2, #1
 8009ee2:	6032      	strlt	r2, [r6, #0]
 8009ee4:	43bb      	bics	r3, r7
 8009ee6:	d112      	bne.n	8009f0e <_dtoa_r+0x9e>
 8009ee8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009eea:	f242 730f 	movw	r3, #9999	@ 0x270f
 8009eee:	6013      	str	r3, [r2, #0]
 8009ef0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009ef4:	4323      	orrs	r3, r4
 8009ef6:	f000 854d 	beq.w	800a994 <_dtoa_r+0xb24>
 8009efa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009efc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800a154 <_dtoa_r+0x2e4>
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	f000 854f 	beq.w	800a9a4 <_dtoa_r+0xb34>
 8009f06:	f10a 0303 	add.w	r3, sl, #3
 8009f0a:	f000 bd49 	b.w	800a9a0 <_dtoa_r+0xb30>
 8009f0e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009f12:	2200      	movs	r2, #0
 8009f14:	ec51 0b17 	vmov	r0, r1, d7
 8009f18:	2300      	movs	r3, #0
 8009f1a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8009f1e:	f7f6 fdd3 	bl	8000ac8 <__aeabi_dcmpeq>
 8009f22:	4680      	mov	r8, r0
 8009f24:	b158      	cbz	r0, 8009f3e <_dtoa_r+0xce>
 8009f26:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009f28:	2301      	movs	r3, #1
 8009f2a:	6013      	str	r3, [r2, #0]
 8009f2c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009f2e:	b113      	cbz	r3, 8009f36 <_dtoa_r+0xc6>
 8009f30:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8009f32:	4b84      	ldr	r3, [pc, #528]	@ (800a144 <_dtoa_r+0x2d4>)
 8009f34:	6013      	str	r3, [r2, #0]
 8009f36:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800a158 <_dtoa_r+0x2e8>
 8009f3a:	f000 bd33 	b.w	800a9a4 <_dtoa_r+0xb34>
 8009f3e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8009f42:	aa16      	add	r2, sp, #88	@ 0x58
 8009f44:	a917      	add	r1, sp, #92	@ 0x5c
 8009f46:	4658      	mov	r0, fp
 8009f48:	f001 f980 	bl	800b24c <__d2b>
 8009f4c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8009f50:	4681      	mov	r9, r0
 8009f52:	2e00      	cmp	r6, #0
 8009f54:	d077      	beq.n	800a046 <_dtoa_r+0x1d6>
 8009f56:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009f58:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8009f5c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009f60:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009f64:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009f68:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8009f6c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8009f70:	4619      	mov	r1, r3
 8009f72:	2200      	movs	r2, #0
 8009f74:	4b74      	ldr	r3, [pc, #464]	@ (800a148 <_dtoa_r+0x2d8>)
 8009f76:	f7f6 f987 	bl	8000288 <__aeabi_dsub>
 8009f7a:	a369      	add	r3, pc, #420	@ (adr r3, 800a120 <_dtoa_r+0x2b0>)
 8009f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f80:	f7f6 fb3a 	bl	80005f8 <__aeabi_dmul>
 8009f84:	a368      	add	r3, pc, #416	@ (adr r3, 800a128 <_dtoa_r+0x2b8>)
 8009f86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f8a:	f7f6 f97f 	bl	800028c <__adddf3>
 8009f8e:	4604      	mov	r4, r0
 8009f90:	4630      	mov	r0, r6
 8009f92:	460d      	mov	r5, r1
 8009f94:	f7f6 fac6 	bl	8000524 <__aeabi_i2d>
 8009f98:	a365      	add	r3, pc, #404	@ (adr r3, 800a130 <_dtoa_r+0x2c0>)
 8009f9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f9e:	f7f6 fb2b 	bl	80005f8 <__aeabi_dmul>
 8009fa2:	4602      	mov	r2, r0
 8009fa4:	460b      	mov	r3, r1
 8009fa6:	4620      	mov	r0, r4
 8009fa8:	4629      	mov	r1, r5
 8009faa:	f7f6 f96f 	bl	800028c <__adddf3>
 8009fae:	4604      	mov	r4, r0
 8009fb0:	460d      	mov	r5, r1
 8009fb2:	f7f6 fdd1 	bl	8000b58 <__aeabi_d2iz>
 8009fb6:	2200      	movs	r2, #0
 8009fb8:	4607      	mov	r7, r0
 8009fba:	2300      	movs	r3, #0
 8009fbc:	4620      	mov	r0, r4
 8009fbe:	4629      	mov	r1, r5
 8009fc0:	f7f6 fd8c 	bl	8000adc <__aeabi_dcmplt>
 8009fc4:	b140      	cbz	r0, 8009fd8 <_dtoa_r+0x168>
 8009fc6:	4638      	mov	r0, r7
 8009fc8:	f7f6 faac 	bl	8000524 <__aeabi_i2d>
 8009fcc:	4622      	mov	r2, r4
 8009fce:	462b      	mov	r3, r5
 8009fd0:	f7f6 fd7a 	bl	8000ac8 <__aeabi_dcmpeq>
 8009fd4:	b900      	cbnz	r0, 8009fd8 <_dtoa_r+0x168>
 8009fd6:	3f01      	subs	r7, #1
 8009fd8:	2f16      	cmp	r7, #22
 8009fda:	d851      	bhi.n	800a080 <_dtoa_r+0x210>
 8009fdc:	4b5b      	ldr	r3, [pc, #364]	@ (800a14c <_dtoa_r+0x2dc>)
 8009fde:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fe6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009fea:	f7f6 fd77 	bl	8000adc <__aeabi_dcmplt>
 8009fee:	2800      	cmp	r0, #0
 8009ff0:	d048      	beq.n	800a084 <_dtoa_r+0x214>
 8009ff2:	3f01      	subs	r7, #1
 8009ff4:	2300      	movs	r3, #0
 8009ff6:	9312      	str	r3, [sp, #72]	@ 0x48
 8009ff8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8009ffa:	1b9b      	subs	r3, r3, r6
 8009ffc:	1e5a      	subs	r2, r3, #1
 8009ffe:	bf44      	itt	mi
 800a000:	f1c3 0801 	rsbmi	r8, r3, #1
 800a004:	2300      	movmi	r3, #0
 800a006:	9208      	str	r2, [sp, #32]
 800a008:	bf54      	ite	pl
 800a00a:	f04f 0800 	movpl.w	r8, #0
 800a00e:	9308      	strmi	r3, [sp, #32]
 800a010:	2f00      	cmp	r7, #0
 800a012:	db39      	blt.n	800a088 <_dtoa_r+0x218>
 800a014:	9b08      	ldr	r3, [sp, #32]
 800a016:	970f      	str	r7, [sp, #60]	@ 0x3c
 800a018:	443b      	add	r3, r7
 800a01a:	9308      	str	r3, [sp, #32]
 800a01c:	2300      	movs	r3, #0
 800a01e:	930a      	str	r3, [sp, #40]	@ 0x28
 800a020:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a022:	2b09      	cmp	r3, #9
 800a024:	d864      	bhi.n	800a0f0 <_dtoa_r+0x280>
 800a026:	2b05      	cmp	r3, #5
 800a028:	bfc4      	itt	gt
 800a02a:	3b04      	subgt	r3, #4
 800a02c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800a02e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a030:	f1a3 0302 	sub.w	r3, r3, #2
 800a034:	bfcc      	ite	gt
 800a036:	2400      	movgt	r4, #0
 800a038:	2401      	movle	r4, #1
 800a03a:	2b03      	cmp	r3, #3
 800a03c:	d863      	bhi.n	800a106 <_dtoa_r+0x296>
 800a03e:	e8df f003 	tbb	[pc, r3]
 800a042:	372a      	.short	0x372a
 800a044:	5535      	.short	0x5535
 800a046:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800a04a:	441e      	add	r6, r3
 800a04c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800a050:	2b20      	cmp	r3, #32
 800a052:	bfc1      	itttt	gt
 800a054:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800a058:	409f      	lslgt	r7, r3
 800a05a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800a05e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800a062:	bfd6      	itet	le
 800a064:	f1c3 0320 	rsble	r3, r3, #32
 800a068:	ea47 0003 	orrgt.w	r0, r7, r3
 800a06c:	fa04 f003 	lslle.w	r0, r4, r3
 800a070:	f7f6 fa48 	bl	8000504 <__aeabi_ui2d>
 800a074:	2201      	movs	r2, #1
 800a076:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800a07a:	3e01      	subs	r6, #1
 800a07c:	9214      	str	r2, [sp, #80]	@ 0x50
 800a07e:	e777      	b.n	8009f70 <_dtoa_r+0x100>
 800a080:	2301      	movs	r3, #1
 800a082:	e7b8      	b.n	8009ff6 <_dtoa_r+0x186>
 800a084:	9012      	str	r0, [sp, #72]	@ 0x48
 800a086:	e7b7      	b.n	8009ff8 <_dtoa_r+0x188>
 800a088:	427b      	negs	r3, r7
 800a08a:	930a      	str	r3, [sp, #40]	@ 0x28
 800a08c:	2300      	movs	r3, #0
 800a08e:	eba8 0807 	sub.w	r8, r8, r7
 800a092:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a094:	e7c4      	b.n	800a020 <_dtoa_r+0x1b0>
 800a096:	2300      	movs	r3, #0
 800a098:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a09a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	dc35      	bgt.n	800a10c <_dtoa_r+0x29c>
 800a0a0:	2301      	movs	r3, #1
 800a0a2:	9300      	str	r3, [sp, #0]
 800a0a4:	9307      	str	r3, [sp, #28]
 800a0a6:	461a      	mov	r2, r3
 800a0a8:	920e      	str	r2, [sp, #56]	@ 0x38
 800a0aa:	e00b      	b.n	800a0c4 <_dtoa_r+0x254>
 800a0ac:	2301      	movs	r3, #1
 800a0ae:	e7f3      	b.n	800a098 <_dtoa_r+0x228>
 800a0b0:	2300      	movs	r3, #0
 800a0b2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a0b4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a0b6:	18fb      	adds	r3, r7, r3
 800a0b8:	9300      	str	r3, [sp, #0]
 800a0ba:	3301      	adds	r3, #1
 800a0bc:	2b01      	cmp	r3, #1
 800a0be:	9307      	str	r3, [sp, #28]
 800a0c0:	bfb8      	it	lt
 800a0c2:	2301      	movlt	r3, #1
 800a0c4:	f8db 001c 	ldr.w	r0, [fp, #28]
 800a0c8:	2100      	movs	r1, #0
 800a0ca:	2204      	movs	r2, #4
 800a0cc:	f102 0514 	add.w	r5, r2, #20
 800a0d0:	429d      	cmp	r5, r3
 800a0d2:	d91f      	bls.n	800a114 <_dtoa_r+0x2a4>
 800a0d4:	6041      	str	r1, [r0, #4]
 800a0d6:	4658      	mov	r0, fp
 800a0d8:	f000 fd8e 	bl	800abf8 <_Balloc>
 800a0dc:	4682      	mov	sl, r0
 800a0de:	2800      	cmp	r0, #0
 800a0e0:	d13c      	bne.n	800a15c <_dtoa_r+0x2ec>
 800a0e2:	4b1b      	ldr	r3, [pc, #108]	@ (800a150 <_dtoa_r+0x2e0>)
 800a0e4:	4602      	mov	r2, r0
 800a0e6:	f240 11af 	movw	r1, #431	@ 0x1af
 800a0ea:	e6d8      	b.n	8009e9e <_dtoa_r+0x2e>
 800a0ec:	2301      	movs	r3, #1
 800a0ee:	e7e0      	b.n	800a0b2 <_dtoa_r+0x242>
 800a0f0:	2401      	movs	r4, #1
 800a0f2:	2300      	movs	r3, #0
 800a0f4:	9309      	str	r3, [sp, #36]	@ 0x24
 800a0f6:	940b      	str	r4, [sp, #44]	@ 0x2c
 800a0f8:	f04f 33ff 	mov.w	r3, #4294967295
 800a0fc:	9300      	str	r3, [sp, #0]
 800a0fe:	9307      	str	r3, [sp, #28]
 800a100:	2200      	movs	r2, #0
 800a102:	2312      	movs	r3, #18
 800a104:	e7d0      	b.n	800a0a8 <_dtoa_r+0x238>
 800a106:	2301      	movs	r3, #1
 800a108:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a10a:	e7f5      	b.n	800a0f8 <_dtoa_r+0x288>
 800a10c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a10e:	9300      	str	r3, [sp, #0]
 800a110:	9307      	str	r3, [sp, #28]
 800a112:	e7d7      	b.n	800a0c4 <_dtoa_r+0x254>
 800a114:	3101      	adds	r1, #1
 800a116:	0052      	lsls	r2, r2, #1
 800a118:	e7d8      	b.n	800a0cc <_dtoa_r+0x25c>
 800a11a:	bf00      	nop
 800a11c:	f3af 8000 	nop.w
 800a120:	636f4361 	.word	0x636f4361
 800a124:	3fd287a7 	.word	0x3fd287a7
 800a128:	8b60c8b3 	.word	0x8b60c8b3
 800a12c:	3fc68a28 	.word	0x3fc68a28
 800a130:	509f79fb 	.word	0x509f79fb
 800a134:	3fd34413 	.word	0x3fd34413
 800a138:	0800e27d 	.word	0x0800e27d
 800a13c:	0800e294 	.word	0x0800e294
 800a140:	7ff00000 	.word	0x7ff00000
 800a144:	0800e24d 	.word	0x0800e24d
 800a148:	3ff80000 	.word	0x3ff80000
 800a14c:	0800e390 	.word	0x0800e390
 800a150:	0800e2ec 	.word	0x0800e2ec
 800a154:	0800e279 	.word	0x0800e279
 800a158:	0800e24c 	.word	0x0800e24c
 800a15c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a160:	6018      	str	r0, [r3, #0]
 800a162:	9b07      	ldr	r3, [sp, #28]
 800a164:	2b0e      	cmp	r3, #14
 800a166:	f200 80a4 	bhi.w	800a2b2 <_dtoa_r+0x442>
 800a16a:	2c00      	cmp	r4, #0
 800a16c:	f000 80a1 	beq.w	800a2b2 <_dtoa_r+0x442>
 800a170:	2f00      	cmp	r7, #0
 800a172:	dd33      	ble.n	800a1dc <_dtoa_r+0x36c>
 800a174:	4bad      	ldr	r3, [pc, #692]	@ (800a42c <_dtoa_r+0x5bc>)
 800a176:	f007 020f 	and.w	r2, r7, #15
 800a17a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a17e:	ed93 7b00 	vldr	d7, [r3]
 800a182:	05f8      	lsls	r0, r7, #23
 800a184:	ed8d 7b04 	vstr	d7, [sp, #16]
 800a188:	ea4f 1427 	mov.w	r4, r7, asr #4
 800a18c:	d516      	bpl.n	800a1bc <_dtoa_r+0x34c>
 800a18e:	4ba8      	ldr	r3, [pc, #672]	@ (800a430 <_dtoa_r+0x5c0>)
 800a190:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a194:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a198:	f7f6 fb58 	bl	800084c <__aeabi_ddiv>
 800a19c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a1a0:	f004 040f 	and.w	r4, r4, #15
 800a1a4:	2603      	movs	r6, #3
 800a1a6:	4da2      	ldr	r5, [pc, #648]	@ (800a430 <_dtoa_r+0x5c0>)
 800a1a8:	b954      	cbnz	r4, 800a1c0 <_dtoa_r+0x350>
 800a1aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a1ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a1b2:	f7f6 fb4b 	bl	800084c <__aeabi_ddiv>
 800a1b6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a1ba:	e028      	b.n	800a20e <_dtoa_r+0x39e>
 800a1bc:	2602      	movs	r6, #2
 800a1be:	e7f2      	b.n	800a1a6 <_dtoa_r+0x336>
 800a1c0:	07e1      	lsls	r1, r4, #31
 800a1c2:	d508      	bpl.n	800a1d6 <_dtoa_r+0x366>
 800a1c4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a1c8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a1cc:	f7f6 fa14 	bl	80005f8 <__aeabi_dmul>
 800a1d0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a1d4:	3601      	adds	r6, #1
 800a1d6:	1064      	asrs	r4, r4, #1
 800a1d8:	3508      	adds	r5, #8
 800a1da:	e7e5      	b.n	800a1a8 <_dtoa_r+0x338>
 800a1dc:	f000 80d2 	beq.w	800a384 <_dtoa_r+0x514>
 800a1e0:	427c      	negs	r4, r7
 800a1e2:	4b92      	ldr	r3, [pc, #584]	@ (800a42c <_dtoa_r+0x5bc>)
 800a1e4:	4d92      	ldr	r5, [pc, #584]	@ (800a430 <_dtoa_r+0x5c0>)
 800a1e6:	f004 020f 	and.w	r2, r4, #15
 800a1ea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a1ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1f2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a1f6:	f7f6 f9ff 	bl	80005f8 <__aeabi_dmul>
 800a1fa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a1fe:	1124      	asrs	r4, r4, #4
 800a200:	2300      	movs	r3, #0
 800a202:	2602      	movs	r6, #2
 800a204:	2c00      	cmp	r4, #0
 800a206:	f040 80b2 	bne.w	800a36e <_dtoa_r+0x4fe>
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d1d3      	bne.n	800a1b6 <_dtoa_r+0x346>
 800a20e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a210:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800a214:	2b00      	cmp	r3, #0
 800a216:	f000 80b7 	beq.w	800a388 <_dtoa_r+0x518>
 800a21a:	4b86      	ldr	r3, [pc, #536]	@ (800a434 <_dtoa_r+0x5c4>)
 800a21c:	2200      	movs	r2, #0
 800a21e:	4620      	mov	r0, r4
 800a220:	4629      	mov	r1, r5
 800a222:	f7f6 fc5b 	bl	8000adc <__aeabi_dcmplt>
 800a226:	2800      	cmp	r0, #0
 800a228:	f000 80ae 	beq.w	800a388 <_dtoa_r+0x518>
 800a22c:	9b07      	ldr	r3, [sp, #28]
 800a22e:	2b00      	cmp	r3, #0
 800a230:	f000 80aa 	beq.w	800a388 <_dtoa_r+0x518>
 800a234:	9b00      	ldr	r3, [sp, #0]
 800a236:	2b00      	cmp	r3, #0
 800a238:	dd37      	ble.n	800a2aa <_dtoa_r+0x43a>
 800a23a:	1e7b      	subs	r3, r7, #1
 800a23c:	9304      	str	r3, [sp, #16]
 800a23e:	4620      	mov	r0, r4
 800a240:	4b7d      	ldr	r3, [pc, #500]	@ (800a438 <_dtoa_r+0x5c8>)
 800a242:	2200      	movs	r2, #0
 800a244:	4629      	mov	r1, r5
 800a246:	f7f6 f9d7 	bl	80005f8 <__aeabi_dmul>
 800a24a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a24e:	9c00      	ldr	r4, [sp, #0]
 800a250:	3601      	adds	r6, #1
 800a252:	4630      	mov	r0, r6
 800a254:	f7f6 f966 	bl	8000524 <__aeabi_i2d>
 800a258:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a25c:	f7f6 f9cc 	bl	80005f8 <__aeabi_dmul>
 800a260:	4b76      	ldr	r3, [pc, #472]	@ (800a43c <_dtoa_r+0x5cc>)
 800a262:	2200      	movs	r2, #0
 800a264:	f7f6 f812 	bl	800028c <__adddf3>
 800a268:	4605      	mov	r5, r0
 800a26a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800a26e:	2c00      	cmp	r4, #0
 800a270:	f040 808d 	bne.w	800a38e <_dtoa_r+0x51e>
 800a274:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a278:	4b71      	ldr	r3, [pc, #452]	@ (800a440 <_dtoa_r+0x5d0>)
 800a27a:	2200      	movs	r2, #0
 800a27c:	f7f6 f804 	bl	8000288 <__aeabi_dsub>
 800a280:	4602      	mov	r2, r0
 800a282:	460b      	mov	r3, r1
 800a284:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a288:	462a      	mov	r2, r5
 800a28a:	4633      	mov	r3, r6
 800a28c:	f7f6 fc44 	bl	8000b18 <__aeabi_dcmpgt>
 800a290:	2800      	cmp	r0, #0
 800a292:	f040 828b 	bne.w	800a7ac <_dtoa_r+0x93c>
 800a296:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a29a:	462a      	mov	r2, r5
 800a29c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800a2a0:	f7f6 fc1c 	bl	8000adc <__aeabi_dcmplt>
 800a2a4:	2800      	cmp	r0, #0
 800a2a6:	f040 8128 	bne.w	800a4fa <_dtoa_r+0x68a>
 800a2aa:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800a2ae:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800a2b2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	f2c0 815a 	blt.w	800a56e <_dtoa_r+0x6fe>
 800a2ba:	2f0e      	cmp	r7, #14
 800a2bc:	f300 8157 	bgt.w	800a56e <_dtoa_r+0x6fe>
 800a2c0:	4b5a      	ldr	r3, [pc, #360]	@ (800a42c <_dtoa_r+0x5bc>)
 800a2c2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a2c6:	ed93 7b00 	vldr	d7, [r3]
 800a2ca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	ed8d 7b00 	vstr	d7, [sp]
 800a2d2:	da03      	bge.n	800a2dc <_dtoa_r+0x46c>
 800a2d4:	9b07      	ldr	r3, [sp, #28]
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	f340 8101 	ble.w	800a4de <_dtoa_r+0x66e>
 800a2dc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800a2e0:	4656      	mov	r6, sl
 800a2e2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a2e6:	4620      	mov	r0, r4
 800a2e8:	4629      	mov	r1, r5
 800a2ea:	f7f6 faaf 	bl	800084c <__aeabi_ddiv>
 800a2ee:	f7f6 fc33 	bl	8000b58 <__aeabi_d2iz>
 800a2f2:	4680      	mov	r8, r0
 800a2f4:	f7f6 f916 	bl	8000524 <__aeabi_i2d>
 800a2f8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a2fc:	f7f6 f97c 	bl	80005f8 <__aeabi_dmul>
 800a300:	4602      	mov	r2, r0
 800a302:	460b      	mov	r3, r1
 800a304:	4620      	mov	r0, r4
 800a306:	4629      	mov	r1, r5
 800a308:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800a30c:	f7f5 ffbc 	bl	8000288 <__aeabi_dsub>
 800a310:	f806 4b01 	strb.w	r4, [r6], #1
 800a314:	9d07      	ldr	r5, [sp, #28]
 800a316:	eba6 040a 	sub.w	r4, r6, sl
 800a31a:	42a5      	cmp	r5, r4
 800a31c:	4602      	mov	r2, r0
 800a31e:	460b      	mov	r3, r1
 800a320:	f040 8117 	bne.w	800a552 <_dtoa_r+0x6e2>
 800a324:	f7f5 ffb2 	bl	800028c <__adddf3>
 800a328:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a32c:	4604      	mov	r4, r0
 800a32e:	460d      	mov	r5, r1
 800a330:	f7f6 fbf2 	bl	8000b18 <__aeabi_dcmpgt>
 800a334:	2800      	cmp	r0, #0
 800a336:	f040 80f9 	bne.w	800a52c <_dtoa_r+0x6bc>
 800a33a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a33e:	4620      	mov	r0, r4
 800a340:	4629      	mov	r1, r5
 800a342:	f7f6 fbc1 	bl	8000ac8 <__aeabi_dcmpeq>
 800a346:	b118      	cbz	r0, 800a350 <_dtoa_r+0x4e0>
 800a348:	f018 0f01 	tst.w	r8, #1
 800a34c:	f040 80ee 	bne.w	800a52c <_dtoa_r+0x6bc>
 800a350:	4649      	mov	r1, r9
 800a352:	4658      	mov	r0, fp
 800a354:	f000 fc90 	bl	800ac78 <_Bfree>
 800a358:	2300      	movs	r3, #0
 800a35a:	7033      	strb	r3, [r6, #0]
 800a35c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a35e:	3701      	adds	r7, #1
 800a360:	601f      	str	r7, [r3, #0]
 800a362:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a364:	2b00      	cmp	r3, #0
 800a366:	f000 831d 	beq.w	800a9a4 <_dtoa_r+0xb34>
 800a36a:	601e      	str	r6, [r3, #0]
 800a36c:	e31a      	b.n	800a9a4 <_dtoa_r+0xb34>
 800a36e:	07e2      	lsls	r2, r4, #31
 800a370:	d505      	bpl.n	800a37e <_dtoa_r+0x50e>
 800a372:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a376:	f7f6 f93f 	bl	80005f8 <__aeabi_dmul>
 800a37a:	3601      	adds	r6, #1
 800a37c:	2301      	movs	r3, #1
 800a37e:	1064      	asrs	r4, r4, #1
 800a380:	3508      	adds	r5, #8
 800a382:	e73f      	b.n	800a204 <_dtoa_r+0x394>
 800a384:	2602      	movs	r6, #2
 800a386:	e742      	b.n	800a20e <_dtoa_r+0x39e>
 800a388:	9c07      	ldr	r4, [sp, #28]
 800a38a:	9704      	str	r7, [sp, #16]
 800a38c:	e761      	b.n	800a252 <_dtoa_r+0x3e2>
 800a38e:	4b27      	ldr	r3, [pc, #156]	@ (800a42c <_dtoa_r+0x5bc>)
 800a390:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a392:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a396:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a39a:	4454      	add	r4, sl
 800a39c:	2900      	cmp	r1, #0
 800a39e:	d053      	beq.n	800a448 <_dtoa_r+0x5d8>
 800a3a0:	4928      	ldr	r1, [pc, #160]	@ (800a444 <_dtoa_r+0x5d4>)
 800a3a2:	2000      	movs	r0, #0
 800a3a4:	f7f6 fa52 	bl	800084c <__aeabi_ddiv>
 800a3a8:	4633      	mov	r3, r6
 800a3aa:	462a      	mov	r2, r5
 800a3ac:	f7f5 ff6c 	bl	8000288 <__aeabi_dsub>
 800a3b0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a3b4:	4656      	mov	r6, sl
 800a3b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a3ba:	f7f6 fbcd 	bl	8000b58 <__aeabi_d2iz>
 800a3be:	4605      	mov	r5, r0
 800a3c0:	f7f6 f8b0 	bl	8000524 <__aeabi_i2d>
 800a3c4:	4602      	mov	r2, r0
 800a3c6:	460b      	mov	r3, r1
 800a3c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a3cc:	f7f5 ff5c 	bl	8000288 <__aeabi_dsub>
 800a3d0:	3530      	adds	r5, #48	@ 0x30
 800a3d2:	4602      	mov	r2, r0
 800a3d4:	460b      	mov	r3, r1
 800a3d6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a3da:	f806 5b01 	strb.w	r5, [r6], #1
 800a3de:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a3e2:	f7f6 fb7b 	bl	8000adc <__aeabi_dcmplt>
 800a3e6:	2800      	cmp	r0, #0
 800a3e8:	d171      	bne.n	800a4ce <_dtoa_r+0x65e>
 800a3ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a3ee:	4911      	ldr	r1, [pc, #68]	@ (800a434 <_dtoa_r+0x5c4>)
 800a3f0:	2000      	movs	r0, #0
 800a3f2:	f7f5 ff49 	bl	8000288 <__aeabi_dsub>
 800a3f6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a3fa:	f7f6 fb6f 	bl	8000adc <__aeabi_dcmplt>
 800a3fe:	2800      	cmp	r0, #0
 800a400:	f040 8095 	bne.w	800a52e <_dtoa_r+0x6be>
 800a404:	42a6      	cmp	r6, r4
 800a406:	f43f af50 	beq.w	800a2aa <_dtoa_r+0x43a>
 800a40a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a40e:	4b0a      	ldr	r3, [pc, #40]	@ (800a438 <_dtoa_r+0x5c8>)
 800a410:	2200      	movs	r2, #0
 800a412:	f7f6 f8f1 	bl	80005f8 <__aeabi_dmul>
 800a416:	4b08      	ldr	r3, [pc, #32]	@ (800a438 <_dtoa_r+0x5c8>)
 800a418:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a41c:	2200      	movs	r2, #0
 800a41e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a422:	f7f6 f8e9 	bl	80005f8 <__aeabi_dmul>
 800a426:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a42a:	e7c4      	b.n	800a3b6 <_dtoa_r+0x546>
 800a42c:	0800e390 	.word	0x0800e390
 800a430:	0800e368 	.word	0x0800e368
 800a434:	3ff00000 	.word	0x3ff00000
 800a438:	40240000 	.word	0x40240000
 800a43c:	401c0000 	.word	0x401c0000
 800a440:	40140000 	.word	0x40140000
 800a444:	3fe00000 	.word	0x3fe00000
 800a448:	4631      	mov	r1, r6
 800a44a:	4628      	mov	r0, r5
 800a44c:	f7f6 f8d4 	bl	80005f8 <__aeabi_dmul>
 800a450:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a454:	9415      	str	r4, [sp, #84]	@ 0x54
 800a456:	4656      	mov	r6, sl
 800a458:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a45c:	f7f6 fb7c 	bl	8000b58 <__aeabi_d2iz>
 800a460:	4605      	mov	r5, r0
 800a462:	f7f6 f85f 	bl	8000524 <__aeabi_i2d>
 800a466:	4602      	mov	r2, r0
 800a468:	460b      	mov	r3, r1
 800a46a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a46e:	f7f5 ff0b 	bl	8000288 <__aeabi_dsub>
 800a472:	3530      	adds	r5, #48	@ 0x30
 800a474:	f806 5b01 	strb.w	r5, [r6], #1
 800a478:	4602      	mov	r2, r0
 800a47a:	460b      	mov	r3, r1
 800a47c:	42a6      	cmp	r6, r4
 800a47e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a482:	f04f 0200 	mov.w	r2, #0
 800a486:	d124      	bne.n	800a4d2 <_dtoa_r+0x662>
 800a488:	4bac      	ldr	r3, [pc, #688]	@ (800a73c <_dtoa_r+0x8cc>)
 800a48a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a48e:	f7f5 fefd 	bl	800028c <__adddf3>
 800a492:	4602      	mov	r2, r0
 800a494:	460b      	mov	r3, r1
 800a496:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a49a:	f7f6 fb3d 	bl	8000b18 <__aeabi_dcmpgt>
 800a49e:	2800      	cmp	r0, #0
 800a4a0:	d145      	bne.n	800a52e <_dtoa_r+0x6be>
 800a4a2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a4a6:	49a5      	ldr	r1, [pc, #660]	@ (800a73c <_dtoa_r+0x8cc>)
 800a4a8:	2000      	movs	r0, #0
 800a4aa:	f7f5 feed 	bl	8000288 <__aeabi_dsub>
 800a4ae:	4602      	mov	r2, r0
 800a4b0:	460b      	mov	r3, r1
 800a4b2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a4b6:	f7f6 fb11 	bl	8000adc <__aeabi_dcmplt>
 800a4ba:	2800      	cmp	r0, #0
 800a4bc:	f43f aef5 	beq.w	800a2aa <_dtoa_r+0x43a>
 800a4c0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800a4c2:	1e73      	subs	r3, r6, #1
 800a4c4:	9315      	str	r3, [sp, #84]	@ 0x54
 800a4c6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a4ca:	2b30      	cmp	r3, #48	@ 0x30
 800a4cc:	d0f8      	beq.n	800a4c0 <_dtoa_r+0x650>
 800a4ce:	9f04      	ldr	r7, [sp, #16]
 800a4d0:	e73e      	b.n	800a350 <_dtoa_r+0x4e0>
 800a4d2:	4b9b      	ldr	r3, [pc, #620]	@ (800a740 <_dtoa_r+0x8d0>)
 800a4d4:	f7f6 f890 	bl	80005f8 <__aeabi_dmul>
 800a4d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a4dc:	e7bc      	b.n	800a458 <_dtoa_r+0x5e8>
 800a4de:	d10c      	bne.n	800a4fa <_dtoa_r+0x68a>
 800a4e0:	4b98      	ldr	r3, [pc, #608]	@ (800a744 <_dtoa_r+0x8d4>)
 800a4e2:	2200      	movs	r2, #0
 800a4e4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a4e8:	f7f6 f886 	bl	80005f8 <__aeabi_dmul>
 800a4ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a4f0:	f7f6 fb08 	bl	8000b04 <__aeabi_dcmpge>
 800a4f4:	2800      	cmp	r0, #0
 800a4f6:	f000 8157 	beq.w	800a7a8 <_dtoa_r+0x938>
 800a4fa:	2400      	movs	r4, #0
 800a4fc:	4625      	mov	r5, r4
 800a4fe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a500:	43db      	mvns	r3, r3
 800a502:	9304      	str	r3, [sp, #16]
 800a504:	4656      	mov	r6, sl
 800a506:	2700      	movs	r7, #0
 800a508:	4621      	mov	r1, r4
 800a50a:	4658      	mov	r0, fp
 800a50c:	f000 fbb4 	bl	800ac78 <_Bfree>
 800a510:	2d00      	cmp	r5, #0
 800a512:	d0dc      	beq.n	800a4ce <_dtoa_r+0x65e>
 800a514:	b12f      	cbz	r7, 800a522 <_dtoa_r+0x6b2>
 800a516:	42af      	cmp	r7, r5
 800a518:	d003      	beq.n	800a522 <_dtoa_r+0x6b2>
 800a51a:	4639      	mov	r1, r7
 800a51c:	4658      	mov	r0, fp
 800a51e:	f000 fbab 	bl	800ac78 <_Bfree>
 800a522:	4629      	mov	r1, r5
 800a524:	4658      	mov	r0, fp
 800a526:	f000 fba7 	bl	800ac78 <_Bfree>
 800a52a:	e7d0      	b.n	800a4ce <_dtoa_r+0x65e>
 800a52c:	9704      	str	r7, [sp, #16]
 800a52e:	4633      	mov	r3, r6
 800a530:	461e      	mov	r6, r3
 800a532:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a536:	2a39      	cmp	r2, #57	@ 0x39
 800a538:	d107      	bne.n	800a54a <_dtoa_r+0x6da>
 800a53a:	459a      	cmp	sl, r3
 800a53c:	d1f8      	bne.n	800a530 <_dtoa_r+0x6c0>
 800a53e:	9a04      	ldr	r2, [sp, #16]
 800a540:	3201      	adds	r2, #1
 800a542:	9204      	str	r2, [sp, #16]
 800a544:	2230      	movs	r2, #48	@ 0x30
 800a546:	f88a 2000 	strb.w	r2, [sl]
 800a54a:	781a      	ldrb	r2, [r3, #0]
 800a54c:	3201      	adds	r2, #1
 800a54e:	701a      	strb	r2, [r3, #0]
 800a550:	e7bd      	b.n	800a4ce <_dtoa_r+0x65e>
 800a552:	4b7b      	ldr	r3, [pc, #492]	@ (800a740 <_dtoa_r+0x8d0>)
 800a554:	2200      	movs	r2, #0
 800a556:	f7f6 f84f 	bl	80005f8 <__aeabi_dmul>
 800a55a:	2200      	movs	r2, #0
 800a55c:	2300      	movs	r3, #0
 800a55e:	4604      	mov	r4, r0
 800a560:	460d      	mov	r5, r1
 800a562:	f7f6 fab1 	bl	8000ac8 <__aeabi_dcmpeq>
 800a566:	2800      	cmp	r0, #0
 800a568:	f43f aebb 	beq.w	800a2e2 <_dtoa_r+0x472>
 800a56c:	e6f0      	b.n	800a350 <_dtoa_r+0x4e0>
 800a56e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800a570:	2a00      	cmp	r2, #0
 800a572:	f000 80db 	beq.w	800a72c <_dtoa_r+0x8bc>
 800a576:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a578:	2a01      	cmp	r2, #1
 800a57a:	f300 80bf 	bgt.w	800a6fc <_dtoa_r+0x88c>
 800a57e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800a580:	2a00      	cmp	r2, #0
 800a582:	f000 80b7 	beq.w	800a6f4 <_dtoa_r+0x884>
 800a586:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800a58a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a58c:	4646      	mov	r6, r8
 800a58e:	9a08      	ldr	r2, [sp, #32]
 800a590:	2101      	movs	r1, #1
 800a592:	441a      	add	r2, r3
 800a594:	4658      	mov	r0, fp
 800a596:	4498      	add	r8, r3
 800a598:	9208      	str	r2, [sp, #32]
 800a59a:	f000 fc21 	bl	800ade0 <__i2b>
 800a59e:	4605      	mov	r5, r0
 800a5a0:	b15e      	cbz	r6, 800a5ba <_dtoa_r+0x74a>
 800a5a2:	9b08      	ldr	r3, [sp, #32]
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	dd08      	ble.n	800a5ba <_dtoa_r+0x74a>
 800a5a8:	42b3      	cmp	r3, r6
 800a5aa:	9a08      	ldr	r2, [sp, #32]
 800a5ac:	bfa8      	it	ge
 800a5ae:	4633      	movge	r3, r6
 800a5b0:	eba8 0803 	sub.w	r8, r8, r3
 800a5b4:	1af6      	subs	r6, r6, r3
 800a5b6:	1ad3      	subs	r3, r2, r3
 800a5b8:	9308      	str	r3, [sp, #32]
 800a5ba:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a5bc:	b1f3      	cbz	r3, 800a5fc <_dtoa_r+0x78c>
 800a5be:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	f000 80b7 	beq.w	800a734 <_dtoa_r+0x8c4>
 800a5c6:	b18c      	cbz	r4, 800a5ec <_dtoa_r+0x77c>
 800a5c8:	4629      	mov	r1, r5
 800a5ca:	4622      	mov	r2, r4
 800a5cc:	4658      	mov	r0, fp
 800a5ce:	f000 fcc7 	bl	800af60 <__pow5mult>
 800a5d2:	464a      	mov	r2, r9
 800a5d4:	4601      	mov	r1, r0
 800a5d6:	4605      	mov	r5, r0
 800a5d8:	4658      	mov	r0, fp
 800a5da:	f000 fc17 	bl	800ae0c <__multiply>
 800a5de:	4649      	mov	r1, r9
 800a5e0:	9004      	str	r0, [sp, #16]
 800a5e2:	4658      	mov	r0, fp
 800a5e4:	f000 fb48 	bl	800ac78 <_Bfree>
 800a5e8:	9b04      	ldr	r3, [sp, #16]
 800a5ea:	4699      	mov	r9, r3
 800a5ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a5ee:	1b1a      	subs	r2, r3, r4
 800a5f0:	d004      	beq.n	800a5fc <_dtoa_r+0x78c>
 800a5f2:	4649      	mov	r1, r9
 800a5f4:	4658      	mov	r0, fp
 800a5f6:	f000 fcb3 	bl	800af60 <__pow5mult>
 800a5fa:	4681      	mov	r9, r0
 800a5fc:	2101      	movs	r1, #1
 800a5fe:	4658      	mov	r0, fp
 800a600:	f000 fbee 	bl	800ade0 <__i2b>
 800a604:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a606:	4604      	mov	r4, r0
 800a608:	2b00      	cmp	r3, #0
 800a60a:	f000 81cf 	beq.w	800a9ac <_dtoa_r+0xb3c>
 800a60e:	461a      	mov	r2, r3
 800a610:	4601      	mov	r1, r0
 800a612:	4658      	mov	r0, fp
 800a614:	f000 fca4 	bl	800af60 <__pow5mult>
 800a618:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a61a:	2b01      	cmp	r3, #1
 800a61c:	4604      	mov	r4, r0
 800a61e:	f300 8095 	bgt.w	800a74c <_dtoa_r+0x8dc>
 800a622:	9b02      	ldr	r3, [sp, #8]
 800a624:	2b00      	cmp	r3, #0
 800a626:	f040 8087 	bne.w	800a738 <_dtoa_r+0x8c8>
 800a62a:	9b03      	ldr	r3, [sp, #12]
 800a62c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a630:	2b00      	cmp	r3, #0
 800a632:	f040 8089 	bne.w	800a748 <_dtoa_r+0x8d8>
 800a636:	9b03      	ldr	r3, [sp, #12]
 800a638:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a63c:	0d1b      	lsrs	r3, r3, #20
 800a63e:	051b      	lsls	r3, r3, #20
 800a640:	b12b      	cbz	r3, 800a64e <_dtoa_r+0x7de>
 800a642:	9b08      	ldr	r3, [sp, #32]
 800a644:	3301      	adds	r3, #1
 800a646:	9308      	str	r3, [sp, #32]
 800a648:	f108 0801 	add.w	r8, r8, #1
 800a64c:	2301      	movs	r3, #1
 800a64e:	930a      	str	r3, [sp, #40]	@ 0x28
 800a650:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a652:	2b00      	cmp	r3, #0
 800a654:	f000 81b0 	beq.w	800a9b8 <_dtoa_r+0xb48>
 800a658:	6923      	ldr	r3, [r4, #16]
 800a65a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a65e:	6918      	ldr	r0, [r3, #16]
 800a660:	f000 fb72 	bl	800ad48 <__hi0bits>
 800a664:	f1c0 0020 	rsb	r0, r0, #32
 800a668:	9b08      	ldr	r3, [sp, #32]
 800a66a:	4418      	add	r0, r3
 800a66c:	f010 001f 	ands.w	r0, r0, #31
 800a670:	d077      	beq.n	800a762 <_dtoa_r+0x8f2>
 800a672:	f1c0 0320 	rsb	r3, r0, #32
 800a676:	2b04      	cmp	r3, #4
 800a678:	dd6b      	ble.n	800a752 <_dtoa_r+0x8e2>
 800a67a:	9b08      	ldr	r3, [sp, #32]
 800a67c:	f1c0 001c 	rsb	r0, r0, #28
 800a680:	4403      	add	r3, r0
 800a682:	4480      	add	r8, r0
 800a684:	4406      	add	r6, r0
 800a686:	9308      	str	r3, [sp, #32]
 800a688:	f1b8 0f00 	cmp.w	r8, #0
 800a68c:	dd05      	ble.n	800a69a <_dtoa_r+0x82a>
 800a68e:	4649      	mov	r1, r9
 800a690:	4642      	mov	r2, r8
 800a692:	4658      	mov	r0, fp
 800a694:	f000 fcbe 	bl	800b014 <__lshift>
 800a698:	4681      	mov	r9, r0
 800a69a:	9b08      	ldr	r3, [sp, #32]
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	dd05      	ble.n	800a6ac <_dtoa_r+0x83c>
 800a6a0:	4621      	mov	r1, r4
 800a6a2:	461a      	mov	r2, r3
 800a6a4:	4658      	mov	r0, fp
 800a6a6:	f000 fcb5 	bl	800b014 <__lshift>
 800a6aa:	4604      	mov	r4, r0
 800a6ac:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d059      	beq.n	800a766 <_dtoa_r+0x8f6>
 800a6b2:	4621      	mov	r1, r4
 800a6b4:	4648      	mov	r0, r9
 800a6b6:	f000 fd19 	bl	800b0ec <__mcmp>
 800a6ba:	2800      	cmp	r0, #0
 800a6bc:	da53      	bge.n	800a766 <_dtoa_r+0x8f6>
 800a6be:	1e7b      	subs	r3, r7, #1
 800a6c0:	9304      	str	r3, [sp, #16]
 800a6c2:	4649      	mov	r1, r9
 800a6c4:	2300      	movs	r3, #0
 800a6c6:	220a      	movs	r2, #10
 800a6c8:	4658      	mov	r0, fp
 800a6ca:	f000 faf7 	bl	800acbc <__multadd>
 800a6ce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a6d0:	4681      	mov	r9, r0
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	f000 8172 	beq.w	800a9bc <_dtoa_r+0xb4c>
 800a6d8:	2300      	movs	r3, #0
 800a6da:	4629      	mov	r1, r5
 800a6dc:	220a      	movs	r2, #10
 800a6de:	4658      	mov	r0, fp
 800a6e0:	f000 faec 	bl	800acbc <__multadd>
 800a6e4:	9b00      	ldr	r3, [sp, #0]
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	4605      	mov	r5, r0
 800a6ea:	dc67      	bgt.n	800a7bc <_dtoa_r+0x94c>
 800a6ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a6ee:	2b02      	cmp	r3, #2
 800a6f0:	dc41      	bgt.n	800a776 <_dtoa_r+0x906>
 800a6f2:	e063      	b.n	800a7bc <_dtoa_r+0x94c>
 800a6f4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800a6f6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800a6fa:	e746      	b.n	800a58a <_dtoa_r+0x71a>
 800a6fc:	9b07      	ldr	r3, [sp, #28]
 800a6fe:	1e5c      	subs	r4, r3, #1
 800a700:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a702:	42a3      	cmp	r3, r4
 800a704:	bfbf      	itttt	lt
 800a706:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800a708:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800a70a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800a70c:	1ae3      	sublt	r3, r4, r3
 800a70e:	bfb4      	ite	lt
 800a710:	18d2      	addlt	r2, r2, r3
 800a712:	1b1c      	subge	r4, r3, r4
 800a714:	9b07      	ldr	r3, [sp, #28]
 800a716:	bfbc      	itt	lt
 800a718:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800a71a:	2400      	movlt	r4, #0
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	bfb5      	itete	lt
 800a720:	eba8 0603 	sublt.w	r6, r8, r3
 800a724:	9b07      	ldrge	r3, [sp, #28]
 800a726:	2300      	movlt	r3, #0
 800a728:	4646      	movge	r6, r8
 800a72a:	e730      	b.n	800a58e <_dtoa_r+0x71e>
 800a72c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a72e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800a730:	4646      	mov	r6, r8
 800a732:	e735      	b.n	800a5a0 <_dtoa_r+0x730>
 800a734:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a736:	e75c      	b.n	800a5f2 <_dtoa_r+0x782>
 800a738:	2300      	movs	r3, #0
 800a73a:	e788      	b.n	800a64e <_dtoa_r+0x7de>
 800a73c:	3fe00000 	.word	0x3fe00000
 800a740:	40240000 	.word	0x40240000
 800a744:	40140000 	.word	0x40140000
 800a748:	9b02      	ldr	r3, [sp, #8]
 800a74a:	e780      	b.n	800a64e <_dtoa_r+0x7de>
 800a74c:	2300      	movs	r3, #0
 800a74e:	930a      	str	r3, [sp, #40]	@ 0x28
 800a750:	e782      	b.n	800a658 <_dtoa_r+0x7e8>
 800a752:	d099      	beq.n	800a688 <_dtoa_r+0x818>
 800a754:	9a08      	ldr	r2, [sp, #32]
 800a756:	331c      	adds	r3, #28
 800a758:	441a      	add	r2, r3
 800a75a:	4498      	add	r8, r3
 800a75c:	441e      	add	r6, r3
 800a75e:	9208      	str	r2, [sp, #32]
 800a760:	e792      	b.n	800a688 <_dtoa_r+0x818>
 800a762:	4603      	mov	r3, r0
 800a764:	e7f6      	b.n	800a754 <_dtoa_r+0x8e4>
 800a766:	9b07      	ldr	r3, [sp, #28]
 800a768:	9704      	str	r7, [sp, #16]
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	dc20      	bgt.n	800a7b0 <_dtoa_r+0x940>
 800a76e:	9300      	str	r3, [sp, #0]
 800a770:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a772:	2b02      	cmp	r3, #2
 800a774:	dd1e      	ble.n	800a7b4 <_dtoa_r+0x944>
 800a776:	9b00      	ldr	r3, [sp, #0]
 800a778:	2b00      	cmp	r3, #0
 800a77a:	f47f aec0 	bne.w	800a4fe <_dtoa_r+0x68e>
 800a77e:	4621      	mov	r1, r4
 800a780:	2205      	movs	r2, #5
 800a782:	4658      	mov	r0, fp
 800a784:	f000 fa9a 	bl	800acbc <__multadd>
 800a788:	4601      	mov	r1, r0
 800a78a:	4604      	mov	r4, r0
 800a78c:	4648      	mov	r0, r9
 800a78e:	f000 fcad 	bl	800b0ec <__mcmp>
 800a792:	2800      	cmp	r0, #0
 800a794:	f77f aeb3 	ble.w	800a4fe <_dtoa_r+0x68e>
 800a798:	4656      	mov	r6, sl
 800a79a:	2331      	movs	r3, #49	@ 0x31
 800a79c:	f806 3b01 	strb.w	r3, [r6], #1
 800a7a0:	9b04      	ldr	r3, [sp, #16]
 800a7a2:	3301      	adds	r3, #1
 800a7a4:	9304      	str	r3, [sp, #16]
 800a7a6:	e6ae      	b.n	800a506 <_dtoa_r+0x696>
 800a7a8:	9c07      	ldr	r4, [sp, #28]
 800a7aa:	9704      	str	r7, [sp, #16]
 800a7ac:	4625      	mov	r5, r4
 800a7ae:	e7f3      	b.n	800a798 <_dtoa_r+0x928>
 800a7b0:	9b07      	ldr	r3, [sp, #28]
 800a7b2:	9300      	str	r3, [sp, #0]
 800a7b4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	f000 8104 	beq.w	800a9c4 <_dtoa_r+0xb54>
 800a7bc:	2e00      	cmp	r6, #0
 800a7be:	dd05      	ble.n	800a7cc <_dtoa_r+0x95c>
 800a7c0:	4629      	mov	r1, r5
 800a7c2:	4632      	mov	r2, r6
 800a7c4:	4658      	mov	r0, fp
 800a7c6:	f000 fc25 	bl	800b014 <__lshift>
 800a7ca:	4605      	mov	r5, r0
 800a7cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d05a      	beq.n	800a888 <_dtoa_r+0xa18>
 800a7d2:	6869      	ldr	r1, [r5, #4]
 800a7d4:	4658      	mov	r0, fp
 800a7d6:	f000 fa0f 	bl	800abf8 <_Balloc>
 800a7da:	4606      	mov	r6, r0
 800a7dc:	b928      	cbnz	r0, 800a7ea <_dtoa_r+0x97a>
 800a7de:	4b84      	ldr	r3, [pc, #528]	@ (800a9f0 <_dtoa_r+0xb80>)
 800a7e0:	4602      	mov	r2, r0
 800a7e2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800a7e6:	f7ff bb5a 	b.w	8009e9e <_dtoa_r+0x2e>
 800a7ea:	692a      	ldr	r2, [r5, #16]
 800a7ec:	3202      	adds	r2, #2
 800a7ee:	0092      	lsls	r2, r2, #2
 800a7f0:	f105 010c 	add.w	r1, r5, #12
 800a7f4:	300c      	adds	r0, #12
 800a7f6:	f7ff faa2 	bl	8009d3e <memcpy>
 800a7fa:	2201      	movs	r2, #1
 800a7fc:	4631      	mov	r1, r6
 800a7fe:	4658      	mov	r0, fp
 800a800:	f000 fc08 	bl	800b014 <__lshift>
 800a804:	f10a 0301 	add.w	r3, sl, #1
 800a808:	9307      	str	r3, [sp, #28]
 800a80a:	9b00      	ldr	r3, [sp, #0]
 800a80c:	4453      	add	r3, sl
 800a80e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a810:	9b02      	ldr	r3, [sp, #8]
 800a812:	f003 0301 	and.w	r3, r3, #1
 800a816:	462f      	mov	r7, r5
 800a818:	930a      	str	r3, [sp, #40]	@ 0x28
 800a81a:	4605      	mov	r5, r0
 800a81c:	9b07      	ldr	r3, [sp, #28]
 800a81e:	4621      	mov	r1, r4
 800a820:	3b01      	subs	r3, #1
 800a822:	4648      	mov	r0, r9
 800a824:	9300      	str	r3, [sp, #0]
 800a826:	f7ff fa98 	bl	8009d5a <quorem>
 800a82a:	4639      	mov	r1, r7
 800a82c:	9002      	str	r0, [sp, #8]
 800a82e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a832:	4648      	mov	r0, r9
 800a834:	f000 fc5a 	bl	800b0ec <__mcmp>
 800a838:	462a      	mov	r2, r5
 800a83a:	9008      	str	r0, [sp, #32]
 800a83c:	4621      	mov	r1, r4
 800a83e:	4658      	mov	r0, fp
 800a840:	f000 fc70 	bl	800b124 <__mdiff>
 800a844:	68c2      	ldr	r2, [r0, #12]
 800a846:	4606      	mov	r6, r0
 800a848:	bb02      	cbnz	r2, 800a88c <_dtoa_r+0xa1c>
 800a84a:	4601      	mov	r1, r0
 800a84c:	4648      	mov	r0, r9
 800a84e:	f000 fc4d 	bl	800b0ec <__mcmp>
 800a852:	4602      	mov	r2, r0
 800a854:	4631      	mov	r1, r6
 800a856:	4658      	mov	r0, fp
 800a858:	920e      	str	r2, [sp, #56]	@ 0x38
 800a85a:	f000 fa0d 	bl	800ac78 <_Bfree>
 800a85e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a860:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a862:	9e07      	ldr	r6, [sp, #28]
 800a864:	ea43 0102 	orr.w	r1, r3, r2
 800a868:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a86a:	4319      	orrs	r1, r3
 800a86c:	d110      	bne.n	800a890 <_dtoa_r+0xa20>
 800a86e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a872:	d029      	beq.n	800a8c8 <_dtoa_r+0xa58>
 800a874:	9b08      	ldr	r3, [sp, #32]
 800a876:	2b00      	cmp	r3, #0
 800a878:	dd02      	ble.n	800a880 <_dtoa_r+0xa10>
 800a87a:	9b02      	ldr	r3, [sp, #8]
 800a87c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800a880:	9b00      	ldr	r3, [sp, #0]
 800a882:	f883 8000 	strb.w	r8, [r3]
 800a886:	e63f      	b.n	800a508 <_dtoa_r+0x698>
 800a888:	4628      	mov	r0, r5
 800a88a:	e7bb      	b.n	800a804 <_dtoa_r+0x994>
 800a88c:	2201      	movs	r2, #1
 800a88e:	e7e1      	b.n	800a854 <_dtoa_r+0x9e4>
 800a890:	9b08      	ldr	r3, [sp, #32]
 800a892:	2b00      	cmp	r3, #0
 800a894:	db04      	blt.n	800a8a0 <_dtoa_r+0xa30>
 800a896:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a898:	430b      	orrs	r3, r1
 800a89a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a89c:	430b      	orrs	r3, r1
 800a89e:	d120      	bne.n	800a8e2 <_dtoa_r+0xa72>
 800a8a0:	2a00      	cmp	r2, #0
 800a8a2:	dded      	ble.n	800a880 <_dtoa_r+0xa10>
 800a8a4:	4649      	mov	r1, r9
 800a8a6:	2201      	movs	r2, #1
 800a8a8:	4658      	mov	r0, fp
 800a8aa:	f000 fbb3 	bl	800b014 <__lshift>
 800a8ae:	4621      	mov	r1, r4
 800a8b0:	4681      	mov	r9, r0
 800a8b2:	f000 fc1b 	bl	800b0ec <__mcmp>
 800a8b6:	2800      	cmp	r0, #0
 800a8b8:	dc03      	bgt.n	800a8c2 <_dtoa_r+0xa52>
 800a8ba:	d1e1      	bne.n	800a880 <_dtoa_r+0xa10>
 800a8bc:	f018 0f01 	tst.w	r8, #1
 800a8c0:	d0de      	beq.n	800a880 <_dtoa_r+0xa10>
 800a8c2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a8c6:	d1d8      	bne.n	800a87a <_dtoa_r+0xa0a>
 800a8c8:	9a00      	ldr	r2, [sp, #0]
 800a8ca:	2339      	movs	r3, #57	@ 0x39
 800a8cc:	7013      	strb	r3, [r2, #0]
 800a8ce:	4633      	mov	r3, r6
 800a8d0:	461e      	mov	r6, r3
 800a8d2:	3b01      	subs	r3, #1
 800a8d4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800a8d8:	2a39      	cmp	r2, #57	@ 0x39
 800a8da:	d052      	beq.n	800a982 <_dtoa_r+0xb12>
 800a8dc:	3201      	adds	r2, #1
 800a8de:	701a      	strb	r2, [r3, #0]
 800a8e0:	e612      	b.n	800a508 <_dtoa_r+0x698>
 800a8e2:	2a00      	cmp	r2, #0
 800a8e4:	dd07      	ble.n	800a8f6 <_dtoa_r+0xa86>
 800a8e6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a8ea:	d0ed      	beq.n	800a8c8 <_dtoa_r+0xa58>
 800a8ec:	9a00      	ldr	r2, [sp, #0]
 800a8ee:	f108 0301 	add.w	r3, r8, #1
 800a8f2:	7013      	strb	r3, [r2, #0]
 800a8f4:	e608      	b.n	800a508 <_dtoa_r+0x698>
 800a8f6:	9b07      	ldr	r3, [sp, #28]
 800a8f8:	9a07      	ldr	r2, [sp, #28]
 800a8fa:	f803 8c01 	strb.w	r8, [r3, #-1]
 800a8fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a900:	4293      	cmp	r3, r2
 800a902:	d028      	beq.n	800a956 <_dtoa_r+0xae6>
 800a904:	4649      	mov	r1, r9
 800a906:	2300      	movs	r3, #0
 800a908:	220a      	movs	r2, #10
 800a90a:	4658      	mov	r0, fp
 800a90c:	f000 f9d6 	bl	800acbc <__multadd>
 800a910:	42af      	cmp	r7, r5
 800a912:	4681      	mov	r9, r0
 800a914:	f04f 0300 	mov.w	r3, #0
 800a918:	f04f 020a 	mov.w	r2, #10
 800a91c:	4639      	mov	r1, r7
 800a91e:	4658      	mov	r0, fp
 800a920:	d107      	bne.n	800a932 <_dtoa_r+0xac2>
 800a922:	f000 f9cb 	bl	800acbc <__multadd>
 800a926:	4607      	mov	r7, r0
 800a928:	4605      	mov	r5, r0
 800a92a:	9b07      	ldr	r3, [sp, #28]
 800a92c:	3301      	adds	r3, #1
 800a92e:	9307      	str	r3, [sp, #28]
 800a930:	e774      	b.n	800a81c <_dtoa_r+0x9ac>
 800a932:	f000 f9c3 	bl	800acbc <__multadd>
 800a936:	4629      	mov	r1, r5
 800a938:	4607      	mov	r7, r0
 800a93a:	2300      	movs	r3, #0
 800a93c:	220a      	movs	r2, #10
 800a93e:	4658      	mov	r0, fp
 800a940:	f000 f9bc 	bl	800acbc <__multadd>
 800a944:	4605      	mov	r5, r0
 800a946:	e7f0      	b.n	800a92a <_dtoa_r+0xaba>
 800a948:	9b00      	ldr	r3, [sp, #0]
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	bfcc      	ite	gt
 800a94e:	461e      	movgt	r6, r3
 800a950:	2601      	movle	r6, #1
 800a952:	4456      	add	r6, sl
 800a954:	2700      	movs	r7, #0
 800a956:	4649      	mov	r1, r9
 800a958:	2201      	movs	r2, #1
 800a95a:	4658      	mov	r0, fp
 800a95c:	f000 fb5a 	bl	800b014 <__lshift>
 800a960:	4621      	mov	r1, r4
 800a962:	4681      	mov	r9, r0
 800a964:	f000 fbc2 	bl	800b0ec <__mcmp>
 800a968:	2800      	cmp	r0, #0
 800a96a:	dcb0      	bgt.n	800a8ce <_dtoa_r+0xa5e>
 800a96c:	d102      	bne.n	800a974 <_dtoa_r+0xb04>
 800a96e:	f018 0f01 	tst.w	r8, #1
 800a972:	d1ac      	bne.n	800a8ce <_dtoa_r+0xa5e>
 800a974:	4633      	mov	r3, r6
 800a976:	461e      	mov	r6, r3
 800a978:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a97c:	2a30      	cmp	r2, #48	@ 0x30
 800a97e:	d0fa      	beq.n	800a976 <_dtoa_r+0xb06>
 800a980:	e5c2      	b.n	800a508 <_dtoa_r+0x698>
 800a982:	459a      	cmp	sl, r3
 800a984:	d1a4      	bne.n	800a8d0 <_dtoa_r+0xa60>
 800a986:	9b04      	ldr	r3, [sp, #16]
 800a988:	3301      	adds	r3, #1
 800a98a:	9304      	str	r3, [sp, #16]
 800a98c:	2331      	movs	r3, #49	@ 0x31
 800a98e:	f88a 3000 	strb.w	r3, [sl]
 800a992:	e5b9      	b.n	800a508 <_dtoa_r+0x698>
 800a994:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a996:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800a9f4 <_dtoa_r+0xb84>
 800a99a:	b11b      	cbz	r3, 800a9a4 <_dtoa_r+0xb34>
 800a99c:	f10a 0308 	add.w	r3, sl, #8
 800a9a0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800a9a2:	6013      	str	r3, [r2, #0]
 800a9a4:	4650      	mov	r0, sl
 800a9a6:	b019      	add	sp, #100	@ 0x64
 800a9a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a9ae:	2b01      	cmp	r3, #1
 800a9b0:	f77f ae37 	ble.w	800a622 <_dtoa_r+0x7b2>
 800a9b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a9b6:	930a      	str	r3, [sp, #40]	@ 0x28
 800a9b8:	2001      	movs	r0, #1
 800a9ba:	e655      	b.n	800a668 <_dtoa_r+0x7f8>
 800a9bc:	9b00      	ldr	r3, [sp, #0]
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	f77f aed6 	ble.w	800a770 <_dtoa_r+0x900>
 800a9c4:	4656      	mov	r6, sl
 800a9c6:	4621      	mov	r1, r4
 800a9c8:	4648      	mov	r0, r9
 800a9ca:	f7ff f9c6 	bl	8009d5a <quorem>
 800a9ce:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a9d2:	f806 8b01 	strb.w	r8, [r6], #1
 800a9d6:	9b00      	ldr	r3, [sp, #0]
 800a9d8:	eba6 020a 	sub.w	r2, r6, sl
 800a9dc:	4293      	cmp	r3, r2
 800a9de:	ddb3      	ble.n	800a948 <_dtoa_r+0xad8>
 800a9e0:	4649      	mov	r1, r9
 800a9e2:	2300      	movs	r3, #0
 800a9e4:	220a      	movs	r2, #10
 800a9e6:	4658      	mov	r0, fp
 800a9e8:	f000 f968 	bl	800acbc <__multadd>
 800a9ec:	4681      	mov	r9, r0
 800a9ee:	e7ea      	b.n	800a9c6 <_dtoa_r+0xb56>
 800a9f0:	0800e2ec 	.word	0x0800e2ec
 800a9f4:	0800e270 	.word	0x0800e270

0800a9f8 <_free_r>:
 800a9f8:	b538      	push	{r3, r4, r5, lr}
 800a9fa:	4605      	mov	r5, r0
 800a9fc:	2900      	cmp	r1, #0
 800a9fe:	d041      	beq.n	800aa84 <_free_r+0x8c>
 800aa00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aa04:	1f0c      	subs	r4, r1, #4
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	bfb8      	it	lt
 800aa0a:	18e4      	addlt	r4, r4, r3
 800aa0c:	f000 f8e8 	bl	800abe0 <__malloc_lock>
 800aa10:	4a1d      	ldr	r2, [pc, #116]	@ (800aa88 <_free_r+0x90>)
 800aa12:	6813      	ldr	r3, [r2, #0]
 800aa14:	b933      	cbnz	r3, 800aa24 <_free_r+0x2c>
 800aa16:	6063      	str	r3, [r4, #4]
 800aa18:	6014      	str	r4, [r2, #0]
 800aa1a:	4628      	mov	r0, r5
 800aa1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800aa20:	f000 b8e4 	b.w	800abec <__malloc_unlock>
 800aa24:	42a3      	cmp	r3, r4
 800aa26:	d908      	bls.n	800aa3a <_free_r+0x42>
 800aa28:	6820      	ldr	r0, [r4, #0]
 800aa2a:	1821      	adds	r1, r4, r0
 800aa2c:	428b      	cmp	r3, r1
 800aa2e:	bf01      	itttt	eq
 800aa30:	6819      	ldreq	r1, [r3, #0]
 800aa32:	685b      	ldreq	r3, [r3, #4]
 800aa34:	1809      	addeq	r1, r1, r0
 800aa36:	6021      	streq	r1, [r4, #0]
 800aa38:	e7ed      	b.n	800aa16 <_free_r+0x1e>
 800aa3a:	461a      	mov	r2, r3
 800aa3c:	685b      	ldr	r3, [r3, #4]
 800aa3e:	b10b      	cbz	r3, 800aa44 <_free_r+0x4c>
 800aa40:	42a3      	cmp	r3, r4
 800aa42:	d9fa      	bls.n	800aa3a <_free_r+0x42>
 800aa44:	6811      	ldr	r1, [r2, #0]
 800aa46:	1850      	adds	r0, r2, r1
 800aa48:	42a0      	cmp	r0, r4
 800aa4a:	d10b      	bne.n	800aa64 <_free_r+0x6c>
 800aa4c:	6820      	ldr	r0, [r4, #0]
 800aa4e:	4401      	add	r1, r0
 800aa50:	1850      	adds	r0, r2, r1
 800aa52:	4283      	cmp	r3, r0
 800aa54:	6011      	str	r1, [r2, #0]
 800aa56:	d1e0      	bne.n	800aa1a <_free_r+0x22>
 800aa58:	6818      	ldr	r0, [r3, #0]
 800aa5a:	685b      	ldr	r3, [r3, #4]
 800aa5c:	6053      	str	r3, [r2, #4]
 800aa5e:	4408      	add	r0, r1
 800aa60:	6010      	str	r0, [r2, #0]
 800aa62:	e7da      	b.n	800aa1a <_free_r+0x22>
 800aa64:	d902      	bls.n	800aa6c <_free_r+0x74>
 800aa66:	230c      	movs	r3, #12
 800aa68:	602b      	str	r3, [r5, #0]
 800aa6a:	e7d6      	b.n	800aa1a <_free_r+0x22>
 800aa6c:	6820      	ldr	r0, [r4, #0]
 800aa6e:	1821      	adds	r1, r4, r0
 800aa70:	428b      	cmp	r3, r1
 800aa72:	bf04      	itt	eq
 800aa74:	6819      	ldreq	r1, [r3, #0]
 800aa76:	685b      	ldreq	r3, [r3, #4]
 800aa78:	6063      	str	r3, [r4, #4]
 800aa7a:	bf04      	itt	eq
 800aa7c:	1809      	addeq	r1, r1, r0
 800aa7e:	6021      	streq	r1, [r4, #0]
 800aa80:	6054      	str	r4, [r2, #4]
 800aa82:	e7ca      	b.n	800aa1a <_free_r+0x22>
 800aa84:	bd38      	pop	{r3, r4, r5, pc}
 800aa86:	bf00      	nop
 800aa88:	2000c7ec 	.word	0x2000c7ec

0800aa8c <malloc>:
 800aa8c:	4b02      	ldr	r3, [pc, #8]	@ (800aa98 <malloc+0xc>)
 800aa8e:	4601      	mov	r1, r0
 800aa90:	6818      	ldr	r0, [r3, #0]
 800aa92:	f000 b825 	b.w	800aae0 <_malloc_r>
 800aa96:	bf00      	nop
 800aa98:	20000060 	.word	0x20000060

0800aa9c <sbrk_aligned>:
 800aa9c:	b570      	push	{r4, r5, r6, lr}
 800aa9e:	4e0f      	ldr	r6, [pc, #60]	@ (800aadc <sbrk_aligned+0x40>)
 800aaa0:	460c      	mov	r4, r1
 800aaa2:	6831      	ldr	r1, [r6, #0]
 800aaa4:	4605      	mov	r5, r0
 800aaa6:	b911      	cbnz	r1, 800aaae <sbrk_aligned+0x12>
 800aaa8:	f000 fe2c 	bl	800b704 <_sbrk_r>
 800aaac:	6030      	str	r0, [r6, #0]
 800aaae:	4621      	mov	r1, r4
 800aab0:	4628      	mov	r0, r5
 800aab2:	f000 fe27 	bl	800b704 <_sbrk_r>
 800aab6:	1c43      	adds	r3, r0, #1
 800aab8:	d103      	bne.n	800aac2 <sbrk_aligned+0x26>
 800aaba:	f04f 34ff 	mov.w	r4, #4294967295
 800aabe:	4620      	mov	r0, r4
 800aac0:	bd70      	pop	{r4, r5, r6, pc}
 800aac2:	1cc4      	adds	r4, r0, #3
 800aac4:	f024 0403 	bic.w	r4, r4, #3
 800aac8:	42a0      	cmp	r0, r4
 800aaca:	d0f8      	beq.n	800aabe <sbrk_aligned+0x22>
 800aacc:	1a21      	subs	r1, r4, r0
 800aace:	4628      	mov	r0, r5
 800aad0:	f000 fe18 	bl	800b704 <_sbrk_r>
 800aad4:	3001      	adds	r0, #1
 800aad6:	d1f2      	bne.n	800aabe <sbrk_aligned+0x22>
 800aad8:	e7ef      	b.n	800aaba <sbrk_aligned+0x1e>
 800aada:	bf00      	nop
 800aadc:	2000c7e8 	.word	0x2000c7e8

0800aae0 <_malloc_r>:
 800aae0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aae4:	1ccd      	adds	r5, r1, #3
 800aae6:	f025 0503 	bic.w	r5, r5, #3
 800aaea:	3508      	adds	r5, #8
 800aaec:	2d0c      	cmp	r5, #12
 800aaee:	bf38      	it	cc
 800aaf0:	250c      	movcc	r5, #12
 800aaf2:	2d00      	cmp	r5, #0
 800aaf4:	4606      	mov	r6, r0
 800aaf6:	db01      	blt.n	800aafc <_malloc_r+0x1c>
 800aaf8:	42a9      	cmp	r1, r5
 800aafa:	d904      	bls.n	800ab06 <_malloc_r+0x26>
 800aafc:	230c      	movs	r3, #12
 800aafe:	6033      	str	r3, [r6, #0]
 800ab00:	2000      	movs	r0, #0
 800ab02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ab06:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800abdc <_malloc_r+0xfc>
 800ab0a:	f000 f869 	bl	800abe0 <__malloc_lock>
 800ab0e:	f8d8 3000 	ldr.w	r3, [r8]
 800ab12:	461c      	mov	r4, r3
 800ab14:	bb44      	cbnz	r4, 800ab68 <_malloc_r+0x88>
 800ab16:	4629      	mov	r1, r5
 800ab18:	4630      	mov	r0, r6
 800ab1a:	f7ff ffbf 	bl	800aa9c <sbrk_aligned>
 800ab1e:	1c43      	adds	r3, r0, #1
 800ab20:	4604      	mov	r4, r0
 800ab22:	d158      	bne.n	800abd6 <_malloc_r+0xf6>
 800ab24:	f8d8 4000 	ldr.w	r4, [r8]
 800ab28:	4627      	mov	r7, r4
 800ab2a:	2f00      	cmp	r7, #0
 800ab2c:	d143      	bne.n	800abb6 <_malloc_r+0xd6>
 800ab2e:	2c00      	cmp	r4, #0
 800ab30:	d04b      	beq.n	800abca <_malloc_r+0xea>
 800ab32:	6823      	ldr	r3, [r4, #0]
 800ab34:	4639      	mov	r1, r7
 800ab36:	4630      	mov	r0, r6
 800ab38:	eb04 0903 	add.w	r9, r4, r3
 800ab3c:	f000 fde2 	bl	800b704 <_sbrk_r>
 800ab40:	4581      	cmp	r9, r0
 800ab42:	d142      	bne.n	800abca <_malloc_r+0xea>
 800ab44:	6821      	ldr	r1, [r4, #0]
 800ab46:	1a6d      	subs	r5, r5, r1
 800ab48:	4629      	mov	r1, r5
 800ab4a:	4630      	mov	r0, r6
 800ab4c:	f7ff ffa6 	bl	800aa9c <sbrk_aligned>
 800ab50:	3001      	adds	r0, #1
 800ab52:	d03a      	beq.n	800abca <_malloc_r+0xea>
 800ab54:	6823      	ldr	r3, [r4, #0]
 800ab56:	442b      	add	r3, r5
 800ab58:	6023      	str	r3, [r4, #0]
 800ab5a:	f8d8 3000 	ldr.w	r3, [r8]
 800ab5e:	685a      	ldr	r2, [r3, #4]
 800ab60:	bb62      	cbnz	r2, 800abbc <_malloc_r+0xdc>
 800ab62:	f8c8 7000 	str.w	r7, [r8]
 800ab66:	e00f      	b.n	800ab88 <_malloc_r+0xa8>
 800ab68:	6822      	ldr	r2, [r4, #0]
 800ab6a:	1b52      	subs	r2, r2, r5
 800ab6c:	d420      	bmi.n	800abb0 <_malloc_r+0xd0>
 800ab6e:	2a0b      	cmp	r2, #11
 800ab70:	d917      	bls.n	800aba2 <_malloc_r+0xc2>
 800ab72:	1961      	adds	r1, r4, r5
 800ab74:	42a3      	cmp	r3, r4
 800ab76:	6025      	str	r5, [r4, #0]
 800ab78:	bf18      	it	ne
 800ab7a:	6059      	strne	r1, [r3, #4]
 800ab7c:	6863      	ldr	r3, [r4, #4]
 800ab7e:	bf08      	it	eq
 800ab80:	f8c8 1000 	streq.w	r1, [r8]
 800ab84:	5162      	str	r2, [r4, r5]
 800ab86:	604b      	str	r3, [r1, #4]
 800ab88:	4630      	mov	r0, r6
 800ab8a:	f000 f82f 	bl	800abec <__malloc_unlock>
 800ab8e:	f104 000b 	add.w	r0, r4, #11
 800ab92:	1d23      	adds	r3, r4, #4
 800ab94:	f020 0007 	bic.w	r0, r0, #7
 800ab98:	1ac2      	subs	r2, r0, r3
 800ab9a:	bf1c      	itt	ne
 800ab9c:	1a1b      	subne	r3, r3, r0
 800ab9e:	50a3      	strne	r3, [r4, r2]
 800aba0:	e7af      	b.n	800ab02 <_malloc_r+0x22>
 800aba2:	6862      	ldr	r2, [r4, #4]
 800aba4:	42a3      	cmp	r3, r4
 800aba6:	bf0c      	ite	eq
 800aba8:	f8c8 2000 	streq.w	r2, [r8]
 800abac:	605a      	strne	r2, [r3, #4]
 800abae:	e7eb      	b.n	800ab88 <_malloc_r+0xa8>
 800abb0:	4623      	mov	r3, r4
 800abb2:	6864      	ldr	r4, [r4, #4]
 800abb4:	e7ae      	b.n	800ab14 <_malloc_r+0x34>
 800abb6:	463c      	mov	r4, r7
 800abb8:	687f      	ldr	r7, [r7, #4]
 800abba:	e7b6      	b.n	800ab2a <_malloc_r+0x4a>
 800abbc:	461a      	mov	r2, r3
 800abbe:	685b      	ldr	r3, [r3, #4]
 800abc0:	42a3      	cmp	r3, r4
 800abc2:	d1fb      	bne.n	800abbc <_malloc_r+0xdc>
 800abc4:	2300      	movs	r3, #0
 800abc6:	6053      	str	r3, [r2, #4]
 800abc8:	e7de      	b.n	800ab88 <_malloc_r+0xa8>
 800abca:	230c      	movs	r3, #12
 800abcc:	6033      	str	r3, [r6, #0]
 800abce:	4630      	mov	r0, r6
 800abd0:	f000 f80c 	bl	800abec <__malloc_unlock>
 800abd4:	e794      	b.n	800ab00 <_malloc_r+0x20>
 800abd6:	6005      	str	r5, [r0, #0]
 800abd8:	e7d6      	b.n	800ab88 <_malloc_r+0xa8>
 800abda:	bf00      	nop
 800abdc:	2000c7ec 	.word	0x2000c7ec

0800abe0 <__malloc_lock>:
 800abe0:	4801      	ldr	r0, [pc, #4]	@ (800abe8 <__malloc_lock+0x8>)
 800abe2:	f7ff b8a2 	b.w	8009d2a <__retarget_lock_acquire_recursive>
 800abe6:	bf00      	nop
 800abe8:	2000c7e4 	.word	0x2000c7e4

0800abec <__malloc_unlock>:
 800abec:	4801      	ldr	r0, [pc, #4]	@ (800abf4 <__malloc_unlock+0x8>)
 800abee:	f7ff b89d 	b.w	8009d2c <__retarget_lock_release_recursive>
 800abf2:	bf00      	nop
 800abf4:	2000c7e4 	.word	0x2000c7e4

0800abf8 <_Balloc>:
 800abf8:	b570      	push	{r4, r5, r6, lr}
 800abfa:	69c6      	ldr	r6, [r0, #28]
 800abfc:	4604      	mov	r4, r0
 800abfe:	460d      	mov	r5, r1
 800ac00:	b976      	cbnz	r6, 800ac20 <_Balloc+0x28>
 800ac02:	2010      	movs	r0, #16
 800ac04:	f7ff ff42 	bl	800aa8c <malloc>
 800ac08:	4602      	mov	r2, r0
 800ac0a:	61e0      	str	r0, [r4, #28]
 800ac0c:	b920      	cbnz	r0, 800ac18 <_Balloc+0x20>
 800ac0e:	4b18      	ldr	r3, [pc, #96]	@ (800ac70 <_Balloc+0x78>)
 800ac10:	4818      	ldr	r0, [pc, #96]	@ (800ac74 <_Balloc+0x7c>)
 800ac12:	216b      	movs	r1, #107	@ 0x6b
 800ac14:	f000 fd86 	bl	800b724 <__assert_func>
 800ac18:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ac1c:	6006      	str	r6, [r0, #0]
 800ac1e:	60c6      	str	r6, [r0, #12]
 800ac20:	69e6      	ldr	r6, [r4, #28]
 800ac22:	68f3      	ldr	r3, [r6, #12]
 800ac24:	b183      	cbz	r3, 800ac48 <_Balloc+0x50>
 800ac26:	69e3      	ldr	r3, [r4, #28]
 800ac28:	68db      	ldr	r3, [r3, #12]
 800ac2a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ac2e:	b9b8      	cbnz	r0, 800ac60 <_Balloc+0x68>
 800ac30:	2101      	movs	r1, #1
 800ac32:	fa01 f605 	lsl.w	r6, r1, r5
 800ac36:	1d72      	adds	r2, r6, #5
 800ac38:	0092      	lsls	r2, r2, #2
 800ac3a:	4620      	mov	r0, r4
 800ac3c:	f000 fd90 	bl	800b760 <_calloc_r>
 800ac40:	b160      	cbz	r0, 800ac5c <_Balloc+0x64>
 800ac42:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ac46:	e00e      	b.n	800ac66 <_Balloc+0x6e>
 800ac48:	2221      	movs	r2, #33	@ 0x21
 800ac4a:	2104      	movs	r1, #4
 800ac4c:	4620      	mov	r0, r4
 800ac4e:	f000 fd87 	bl	800b760 <_calloc_r>
 800ac52:	69e3      	ldr	r3, [r4, #28]
 800ac54:	60f0      	str	r0, [r6, #12]
 800ac56:	68db      	ldr	r3, [r3, #12]
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d1e4      	bne.n	800ac26 <_Balloc+0x2e>
 800ac5c:	2000      	movs	r0, #0
 800ac5e:	bd70      	pop	{r4, r5, r6, pc}
 800ac60:	6802      	ldr	r2, [r0, #0]
 800ac62:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ac66:	2300      	movs	r3, #0
 800ac68:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ac6c:	e7f7      	b.n	800ac5e <_Balloc+0x66>
 800ac6e:	bf00      	nop
 800ac70:	0800e27d 	.word	0x0800e27d
 800ac74:	0800e2fd 	.word	0x0800e2fd

0800ac78 <_Bfree>:
 800ac78:	b570      	push	{r4, r5, r6, lr}
 800ac7a:	69c6      	ldr	r6, [r0, #28]
 800ac7c:	4605      	mov	r5, r0
 800ac7e:	460c      	mov	r4, r1
 800ac80:	b976      	cbnz	r6, 800aca0 <_Bfree+0x28>
 800ac82:	2010      	movs	r0, #16
 800ac84:	f7ff ff02 	bl	800aa8c <malloc>
 800ac88:	4602      	mov	r2, r0
 800ac8a:	61e8      	str	r0, [r5, #28]
 800ac8c:	b920      	cbnz	r0, 800ac98 <_Bfree+0x20>
 800ac8e:	4b09      	ldr	r3, [pc, #36]	@ (800acb4 <_Bfree+0x3c>)
 800ac90:	4809      	ldr	r0, [pc, #36]	@ (800acb8 <_Bfree+0x40>)
 800ac92:	218f      	movs	r1, #143	@ 0x8f
 800ac94:	f000 fd46 	bl	800b724 <__assert_func>
 800ac98:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ac9c:	6006      	str	r6, [r0, #0]
 800ac9e:	60c6      	str	r6, [r0, #12]
 800aca0:	b13c      	cbz	r4, 800acb2 <_Bfree+0x3a>
 800aca2:	69eb      	ldr	r3, [r5, #28]
 800aca4:	6862      	ldr	r2, [r4, #4]
 800aca6:	68db      	ldr	r3, [r3, #12]
 800aca8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800acac:	6021      	str	r1, [r4, #0]
 800acae:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800acb2:	bd70      	pop	{r4, r5, r6, pc}
 800acb4:	0800e27d 	.word	0x0800e27d
 800acb8:	0800e2fd 	.word	0x0800e2fd

0800acbc <__multadd>:
 800acbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800acc0:	690d      	ldr	r5, [r1, #16]
 800acc2:	4607      	mov	r7, r0
 800acc4:	460c      	mov	r4, r1
 800acc6:	461e      	mov	r6, r3
 800acc8:	f101 0c14 	add.w	ip, r1, #20
 800accc:	2000      	movs	r0, #0
 800acce:	f8dc 3000 	ldr.w	r3, [ip]
 800acd2:	b299      	uxth	r1, r3
 800acd4:	fb02 6101 	mla	r1, r2, r1, r6
 800acd8:	0c1e      	lsrs	r6, r3, #16
 800acda:	0c0b      	lsrs	r3, r1, #16
 800acdc:	fb02 3306 	mla	r3, r2, r6, r3
 800ace0:	b289      	uxth	r1, r1
 800ace2:	3001      	adds	r0, #1
 800ace4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ace8:	4285      	cmp	r5, r0
 800acea:	f84c 1b04 	str.w	r1, [ip], #4
 800acee:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800acf2:	dcec      	bgt.n	800acce <__multadd+0x12>
 800acf4:	b30e      	cbz	r6, 800ad3a <__multadd+0x7e>
 800acf6:	68a3      	ldr	r3, [r4, #8]
 800acf8:	42ab      	cmp	r3, r5
 800acfa:	dc19      	bgt.n	800ad30 <__multadd+0x74>
 800acfc:	6861      	ldr	r1, [r4, #4]
 800acfe:	4638      	mov	r0, r7
 800ad00:	3101      	adds	r1, #1
 800ad02:	f7ff ff79 	bl	800abf8 <_Balloc>
 800ad06:	4680      	mov	r8, r0
 800ad08:	b928      	cbnz	r0, 800ad16 <__multadd+0x5a>
 800ad0a:	4602      	mov	r2, r0
 800ad0c:	4b0c      	ldr	r3, [pc, #48]	@ (800ad40 <__multadd+0x84>)
 800ad0e:	480d      	ldr	r0, [pc, #52]	@ (800ad44 <__multadd+0x88>)
 800ad10:	21ba      	movs	r1, #186	@ 0xba
 800ad12:	f000 fd07 	bl	800b724 <__assert_func>
 800ad16:	6922      	ldr	r2, [r4, #16]
 800ad18:	3202      	adds	r2, #2
 800ad1a:	f104 010c 	add.w	r1, r4, #12
 800ad1e:	0092      	lsls	r2, r2, #2
 800ad20:	300c      	adds	r0, #12
 800ad22:	f7ff f80c 	bl	8009d3e <memcpy>
 800ad26:	4621      	mov	r1, r4
 800ad28:	4638      	mov	r0, r7
 800ad2a:	f7ff ffa5 	bl	800ac78 <_Bfree>
 800ad2e:	4644      	mov	r4, r8
 800ad30:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ad34:	3501      	adds	r5, #1
 800ad36:	615e      	str	r6, [r3, #20]
 800ad38:	6125      	str	r5, [r4, #16]
 800ad3a:	4620      	mov	r0, r4
 800ad3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad40:	0800e2ec 	.word	0x0800e2ec
 800ad44:	0800e2fd 	.word	0x0800e2fd

0800ad48 <__hi0bits>:
 800ad48:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800ad4c:	4603      	mov	r3, r0
 800ad4e:	bf36      	itet	cc
 800ad50:	0403      	lslcc	r3, r0, #16
 800ad52:	2000      	movcs	r0, #0
 800ad54:	2010      	movcc	r0, #16
 800ad56:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ad5a:	bf3c      	itt	cc
 800ad5c:	021b      	lslcc	r3, r3, #8
 800ad5e:	3008      	addcc	r0, #8
 800ad60:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ad64:	bf3c      	itt	cc
 800ad66:	011b      	lslcc	r3, r3, #4
 800ad68:	3004      	addcc	r0, #4
 800ad6a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ad6e:	bf3c      	itt	cc
 800ad70:	009b      	lslcc	r3, r3, #2
 800ad72:	3002      	addcc	r0, #2
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	db05      	blt.n	800ad84 <__hi0bits+0x3c>
 800ad78:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800ad7c:	f100 0001 	add.w	r0, r0, #1
 800ad80:	bf08      	it	eq
 800ad82:	2020      	moveq	r0, #32
 800ad84:	4770      	bx	lr

0800ad86 <__lo0bits>:
 800ad86:	6803      	ldr	r3, [r0, #0]
 800ad88:	4602      	mov	r2, r0
 800ad8a:	f013 0007 	ands.w	r0, r3, #7
 800ad8e:	d00b      	beq.n	800ada8 <__lo0bits+0x22>
 800ad90:	07d9      	lsls	r1, r3, #31
 800ad92:	d421      	bmi.n	800add8 <__lo0bits+0x52>
 800ad94:	0798      	lsls	r0, r3, #30
 800ad96:	bf49      	itett	mi
 800ad98:	085b      	lsrmi	r3, r3, #1
 800ad9a:	089b      	lsrpl	r3, r3, #2
 800ad9c:	2001      	movmi	r0, #1
 800ad9e:	6013      	strmi	r3, [r2, #0]
 800ada0:	bf5c      	itt	pl
 800ada2:	6013      	strpl	r3, [r2, #0]
 800ada4:	2002      	movpl	r0, #2
 800ada6:	4770      	bx	lr
 800ada8:	b299      	uxth	r1, r3
 800adaa:	b909      	cbnz	r1, 800adb0 <__lo0bits+0x2a>
 800adac:	0c1b      	lsrs	r3, r3, #16
 800adae:	2010      	movs	r0, #16
 800adb0:	b2d9      	uxtb	r1, r3
 800adb2:	b909      	cbnz	r1, 800adb8 <__lo0bits+0x32>
 800adb4:	3008      	adds	r0, #8
 800adb6:	0a1b      	lsrs	r3, r3, #8
 800adb8:	0719      	lsls	r1, r3, #28
 800adba:	bf04      	itt	eq
 800adbc:	091b      	lsreq	r3, r3, #4
 800adbe:	3004      	addeq	r0, #4
 800adc0:	0799      	lsls	r1, r3, #30
 800adc2:	bf04      	itt	eq
 800adc4:	089b      	lsreq	r3, r3, #2
 800adc6:	3002      	addeq	r0, #2
 800adc8:	07d9      	lsls	r1, r3, #31
 800adca:	d403      	bmi.n	800add4 <__lo0bits+0x4e>
 800adcc:	085b      	lsrs	r3, r3, #1
 800adce:	f100 0001 	add.w	r0, r0, #1
 800add2:	d003      	beq.n	800addc <__lo0bits+0x56>
 800add4:	6013      	str	r3, [r2, #0]
 800add6:	4770      	bx	lr
 800add8:	2000      	movs	r0, #0
 800adda:	4770      	bx	lr
 800addc:	2020      	movs	r0, #32
 800adde:	4770      	bx	lr

0800ade0 <__i2b>:
 800ade0:	b510      	push	{r4, lr}
 800ade2:	460c      	mov	r4, r1
 800ade4:	2101      	movs	r1, #1
 800ade6:	f7ff ff07 	bl	800abf8 <_Balloc>
 800adea:	4602      	mov	r2, r0
 800adec:	b928      	cbnz	r0, 800adfa <__i2b+0x1a>
 800adee:	4b05      	ldr	r3, [pc, #20]	@ (800ae04 <__i2b+0x24>)
 800adf0:	4805      	ldr	r0, [pc, #20]	@ (800ae08 <__i2b+0x28>)
 800adf2:	f240 1145 	movw	r1, #325	@ 0x145
 800adf6:	f000 fc95 	bl	800b724 <__assert_func>
 800adfa:	2301      	movs	r3, #1
 800adfc:	6144      	str	r4, [r0, #20]
 800adfe:	6103      	str	r3, [r0, #16]
 800ae00:	bd10      	pop	{r4, pc}
 800ae02:	bf00      	nop
 800ae04:	0800e2ec 	.word	0x0800e2ec
 800ae08:	0800e2fd 	.word	0x0800e2fd

0800ae0c <__multiply>:
 800ae0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae10:	4614      	mov	r4, r2
 800ae12:	690a      	ldr	r2, [r1, #16]
 800ae14:	6923      	ldr	r3, [r4, #16]
 800ae16:	429a      	cmp	r2, r3
 800ae18:	bfa8      	it	ge
 800ae1a:	4623      	movge	r3, r4
 800ae1c:	460f      	mov	r7, r1
 800ae1e:	bfa4      	itt	ge
 800ae20:	460c      	movge	r4, r1
 800ae22:	461f      	movge	r7, r3
 800ae24:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800ae28:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800ae2c:	68a3      	ldr	r3, [r4, #8]
 800ae2e:	6861      	ldr	r1, [r4, #4]
 800ae30:	eb0a 0609 	add.w	r6, sl, r9
 800ae34:	42b3      	cmp	r3, r6
 800ae36:	b085      	sub	sp, #20
 800ae38:	bfb8      	it	lt
 800ae3a:	3101      	addlt	r1, #1
 800ae3c:	f7ff fedc 	bl	800abf8 <_Balloc>
 800ae40:	b930      	cbnz	r0, 800ae50 <__multiply+0x44>
 800ae42:	4602      	mov	r2, r0
 800ae44:	4b44      	ldr	r3, [pc, #272]	@ (800af58 <__multiply+0x14c>)
 800ae46:	4845      	ldr	r0, [pc, #276]	@ (800af5c <__multiply+0x150>)
 800ae48:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800ae4c:	f000 fc6a 	bl	800b724 <__assert_func>
 800ae50:	f100 0514 	add.w	r5, r0, #20
 800ae54:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ae58:	462b      	mov	r3, r5
 800ae5a:	2200      	movs	r2, #0
 800ae5c:	4543      	cmp	r3, r8
 800ae5e:	d321      	bcc.n	800aea4 <__multiply+0x98>
 800ae60:	f107 0114 	add.w	r1, r7, #20
 800ae64:	f104 0214 	add.w	r2, r4, #20
 800ae68:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800ae6c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800ae70:	9302      	str	r3, [sp, #8]
 800ae72:	1b13      	subs	r3, r2, r4
 800ae74:	3b15      	subs	r3, #21
 800ae76:	f023 0303 	bic.w	r3, r3, #3
 800ae7a:	3304      	adds	r3, #4
 800ae7c:	f104 0715 	add.w	r7, r4, #21
 800ae80:	42ba      	cmp	r2, r7
 800ae82:	bf38      	it	cc
 800ae84:	2304      	movcc	r3, #4
 800ae86:	9301      	str	r3, [sp, #4]
 800ae88:	9b02      	ldr	r3, [sp, #8]
 800ae8a:	9103      	str	r1, [sp, #12]
 800ae8c:	428b      	cmp	r3, r1
 800ae8e:	d80c      	bhi.n	800aeaa <__multiply+0x9e>
 800ae90:	2e00      	cmp	r6, #0
 800ae92:	dd03      	ble.n	800ae9c <__multiply+0x90>
 800ae94:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d05b      	beq.n	800af54 <__multiply+0x148>
 800ae9c:	6106      	str	r6, [r0, #16]
 800ae9e:	b005      	add	sp, #20
 800aea0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aea4:	f843 2b04 	str.w	r2, [r3], #4
 800aea8:	e7d8      	b.n	800ae5c <__multiply+0x50>
 800aeaa:	f8b1 a000 	ldrh.w	sl, [r1]
 800aeae:	f1ba 0f00 	cmp.w	sl, #0
 800aeb2:	d024      	beq.n	800aefe <__multiply+0xf2>
 800aeb4:	f104 0e14 	add.w	lr, r4, #20
 800aeb8:	46a9      	mov	r9, r5
 800aeba:	f04f 0c00 	mov.w	ip, #0
 800aebe:	f85e 7b04 	ldr.w	r7, [lr], #4
 800aec2:	f8d9 3000 	ldr.w	r3, [r9]
 800aec6:	fa1f fb87 	uxth.w	fp, r7
 800aeca:	b29b      	uxth	r3, r3
 800aecc:	fb0a 330b 	mla	r3, sl, fp, r3
 800aed0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800aed4:	f8d9 7000 	ldr.w	r7, [r9]
 800aed8:	4463      	add	r3, ip
 800aeda:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800aede:	fb0a c70b 	mla	r7, sl, fp, ip
 800aee2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800aee6:	b29b      	uxth	r3, r3
 800aee8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800aeec:	4572      	cmp	r2, lr
 800aeee:	f849 3b04 	str.w	r3, [r9], #4
 800aef2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800aef6:	d8e2      	bhi.n	800aebe <__multiply+0xb2>
 800aef8:	9b01      	ldr	r3, [sp, #4]
 800aefa:	f845 c003 	str.w	ip, [r5, r3]
 800aefe:	9b03      	ldr	r3, [sp, #12]
 800af00:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800af04:	3104      	adds	r1, #4
 800af06:	f1b9 0f00 	cmp.w	r9, #0
 800af0a:	d021      	beq.n	800af50 <__multiply+0x144>
 800af0c:	682b      	ldr	r3, [r5, #0]
 800af0e:	f104 0c14 	add.w	ip, r4, #20
 800af12:	46ae      	mov	lr, r5
 800af14:	f04f 0a00 	mov.w	sl, #0
 800af18:	f8bc b000 	ldrh.w	fp, [ip]
 800af1c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800af20:	fb09 770b 	mla	r7, r9, fp, r7
 800af24:	4457      	add	r7, sl
 800af26:	b29b      	uxth	r3, r3
 800af28:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800af2c:	f84e 3b04 	str.w	r3, [lr], #4
 800af30:	f85c 3b04 	ldr.w	r3, [ip], #4
 800af34:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800af38:	f8be 3000 	ldrh.w	r3, [lr]
 800af3c:	fb09 330a 	mla	r3, r9, sl, r3
 800af40:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800af44:	4562      	cmp	r2, ip
 800af46:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800af4a:	d8e5      	bhi.n	800af18 <__multiply+0x10c>
 800af4c:	9f01      	ldr	r7, [sp, #4]
 800af4e:	51eb      	str	r3, [r5, r7]
 800af50:	3504      	adds	r5, #4
 800af52:	e799      	b.n	800ae88 <__multiply+0x7c>
 800af54:	3e01      	subs	r6, #1
 800af56:	e79b      	b.n	800ae90 <__multiply+0x84>
 800af58:	0800e2ec 	.word	0x0800e2ec
 800af5c:	0800e2fd 	.word	0x0800e2fd

0800af60 <__pow5mult>:
 800af60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800af64:	4615      	mov	r5, r2
 800af66:	f012 0203 	ands.w	r2, r2, #3
 800af6a:	4607      	mov	r7, r0
 800af6c:	460e      	mov	r6, r1
 800af6e:	d007      	beq.n	800af80 <__pow5mult+0x20>
 800af70:	4c25      	ldr	r4, [pc, #148]	@ (800b008 <__pow5mult+0xa8>)
 800af72:	3a01      	subs	r2, #1
 800af74:	2300      	movs	r3, #0
 800af76:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800af7a:	f7ff fe9f 	bl	800acbc <__multadd>
 800af7e:	4606      	mov	r6, r0
 800af80:	10ad      	asrs	r5, r5, #2
 800af82:	d03d      	beq.n	800b000 <__pow5mult+0xa0>
 800af84:	69fc      	ldr	r4, [r7, #28]
 800af86:	b97c      	cbnz	r4, 800afa8 <__pow5mult+0x48>
 800af88:	2010      	movs	r0, #16
 800af8a:	f7ff fd7f 	bl	800aa8c <malloc>
 800af8e:	4602      	mov	r2, r0
 800af90:	61f8      	str	r0, [r7, #28]
 800af92:	b928      	cbnz	r0, 800afa0 <__pow5mult+0x40>
 800af94:	4b1d      	ldr	r3, [pc, #116]	@ (800b00c <__pow5mult+0xac>)
 800af96:	481e      	ldr	r0, [pc, #120]	@ (800b010 <__pow5mult+0xb0>)
 800af98:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800af9c:	f000 fbc2 	bl	800b724 <__assert_func>
 800afa0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800afa4:	6004      	str	r4, [r0, #0]
 800afa6:	60c4      	str	r4, [r0, #12]
 800afa8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800afac:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800afb0:	b94c      	cbnz	r4, 800afc6 <__pow5mult+0x66>
 800afb2:	f240 2171 	movw	r1, #625	@ 0x271
 800afb6:	4638      	mov	r0, r7
 800afb8:	f7ff ff12 	bl	800ade0 <__i2b>
 800afbc:	2300      	movs	r3, #0
 800afbe:	f8c8 0008 	str.w	r0, [r8, #8]
 800afc2:	4604      	mov	r4, r0
 800afc4:	6003      	str	r3, [r0, #0]
 800afc6:	f04f 0900 	mov.w	r9, #0
 800afca:	07eb      	lsls	r3, r5, #31
 800afcc:	d50a      	bpl.n	800afe4 <__pow5mult+0x84>
 800afce:	4631      	mov	r1, r6
 800afd0:	4622      	mov	r2, r4
 800afd2:	4638      	mov	r0, r7
 800afd4:	f7ff ff1a 	bl	800ae0c <__multiply>
 800afd8:	4631      	mov	r1, r6
 800afda:	4680      	mov	r8, r0
 800afdc:	4638      	mov	r0, r7
 800afde:	f7ff fe4b 	bl	800ac78 <_Bfree>
 800afe2:	4646      	mov	r6, r8
 800afe4:	106d      	asrs	r5, r5, #1
 800afe6:	d00b      	beq.n	800b000 <__pow5mult+0xa0>
 800afe8:	6820      	ldr	r0, [r4, #0]
 800afea:	b938      	cbnz	r0, 800affc <__pow5mult+0x9c>
 800afec:	4622      	mov	r2, r4
 800afee:	4621      	mov	r1, r4
 800aff0:	4638      	mov	r0, r7
 800aff2:	f7ff ff0b 	bl	800ae0c <__multiply>
 800aff6:	6020      	str	r0, [r4, #0]
 800aff8:	f8c0 9000 	str.w	r9, [r0]
 800affc:	4604      	mov	r4, r0
 800affe:	e7e4      	b.n	800afca <__pow5mult+0x6a>
 800b000:	4630      	mov	r0, r6
 800b002:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b006:	bf00      	nop
 800b008:	0800e358 	.word	0x0800e358
 800b00c:	0800e27d 	.word	0x0800e27d
 800b010:	0800e2fd 	.word	0x0800e2fd

0800b014 <__lshift>:
 800b014:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b018:	460c      	mov	r4, r1
 800b01a:	6849      	ldr	r1, [r1, #4]
 800b01c:	6923      	ldr	r3, [r4, #16]
 800b01e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b022:	68a3      	ldr	r3, [r4, #8]
 800b024:	4607      	mov	r7, r0
 800b026:	4691      	mov	r9, r2
 800b028:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b02c:	f108 0601 	add.w	r6, r8, #1
 800b030:	42b3      	cmp	r3, r6
 800b032:	db0b      	blt.n	800b04c <__lshift+0x38>
 800b034:	4638      	mov	r0, r7
 800b036:	f7ff fddf 	bl	800abf8 <_Balloc>
 800b03a:	4605      	mov	r5, r0
 800b03c:	b948      	cbnz	r0, 800b052 <__lshift+0x3e>
 800b03e:	4602      	mov	r2, r0
 800b040:	4b28      	ldr	r3, [pc, #160]	@ (800b0e4 <__lshift+0xd0>)
 800b042:	4829      	ldr	r0, [pc, #164]	@ (800b0e8 <__lshift+0xd4>)
 800b044:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800b048:	f000 fb6c 	bl	800b724 <__assert_func>
 800b04c:	3101      	adds	r1, #1
 800b04e:	005b      	lsls	r3, r3, #1
 800b050:	e7ee      	b.n	800b030 <__lshift+0x1c>
 800b052:	2300      	movs	r3, #0
 800b054:	f100 0114 	add.w	r1, r0, #20
 800b058:	f100 0210 	add.w	r2, r0, #16
 800b05c:	4618      	mov	r0, r3
 800b05e:	4553      	cmp	r3, sl
 800b060:	db33      	blt.n	800b0ca <__lshift+0xb6>
 800b062:	6920      	ldr	r0, [r4, #16]
 800b064:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b068:	f104 0314 	add.w	r3, r4, #20
 800b06c:	f019 091f 	ands.w	r9, r9, #31
 800b070:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b074:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b078:	d02b      	beq.n	800b0d2 <__lshift+0xbe>
 800b07a:	f1c9 0e20 	rsb	lr, r9, #32
 800b07e:	468a      	mov	sl, r1
 800b080:	2200      	movs	r2, #0
 800b082:	6818      	ldr	r0, [r3, #0]
 800b084:	fa00 f009 	lsl.w	r0, r0, r9
 800b088:	4310      	orrs	r0, r2
 800b08a:	f84a 0b04 	str.w	r0, [sl], #4
 800b08e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b092:	459c      	cmp	ip, r3
 800b094:	fa22 f20e 	lsr.w	r2, r2, lr
 800b098:	d8f3      	bhi.n	800b082 <__lshift+0x6e>
 800b09a:	ebac 0304 	sub.w	r3, ip, r4
 800b09e:	3b15      	subs	r3, #21
 800b0a0:	f023 0303 	bic.w	r3, r3, #3
 800b0a4:	3304      	adds	r3, #4
 800b0a6:	f104 0015 	add.w	r0, r4, #21
 800b0aa:	4584      	cmp	ip, r0
 800b0ac:	bf38      	it	cc
 800b0ae:	2304      	movcc	r3, #4
 800b0b0:	50ca      	str	r2, [r1, r3]
 800b0b2:	b10a      	cbz	r2, 800b0b8 <__lshift+0xa4>
 800b0b4:	f108 0602 	add.w	r6, r8, #2
 800b0b8:	3e01      	subs	r6, #1
 800b0ba:	4638      	mov	r0, r7
 800b0bc:	612e      	str	r6, [r5, #16]
 800b0be:	4621      	mov	r1, r4
 800b0c0:	f7ff fdda 	bl	800ac78 <_Bfree>
 800b0c4:	4628      	mov	r0, r5
 800b0c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b0ca:	f842 0f04 	str.w	r0, [r2, #4]!
 800b0ce:	3301      	adds	r3, #1
 800b0d0:	e7c5      	b.n	800b05e <__lshift+0x4a>
 800b0d2:	3904      	subs	r1, #4
 800b0d4:	f853 2b04 	ldr.w	r2, [r3], #4
 800b0d8:	f841 2f04 	str.w	r2, [r1, #4]!
 800b0dc:	459c      	cmp	ip, r3
 800b0de:	d8f9      	bhi.n	800b0d4 <__lshift+0xc0>
 800b0e0:	e7ea      	b.n	800b0b8 <__lshift+0xa4>
 800b0e2:	bf00      	nop
 800b0e4:	0800e2ec 	.word	0x0800e2ec
 800b0e8:	0800e2fd 	.word	0x0800e2fd

0800b0ec <__mcmp>:
 800b0ec:	690a      	ldr	r2, [r1, #16]
 800b0ee:	4603      	mov	r3, r0
 800b0f0:	6900      	ldr	r0, [r0, #16]
 800b0f2:	1a80      	subs	r0, r0, r2
 800b0f4:	b530      	push	{r4, r5, lr}
 800b0f6:	d10e      	bne.n	800b116 <__mcmp+0x2a>
 800b0f8:	3314      	adds	r3, #20
 800b0fa:	3114      	adds	r1, #20
 800b0fc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b100:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b104:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b108:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b10c:	4295      	cmp	r5, r2
 800b10e:	d003      	beq.n	800b118 <__mcmp+0x2c>
 800b110:	d205      	bcs.n	800b11e <__mcmp+0x32>
 800b112:	f04f 30ff 	mov.w	r0, #4294967295
 800b116:	bd30      	pop	{r4, r5, pc}
 800b118:	42a3      	cmp	r3, r4
 800b11a:	d3f3      	bcc.n	800b104 <__mcmp+0x18>
 800b11c:	e7fb      	b.n	800b116 <__mcmp+0x2a>
 800b11e:	2001      	movs	r0, #1
 800b120:	e7f9      	b.n	800b116 <__mcmp+0x2a>
	...

0800b124 <__mdiff>:
 800b124:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b128:	4689      	mov	r9, r1
 800b12a:	4606      	mov	r6, r0
 800b12c:	4611      	mov	r1, r2
 800b12e:	4648      	mov	r0, r9
 800b130:	4614      	mov	r4, r2
 800b132:	f7ff ffdb 	bl	800b0ec <__mcmp>
 800b136:	1e05      	subs	r5, r0, #0
 800b138:	d112      	bne.n	800b160 <__mdiff+0x3c>
 800b13a:	4629      	mov	r1, r5
 800b13c:	4630      	mov	r0, r6
 800b13e:	f7ff fd5b 	bl	800abf8 <_Balloc>
 800b142:	4602      	mov	r2, r0
 800b144:	b928      	cbnz	r0, 800b152 <__mdiff+0x2e>
 800b146:	4b3f      	ldr	r3, [pc, #252]	@ (800b244 <__mdiff+0x120>)
 800b148:	f240 2137 	movw	r1, #567	@ 0x237
 800b14c:	483e      	ldr	r0, [pc, #248]	@ (800b248 <__mdiff+0x124>)
 800b14e:	f000 fae9 	bl	800b724 <__assert_func>
 800b152:	2301      	movs	r3, #1
 800b154:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b158:	4610      	mov	r0, r2
 800b15a:	b003      	add	sp, #12
 800b15c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b160:	bfbc      	itt	lt
 800b162:	464b      	movlt	r3, r9
 800b164:	46a1      	movlt	r9, r4
 800b166:	4630      	mov	r0, r6
 800b168:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800b16c:	bfba      	itte	lt
 800b16e:	461c      	movlt	r4, r3
 800b170:	2501      	movlt	r5, #1
 800b172:	2500      	movge	r5, #0
 800b174:	f7ff fd40 	bl	800abf8 <_Balloc>
 800b178:	4602      	mov	r2, r0
 800b17a:	b918      	cbnz	r0, 800b184 <__mdiff+0x60>
 800b17c:	4b31      	ldr	r3, [pc, #196]	@ (800b244 <__mdiff+0x120>)
 800b17e:	f240 2145 	movw	r1, #581	@ 0x245
 800b182:	e7e3      	b.n	800b14c <__mdiff+0x28>
 800b184:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800b188:	6926      	ldr	r6, [r4, #16]
 800b18a:	60c5      	str	r5, [r0, #12]
 800b18c:	f109 0310 	add.w	r3, r9, #16
 800b190:	f109 0514 	add.w	r5, r9, #20
 800b194:	f104 0e14 	add.w	lr, r4, #20
 800b198:	f100 0b14 	add.w	fp, r0, #20
 800b19c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800b1a0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800b1a4:	9301      	str	r3, [sp, #4]
 800b1a6:	46d9      	mov	r9, fp
 800b1a8:	f04f 0c00 	mov.w	ip, #0
 800b1ac:	9b01      	ldr	r3, [sp, #4]
 800b1ae:	f85e 0b04 	ldr.w	r0, [lr], #4
 800b1b2:	f853 af04 	ldr.w	sl, [r3, #4]!
 800b1b6:	9301      	str	r3, [sp, #4]
 800b1b8:	fa1f f38a 	uxth.w	r3, sl
 800b1bc:	4619      	mov	r1, r3
 800b1be:	b283      	uxth	r3, r0
 800b1c0:	1acb      	subs	r3, r1, r3
 800b1c2:	0c00      	lsrs	r0, r0, #16
 800b1c4:	4463      	add	r3, ip
 800b1c6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800b1ca:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800b1ce:	b29b      	uxth	r3, r3
 800b1d0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800b1d4:	4576      	cmp	r6, lr
 800b1d6:	f849 3b04 	str.w	r3, [r9], #4
 800b1da:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b1de:	d8e5      	bhi.n	800b1ac <__mdiff+0x88>
 800b1e0:	1b33      	subs	r3, r6, r4
 800b1e2:	3b15      	subs	r3, #21
 800b1e4:	f023 0303 	bic.w	r3, r3, #3
 800b1e8:	3415      	adds	r4, #21
 800b1ea:	3304      	adds	r3, #4
 800b1ec:	42a6      	cmp	r6, r4
 800b1ee:	bf38      	it	cc
 800b1f0:	2304      	movcc	r3, #4
 800b1f2:	441d      	add	r5, r3
 800b1f4:	445b      	add	r3, fp
 800b1f6:	461e      	mov	r6, r3
 800b1f8:	462c      	mov	r4, r5
 800b1fa:	4544      	cmp	r4, r8
 800b1fc:	d30e      	bcc.n	800b21c <__mdiff+0xf8>
 800b1fe:	f108 0103 	add.w	r1, r8, #3
 800b202:	1b49      	subs	r1, r1, r5
 800b204:	f021 0103 	bic.w	r1, r1, #3
 800b208:	3d03      	subs	r5, #3
 800b20a:	45a8      	cmp	r8, r5
 800b20c:	bf38      	it	cc
 800b20e:	2100      	movcc	r1, #0
 800b210:	440b      	add	r3, r1
 800b212:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b216:	b191      	cbz	r1, 800b23e <__mdiff+0x11a>
 800b218:	6117      	str	r7, [r2, #16]
 800b21a:	e79d      	b.n	800b158 <__mdiff+0x34>
 800b21c:	f854 1b04 	ldr.w	r1, [r4], #4
 800b220:	46e6      	mov	lr, ip
 800b222:	0c08      	lsrs	r0, r1, #16
 800b224:	fa1c fc81 	uxtah	ip, ip, r1
 800b228:	4471      	add	r1, lr
 800b22a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800b22e:	b289      	uxth	r1, r1
 800b230:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800b234:	f846 1b04 	str.w	r1, [r6], #4
 800b238:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b23c:	e7dd      	b.n	800b1fa <__mdiff+0xd6>
 800b23e:	3f01      	subs	r7, #1
 800b240:	e7e7      	b.n	800b212 <__mdiff+0xee>
 800b242:	bf00      	nop
 800b244:	0800e2ec 	.word	0x0800e2ec
 800b248:	0800e2fd 	.word	0x0800e2fd

0800b24c <__d2b>:
 800b24c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b250:	460f      	mov	r7, r1
 800b252:	2101      	movs	r1, #1
 800b254:	ec59 8b10 	vmov	r8, r9, d0
 800b258:	4616      	mov	r6, r2
 800b25a:	f7ff fccd 	bl	800abf8 <_Balloc>
 800b25e:	4604      	mov	r4, r0
 800b260:	b930      	cbnz	r0, 800b270 <__d2b+0x24>
 800b262:	4602      	mov	r2, r0
 800b264:	4b23      	ldr	r3, [pc, #140]	@ (800b2f4 <__d2b+0xa8>)
 800b266:	4824      	ldr	r0, [pc, #144]	@ (800b2f8 <__d2b+0xac>)
 800b268:	f240 310f 	movw	r1, #783	@ 0x30f
 800b26c:	f000 fa5a 	bl	800b724 <__assert_func>
 800b270:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b274:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b278:	b10d      	cbz	r5, 800b27e <__d2b+0x32>
 800b27a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b27e:	9301      	str	r3, [sp, #4]
 800b280:	f1b8 0300 	subs.w	r3, r8, #0
 800b284:	d023      	beq.n	800b2ce <__d2b+0x82>
 800b286:	4668      	mov	r0, sp
 800b288:	9300      	str	r3, [sp, #0]
 800b28a:	f7ff fd7c 	bl	800ad86 <__lo0bits>
 800b28e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b292:	b1d0      	cbz	r0, 800b2ca <__d2b+0x7e>
 800b294:	f1c0 0320 	rsb	r3, r0, #32
 800b298:	fa02 f303 	lsl.w	r3, r2, r3
 800b29c:	430b      	orrs	r3, r1
 800b29e:	40c2      	lsrs	r2, r0
 800b2a0:	6163      	str	r3, [r4, #20]
 800b2a2:	9201      	str	r2, [sp, #4]
 800b2a4:	9b01      	ldr	r3, [sp, #4]
 800b2a6:	61a3      	str	r3, [r4, #24]
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	bf0c      	ite	eq
 800b2ac:	2201      	moveq	r2, #1
 800b2ae:	2202      	movne	r2, #2
 800b2b0:	6122      	str	r2, [r4, #16]
 800b2b2:	b1a5      	cbz	r5, 800b2de <__d2b+0x92>
 800b2b4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800b2b8:	4405      	add	r5, r0
 800b2ba:	603d      	str	r5, [r7, #0]
 800b2bc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800b2c0:	6030      	str	r0, [r6, #0]
 800b2c2:	4620      	mov	r0, r4
 800b2c4:	b003      	add	sp, #12
 800b2c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b2ca:	6161      	str	r1, [r4, #20]
 800b2cc:	e7ea      	b.n	800b2a4 <__d2b+0x58>
 800b2ce:	a801      	add	r0, sp, #4
 800b2d0:	f7ff fd59 	bl	800ad86 <__lo0bits>
 800b2d4:	9b01      	ldr	r3, [sp, #4]
 800b2d6:	6163      	str	r3, [r4, #20]
 800b2d8:	3020      	adds	r0, #32
 800b2da:	2201      	movs	r2, #1
 800b2dc:	e7e8      	b.n	800b2b0 <__d2b+0x64>
 800b2de:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b2e2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800b2e6:	6038      	str	r0, [r7, #0]
 800b2e8:	6918      	ldr	r0, [r3, #16]
 800b2ea:	f7ff fd2d 	bl	800ad48 <__hi0bits>
 800b2ee:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b2f2:	e7e5      	b.n	800b2c0 <__d2b+0x74>
 800b2f4:	0800e2ec 	.word	0x0800e2ec
 800b2f8:	0800e2fd 	.word	0x0800e2fd

0800b2fc <__ssputs_r>:
 800b2fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b300:	688e      	ldr	r6, [r1, #8]
 800b302:	461f      	mov	r7, r3
 800b304:	42be      	cmp	r6, r7
 800b306:	680b      	ldr	r3, [r1, #0]
 800b308:	4682      	mov	sl, r0
 800b30a:	460c      	mov	r4, r1
 800b30c:	4690      	mov	r8, r2
 800b30e:	d82d      	bhi.n	800b36c <__ssputs_r+0x70>
 800b310:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b314:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b318:	d026      	beq.n	800b368 <__ssputs_r+0x6c>
 800b31a:	6965      	ldr	r5, [r4, #20]
 800b31c:	6909      	ldr	r1, [r1, #16]
 800b31e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b322:	eba3 0901 	sub.w	r9, r3, r1
 800b326:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b32a:	1c7b      	adds	r3, r7, #1
 800b32c:	444b      	add	r3, r9
 800b32e:	106d      	asrs	r5, r5, #1
 800b330:	429d      	cmp	r5, r3
 800b332:	bf38      	it	cc
 800b334:	461d      	movcc	r5, r3
 800b336:	0553      	lsls	r3, r2, #21
 800b338:	d527      	bpl.n	800b38a <__ssputs_r+0x8e>
 800b33a:	4629      	mov	r1, r5
 800b33c:	f7ff fbd0 	bl	800aae0 <_malloc_r>
 800b340:	4606      	mov	r6, r0
 800b342:	b360      	cbz	r0, 800b39e <__ssputs_r+0xa2>
 800b344:	6921      	ldr	r1, [r4, #16]
 800b346:	464a      	mov	r2, r9
 800b348:	f7fe fcf9 	bl	8009d3e <memcpy>
 800b34c:	89a3      	ldrh	r3, [r4, #12]
 800b34e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b352:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b356:	81a3      	strh	r3, [r4, #12]
 800b358:	6126      	str	r6, [r4, #16]
 800b35a:	6165      	str	r5, [r4, #20]
 800b35c:	444e      	add	r6, r9
 800b35e:	eba5 0509 	sub.w	r5, r5, r9
 800b362:	6026      	str	r6, [r4, #0]
 800b364:	60a5      	str	r5, [r4, #8]
 800b366:	463e      	mov	r6, r7
 800b368:	42be      	cmp	r6, r7
 800b36a:	d900      	bls.n	800b36e <__ssputs_r+0x72>
 800b36c:	463e      	mov	r6, r7
 800b36e:	6820      	ldr	r0, [r4, #0]
 800b370:	4632      	mov	r2, r6
 800b372:	4641      	mov	r1, r8
 800b374:	f7fe fc33 	bl	8009bde <memmove>
 800b378:	68a3      	ldr	r3, [r4, #8]
 800b37a:	1b9b      	subs	r3, r3, r6
 800b37c:	60a3      	str	r3, [r4, #8]
 800b37e:	6823      	ldr	r3, [r4, #0]
 800b380:	4433      	add	r3, r6
 800b382:	6023      	str	r3, [r4, #0]
 800b384:	2000      	movs	r0, #0
 800b386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b38a:	462a      	mov	r2, r5
 800b38c:	f000 fa0e 	bl	800b7ac <_realloc_r>
 800b390:	4606      	mov	r6, r0
 800b392:	2800      	cmp	r0, #0
 800b394:	d1e0      	bne.n	800b358 <__ssputs_r+0x5c>
 800b396:	6921      	ldr	r1, [r4, #16]
 800b398:	4650      	mov	r0, sl
 800b39a:	f7ff fb2d 	bl	800a9f8 <_free_r>
 800b39e:	230c      	movs	r3, #12
 800b3a0:	f8ca 3000 	str.w	r3, [sl]
 800b3a4:	89a3      	ldrh	r3, [r4, #12]
 800b3a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b3aa:	81a3      	strh	r3, [r4, #12]
 800b3ac:	f04f 30ff 	mov.w	r0, #4294967295
 800b3b0:	e7e9      	b.n	800b386 <__ssputs_r+0x8a>
	...

0800b3b4 <_svfiprintf_r>:
 800b3b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3b8:	4698      	mov	r8, r3
 800b3ba:	898b      	ldrh	r3, [r1, #12]
 800b3bc:	061b      	lsls	r3, r3, #24
 800b3be:	b09d      	sub	sp, #116	@ 0x74
 800b3c0:	4607      	mov	r7, r0
 800b3c2:	460d      	mov	r5, r1
 800b3c4:	4614      	mov	r4, r2
 800b3c6:	d510      	bpl.n	800b3ea <_svfiprintf_r+0x36>
 800b3c8:	690b      	ldr	r3, [r1, #16]
 800b3ca:	b973      	cbnz	r3, 800b3ea <_svfiprintf_r+0x36>
 800b3cc:	2140      	movs	r1, #64	@ 0x40
 800b3ce:	f7ff fb87 	bl	800aae0 <_malloc_r>
 800b3d2:	6028      	str	r0, [r5, #0]
 800b3d4:	6128      	str	r0, [r5, #16]
 800b3d6:	b930      	cbnz	r0, 800b3e6 <_svfiprintf_r+0x32>
 800b3d8:	230c      	movs	r3, #12
 800b3da:	603b      	str	r3, [r7, #0]
 800b3dc:	f04f 30ff 	mov.w	r0, #4294967295
 800b3e0:	b01d      	add	sp, #116	@ 0x74
 800b3e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3e6:	2340      	movs	r3, #64	@ 0x40
 800b3e8:	616b      	str	r3, [r5, #20]
 800b3ea:	2300      	movs	r3, #0
 800b3ec:	9309      	str	r3, [sp, #36]	@ 0x24
 800b3ee:	2320      	movs	r3, #32
 800b3f0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b3f4:	f8cd 800c 	str.w	r8, [sp, #12]
 800b3f8:	2330      	movs	r3, #48	@ 0x30
 800b3fa:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b598 <_svfiprintf_r+0x1e4>
 800b3fe:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b402:	f04f 0901 	mov.w	r9, #1
 800b406:	4623      	mov	r3, r4
 800b408:	469a      	mov	sl, r3
 800b40a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b40e:	b10a      	cbz	r2, 800b414 <_svfiprintf_r+0x60>
 800b410:	2a25      	cmp	r2, #37	@ 0x25
 800b412:	d1f9      	bne.n	800b408 <_svfiprintf_r+0x54>
 800b414:	ebba 0b04 	subs.w	fp, sl, r4
 800b418:	d00b      	beq.n	800b432 <_svfiprintf_r+0x7e>
 800b41a:	465b      	mov	r3, fp
 800b41c:	4622      	mov	r2, r4
 800b41e:	4629      	mov	r1, r5
 800b420:	4638      	mov	r0, r7
 800b422:	f7ff ff6b 	bl	800b2fc <__ssputs_r>
 800b426:	3001      	adds	r0, #1
 800b428:	f000 80a7 	beq.w	800b57a <_svfiprintf_r+0x1c6>
 800b42c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b42e:	445a      	add	r2, fp
 800b430:	9209      	str	r2, [sp, #36]	@ 0x24
 800b432:	f89a 3000 	ldrb.w	r3, [sl]
 800b436:	2b00      	cmp	r3, #0
 800b438:	f000 809f 	beq.w	800b57a <_svfiprintf_r+0x1c6>
 800b43c:	2300      	movs	r3, #0
 800b43e:	f04f 32ff 	mov.w	r2, #4294967295
 800b442:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b446:	f10a 0a01 	add.w	sl, sl, #1
 800b44a:	9304      	str	r3, [sp, #16]
 800b44c:	9307      	str	r3, [sp, #28]
 800b44e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b452:	931a      	str	r3, [sp, #104]	@ 0x68
 800b454:	4654      	mov	r4, sl
 800b456:	2205      	movs	r2, #5
 800b458:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b45c:	484e      	ldr	r0, [pc, #312]	@ (800b598 <_svfiprintf_r+0x1e4>)
 800b45e:	f7f4 feb7 	bl	80001d0 <memchr>
 800b462:	9a04      	ldr	r2, [sp, #16]
 800b464:	b9d8      	cbnz	r0, 800b49e <_svfiprintf_r+0xea>
 800b466:	06d0      	lsls	r0, r2, #27
 800b468:	bf44      	itt	mi
 800b46a:	2320      	movmi	r3, #32
 800b46c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b470:	0711      	lsls	r1, r2, #28
 800b472:	bf44      	itt	mi
 800b474:	232b      	movmi	r3, #43	@ 0x2b
 800b476:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b47a:	f89a 3000 	ldrb.w	r3, [sl]
 800b47e:	2b2a      	cmp	r3, #42	@ 0x2a
 800b480:	d015      	beq.n	800b4ae <_svfiprintf_r+0xfa>
 800b482:	9a07      	ldr	r2, [sp, #28]
 800b484:	4654      	mov	r4, sl
 800b486:	2000      	movs	r0, #0
 800b488:	f04f 0c0a 	mov.w	ip, #10
 800b48c:	4621      	mov	r1, r4
 800b48e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b492:	3b30      	subs	r3, #48	@ 0x30
 800b494:	2b09      	cmp	r3, #9
 800b496:	d94b      	bls.n	800b530 <_svfiprintf_r+0x17c>
 800b498:	b1b0      	cbz	r0, 800b4c8 <_svfiprintf_r+0x114>
 800b49a:	9207      	str	r2, [sp, #28]
 800b49c:	e014      	b.n	800b4c8 <_svfiprintf_r+0x114>
 800b49e:	eba0 0308 	sub.w	r3, r0, r8
 800b4a2:	fa09 f303 	lsl.w	r3, r9, r3
 800b4a6:	4313      	orrs	r3, r2
 800b4a8:	9304      	str	r3, [sp, #16]
 800b4aa:	46a2      	mov	sl, r4
 800b4ac:	e7d2      	b.n	800b454 <_svfiprintf_r+0xa0>
 800b4ae:	9b03      	ldr	r3, [sp, #12]
 800b4b0:	1d19      	adds	r1, r3, #4
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	9103      	str	r1, [sp, #12]
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	bfbb      	ittet	lt
 800b4ba:	425b      	neglt	r3, r3
 800b4bc:	f042 0202 	orrlt.w	r2, r2, #2
 800b4c0:	9307      	strge	r3, [sp, #28]
 800b4c2:	9307      	strlt	r3, [sp, #28]
 800b4c4:	bfb8      	it	lt
 800b4c6:	9204      	strlt	r2, [sp, #16]
 800b4c8:	7823      	ldrb	r3, [r4, #0]
 800b4ca:	2b2e      	cmp	r3, #46	@ 0x2e
 800b4cc:	d10a      	bne.n	800b4e4 <_svfiprintf_r+0x130>
 800b4ce:	7863      	ldrb	r3, [r4, #1]
 800b4d0:	2b2a      	cmp	r3, #42	@ 0x2a
 800b4d2:	d132      	bne.n	800b53a <_svfiprintf_r+0x186>
 800b4d4:	9b03      	ldr	r3, [sp, #12]
 800b4d6:	1d1a      	adds	r2, r3, #4
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	9203      	str	r2, [sp, #12]
 800b4dc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b4e0:	3402      	adds	r4, #2
 800b4e2:	9305      	str	r3, [sp, #20]
 800b4e4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b5a8 <_svfiprintf_r+0x1f4>
 800b4e8:	7821      	ldrb	r1, [r4, #0]
 800b4ea:	2203      	movs	r2, #3
 800b4ec:	4650      	mov	r0, sl
 800b4ee:	f7f4 fe6f 	bl	80001d0 <memchr>
 800b4f2:	b138      	cbz	r0, 800b504 <_svfiprintf_r+0x150>
 800b4f4:	9b04      	ldr	r3, [sp, #16]
 800b4f6:	eba0 000a 	sub.w	r0, r0, sl
 800b4fa:	2240      	movs	r2, #64	@ 0x40
 800b4fc:	4082      	lsls	r2, r0
 800b4fe:	4313      	orrs	r3, r2
 800b500:	3401      	adds	r4, #1
 800b502:	9304      	str	r3, [sp, #16]
 800b504:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b508:	4824      	ldr	r0, [pc, #144]	@ (800b59c <_svfiprintf_r+0x1e8>)
 800b50a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b50e:	2206      	movs	r2, #6
 800b510:	f7f4 fe5e 	bl	80001d0 <memchr>
 800b514:	2800      	cmp	r0, #0
 800b516:	d036      	beq.n	800b586 <_svfiprintf_r+0x1d2>
 800b518:	4b21      	ldr	r3, [pc, #132]	@ (800b5a0 <_svfiprintf_r+0x1ec>)
 800b51a:	bb1b      	cbnz	r3, 800b564 <_svfiprintf_r+0x1b0>
 800b51c:	9b03      	ldr	r3, [sp, #12]
 800b51e:	3307      	adds	r3, #7
 800b520:	f023 0307 	bic.w	r3, r3, #7
 800b524:	3308      	adds	r3, #8
 800b526:	9303      	str	r3, [sp, #12]
 800b528:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b52a:	4433      	add	r3, r6
 800b52c:	9309      	str	r3, [sp, #36]	@ 0x24
 800b52e:	e76a      	b.n	800b406 <_svfiprintf_r+0x52>
 800b530:	fb0c 3202 	mla	r2, ip, r2, r3
 800b534:	460c      	mov	r4, r1
 800b536:	2001      	movs	r0, #1
 800b538:	e7a8      	b.n	800b48c <_svfiprintf_r+0xd8>
 800b53a:	2300      	movs	r3, #0
 800b53c:	3401      	adds	r4, #1
 800b53e:	9305      	str	r3, [sp, #20]
 800b540:	4619      	mov	r1, r3
 800b542:	f04f 0c0a 	mov.w	ip, #10
 800b546:	4620      	mov	r0, r4
 800b548:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b54c:	3a30      	subs	r2, #48	@ 0x30
 800b54e:	2a09      	cmp	r2, #9
 800b550:	d903      	bls.n	800b55a <_svfiprintf_r+0x1a6>
 800b552:	2b00      	cmp	r3, #0
 800b554:	d0c6      	beq.n	800b4e4 <_svfiprintf_r+0x130>
 800b556:	9105      	str	r1, [sp, #20]
 800b558:	e7c4      	b.n	800b4e4 <_svfiprintf_r+0x130>
 800b55a:	fb0c 2101 	mla	r1, ip, r1, r2
 800b55e:	4604      	mov	r4, r0
 800b560:	2301      	movs	r3, #1
 800b562:	e7f0      	b.n	800b546 <_svfiprintf_r+0x192>
 800b564:	ab03      	add	r3, sp, #12
 800b566:	9300      	str	r3, [sp, #0]
 800b568:	462a      	mov	r2, r5
 800b56a:	4b0e      	ldr	r3, [pc, #56]	@ (800b5a4 <_svfiprintf_r+0x1f0>)
 800b56c:	a904      	add	r1, sp, #16
 800b56e:	4638      	mov	r0, r7
 800b570:	f7fd fe58 	bl	8009224 <_printf_float>
 800b574:	1c42      	adds	r2, r0, #1
 800b576:	4606      	mov	r6, r0
 800b578:	d1d6      	bne.n	800b528 <_svfiprintf_r+0x174>
 800b57a:	89ab      	ldrh	r3, [r5, #12]
 800b57c:	065b      	lsls	r3, r3, #25
 800b57e:	f53f af2d 	bmi.w	800b3dc <_svfiprintf_r+0x28>
 800b582:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b584:	e72c      	b.n	800b3e0 <_svfiprintf_r+0x2c>
 800b586:	ab03      	add	r3, sp, #12
 800b588:	9300      	str	r3, [sp, #0]
 800b58a:	462a      	mov	r2, r5
 800b58c:	4b05      	ldr	r3, [pc, #20]	@ (800b5a4 <_svfiprintf_r+0x1f0>)
 800b58e:	a904      	add	r1, sp, #16
 800b590:	4638      	mov	r0, r7
 800b592:	f7fe f8df 	bl	8009754 <_printf_i>
 800b596:	e7ed      	b.n	800b574 <_svfiprintf_r+0x1c0>
 800b598:	0800e458 	.word	0x0800e458
 800b59c:	0800e462 	.word	0x0800e462
 800b5a0:	08009225 	.word	0x08009225
 800b5a4:	0800b2fd 	.word	0x0800b2fd
 800b5a8:	0800e45e 	.word	0x0800e45e

0800b5ac <__sflush_r>:
 800b5ac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b5b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b5b4:	0716      	lsls	r6, r2, #28
 800b5b6:	4605      	mov	r5, r0
 800b5b8:	460c      	mov	r4, r1
 800b5ba:	d454      	bmi.n	800b666 <__sflush_r+0xba>
 800b5bc:	684b      	ldr	r3, [r1, #4]
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	dc02      	bgt.n	800b5c8 <__sflush_r+0x1c>
 800b5c2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	dd48      	ble.n	800b65a <__sflush_r+0xae>
 800b5c8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b5ca:	2e00      	cmp	r6, #0
 800b5cc:	d045      	beq.n	800b65a <__sflush_r+0xae>
 800b5ce:	2300      	movs	r3, #0
 800b5d0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b5d4:	682f      	ldr	r7, [r5, #0]
 800b5d6:	6a21      	ldr	r1, [r4, #32]
 800b5d8:	602b      	str	r3, [r5, #0]
 800b5da:	d030      	beq.n	800b63e <__sflush_r+0x92>
 800b5dc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b5de:	89a3      	ldrh	r3, [r4, #12]
 800b5e0:	0759      	lsls	r1, r3, #29
 800b5e2:	d505      	bpl.n	800b5f0 <__sflush_r+0x44>
 800b5e4:	6863      	ldr	r3, [r4, #4]
 800b5e6:	1ad2      	subs	r2, r2, r3
 800b5e8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b5ea:	b10b      	cbz	r3, 800b5f0 <__sflush_r+0x44>
 800b5ec:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b5ee:	1ad2      	subs	r2, r2, r3
 800b5f0:	2300      	movs	r3, #0
 800b5f2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b5f4:	6a21      	ldr	r1, [r4, #32]
 800b5f6:	4628      	mov	r0, r5
 800b5f8:	47b0      	blx	r6
 800b5fa:	1c43      	adds	r3, r0, #1
 800b5fc:	89a3      	ldrh	r3, [r4, #12]
 800b5fe:	d106      	bne.n	800b60e <__sflush_r+0x62>
 800b600:	6829      	ldr	r1, [r5, #0]
 800b602:	291d      	cmp	r1, #29
 800b604:	d82b      	bhi.n	800b65e <__sflush_r+0xb2>
 800b606:	4a2a      	ldr	r2, [pc, #168]	@ (800b6b0 <__sflush_r+0x104>)
 800b608:	410a      	asrs	r2, r1
 800b60a:	07d6      	lsls	r6, r2, #31
 800b60c:	d427      	bmi.n	800b65e <__sflush_r+0xb2>
 800b60e:	2200      	movs	r2, #0
 800b610:	6062      	str	r2, [r4, #4]
 800b612:	04d9      	lsls	r1, r3, #19
 800b614:	6922      	ldr	r2, [r4, #16]
 800b616:	6022      	str	r2, [r4, #0]
 800b618:	d504      	bpl.n	800b624 <__sflush_r+0x78>
 800b61a:	1c42      	adds	r2, r0, #1
 800b61c:	d101      	bne.n	800b622 <__sflush_r+0x76>
 800b61e:	682b      	ldr	r3, [r5, #0]
 800b620:	b903      	cbnz	r3, 800b624 <__sflush_r+0x78>
 800b622:	6560      	str	r0, [r4, #84]	@ 0x54
 800b624:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b626:	602f      	str	r7, [r5, #0]
 800b628:	b1b9      	cbz	r1, 800b65a <__sflush_r+0xae>
 800b62a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b62e:	4299      	cmp	r1, r3
 800b630:	d002      	beq.n	800b638 <__sflush_r+0x8c>
 800b632:	4628      	mov	r0, r5
 800b634:	f7ff f9e0 	bl	800a9f8 <_free_r>
 800b638:	2300      	movs	r3, #0
 800b63a:	6363      	str	r3, [r4, #52]	@ 0x34
 800b63c:	e00d      	b.n	800b65a <__sflush_r+0xae>
 800b63e:	2301      	movs	r3, #1
 800b640:	4628      	mov	r0, r5
 800b642:	47b0      	blx	r6
 800b644:	4602      	mov	r2, r0
 800b646:	1c50      	adds	r0, r2, #1
 800b648:	d1c9      	bne.n	800b5de <__sflush_r+0x32>
 800b64a:	682b      	ldr	r3, [r5, #0]
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d0c6      	beq.n	800b5de <__sflush_r+0x32>
 800b650:	2b1d      	cmp	r3, #29
 800b652:	d001      	beq.n	800b658 <__sflush_r+0xac>
 800b654:	2b16      	cmp	r3, #22
 800b656:	d11e      	bne.n	800b696 <__sflush_r+0xea>
 800b658:	602f      	str	r7, [r5, #0]
 800b65a:	2000      	movs	r0, #0
 800b65c:	e022      	b.n	800b6a4 <__sflush_r+0xf8>
 800b65e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b662:	b21b      	sxth	r3, r3
 800b664:	e01b      	b.n	800b69e <__sflush_r+0xf2>
 800b666:	690f      	ldr	r7, [r1, #16]
 800b668:	2f00      	cmp	r7, #0
 800b66a:	d0f6      	beq.n	800b65a <__sflush_r+0xae>
 800b66c:	0793      	lsls	r3, r2, #30
 800b66e:	680e      	ldr	r6, [r1, #0]
 800b670:	bf08      	it	eq
 800b672:	694b      	ldreq	r3, [r1, #20]
 800b674:	600f      	str	r7, [r1, #0]
 800b676:	bf18      	it	ne
 800b678:	2300      	movne	r3, #0
 800b67a:	eba6 0807 	sub.w	r8, r6, r7
 800b67e:	608b      	str	r3, [r1, #8]
 800b680:	f1b8 0f00 	cmp.w	r8, #0
 800b684:	dde9      	ble.n	800b65a <__sflush_r+0xae>
 800b686:	6a21      	ldr	r1, [r4, #32]
 800b688:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b68a:	4643      	mov	r3, r8
 800b68c:	463a      	mov	r2, r7
 800b68e:	4628      	mov	r0, r5
 800b690:	47b0      	blx	r6
 800b692:	2800      	cmp	r0, #0
 800b694:	dc08      	bgt.n	800b6a8 <__sflush_r+0xfc>
 800b696:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b69a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b69e:	81a3      	strh	r3, [r4, #12]
 800b6a0:	f04f 30ff 	mov.w	r0, #4294967295
 800b6a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b6a8:	4407      	add	r7, r0
 800b6aa:	eba8 0800 	sub.w	r8, r8, r0
 800b6ae:	e7e7      	b.n	800b680 <__sflush_r+0xd4>
 800b6b0:	dfbffffe 	.word	0xdfbffffe

0800b6b4 <_fflush_r>:
 800b6b4:	b538      	push	{r3, r4, r5, lr}
 800b6b6:	690b      	ldr	r3, [r1, #16]
 800b6b8:	4605      	mov	r5, r0
 800b6ba:	460c      	mov	r4, r1
 800b6bc:	b913      	cbnz	r3, 800b6c4 <_fflush_r+0x10>
 800b6be:	2500      	movs	r5, #0
 800b6c0:	4628      	mov	r0, r5
 800b6c2:	bd38      	pop	{r3, r4, r5, pc}
 800b6c4:	b118      	cbz	r0, 800b6ce <_fflush_r+0x1a>
 800b6c6:	6a03      	ldr	r3, [r0, #32]
 800b6c8:	b90b      	cbnz	r3, 800b6ce <_fflush_r+0x1a>
 800b6ca:	f7fe f9ef 	bl	8009aac <__sinit>
 800b6ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d0f3      	beq.n	800b6be <_fflush_r+0xa>
 800b6d6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b6d8:	07d0      	lsls	r0, r2, #31
 800b6da:	d404      	bmi.n	800b6e6 <_fflush_r+0x32>
 800b6dc:	0599      	lsls	r1, r3, #22
 800b6de:	d402      	bmi.n	800b6e6 <_fflush_r+0x32>
 800b6e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b6e2:	f7fe fb22 	bl	8009d2a <__retarget_lock_acquire_recursive>
 800b6e6:	4628      	mov	r0, r5
 800b6e8:	4621      	mov	r1, r4
 800b6ea:	f7ff ff5f 	bl	800b5ac <__sflush_r>
 800b6ee:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b6f0:	07da      	lsls	r2, r3, #31
 800b6f2:	4605      	mov	r5, r0
 800b6f4:	d4e4      	bmi.n	800b6c0 <_fflush_r+0xc>
 800b6f6:	89a3      	ldrh	r3, [r4, #12]
 800b6f8:	059b      	lsls	r3, r3, #22
 800b6fa:	d4e1      	bmi.n	800b6c0 <_fflush_r+0xc>
 800b6fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b6fe:	f7fe fb15 	bl	8009d2c <__retarget_lock_release_recursive>
 800b702:	e7dd      	b.n	800b6c0 <_fflush_r+0xc>

0800b704 <_sbrk_r>:
 800b704:	b538      	push	{r3, r4, r5, lr}
 800b706:	4d06      	ldr	r5, [pc, #24]	@ (800b720 <_sbrk_r+0x1c>)
 800b708:	2300      	movs	r3, #0
 800b70a:	4604      	mov	r4, r0
 800b70c:	4608      	mov	r0, r1
 800b70e:	602b      	str	r3, [r5, #0]
 800b710:	f7f8 fee4 	bl	80044dc <_sbrk>
 800b714:	1c43      	adds	r3, r0, #1
 800b716:	d102      	bne.n	800b71e <_sbrk_r+0x1a>
 800b718:	682b      	ldr	r3, [r5, #0]
 800b71a:	b103      	cbz	r3, 800b71e <_sbrk_r+0x1a>
 800b71c:	6023      	str	r3, [r4, #0]
 800b71e:	bd38      	pop	{r3, r4, r5, pc}
 800b720:	2000c7e0 	.word	0x2000c7e0

0800b724 <__assert_func>:
 800b724:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b726:	4614      	mov	r4, r2
 800b728:	461a      	mov	r2, r3
 800b72a:	4b09      	ldr	r3, [pc, #36]	@ (800b750 <__assert_func+0x2c>)
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	4605      	mov	r5, r0
 800b730:	68d8      	ldr	r0, [r3, #12]
 800b732:	b954      	cbnz	r4, 800b74a <__assert_func+0x26>
 800b734:	4b07      	ldr	r3, [pc, #28]	@ (800b754 <__assert_func+0x30>)
 800b736:	461c      	mov	r4, r3
 800b738:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b73c:	9100      	str	r1, [sp, #0]
 800b73e:	462b      	mov	r3, r5
 800b740:	4905      	ldr	r1, [pc, #20]	@ (800b758 <__assert_func+0x34>)
 800b742:	f000 f86f 	bl	800b824 <fiprintf>
 800b746:	f000 f87f 	bl	800b848 <abort>
 800b74a:	4b04      	ldr	r3, [pc, #16]	@ (800b75c <__assert_func+0x38>)
 800b74c:	e7f4      	b.n	800b738 <__assert_func+0x14>
 800b74e:	bf00      	nop
 800b750:	20000060 	.word	0x20000060
 800b754:	0800e4ae 	.word	0x0800e4ae
 800b758:	0800e480 	.word	0x0800e480
 800b75c:	0800e473 	.word	0x0800e473

0800b760 <_calloc_r>:
 800b760:	b570      	push	{r4, r5, r6, lr}
 800b762:	fba1 5402 	umull	r5, r4, r1, r2
 800b766:	b93c      	cbnz	r4, 800b778 <_calloc_r+0x18>
 800b768:	4629      	mov	r1, r5
 800b76a:	f7ff f9b9 	bl	800aae0 <_malloc_r>
 800b76e:	4606      	mov	r6, r0
 800b770:	b928      	cbnz	r0, 800b77e <_calloc_r+0x1e>
 800b772:	2600      	movs	r6, #0
 800b774:	4630      	mov	r0, r6
 800b776:	bd70      	pop	{r4, r5, r6, pc}
 800b778:	220c      	movs	r2, #12
 800b77a:	6002      	str	r2, [r0, #0]
 800b77c:	e7f9      	b.n	800b772 <_calloc_r+0x12>
 800b77e:	462a      	mov	r2, r5
 800b780:	4621      	mov	r1, r4
 800b782:	f7fe fa46 	bl	8009c12 <memset>
 800b786:	e7f5      	b.n	800b774 <_calloc_r+0x14>

0800b788 <__ascii_mbtowc>:
 800b788:	b082      	sub	sp, #8
 800b78a:	b901      	cbnz	r1, 800b78e <__ascii_mbtowc+0x6>
 800b78c:	a901      	add	r1, sp, #4
 800b78e:	b142      	cbz	r2, 800b7a2 <__ascii_mbtowc+0x1a>
 800b790:	b14b      	cbz	r3, 800b7a6 <__ascii_mbtowc+0x1e>
 800b792:	7813      	ldrb	r3, [r2, #0]
 800b794:	600b      	str	r3, [r1, #0]
 800b796:	7812      	ldrb	r2, [r2, #0]
 800b798:	1e10      	subs	r0, r2, #0
 800b79a:	bf18      	it	ne
 800b79c:	2001      	movne	r0, #1
 800b79e:	b002      	add	sp, #8
 800b7a0:	4770      	bx	lr
 800b7a2:	4610      	mov	r0, r2
 800b7a4:	e7fb      	b.n	800b79e <__ascii_mbtowc+0x16>
 800b7a6:	f06f 0001 	mvn.w	r0, #1
 800b7aa:	e7f8      	b.n	800b79e <__ascii_mbtowc+0x16>

0800b7ac <_realloc_r>:
 800b7ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b7b0:	4680      	mov	r8, r0
 800b7b2:	4615      	mov	r5, r2
 800b7b4:	460c      	mov	r4, r1
 800b7b6:	b921      	cbnz	r1, 800b7c2 <_realloc_r+0x16>
 800b7b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b7bc:	4611      	mov	r1, r2
 800b7be:	f7ff b98f 	b.w	800aae0 <_malloc_r>
 800b7c2:	b92a      	cbnz	r2, 800b7d0 <_realloc_r+0x24>
 800b7c4:	f7ff f918 	bl	800a9f8 <_free_r>
 800b7c8:	2400      	movs	r4, #0
 800b7ca:	4620      	mov	r0, r4
 800b7cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b7d0:	f000 f841 	bl	800b856 <_malloc_usable_size_r>
 800b7d4:	4285      	cmp	r5, r0
 800b7d6:	4606      	mov	r6, r0
 800b7d8:	d802      	bhi.n	800b7e0 <_realloc_r+0x34>
 800b7da:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800b7de:	d8f4      	bhi.n	800b7ca <_realloc_r+0x1e>
 800b7e0:	4629      	mov	r1, r5
 800b7e2:	4640      	mov	r0, r8
 800b7e4:	f7ff f97c 	bl	800aae0 <_malloc_r>
 800b7e8:	4607      	mov	r7, r0
 800b7ea:	2800      	cmp	r0, #0
 800b7ec:	d0ec      	beq.n	800b7c8 <_realloc_r+0x1c>
 800b7ee:	42b5      	cmp	r5, r6
 800b7f0:	462a      	mov	r2, r5
 800b7f2:	4621      	mov	r1, r4
 800b7f4:	bf28      	it	cs
 800b7f6:	4632      	movcs	r2, r6
 800b7f8:	f7fe faa1 	bl	8009d3e <memcpy>
 800b7fc:	4621      	mov	r1, r4
 800b7fe:	4640      	mov	r0, r8
 800b800:	f7ff f8fa 	bl	800a9f8 <_free_r>
 800b804:	463c      	mov	r4, r7
 800b806:	e7e0      	b.n	800b7ca <_realloc_r+0x1e>

0800b808 <__ascii_wctomb>:
 800b808:	4603      	mov	r3, r0
 800b80a:	4608      	mov	r0, r1
 800b80c:	b141      	cbz	r1, 800b820 <__ascii_wctomb+0x18>
 800b80e:	2aff      	cmp	r2, #255	@ 0xff
 800b810:	d904      	bls.n	800b81c <__ascii_wctomb+0x14>
 800b812:	228a      	movs	r2, #138	@ 0x8a
 800b814:	601a      	str	r2, [r3, #0]
 800b816:	f04f 30ff 	mov.w	r0, #4294967295
 800b81a:	4770      	bx	lr
 800b81c:	700a      	strb	r2, [r1, #0]
 800b81e:	2001      	movs	r0, #1
 800b820:	4770      	bx	lr
	...

0800b824 <fiprintf>:
 800b824:	b40e      	push	{r1, r2, r3}
 800b826:	b503      	push	{r0, r1, lr}
 800b828:	4601      	mov	r1, r0
 800b82a:	ab03      	add	r3, sp, #12
 800b82c:	4805      	ldr	r0, [pc, #20]	@ (800b844 <fiprintf+0x20>)
 800b82e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b832:	6800      	ldr	r0, [r0, #0]
 800b834:	9301      	str	r3, [sp, #4]
 800b836:	f000 f83f 	bl	800b8b8 <_vfiprintf_r>
 800b83a:	b002      	add	sp, #8
 800b83c:	f85d eb04 	ldr.w	lr, [sp], #4
 800b840:	b003      	add	sp, #12
 800b842:	4770      	bx	lr
 800b844:	20000060 	.word	0x20000060

0800b848 <abort>:
 800b848:	b508      	push	{r3, lr}
 800b84a:	2006      	movs	r0, #6
 800b84c:	f000 fa08 	bl	800bc60 <raise>
 800b850:	2001      	movs	r0, #1
 800b852:	f7f8 fdcb 	bl	80043ec <_exit>

0800b856 <_malloc_usable_size_r>:
 800b856:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b85a:	1f18      	subs	r0, r3, #4
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	bfbc      	itt	lt
 800b860:	580b      	ldrlt	r3, [r1, r0]
 800b862:	18c0      	addlt	r0, r0, r3
 800b864:	4770      	bx	lr

0800b866 <__sfputc_r>:
 800b866:	6893      	ldr	r3, [r2, #8]
 800b868:	3b01      	subs	r3, #1
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	b410      	push	{r4}
 800b86e:	6093      	str	r3, [r2, #8]
 800b870:	da08      	bge.n	800b884 <__sfputc_r+0x1e>
 800b872:	6994      	ldr	r4, [r2, #24]
 800b874:	42a3      	cmp	r3, r4
 800b876:	db01      	blt.n	800b87c <__sfputc_r+0x16>
 800b878:	290a      	cmp	r1, #10
 800b87a:	d103      	bne.n	800b884 <__sfputc_r+0x1e>
 800b87c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b880:	f000 b932 	b.w	800bae8 <__swbuf_r>
 800b884:	6813      	ldr	r3, [r2, #0]
 800b886:	1c58      	adds	r0, r3, #1
 800b888:	6010      	str	r0, [r2, #0]
 800b88a:	7019      	strb	r1, [r3, #0]
 800b88c:	4608      	mov	r0, r1
 800b88e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b892:	4770      	bx	lr

0800b894 <__sfputs_r>:
 800b894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b896:	4606      	mov	r6, r0
 800b898:	460f      	mov	r7, r1
 800b89a:	4614      	mov	r4, r2
 800b89c:	18d5      	adds	r5, r2, r3
 800b89e:	42ac      	cmp	r4, r5
 800b8a0:	d101      	bne.n	800b8a6 <__sfputs_r+0x12>
 800b8a2:	2000      	movs	r0, #0
 800b8a4:	e007      	b.n	800b8b6 <__sfputs_r+0x22>
 800b8a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b8aa:	463a      	mov	r2, r7
 800b8ac:	4630      	mov	r0, r6
 800b8ae:	f7ff ffda 	bl	800b866 <__sfputc_r>
 800b8b2:	1c43      	adds	r3, r0, #1
 800b8b4:	d1f3      	bne.n	800b89e <__sfputs_r+0xa>
 800b8b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b8b8 <_vfiprintf_r>:
 800b8b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8bc:	460d      	mov	r5, r1
 800b8be:	b09d      	sub	sp, #116	@ 0x74
 800b8c0:	4614      	mov	r4, r2
 800b8c2:	4698      	mov	r8, r3
 800b8c4:	4606      	mov	r6, r0
 800b8c6:	b118      	cbz	r0, 800b8d0 <_vfiprintf_r+0x18>
 800b8c8:	6a03      	ldr	r3, [r0, #32]
 800b8ca:	b90b      	cbnz	r3, 800b8d0 <_vfiprintf_r+0x18>
 800b8cc:	f7fe f8ee 	bl	8009aac <__sinit>
 800b8d0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b8d2:	07d9      	lsls	r1, r3, #31
 800b8d4:	d405      	bmi.n	800b8e2 <_vfiprintf_r+0x2a>
 800b8d6:	89ab      	ldrh	r3, [r5, #12]
 800b8d8:	059a      	lsls	r2, r3, #22
 800b8da:	d402      	bmi.n	800b8e2 <_vfiprintf_r+0x2a>
 800b8dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b8de:	f7fe fa24 	bl	8009d2a <__retarget_lock_acquire_recursive>
 800b8e2:	89ab      	ldrh	r3, [r5, #12]
 800b8e4:	071b      	lsls	r3, r3, #28
 800b8e6:	d501      	bpl.n	800b8ec <_vfiprintf_r+0x34>
 800b8e8:	692b      	ldr	r3, [r5, #16]
 800b8ea:	b99b      	cbnz	r3, 800b914 <_vfiprintf_r+0x5c>
 800b8ec:	4629      	mov	r1, r5
 800b8ee:	4630      	mov	r0, r6
 800b8f0:	f000 f938 	bl	800bb64 <__swsetup_r>
 800b8f4:	b170      	cbz	r0, 800b914 <_vfiprintf_r+0x5c>
 800b8f6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b8f8:	07dc      	lsls	r4, r3, #31
 800b8fa:	d504      	bpl.n	800b906 <_vfiprintf_r+0x4e>
 800b8fc:	f04f 30ff 	mov.w	r0, #4294967295
 800b900:	b01d      	add	sp, #116	@ 0x74
 800b902:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b906:	89ab      	ldrh	r3, [r5, #12]
 800b908:	0598      	lsls	r0, r3, #22
 800b90a:	d4f7      	bmi.n	800b8fc <_vfiprintf_r+0x44>
 800b90c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b90e:	f7fe fa0d 	bl	8009d2c <__retarget_lock_release_recursive>
 800b912:	e7f3      	b.n	800b8fc <_vfiprintf_r+0x44>
 800b914:	2300      	movs	r3, #0
 800b916:	9309      	str	r3, [sp, #36]	@ 0x24
 800b918:	2320      	movs	r3, #32
 800b91a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b91e:	f8cd 800c 	str.w	r8, [sp, #12]
 800b922:	2330      	movs	r3, #48	@ 0x30
 800b924:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800bad4 <_vfiprintf_r+0x21c>
 800b928:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b92c:	f04f 0901 	mov.w	r9, #1
 800b930:	4623      	mov	r3, r4
 800b932:	469a      	mov	sl, r3
 800b934:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b938:	b10a      	cbz	r2, 800b93e <_vfiprintf_r+0x86>
 800b93a:	2a25      	cmp	r2, #37	@ 0x25
 800b93c:	d1f9      	bne.n	800b932 <_vfiprintf_r+0x7a>
 800b93e:	ebba 0b04 	subs.w	fp, sl, r4
 800b942:	d00b      	beq.n	800b95c <_vfiprintf_r+0xa4>
 800b944:	465b      	mov	r3, fp
 800b946:	4622      	mov	r2, r4
 800b948:	4629      	mov	r1, r5
 800b94a:	4630      	mov	r0, r6
 800b94c:	f7ff ffa2 	bl	800b894 <__sfputs_r>
 800b950:	3001      	adds	r0, #1
 800b952:	f000 80a7 	beq.w	800baa4 <_vfiprintf_r+0x1ec>
 800b956:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b958:	445a      	add	r2, fp
 800b95a:	9209      	str	r2, [sp, #36]	@ 0x24
 800b95c:	f89a 3000 	ldrb.w	r3, [sl]
 800b960:	2b00      	cmp	r3, #0
 800b962:	f000 809f 	beq.w	800baa4 <_vfiprintf_r+0x1ec>
 800b966:	2300      	movs	r3, #0
 800b968:	f04f 32ff 	mov.w	r2, #4294967295
 800b96c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b970:	f10a 0a01 	add.w	sl, sl, #1
 800b974:	9304      	str	r3, [sp, #16]
 800b976:	9307      	str	r3, [sp, #28]
 800b978:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b97c:	931a      	str	r3, [sp, #104]	@ 0x68
 800b97e:	4654      	mov	r4, sl
 800b980:	2205      	movs	r2, #5
 800b982:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b986:	4853      	ldr	r0, [pc, #332]	@ (800bad4 <_vfiprintf_r+0x21c>)
 800b988:	f7f4 fc22 	bl	80001d0 <memchr>
 800b98c:	9a04      	ldr	r2, [sp, #16]
 800b98e:	b9d8      	cbnz	r0, 800b9c8 <_vfiprintf_r+0x110>
 800b990:	06d1      	lsls	r1, r2, #27
 800b992:	bf44      	itt	mi
 800b994:	2320      	movmi	r3, #32
 800b996:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b99a:	0713      	lsls	r3, r2, #28
 800b99c:	bf44      	itt	mi
 800b99e:	232b      	movmi	r3, #43	@ 0x2b
 800b9a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b9a4:	f89a 3000 	ldrb.w	r3, [sl]
 800b9a8:	2b2a      	cmp	r3, #42	@ 0x2a
 800b9aa:	d015      	beq.n	800b9d8 <_vfiprintf_r+0x120>
 800b9ac:	9a07      	ldr	r2, [sp, #28]
 800b9ae:	4654      	mov	r4, sl
 800b9b0:	2000      	movs	r0, #0
 800b9b2:	f04f 0c0a 	mov.w	ip, #10
 800b9b6:	4621      	mov	r1, r4
 800b9b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b9bc:	3b30      	subs	r3, #48	@ 0x30
 800b9be:	2b09      	cmp	r3, #9
 800b9c0:	d94b      	bls.n	800ba5a <_vfiprintf_r+0x1a2>
 800b9c2:	b1b0      	cbz	r0, 800b9f2 <_vfiprintf_r+0x13a>
 800b9c4:	9207      	str	r2, [sp, #28]
 800b9c6:	e014      	b.n	800b9f2 <_vfiprintf_r+0x13a>
 800b9c8:	eba0 0308 	sub.w	r3, r0, r8
 800b9cc:	fa09 f303 	lsl.w	r3, r9, r3
 800b9d0:	4313      	orrs	r3, r2
 800b9d2:	9304      	str	r3, [sp, #16]
 800b9d4:	46a2      	mov	sl, r4
 800b9d6:	e7d2      	b.n	800b97e <_vfiprintf_r+0xc6>
 800b9d8:	9b03      	ldr	r3, [sp, #12]
 800b9da:	1d19      	adds	r1, r3, #4
 800b9dc:	681b      	ldr	r3, [r3, #0]
 800b9de:	9103      	str	r1, [sp, #12]
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	bfbb      	ittet	lt
 800b9e4:	425b      	neglt	r3, r3
 800b9e6:	f042 0202 	orrlt.w	r2, r2, #2
 800b9ea:	9307      	strge	r3, [sp, #28]
 800b9ec:	9307      	strlt	r3, [sp, #28]
 800b9ee:	bfb8      	it	lt
 800b9f0:	9204      	strlt	r2, [sp, #16]
 800b9f2:	7823      	ldrb	r3, [r4, #0]
 800b9f4:	2b2e      	cmp	r3, #46	@ 0x2e
 800b9f6:	d10a      	bne.n	800ba0e <_vfiprintf_r+0x156>
 800b9f8:	7863      	ldrb	r3, [r4, #1]
 800b9fa:	2b2a      	cmp	r3, #42	@ 0x2a
 800b9fc:	d132      	bne.n	800ba64 <_vfiprintf_r+0x1ac>
 800b9fe:	9b03      	ldr	r3, [sp, #12]
 800ba00:	1d1a      	adds	r2, r3, #4
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	9203      	str	r2, [sp, #12]
 800ba06:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ba0a:	3402      	adds	r4, #2
 800ba0c:	9305      	str	r3, [sp, #20]
 800ba0e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800bae4 <_vfiprintf_r+0x22c>
 800ba12:	7821      	ldrb	r1, [r4, #0]
 800ba14:	2203      	movs	r2, #3
 800ba16:	4650      	mov	r0, sl
 800ba18:	f7f4 fbda 	bl	80001d0 <memchr>
 800ba1c:	b138      	cbz	r0, 800ba2e <_vfiprintf_r+0x176>
 800ba1e:	9b04      	ldr	r3, [sp, #16]
 800ba20:	eba0 000a 	sub.w	r0, r0, sl
 800ba24:	2240      	movs	r2, #64	@ 0x40
 800ba26:	4082      	lsls	r2, r0
 800ba28:	4313      	orrs	r3, r2
 800ba2a:	3401      	adds	r4, #1
 800ba2c:	9304      	str	r3, [sp, #16]
 800ba2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba32:	4829      	ldr	r0, [pc, #164]	@ (800bad8 <_vfiprintf_r+0x220>)
 800ba34:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ba38:	2206      	movs	r2, #6
 800ba3a:	f7f4 fbc9 	bl	80001d0 <memchr>
 800ba3e:	2800      	cmp	r0, #0
 800ba40:	d03f      	beq.n	800bac2 <_vfiprintf_r+0x20a>
 800ba42:	4b26      	ldr	r3, [pc, #152]	@ (800badc <_vfiprintf_r+0x224>)
 800ba44:	bb1b      	cbnz	r3, 800ba8e <_vfiprintf_r+0x1d6>
 800ba46:	9b03      	ldr	r3, [sp, #12]
 800ba48:	3307      	adds	r3, #7
 800ba4a:	f023 0307 	bic.w	r3, r3, #7
 800ba4e:	3308      	adds	r3, #8
 800ba50:	9303      	str	r3, [sp, #12]
 800ba52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ba54:	443b      	add	r3, r7
 800ba56:	9309      	str	r3, [sp, #36]	@ 0x24
 800ba58:	e76a      	b.n	800b930 <_vfiprintf_r+0x78>
 800ba5a:	fb0c 3202 	mla	r2, ip, r2, r3
 800ba5e:	460c      	mov	r4, r1
 800ba60:	2001      	movs	r0, #1
 800ba62:	e7a8      	b.n	800b9b6 <_vfiprintf_r+0xfe>
 800ba64:	2300      	movs	r3, #0
 800ba66:	3401      	adds	r4, #1
 800ba68:	9305      	str	r3, [sp, #20]
 800ba6a:	4619      	mov	r1, r3
 800ba6c:	f04f 0c0a 	mov.w	ip, #10
 800ba70:	4620      	mov	r0, r4
 800ba72:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ba76:	3a30      	subs	r2, #48	@ 0x30
 800ba78:	2a09      	cmp	r2, #9
 800ba7a:	d903      	bls.n	800ba84 <_vfiprintf_r+0x1cc>
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d0c6      	beq.n	800ba0e <_vfiprintf_r+0x156>
 800ba80:	9105      	str	r1, [sp, #20]
 800ba82:	e7c4      	b.n	800ba0e <_vfiprintf_r+0x156>
 800ba84:	fb0c 2101 	mla	r1, ip, r1, r2
 800ba88:	4604      	mov	r4, r0
 800ba8a:	2301      	movs	r3, #1
 800ba8c:	e7f0      	b.n	800ba70 <_vfiprintf_r+0x1b8>
 800ba8e:	ab03      	add	r3, sp, #12
 800ba90:	9300      	str	r3, [sp, #0]
 800ba92:	462a      	mov	r2, r5
 800ba94:	4b12      	ldr	r3, [pc, #72]	@ (800bae0 <_vfiprintf_r+0x228>)
 800ba96:	a904      	add	r1, sp, #16
 800ba98:	4630      	mov	r0, r6
 800ba9a:	f7fd fbc3 	bl	8009224 <_printf_float>
 800ba9e:	4607      	mov	r7, r0
 800baa0:	1c78      	adds	r0, r7, #1
 800baa2:	d1d6      	bne.n	800ba52 <_vfiprintf_r+0x19a>
 800baa4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800baa6:	07d9      	lsls	r1, r3, #31
 800baa8:	d405      	bmi.n	800bab6 <_vfiprintf_r+0x1fe>
 800baaa:	89ab      	ldrh	r3, [r5, #12]
 800baac:	059a      	lsls	r2, r3, #22
 800baae:	d402      	bmi.n	800bab6 <_vfiprintf_r+0x1fe>
 800bab0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bab2:	f7fe f93b 	bl	8009d2c <__retarget_lock_release_recursive>
 800bab6:	89ab      	ldrh	r3, [r5, #12]
 800bab8:	065b      	lsls	r3, r3, #25
 800baba:	f53f af1f 	bmi.w	800b8fc <_vfiprintf_r+0x44>
 800babe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bac0:	e71e      	b.n	800b900 <_vfiprintf_r+0x48>
 800bac2:	ab03      	add	r3, sp, #12
 800bac4:	9300      	str	r3, [sp, #0]
 800bac6:	462a      	mov	r2, r5
 800bac8:	4b05      	ldr	r3, [pc, #20]	@ (800bae0 <_vfiprintf_r+0x228>)
 800baca:	a904      	add	r1, sp, #16
 800bacc:	4630      	mov	r0, r6
 800bace:	f7fd fe41 	bl	8009754 <_printf_i>
 800bad2:	e7e4      	b.n	800ba9e <_vfiprintf_r+0x1e6>
 800bad4:	0800e458 	.word	0x0800e458
 800bad8:	0800e462 	.word	0x0800e462
 800badc:	08009225 	.word	0x08009225
 800bae0:	0800b895 	.word	0x0800b895
 800bae4:	0800e45e 	.word	0x0800e45e

0800bae8 <__swbuf_r>:
 800bae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800baea:	460e      	mov	r6, r1
 800baec:	4614      	mov	r4, r2
 800baee:	4605      	mov	r5, r0
 800baf0:	b118      	cbz	r0, 800bafa <__swbuf_r+0x12>
 800baf2:	6a03      	ldr	r3, [r0, #32]
 800baf4:	b90b      	cbnz	r3, 800bafa <__swbuf_r+0x12>
 800baf6:	f7fd ffd9 	bl	8009aac <__sinit>
 800bafa:	69a3      	ldr	r3, [r4, #24]
 800bafc:	60a3      	str	r3, [r4, #8]
 800bafe:	89a3      	ldrh	r3, [r4, #12]
 800bb00:	071a      	lsls	r2, r3, #28
 800bb02:	d501      	bpl.n	800bb08 <__swbuf_r+0x20>
 800bb04:	6923      	ldr	r3, [r4, #16]
 800bb06:	b943      	cbnz	r3, 800bb1a <__swbuf_r+0x32>
 800bb08:	4621      	mov	r1, r4
 800bb0a:	4628      	mov	r0, r5
 800bb0c:	f000 f82a 	bl	800bb64 <__swsetup_r>
 800bb10:	b118      	cbz	r0, 800bb1a <__swbuf_r+0x32>
 800bb12:	f04f 37ff 	mov.w	r7, #4294967295
 800bb16:	4638      	mov	r0, r7
 800bb18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bb1a:	6823      	ldr	r3, [r4, #0]
 800bb1c:	6922      	ldr	r2, [r4, #16]
 800bb1e:	1a98      	subs	r0, r3, r2
 800bb20:	6963      	ldr	r3, [r4, #20]
 800bb22:	b2f6      	uxtb	r6, r6
 800bb24:	4283      	cmp	r3, r0
 800bb26:	4637      	mov	r7, r6
 800bb28:	dc05      	bgt.n	800bb36 <__swbuf_r+0x4e>
 800bb2a:	4621      	mov	r1, r4
 800bb2c:	4628      	mov	r0, r5
 800bb2e:	f7ff fdc1 	bl	800b6b4 <_fflush_r>
 800bb32:	2800      	cmp	r0, #0
 800bb34:	d1ed      	bne.n	800bb12 <__swbuf_r+0x2a>
 800bb36:	68a3      	ldr	r3, [r4, #8]
 800bb38:	3b01      	subs	r3, #1
 800bb3a:	60a3      	str	r3, [r4, #8]
 800bb3c:	6823      	ldr	r3, [r4, #0]
 800bb3e:	1c5a      	adds	r2, r3, #1
 800bb40:	6022      	str	r2, [r4, #0]
 800bb42:	701e      	strb	r6, [r3, #0]
 800bb44:	6962      	ldr	r2, [r4, #20]
 800bb46:	1c43      	adds	r3, r0, #1
 800bb48:	429a      	cmp	r2, r3
 800bb4a:	d004      	beq.n	800bb56 <__swbuf_r+0x6e>
 800bb4c:	89a3      	ldrh	r3, [r4, #12]
 800bb4e:	07db      	lsls	r3, r3, #31
 800bb50:	d5e1      	bpl.n	800bb16 <__swbuf_r+0x2e>
 800bb52:	2e0a      	cmp	r6, #10
 800bb54:	d1df      	bne.n	800bb16 <__swbuf_r+0x2e>
 800bb56:	4621      	mov	r1, r4
 800bb58:	4628      	mov	r0, r5
 800bb5a:	f7ff fdab 	bl	800b6b4 <_fflush_r>
 800bb5e:	2800      	cmp	r0, #0
 800bb60:	d0d9      	beq.n	800bb16 <__swbuf_r+0x2e>
 800bb62:	e7d6      	b.n	800bb12 <__swbuf_r+0x2a>

0800bb64 <__swsetup_r>:
 800bb64:	b538      	push	{r3, r4, r5, lr}
 800bb66:	4b29      	ldr	r3, [pc, #164]	@ (800bc0c <__swsetup_r+0xa8>)
 800bb68:	4605      	mov	r5, r0
 800bb6a:	6818      	ldr	r0, [r3, #0]
 800bb6c:	460c      	mov	r4, r1
 800bb6e:	b118      	cbz	r0, 800bb78 <__swsetup_r+0x14>
 800bb70:	6a03      	ldr	r3, [r0, #32]
 800bb72:	b90b      	cbnz	r3, 800bb78 <__swsetup_r+0x14>
 800bb74:	f7fd ff9a 	bl	8009aac <__sinit>
 800bb78:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bb7c:	0719      	lsls	r1, r3, #28
 800bb7e:	d422      	bmi.n	800bbc6 <__swsetup_r+0x62>
 800bb80:	06da      	lsls	r2, r3, #27
 800bb82:	d407      	bmi.n	800bb94 <__swsetup_r+0x30>
 800bb84:	2209      	movs	r2, #9
 800bb86:	602a      	str	r2, [r5, #0]
 800bb88:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bb8c:	81a3      	strh	r3, [r4, #12]
 800bb8e:	f04f 30ff 	mov.w	r0, #4294967295
 800bb92:	e033      	b.n	800bbfc <__swsetup_r+0x98>
 800bb94:	0758      	lsls	r0, r3, #29
 800bb96:	d512      	bpl.n	800bbbe <__swsetup_r+0x5a>
 800bb98:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bb9a:	b141      	cbz	r1, 800bbae <__swsetup_r+0x4a>
 800bb9c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bba0:	4299      	cmp	r1, r3
 800bba2:	d002      	beq.n	800bbaa <__swsetup_r+0x46>
 800bba4:	4628      	mov	r0, r5
 800bba6:	f7fe ff27 	bl	800a9f8 <_free_r>
 800bbaa:	2300      	movs	r3, #0
 800bbac:	6363      	str	r3, [r4, #52]	@ 0x34
 800bbae:	89a3      	ldrh	r3, [r4, #12]
 800bbb0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800bbb4:	81a3      	strh	r3, [r4, #12]
 800bbb6:	2300      	movs	r3, #0
 800bbb8:	6063      	str	r3, [r4, #4]
 800bbba:	6923      	ldr	r3, [r4, #16]
 800bbbc:	6023      	str	r3, [r4, #0]
 800bbbe:	89a3      	ldrh	r3, [r4, #12]
 800bbc0:	f043 0308 	orr.w	r3, r3, #8
 800bbc4:	81a3      	strh	r3, [r4, #12]
 800bbc6:	6923      	ldr	r3, [r4, #16]
 800bbc8:	b94b      	cbnz	r3, 800bbde <__swsetup_r+0x7a>
 800bbca:	89a3      	ldrh	r3, [r4, #12]
 800bbcc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800bbd0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bbd4:	d003      	beq.n	800bbde <__swsetup_r+0x7a>
 800bbd6:	4621      	mov	r1, r4
 800bbd8:	4628      	mov	r0, r5
 800bbda:	f000 f883 	bl	800bce4 <__smakebuf_r>
 800bbde:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bbe2:	f013 0201 	ands.w	r2, r3, #1
 800bbe6:	d00a      	beq.n	800bbfe <__swsetup_r+0x9a>
 800bbe8:	2200      	movs	r2, #0
 800bbea:	60a2      	str	r2, [r4, #8]
 800bbec:	6962      	ldr	r2, [r4, #20]
 800bbee:	4252      	negs	r2, r2
 800bbf0:	61a2      	str	r2, [r4, #24]
 800bbf2:	6922      	ldr	r2, [r4, #16]
 800bbf4:	b942      	cbnz	r2, 800bc08 <__swsetup_r+0xa4>
 800bbf6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800bbfa:	d1c5      	bne.n	800bb88 <__swsetup_r+0x24>
 800bbfc:	bd38      	pop	{r3, r4, r5, pc}
 800bbfe:	0799      	lsls	r1, r3, #30
 800bc00:	bf58      	it	pl
 800bc02:	6962      	ldrpl	r2, [r4, #20]
 800bc04:	60a2      	str	r2, [r4, #8]
 800bc06:	e7f4      	b.n	800bbf2 <__swsetup_r+0x8e>
 800bc08:	2000      	movs	r0, #0
 800bc0a:	e7f7      	b.n	800bbfc <__swsetup_r+0x98>
 800bc0c:	20000060 	.word	0x20000060

0800bc10 <_raise_r>:
 800bc10:	291f      	cmp	r1, #31
 800bc12:	b538      	push	{r3, r4, r5, lr}
 800bc14:	4605      	mov	r5, r0
 800bc16:	460c      	mov	r4, r1
 800bc18:	d904      	bls.n	800bc24 <_raise_r+0x14>
 800bc1a:	2316      	movs	r3, #22
 800bc1c:	6003      	str	r3, [r0, #0]
 800bc1e:	f04f 30ff 	mov.w	r0, #4294967295
 800bc22:	bd38      	pop	{r3, r4, r5, pc}
 800bc24:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800bc26:	b112      	cbz	r2, 800bc2e <_raise_r+0x1e>
 800bc28:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bc2c:	b94b      	cbnz	r3, 800bc42 <_raise_r+0x32>
 800bc2e:	4628      	mov	r0, r5
 800bc30:	f000 f830 	bl	800bc94 <_getpid_r>
 800bc34:	4622      	mov	r2, r4
 800bc36:	4601      	mov	r1, r0
 800bc38:	4628      	mov	r0, r5
 800bc3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bc3e:	f000 b817 	b.w	800bc70 <_kill_r>
 800bc42:	2b01      	cmp	r3, #1
 800bc44:	d00a      	beq.n	800bc5c <_raise_r+0x4c>
 800bc46:	1c59      	adds	r1, r3, #1
 800bc48:	d103      	bne.n	800bc52 <_raise_r+0x42>
 800bc4a:	2316      	movs	r3, #22
 800bc4c:	6003      	str	r3, [r0, #0]
 800bc4e:	2001      	movs	r0, #1
 800bc50:	e7e7      	b.n	800bc22 <_raise_r+0x12>
 800bc52:	2100      	movs	r1, #0
 800bc54:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800bc58:	4620      	mov	r0, r4
 800bc5a:	4798      	blx	r3
 800bc5c:	2000      	movs	r0, #0
 800bc5e:	e7e0      	b.n	800bc22 <_raise_r+0x12>

0800bc60 <raise>:
 800bc60:	4b02      	ldr	r3, [pc, #8]	@ (800bc6c <raise+0xc>)
 800bc62:	4601      	mov	r1, r0
 800bc64:	6818      	ldr	r0, [r3, #0]
 800bc66:	f7ff bfd3 	b.w	800bc10 <_raise_r>
 800bc6a:	bf00      	nop
 800bc6c:	20000060 	.word	0x20000060

0800bc70 <_kill_r>:
 800bc70:	b538      	push	{r3, r4, r5, lr}
 800bc72:	4d07      	ldr	r5, [pc, #28]	@ (800bc90 <_kill_r+0x20>)
 800bc74:	2300      	movs	r3, #0
 800bc76:	4604      	mov	r4, r0
 800bc78:	4608      	mov	r0, r1
 800bc7a:	4611      	mov	r1, r2
 800bc7c:	602b      	str	r3, [r5, #0]
 800bc7e:	f7f8 fba5 	bl	80043cc <_kill>
 800bc82:	1c43      	adds	r3, r0, #1
 800bc84:	d102      	bne.n	800bc8c <_kill_r+0x1c>
 800bc86:	682b      	ldr	r3, [r5, #0]
 800bc88:	b103      	cbz	r3, 800bc8c <_kill_r+0x1c>
 800bc8a:	6023      	str	r3, [r4, #0]
 800bc8c:	bd38      	pop	{r3, r4, r5, pc}
 800bc8e:	bf00      	nop
 800bc90:	2000c7e0 	.word	0x2000c7e0

0800bc94 <_getpid_r>:
 800bc94:	f7f8 bb92 	b.w	80043bc <_getpid>

0800bc98 <__swhatbuf_r>:
 800bc98:	b570      	push	{r4, r5, r6, lr}
 800bc9a:	460c      	mov	r4, r1
 800bc9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bca0:	2900      	cmp	r1, #0
 800bca2:	b096      	sub	sp, #88	@ 0x58
 800bca4:	4615      	mov	r5, r2
 800bca6:	461e      	mov	r6, r3
 800bca8:	da0d      	bge.n	800bcc6 <__swhatbuf_r+0x2e>
 800bcaa:	89a3      	ldrh	r3, [r4, #12]
 800bcac:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800bcb0:	f04f 0100 	mov.w	r1, #0
 800bcb4:	bf14      	ite	ne
 800bcb6:	2340      	movne	r3, #64	@ 0x40
 800bcb8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800bcbc:	2000      	movs	r0, #0
 800bcbe:	6031      	str	r1, [r6, #0]
 800bcc0:	602b      	str	r3, [r5, #0]
 800bcc2:	b016      	add	sp, #88	@ 0x58
 800bcc4:	bd70      	pop	{r4, r5, r6, pc}
 800bcc6:	466a      	mov	r2, sp
 800bcc8:	f000 f848 	bl	800bd5c <_fstat_r>
 800bccc:	2800      	cmp	r0, #0
 800bcce:	dbec      	blt.n	800bcaa <__swhatbuf_r+0x12>
 800bcd0:	9901      	ldr	r1, [sp, #4]
 800bcd2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800bcd6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800bcda:	4259      	negs	r1, r3
 800bcdc:	4159      	adcs	r1, r3
 800bcde:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800bce2:	e7eb      	b.n	800bcbc <__swhatbuf_r+0x24>

0800bce4 <__smakebuf_r>:
 800bce4:	898b      	ldrh	r3, [r1, #12]
 800bce6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bce8:	079d      	lsls	r5, r3, #30
 800bcea:	4606      	mov	r6, r0
 800bcec:	460c      	mov	r4, r1
 800bcee:	d507      	bpl.n	800bd00 <__smakebuf_r+0x1c>
 800bcf0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800bcf4:	6023      	str	r3, [r4, #0]
 800bcf6:	6123      	str	r3, [r4, #16]
 800bcf8:	2301      	movs	r3, #1
 800bcfa:	6163      	str	r3, [r4, #20]
 800bcfc:	b003      	add	sp, #12
 800bcfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bd00:	ab01      	add	r3, sp, #4
 800bd02:	466a      	mov	r2, sp
 800bd04:	f7ff ffc8 	bl	800bc98 <__swhatbuf_r>
 800bd08:	9f00      	ldr	r7, [sp, #0]
 800bd0a:	4605      	mov	r5, r0
 800bd0c:	4639      	mov	r1, r7
 800bd0e:	4630      	mov	r0, r6
 800bd10:	f7fe fee6 	bl	800aae0 <_malloc_r>
 800bd14:	b948      	cbnz	r0, 800bd2a <__smakebuf_r+0x46>
 800bd16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bd1a:	059a      	lsls	r2, r3, #22
 800bd1c:	d4ee      	bmi.n	800bcfc <__smakebuf_r+0x18>
 800bd1e:	f023 0303 	bic.w	r3, r3, #3
 800bd22:	f043 0302 	orr.w	r3, r3, #2
 800bd26:	81a3      	strh	r3, [r4, #12]
 800bd28:	e7e2      	b.n	800bcf0 <__smakebuf_r+0xc>
 800bd2a:	89a3      	ldrh	r3, [r4, #12]
 800bd2c:	6020      	str	r0, [r4, #0]
 800bd2e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bd32:	81a3      	strh	r3, [r4, #12]
 800bd34:	9b01      	ldr	r3, [sp, #4]
 800bd36:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800bd3a:	b15b      	cbz	r3, 800bd54 <__smakebuf_r+0x70>
 800bd3c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bd40:	4630      	mov	r0, r6
 800bd42:	f000 f81d 	bl	800bd80 <_isatty_r>
 800bd46:	b128      	cbz	r0, 800bd54 <__smakebuf_r+0x70>
 800bd48:	89a3      	ldrh	r3, [r4, #12]
 800bd4a:	f023 0303 	bic.w	r3, r3, #3
 800bd4e:	f043 0301 	orr.w	r3, r3, #1
 800bd52:	81a3      	strh	r3, [r4, #12]
 800bd54:	89a3      	ldrh	r3, [r4, #12]
 800bd56:	431d      	orrs	r5, r3
 800bd58:	81a5      	strh	r5, [r4, #12]
 800bd5a:	e7cf      	b.n	800bcfc <__smakebuf_r+0x18>

0800bd5c <_fstat_r>:
 800bd5c:	b538      	push	{r3, r4, r5, lr}
 800bd5e:	4d07      	ldr	r5, [pc, #28]	@ (800bd7c <_fstat_r+0x20>)
 800bd60:	2300      	movs	r3, #0
 800bd62:	4604      	mov	r4, r0
 800bd64:	4608      	mov	r0, r1
 800bd66:	4611      	mov	r1, r2
 800bd68:	602b      	str	r3, [r5, #0]
 800bd6a:	f7f8 fb8f 	bl	800448c <_fstat>
 800bd6e:	1c43      	adds	r3, r0, #1
 800bd70:	d102      	bne.n	800bd78 <_fstat_r+0x1c>
 800bd72:	682b      	ldr	r3, [r5, #0]
 800bd74:	b103      	cbz	r3, 800bd78 <_fstat_r+0x1c>
 800bd76:	6023      	str	r3, [r4, #0]
 800bd78:	bd38      	pop	{r3, r4, r5, pc}
 800bd7a:	bf00      	nop
 800bd7c:	2000c7e0 	.word	0x2000c7e0

0800bd80 <_isatty_r>:
 800bd80:	b538      	push	{r3, r4, r5, lr}
 800bd82:	4d06      	ldr	r5, [pc, #24]	@ (800bd9c <_isatty_r+0x1c>)
 800bd84:	2300      	movs	r3, #0
 800bd86:	4604      	mov	r4, r0
 800bd88:	4608      	mov	r0, r1
 800bd8a:	602b      	str	r3, [r5, #0]
 800bd8c:	f7f8 fb8e 	bl	80044ac <_isatty>
 800bd90:	1c43      	adds	r3, r0, #1
 800bd92:	d102      	bne.n	800bd9a <_isatty_r+0x1a>
 800bd94:	682b      	ldr	r3, [r5, #0]
 800bd96:	b103      	cbz	r3, 800bd9a <_isatty_r+0x1a>
 800bd98:	6023      	str	r3, [r4, #0]
 800bd9a:	bd38      	pop	{r3, r4, r5, pc}
 800bd9c:	2000c7e0 	.word	0x2000c7e0

0800bda0 <atan2>:
 800bda0:	f000 bbf6 	b.w	800c590 <__ieee754_atan2>

0800bda4 <pow>:
 800bda4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bda6:	ed2d 8b02 	vpush	{d8}
 800bdaa:	eeb0 8a40 	vmov.f32	s16, s0
 800bdae:	eef0 8a60 	vmov.f32	s17, s1
 800bdb2:	ec55 4b11 	vmov	r4, r5, d1
 800bdb6:	f000 fcb3 	bl	800c720 <__ieee754_pow>
 800bdba:	4622      	mov	r2, r4
 800bdbc:	462b      	mov	r3, r5
 800bdbe:	4620      	mov	r0, r4
 800bdc0:	4629      	mov	r1, r5
 800bdc2:	ec57 6b10 	vmov	r6, r7, d0
 800bdc6:	f7f4 feb1 	bl	8000b2c <__aeabi_dcmpun>
 800bdca:	2800      	cmp	r0, #0
 800bdcc:	d13b      	bne.n	800be46 <pow+0xa2>
 800bdce:	ec51 0b18 	vmov	r0, r1, d8
 800bdd2:	2200      	movs	r2, #0
 800bdd4:	2300      	movs	r3, #0
 800bdd6:	f7f4 fe77 	bl	8000ac8 <__aeabi_dcmpeq>
 800bdda:	b1b8      	cbz	r0, 800be0c <pow+0x68>
 800bddc:	2200      	movs	r2, #0
 800bdde:	2300      	movs	r3, #0
 800bde0:	4620      	mov	r0, r4
 800bde2:	4629      	mov	r1, r5
 800bde4:	f7f4 fe70 	bl	8000ac8 <__aeabi_dcmpeq>
 800bde8:	2800      	cmp	r0, #0
 800bdea:	d146      	bne.n	800be7a <pow+0xd6>
 800bdec:	ec45 4b10 	vmov	d0, r4, r5
 800bdf0:	f000 f91e 	bl	800c030 <finite>
 800bdf4:	b338      	cbz	r0, 800be46 <pow+0xa2>
 800bdf6:	2200      	movs	r2, #0
 800bdf8:	2300      	movs	r3, #0
 800bdfa:	4620      	mov	r0, r4
 800bdfc:	4629      	mov	r1, r5
 800bdfe:	f7f4 fe6d 	bl	8000adc <__aeabi_dcmplt>
 800be02:	b300      	cbz	r0, 800be46 <pow+0xa2>
 800be04:	f7fd ff66 	bl	8009cd4 <__errno>
 800be08:	2322      	movs	r3, #34	@ 0x22
 800be0a:	e01b      	b.n	800be44 <pow+0xa0>
 800be0c:	ec47 6b10 	vmov	d0, r6, r7
 800be10:	f000 f90e 	bl	800c030 <finite>
 800be14:	b9e0      	cbnz	r0, 800be50 <pow+0xac>
 800be16:	eeb0 0a48 	vmov.f32	s0, s16
 800be1a:	eef0 0a68 	vmov.f32	s1, s17
 800be1e:	f000 f907 	bl	800c030 <finite>
 800be22:	b1a8      	cbz	r0, 800be50 <pow+0xac>
 800be24:	ec45 4b10 	vmov	d0, r4, r5
 800be28:	f000 f902 	bl	800c030 <finite>
 800be2c:	b180      	cbz	r0, 800be50 <pow+0xac>
 800be2e:	4632      	mov	r2, r6
 800be30:	463b      	mov	r3, r7
 800be32:	4630      	mov	r0, r6
 800be34:	4639      	mov	r1, r7
 800be36:	f7f4 fe79 	bl	8000b2c <__aeabi_dcmpun>
 800be3a:	2800      	cmp	r0, #0
 800be3c:	d0e2      	beq.n	800be04 <pow+0x60>
 800be3e:	f7fd ff49 	bl	8009cd4 <__errno>
 800be42:	2321      	movs	r3, #33	@ 0x21
 800be44:	6003      	str	r3, [r0, #0]
 800be46:	ecbd 8b02 	vpop	{d8}
 800be4a:	ec47 6b10 	vmov	d0, r6, r7
 800be4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800be50:	2200      	movs	r2, #0
 800be52:	2300      	movs	r3, #0
 800be54:	4630      	mov	r0, r6
 800be56:	4639      	mov	r1, r7
 800be58:	f7f4 fe36 	bl	8000ac8 <__aeabi_dcmpeq>
 800be5c:	2800      	cmp	r0, #0
 800be5e:	d0f2      	beq.n	800be46 <pow+0xa2>
 800be60:	eeb0 0a48 	vmov.f32	s0, s16
 800be64:	eef0 0a68 	vmov.f32	s1, s17
 800be68:	f000 f8e2 	bl	800c030 <finite>
 800be6c:	2800      	cmp	r0, #0
 800be6e:	d0ea      	beq.n	800be46 <pow+0xa2>
 800be70:	ec45 4b10 	vmov	d0, r4, r5
 800be74:	f000 f8dc 	bl	800c030 <finite>
 800be78:	e7c3      	b.n	800be02 <pow+0x5e>
 800be7a:	4f01      	ldr	r7, [pc, #4]	@ (800be80 <pow+0xdc>)
 800be7c:	2600      	movs	r6, #0
 800be7e:	e7e2      	b.n	800be46 <pow+0xa2>
 800be80:	3ff00000 	.word	0x3ff00000

0800be84 <sqrt>:
 800be84:	b538      	push	{r3, r4, r5, lr}
 800be86:	ed2d 8b02 	vpush	{d8}
 800be8a:	ec55 4b10 	vmov	r4, r5, d0
 800be8e:	f000 f8db 	bl	800c048 <__ieee754_sqrt>
 800be92:	4622      	mov	r2, r4
 800be94:	462b      	mov	r3, r5
 800be96:	4620      	mov	r0, r4
 800be98:	4629      	mov	r1, r5
 800be9a:	eeb0 8a40 	vmov.f32	s16, s0
 800be9e:	eef0 8a60 	vmov.f32	s17, s1
 800bea2:	f7f4 fe43 	bl	8000b2c <__aeabi_dcmpun>
 800bea6:	b990      	cbnz	r0, 800bece <sqrt+0x4a>
 800bea8:	2200      	movs	r2, #0
 800beaa:	2300      	movs	r3, #0
 800beac:	4620      	mov	r0, r4
 800beae:	4629      	mov	r1, r5
 800beb0:	f7f4 fe14 	bl	8000adc <__aeabi_dcmplt>
 800beb4:	b158      	cbz	r0, 800bece <sqrt+0x4a>
 800beb6:	f7fd ff0d 	bl	8009cd4 <__errno>
 800beba:	2321      	movs	r3, #33	@ 0x21
 800bebc:	6003      	str	r3, [r0, #0]
 800bebe:	2200      	movs	r2, #0
 800bec0:	2300      	movs	r3, #0
 800bec2:	4610      	mov	r0, r2
 800bec4:	4619      	mov	r1, r3
 800bec6:	f7f4 fcc1 	bl	800084c <__aeabi_ddiv>
 800beca:	ec41 0b18 	vmov	d8, r0, r1
 800bece:	eeb0 0a48 	vmov.f32	s0, s16
 800bed2:	eef0 0a68 	vmov.f32	s1, s17
 800bed6:	ecbd 8b02 	vpop	{d8}
 800beda:	bd38      	pop	{r3, r4, r5, pc}
 800bedc:	0000      	movs	r0, r0
	...

0800bee0 <cos>:
 800bee0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bee2:	ec53 2b10 	vmov	r2, r3, d0
 800bee6:	4826      	ldr	r0, [pc, #152]	@ (800bf80 <cos+0xa0>)
 800bee8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800beec:	4281      	cmp	r1, r0
 800beee:	d806      	bhi.n	800befe <cos+0x1e>
 800bef0:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 800bf78 <cos+0x98>
 800bef4:	b005      	add	sp, #20
 800bef6:	f85d eb04 	ldr.w	lr, [sp], #4
 800befa:	f000 b9c5 	b.w	800c288 <__kernel_cos>
 800befe:	4821      	ldr	r0, [pc, #132]	@ (800bf84 <cos+0xa4>)
 800bf00:	4281      	cmp	r1, r0
 800bf02:	d908      	bls.n	800bf16 <cos+0x36>
 800bf04:	4610      	mov	r0, r2
 800bf06:	4619      	mov	r1, r3
 800bf08:	f7f4 f9be 	bl	8000288 <__aeabi_dsub>
 800bf0c:	ec41 0b10 	vmov	d0, r0, r1
 800bf10:	b005      	add	sp, #20
 800bf12:	f85d fb04 	ldr.w	pc, [sp], #4
 800bf16:	4668      	mov	r0, sp
 800bf18:	f001 f946 	bl	800d1a8 <__ieee754_rem_pio2>
 800bf1c:	f000 0003 	and.w	r0, r0, #3
 800bf20:	2801      	cmp	r0, #1
 800bf22:	d00b      	beq.n	800bf3c <cos+0x5c>
 800bf24:	2802      	cmp	r0, #2
 800bf26:	d015      	beq.n	800bf54 <cos+0x74>
 800bf28:	b9d8      	cbnz	r0, 800bf62 <cos+0x82>
 800bf2a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800bf2e:	ed9d 0b00 	vldr	d0, [sp]
 800bf32:	f000 f9a9 	bl	800c288 <__kernel_cos>
 800bf36:	ec51 0b10 	vmov	r0, r1, d0
 800bf3a:	e7e7      	b.n	800bf0c <cos+0x2c>
 800bf3c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800bf40:	ed9d 0b00 	vldr	d0, [sp]
 800bf44:	f000 fa68 	bl	800c418 <__kernel_sin>
 800bf48:	ec53 2b10 	vmov	r2, r3, d0
 800bf4c:	4610      	mov	r0, r2
 800bf4e:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800bf52:	e7db      	b.n	800bf0c <cos+0x2c>
 800bf54:	ed9d 1b02 	vldr	d1, [sp, #8]
 800bf58:	ed9d 0b00 	vldr	d0, [sp]
 800bf5c:	f000 f994 	bl	800c288 <__kernel_cos>
 800bf60:	e7f2      	b.n	800bf48 <cos+0x68>
 800bf62:	ed9d 1b02 	vldr	d1, [sp, #8]
 800bf66:	ed9d 0b00 	vldr	d0, [sp]
 800bf6a:	2001      	movs	r0, #1
 800bf6c:	f000 fa54 	bl	800c418 <__kernel_sin>
 800bf70:	e7e1      	b.n	800bf36 <cos+0x56>
 800bf72:	bf00      	nop
 800bf74:	f3af 8000 	nop.w
	...
 800bf80:	3fe921fb 	.word	0x3fe921fb
 800bf84:	7fefffff 	.word	0x7fefffff

0800bf88 <sin>:
 800bf88:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bf8a:	ec53 2b10 	vmov	r2, r3, d0
 800bf8e:	4826      	ldr	r0, [pc, #152]	@ (800c028 <sin+0xa0>)
 800bf90:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800bf94:	4281      	cmp	r1, r0
 800bf96:	d807      	bhi.n	800bfa8 <sin+0x20>
 800bf98:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 800c020 <sin+0x98>
 800bf9c:	2000      	movs	r0, #0
 800bf9e:	b005      	add	sp, #20
 800bfa0:	f85d eb04 	ldr.w	lr, [sp], #4
 800bfa4:	f000 ba38 	b.w	800c418 <__kernel_sin>
 800bfa8:	4820      	ldr	r0, [pc, #128]	@ (800c02c <sin+0xa4>)
 800bfaa:	4281      	cmp	r1, r0
 800bfac:	d908      	bls.n	800bfc0 <sin+0x38>
 800bfae:	4610      	mov	r0, r2
 800bfb0:	4619      	mov	r1, r3
 800bfb2:	f7f4 f969 	bl	8000288 <__aeabi_dsub>
 800bfb6:	ec41 0b10 	vmov	d0, r0, r1
 800bfba:	b005      	add	sp, #20
 800bfbc:	f85d fb04 	ldr.w	pc, [sp], #4
 800bfc0:	4668      	mov	r0, sp
 800bfc2:	f001 f8f1 	bl	800d1a8 <__ieee754_rem_pio2>
 800bfc6:	f000 0003 	and.w	r0, r0, #3
 800bfca:	2801      	cmp	r0, #1
 800bfcc:	d00c      	beq.n	800bfe8 <sin+0x60>
 800bfce:	2802      	cmp	r0, #2
 800bfd0:	d011      	beq.n	800bff6 <sin+0x6e>
 800bfd2:	b9e8      	cbnz	r0, 800c010 <sin+0x88>
 800bfd4:	ed9d 1b02 	vldr	d1, [sp, #8]
 800bfd8:	ed9d 0b00 	vldr	d0, [sp]
 800bfdc:	2001      	movs	r0, #1
 800bfde:	f000 fa1b 	bl	800c418 <__kernel_sin>
 800bfe2:	ec51 0b10 	vmov	r0, r1, d0
 800bfe6:	e7e6      	b.n	800bfb6 <sin+0x2e>
 800bfe8:	ed9d 1b02 	vldr	d1, [sp, #8]
 800bfec:	ed9d 0b00 	vldr	d0, [sp]
 800bff0:	f000 f94a 	bl	800c288 <__kernel_cos>
 800bff4:	e7f5      	b.n	800bfe2 <sin+0x5a>
 800bff6:	ed9d 1b02 	vldr	d1, [sp, #8]
 800bffa:	ed9d 0b00 	vldr	d0, [sp]
 800bffe:	2001      	movs	r0, #1
 800c000:	f000 fa0a 	bl	800c418 <__kernel_sin>
 800c004:	ec53 2b10 	vmov	r2, r3, d0
 800c008:	4610      	mov	r0, r2
 800c00a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800c00e:	e7d2      	b.n	800bfb6 <sin+0x2e>
 800c010:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c014:	ed9d 0b00 	vldr	d0, [sp]
 800c018:	f000 f936 	bl	800c288 <__kernel_cos>
 800c01c:	e7f2      	b.n	800c004 <sin+0x7c>
 800c01e:	bf00      	nop
	...
 800c028:	3fe921fb 	.word	0x3fe921fb
 800c02c:	7fefffff 	.word	0x7fefffff

0800c030 <finite>:
 800c030:	b082      	sub	sp, #8
 800c032:	ed8d 0b00 	vstr	d0, [sp]
 800c036:	9801      	ldr	r0, [sp, #4]
 800c038:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 800c03c:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 800c040:	0fc0      	lsrs	r0, r0, #31
 800c042:	b002      	add	sp, #8
 800c044:	4770      	bx	lr
	...

0800c048 <__ieee754_sqrt>:
 800c048:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c04c:	4a68      	ldr	r2, [pc, #416]	@ (800c1f0 <__ieee754_sqrt+0x1a8>)
 800c04e:	ec55 4b10 	vmov	r4, r5, d0
 800c052:	43aa      	bics	r2, r5
 800c054:	462b      	mov	r3, r5
 800c056:	4621      	mov	r1, r4
 800c058:	d110      	bne.n	800c07c <__ieee754_sqrt+0x34>
 800c05a:	4622      	mov	r2, r4
 800c05c:	4620      	mov	r0, r4
 800c05e:	4629      	mov	r1, r5
 800c060:	f7f4 faca 	bl	80005f8 <__aeabi_dmul>
 800c064:	4602      	mov	r2, r0
 800c066:	460b      	mov	r3, r1
 800c068:	4620      	mov	r0, r4
 800c06a:	4629      	mov	r1, r5
 800c06c:	f7f4 f90e 	bl	800028c <__adddf3>
 800c070:	4604      	mov	r4, r0
 800c072:	460d      	mov	r5, r1
 800c074:	ec45 4b10 	vmov	d0, r4, r5
 800c078:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c07c:	2d00      	cmp	r5, #0
 800c07e:	dc0e      	bgt.n	800c09e <__ieee754_sqrt+0x56>
 800c080:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800c084:	4322      	orrs	r2, r4
 800c086:	d0f5      	beq.n	800c074 <__ieee754_sqrt+0x2c>
 800c088:	b19d      	cbz	r5, 800c0b2 <__ieee754_sqrt+0x6a>
 800c08a:	4622      	mov	r2, r4
 800c08c:	4620      	mov	r0, r4
 800c08e:	4629      	mov	r1, r5
 800c090:	f7f4 f8fa 	bl	8000288 <__aeabi_dsub>
 800c094:	4602      	mov	r2, r0
 800c096:	460b      	mov	r3, r1
 800c098:	f7f4 fbd8 	bl	800084c <__aeabi_ddiv>
 800c09c:	e7e8      	b.n	800c070 <__ieee754_sqrt+0x28>
 800c09e:	152a      	asrs	r2, r5, #20
 800c0a0:	d115      	bne.n	800c0ce <__ieee754_sqrt+0x86>
 800c0a2:	2000      	movs	r0, #0
 800c0a4:	e009      	b.n	800c0ba <__ieee754_sqrt+0x72>
 800c0a6:	0acb      	lsrs	r3, r1, #11
 800c0a8:	3a15      	subs	r2, #21
 800c0aa:	0549      	lsls	r1, r1, #21
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d0fa      	beq.n	800c0a6 <__ieee754_sqrt+0x5e>
 800c0b0:	e7f7      	b.n	800c0a2 <__ieee754_sqrt+0x5a>
 800c0b2:	462a      	mov	r2, r5
 800c0b4:	e7fa      	b.n	800c0ac <__ieee754_sqrt+0x64>
 800c0b6:	005b      	lsls	r3, r3, #1
 800c0b8:	3001      	adds	r0, #1
 800c0ba:	02dc      	lsls	r4, r3, #11
 800c0bc:	d5fb      	bpl.n	800c0b6 <__ieee754_sqrt+0x6e>
 800c0be:	1e44      	subs	r4, r0, #1
 800c0c0:	1b12      	subs	r2, r2, r4
 800c0c2:	f1c0 0420 	rsb	r4, r0, #32
 800c0c6:	fa21 f404 	lsr.w	r4, r1, r4
 800c0ca:	4323      	orrs	r3, r4
 800c0cc:	4081      	lsls	r1, r0
 800c0ce:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c0d2:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800c0d6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c0da:	07d2      	lsls	r2, r2, #31
 800c0dc:	bf5c      	itt	pl
 800c0de:	005b      	lslpl	r3, r3, #1
 800c0e0:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800c0e4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c0e8:	bf58      	it	pl
 800c0ea:	0049      	lslpl	r1, r1, #1
 800c0ec:	2600      	movs	r6, #0
 800c0ee:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800c0f2:	106d      	asrs	r5, r5, #1
 800c0f4:	0049      	lsls	r1, r1, #1
 800c0f6:	2016      	movs	r0, #22
 800c0f8:	4632      	mov	r2, r6
 800c0fa:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800c0fe:	1917      	adds	r7, r2, r4
 800c100:	429f      	cmp	r7, r3
 800c102:	bfde      	ittt	le
 800c104:	193a      	addle	r2, r7, r4
 800c106:	1bdb      	suble	r3, r3, r7
 800c108:	1936      	addle	r6, r6, r4
 800c10a:	0fcf      	lsrs	r7, r1, #31
 800c10c:	3801      	subs	r0, #1
 800c10e:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800c112:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800c116:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800c11a:	d1f0      	bne.n	800c0fe <__ieee754_sqrt+0xb6>
 800c11c:	4604      	mov	r4, r0
 800c11e:	2720      	movs	r7, #32
 800c120:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800c124:	429a      	cmp	r2, r3
 800c126:	eb00 0e0c 	add.w	lr, r0, ip
 800c12a:	db02      	blt.n	800c132 <__ieee754_sqrt+0xea>
 800c12c:	d113      	bne.n	800c156 <__ieee754_sqrt+0x10e>
 800c12e:	458e      	cmp	lr, r1
 800c130:	d811      	bhi.n	800c156 <__ieee754_sqrt+0x10e>
 800c132:	f1be 0f00 	cmp.w	lr, #0
 800c136:	eb0e 000c 	add.w	r0, lr, ip
 800c13a:	da42      	bge.n	800c1c2 <__ieee754_sqrt+0x17a>
 800c13c:	2800      	cmp	r0, #0
 800c13e:	db40      	blt.n	800c1c2 <__ieee754_sqrt+0x17a>
 800c140:	f102 0801 	add.w	r8, r2, #1
 800c144:	1a9b      	subs	r3, r3, r2
 800c146:	458e      	cmp	lr, r1
 800c148:	bf88      	it	hi
 800c14a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800c14e:	eba1 010e 	sub.w	r1, r1, lr
 800c152:	4464      	add	r4, ip
 800c154:	4642      	mov	r2, r8
 800c156:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800c15a:	3f01      	subs	r7, #1
 800c15c:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800c160:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800c164:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800c168:	d1dc      	bne.n	800c124 <__ieee754_sqrt+0xdc>
 800c16a:	4319      	orrs	r1, r3
 800c16c:	d01b      	beq.n	800c1a6 <__ieee754_sqrt+0x15e>
 800c16e:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800c1f4 <__ieee754_sqrt+0x1ac>
 800c172:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800c1f8 <__ieee754_sqrt+0x1b0>
 800c176:	e9da 0100 	ldrd	r0, r1, [sl]
 800c17a:	e9db 2300 	ldrd	r2, r3, [fp]
 800c17e:	f7f4 f883 	bl	8000288 <__aeabi_dsub>
 800c182:	e9da 8900 	ldrd	r8, r9, [sl]
 800c186:	4602      	mov	r2, r0
 800c188:	460b      	mov	r3, r1
 800c18a:	4640      	mov	r0, r8
 800c18c:	4649      	mov	r1, r9
 800c18e:	f7f4 fcaf 	bl	8000af0 <__aeabi_dcmple>
 800c192:	b140      	cbz	r0, 800c1a6 <__ieee754_sqrt+0x15e>
 800c194:	f1b4 3fff 	cmp.w	r4, #4294967295
 800c198:	e9da 0100 	ldrd	r0, r1, [sl]
 800c19c:	e9db 2300 	ldrd	r2, r3, [fp]
 800c1a0:	d111      	bne.n	800c1c6 <__ieee754_sqrt+0x17e>
 800c1a2:	3601      	adds	r6, #1
 800c1a4:	463c      	mov	r4, r7
 800c1a6:	1072      	asrs	r2, r6, #1
 800c1a8:	0863      	lsrs	r3, r4, #1
 800c1aa:	07f1      	lsls	r1, r6, #31
 800c1ac:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800c1b0:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800c1b4:	bf48      	it	mi
 800c1b6:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800c1ba:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800c1be:	4618      	mov	r0, r3
 800c1c0:	e756      	b.n	800c070 <__ieee754_sqrt+0x28>
 800c1c2:	4690      	mov	r8, r2
 800c1c4:	e7be      	b.n	800c144 <__ieee754_sqrt+0xfc>
 800c1c6:	f7f4 f861 	bl	800028c <__adddf3>
 800c1ca:	e9da 8900 	ldrd	r8, r9, [sl]
 800c1ce:	4602      	mov	r2, r0
 800c1d0:	460b      	mov	r3, r1
 800c1d2:	4640      	mov	r0, r8
 800c1d4:	4649      	mov	r1, r9
 800c1d6:	f7f4 fc81 	bl	8000adc <__aeabi_dcmplt>
 800c1da:	b120      	cbz	r0, 800c1e6 <__ieee754_sqrt+0x19e>
 800c1dc:	1ca0      	adds	r0, r4, #2
 800c1de:	bf08      	it	eq
 800c1e0:	3601      	addeq	r6, #1
 800c1e2:	3402      	adds	r4, #2
 800c1e4:	e7df      	b.n	800c1a6 <__ieee754_sqrt+0x15e>
 800c1e6:	1c63      	adds	r3, r4, #1
 800c1e8:	f023 0401 	bic.w	r4, r3, #1
 800c1ec:	e7db      	b.n	800c1a6 <__ieee754_sqrt+0x15e>
 800c1ee:	bf00      	nop
 800c1f0:	7ff00000 	.word	0x7ff00000
 800c1f4:	20000228 	.word	0x20000228
 800c1f8:	20000220 	.word	0x20000220

0800c1fc <round>:
 800c1fc:	ec51 0b10 	vmov	r0, r1, d0
 800c200:	b570      	push	{r4, r5, r6, lr}
 800c202:	f3c1 540a 	ubfx	r4, r1, #20, #11
 800c206:	f2a4 32ff 	subw	r2, r4, #1023	@ 0x3ff
 800c20a:	2a13      	cmp	r2, #19
 800c20c:	460b      	mov	r3, r1
 800c20e:	4605      	mov	r5, r0
 800c210:	dc1b      	bgt.n	800c24a <round+0x4e>
 800c212:	2a00      	cmp	r2, #0
 800c214:	da0b      	bge.n	800c22e <round+0x32>
 800c216:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 800c21a:	3201      	adds	r2, #1
 800c21c:	bf04      	itt	eq
 800c21e:	f043 537f 	orreq.w	r3, r3, #1069547520	@ 0x3fc00000
 800c222:	f443 1340 	orreq.w	r3, r3, #3145728	@ 0x300000
 800c226:	2200      	movs	r2, #0
 800c228:	4619      	mov	r1, r3
 800c22a:	4610      	mov	r0, r2
 800c22c:	e015      	b.n	800c25a <round+0x5e>
 800c22e:	4c15      	ldr	r4, [pc, #84]	@ (800c284 <round+0x88>)
 800c230:	4114      	asrs	r4, r2
 800c232:	ea04 0601 	and.w	r6, r4, r1
 800c236:	4306      	orrs	r6, r0
 800c238:	d00f      	beq.n	800c25a <round+0x5e>
 800c23a:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 800c23e:	fa41 f202 	asr.w	r2, r1, r2
 800c242:	4413      	add	r3, r2
 800c244:	ea23 0304 	bic.w	r3, r3, r4
 800c248:	e7ed      	b.n	800c226 <round+0x2a>
 800c24a:	2a33      	cmp	r2, #51	@ 0x33
 800c24c:	dd08      	ble.n	800c260 <round+0x64>
 800c24e:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 800c252:	d102      	bne.n	800c25a <round+0x5e>
 800c254:	4602      	mov	r2, r0
 800c256:	f7f4 f819 	bl	800028c <__adddf3>
 800c25a:	ec41 0b10 	vmov	d0, r0, r1
 800c25e:	bd70      	pop	{r4, r5, r6, pc}
 800c260:	f2a4 4613 	subw	r6, r4, #1043	@ 0x413
 800c264:	f04f 34ff 	mov.w	r4, #4294967295
 800c268:	40f4      	lsrs	r4, r6
 800c26a:	4204      	tst	r4, r0
 800c26c:	d0f5      	beq.n	800c25a <round+0x5e>
 800c26e:	f1c2 0133 	rsb	r1, r2, #51	@ 0x33
 800c272:	2201      	movs	r2, #1
 800c274:	408a      	lsls	r2, r1
 800c276:	1952      	adds	r2, r2, r5
 800c278:	bf28      	it	cs
 800c27a:	3301      	addcs	r3, #1
 800c27c:	ea22 0204 	bic.w	r2, r2, r4
 800c280:	e7d2      	b.n	800c228 <round+0x2c>
 800c282:	bf00      	nop
 800c284:	000fffff 	.word	0x000fffff

0800c288 <__kernel_cos>:
 800c288:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c28c:	ec57 6b10 	vmov	r6, r7, d0
 800c290:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800c294:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 800c298:	ed8d 1b00 	vstr	d1, [sp]
 800c29c:	d206      	bcs.n	800c2ac <__kernel_cos+0x24>
 800c29e:	4630      	mov	r0, r6
 800c2a0:	4639      	mov	r1, r7
 800c2a2:	f7f4 fc59 	bl	8000b58 <__aeabi_d2iz>
 800c2a6:	2800      	cmp	r0, #0
 800c2a8:	f000 8088 	beq.w	800c3bc <__kernel_cos+0x134>
 800c2ac:	4632      	mov	r2, r6
 800c2ae:	463b      	mov	r3, r7
 800c2b0:	4630      	mov	r0, r6
 800c2b2:	4639      	mov	r1, r7
 800c2b4:	f7f4 f9a0 	bl	80005f8 <__aeabi_dmul>
 800c2b8:	4b51      	ldr	r3, [pc, #324]	@ (800c400 <__kernel_cos+0x178>)
 800c2ba:	2200      	movs	r2, #0
 800c2bc:	4604      	mov	r4, r0
 800c2be:	460d      	mov	r5, r1
 800c2c0:	f7f4 f99a 	bl	80005f8 <__aeabi_dmul>
 800c2c4:	a340      	add	r3, pc, #256	@ (adr r3, 800c3c8 <__kernel_cos+0x140>)
 800c2c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2ca:	4682      	mov	sl, r0
 800c2cc:	468b      	mov	fp, r1
 800c2ce:	4620      	mov	r0, r4
 800c2d0:	4629      	mov	r1, r5
 800c2d2:	f7f4 f991 	bl	80005f8 <__aeabi_dmul>
 800c2d6:	a33e      	add	r3, pc, #248	@ (adr r3, 800c3d0 <__kernel_cos+0x148>)
 800c2d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2dc:	f7f3 ffd6 	bl	800028c <__adddf3>
 800c2e0:	4622      	mov	r2, r4
 800c2e2:	462b      	mov	r3, r5
 800c2e4:	f7f4 f988 	bl	80005f8 <__aeabi_dmul>
 800c2e8:	a33b      	add	r3, pc, #236	@ (adr r3, 800c3d8 <__kernel_cos+0x150>)
 800c2ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2ee:	f7f3 ffcb 	bl	8000288 <__aeabi_dsub>
 800c2f2:	4622      	mov	r2, r4
 800c2f4:	462b      	mov	r3, r5
 800c2f6:	f7f4 f97f 	bl	80005f8 <__aeabi_dmul>
 800c2fa:	a339      	add	r3, pc, #228	@ (adr r3, 800c3e0 <__kernel_cos+0x158>)
 800c2fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c300:	f7f3 ffc4 	bl	800028c <__adddf3>
 800c304:	4622      	mov	r2, r4
 800c306:	462b      	mov	r3, r5
 800c308:	f7f4 f976 	bl	80005f8 <__aeabi_dmul>
 800c30c:	a336      	add	r3, pc, #216	@ (adr r3, 800c3e8 <__kernel_cos+0x160>)
 800c30e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c312:	f7f3 ffb9 	bl	8000288 <__aeabi_dsub>
 800c316:	4622      	mov	r2, r4
 800c318:	462b      	mov	r3, r5
 800c31a:	f7f4 f96d 	bl	80005f8 <__aeabi_dmul>
 800c31e:	a334      	add	r3, pc, #208	@ (adr r3, 800c3f0 <__kernel_cos+0x168>)
 800c320:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c324:	f7f3 ffb2 	bl	800028c <__adddf3>
 800c328:	4622      	mov	r2, r4
 800c32a:	462b      	mov	r3, r5
 800c32c:	f7f4 f964 	bl	80005f8 <__aeabi_dmul>
 800c330:	4622      	mov	r2, r4
 800c332:	462b      	mov	r3, r5
 800c334:	f7f4 f960 	bl	80005f8 <__aeabi_dmul>
 800c338:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c33c:	4604      	mov	r4, r0
 800c33e:	460d      	mov	r5, r1
 800c340:	4630      	mov	r0, r6
 800c342:	4639      	mov	r1, r7
 800c344:	f7f4 f958 	bl	80005f8 <__aeabi_dmul>
 800c348:	460b      	mov	r3, r1
 800c34a:	4602      	mov	r2, r0
 800c34c:	4629      	mov	r1, r5
 800c34e:	4620      	mov	r0, r4
 800c350:	f7f3 ff9a 	bl	8000288 <__aeabi_dsub>
 800c354:	4b2b      	ldr	r3, [pc, #172]	@ (800c404 <__kernel_cos+0x17c>)
 800c356:	4598      	cmp	r8, r3
 800c358:	4606      	mov	r6, r0
 800c35a:	460f      	mov	r7, r1
 800c35c:	d810      	bhi.n	800c380 <__kernel_cos+0xf8>
 800c35e:	4602      	mov	r2, r0
 800c360:	460b      	mov	r3, r1
 800c362:	4650      	mov	r0, sl
 800c364:	4659      	mov	r1, fp
 800c366:	f7f3 ff8f 	bl	8000288 <__aeabi_dsub>
 800c36a:	460b      	mov	r3, r1
 800c36c:	4926      	ldr	r1, [pc, #152]	@ (800c408 <__kernel_cos+0x180>)
 800c36e:	4602      	mov	r2, r0
 800c370:	2000      	movs	r0, #0
 800c372:	f7f3 ff89 	bl	8000288 <__aeabi_dsub>
 800c376:	ec41 0b10 	vmov	d0, r0, r1
 800c37a:	b003      	add	sp, #12
 800c37c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c380:	4b22      	ldr	r3, [pc, #136]	@ (800c40c <__kernel_cos+0x184>)
 800c382:	4921      	ldr	r1, [pc, #132]	@ (800c408 <__kernel_cos+0x180>)
 800c384:	4598      	cmp	r8, r3
 800c386:	bf8c      	ite	hi
 800c388:	4d21      	ldrhi	r5, [pc, #132]	@ (800c410 <__kernel_cos+0x188>)
 800c38a:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 800c38e:	2400      	movs	r4, #0
 800c390:	4622      	mov	r2, r4
 800c392:	462b      	mov	r3, r5
 800c394:	2000      	movs	r0, #0
 800c396:	f7f3 ff77 	bl	8000288 <__aeabi_dsub>
 800c39a:	4622      	mov	r2, r4
 800c39c:	4680      	mov	r8, r0
 800c39e:	4689      	mov	r9, r1
 800c3a0:	462b      	mov	r3, r5
 800c3a2:	4650      	mov	r0, sl
 800c3a4:	4659      	mov	r1, fp
 800c3a6:	f7f3 ff6f 	bl	8000288 <__aeabi_dsub>
 800c3aa:	4632      	mov	r2, r6
 800c3ac:	463b      	mov	r3, r7
 800c3ae:	f7f3 ff6b 	bl	8000288 <__aeabi_dsub>
 800c3b2:	4602      	mov	r2, r0
 800c3b4:	460b      	mov	r3, r1
 800c3b6:	4640      	mov	r0, r8
 800c3b8:	4649      	mov	r1, r9
 800c3ba:	e7da      	b.n	800c372 <__kernel_cos+0xea>
 800c3bc:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 800c3f8 <__kernel_cos+0x170>
 800c3c0:	e7db      	b.n	800c37a <__kernel_cos+0xf2>
 800c3c2:	bf00      	nop
 800c3c4:	f3af 8000 	nop.w
 800c3c8:	be8838d4 	.word	0xbe8838d4
 800c3cc:	bda8fae9 	.word	0xbda8fae9
 800c3d0:	bdb4b1c4 	.word	0xbdb4b1c4
 800c3d4:	3e21ee9e 	.word	0x3e21ee9e
 800c3d8:	809c52ad 	.word	0x809c52ad
 800c3dc:	3e927e4f 	.word	0x3e927e4f
 800c3e0:	19cb1590 	.word	0x19cb1590
 800c3e4:	3efa01a0 	.word	0x3efa01a0
 800c3e8:	16c15177 	.word	0x16c15177
 800c3ec:	3f56c16c 	.word	0x3f56c16c
 800c3f0:	5555554c 	.word	0x5555554c
 800c3f4:	3fa55555 	.word	0x3fa55555
 800c3f8:	00000000 	.word	0x00000000
 800c3fc:	3ff00000 	.word	0x3ff00000
 800c400:	3fe00000 	.word	0x3fe00000
 800c404:	3fd33332 	.word	0x3fd33332
 800c408:	3ff00000 	.word	0x3ff00000
 800c40c:	3fe90000 	.word	0x3fe90000
 800c410:	3fd20000 	.word	0x3fd20000
 800c414:	00000000 	.word	0x00000000

0800c418 <__kernel_sin>:
 800c418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c41c:	ec55 4b10 	vmov	r4, r5, d0
 800c420:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800c424:	b085      	sub	sp, #20
 800c426:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800c42a:	ed8d 1b02 	vstr	d1, [sp, #8]
 800c42e:	4680      	mov	r8, r0
 800c430:	d205      	bcs.n	800c43e <__kernel_sin+0x26>
 800c432:	4620      	mov	r0, r4
 800c434:	4629      	mov	r1, r5
 800c436:	f7f4 fb8f 	bl	8000b58 <__aeabi_d2iz>
 800c43a:	2800      	cmp	r0, #0
 800c43c:	d052      	beq.n	800c4e4 <__kernel_sin+0xcc>
 800c43e:	4622      	mov	r2, r4
 800c440:	462b      	mov	r3, r5
 800c442:	4620      	mov	r0, r4
 800c444:	4629      	mov	r1, r5
 800c446:	f7f4 f8d7 	bl	80005f8 <__aeabi_dmul>
 800c44a:	4682      	mov	sl, r0
 800c44c:	468b      	mov	fp, r1
 800c44e:	4602      	mov	r2, r0
 800c450:	460b      	mov	r3, r1
 800c452:	4620      	mov	r0, r4
 800c454:	4629      	mov	r1, r5
 800c456:	f7f4 f8cf 	bl	80005f8 <__aeabi_dmul>
 800c45a:	a342      	add	r3, pc, #264	@ (adr r3, 800c564 <__kernel_sin+0x14c>)
 800c45c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c460:	e9cd 0100 	strd	r0, r1, [sp]
 800c464:	4650      	mov	r0, sl
 800c466:	4659      	mov	r1, fp
 800c468:	f7f4 f8c6 	bl	80005f8 <__aeabi_dmul>
 800c46c:	a33f      	add	r3, pc, #252	@ (adr r3, 800c56c <__kernel_sin+0x154>)
 800c46e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c472:	f7f3 ff09 	bl	8000288 <__aeabi_dsub>
 800c476:	4652      	mov	r2, sl
 800c478:	465b      	mov	r3, fp
 800c47a:	f7f4 f8bd 	bl	80005f8 <__aeabi_dmul>
 800c47e:	a33d      	add	r3, pc, #244	@ (adr r3, 800c574 <__kernel_sin+0x15c>)
 800c480:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c484:	f7f3 ff02 	bl	800028c <__adddf3>
 800c488:	4652      	mov	r2, sl
 800c48a:	465b      	mov	r3, fp
 800c48c:	f7f4 f8b4 	bl	80005f8 <__aeabi_dmul>
 800c490:	a33a      	add	r3, pc, #232	@ (adr r3, 800c57c <__kernel_sin+0x164>)
 800c492:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c496:	f7f3 fef7 	bl	8000288 <__aeabi_dsub>
 800c49a:	4652      	mov	r2, sl
 800c49c:	465b      	mov	r3, fp
 800c49e:	f7f4 f8ab 	bl	80005f8 <__aeabi_dmul>
 800c4a2:	a338      	add	r3, pc, #224	@ (adr r3, 800c584 <__kernel_sin+0x16c>)
 800c4a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4a8:	f7f3 fef0 	bl	800028c <__adddf3>
 800c4ac:	4606      	mov	r6, r0
 800c4ae:	460f      	mov	r7, r1
 800c4b0:	f1b8 0f00 	cmp.w	r8, #0
 800c4b4:	d11b      	bne.n	800c4ee <__kernel_sin+0xd6>
 800c4b6:	4602      	mov	r2, r0
 800c4b8:	460b      	mov	r3, r1
 800c4ba:	4650      	mov	r0, sl
 800c4bc:	4659      	mov	r1, fp
 800c4be:	f7f4 f89b 	bl	80005f8 <__aeabi_dmul>
 800c4c2:	a325      	add	r3, pc, #148	@ (adr r3, 800c558 <__kernel_sin+0x140>)
 800c4c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4c8:	f7f3 fede 	bl	8000288 <__aeabi_dsub>
 800c4cc:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c4d0:	f7f4 f892 	bl	80005f8 <__aeabi_dmul>
 800c4d4:	4602      	mov	r2, r0
 800c4d6:	460b      	mov	r3, r1
 800c4d8:	4620      	mov	r0, r4
 800c4da:	4629      	mov	r1, r5
 800c4dc:	f7f3 fed6 	bl	800028c <__adddf3>
 800c4e0:	4604      	mov	r4, r0
 800c4e2:	460d      	mov	r5, r1
 800c4e4:	ec45 4b10 	vmov	d0, r4, r5
 800c4e8:	b005      	add	sp, #20
 800c4ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c4ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c4f2:	4b1b      	ldr	r3, [pc, #108]	@ (800c560 <__kernel_sin+0x148>)
 800c4f4:	2200      	movs	r2, #0
 800c4f6:	f7f4 f87f 	bl	80005f8 <__aeabi_dmul>
 800c4fa:	4632      	mov	r2, r6
 800c4fc:	4680      	mov	r8, r0
 800c4fe:	4689      	mov	r9, r1
 800c500:	463b      	mov	r3, r7
 800c502:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c506:	f7f4 f877 	bl	80005f8 <__aeabi_dmul>
 800c50a:	4602      	mov	r2, r0
 800c50c:	460b      	mov	r3, r1
 800c50e:	4640      	mov	r0, r8
 800c510:	4649      	mov	r1, r9
 800c512:	f7f3 feb9 	bl	8000288 <__aeabi_dsub>
 800c516:	4652      	mov	r2, sl
 800c518:	465b      	mov	r3, fp
 800c51a:	f7f4 f86d 	bl	80005f8 <__aeabi_dmul>
 800c51e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c522:	f7f3 feb1 	bl	8000288 <__aeabi_dsub>
 800c526:	a30c      	add	r3, pc, #48	@ (adr r3, 800c558 <__kernel_sin+0x140>)
 800c528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c52c:	4606      	mov	r6, r0
 800c52e:	460f      	mov	r7, r1
 800c530:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c534:	f7f4 f860 	bl	80005f8 <__aeabi_dmul>
 800c538:	4602      	mov	r2, r0
 800c53a:	460b      	mov	r3, r1
 800c53c:	4630      	mov	r0, r6
 800c53e:	4639      	mov	r1, r7
 800c540:	f7f3 fea4 	bl	800028c <__adddf3>
 800c544:	4602      	mov	r2, r0
 800c546:	460b      	mov	r3, r1
 800c548:	4620      	mov	r0, r4
 800c54a:	4629      	mov	r1, r5
 800c54c:	f7f3 fe9c 	bl	8000288 <__aeabi_dsub>
 800c550:	e7c6      	b.n	800c4e0 <__kernel_sin+0xc8>
 800c552:	bf00      	nop
 800c554:	f3af 8000 	nop.w
 800c558:	55555549 	.word	0x55555549
 800c55c:	3fc55555 	.word	0x3fc55555
 800c560:	3fe00000 	.word	0x3fe00000
 800c564:	5acfd57c 	.word	0x5acfd57c
 800c568:	3de5d93a 	.word	0x3de5d93a
 800c56c:	8a2b9ceb 	.word	0x8a2b9ceb
 800c570:	3e5ae5e6 	.word	0x3e5ae5e6
 800c574:	57b1fe7d 	.word	0x57b1fe7d
 800c578:	3ec71de3 	.word	0x3ec71de3
 800c57c:	19c161d5 	.word	0x19c161d5
 800c580:	3f2a01a0 	.word	0x3f2a01a0
 800c584:	1110f8a6 	.word	0x1110f8a6
 800c588:	3f811111 	.word	0x3f811111
 800c58c:	00000000 	.word	0x00000000

0800c590 <__ieee754_atan2>:
 800c590:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c594:	ec57 6b11 	vmov	r6, r7, d1
 800c598:	4273      	negs	r3, r6
 800c59a:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 800c718 <__ieee754_atan2+0x188>
 800c59e:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 800c5a2:	4333      	orrs	r3, r6
 800c5a4:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800c5a8:	4543      	cmp	r3, r8
 800c5aa:	ec51 0b10 	vmov	r0, r1, d0
 800c5ae:	4635      	mov	r5, r6
 800c5b0:	d809      	bhi.n	800c5c6 <__ieee754_atan2+0x36>
 800c5b2:	4244      	negs	r4, r0
 800c5b4:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800c5b8:	4304      	orrs	r4, r0
 800c5ba:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800c5be:	4544      	cmp	r4, r8
 800c5c0:	468e      	mov	lr, r1
 800c5c2:	4681      	mov	r9, r0
 800c5c4:	d907      	bls.n	800c5d6 <__ieee754_atan2+0x46>
 800c5c6:	4632      	mov	r2, r6
 800c5c8:	463b      	mov	r3, r7
 800c5ca:	f7f3 fe5f 	bl	800028c <__adddf3>
 800c5ce:	ec41 0b10 	vmov	d0, r0, r1
 800c5d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c5d6:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 800c5da:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 800c5de:	4334      	orrs	r4, r6
 800c5e0:	d103      	bne.n	800c5ea <__ieee754_atan2+0x5a>
 800c5e2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c5e6:	f000 bfdb 	b.w	800d5a0 <atan>
 800c5ea:	17bc      	asrs	r4, r7, #30
 800c5ec:	f004 0402 	and.w	r4, r4, #2
 800c5f0:	ea53 0909 	orrs.w	r9, r3, r9
 800c5f4:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800c5f8:	d107      	bne.n	800c60a <__ieee754_atan2+0x7a>
 800c5fa:	2c02      	cmp	r4, #2
 800c5fc:	d05f      	beq.n	800c6be <__ieee754_atan2+0x12e>
 800c5fe:	2c03      	cmp	r4, #3
 800c600:	d1e5      	bne.n	800c5ce <__ieee754_atan2+0x3e>
 800c602:	a141      	add	r1, pc, #260	@ (adr r1, 800c708 <__ieee754_atan2+0x178>)
 800c604:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c608:	e7e1      	b.n	800c5ce <__ieee754_atan2+0x3e>
 800c60a:	4315      	orrs	r5, r2
 800c60c:	d106      	bne.n	800c61c <__ieee754_atan2+0x8c>
 800c60e:	f1be 0f00 	cmp.w	lr, #0
 800c612:	da5f      	bge.n	800c6d4 <__ieee754_atan2+0x144>
 800c614:	a13e      	add	r1, pc, #248	@ (adr r1, 800c710 <__ieee754_atan2+0x180>)
 800c616:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c61a:	e7d8      	b.n	800c5ce <__ieee754_atan2+0x3e>
 800c61c:	4542      	cmp	r2, r8
 800c61e:	d10f      	bne.n	800c640 <__ieee754_atan2+0xb0>
 800c620:	4293      	cmp	r3, r2
 800c622:	f104 34ff 	add.w	r4, r4, #4294967295
 800c626:	d107      	bne.n	800c638 <__ieee754_atan2+0xa8>
 800c628:	2c02      	cmp	r4, #2
 800c62a:	d84c      	bhi.n	800c6c6 <__ieee754_atan2+0x136>
 800c62c:	4b34      	ldr	r3, [pc, #208]	@ (800c700 <__ieee754_atan2+0x170>)
 800c62e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c632:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c636:	e7ca      	b.n	800c5ce <__ieee754_atan2+0x3e>
 800c638:	2c02      	cmp	r4, #2
 800c63a:	d848      	bhi.n	800c6ce <__ieee754_atan2+0x13e>
 800c63c:	4b31      	ldr	r3, [pc, #196]	@ (800c704 <__ieee754_atan2+0x174>)
 800c63e:	e7f6      	b.n	800c62e <__ieee754_atan2+0x9e>
 800c640:	4543      	cmp	r3, r8
 800c642:	d0e4      	beq.n	800c60e <__ieee754_atan2+0x7e>
 800c644:	1a9b      	subs	r3, r3, r2
 800c646:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 800c64a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800c64e:	da1e      	bge.n	800c68e <__ieee754_atan2+0xfe>
 800c650:	2f00      	cmp	r7, #0
 800c652:	da01      	bge.n	800c658 <__ieee754_atan2+0xc8>
 800c654:	323c      	adds	r2, #60	@ 0x3c
 800c656:	db1e      	blt.n	800c696 <__ieee754_atan2+0x106>
 800c658:	4632      	mov	r2, r6
 800c65a:	463b      	mov	r3, r7
 800c65c:	f7f4 f8f6 	bl	800084c <__aeabi_ddiv>
 800c660:	ec41 0b10 	vmov	d0, r0, r1
 800c664:	f001 f934 	bl	800d8d0 <fabs>
 800c668:	f000 ff9a 	bl	800d5a0 <atan>
 800c66c:	ec51 0b10 	vmov	r0, r1, d0
 800c670:	2c01      	cmp	r4, #1
 800c672:	d013      	beq.n	800c69c <__ieee754_atan2+0x10c>
 800c674:	2c02      	cmp	r4, #2
 800c676:	d015      	beq.n	800c6a4 <__ieee754_atan2+0x114>
 800c678:	2c00      	cmp	r4, #0
 800c67a:	d0a8      	beq.n	800c5ce <__ieee754_atan2+0x3e>
 800c67c:	a318      	add	r3, pc, #96	@ (adr r3, 800c6e0 <__ieee754_atan2+0x150>)
 800c67e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c682:	f7f3 fe01 	bl	8000288 <__aeabi_dsub>
 800c686:	a318      	add	r3, pc, #96	@ (adr r3, 800c6e8 <__ieee754_atan2+0x158>)
 800c688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c68c:	e014      	b.n	800c6b8 <__ieee754_atan2+0x128>
 800c68e:	a118      	add	r1, pc, #96	@ (adr r1, 800c6f0 <__ieee754_atan2+0x160>)
 800c690:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c694:	e7ec      	b.n	800c670 <__ieee754_atan2+0xe0>
 800c696:	2000      	movs	r0, #0
 800c698:	2100      	movs	r1, #0
 800c69a:	e7e9      	b.n	800c670 <__ieee754_atan2+0xe0>
 800c69c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c6a0:	4619      	mov	r1, r3
 800c6a2:	e794      	b.n	800c5ce <__ieee754_atan2+0x3e>
 800c6a4:	a30e      	add	r3, pc, #56	@ (adr r3, 800c6e0 <__ieee754_atan2+0x150>)
 800c6a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6aa:	f7f3 fded 	bl	8000288 <__aeabi_dsub>
 800c6ae:	4602      	mov	r2, r0
 800c6b0:	460b      	mov	r3, r1
 800c6b2:	a10d      	add	r1, pc, #52	@ (adr r1, 800c6e8 <__ieee754_atan2+0x158>)
 800c6b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c6b8:	f7f3 fde6 	bl	8000288 <__aeabi_dsub>
 800c6bc:	e787      	b.n	800c5ce <__ieee754_atan2+0x3e>
 800c6be:	a10a      	add	r1, pc, #40	@ (adr r1, 800c6e8 <__ieee754_atan2+0x158>)
 800c6c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c6c4:	e783      	b.n	800c5ce <__ieee754_atan2+0x3e>
 800c6c6:	a10c      	add	r1, pc, #48	@ (adr r1, 800c6f8 <__ieee754_atan2+0x168>)
 800c6c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c6cc:	e77f      	b.n	800c5ce <__ieee754_atan2+0x3e>
 800c6ce:	2000      	movs	r0, #0
 800c6d0:	2100      	movs	r1, #0
 800c6d2:	e77c      	b.n	800c5ce <__ieee754_atan2+0x3e>
 800c6d4:	a106      	add	r1, pc, #24	@ (adr r1, 800c6f0 <__ieee754_atan2+0x160>)
 800c6d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c6da:	e778      	b.n	800c5ce <__ieee754_atan2+0x3e>
 800c6dc:	f3af 8000 	nop.w
 800c6e0:	33145c07 	.word	0x33145c07
 800c6e4:	3ca1a626 	.word	0x3ca1a626
 800c6e8:	54442d18 	.word	0x54442d18
 800c6ec:	400921fb 	.word	0x400921fb
 800c6f0:	54442d18 	.word	0x54442d18
 800c6f4:	3ff921fb 	.word	0x3ff921fb
 800c6f8:	54442d18 	.word	0x54442d18
 800c6fc:	3fe921fb 	.word	0x3fe921fb
 800c700:	0800e5c8 	.word	0x0800e5c8
 800c704:	0800e5b0 	.word	0x0800e5b0
 800c708:	54442d18 	.word	0x54442d18
 800c70c:	c00921fb 	.word	0xc00921fb
 800c710:	54442d18 	.word	0x54442d18
 800c714:	bff921fb 	.word	0xbff921fb
 800c718:	7ff00000 	.word	0x7ff00000
 800c71c:	00000000 	.word	0x00000000

0800c720 <__ieee754_pow>:
 800c720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c724:	b091      	sub	sp, #68	@ 0x44
 800c726:	ed8d 1b00 	vstr	d1, [sp]
 800c72a:	e9dd 1900 	ldrd	r1, r9, [sp]
 800c72e:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 800c732:	ea5a 0001 	orrs.w	r0, sl, r1
 800c736:	ec57 6b10 	vmov	r6, r7, d0
 800c73a:	d113      	bne.n	800c764 <__ieee754_pow+0x44>
 800c73c:	19b3      	adds	r3, r6, r6
 800c73e:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 800c742:	4152      	adcs	r2, r2
 800c744:	4298      	cmp	r0, r3
 800c746:	4b98      	ldr	r3, [pc, #608]	@ (800c9a8 <__ieee754_pow+0x288>)
 800c748:	4193      	sbcs	r3, r2
 800c74a:	f080 84ea 	bcs.w	800d122 <__ieee754_pow+0xa02>
 800c74e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c752:	4630      	mov	r0, r6
 800c754:	4639      	mov	r1, r7
 800c756:	f7f3 fd99 	bl	800028c <__adddf3>
 800c75a:	ec41 0b10 	vmov	d0, r0, r1
 800c75e:	b011      	add	sp, #68	@ 0x44
 800c760:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c764:	4a91      	ldr	r2, [pc, #580]	@ (800c9ac <__ieee754_pow+0x28c>)
 800c766:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800c76a:	4590      	cmp	r8, r2
 800c76c:	463d      	mov	r5, r7
 800c76e:	4633      	mov	r3, r6
 800c770:	d806      	bhi.n	800c780 <__ieee754_pow+0x60>
 800c772:	d101      	bne.n	800c778 <__ieee754_pow+0x58>
 800c774:	2e00      	cmp	r6, #0
 800c776:	d1ea      	bne.n	800c74e <__ieee754_pow+0x2e>
 800c778:	4592      	cmp	sl, r2
 800c77a:	d801      	bhi.n	800c780 <__ieee754_pow+0x60>
 800c77c:	d10e      	bne.n	800c79c <__ieee754_pow+0x7c>
 800c77e:	b169      	cbz	r1, 800c79c <__ieee754_pow+0x7c>
 800c780:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 800c784:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 800c788:	431d      	orrs	r5, r3
 800c78a:	d1e0      	bne.n	800c74e <__ieee754_pow+0x2e>
 800c78c:	e9dd 3200 	ldrd	r3, r2, [sp]
 800c790:	18db      	adds	r3, r3, r3
 800c792:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 800c796:	4152      	adcs	r2, r2
 800c798:	429d      	cmp	r5, r3
 800c79a:	e7d4      	b.n	800c746 <__ieee754_pow+0x26>
 800c79c:	2d00      	cmp	r5, #0
 800c79e:	46c3      	mov	fp, r8
 800c7a0:	da3a      	bge.n	800c818 <__ieee754_pow+0xf8>
 800c7a2:	4a83      	ldr	r2, [pc, #524]	@ (800c9b0 <__ieee754_pow+0x290>)
 800c7a4:	4592      	cmp	sl, r2
 800c7a6:	d84d      	bhi.n	800c844 <__ieee754_pow+0x124>
 800c7a8:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 800c7ac:	4592      	cmp	sl, r2
 800c7ae:	f240 84c7 	bls.w	800d140 <__ieee754_pow+0xa20>
 800c7b2:	ea4f 522a 	mov.w	r2, sl, asr #20
 800c7b6:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800c7ba:	2a14      	cmp	r2, #20
 800c7bc:	dd0f      	ble.n	800c7de <__ieee754_pow+0xbe>
 800c7be:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 800c7c2:	fa21 f402 	lsr.w	r4, r1, r2
 800c7c6:	fa04 f202 	lsl.w	r2, r4, r2
 800c7ca:	428a      	cmp	r2, r1
 800c7cc:	f040 84b8 	bne.w	800d140 <__ieee754_pow+0xa20>
 800c7d0:	f004 0401 	and.w	r4, r4, #1
 800c7d4:	f1c4 0402 	rsb	r4, r4, #2
 800c7d8:	2900      	cmp	r1, #0
 800c7da:	d158      	bne.n	800c88e <__ieee754_pow+0x16e>
 800c7dc:	e00e      	b.n	800c7fc <__ieee754_pow+0xdc>
 800c7de:	2900      	cmp	r1, #0
 800c7e0:	d154      	bne.n	800c88c <__ieee754_pow+0x16c>
 800c7e2:	f1c2 0214 	rsb	r2, r2, #20
 800c7e6:	fa4a f402 	asr.w	r4, sl, r2
 800c7ea:	fa04 f202 	lsl.w	r2, r4, r2
 800c7ee:	4552      	cmp	r2, sl
 800c7f0:	f040 84a3 	bne.w	800d13a <__ieee754_pow+0xa1a>
 800c7f4:	f004 0401 	and.w	r4, r4, #1
 800c7f8:	f1c4 0402 	rsb	r4, r4, #2
 800c7fc:	4a6d      	ldr	r2, [pc, #436]	@ (800c9b4 <__ieee754_pow+0x294>)
 800c7fe:	4592      	cmp	sl, r2
 800c800:	d12e      	bne.n	800c860 <__ieee754_pow+0x140>
 800c802:	f1b9 0f00 	cmp.w	r9, #0
 800c806:	f280 8494 	bge.w	800d132 <__ieee754_pow+0xa12>
 800c80a:	496a      	ldr	r1, [pc, #424]	@ (800c9b4 <__ieee754_pow+0x294>)
 800c80c:	4632      	mov	r2, r6
 800c80e:	463b      	mov	r3, r7
 800c810:	2000      	movs	r0, #0
 800c812:	f7f4 f81b 	bl	800084c <__aeabi_ddiv>
 800c816:	e7a0      	b.n	800c75a <__ieee754_pow+0x3a>
 800c818:	2400      	movs	r4, #0
 800c81a:	bbc1      	cbnz	r1, 800c88e <__ieee754_pow+0x16e>
 800c81c:	4a63      	ldr	r2, [pc, #396]	@ (800c9ac <__ieee754_pow+0x28c>)
 800c81e:	4592      	cmp	sl, r2
 800c820:	d1ec      	bne.n	800c7fc <__ieee754_pow+0xdc>
 800c822:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 800c826:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 800c82a:	431a      	orrs	r2, r3
 800c82c:	f000 8479 	beq.w	800d122 <__ieee754_pow+0xa02>
 800c830:	4b61      	ldr	r3, [pc, #388]	@ (800c9b8 <__ieee754_pow+0x298>)
 800c832:	4598      	cmp	r8, r3
 800c834:	d908      	bls.n	800c848 <__ieee754_pow+0x128>
 800c836:	f1b9 0f00 	cmp.w	r9, #0
 800c83a:	f2c0 8476 	blt.w	800d12a <__ieee754_pow+0xa0a>
 800c83e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c842:	e78a      	b.n	800c75a <__ieee754_pow+0x3a>
 800c844:	2402      	movs	r4, #2
 800c846:	e7e8      	b.n	800c81a <__ieee754_pow+0xfa>
 800c848:	f1b9 0f00 	cmp.w	r9, #0
 800c84c:	f04f 0000 	mov.w	r0, #0
 800c850:	f04f 0100 	mov.w	r1, #0
 800c854:	da81      	bge.n	800c75a <__ieee754_pow+0x3a>
 800c856:	e9dd 0300 	ldrd	r0, r3, [sp]
 800c85a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800c85e:	e77c      	b.n	800c75a <__ieee754_pow+0x3a>
 800c860:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 800c864:	d106      	bne.n	800c874 <__ieee754_pow+0x154>
 800c866:	4632      	mov	r2, r6
 800c868:	463b      	mov	r3, r7
 800c86a:	4630      	mov	r0, r6
 800c86c:	4639      	mov	r1, r7
 800c86e:	f7f3 fec3 	bl	80005f8 <__aeabi_dmul>
 800c872:	e772      	b.n	800c75a <__ieee754_pow+0x3a>
 800c874:	4a51      	ldr	r2, [pc, #324]	@ (800c9bc <__ieee754_pow+0x29c>)
 800c876:	4591      	cmp	r9, r2
 800c878:	d109      	bne.n	800c88e <__ieee754_pow+0x16e>
 800c87a:	2d00      	cmp	r5, #0
 800c87c:	db07      	blt.n	800c88e <__ieee754_pow+0x16e>
 800c87e:	ec47 6b10 	vmov	d0, r6, r7
 800c882:	b011      	add	sp, #68	@ 0x44
 800c884:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c888:	f7ff bbde 	b.w	800c048 <__ieee754_sqrt>
 800c88c:	2400      	movs	r4, #0
 800c88e:	ec47 6b10 	vmov	d0, r6, r7
 800c892:	9302      	str	r3, [sp, #8]
 800c894:	f001 f81c 	bl	800d8d0 <fabs>
 800c898:	9b02      	ldr	r3, [sp, #8]
 800c89a:	ec51 0b10 	vmov	r0, r1, d0
 800c89e:	bb53      	cbnz	r3, 800c8f6 <__ieee754_pow+0x1d6>
 800c8a0:	4b44      	ldr	r3, [pc, #272]	@ (800c9b4 <__ieee754_pow+0x294>)
 800c8a2:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 800c8a6:	429a      	cmp	r2, r3
 800c8a8:	d002      	beq.n	800c8b0 <__ieee754_pow+0x190>
 800c8aa:	f1b8 0f00 	cmp.w	r8, #0
 800c8ae:	d122      	bne.n	800c8f6 <__ieee754_pow+0x1d6>
 800c8b0:	f1b9 0f00 	cmp.w	r9, #0
 800c8b4:	da05      	bge.n	800c8c2 <__ieee754_pow+0x1a2>
 800c8b6:	4602      	mov	r2, r0
 800c8b8:	460b      	mov	r3, r1
 800c8ba:	2000      	movs	r0, #0
 800c8bc:	493d      	ldr	r1, [pc, #244]	@ (800c9b4 <__ieee754_pow+0x294>)
 800c8be:	f7f3 ffc5 	bl	800084c <__aeabi_ddiv>
 800c8c2:	2d00      	cmp	r5, #0
 800c8c4:	f6bf af49 	bge.w	800c75a <__ieee754_pow+0x3a>
 800c8c8:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 800c8cc:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 800c8d0:	ea58 0804 	orrs.w	r8, r8, r4
 800c8d4:	d108      	bne.n	800c8e8 <__ieee754_pow+0x1c8>
 800c8d6:	4602      	mov	r2, r0
 800c8d8:	460b      	mov	r3, r1
 800c8da:	4610      	mov	r0, r2
 800c8dc:	4619      	mov	r1, r3
 800c8de:	f7f3 fcd3 	bl	8000288 <__aeabi_dsub>
 800c8e2:	4602      	mov	r2, r0
 800c8e4:	460b      	mov	r3, r1
 800c8e6:	e794      	b.n	800c812 <__ieee754_pow+0xf2>
 800c8e8:	2c01      	cmp	r4, #1
 800c8ea:	f47f af36 	bne.w	800c75a <__ieee754_pow+0x3a>
 800c8ee:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c8f2:	4619      	mov	r1, r3
 800c8f4:	e731      	b.n	800c75a <__ieee754_pow+0x3a>
 800c8f6:	0feb      	lsrs	r3, r5, #31
 800c8f8:	3b01      	subs	r3, #1
 800c8fa:	ea53 0204 	orrs.w	r2, r3, r4
 800c8fe:	d102      	bne.n	800c906 <__ieee754_pow+0x1e6>
 800c900:	4632      	mov	r2, r6
 800c902:	463b      	mov	r3, r7
 800c904:	e7e9      	b.n	800c8da <__ieee754_pow+0x1ba>
 800c906:	3c01      	subs	r4, #1
 800c908:	431c      	orrs	r4, r3
 800c90a:	d016      	beq.n	800c93a <__ieee754_pow+0x21a>
 800c90c:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 800c998 <__ieee754_pow+0x278>
 800c910:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 800c914:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c918:	f240 8112 	bls.w	800cb40 <__ieee754_pow+0x420>
 800c91c:	4b28      	ldr	r3, [pc, #160]	@ (800c9c0 <__ieee754_pow+0x2a0>)
 800c91e:	459a      	cmp	sl, r3
 800c920:	4b25      	ldr	r3, [pc, #148]	@ (800c9b8 <__ieee754_pow+0x298>)
 800c922:	d916      	bls.n	800c952 <__ieee754_pow+0x232>
 800c924:	4598      	cmp	r8, r3
 800c926:	d80b      	bhi.n	800c940 <__ieee754_pow+0x220>
 800c928:	f1b9 0f00 	cmp.w	r9, #0
 800c92c:	da0b      	bge.n	800c946 <__ieee754_pow+0x226>
 800c92e:	2000      	movs	r0, #0
 800c930:	b011      	add	sp, #68	@ 0x44
 800c932:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c936:	f001 b887 	b.w	800da48 <__math_oflow>
 800c93a:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 800c9a0 <__ieee754_pow+0x280>
 800c93e:	e7e7      	b.n	800c910 <__ieee754_pow+0x1f0>
 800c940:	f1b9 0f00 	cmp.w	r9, #0
 800c944:	dcf3      	bgt.n	800c92e <__ieee754_pow+0x20e>
 800c946:	2000      	movs	r0, #0
 800c948:	b011      	add	sp, #68	@ 0x44
 800c94a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c94e:	f001 b873 	b.w	800da38 <__math_uflow>
 800c952:	4598      	cmp	r8, r3
 800c954:	d20c      	bcs.n	800c970 <__ieee754_pow+0x250>
 800c956:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c95a:	2200      	movs	r2, #0
 800c95c:	2300      	movs	r3, #0
 800c95e:	f7f4 f8bd 	bl	8000adc <__aeabi_dcmplt>
 800c962:	3800      	subs	r0, #0
 800c964:	bf18      	it	ne
 800c966:	2001      	movne	r0, #1
 800c968:	f1b9 0f00 	cmp.w	r9, #0
 800c96c:	daec      	bge.n	800c948 <__ieee754_pow+0x228>
 800c96e:	e7df      	b.n	800c930 <__ieee754_pow+0x210>
 800c970:	4b10      	ldr	r3, [pc, #64]	@ (800c9b4 <__ieee754_pow+0x294>)
 800c972:	4598      	cmp	r8, r3
 800c974:	f04f 0200 	mov.w	r2, #0
 800c978:	d924      	bls.n	800c9c4 <__ieee754_pow+0x2a4>
 800c97a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c97e:	2300      	movs	r3, #0
 800c980:	f7f4 f8ac 	bl	8000adc <__aeabi_dcmplt>
 800c984:	3800      	subs	r0, #0
 800c986:	bf18      	it	ne
 800c988:	2001      	movne	r0, #1
 800c98a:	f1b9 0f00 	cmp.w	r9, #0
 800c98e:	dccf      	bgt.n	800c930 <__ieee754_pow+0x210>
 800c990:	e7da      	b.n	800c948 <__ieee754_pow+0x228>
 800c992:	bf00      	nop
 800c994:	f3af 8000 	nop.w
 800c998:	00000000 	.word	0x00000000
 800c99c:	3ff00000 	.word	0x3ff00000
 800c9a0:	00000000 	.word	0x00000000
 800c9a4:	bff00000 	.word	0xbff00000
 800c9a8:	fff00000 	.word	0xfff00000
 800c9ac:	7ff00000 	.word	0x7ff00000
 800c9b0:	433fffff 	.word	0x433fffff
 800c9b4:	3ff00000 	.word	0x3ff00000
 800c9b8:	3fefffff 	.word	0x3fefffff
 800c9bc:	3fe00000 	.word	0x3fe00000
 800c9c0:	43f00000 	.word	0x43f00000
 800c9c4:	4b5a      	ldr	r3, [pc, #360]	@ (800cb30 <__ieee754_pow+0x410>)
 800c9c6:	f7f3 fc5f 	bl	8000288 <__aeabi_dsub>
 800c9ca:	a351      	add	r3, pc, #324	@ (adr r3, 800cb10 <__ieee754_pow+0x3f0>)
 800c9cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9d0:	4604      	mov	r4, r0
 800c9d2:	460d      	mov	r5, r1
 800c9d4:	f7f3 fe10 	bl	80005f8 <__aeabi_dmul>
 800c9d8:	a34f      	add	r3, pc, #316	@ (adr r3, 800cb18 <__ieee754_pow+0x3f8>)
 800c9da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9de:	4606      	mov	r6, r0
 800c9e0:	460f      	mov	r7, r1
 800c9e2:	4620      	mov	r0, r4
 800c9e4:	4629      	mov	r1, r5
 800c9e6:	f7f3 fe07 	bl	80005f8 <__aeabi_dmul>
 800c9ea:	4b52      	ldr	r3, [pc, #328]	@ (800cb34 <__ieee754_pow+0x414>)
 800c9ec:	4682      	mov	sl, r0
 800c9ee:	468b      	mov	fp, r1
 800c9f0:	2200      	movs	r2, #0
 800c9f2:	4620      	mov	r0, r4
 800c9f4:	4629      	mov	r1, r5
 800c9f6:	f7f3 fdff 	bl	80005f8 <__aeabi_dmul>
 800c9fa:	4602      	mov	r2, r0
 800c9fc:	460b      	mov	r3, r1
 800c9fe:	a148      	add	r1, pc, #288	@ (adr r1, 800cb20 <__ieee754_pow+0x400>)
 800ca00:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ca04:	f7f3 fc40 	bl	8000288 <__aeabi_dsub>
 800ca08:	4622      	mov	r2, r4
 800ca0a:	462b      	mov	r3, r5
 800ca0c:	f7f3 fdf4 	bl	80005f8 <__aeabi_dmul>
 800ca10:	4602      	mov	r2, r0
 800ca12:	460b      	mov	r3, r1
 800ca14:	2000      	movs	r0, #0
 800ca16:	4948      	ldr	r1, [pc, #288]	@ (800cb38 <__ieee754_pow+0x418>)
 800ca18:	f7f3 fc36 	bl	8000288 <__aeabi_dsub>
 800ca1c:	4622      	mov	r2, r4
 800ca1e:	4680      	mov	r8, r0
 800ca20:	4689      	mov	r9, r1
 800ca22:	462b      	mov	r3, r5
 800ca24:	4620      	mov	r0, r4
 800ca26:	4629      	mov	r1, r5
 800ca28:	f7f3 fde6 	bl	80005f8 <__aeabi_dmul>
 800ca2c:	4602      	mov	r2, r0
 800ca2e:	460b      	mov	r3, r1
 800ca30:	4640      	mov	r0, r8
 800ca32:	4649      	mov	r1, r9
 800ca34:	f7f3 fde0 	bl	80005f8 <__aeabi_dmul>
 800ca38:	a33b      	add	r3, pc, #236	@ (adr r3, 800cb28 <__ieee754_pow+0x408>)
 800ca3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca3e:	f7f3 fddb 	bl	80005f8 <__aeabi_dmul>
 800ca42:	4602      	mov	r2, r0
 800ca44:	460b      	mov	r3, r1
 800ca46:	4650      	mov	r0, sl
 800ca48:	4659      	mov	r1, fp
 800ca4a:	f7f3 fc1d 	bl	8000288 <__aeabi_dsub>
 800ca4e:	4602      	mov	r2, r0
 800ca50:	460b      	mov	r3, r1
 800ca52:	4680      	mov	r8, r0
 800ca54:	4689      	mov	r9, r1
 800ca56:	4630      	mov	r0, r6
 800ca58:	4639      	mov	r1, r7
 800ca5a:	f7f3 fc17 	bl	800028c <__adddf3>
 800ca5e:	2400      	movs	r4, #0
 800ca60:	4632      	mov	r2, r6
 800ca62:	463b      	mov	r3, r7
 800ca64:	4620      	mov	r0, r4
 800ca66:	460d      	mov	r5, r1
 800ca68:	f7f3 fc0e 	bl	8000288 <__aeabi_dsub>
 800ca6c:	4602      	mov	r2, r0
 800ca6e:	460b      	mov	r3, r1
 800ca70:	4640      	mov	r0, r8
 800ca72:	4649      	mov	r1, r9
 800ca74:	f7f3 fc08 	bl	8000288 <__aeabi_dsub>
 800ca78:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ca7c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ca80:	2300      	movs	r3, #0
 800ca82:	9304      	str	r3, [sp, #16]
 800ca84:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800ca88:	4606      	mov	r6, r0
 800ca8a:	460f      	mov	r7, r1
 800ca8c:	4652      	mov	r2, sl
 800ca8e:	465b      	mov	r3, fp
 800ca90:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ca94:	f7f3 fbf8 	bl	8000288 <__aeabi_dsub>
 800ca98:	4622      	mov	r2, r4
 800ca9a:	462b      	mov	r3, r5
 800ca9c:	f7f3 fdac 	bl	80005f8 <__aeabi_dmul>
 800caa0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800caa4:	4680      	mov	r8, r0
 800caa6:	4689      	mov	r9, r1
 800caa8:	4630      	mov	r0, r6
 800caaa:	4639      	mov	r1, r7
 800caac:	f7f3 fda4 	bl	80005f8 <__aeabi_dmul>
 800cab0:	4602      	mov	r2, r0
 800cab2:	460b      	mov	r3, r1
 800cab4:	4640      	mov	r0, r8
 800cab6:	4649      	mov	r1, r9
 800cab8:	f7f3 fbe8 	bl	800028c <__adddf3>
 800cabc:	4652      	mov	r2, sl
 800cabe:	465b      	mov	r3, fp
 800cac0:	4606      	mov	r6, r0
 800cac2:	460f      	mov	r7, r1
 800cac4:	4620      	mov	r0, r4
 800cac6:	4629      	mov	r1, r5
 800cac8:	f7f3 fd96 	bl	80005f8 <__aeabi_dmul>
 800cacc:	460b      	mov	r3, r1
 800cace:	4602      	mov	r2, r0
 800cad0:	4680      	mov	r8, r0
 800cad2:	4689      	mov	r9, r1
 800cad4:	4630      	mov	r0, r6
 800cad6:	4639      	mov	r1, r7
 800cad8:	f7f3 fbd8 	bl	800028c <__adddf3>
 800cadc:	4b17      	ldr	r3, [pc, #92]	@ (800cb3c <__ieee754_pow+0x41c>)
 800cade:	4299      	cmp	r1, r3
 800cae0:	4604      	mov	r4, r0
 800cae2:	460d      	mov	r5, r1
 800cae4:	468a      	mov	sl, r1
 800cae6:	468b      	mov	fp, r1
 800cae8:	f340 82ef 	ble.w	800d0ca <__ieee754_pow+0x9aa>
 800caec:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 800caf0:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 800caf4:	4303      	orrs	r3, r0
 800caf6:	f000 81e8 	beq.w	800ceca <__ieee754_pow+0x7aa>
 800cafa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cafe:	2200      	movs	r2, #0
 800cb00:	2300      	movs	r3, #0
 800cb02:	f7f3 ffeb 	bl	8000adc <__aeabi_dcmplt>
 800cb06:	3800      	subs	r0, #0
 800cb08:	bf18      	it	ne
 800cb0a:	2001      	movne	r0, #1
 800cb0c:	e710      	b.n	800c930 <__ieee754_pow+0x210>
 800cb0e:	bf00      	nop
 800cb10:	60000000 	.word	0x60000000
 800cb14:	3ff71547 	.word	0x3ff71547
 800cb18:	f85ddf44 	.word	0xf85ddf44
 800cb1c:	3e54ae0b 	.word	0x3e54ae0b
 800cb20:	55555555 	.word	0x55555555
 800cb24:	3fd55555 	.word	0x3fd55555
 800cb28:	652b82fe 	.word	0x652b82fe
 800cb2c:	3ff71547 	.word	0x3ff71547
 800cb30:	3ff00000 	.word	0x3ff00000
 800cb34:	3fd00000 	.word	0x3fd00000
 800cb38:	3fe00000 	.word	0x3fe00000
 800cb3c:	408fffff 	.word	0x408fffff
 800cb40:	4bd5      	ldr	r3, [pc, #852]	@ (800ce98 <__ieee754_pow+0x778>)
 800cb42:	402b      	ands	r3, r5
 800cb44:	2200      	movs	r2, #0
 800cb46:	b92b      	cbnz	r3, 800cb54 <__ieee754_pow+0x434>
 800cb48:	4bd4      	ldr	r3, [pc, #848]	@ (800ce9c <__ieee754_pow+0x77c>)
 800cb4a:	f7f3 fd55 	bl	80005f8 <__aeabi_dmul>
 800cb4e:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 800cb52:	468b      	mov	fp, r1
 800cb54:	ea4f 532b 	mov.w	r3, fp, asr #20
 800cb58:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800cb5c:	4413      	add	r3, r2
 800cb5e:	930a      	str	r3, [sp, #40]	@ 0x28
 800cb60:	4bcf      	ldr	r3, [pc, #828]	@ (800cea0 <__ieee754_pow+0x780>)
 800cb62:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 800cb66:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 800cb6a:	459b      	cmp	fp, r3
 800cb6c:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800cb70:	dd08      	ble.n	800cb84 <__ieee754_pow+0x464>
 800cb72:	4bcc      	ldr	r3, [pc, #816]	@ (800cea4 <__ieee754_pow+0x784>)
 800cb74:	459b      	cmp	fp, r3
 800cb76:	f340 81a5 	ble.w	800cec4 <__ieee754_pow+0x7a4>
 800cb7a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cb7c:	3301      	adds	r3, #1
 800cb7e:	930a      	str	r3, [sp, #40]	@ 0x28
 800cb80:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 800cb84:	f04f 0a00 	mov.w	sl, #0
 800cb88:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800cb8c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cb8e:	4bc6      	ldr	r3, [pc, #792]	@ (800cea8 <__ieee754_pow+0x788>)
 800cb90:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800cb94:	ed93 7b00 	vldr	d7, [r3]
 800cb98:	4629      	mov	r1, r5
 800cb9a:	ec53 2b17 	vmov	r2, r3, d7
 800cb9e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800cba2:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800cba6:	f7f3 fb6f 	bl	8000288 <__aeabi_dsub>
 800cbaa:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800cbae:	4606      	mov	r6, r0
 800cbb0:	460f      	mov	r7, r1
 800cbb2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cbb6:	f7f3 fb69 	bl	800028c <__adddf3>
 800cbba:	4602      	mov	r2, r0
 800cbbc:	460b      	mov	r3, r1
 800cbbe:	2000      	movs	r0, #0
 800cbc0:	49ba      	ldr	r1, [pc, #744]	@ (800ceac <__ieee754_pow+0x78c>)
 800cbc2:	f7f3 fe43 	bl	800084c <__aeabi_ddiv>
 800cbc6:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 800cbca:	4602      	mov	r2, r0
 800cbcc:	460b      	mov	r3, r1
 800cbce:	4630      	mov	r0, r6
 800cbd0:	4639      	mov	r1, r7
 800cbd2:	f7f3 fd11 	bl	80005f8 <__aeabi_dmul>
 800cbd6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800cbda:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 800cbde:	106d      	asrs	r5, r5, #1
 800cbe0:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 800cbe4:	f04f 0b00 	mov.w	fp, #0
 800cbe8:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 800cbec:	4661      	mov	r1, ip
 800cbee:	2200      	movs	r2, #0
 800cbf0:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800cbf4:	4658      	mov	r0, fp
 800cbf6:	46e1      	mov	r9, ip
 800cbf8:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 800cbfc:	4614      	mov	r4, r2
 800cbfe:	461d      	mov	r5, r3
 800cc00:	f7f3 fcfa 	bl	80005f8 <__aeabi_dmul>
 800cc04:	4602      	mov	r2, r0
 800cc06:	460b      	mov	r3, r1
 800cc08:	4630      	mov	r0, r6
 800cc0a:	4639      	mov	r1, r7
 800cc0c:	f7f3 fb3c 	bl	8000288 <__aeabi_dsub>
 800cc10:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800cc14:	4606      	mov	r6, r0
 800cc16:	460f      	mov	r7, r1
 800cc18:	4620      	mov	r0, r4
 800cc1a:	4629      	mov	r1, r5
 800cc1c:	f7f3 fb34 	bl	8000288 <__aeabi_dsub>
 800cc20:	4602      	mov	r2, r0
 800cc22:	460b      	mov	r3, r1
 800cc24:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800cc28:	f7f3 fb2e 	bl	8000288 <__aeabi_dsub>
 800cc2c:	465a      	mov	r2, fp
 800cc2e:	464b      	mov	r3, r9
 800cc30:	f7f3 fce2 	bl	80005f8 <__aeabi_dmul>
 800cc34:	4602      	mov	r2, r0
 800cc36:	460b      	mov	r3, r1
 800cc38:	4630      	mov	r0, r6
 800cc3a:	4639      	mov	r1, r7
 800cc3c:	f7f3 fb24 	bl	8000288 <__aeabi_dsub>
 800cc40:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800cc44:	f7f3 fcd8 	bl	80005f8 <__aeabi_dmul>
 800cc48:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cc4c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800cc50:	4610      	mov	r0, r2
 800cc52:	4619      	mov	r1, r3
 800cc54:	f7f3 fcd0 	bl	80005f8 <__aeabi_dmul>
 800cc58:	a37d      	add	r3, pc, #500	@ (adr r3, 800ce50 <__ieee754_pow+0x730>)
 800cc5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc5e:	4604      	mov	r4, r0
 800cc60:	460d      	mov	r5, r1
 800cc62:	f7f3 fcc9 	bl	80005f8 <__aeabi_dmul>
 800cc66:	a37c      	add	r3, pc, #496	@ (adr r3, 800ce58 <__ieee754_pow+0x738>)
 800cc68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc6c:	f7f3 fb0e 	bl	800028c <__adddf3>
 800cc70:	4622      	mov	r2, r4
 800cc72:	462b      	mov	r3, r5
 800cc74:	f7f3 fcc0 	bl	80005f8 <__aeabi_dmul>
 800cc78:	a379      	add	r3, pc, #484	@ (adr r3, 800ce60 <__ieee754_pow+0x740>)
 800cc7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc7e:	f7f3 fb05 	bl	800028c <__adddf3>
 800cc82:	4622      	mov	r2, r4
 800cc84:	462b      	mov	r3, r5
 800cc86:	f7f3 fcb7 	bl	80005f8 <__aeabi_dmul>
 800cc8a:	a377      	add	r3, pc, #476	@ (adr r3, 800ce68 <__ieee754_pow+0x748>)
 800cc8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc90:	f7f3 fafc 	bl	800028c <__adddf3>
 800cc94:	4622      	mov	r2, r4
 800cc96:	462b      	mov	r3, r5
 800cc98:	f7f3 fcae 	bl	80005f8 <__aeabi_dmul>
 800cc9c:	a374      	add	r3, pc, #464	@ (adr r3, 800ce70 <__ieee754_pow+0x750>)
 800cc9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cca2:	f7f3 faf3 	bl	800028c <__adddf3>
 800cca6:	4622      	mov	r2, r4
 800cca8:	462b      	mov	r3, r5
 800ccaa:	f7f3 fca5 	bl	80005f8 <__aeabi_dmul>
 800ccae:	a372      	add	r3, pc, #456	@ (adr r3, 800ce78 <__ieee754_pow+0x758>)
 800ccb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccb4:	f7f3 faea 	bl	800028c <__adddf3>
 800ccb8:	4622      	mov	r2, r4
 800ccba:	4606      	mov	r6, r0
 800ccbc:	460f      	mov	r7, r1
 800ccbe:	462b      	mov	r3, r5
 800ccc0:	4620      	mov	r0, r4
 800ccc2:	4629      	mov	r1, r5
 800ccc4:	f7f3 fc98 	bl	80005f8 <__aeabi_dmul>
 800ccc8:	4602      	mov	r2, r0
 800ccca:	460b      	mov	r3, r1
 800cccc:	4630      	mov	r0, r6
 800ccce:	4639      	mov	r1, r7
 800ccd0:	f7f3 fc92 	bl	80005f8 <__aeabi_dmul>
 800ccd4:	465a      	mov	r2, fp
 800ccd6:	4604      	mov	r4, r0
 800ccd8:	460d      	mov	r5, r1
 800ccda:	464b      	mov	r3, r9
 800ccdc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cce0:	f7f3 fad4 	bl	800028c <__adddf3>
 800cce4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800cce8:	f7f3 fc86 	bl	80005f8 <__aeabi_dmul>
 800ccec:	4622      	mov	r2, r4
 800ccee:	462b      	mov	r3, r5
 800ccf0:	f7f3 facc 	bl	800028c <__adddf3>
 800ccf4:	465a      	mov	r2, fp
 800ccf6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800ccfa:	464b      	mov	r3, r9
 800ccfc:	4658      	mov	r0, fp
 800ccfe:	4649      	mov	r1, r9
 800cd00:	f7f3 fc7a 	bl	80005f8 <__aeabi_dmul>
 800cd04:	4b6a      	ldr	r3, [pc, #424]	@ (800ceb0 <__ieee754_pow+0x790>)
 800cd06:	2200      	movs	r2, #0
 800cd08:	4606      	mov	r6, r0
 800cd0a:	460f      	mov	r7, r1
 800cd0c:	f7f3 fabe 	bl	800028c <__adddf3>
 800cd10:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800cd14:	f7f3 faba 	bl	800028c <__adddf3>
 800cd18:	46d8      	mov	r8, fp
 800cd1a:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 800cd1e:	460d      	mov	r5, r1
 800cd20:	465a      	mov	r2, fp
 800cd22:	460b      	mov	r3, r1
 800cd24:	4640      	mov	r0, r8
 800cd26:	4649      	mov	r1, r9
 800cd28:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 800cd2c:	f7f3 fc64 	bl	80005f8 <__aeabi_dmul>
 800cd30:	465c      	mov	r4, fp
 800cd32:	4680      	mov	r8, r0
 800cd34:	4689      	mov	r9, r1
 800cd36:	4b5e      	ldr	r3, [pc, #376]	@ (800ceb0 <__ieee754_pow+0x790>)
 800cd38:	2200      	movs	r2, #0
 800cd3a:	4620      	mov	r0, r4
 800cd3c:	4629      	mov	r1, r5
 800cd3e:	f7f3 faa3 	bl	8000288 <__aeabi_dsub>
 800cd42:	4632      	mov	r2, r6
 800cd44:	463b      	mov	r3, r7
 800cd46:	f7f3 fa9f 	bl	8000288 <__aeabi_dsub>
 800cd4a:	4602      	mov	r2, r0
 800cd4c:	460b      	mov	r3, r1
 800cd4e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800cd52:	f7f3 fa99 	bl	8000288 <__aeabi_dsub>
 800cd56:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cd5a:	f7f3 fc4d 	bl	80005f8 <__aeabi_dmul>
 800cd5e:	4622      	mov	r2, r4
 800cd60:	4606      	mov	r6, r0
 800cd62:	460f      	mov	r7, r1
 800cd64:	462b      	mov	r3, r5
 800cd66:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cd6a:	f7f3 fc45 	bl	80005f8 <__aeabi_dmul>
 800cd6e:	4602      	mov	r2, r0
 800cd70:	460b      	mov	r3, r1
 800cd72:	4630      	mov	r0, r6
 800cd74:	4639      	mov	r1, r7
 800cd76:	f7f3 fa89 	bl	800028c <__adddf3>
 800cd7a:	4606      	mov	r6, r0
 800cd7c:	460f      	mov	r7, r1
 800cd7e:	4602      	mov	r2, r0
 800cd80:	460b      	mov	r3, r1
 800cd82:	4640      	mov	r0, r8
 800cd84:	4649      	mov	r1, r9
 800cd86:	f7f3 fa81 	bl	800028c <__adddf3>
 800cd8a:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 800cd8e:	a33c      	add	r3, pc, #240	@ (adr r3, 800ce80 <__ieee754_pow+0x760>)
 800cd90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd94:	4658      	mov	r0, fp
 800cd96:	e9cd bc08 	strd	fp, ip, [sp, #32]
 800cd9a:	460d      	mov	r5, r1
 800cd9c:	f7f3 fc2c 	bl	80005f8 <__aeabi_dmul>
 800cda0:	465c      	mov	r4, fp
 800cda2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800cda6:	4642      	mov	r2, r8
 800cda8:	464b      	mov	r3, r9
 800cdaa:	4620      	mov	r0, r4
 800cdac:	4629      	mov	r1, r5
 800cdae:	f7f3 fa6b 	bl	8000288 <__aeabi_dsub>
 800cdb2:	4602      	mov	r2, r0
 800cdb4:	460b      	mov	r3, r1
 800cdb6:	4630      	mov	r0, r6
 800cdb8:	4639      	mov	r1, r7
 800cdba:	f7f3 fa65 	bl	8000288 <__aeabi_dsub>
 800cdbe:	a332      	add	r3, pc, #200	@ (adr r3, 800ce88 <__ieee754_pow+0x768>)
 800cdc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdc4:	f7f3 fc18 	bl	80005f8 <__aeabi_dmul>
 800cdc8:	a331      	add	r3, pc, #196	@ (adr r3, 800ce90 <__ieee754_pow+0x770>)
 800cdca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdce:	4606      	mov	r6, r0
 800cdd0:	460f      	mov	r7, r1
 800cdd2:	4620      	mov	r0, r4
 800cdd4:	4629      	mov	r1, r5
 800cdd6:	f7f3 fc0f 	bl	80005f8 <__aeabi_dmul>
 800cdda:	4602      	mov	r2, r0
 800cddc:	460b      	mov	r3, r1
 800cdde:	4630      	mov	r0, r6
 800cde0:	4639      	mov	r1, r7
 800cde2:	f7f3 fa53 	bl	800028c <__adddf3>
 800cde6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800cde8:	4b32      	ldr	r3, [pc, #200]	@ (800ceb4 <__ieee754_pow+0x794>)
 800cdea:	4413      	add	r3, r2
 800cdec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdf0:	f7f3 fa4c 	bl	800028c <__adddf3>
 800cdf4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800cdf8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800cdfa:	f7f3 fb93 	bl	8000524 <__aeabi_i2d>
 800cdfe:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800ce00:	4b2d      	ldr	r3, [pc, #180]	@ (800ceb8 <__ieee754_pow+0x798>)
 800ce02:	4413      	add	r3, r2
 800ce04:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ce08:	4606      	mov	r6, r0
 800ce0a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ce0e:	460f      	mov	r7, r1
 800ce10:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ce14:	f7f3 fa3a 	bl	800028c <__adddf3>
 800ce18:	4642      	mov	r2, r8
 800ce1a:	464b      	mov	r3, r9
 800ce1c:	f7f3 fa36 	bl	800028c <__adddf3>
 800ce20:	4632      	mov	r2, r6
 800ce22:	463b      	mov	r3, r7
 800ce24:	f7f3 fa32 	bl	800028c <__adddf3>
 800ce28:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 800ce2c:	4632      	mov	r2, r6
 800ce2e:	463b      	mov	r3, r7
 800ce30:	4658      	mov	r0, fp
 800ce32:	460d      	mov	r5, r1
 800ce34:	f7f3 fa28 	bl	8000288 <__aeabi_dsub>
 800ce38:	4642      	mov	r2, r8
 800ce3a:	464b      	mov	r3, r9
 800ce3c:	f7f3 fa24 	bl	8000288 <__aeabi_dsub>
 800ce40:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ce44:	f7f3 fa20 	bl	8000288 <__aeabi_dsub>
 800ce48:	465c      	mov	r4, fp
 800ce4a:	4602      	mov	r2, r0
 800ce4c:	e036      	b.n	800cebc <__ieee754_pow+0x79c>
 800ce4e:	bf00      	nop
 800ce50:	4a454eef 	.word	0x4a454eef
 800ce54:	3fca7e28 	.word	0x3fca7e28
 800ce58:	93c9db65 	.word	0x93c9db65
 800ce5c:	3fcd864a 	.word	0x3fcd864a
 800ce60:	a91d4101 	.word	0xa91d4101
 800ce64:	3fd17460 	.word	0x3fd17460
 800ce68:	518f264d 	.word	0x518f264d
 800ce6c:	3fd55555 	.word	0x3fd55555
 800ce70:	db6fabff 	.word	0xdb6fabff
 800ce74:	3fdb6db6 	.word	0x3fdb6db6
 800ce78:	33333303 	.word	0x33333303
 800ce7c:	3fe33333 	.word	0x3fe33333
 800ce80:	e0000000 	.word	0xe0000000
 800ce84:	3feec709 	.word	0x3feec709
 800ce88:	dc3a03fd 	.word	0xdc3a03fd
 800ce8c:	3feec709 	.word	0x3feec709
 800ce90:	145b01f5 	.word	0x145b01f5
 800ce94:	be3e2fe0 	.word	0xbe3e2fe0
 800ce98:	7ff00000 	.word	0x7ff00000
 800ce9c:	43400000 	.word	0x43400000
 800cea0:	0003988e 	.word	0x0003988e
 800cea4:	000bb679 	.word	0x000bb679
 800cea8:	0800e600 	.word	0x0800e600
 800ceac:	3ff00000 	.word	0x3ff00000
 800ceb0:	40080000 	.word	0x40080000
 800ceb4:	0800e5e0 	.word	0x0800e5e0
 800ceb8:	0800e5f0 	.word	0x0800e5f0
 800cebc:	460b      	mov	r3, r1
 800cebe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cec2:	e5d7      	b.n	800ca74 <__ieee754_pow+0x354>
 800cec4:	f04f 0a01 	mov.w	sl, #1
 800cec8:	e65e      	b.n	800cb88 <__ieee754_pow+0x468>
 800ceca:	a3b4      	add	r3, pc, #720	@ (adr r3, 800d19c <__ieee754_pow+0xa7c>)
 800cecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ced0:	4630      	mov	r0, r6
 800ced2:	4639      	mov	r1, r7
 800ced4:	f7f3 f9da 	bl	800028c <__adddf3>
 800ced8:	4642      	mov	r2, r8
 800ceda:	e9cd 0100 	strd	r0, r1, [sp]
 800cede:	464b      	mov	r3, r9
 800cee0:	4620      	mov	r0, r4
 800cee2:	4629      	mov	r1, r5
 800cee4:	f7f3 f9d0 	bl	8000288 <__aeabi_dsub>
 800cee8:	4602      	mov	r2, r0
 800ceea:	460b      	mov	r3, r1
 800ceec:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cef0:	f7f3 fe12 	bl	8000b18 <__aeabi_dcmpgt>
 800cef4:	2800      	cmp	r0, #0
 800cef6:	f47f ae00 	bne.w	800cafa <__ieee754_pow+0x3da>
 800cefa:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 800cefe:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800cf02:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 800cf06:	fa43 fa0a 	asr.w	sl, r3, sl
 800cf0a:	44da      	add	sl, fp
 800cf0c:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800cf10:	489d      	ldr	r0, [pc, #628]	@ (800d188 <__ieee754_pow+0xa68>)
 800cf12:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800cf16:	4108      	asrs	r0, r1
 800cf18:	ea00 030a 	and.w	r3, r0, sl
 800cf1c:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800cf20:	f1c1 0114 	rsb	r1, r1, #20
 800cf24:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 800cf28:	fa4a fa01 	asr.w	sl, sl, r1
 800cf2c:	f1bb 0f00 	cmp.w	fp, #0
 800cf30:	4640      	mov	r0, r8
 800cf32:	4649      	mov	r1, r9
 800cf34:	f04f 0200 	mov.w	r2, #0
 800cf38:	bfb8      	it	lt
 800cf3a:	f1ca 0a00 	rsblt	sl, sl, #0
 800cf3e:	f7f3 f9a3 	bl	8000288 <__aeabi_dsub>
 800cf42:	4680      	mov	r8, r0
 800cf44:	4689      	mov	r9, r1
 800cf46:	4632      	mov	r2, r6
 800cf48:	463b      	mov	r3, r7
 800cf4a:	4640      	mov	r0, r8
 800cf4c:	4649      	mov	r1, r9
 800cf4e:	f7f3 f99d 	bl	800028c <__adddf3>
 800cf52:	2400      	movs	r4, #0
 800cf54:	a37c      	add	r3, pc, #496	@ (adr r3, 800d148 <__ieee754_pow+0xa28>)
 800cf56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf5a:	4620      	mov	r0, r4
 800cf5c:	460d      	mov	r5, r1
 800cf5e:	f7f3 fb4b 	bl	80005f8 <__aeabi_dmul>
 800cf62:	4642      	mov	r2, r8
 800cf64:	e9cd 0100 	strd	r0, r1, [sp]
 800cf68:	464b      	mov	r3, r9
 800cf6a:	4620      	mov	r0, r4
 800cf6c:	4629      	mov	r1, r5
 800cf6e:	f7f3 f98b 	bl	8000288 <__aeabi_dsub>
 800cf72:	4602      	mov	r2, r0
 800cf74:	460b      	mov	r3, r1
 800cf76:	4630      	mov	r0, r6
 800cf78:	4639      	mov	r1, r7
 800cf7a:	f7f3 f985 	bl	8000288 <__aeabi_dsub>
 800cf7e:	a374      	add	r3, pc, #464	@ (adr r3, 800d150 <__ieee754_pow+0xa30>)
 800cf80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf84:	f7f3 fb38 	bl	80005f8 <__aeabi_dmul>
 800cf88:	a373      	add	r3, pc, #460	@ (adr r3, 800d158 <__ieee754_pow+0xa38>)
 800cf8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf8e:	4680      	mov	r8, r0
 800cf90:	4689      	mov	r9, r1
 800cf92:	4620      	mov	r0, r4
 800cf94:	4629      	mov	r1, r5
 800cf96:	f7f3 fb2f 	bl	80005f8 <__aeabi_dmul>
 800cf9a:	4602      	mov	r2, r0
 800cf9c:	460b      	mov	r3, r1
 800cf9e:	4640      	mov	r0, r8
 800cfa0:	4649      	mov	r1, r9
 800cfa2:	f7f3 f973 	bl	800028c <__adddf3>
 800cfa6:	4604      	mov	r4, r0
 800cfa8:	460d      	mov	r5, r1
 800cfaa:	4602      	mov	r2, r0
 800cfac:	460b      	mov	r3, r1
 800cfae:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cfb2:	f7f3 f96b 	bl	800028c <__adddf3>
 800cfb6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cfba:	4680      	mov	r8, r0
 800cfbc:	4689      	mov	r9, r1
 800cfbe:	f7f3 f963 	bl	8000288 <__aeabi_dsub>
 800cfc2:	4602      	mov	r2, r0
 800cfc4:	460b      	mov	r3, r1
 800cfc6:	4620      	mov	r0, r4
 800cfc8:	4629      	mov	r1, r5
 800cfca:	f7f3 f95d 	bl	8000288 <__aeabi_dsub>
 800cfce:	4642      	mov	r2, r8
 800cfd0:	4606      	mov	r6, r0
 800cfd2:	460f      	mov	r7, r1
 800cfd4:	464b      	mov	r3, r9
 800cfd6:	4640      	mov	r0, r8
 800cfd8:	4649      	mov	r1, r9
 800cfda:	f7f3 fb0d 	bl	80005f8 <__aeabi_dmul>
 800cfde:	a360      	add	r3, pc, #384	@ (adr r3, 800d160 <__ieee754_pow+0xa40>)
 800cfe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfe4:	4604      	mov	r4, r0
 800cfe6:	460d      	mov	r5, r1
 800cfe8:	f7f3 fb06 	bl	80005f8 <__aeabi_dmul>
 800cfec:	a35e      	add	r3, pc, #376	@ (adr r3, 800d168 <__ieee754_pow+0xa48>)
 800cfee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cff2:	f7f3 f949 	bl	8000288 <__aeabi_dsub>
 800cff6:	4622      	mov	r2, r4
 800cff8:	462b      	mov	r3, r5
 800cffa:	f7f3 fafd 	bl	80005f8 <__aeabi_dmul>
 800cffe:	a35c      	add	r3, pc, #368	@ (adr r3, 800d170 <__ieee754_pow+0xa50>)
 800d000:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d004:	f7f3 f942 	bl	800028c <__adddf3>
 800d008:	4622      	mov	r2, r4
 800d00a:	462b      	mov	r3, r5
 800d00c:	f7f3 faf4 	bl	80005f8 <__aeabi_dmul>
 800d010:	a359      	add	r3, pc, #356	@ (adr r3, 800d178 <__ieee754_pow+0xa58>)
 800d012:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d016:	f7f3 f937 	bl	8000288 <__aeabi_dsub>
 800d01a:	4622      	mov	r2, r4
 800d01c:	462b      	mov	r3, r5
 800d01e:	f7f3 faeb 	bl	80005f8 <__aeabi_dmul>
 800d022:	a357      	add	r3, pc, #348	@ (adr r3, 800d180 <__ieee754_pow+0xa60>)
 800d024:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d028:	f7f3 f930 	bl	800028c <__adddf3>
 800d02c:	4622      	mov	r2, r4
 800d02e:	462b      	mov	r3, r5
 800d030:	f7f3 fae2 	bl	80005f8 <__aeabi_dmul>
 800d034:	4602      	mov	r2, r0
 800d036:	460b      	mov	r3, r1
 800d038:	4640      	mov	r0, r8
 800d03a:	4649      	mov	r1, r9
 800d03c:	f7f3 f924 	bl	8000288 <__aeabi_dsub>
 800d040:	4604      	mov	r4, r0
 800d042:	460d      	mov	r5, r1
 800d044:	4602      	mov	r2, r0
 800d046:	460b      	mov	r3, r1
 800d048:	4640      	mov	r0, r8
 800d04a:	4649      	mov	r1, r9
 800d04c:	f7f3 fad4 	bl	80005f8 <__aeabi_dmul>
 800d050:	2200      	movs	r2, #0
 800d052:	e9cd 0100 	strd	r0, r1, [sp]
 800d056:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800d05a:	4620      	mov	r0, r4
 800d05c:	4629      	mov	r1, r5
 800d05e:	f7f3 f913 	bl	8000288 <__aeabi_dsub>
 800d062:	4602      	mov	r2, r0
 800d064:	460b      	mov	r3, r1
 800d066:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d06a:	f7f3 fbef 	bl	800084c <__aeabi_ddiv>
 800d06e:	4632      	mov	r2, r6
 800d070:	4604      	mov	r4, r0
 800d072:	460d      	mov	r5, r1
 800d074:	463b      	mov	r3, r7
 800d076:	4640      	mov	r0, r8
 800d078:	4649      	mov	r1, r9
 800d07a:	f7f3 fabd 	bl	80005f8 <__aeabi_dmul>
 800d07e:	4632      	mov	r2, r6
 800d080:	463b      	mov	r3, r7
 800d082:	f7f3 f903 	bl	800028c <__adddf3>
 800d086:	4602      	mov	r2, r0
 800d088:	460b      	mov	r3, r1
 800d08a:	4620      	mov	r0, r4
 800d08c:	4629      	mov	r1, r5
 800d08e:	f7f3 f8fb 	bl	8000288 <__aeabi_dsub>
 800d092:	4642      	mov	r2, r8
 800d094:	464b      	mov	r3, r9
 800d096:	f7f3 f8f7 	bl	8000288 <__aeabi_dsub>
 800d09a:	460b      	mov	r3, r1
 800d09c:	4602      	mov	r2, r0
 800d09e:	493b      	ldr	r1, [pc, #236]	@ (800d18c <__ieee754_pow+0xa6c>)
 800d0a0:	2000      	movs	r0, #0
 800d0a2:	f7f3 f8f1 	bl	8000288 <__aeabi_dsub>
 800d0a6:	ec41 0b10 	vmov	d0, r0, r1
 800d0aa:	ee10 3a90 	vmov	r3, s1
 800d0ae:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800d0b2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d0b6:	da30      	bge.n	800d11a <__ieee754_pow+0x9fa>
 800d0b8:	4650      	mov	r0, sl
 800d0ba:	f000 fc11 	bl	800d8e0 <scalbn>
 800d0be:	ec51 0b10 	vmov	r0, r1, d0
 800d0c2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d0c6:	f7ff bbd2 	b.w	800c86e <__ieee754_pow+0x14e>
 800d0ca:	4c31      	ldr	r4, [pc, #196]	@ (800d190 <__ieee754_pow+0xa70>)
 800d0cc:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800d0d0:	42a3      	cmp	r3, r4
 800d0d2:	d91a      	bls.n	800d10a <__ieee754_pow+0x9ea>
 800d0d4:	4b2f      	ldr	r3, [pc, #188]	@ (800d194 <__ieee754_pow+0xa74>)
 800d0d6:	440b      	add	r3, r1
 800d0d8:	4303      	orrs	r3, r0
 800d0da:	d009      	beq.n	800d0f0 <__ieee754_pow+0x9d0>
 800d0dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d0e0:	2200      	movs	r2, #0
 800d0e2:	2300      	movs	r3, #0
 800d0e4:	f7f3 fcfa 	bl	8000adc <__aeabi_dcmplt>
 800d0e8:	3800      	subs	r0, #0
 800d0ea:	bf18      	it	ne
 800d0ec:	2001      	movne	r0, #1
 800d0ee:	e42b      	b.n	800c948 <__ieee754_pow+0x228>
 800d0f0:	4642      	mov	r2, r8
 800d0f2:	464b      	mov	r3, r9
 800d0f4:	f7f3 f8c8 	bl	8000288 <__aeabi_dsub>
 800d0f8:	4632      	mov	r2, r6
 800d0fa:	463b      	mov	r3, r7
 800d0fc:	f7f3 fd02 	bl	8000b04 <__aeabi_dcmpge>
 800d100:	2800      	cmp	r0, #0
 800d102:	d1eb      	bne.n	800d0dc <__ieee754_pow+0x9bc>
 800d104:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 800d1a4 <__ieee754_pow+0xa84>
 800d108:	e6f7      	b.n	800cefa <__ieee754_pow+0x7da>
 800d10a:	469a      	mov	sl, r3
 800d10c:	4b22      	ldr	r3, [pc, #136]	@ (800d198 <__ieee754_pow+0xa78>)
 800d10e:	459a      	cmp	sl, r3
 800d110:	f63f aef3 	bhi.w	800cefa <__ieee754_pow+0x7da>
 800d114:	f8dd a010 	ldr.w	sl, [sp, #16]
 800d118:	e715      	b.n	800cf46 <__ieee754_pow+0x826>
 800d11a:	ec51 0b10 	vmov	r0, r1, d0
 800d11e:	4619      	mov	r1, r3
 800d120:	e7cf      	b.n	800d0c2 <__ieee754_pow+0x9a2>
 800d122:	491a      	ldr	r1, [pc, #104]	@ (800d18c <__ieee754_pow+0xa6c>)
 800d124:	2000      	movs	r0, #0
 800d126:	f7ff bb18 	b.w	800c75a <__ieee754_pow+0x3a>
 800d12a:	2000      	movs	r0, #0
 800d12c:	2100      	movs	r1, #0
 800d12e:	f7ff bb14 	b.w	800c75a <__ieee754_pow+0x3a>
 800d132:	4630      	mov	r0, r6
 800d134:	4639      	mov	r1, r7
 800d136:	f7ff bb10 	b.w	800c75a <__ieee754_pow+0x3a>
 800d13a:	460c      	mov	r4, r1
 800d13c:	f7ff bb5e 	b.w	800c7fc <__ieee754_pow+0xdc>
 800d140:	2400      	movs	r4, #0
 800d142:	f7ff bb49 	b.w	800c7d8 <__ieee754_pow+0xb8>
 800d146:	bf00      	nop
 800d148:	00000000 	.word	0x00000000
 800d14c:	3fe62e43 	.word	0x3fe62e43
 800d150:	fefa39ef 	.word	0xfefa39ef
 800d154:	3fe62e42 	.word	0x3fe62e42
 800d158:	0ca86c39 	.word	0x0ca86c39
 800d15c:	be205c61 	.word	0xbe205c61
 800d160:	72bea4d0 	.word	0x72bea4d0
 800d164:	3e663769 	.word	0x3e663769
 800d168:	c5d26bf1 	.word	0xc5d26bf1
 800d16c:	3ebbbd41 	.word	0x3ebbbd41
 800d170:	af25de2c 	.word	0xaf25de2c
 800d174:	3f11566a 	.word	0x3f11566a
 800d178:	16bebd93 	.word	0x16bebd93
 800d17c:	3f66c16c 	.word	0x3f66c16c
 800d180:	5555553e 	.word	0x5555553e
 800d184:	3fc55555 	.word	0x3fc55555
 800d188:	fff00000 	.word	0xfff00000
 800d18c:	3ff00000 	.word	0x3ff00000
 800d190:	4090cbff 	.word	0x4090cbff
 800d194:	3f6f3400 	.word	0x3f6f3400
 800d198:	3fe00000 	.word	0x3fe00000
 800d19c:	652b82fe 	.word	0x652b82fe
 800d1a0:	3c971547 	.word	0x3c971547
 800d1a4:	4090cc00 	.word	0x4090cc00

0800d1a8 <__ieee754_rem_pio2>:
 800d1a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1ac:	ec57 6b10 	vmov	r6, r7, d0
 800d1b0:	4bc5      	ldr	r3, [pc, #788]	@ (800d4c8 <__ieee754_rem_pio2+0x320>)
 800d1b2:	b08d      	sub	sp, #52	@ 0x34
 800d1b4:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800d1b8:	4598      	cmp	r8, r3
 800d1ba:	4604      	mov	r4, r0
 800d1bc:	9704      	str	r7, [sp, #16]
 800d1be:	d807      	bhi.n	800d1d0 <__ieee754_rem_pio2+0x28>
 800d1c0:	2200      	movs	r2, #0
 800d1c2:	2300      	movs	r3, #0
 800d1c4:	ed80 0b00 	vstr	d0, [r0]
 800d1c8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800d1cc:	2500      	movs	r5, #0
 800d1ce:	e028      	b.n	800d222 <__ieee754_rem_pio2+0x7a>
 800d1d0:	4bbe      	ldr	r3, [pc, #760]	@ (800d4cc <__ieee754_rem_pio2+0x324>)
 800d1d2:	4598      	cmp	r8, r3
 800d1d4:	d878      	bhi.n	800d2c8 <__ieee754_rem_pio2+0x120>
 800d1d6:	9b04      	ldr	r3, [sp, #16]
 800d1d8:	4dbd      	ldr	r5, [pc, #756]	@ (800d4d0 <__ieee754_rem_pio2+0x328>)
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	4630      	mov	r0, r6
 800d1de:	a3ac      	add	r3, pc, #688	@ (adr r3, 800d490 <__ieee754_rem_pio2+0x2e8>)
 800d1e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1e4:	4639      	mov	r1, r7
 800d1e6:	dd38      	ble.n	800d25a <__ieee754_rem_pio2+0xb2>
 800d1e8:	f7f3 f84e 	bl	8000288 <__aeabi_dsub>
 800d1ec:	45a8      	cmp	r8, r5
 800d1ee:	4606      	mov	r6, r0
 800d1f0:	460f      	mov	r7, r1
 800d1f2:	d01a      	beq.n	800d22a <__ieee754_rem_pio2+0x82>
 800d1f4:	a3a8      	add	r3, pc, #672	@ (adr r3, 800d498 <__ieee754_rem_pio2+0x2f0>)
 800d1f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1fa:	f7f3 f845 	bl	8000288 <__aeabi_dsub>
 800d1fe:	4602      	mov	r2, r0
 800d200:	460b      	mov	r3, r1
 800d202:	4680      	mov	r8, r0
 800d204:	4689      	mov	r9, r1
 800d206:	4630      	mov	r0, r6
 800d208:	4639      	mov	r1, r7
 800d20a:	f7f3 f83d 	bl	8000288 <__aeabi_dsub>
 800d20e:	a3a2      	add	r3, pc, #648	@ (adr r3, 800d498 <__ieee754_rem_pio2+0x2f0>)
 800d210:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d214:	f7f3 f838 	bl	8000288 <__aeabi_dsub>
 800d218:	e9c4 8900 	strd	r8, r9, [r4]
 800d21c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800d220:	2501      	movs	r5, #1
 800d222:	4628      	mov	r0, r5
 800d224:	b00d      	add	sp, #52	@ 0x34
 800d226:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d22a:	a39d      	add	r3, pc, #628	@ (adr r3, 800d4a0 <__ieee754_rem_pio2+0x2f8>)
 800d22c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d230:	f7f3 f82a 	bl	8000288 <__aeabi_dsub>
 800d234:	a39c      	add	r3, pc, #624	@ (adr r3, 800d4a8 <__ieee754_rem_pio2+0x300>)
 800d236:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d23a:	4606      	mov	r6, r0
 800d23c:	460f      	mov	r7, r1
 800d23e:	f7f3 f823 	bl	8000288 <__aeabi_dsub>
 800d242:	4602      	mov	r2, r0
 800d244:	460b      	mov	r3, r1
 800d246:	4680      	mov	r8, r0
 800d248:	4689      	mov	r9, r1
 800d24a:	4630      	mov	r0, r6
 800d24c:	4639      	mov	r1, r7
 800d24e:	f7f3 f81b 	bl	8000288 <__aeabi_dsub>
 800d252:	a395      	add	r3, pc, #596	@ (adr r3, 800d4a8 <__ieee754_rem_pio2+0x300>)
 800d254:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d258:	e7dc      	b.n	800d214 <__ieee754_rem_pio2+0x6c>
 800d25a:	f7f3 f817 	bl	800028c <__adddf3>
 800d25e:	45a8      	cmp	r8, r5
 800d260:	4606      	mov	r6, r0
 800d262:	460f      	mov	r7, r1
 800d264:	d018      	beq.n	800d298 <__ieee754_rem_pio2+0xf0>
 800d266:	a38c      	add	r3, pc, #560	@ (adr r3, 800d498 <__ieee754_rem_pio2+0x2f0>)
 800d268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d26c:	f7f3 f80e 	bl	800028c <__adddf3>
 800d270:	4602      	mov	r2, r0
 800d272:	460b      	mov	r3, r1
 800d274:	4680      	mov	r8, r0
 800d276:	4689      	mov	r9, r1
 800d278:	4630      	mov	r0, r6
 800d27a:	4639      	mov	r1, r7
 800d27c:	f7f3 f804 	bl	8000288 <__aeabi_dsub>
 800d280:	a385      	add	r3, pc, #532	@ (adr r3, 800d498 <__ieee754_rem_pio2+0x2f0>)
 800d282:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d286:	f7f3 f801 	bl	800028c <__adddf3>
 800d28a:	f04f 35ff 	mov.w	r5, #4294967295
 800d28e:	e9c4 8900 	strd	r8, r9, [r4]
 800d292:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800d296:	e7c4      	b.n	800d222 <__ieee754_rem_pio2+0x7a>
 800d298:	a381      	add	r3, pc, #516	@ (adr r3, 800d4a0 <__ieee754_rem_pio2+0x2f8>)
 800d29a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d29e:	f7f2 fff5 	bl	800028c <__adddf3>
 800d2a2:	a381      	add	r3, pc, #516	@ (adr r3, 800d4a8 <__ieee754_rem_pio2+0x300>)
 800d2a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2a8:	4606      	mov	r6, r0
 800d2aa:	460f      	mov	r7, r1
 800d2ac:	f7f2 ffee 	bl	800028c <__adddf3>
 800d2b0:	4602      	mov	r2, r0
 800d2b2:	460b      	mov	r3, r1
 800d2b4:	4680      	mov	r8, r0
 800d2b6:	4689      	mov	r9, r1
 800d2b8:	4630      	mov	r0, r6
 800d2ba:	4639      	mov	r1, r7
 800d2bc:	f7f2 ffe4 	bl	8000288 <__aeabi_dsub>
 800d2c0:	a379      	add	r3, pc, #484	@ (adr r3, 800d4a8 <__ieee754_rem_pio2+0x300>)
 800d2c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2c6:	e7de      	b.n	800d286 <__ieee754_rem_pio2+0xde>
 800d2c8:	4b82      	ldr	r3, [pc, #520]	@ (800d4d4 <__ieee754_rem_pio2+0x32c>)
 800d2ca:	4598      	cmp	r8, r3
 800d2cc:	f200 80d1 	bhi.w	800d472 <__ieee754_rem_pio2+0x2ca>
 800d2d0:	f000 fafe 	bl	800d8d0 <fabs>
 800d2d4:	ec57 6b10 	vmov	r6, r7, d0
 800d2d8:	a375      	add	r3, pc, #468	@ (adr r3, 800d4b0 <__ieee754_rem_pio2+0x308>)
 800d2da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2de:	4630      	mov	r0, r6
 800d2e0:	4639      	mov	r1, r7
 800d2e2:	f7f3 f989 	bl	80005f8 <__aeabi_dmul>
 800d2e6:	4b7c      	ldr	r3, [pc, #496]	@ (800d4d8 <__ieee754_rem_pio2+0x330>)
 800d2e8:	2200      	movs	r2, #0
 800d2ea:	f7f2 ffcf 	bl	800028c <__adddf3>
 800d2ee:	f7f3 fc33 	bl	8000b58 <__aeabi_d2iz>
 800d2f2:	4605      	mov	r5, r0
 800d2f4:	f7f3 f916 	bl	8000524 <__aeabi_i2d>
 800d2f8:	4602      	mov	r2, r0
 800d2fa:	460b      	mov	r3, r1
 800d2fc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d300:	a363      	add	r3, pc, #396	@ (adr r3, 800d490 <__ieee754_rem_pio2+0x2e8>)
 800d302:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d306:	f7f3 f977 	bl	80005f8 <__aeabi_dmul>
 800d30a:	4602      	mov	r2, r0
 800d30c:	460b      	mov	r3, r1
 800d30e:	4630      	mov	r0, r6
 800d310:	4639      	mov	r1, r7
 800d312:	f7f2 ffb9 	bl	8000288 <__aeabi_dsub>
 800d316:	a360      	add	r3, pc, #384	@ (adr r3, 800d498 <__ieee754_rem_pio2+0x2f0>)
 800d318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d31c:	4682      	mov	sl, r0
 800d31e:	468b      	mov	fp, r1
 800d320:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d324:	f7f3 f968 	bl	80005f8 <__aeabi_dmul>
 800d328:	2d1f      	cmp	r5, #31
 800d32a:	4606      	mov	r6, r0
 800d32c:	460f      	mov	r7, r1
 800d32e:	dc0c      	bgt.n	800d34a <__ieee754_rem_pio2+0x1a2>
 800d330:	4b6a      	ldr	r3, [pc, #424]	@ (800d4dc <__ieee754_rem_pio2+0x334>)
 800d332:	1e6a      	subs	r2, r5, #1
 800d334:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d338:	4543      	cmp	r3, r8
 800d33a:	d006      	beq.n	800d34a <__ieee754_rem_pio2+0x1a2>
 800d33c:	4632      	mov	r2, r6
 800d33e:	463b      	mov	r3, r7
 800d340:	4650      	mov	r0, sl
 800d342:	4659      	mov	r1, fp
 800d344:	f7f2 ffa0 	bl	8000288 <__aeabi_dsub>
 800d348:	e00e      	b.n	800d368 <__ieee754_rem_pio2+0x1c0>
 800d34a:	463b      	mov	r3, r7
 800d34c:	4632      	mov	r2, r6
 800d34e:	4650      	mov	r0, sl
 800d350:	4659      	mov	r1, fp
 800d352:	f7f2 ff99 	bl	8000288 <__aeabi_dsub>
 800d356:	ea4f 5328 	mov.w	r3, r8, asr #20
 800d35a:	9305      	str	r3, [sp, #20]
 800d35c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800d360:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800d364:	2b10      	cmp	r3, #16
 800d366:	dc02      	bgt.n	800d36e <__ieee754_rem_pio2+0x1c6>
 800d368:	e9c4 0100 	strd	r0, r1, [r4]
 800d36c:	e039      	b.n	800d3e2 <__ieee754_rem_pio2+0x23a>
 800d36e:	a34c      	add	r3, pc, #304	@ (adr r3, 800d4a0 <__ieee754_rem_pio2+0x2f8>)
 800d370:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d374:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d378:	f7f3 f93e 	bl	80005f8 <__aeabi_dmul>
 800d37c:	4606      	mov	r6, r0
 800d37e:	460f      	mov	r7, r1
 800d380:	4602      	mov	r2, r0
 800d382:	460b      	mov	r3, r1
 800d384:	4650      	mov	r0, sl
 800d386:	4659      	mov	r1, fp
 800d388:	f7f2 ff7e 	bl	8000288 <__aeabi_dsub>
 800d38c:	4602      	mov	r2, r0
 800d38e:	460b      	mov	r3, r1
 800d390:	4680      	mov	r8, r0
 800d392:	4689      	mov	r9, r1
 800d394:	4650      	mov	r0, sl
 800d396:	4659      	mov	r1, fp
 800d398:	f7f2 ff76 	bl	8000288 <__aeabi_dsub>
 800d39c:	4632      	mov	r2, r6
 800d39e:	463b      	mov	r3, r7
 800d3a0:	f7f2 ff72 	bl	8000288 <__aeabi_dsub>
 800d3a4:	a340      	add	r3, pc, #256	@ (adr r3, 800d4a8 <__ieee754_rem_pio2+0x300>)
 800d3a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3aa:	4606      	mov	r6, r0
 800d3ac:	460f      	mov	r7, r1
 800d3ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d3b2:	f7f3 f921 	bl	80005f8 <__aeabi_dmul>
 800d3b6:	4632      	mov	r2, r6
 800d3b8:	463b      	mov	r3, r7
 800d3ba:	f7f2 ff65 	bl	8000288 <__aeabi_dsub>
 800d3be:	4602      	mov	r2, r0
 800d3c0:	460b      	mov	r3, r1
 800d3c2:	4606      	mov	r6, r0
 800d3c4:	460f      	mov	r7, r1
 800d3c6:	4640      	mov	r0, r8
 800d3c8:	4649      	mov	r1, r9
 800d3ca:	f7f2 ff5d 	bl	8000288 <__aeabi_dsub>
 800d3ce:	9a05      	ldr	r2, [sp, #20]
 800d3d0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800d3d4:	1ad3      	subs	r3, r2, r3
 800d3d6:	2b31      	cmp	r3, #49	@ 0x31
 800d3d8:	dc20      	bgt.n	800d41c <__ieee754_rem_pio2+0x274>
 800d3da:	e9c4 0100 	strd	r0, r1, [r4]
 800d3de:	46c2      	mov	sl, r8
 800d3e0:	46cb      	mov	fp, r9
 800d3e2:	e9d4 8900 	ldrd	r8, r9, [r4]
 800d3e6:	4650      	mov	r0, sl
 800d3e8:	4642      	mov	r2, r8
 800d3ea:	464b      	mov	r3, r9
 800d3ec:	4659      	mov	r1, fp
 800d3ee:	f7f2 ff4b 	bl	8000288 <__aeabi_dsub>
 800d3f2:	463b      	mov	r3, r7
 800d3f4:	4632      	mov	r2, r6
 800d3f6:	f7f2 ff47 	bl	8000288 <__aeabi_dsub>
 800d3fa:	9b04      	ldr	r3, [sp, #16]
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800d402:	f6bf af0e 	bge.w	800d222 <__ieee754_rem_pio2+0x7a>
 800d406:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 800d40a:	6063      	str	r3, [r4, #4]
 800d40c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800d410:	f8c4 8000 	str.w	r8, [r4]
 800d414:	60a0      	str	r0, [r4, #8]
 800d416:	60e3      	str	r3, [r4, #12]
 800d418:	426d      	negs	r5, r5
 800d41a:	e702      	b.n	800d222 <__ieee754_rem_pio2+0x7a>
 800d41c:	a326      	add	r3, pc, #152	@ (adr r3, 800d4b8 <__ieee754_rem_pio2+0x310>)
 800d41e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d422:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d426:	f7f3 f8e7 	bl	80005f8 <__aeabi_dmul>
 800d42a:	4606      	mov	r6, r0
 800d42c:	460f      	mov	r7, r1
 800d42e:	4602      	mov	r2, r0
 800d430:	460b      	mov	r3, r1
 800d432:	4640      	mov	r0, r8
 800d434:	4649      	mov	r1, r9
 800d436:	f7f2 ff27 	bl	8000288 <__aeabi_dsub>
 800d43a:	4602      	mov	r2, r0
 800d43c:	460b      	mov	r3, r1
 800d43e:	4682      	mov	sl, r0
 800d440:	468b      	mov	fp, r1
 800d442:	4640      	mov	r0, r8
 800d444:	4649      	mov	r1, r9
 800d446:	f7f2 ff1f 	bl	8000288 <__aeabi_dsub>
 800d44a:	4632      	mov	r2, r6
 800d44c:	463b      	mov	r3, r7
 800d44e:	f7f2 ff1b 	bl	8000288 <__aeabi_dsub>
 800d452:	a31b      	add	r3, pc, #108	@ (adr r3, 800d4c0 <__ieee754_rem_pio2+0x318>)
 800d454:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d458:	4606      	mov	r6, r0
 800d45a:	460f      	mov	r7, r1
 800d45c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d460:	f7f3 f8ca 	bl	80005f8 <__aeabi_dmul>
 800d464:	4632      	mov	r2, r6
 800d466:	463b      	mov	r3, r7
 800d468:	f7f2 ff0e 	bl	8000288 <__aeabi_dsub>
 800d46c:	4606      	mov	r6, r0
 800d46e:	460f      	mov	r7, r1
 800d470:	e764      	b.n	800d33c <__ieee754_rem_pio2+0x194>
 800d472:	4b1b      	ldr	r3, [pc, #108]	@ (800d4e0 <__ieee754_rem_pio2+0x338>)
 800d474:	4598      	cmp	r8, r3
 800d476:	d935      	bls.n	800d4e4 <__ieee754_rem_pio2+0x33c>
 800d478:	4632      	mov	r2, r6
 800d47a:	463b      	mov	r3, r7
 800d47c:	4630      	mov	r0, r6
 800d47e:	4639      	mov	r1, r7
 800d480:	f7f2 ff02 	bl	8000288 <__aeabi_dsub>
 800d484:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800d488:	e9c4 0100 	strd	r0, r1, [r4]
 800d48c:	e69e      	b.n	800d1cc <__ieee754_rem_pio2+0x24>
 800d48e:	bf00      	nop
 800d490:	54400000 	.word	0x54400000
 800d494:	3ff921fb 	.word	0x3ff921fb
 800d498:	1a626331 	.word	0x1a626331
 800d49c:	3dd0b461 	.word	0x3dd0b461
 800d4a0:	1a600000 	.word	0x1a600000
 800d4a4:	3dd0b461 	.word	0x3dd0b461
 800d4a8:	2e037073 	.word	0x2e037073
 800d4ac:	3ba3198a 	.word	0x3ba3198a
 800d4b0:	6dc9c883 	.word	0x6dc9c883
 800d4b4:	3fe45f30 	.word	0x3fe45f30
 800d4b8:	2e000000 	.word	0x2e000000
 800d4bc:	3ba3198a 	.word	0x3ba3198a
 800d4c0:	252049c1 	.word	0x252049c1
 800d4c4:	397b839a 	.word	0x397b839a
 800d4c8:	3fe921fb 	.word	0x3fe921fb
 800d4cc:	4002d97b 	.word	0x4002d97b
 800d4d0:	3ff921fb 	.word	0x3ff921fb
 800d4d4:	413921fb 	.word	0x413921fb
 800d4d8:	3fe00000 	.word	0x3fe00000
 800d4dc:	0800e610 	.word	0x0800e610
 800d4e0:	7fefffff 	.word	0x7fefffff
 800d4e4:	ea4f 5528 	mov.w	r5, r8, asr #20
 800d4e8:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 800d4ec:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800d4f0:	4630      	mov	r0, r6
 800d4f2:	460f      	mov	r7, r1
 800d4f4:	f7f3 fb30 	bl	8000b58 <__aeabi_d2iz>
 800d4f8:	f7f3 f814 	bl	8000524 <__aeabi_i2d>
 800d4fc:	4602      	mov	r2, r0
 800d4fe:	460b      	mov	r3, r1
 800d500:	4630      	mov	r0, r6
 800d502:	4639      	mov	r1, r7
 800d504:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800d508:	f7f2 febe 	bl	8000288 <__aeabi_dsub>
 800d50c:	4b22      	ldr	r3, [pc, #136]	@ (800d598 <__ieee754_rem_pio2+0x3f0>)
 800d50e:	2200      	movs	r2, #0
 800d510:	f7f3 f872 	bl	80005f8 <__aeabi_dmul>
 800d514:	460f      	mov	r7, r1
 800d516:	4606      	mov	r6, r0
 800d518:	f7f3 fb1e 	bl	8000b58 <__aeabi_d2iz>
 800d51c:	f7f3 f802 	bl	8000524 <__aeabi_i2d>
 800d520:	4602      	mov	r2, r0
 800d522:	460b      	mov	r3, r1
 800d524:	4630      	mov	r0, r6
 800d526:	4639      	mov	r1, r7
 800d528:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800d52c:	f7f2 feac 	bl	8000288 <__aeabi_dsub>
 800d530:	4b19      	ldr	r3, [pc, #100]	@ (800d598 <__ieee754_rem_pio2+0x3f0>)
 800d532:	2200      	movs	r2, #0
 800d534:	f7f3 f860 	bl	80005f8 <__aeabi_dmul>
 800d538:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 800d53c:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 800d540:	f04f 0803 	mov.w	r8, #3
 800d544:	2600      	movs	r6, #0
 800d546:	2700      	movs	r7, #0
 800d548:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800d54c:	4632      	mov	r2, r6
 800d54e:	463b      	mov	r3, r7
 800d550:	46c2      	mov	sl, r8
 800d552:	f108 38ff 	add.w	r8, r8, #4294967295
 800d556:	f7f3 fab7 	bl	8000ac8 <__aeabi_dcmpeq>
 800d55a:	2800      	cmp	r0, #0
 800d55c:	d1f4      	bne.n	800d548 <__ieee754_rem_pio2+0x3a0>
 800d55e:	4b0f      	ldr	r3, [pc, #60]	@ (800d59c <__ieee754_rem_pio2+0x3f4>)
 800d560:	9301      	str	r3, [sp, #4]
 800d562:	2302      	movs	r3, #2
 800d564:	9300      	str	r3, [sp, #0]
 800d566:	462a      	mov	r2, r5
 800d568:	4653      	mov	r3, sl
 800d56a:	4621      	mov	r1, r4
 800d56c:	a806      	add	r0, sp, #24
 800d56e:	f000 fa73 	bl	800da58 <__kernel_rem_pio2>
 800d572:	9b04      	ldr	r3, [sp, #16]
 800d574:	2b00      	cmp	r3, #0
 800d576:	4605      	mov	r5, r0
 800d578:	f6bf ae53 	bge.w	800d222 <__ieee754_rem_pio2+0x7a>
 800d57c:	e9d4 2100 	ldrd	r2, r1, [r4]
 800d580:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800d584:	e9c4 2300 	strd	r2, r3, [r4]
 800d588:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800d58c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800d590:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800d594:	e740      	b.n	800d418 <__ieee754_rem_pio2+0x270>
 800d596:	bf00      	nop
 800d598:	41700000 	.word	0x41700000
 800d59c:	0800e690 	.word	0x0800e690

0800d5a0 <atan>:
 800d5a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5a4:	ec55 4b10 	vmov	r4, r5, d0
 800d5a8:	4bbf      	ldr	r3, [pc, #764]	@ (800d8a8 <atan+0x308>)
 800d5aa:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 800d5ae:	429e      	cmp	r6, r3
 800d5b0:	46ab      	mov	fp, r5
 800d5b2:	d918      	bls.n	800d5e6 <atan+0x46>
 800d5b4:	4bbd      	ldr	r3, [pc, #756]	@ (800d8ac <atan+0x30c>)
 800d5b6:	429e      	cmp	r6, r3
 800d5b8:	d801      	bhi.n	800d5be <atan+0x1e>
 800d5ba:	d109      	bne.n	800d5d0 <atan+0x30>
 800d5bc:	b144      	cbz	r4, 800d5d0 <atan+0x30>
 800d5be:	4622      	mov	r2, r4
 800d5c0:	462b      	mov	r3, r5
 800d5c2:	4620      	mov	r0, r4
 800d5c4:	4629      	mov	r1, r5
 800d5c6:	f7f2 fe61 	bl	800028c <__adddf3>
 800d5ca:	4604      	mov	r4, r0
 800d5cc:	460d      	mov	r5, r1
 800d5ce:	e006      	b.n	800d5de <atan+0x3e>
 800d5d0:	f1bb 0f00 	cmp.w	fp, #0
 800d5d4:	f340 812b 	ble.w	800d82e <atan+0x28e>
 800d5d8:	a597      	add	r5, pc, #604	@ (adr r5, 800d838 <atan+0x298>)
 800d5da:	e9d5 4500 	ldrd	r4, r5, [r5]
 800d5de:	ec45 4b10 	vmov	d0, r4, r5
 800d5e2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d5e6:	4bb2      	ldr	r3, [pc, #712]	@ (800d8b0 <atan+0x310>)
 800d5e8:	429e      	cmp	r6, r3
 800d5ea:	d813      	bhi.n	800d614 <atan+0x74>
 800d5ec:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 800d5f0:	429e      	cmp	r6, r3
 800d5f2:	d80c      	bhi.n	800d60e <atan+0x6e>
 800d5f4:	a392      	add	r3, pc, #584	@ (adr r3, 800d840 <atan+0x2a0>)
 800d5f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5fa:	4620      	mov	r0, r4
 800d5fc:	4629      	mov	r1, r5
 800d5fe:	f7f2 fe45 	bl	800028c <__adddf3>
 800d602:	4bac      	ldr	r3, [pc, #688]	@ (800d8b4 <atan+0x314>)
 800d604:	2200      	movs	r2, #0
 800d606:	f7f3 fa87 	bl	8000b18 <__aeabi_dcmpgt>
 800d60a:	2800      	cmp	r0, #0
 800d60c:	d1e7      	bne.n	800d5de <atan+0x3e>
 800d60e:	f04f 3aff 	mov.w	sl, #4294967295
 800d612:	e029      	b.n	800d668 <atan+0xc8>
 800d614:	f000 f95c 	bl	800d8d0 <fabs>
 800d618:	4ba7      	ldr	r3, [pc, #668]	@ (800d8b8 <atan+0x318>)
 800d61a:	429e      	cmp	r6, r3
 800d61c:	ec55 4b10 	vmov	r4, r5, d0
 800d620:	f200 80bc 	bhi.w	800d79c <atan+0x1fc>
 800d624:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 800d628:	429e      	cmp	r6, r3
 800d62a:	f200 809e 	bhi.w	800d76a <atan+0x1ca>
 800d62e:	4622      	mov	r2, r4
 800d630:	462b      	mov	r3, r5
 800d632:	4620      	mov	r0, r4
 800d634:	4629      	mov	r1, r5
 800d636:	f7f2 fe29 	bl	800028c <__adddf3>
 800d63a:	4b9e      	ldr	r3, [pc, #632]	@ (800d8b4 <atan+0x314>)
 800d63c:	2200      	movs	r2, #0
 800d63e:	f7f2 fe23 	bl	8000288 <__aeabi_dsub>
 800d642:	2200      	movs	r2, #0
 800d644:	4606      	mov	r6, r0
 800d646:	460f      	mov	r7, r1
 800d648:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800d64c:	4620      	mov	r0, r4
 800d64e:	4629      	mov	r1, r5
 800d650:	f7f2 fe1c 	bl	800028c <__adddf3>
 800d654:	4602      	mov	r2, r0
 800d656:	460b      	mov	r3, r1
 800d658:	4630      	mov	r0, r6
 800d65a:	4639      	mov	r1, r7
 800d65c:	f7f3 f8f6 	bl	800084c <__aeabi_ddiv>
 800d660:	f04f 0a00 	mov.w	sl, #0
 800d664:	4604      	mov	r4, r0
 800d666:	460d      	mov	r5, r1
 800d668:	4622      	mov	r2, r4
 800d66a:	462b      	mov	r3, r5
 800d66c:	4620      	mov	r0, r4
 800d66e:	4629      	mov	r1, r5
 800d670:	f7f2 ffc2 	bl	80005f8 <__aeabi_dmul>
 800d674:	4602      	mov	r2, r0
 800d676:	460b      	mov	r3, r1
 800d678:	4680      	mov	r8, r0
 800d67a:	4689      	mov	r9, r1
 800d67c:	f7f2 ffbc 	bl	80005f8 <__aeabi_dmul>
 800d680:	a371      	add	r3, pc, #452	@ (adr r3, 800d848 <atan+0x2a8>)
 800d682:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d686:	4606      	mov	r6, r0
 800d688:	460f      	mov	r7, r1
 800d68a:	f7f2 ffb5 	bl	80005f8 <__aeabi_dmul>
 800d68e:	a370      	add	r3, pc, #448	@ (adr r3, 800d850 <atan+0x2b0>)
 800d690:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d694:	f7f2 fdfa 	bl	800028c <__adddf3>
 800d698:	4632      	mov	r2, r6
 800d69a:	463b      	mov	r3, r7
 800d69c:	f7f2 ffac 	bl	80005f8 <__aeabi_dmul>
 800d6a0:	a36d      	add	r3, pc, #436	@ (adr r3, 800d858 <atan+0x2b8>)
 800d6a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6a6:	f7f2 fdf1 	bl	800028c <__adddf3>
 800d6aa:	4632      	mov	r2, r6
 800d6ac:	463b      	mov	r3, r7
 800d6ae:	f7f2 ffa3 	bl	80005f8 <__aeabi_dmul>
 800d6b2:	a36b      	add	r3, pc, #428	@ (adr r3, 800d860 <atan+0x2c0>)
 800d6b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6b8:	f7f2 fde8 	bl	800028c <__adddf3>
 800d6bc:	4632      	mov	r2, r6
 800d6be:	463b      	mov	r3, r7
 800d6c0:	f7f2 ff9a 	bl	80005f8 <__aeabi_dmul>
 800d6c4:	a368      	add	r3, pc, #416	@ (adr r3, 800d868 <atan+0x2c8>)
 800d6c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6ca:	f7f2 fddf 	bl	800028c <__adddf3>
 800d6ce:	4632      	mov	r2, r6
 800d6d0:	463b      	mov	r3, r7
 800d6d2:	f7f2 ff91 	bl	80005f8 <__aeabi_dmul>
 800d6d6:	a366      	add	r3, pc, #408	@ (adr r3, 800d870 <atan+0x2d0>)
 800d6d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6dc:	f7f2 fdd6 	bl	800028c <__adddf3>
 800d6e0:	4642      	mov	r2, r8
 800d6e2:	464b      	mov	r3, r9
 800d6e4:	f7f2 ff88 	bl	80005f8 <__aeabi_dmul>
 800d6e8:	a363      	add	r3, pc, #396	@ (adr r3, 800d878 <atan+0x2d8>)
 800d6ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6ee:	4680      	mov	r8, r0
 800d6f0:	4689      	mov	r9, r1
 800d6f2:	4630      	mov	r0, r6
 800d6f4:	4639      	mov	r1, r7
 800d6f6:	f7f2 ff7f 	bl	80005f8 <__aeabi_dmul>
 800d6fa:	a361      	add	r3, pc, #388	@ (adr r3, 800d880 <atan+0x2e0>)
 800d6fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d700:	f7f2 fdc2 	bl	8000288 <__aeabi_dsub>
 800d704:	4632      	mov	r2, r6
 800d706:	463b      	mov	r3, r7
 800d708:	f7f2 ff76 	bl	80005f8 <__aeabi_dmul>
 800d70c:	a35e      	add	r3, pc, #376	@ (adr r3, 800d888 <atan+0x2e8>)
 800d70e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d712:	f7f2 fdb9 	bl	8000288 <__aeabi_dsub>
 800d716:	4632      	mov	r2, r6
 800d718:	463b      	mov	r3, r7
 800d71a:	f7f2 ff6d 	bl	80005f8 <__aeabi_dmul>
 800d71e:	a35c      	add	r3, pc, #368	@ (adr r3, 800d890 <atan+0x2f0>)
 800d720:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d724:	f7f2 fdb0 	bl	8000288 <__aeabi_dsub>
 800d728:	4632      	mov	r2, r6
 800d72a:	463b      	mov	r3, r7
 800d72c:	f7f2 ff64 	bl	80005f8 <__aeabi_dmul>
 800d730:	a359      	add	r3, pc, #356	@ (adr r3, 800d898 <atan+0x2f8>)
 800d732:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d736:	f7f2 fda7 	bl	8000288 <__aeabi_dsub>
 800d73a:	4632      	mov	r2, r6
 800d73c:	463b      	mov	r3, r7
 800d73e:	f7f2 ff5b 	bl	80005f8 <__aeabi_dmul>
 800d742:	4602      	mov	r2, r0
 800d744:	460b      	mov	r3, r1
 800d746:	4640      	mov	r0, r8
 800d748:	4649      	mov	r1, r9
 800d74a:	f7f2 fd9f 	bl	800028c <__adddf3>
 800d74e:	4622      	mov	r2, r4
 800d750:	462b      	mov	r3, r5
 800d752:	f7f2 ff51 	bl	80005f8 <__aeabi_dmul>
 800d756:	f1ba 3fff 	cmp.w	sl, #4294967295
 800d75a:	4602      	mov	r2, r0
 800d75c:	460b      	mov	r3, r1
 800d75e:	d148      	bne.n	800d7f2 <atan+0x252>
 800d760:	4620      	mov	r0, r4
 800d762:	4629      	mov	r1, r5
 800d764:	f7f2 fd90 	bl	8000288 <__aeabi_dsub>
 800d768:	e72f      	b.n	800d5ca <atan+0x2a>
 800d76a:	4b52      	ldr	r3, [pc, #328]	@ (800d8b4 <atan+0x314>)
 800d76c:	2200      	movs	r2, #0
 800d76e:	4620      	mov	r0, r4
 800d770:	4629      	mov	r1, r5
 800d772:	f7f2 fd89 	bl	8000288 <__aeabi_dsub>
 800d776:	4b4f      	ldr	r3, [pc, #316]	@ (800d8b4 <atan+0x314>)
 800d778:	4606      	mov	r6, r0
 800d77a:	460f      	mov	r7, r1
 800d77c:	2200      	movs	r2, #0
 800d77e:	4620      	mov	r0, r4
 800d780:	4629      	mov	r1, r5
 800d782:	f7f2 fd83 	bl	800028c <__adddf3>
 800d786:	4602      	mov	r2, r0
 800d788:	460b      	mov	r3, r1
 800d78a:	4630      	mov	r0, r6
 800d78c:	4639      	mov	r1, r7
 800d78e:	f7f3 f85d 	bl	800084c <__aeabi_ddiv>
 800d792:	f04f 0a01 	mov.w	sl, #1
 800d796:	4604      	mov	r4, r0
 800d798:	460d      	mov	r5, r1
 800d79a:	e765      	b.n	800d668 <atan+0xc8>
 800d79c:	4b47      	ldr	r3, [pc, #284]	@ (800d8bc <atan+0x31c>)
 800d79e:	429e      	cmp	r6, r3
 800d7a0:	d21c      	bcs.n	800d7dc <atan+0x23c>
 800d7a2:	4b47      	ldr	r3, [pc, #284]	@ (800d8c0 <atan+0x320>)
 800d7a4:	2200      	movs	r2, #0
 800d7a6:	4620      	mov	r0, r4
 800d7a8:	4629      	mov	r1, r5
 800d7aa:	f7f2 fd6d 	bl	8000288 <__aeabi_dsub>
 800d7ae:	4b44      	ldr	r3, [pc, #272]	@ (800d8c0 <atan+0x320>)
 800d7b0:	4606      	mov	r6, r0
 800d7b2:	460f      	mov	r7, r1
 800d7b4:	2200      	movs	r2, #0
 800d7b6:	4620      	mov	r0, r4
 800d7b8:	4629      	mov	r1, r5
 800d7ba:	f7f2 ff1d 	bl	80005f8 <__aeabi_dmul>
 800d7be:	4b3d      	ldr	r3, [pc, #244]	@ (800d8b4 <atan+0x314>)
 800d7c0:	2200      	movs	r2, #0
 800d7c2:	f7f2 fd63 	bl	800028c <__adddf3>
 800d7c6:	4602      	mov	r2, r0
 800d7c8:	460b      	mov	r3, r1
 800d7ca:	4630      	mov	r0, r6
 800d7cc:	4639      	mov	r1, r7
 800d7ce:	f7f3 f83d 	bl	800084c <__aeabi_ddiv>
 800d7d2:	f04f 0a02 	mov.w	sl, #2
 800d7d6:	4604      	mov	r4, r0
 800d7d8:	460d      	mov	r5, r1
 800d7da:	e745      	b.n	800d668 <atan+0xc8>
 800d7dc:	4622      	mov	r2, r4
 800d7de:	462b      	mov	r3, r5
 800d7e0:	4938      	ldr	r1, [pc, #224]	@ (800d8c4 <atan+0x324>)
 800d7e2:	2000      	movs	r0, #0
 800d7e4:	f7f3 f832 	bl	800084c <__aeabi_ddiv>
 800d7e8:	f04f 0a03 	mov.w	sl, #3
 800d7ec:	4604      	mov	r4, r0
 800d7ee:	460d      	mov	r5, r1
 800d7f0:	e73a      	b.n	800d668 <atan+0xc8>
 800d7f2:	4b35      	ldr	r3, [pc, #212]	@ (800d8c8 <atan+0x328>)
 800d7f4:	4e35      	ldr	r6, [pc, #212]	@ (800d8cc <atan+0x32c>)
 800d7f6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800d7fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7fe:	f7f2 fd43 	bl	8000288 <__aeabi_dsub>
 800d802:	4622      	mov	r2, r4
 800d804:	462b      	mov	r3, r5
 800d806:	f7f2 fd3f 	bl	8000288 <__aeabi_dsub>
 800d80a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800d80e:	4602      	mov	r2, r0
 800d810:	460b      	mov	r3, r1
 800d812:	e9d6 0100 	ldrd	r0, r1, [r6]
 800d816:	f7f2 fd37 	bl	8000288 <__aeabi_dsub>
 800d81a:	f1bb 0f00 	cmp.w	fp, #0
 800d81e:	4604      	mov	r4, r0
 800d820:	460d      	mov	r5, r1
 800d822:	f6bf aedc 	bge.w	800d5de <atan+0x3e>
 800d826:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800d82a:	461d      	mov	r5, r3
 800d82c:	e6d7      	b.n	800d5de <atan+0x3e>
 800d82e:	a51c      	add	r5, pc, #112	@ (adr r5, 800d8a0 <atan+0x300>)
 800d830:	e9d5 4500 	ldrd	r4, r5, [r5]
 800d834:	e6d3      	b.n	800d5de <atan+0x3e>
 800d836:	bf00      	nop
 800d838:	54442d18 	.word	0x54442d18
 800d83c:	3ff921fb 	.word	0x3ff921fb
 800d840:	8800759c 	.word	0x8800759c
 800d844:	7e37e43c 	.word	0x7e37e43c
 800d848:	e322da11 	.word	0xe322da11
 800d84c:	3f90ad3a 	.word	0x3f90ad3a
 800d850:	24760deb 	.word	0x24760deb
 800d854:	3fa97b4b 	.word	0x3fa97b4b
 800d858:	a0d03d51 	.word	0xa0d03d51
 800d85c:	3fb10d66 	.word	0x3fb10d66
 800d860:	c54c206e 	.word	0xc54c206e
 800d864:	3fb745cd 	.word	0x3fb745cd
 800d868:	920083ff 	.word	0x920083ff
 800d86c:	3fc24924 	.word	0x3fc24924
 800d870:	5555550d 	.word	0x5555550d
 800d874:	3fd55555 	.word	0x3fd55555
 800d878:	2c6a6c2f 	.word	0x2c6a6c2f
 800d87c:	bfa2b444 	.word	0xbfa2b444
 800d880:	52defd9a 	.word	0x52defd9a
 800d884:	3fadde2d 	.word	0x3fadde2d
 800d888:	af749a6d 	.word	0xaf749a6d
 800d88c:	3fb3b0f2 	.word	0x3fb3b0f2
 800d890:	fe231671 	.word	0xfe231671
 800d894:	3fbc71c6 	.word	0x3fbc71c6
 800d898:	9998ebc4 	.word	0x9998ebc4
 800d89c:	3fc99999 	.word	0x3fc99999
 800d8a0:	54442d18 	.word	0x54442d18
 800d8a4:	bff921fb 	.word	0xbff921fb
 800d8a8:	440fffff 	.word	0x440fffff
 800d8ac:	7ff00000 	.word	0x7ff00000
 800d8b0:	3fdbffff 	.word	0x3fdbffff
 800d8b4:	3ff00000 	.word	0x3ff00000
 800d8b8:	3ff2ffff 	.word	0x3ff2ffff
 800d8bc:	40038000 	.word	0x40038000
 800d8c0:	3ff80000 	.word	0x3ff80000
 800d8c4:	bff00000 	.word	0xbff00000
 800d8c8:	0800e798 	.word	0x0800e798
 800d8cc:	0800e7b8 	.word	0x0800e7b8

0800d8d0 <fabs>:
 800d8d0:	ec51 0b10 	vmov	r0, r1, d0
 800d8d4:	4602      	mov	r2, r0
 800d8d6:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800d8da:	ec43 2b10 	vmov	d0, r2, r3
 800d8de:	4770      	bx	lr

0800d8e0 <scalbn>:
 800d8e0:	b570      	push	{r4, r5, r6, lr}
 800d8e2:	ec55 4b10 	vmov	r4, r5, d0
 800d8e6:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800d8ea:	4606      	mov	r6, r0
 800d8ec:	462b      	mov	r3, r5
 800d8ee:	b991      	cbnz	r1, 800d916 <scalbn+0x36>
 800d8f0:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800d8f4:	4323      	orrs	r3, r4
 800d8f6:	d03d      	beq.n	800d974 <scalbn+0x94>
 800d8f8:	4b35      	ldr	r3, [pc, #212]	@ (800d9d0 <scalbn+0xf0>)
 800d8fa:	4620      	mov	r0, r4
 800d8fc:	4629      	mov	r1, r5
 800d8fe:	2200      	movs	r2, #0
 800d900:	f7f2 fe7a 	bl	80005f8 <__aeabi_dmul>
 800d904:	4b33      	ldr	r3, [pc, #204]	@ (800d9d4 <scalbn+0xf4>)
 800d906:	429e      	cmp	r6, r3
 800d908:	4604      	mov	r4, r0
 800d90a:	460d      	mov	r5, r1
 800d90c:	da0f      	bge.n	800d92e <scalbn+0x4e>
 800d90e:	a328      	add	r3, pc, #160	@ (adr r3, 800d9b0 <scalbn+0xd0>)
 800d910:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d914:	e01e      	b.n	800d954 <scalbn+0x74>
 800d916:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800d91a:	4291      	cmp	r1, r2
 800d91c:	d10b      	bne.n	800d936 <scalbn+0x56>
 800d91e:	4622      	mov	r2, r4
 800d920:	4620      	mov	r0, r4
 800d922:	4629      	mov	r1, r5
 800d924:	f7f2 fcb2 	bl	800028c <__adddf3>
 800d928:	4604      	mov	r4, r0
 800d92a:	460d      	mov	r5, r1
 800d92c:	e022      	b.n	800d974 <scalbn+0x94>
 800d92e:	460b      	mov	r3, r1
 800d930:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800d934:	3936      	subs	r1, #54	@ 0x36
 800d936:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800d93a:	4296      	cmp	r6, r2
 800d93c:	dd0d      	ble.n	800d95a <scalbn+0x7a>
 800d93e:	2d00      	cmp	r5, #0
 800d940:	a11d      	add	r1, pc, #116	@ (adr r1, 800d9b8 <scalbn+0xd8>)
 800d942:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d946:	da02      	bge.n	800d94e <scalbn+0x6e>
 800d948:	a11d      	add	r1, pc, #116	@ (adr r1, 800d9c0 <scalbn+0xe0>)
 800d94a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d94e:	a31a      	add	r3, pc, #104	@ (adr r3, 800d9b8 <scalbn+0xd8>)
 800d950:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d954:	f7f2 fe50 	bl	80005f8 <__aeabi_dmul>
 800d958:	e7e6      	b.n	800d928 <scalbn+0x48>
 800d95a:	1872      	adds	r2, r6, r1
 800d95c:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800d960:	428a      	cmp	r2, r1
 800d962:	dcec      	bgt.n	800d93e <scalbn+0x5e>
 800d964:	2a00      	cmp	r2, #0
 800d966:	dd08      	ble.n	800d97a <scalbn+0x9a>
 800d968:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800d96c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800d970:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800d974:	ec45 4b10 	vmov	d0, r4, r5
 800d978:	bd70      	pop	{r4, r5, r6, pc}
 800d97a:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800d97e:	da08      	bge.n	800d992 <scalbn+0xb2>
 800d980:	2d00      	cmp	r5, #0
 800d982:	a10b      	add	r1, pc, #44	@ (adr r1, 800d9b0 <scalbn+0xd0>)
 800d984:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d988:	dac1      	bge.n	800d90e <scalbn+0x2e>
 800d98a:	a10f      	add	r1, pc, #60	@ (adr r1, 800d9c8 <scalbn+0xe8>)
 800d98c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d990:	e7bd      	b.n	800d90e <scalbn+0x2e>
 800d992:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800d996:	3236      	adds	r2, #54	@ 0x36
 800d998:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800d99c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800d9a0:	4620      	mov	r0, r4
 800d9a2:	4b0d      	ldr	r3, [pc, #52]	@ (800d9d8 <scalbn+0xf8>)
 800d9a4:	4629      	mov	r1, r5
 800d9a6:	2200      	movs	r2, #0
 800d9a8:	e7d4      	b.n	800d954 <scalbn+0x74>
 800d9aa:	bf00      	nop
 800d9ac:	f3af 8000 	nop.w
 800d9b0:	c2f8f359 	.word	0xc2f8f359
 800d9b4:	01a56e1f 	.word	0x01a56e1f
 800d9b8:	8800759c 	.word	0x8800759c
 800d9bc:	7e37e43c 	.word	0x7e37e43c
 800d9c0:	8800759c 	.word	0x8800759c
 800d9c4:	fe37e43c 	.word	0xfe37e43c
 800d9c8:	c2f8f359 	.word	0xc2f8f359
 800d9cc:	81a56e1f 	.word	0x81a56e1f
 800d9d0:	43500000 	.word	0x43500000
 800d9d4:	ffff3cb0 	.word	0xffff3cb0
 800d9d8:	3c900000 	.word	0x3c900000

0800d9dc <with_errno>:
 800d9dc:	b510      	push	{r4, lr}
 800d9de:	ed2d 8b02 	vpush	{d8}
 800d9e2:	eeb0 8a40 	vmov.f32	s16, s0
 800d9e6:	eef0 8a60 	vmov.f32	s17, s1
 800d9ea:	4604      	mov	r4, r0
 800d9ec:	f7fc f972 	bl	8009cd4 <__errno>
 800d9f0:	eeb0 0a48 	vmov.f32	s0, s16
 800d9f4:	eef0 0a68 	vmov.f32	s1, s17
 800d9f8:	ecbd 8b02 	vpop	{d8}
 800d9fc:	6004      	str	r4, [r0, #0]
 800d9fe:	bd10      	pop	{r4, pc}

0800da00 <xflow>:
 800da00:	4603      	mov	r3, r0
 800da02:	b507      	push	{r0, r1, r2, lr}
 800da04:	ec51 0b10 	vmov	r0, r1, d0
 800da08:	b183      	cbz	r3, 800da2c <xflow+0x2c>
 800da0a:	4602      	mov	r2, r0
 800da0c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800da10:	e9cd 2300 	strd	r2, r3, [sp]
 800da14:	e9dd 2300 	ldrd	r2, r3, [sp]
 800da18:	f7f2 fdee 	bl	80005f8 <__aeabi_dmul>
 800da1c:	ec41 0b10 	vmov	d0, r0, r1
 800da20:	2022      	movs	r0, #34	@ 0x22
 800da22:	b003      	add	sp, #12
 800da24:	f85d eb04 	ldr.w	lr, [sp], #4
 800da28:	f7ff bfd8 	b.w	800d9dc <with_errno>
 800da2c:	4602      	mov	r2, r0
 800da2e:	460b      	mov	r3, r1
 800da30:	e7ee      	b.n	800da10 <xflow+0x10>
 800da32:	0000      	movs	r0, r0
 800da34:	0000      	movs	r0, r0
	...

0800da38 <__math_uflow>:
 800da38:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800da40 <__math_uflow+0x8>
 800da3c:	f7ff bfe0 	b.w	800da00 <xflow>
 800da40:	00000000 	.word	0x00000000
 800da44:	10000000 	.word	0x10000000

0800da48 <__math_oflow>:
 800da48:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800da50 <__math_oflow+0x8>
 800da4c:	f7ff bfd8 	b.w	800da00 <xflow>
 800da50:	00000000 	.word	0x00000000
 800da54:	70000000 	.word	0x70000000

0800da58 <__kernel_rem_pio2>:
 800da58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da5c:	ed2d 8b02 	vpush	{d8}
 800da60:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 800da64:	f112 0f14 	cmn.w	r2, #20
 800da68:	9306      	str	r3, [sp, #24]
 800da6a:	9104      	str	r1, [sp, #16]
 800da6c:	4bbe      	ldr	r3, [pc, #760]	@ (800dd68 <__kernel_rem_pio2+0x310>)
 800da6e:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 800da70:	9008      	str	r0, [sp, #32]
 800da72:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800da76:	9300      	str	r3, [sp, #0]
 800da78:	9b06      	ldr	r3, [sp, #24]
 800da7a:	f103 33ff 	add.w	r3, r3, #4294967295
 800da7e:	bfa8      	it	ge
 800da80:	1ed4      	subge	r4, r2, #3
 800da82:	9305      	str	r3, [sp, #20]
 800da84:	bfb2      	itee	lt
 800da86:	2400      	movlt	r4, #0
 800da88:	2318      	movge	r3, #24
 800da8a:	fb94 f4f3 	sdivge	r4, r4, r3
 800da8e:	f06f 0317 	mvn.w	r3, #23
 800da92:	fb04 3303 	mla	r3, r4, r3, r3
 800da96:	eb03 0b02 	add.w	fp, r3, r2
 800da9a:	9b00      	ldr	r3, [sp, #0]
 800da9c:	9a05      	ldr	r2, [sp, #20]
 800da9e:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 800dd58 <__kernel_rem_pio2+0x300>
 800daa2:	eb03 0802 	add.w	r8, r3, r2
 800daa6:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800daa8:	1aa7      	subs	r7, r4, r2
 800daaa:	ae20      	add	r6, sp, #128	@ 0x80
 800daac:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800dab0:	2500      	movs	r5, #0
 800dab2:	4545      	cmp	r5, r8
 800dab4:	dd13      	ble.n	800dade <__kernel_rem_pio2+0x86>
 800dab6:	9b06      	ldr	r3, [sp, #24]
 800dab8:	aa20      	add	r2, sp, #128	@ 0x80
 800daba:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800dabe:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 800dac2:	f04f 0800 	mov.w	r8, #0
 800dac6:	9b00      	ldr	r3, [sp, #0]
 800dac8:	4598      	cmp	r8, r3
 800daca:	dc31      	bgt.n	800db30 <__kernel_rem_pio2+0xd8>
 800dacc:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 800dd58 <__kernel_rem_pio2+0x300>
 800dad0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800dad4:	ed8d 7b02 	vstr	d7, [sp, #8]
 800dad8:	462f      	mov	r7, r5
 800dada:	2600      	movs	r6, #0
 800dadc:	e01b      	b.n	800db16 <__kernel_rem_pio2+0xbe>
 800dade:	42ef      	cmn	r7, r5
 800dae0:	d407      	bmi.n	800daf2 <__kernel_rem_pio2+0x9a>
 800dae2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800dae6:	f7f2 fd1d 	bl	8000524 <__aeabi_i2d>
 800daea:	e8e6 0102 	strd	r0, r1, [r6], #8
 800daee:	3501      	adds	r5, #1
 800daf0:	e7df      	b.n	800dab2 <__kernel_rem_pio2+0x5a>
 800daf2:	ec51 0b18 	vmov	r0, r1, d8
 800daf6:	e7f8      	b.n	800daea <__kernel_rem_pio2+0x92>
 800daf8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dafc:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800db00:	f7f2 fd7a 	bl	80005f8 <__aeabi_dmul>
 800db04:	4602      	mov	r2, r0
 800db06:	460b      	mov	r3, r1
 800db08:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800db0c:	f7f2 fbbe 	bl	800028c <__adddf3>
 800db10:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800db14:	3601      	adds	r6, #1
 800db16:	9b05      	ldr	r3, [sp, #20]
 800db18:	429e      	cmp	r6, r3
 800db1a:	f1a7 0708 	sub.w	r7, r7, #8
 800db1e:	ddeb      	ble.n	800daf8 <__kernel_rem_pio2+0xa0>
 800db20:	ed9d 7b02 	vldr	d7, [sp, #8]
 800db24:	f108 0801 	add.w	r8, r8, #1
 800db28:	ecaa 7b02 	vstmia	sl!, {d7}
 800db2c:	3508      	adds	r5, #8
 800db2e:	e7ca      	b.n	800dac6 <__kernel_rem_pio2+0x6e>
 800db30:	9b00      	ldr	r3, [sp, #0]
 800db32:	f8dd 8000 	ldr.w	r8, [sp]
 800db36:	aa0c      	add	r2, sp, #48	@ 0x30
 800db38:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800db3c:	930a      	str	r3, [sp, #40]	@ 0x28
 800db3e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800db40:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800db44:	9309      	str	r3, [sp, #36]	@ 0x24
 800db46:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 800db4a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800db4c:	ab98      	add	r3, sp, #608	@ 0x260
 800db4e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800db52:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 800db56:	ed8d 7b02 	vstr	d7, [sp, #8]
 800db5a:	ac0c      	add	r4, sp, #48	@ 0x30
 800db5c:	ab70      	add	r3, sp, #448	@ 0x1c0
 800db5e:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 800db62:	46a1      	mov	r9, r4
 800db64:	46c2      	mov	sl, r8
 800db66:	f1ba 0f00 	cmp.w	sl, #0
 800db6a:	f1a5 0508 	sub.w	r5, r5, #8
 800db6e:	dc77      	bgt.n	800dc60 <__kernel_rem_pio2+0x208>
 800db70:	4658      	mov	r0, fp
 800db72:	ed9d 0b02 	vldr	d0, [sp, #8]
 800db76:	f7ff feb3 	bl	800d8e0 <scalbn>
 800db7a:	ec57 6b10 	vmov	r6, r7, d0
 800db7e:	2200      	movs	r2, #0
 800db80:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 800db84:	4630      	mov	r0, r6
 800db86:	4639      	mov	r1, r7
 800db88:	f7f2 fd36 	bl	80005f8 <__aeabi_dmul>
 800db8c:	ec41 0b10 	vmov	d0, r0, r1
 800db90:	f000 faba 	bl	800e108 <floor>
 800db94:	4b75      	ldr	r3, [pc, #468]	@ (800dd6c <__kernel_rem_pio2+0x314>)
 800db96:	ec51 0b10 	vmov	r0, r1, d0
 800db9a:	2200      	movs	r2, #0
 800db9c:	f7f2 fd2c 	bl	80005f8 <__aeabi_dmul>
 800dba0:	4602      	mov	r2, r0
 800dba2:	460b      	mov	r3, r1
 800dba4:	4630      	mov	r0, r6
 800dba6:	4639      	mov	r1, r7
 800dba8:	f7f2 fb6e 	bl	8000288 <__aeabi_dsub>
 800dbac:	460f      	mov	r7, r1
 800dbae:	4606      	mov	r6, r0
 800dbb0:	f7f2 ffd2 	bl	8000b58 <__aeabi_d2iz>
 800dbb4:	9002      	str	r0, [sp, #8]
 800dbb6:	f7f2 fcb5 	bl	8000524 <__aeabi_i2d>
 800dbba:	4602      	mov	r2, r0
 800dbbc:	460b      	mov	r3, r1
 800dbbe:	4630      	mov	r0, r6
 800dbc0:	4639      	mov	r1, r7
 800dbc2:	f7f2 fb61 	bl	8000288 <__aeabi_dsub>
 800dbc6:	f1bb 0f00 	cmp.w	fp, #0
 800dbca:	4606      	mov	r6, r0
 800dbcc:	460f      	mov	r7, r1
 800dbce:	dd6c      	ble.n	800dcaa <__kernel_rem_pio2+0x252>
 800dbd0:	f108 31ff 	add.w	r1, r8, #4294967295
 800dbd4:	ab0c      	add	r3, sp, #48	@ 0x30
 800dbd6:	9d02      	ldr	r5, [sp, #8]
 800dbd8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800dbdc:	f1cb 0018 	rsb	r0, fp, #24
 800dbe0:	fa43 f200 	asr.w	r2, r3, r0
 800dbe4:	4415      	add	r5, r2
 800dbe6:	4082      	lsls	r2, r0
 800dbe8:	1a9b      	subs	r3, r3, r2
 800dbea:	aa0c      	add	r2, sp, #48	@ 0x30
 800dbec:	9502      	str	r5, [sp, #8]
 800dbee:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800dbf2:	f1cb 0217 	rsb	r2, fp, #23
 800dbf6:	fa43 f902 	asr.w	r9, r3, r2
 800dbfa:	f1b9 0f00 	cmp.w	r9, #0
 800dbfe:	dd64      	ble.n	800dcca <__kernel_rem_pio2+0x272>
 800dc00:	9b02      	ldr	r3, [sp, #8]
 800dc02:	2200      	movs	r2, #0
 800dc04:	3301      	adds	r3, #1
 800dc06:	9302      	str	r3, [sp, #8]
 800dc08:	4615      	mov	r5, r2
 800dc0a:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 800dc0e:	4590      	cmp	r8, r2
 800dc10:	f300 80b8 	bgt.w	800dd84 <__kernel_rem_pio2+0x32c>
 800dc14:	f1bb 0f00 	cmp.w	fp, #0
 800dc18:	dd07      	ble.n	800dc2a <__kernel_rem_pio2+0x1d2>
 800dc1a:	f1bb 0f01 	cmp.w	fp, #1
 800dc1e:	f000 80bf 	beq.w	800dda0 <__kernel_rem_pio2+0x348>
 800dc22:	f1bb 0f02 	cmp.w	fp, #2
 800dc26:	f000 80c6 	beq.w	800ddb6 <__kernel_rem_pio2+0x35e>
 800dc2a:	f1b9 0f02 	cmp.w	r9, #2
 800dc2e:	d14c      	bne.n	800dcca <__kernel_rem_pio2+0x272>
 800dc30:	4632      	mov	r2, r6
 800dc32:	463b      	mov	r3, r7
 800dc34:	494e      	ldr	r1, [pc, #312]	@ (800dd70 <__kernel_rem_pio2+0x318>)
 800dc36:	2000      	movs	r0, #0
 800dc38:	f7f2 fb26 	bl	8000288 <__aeabi_dsub>
 800dc3c:	4606      	mov	r6, r0
 800dc3e:	460f      	mov	r7, r1
 800dc40:	2d00      	cmp	r5, #0
 800dc42:	d042      	beq.n	800dcca <__kernel_rem_pio2+0x272>
 800dc44:	4658      	mov	r0, fp
 800dc46:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 800dd60 <__kernel_rem_pio2+0x308>
 800dc4a:	f7ff fe49 	bl	800d8e0 <scalbn>
 800dc4e:	4630      	mov	r0, r6
 800dc50:	4639      	mov	r1, r7
 800dc52:	ec53 2b10 	vmov	r2, r3, d0
 800dc56:	f7f2 fb17 	bl	8000288 <__aeabi_dsub>
 800dc5a:	4606      	mov	r6, r0
 800dc5c:	460f      	mov	r7, r1
 800dc5e:	e034      	b.n	800dcca <__kernel_rem_pio2+0x272>
 800dc60:	4b44      	ldr	r3, [pc, #272]	@ (800dd74 <__kernel_rem_pio2+0x31c>)
 800dc62:	2200      	movs	r2, #0
 800dc64:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dc68:	f7f2 fcc6 	bl	80005f8 <__aeabi_dmul>
 800dc6c:	f7f2 ff74 	bl	8000b58 <__aeabi_d2iz>
 800dc70:	f7f2 fc58 	bl	8000524 <__aeabi_i2d>
 800dc74:	4b40      	ldr	r3, [pc, #256]	@ (800dd78 <__kernel_rem_pio2+0x320>)
 800dc76:	2200      	movs	r2, #0
 800dc78:	4606      	mov	r6, r0
 800dc7a:	460f      	mov	r7, r1
 800dc7c:	f7f2 fcbc 	bl	80005f8 <__aeabi_dmul>
 800dc80:	4602      	mov	r2, r0
 800dc82:	460b      	mov	r3, r1
 800dc84:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dc88:	f7f2 fafe 	bl	8000288 <__aeabi_dsub>
 800dc8c:	f7f2 ff64 	bl	8000b58 <__aeabi_d2iz>
 800dc90:	e9d5 2300 	ldrd	r2, r3, [r5]
 800dc94:	f849 0b04 	str.w	r0, [r9], #4
 800dc98:	4639      	mov	r1, r7
 800dc9a:	4630      	mov	r0, r6
 800dc9c:	f7f2 faf6 	bl	800028c <__adddf3>
 800dca0:	f10a 3aff 	add.w	sl, sl, #4294967295
 800dca4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dca8:	e75d      	b.n	800db66 <__kernel_rem_pio2+0x10e>
 800dcaa:	d107      	bne.n	800dcbc <__kernel_rem_pio2+0x264>
 800dcac:	f108 33ff 	add.w	r3, r8, #4294967295
 800dcb0:	aa0c      	add	r2, sp, #48	@ 0x30
 800dcb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dcb6:	ea4f 59e3 	mov.w	r9, r3, asr #23
 800dcba:	e79e      	b.n	800dbfa <__kernel_rem_pio2+0x1a2>
 800dcbc:	4b2f      	ldr	r3, [pc, #188]	@ (800dd7c <__kernel_rem_pio2+0x324>)
 800dcbe:	2200      	movs	r2, #0
 800dcc0:	f7f2 ff20 	bl	8000b04 <__aeabi_dcmpge>
 800dcc4:	2800      	cmp	r0, #0
 800dcc6:	d143      	bne.n	800dd50 <__kernel_rem_pio2+0x2f8>
 800dcc8:	4681      	mov	r9, r0
 800dcca:	2200      	movs	r2, #0
 800dccc:	2300      	movs	r3, #0
 800dcce:	4630      	mov	r0, r6
 800dcd0:	4639      	mov	r1, r7
 800dcd2:	f7f2 fef9 	bl	8000ac8 <__aeabi_dcmpeq>
 800dcd6:	2800      	cmp	r0, #0
 800dcd8:	f000 80bf 	beq.w	800de5a <__kernel_rem_pio2+0x402>
 800dcdc:	f108 33ff 	add.w	r3, r8, #4294967295
 800dce0:	2200      	movs	r2, #0
 800dce2:	9900      	ldr	r1, [sp, #0]
 800dce4:	428b      	cmp	r3, r1
 800dce6:	da6e      	bge.n	800ddc6 <__kernel_rem_pio2+0x36e>
 800dce8:	2a00      	cmp	r2, #0
 800dcea:	f000 8089 	beq.w	800de00 <__kernel_rem_pio2+0x3a8>
 800dcee:	f108 38ff 	add.w	r8, r8, #4294967295
 800dcf2:	ab0c      	add	r3, sp, #48	@ 0x30
 800dcf4:	f1ab 0b18 	sub.w	fp, fp, #24
 800dcf8:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 800dcfc:	2b00      	cmp	r3, #0
 800dcfe:	d0f6      	beq.n	800dcee <__kernel_rem_pio2+0x296>
 800dd00:	4658      	mov	r0, fp
 800dd02:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 800dd60 <__kernel_rem_pio2+0x308>
 800dd06:	f7ff fdeb 	bl	800d8e0 <scalbn>
 800dd0a:	f108 0301 	add.w	r3, r8, #1
 800dd0e:	00da      	lsls	r2, r3, #3
 800dd10:	9205      	str	r2, [sp, #20]
 800dd12:	ec55 4b10 	vmov	r4, r5, d0
 800dd16:	aa70      	add	r2, sp, #448	@ 0x1c0
 800dd18:	f8df b058 	ldr.w	fp, [pc, #88]	@ 800dd74 <__kernel_rem_pio2+0x31c>
 800dd1c:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 800dd20:	4646      	mov	r6, r8
 800dd22:	f04f 0a00 	mov.w	sl, #0
 800dd26:	2e00      	cmp	r6, #0
 800dd28:	f280 80cf 	bge.w	800deca <__kernel_rem_pio2+0x472>
 800dd2c:	4644      	mov	r4, r8
 800dd2e:	2c00      	cmp	r4, #0
 800dd30:	f2c0 80fd 	blt.w	800df2e <__kernel_rem_pio2+0x4d6>
 800dd34:	4b12      	ldr	r3, [pc, #72]	@ (800dd80 <__kernel_rem_pio2+0x328>)
 800dd36:	461f      	mov	r7, r3
 800dd38:	ab70      	add	r3, sp, #448	@ 0x1c0
 800dd3a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800dd3e:	9306      	str	r3, [sp, #24]
 800dd40:	f04f 0a00 	mov.w	sl, #0
 800dd44:	f04f 0b00 	mov.w	fp, #0
 800dd48:	2600      	movs	r6, #0
 800dd4a:	eba8 0504 	sub.w	r5, r8, r4
 800dd4e:	e0e2      	b.n	800df16 <__kernel_rem_pio2+0x4be>
 800dd50:	f04f 0902 	mov.w	r9, #2
 800dd54:	e754      	b.n	800dc00 <__kernel_rem_pio2+0x1a8>
 800dd56:	bf00      	nop
	...
 800dd64:	3ff00000 	.word	0x3ff00000
 800dd68:	0800e818 	.word	0x0800e818
 800dd6c:	40200000 	.word	0x40200000
 800dd70:	3ff00000 	.word	0x3ff00000
 800dd74:	3e700000 	.word	0x3e700000
 800dd78:	41700000 	.word	0x41700000
 800dd7c:	3fe00000 	.word	0x3fe00000
 800dd80:	0800e7d8 	.word	0x0800e7d8
 800dd84:	f854 3b04 	ldr.w	r3, [r4], #4
 800dd88:	b945      	cbnz	r5, 800dd9c <__kernel_rem_pio2+0x344>
 800dd8a:	b123      	cbz	r3, 800dd96 <__kernel_rem_pio2+0x33e>
 800dd8c:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 800dd90:	f844 3c04 	str.w	r3, [r4, #-4]
 800dd94:	2301      	movs	r3, #1
 800dd96:	3201      	adds	r2, #1
 800dd98:	461d      	mov	r5, r3
 800dd9a:	e738      	b.n	800dc0e <__kernel_rem_pio2+0x1b6>
 800dd9c:	1acb      	subs	r3, r1, r3
 800dd9e:	e7f7      	b.n	800dd90 <__kernel_rem_pio2+0x338>
 800dda0:	f108 32ff 	add.w	r2, r8, #4294967295
 800dda4:	ab0c      	add	r3, sp, #48	@ 0x30
 800dda6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ddaa:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800ddae:	a90c      	add	r1, sp, #48	@ 0x30
 800ddb0:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800ddb4:	e739      	b.n	800dc2a <__kernel_rem_pio2+0x1d2>
 800ddb6:	f108 32ff 	add.w	r2, r8, #4294967295
 800ddba:	ab0c      	add	r3, sp, #48	@ 0x30
 800ddbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ddc0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800ddc4:	e7f3      	b.n	800ddae <__kernel_rem_pio2+0x356>
 800ddc6:	a90c      	add	r1, sp, #48	@ 0x30
 800ddc8:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800ddcc:	3b01      	subs	r3, #1
 800ddce:	430a      	orrs	r2, r1
 800ddd0:	e787      	b.n	800dce2 <__kernel_rem_pio2+0x28a>
 800ddd2:	3401      	adds	r4, #1
 800ddd4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800ddd8:	2a00      	cmp	r2, #0
 800ddda:	d0fa      	beq.n	800ddd2 <__kernel_rem_pio2+0x37a>
 800dddc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ddde:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800dde2:	eb0d 0503 	add.w	r5, sp, r3
 800dde6:	9b06      	ldr	r3, [sp, #24]
 800dde8:	aa20      	add	r2, sp, #128	@ 0x80
 800ddea:	4443      	add	r3, r8
 800ddec:	f108 0701 	add.w	r7, r8, #1
 800ddf0:	3d98      	subs	r5, #152	@ 0x98
 800ddf2:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 800ddf6:	4444      	add	r4, r8
 800ddf8:	42bc      	cmp	r4, r7
 800ddfa:	da04      	bge.n	800de06 <__kernel_rem_pio2+0x3ae>
 800ddfc:	46a0      	mov	r8, r4
 800ddfe:	e6a2      	b.n	800db46 <__kernel_rem_pio2+0xee>
 800de00:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800de02:	2401      	movs	r4, #1
 800de04:	e7e6      	b.n	800ddd4 <__kernel_rem_pio2+0x37c>
 800de06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800de08:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800de0c:	f7f2 fb8a 	bl	8000524 <__aeabi_i2d>
 800de10:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 800e0d8 <__kernel_rem_pio2+0x680>
 800de14:	e8e6 0102 	strd	r0, r1, [r6], #8
 800de18:	ed8d 7b02 	vstr	d7, [sp, #8]
 800de1c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800de20:	46b2      	mov	sl, r6
 800de22:	f04f 0800 	mov.w	r8, #0
 800de26:	9b05      	ldr	r3, [sp, #20]
 800de28:	4598      	cmp	r8, r3
 800de2a:	dd05      	ble.n	800de38 <__kernel_rem_pio2+0x3e0>
 800de2c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800de30:	3701      	adds	r7, #1
 800de32:	eca5 7b02 	vstmia	r5!, {d7}
 800de36:	e7df      	b.n	800ddf8 <__kernel_rem_pio2+0x3a0>
 800de38:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 800de3c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800de40:	f7f2 fbda 	bl	80005f8 <__aeabi_dmul>
 800de44:	4602      	mov	r2, r0
 800de46:	460b      	mov	r3, r1
 800de48:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800de4c:	f7f2 fa1e 	bl	800028c <__adddf3>
 800de50:	f108 0801 	add.w	r8, r8, #1
 800de54:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800de58:	e7e5      	b.n	800de26 <__kernel_rem_pio2+0x3ce>
 800de5a:	f1cb 0000 	rsb	r0, fp, #0
 800de5e:	ec47 6b10 	vmov	d0, r6, r7
 800de62:	f7ff fd3d 	bl	800d8e0 <scalbn>
 800de66:	ec55 4b10 	vmov	r4, r5, d0
 800de6a:	4b9d      	ldr	r3, [pc, #628]	@ (800e0e0 <__kernel_rem_pio2+0x688>)
 800de6c:	2200      	movs	r2, #0
 800de6e:	4620      	mov	r0, r4
 800de70:	4629      	mov	r1, r5
 800de72:	f7f2 fe47 	bl	8000b04 <__aeabi_dcmpge>
 800de76:	b300      	cbz	r0, 800deba <__kernel_rem_pio2+0x462>
 800de78:	4b9a      	ldr	r3, [pc, #616]	@ (800e0e4 <__kernel_rem_pio2+0x68c>)
 800de7a:	2200      	movs	r2, #0
 800de7c:	4620      	mov	r0, r4
 800de7e:	4629      	mov	r1, r5
 800de80:	f7f2 fbba 	bl	80005f8 <__aeabi_dmul>
 800de84:	f7f2 fe68 	bl	8000b58 <__aeabi_d2iz>
 800de88:	4606      	mov	r6, r0
 800de8a:	f7f2 fb4b 	bl	8000524 <__aeabi_i2d>
 800de8e:	4b94      	ldr	r3, [pc, #592]	@ (800e0e0 <__kernel_rem_pio2+0x688>)
 800de90:	2200      	movs	r2, #0
 800de92:	f7f2 fbb1 	bl	80005f8 <__aeabi_dmul>
 800de96:	460b      	mov	r3, r1
 800de98:	4602      	mov	r2, r0
 800de9a:	4629      	mov	r1, r5
 800de9c:	4620      	mov	r0, r4
 800de9e:	f7f2 f9f3 	bl	8000288 <__aeabi_dsub>
 800dea2:	f7f2 fe59 	bl	8000b58 <__aeabi_d2iz>
 800dea6:	ab0c      	add	r3, sp, #48	@ 0x30
 800dea8:	f10b 0b18 	add.w	fp, fp, #24
 800deac:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800deb0:	f108 0801 	add.w	r8, r8, #1
 800deb4:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 800deb8:	e722      	b.n	800dd00 <__kernel_rem_pio2+0x2a8>
 800deba:	4620      	mov	r0, r4
 800debc:	4629      	mov	r1, r5
 800debe:	f7f2 fe4b 	bl	8000b58 <__aeabi_d2iz>
 800dec2:	ab0c      	add	r3, sp, #48	@ 0x30
 800dec4:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800dec8:	e71a      	b.n	800dd00 <__kernel_rem_pio2+0x2a8>
 800deca:	ab0c      	add	r3, sp, #48	@ 0x30
 800decc:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800ded0:	f7f2 fb28 	bl	8000524 <__aeabi_i2d>
 800ded4:	4622      	mov	r2, r4
 800ded6:	462b      	mov	r3, r5
 800ded8:	f7f2 fb8e 	bl	80005f8 <__aeabi_dmul>
 800dedc:	4652      	mov	r2, sl
 800dede:	e967 0102 	strd	r0, r1, [r7, #-8]!
 800dee2:	465b      	mov	r3, fp
 800dee4:	4620      	mov	r0, r4
 800dee6:	4629      	mov	r1, r5
 800dee8:	f7f2 fb86 	bl	80005f8 <__aeabi_dmul>
 800deec:	3e01      	subs	r6, #1
 800deee:	4604      	mov	r4, r0
 800def0:	460d      	mov	r5, r1
 800def2:	e718      	b.n	800dd26 <__kernel_rem_pio2+0x2ce>
 800def4:	9906      	ldr	r1, [sp, #24]
 800def6:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 800defa:	9106      	str	r1, [sp, #24]
 800defc:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 800df00:	f7f2 fb7a 	bl	80005f8 <__aeabi_dmul>
 800df04:	4602      	mov	r2, r0
 800df06:	460b      	mov	r3, r1
 800df08:	4650      	mov	r0, sl
 800df0a:	4659      	mov	r1, fp
 800df0c:	f7f2 f9be 	bl	800028c <__adddf3>
 800df10:	3601      	adds	r6, #1
 800df12:	4682      	mov	sl, r0
 800df14:	468b      	mov	fp, r1
 800df16:	9b00      	ldr	r3, [sp, #0]
 800df18:	429e      	cmp	r6, r3
 800df1a:	dc01      	bgt.n	800df20 <__kernel_rem_pio2+0x4c8>
 800df1c:	42b5      	cmp	r5, r6
 800df1e:	dae9      	bge.n	800def4 <__kernel_rem_pio2+0x49c>
 800df20:	ab48      	add	r3, sp, #288	@ 0x120
 800df22:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800df26:	e9c5 ab00 	strd	sl, fp, [r5]
 800df2a:	3c01      	subs	r4, #1
 800df2c:	e6ff      	b.n	800dd2e <__kernel_rem_pio2+0x2d6>
 800df2e:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800df30:	2b02      	cmp	r3, #2
 800df32:	dc0b      	bgt.n	800df4c <__kernel_rem_pio2+0x4f4>
 800df34:	2b00      	cmp	r3, #0
 800df36:	dc39      	bgt.n	800dfac <__kernel_rem_pio2+0x554>
 800df38:	d05d      	beq.n	800dff6 <__kernel_rem_pio2+0x59e>
 800df3a:	9b02      	ldr	r3, [sp, #8]
 800df3c:	f003 0007 	and.w	r0, r3, #7
 800df40:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 800df44:	ecbd 8b02 	vpop	{d8}
 800df48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df4c:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800df4e:	2b03      	cmp	r3, #3
 800df50:	d1f3      	bne.n	800df3a <__kernel_rem_pio2+0x4e2>
 800df52:	9b05      	ldr	r3, [sp, #20]
 800df54:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800df58:	eb0d 0403 	add.w	r4, sp, r3
 800df5c:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 800df60:	4625      	mov	r5, r4
 800df62:	46c2      	mov	sl, r8
 800df64:	f1ba 0f00 	cmp.w	sl, #0
 800df68:	f1a5 0508 	sub.w	r5, r5, #8
 800df6c:	dc6b      	bgt.n	800e046 <__kernel_rem_pio2+0x5ee>
 800df6e:	4645      	mov	r5, r8
 800df70:	2d01      	cmp	r5, #1
 800df72:	f1a4 0408 	sub.w	r4, r4, #8
 800df76:	f300 8087 	bgt.w	800e088 <__kernel_rem_pio2+0x630>
 800df7a:	9c05      	ldr	r4, [sp, #20]
 800df7c:	ab48      	add	r3, sp, #288	@ 0x120
 800df7e:	441c      	add	r4, r3
 800df80:	2000      	movs	r0, #0
 800df82:	2100      	movs	r1, #0
 800df84:	f1b8 0f01 	cmp.w	r8, #1
 800df88:	f300 809c 	bgt.w	800e0c4 <__kernel_rem_pio2+0x66c>
 800df8c:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 800df90:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 800df94:	f1b9 0f00 	cmp.w	r9, #0
 800df98:	f040 80a6 	bne.w	800e0e8 <__kernel_rem_pio2+0x690>
 800df9c:	9b04      	ldr	r3, [sp, #16]
 800df9e:	e9c3 7800 	strd	r7, r8, [r3]
 800dfa2:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800dfa6:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800dfaa:	e7c6      	b.n	800df3a <__kernel_rem_pio2+0x4e2>
 800dfac:	9d05      	ldr	r5, [sp, #20]
 800dfae:	ab48      	add	r3, sp, #288	@ 0x120
 800dfb0:	441d      	add	r5, r3
 800dfb2:	4644      	mov	r4, r8
 800dfb4:	2000      	movs	r0, #0
 800dfb6:	2100      	movs	r1, #0
 800dfb8:	2c00      	cmp	r4, #0
 800dfba:	da35      	bge.n	800e028 <__kernel_rem_pio2+0x5d0>
 800dfbc:	f1b9 0f00 	cmp.w	r9, #0
 800dfc0:	d038      	beq.n	800e034 <__kernel_rem_pio2+0x5dc>
 800dfc2:	4602      	mov	r2, r0
 800dfc4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800dfc8:	9c04      	ldr	r4, [sp, #16]
 800dfca:	e9c4 2300 	strd	r2, r3, [r4]
 800dfce:	4602      	mov	r2, r0
 800dfd0:	460b      	mov	r3, r1
 800dfd2:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 800dfd6:	f7f2 f957 	bl	8000288 <__aeabi_dsub>
 800dfda:	ad4a      	add	r5, sp, #296	@ 0x128
 800dfdc:	2401      	movs	r4, #1
 800dfde:	45a0      	cmp	r8, r4
 800dfe0:	da2b      	bge.n	800e03a <__kernel_rem_pio2+0x5e2>
 800dfe2:	f1b9 0f00 	cmp.w	r9, #0
 800dfe6:	d002      	beq.n	800dfee <__kernel_rem_pio2+0x596>
 800dfe8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800dfec:	4619      	mov	r1, r3
 800dfee:	9b04      	ldr	r3, [sp, #16]
 800dff0:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800dff4:	e7a1      	b.n	800df3a <__kernel_rem_pio2+0x4e2>
 800dff6:	9c05      	ldr	r4, [sp, #20]
 800dff8:	ab48      	add	r3, sp, #288	@ 0x120
 800dffa:	441c      	add	r4, r3
 800dffc:	2000      	movs	r0, #0
 800dffe:	2100      	movs	r1, #0
 800e000:	f1b8 0f00 	cmp.w	r8, #0
 800e004:	da09      	bge.n	800e01a <__kernel_rem_pio2+0x5c2>
 800e006:	f1b9 0f00 	cmp.w	r9, #0
 800e00a:	d002      	beq.n	800e012 <__kernel_rem_pio2+0x5ba>
 800e00c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800e010:	4619      	mov	r1, r3
 800e012:	9b04      	ldr	r3, [sp, #16]
 800e014:	e9c3 0100 	strd	r0, r1, [r3]
 800e018:	e78f      	b.n	800df3a <__kernel_rem_pio2+0x4e2>
 800e01a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800e01e:	f7f2 f935 	bl	800028c <__adddf3>
 800e022:	f108 38ff 	add.w	r8, r8, #4294967295
 800e026:	e7eb      	b.n	800e000 <__kernel_rem_pio2+0x5a8>
 800e028:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800e02c:	f7f2 f92e 	bl	800028c <__adddf3>
 800e030:	3c01      	subs	r4, #1
 800e032:	e7c1      	b.n	800dfb8 <__kernel_rem_pio2+0x560>
 800e034:	4602      	mov	r2, r0
 800e036:	460b      	mov	r3, r1
 800e038:	e7c6      	b.n	800dfc8 <__kernel_rem_pio2+0x570>
 800e03a:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800e03e:	f7f2 f925 	bl	800028c <__adddf3>
 800e042:	3401      	adds	r4, #1
 800e044:	e7cb      	b.n	800dfde <__kernel_rem_pio2+0x586>
 800e046:	ed95 7b00 	vldr	d7, [r5]
 800e04a:	ed8d 7b00 	vstr	d7, [sp]
 800e04e:	ed95 7b02 	vldr	d7, [r5, #8]
 800e052:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e056:	ec53 2b17 	vmov	r2, r3, d7
 800e05a:	ed8d 7b06 	vstr	d7, [sp, #24]
 800e05e:	f7f2 f915 	bl	800028c <__adddf3>
 800e062:	4602      	mov	r2, r0
 800e064:	460b      	mov	r3, r1
 800e066:	4606      	mov	r6, r0
 800e068:	460f      	mov	r7, r1
 800e06a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e06e:	f7f2 f90b 	bl	8000288 <__aeabi_dsub>
 800e072:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e076:	f7f2 f909 	bl	800028c <__adddf3>
 800e07a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e07e:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800e082:	e9c5 6700 	strd	r6, r7, [r5]
 800e086:	e76d      	b.n	800df64 <__kernel_rem_pio2+0x50c>
 800e088:	ed94 7b00 	vldr	d7, [r4]
 800e08c:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 800e090:	ec51 0b17 	vmov	r0, r1, d7
 800e094:	4652      	mov	r2, sl
 800e096:	465b      	mov	r3, fp
 800e098:	ed8d 7b00 	vstr	d7, [sp]
 800e09c:	f7f2 f8f6 	bl	800028c <__adddf3>
 800e0a0:	4602      	mov	r2, r0
 800e0a2:	460b      	mov	r3, r1
 800e0a4:	4606      	mov	r6, r0
 800e0a6:	460f      	mov	r7, r1
 800e0a8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e0ac:	f7f2 f8ec 	bl	8000288 <__aeabi_dsub>
 800e0b0:	4652      	mov	r2, sl
 800e0b2:	465b      	mov	r3, fp
 800e0b4:	f7f2 f8ea 	bl	800028c <__adddf3>
 800e0b8:	3d01      	subs	r5, #1
 800e0ba:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800e0be:	e9c4 6700 	strd	r6, r7, [r4]
 800e0c2:	e755      	b.n	800df70 <__kernel_rem_pio2+0x518>
 800e0c4:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800e0c8:	f7f2 f8e0 	bl	800028c <__adddf3>
 800e0cc:	f108 38ff 	add.w	r8, r8, #4294967295
 800e0d0:	e758      	b.n	800df84 <__kernel_rem_pio2+0x52c>
 800e0d2:	bf00      	nop
 800e0d4:	f3af 8000 	nop.w
	...
 800e0e0:	41700000 	.word	0x41700000
 800e0e4:	3e700000 	.word	0x3e700000
 800e0e8:	9b04      	ldr	r3, [sp, #16]
 800e0ea:	9a04      	ldr	r2, [sp, #16]
 800e0ec:	601f      	str	r7, [r3, #0]
 800e0ee:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 800e0f2:	605c      	str	r4, [r3, #4]
 800e0f4:	609d      	str	r5, [r3, #8]
 800e0f6:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800e0fa:	60d3      	str	r3, [r2, #12]
 800e0fc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800e100:	6110      	str	r0, [r2, #16]
 800e102:	6153      	str	r3, [r2, #20]
 800e104:	e719      	b.n	800df3a <__kernel_rem_pio2+0x4e2>
 800e106:	bf00      	nop

0800e108 <floor>:
 800e108:	ec51 0b10 	vmov	r0, r1, d0
 800e10c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800e110:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e114:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 800e118:	2e13      	cmp	r6, #19
 800e11a:	460c      	mov	r4, r1
 800e11c:	4605      	mov	r5, r0
 800e11e:	4680      	mov	r8, r0
 800e120:	dc34      	bgt.n	800e18c <floor+0x84>
 800e122:	2e00      	cmp	r6, #0
 800e124:	da17      	bge.n	800e156 <floor+0x4e>
 800e126:	a332      	add	r3, pc, #200	@ (adr r3, 800e1f0 <floor+0xe8>)
 800e128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e12c:	f7f2 f8ae 	bl	800028c <__adddf3>
 800e130:	2200      	movs	r2, #0
 800e132:	2300      	movs	r3, #0
 800e134:	f7f2 fcf0 	bl	8000b18 <__aeabi_dcmpgt>
 800e138:	b150      	cbz	r0, 800e150 <floor+0x48>
 800e13a:	2c00      	cmp	r4, #0
 800e13c:	da55      	bge.n	800e1ea <floor+0xe2>
 800e13e:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800e142:	432c      	orrs	r4, r5
 800e144:	2500      	movs	r5, #0
 800e146:	42ac      	cmp	r4, r5
 800e148:	4c2b      	ldr	r4, [pc, #172]	@ (800e1f8 <floor+0xf0>)
 800e14a:	bf08      	it	eq
 800e14c:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 800e150:	4621      	mov	r1, r4
 800e152:	4628      	mov	r0, r5
 800e154:	e023      	b.n	800e19e <floor+0x96>
 800e156:	4f29      	ldr	r7, [pc, #164]	@ (800e1fc <floor+0xf4>)
 800e158:	4137      	asrs	r7, r6
 800e15a:	ea01 0307 	and.w	r3, r1, r7
 800e15e:	4303      	orrs	r3, r0
 800e160:	d01d      	beq.n	800e19e <floor+0x96>
 800e162:	a323      	add	r3, pc, #140	@ (adr r3, 800e1f0 <floor+0xe8>)
 800e164:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e168:	f7f2 f890 	bl	800028c <__adddf3>
 800e16c:	2200      	movs	r2, #0
 800e16e:	2300      	movs	r3, #0
 800e170:	f7f2 fcd2 	bl	8000b18 <__aeabi_dcmpgt>
 800e174:	2800      	cmp	r0, #0
 800e176:	d0eb      	beq.n	800e150 <floor+0x48>
 800e178:	2c00      	cmp	r4, #0
 800e17a:	bfbe      	ittt	lt
 800e17c:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 800e180:	4133      	asrlt	r3, r6
 800e182:	18e4      	addlt	r4, r4, r3
 800e184:	ea24 0407 	bic.w	r4, r4, r7
 800e188:	2500      	movs	r5, #0
 800e18a:	e7e1      	b.n	800e150 <floor+0x48>
 800e18c:	2e33      	cmp	r6, #51	@ 0x33
 800e18e:	dd0a      	ble.n	800e1a6 <floor+0x9e>
 800e190:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800e194:	d103      	bne.n	800e19e <floor+0x96>
 800e196:	4602      	mov	r2, r0
 800e198:	460b      	mov	r3, r1
 800e19a:	f7f2 f877 	bl	800028c <__adddf3>
 800e19e:	ec41 0b10 	vmov	d0, r0, r1
 800e1a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e1a6:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 800e1aa:	f04f 37ff 	mov.w	r7, #4294967295
 800e1ae:	40df      	lsrs	r7, r3
 800e1b0:	4207      	tst	r7, r0
 800e1b2:	d0f4      	beq.n	800e19e <floor+0x96>
 800e1b4:	a30e      	add	r3, pc, #56	@ (adr r3, 800e1f0 <floor+0xe8>)
 800e1b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1ba:	f7f2 f867 	bl	800028c <__adddf3>
 800e1be:	2200      	movs	r2, #0
 800e1c0:	2300      	movs	r3, #0
 800e1c2:	f7f2 fca9 	bl	8000b18 <__aeabi_dcmpgt>
 800e1c6:	2800      	cmp	r0, #0
 800e1c8:	d0c2      	beq.n	800e150 <floor+0x48>
 800e1ca:	2c00      	cmp	r4, #0
 800e1cc:	da0a      	bge.n	800e1e4 <floor+0xdc>
 800e1ce:	2e14      	cmp	r6, #20
 800e1d0:	d101      	bne.n	800e1d6 <floor+0xce>
 800e1d2:	3401      	adds	r4, #1
 800e1d4:	e006      	b.n	800e1e4 <floor+0xdc>
 800e1d6:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800e1da:	2301      	movs	r3, #1
 800e1dc:	40b3      	lsls	r3, r6
 800e1de:	441d      	add	r5, r3
 800e1e0:	4545      	cmp	r5, r8
 800e1e2:	d3f6      	bcc.n	800e1d2 <floor+0xca>
 800e1e4:	ea25 0507 	bic.w	r5, r5, r7
 800e1e8:	e7b2      	b.n	800e150 <floor+0x48>
 800e1ea:	2500      	movs	r5, #0
 800e1ec:	462c      	mov	r4, r5
 800e1ee:	e7af      	b.n	800e150 <floor+0x48>
 800e1f0:	8800759c 	.word	0x8800759c
 800e1f4:	7e37e43c 	.word	0x7e37e43c
 800e1f8:	bff00000 	.word	0xbff00000
 800e1fc:	000fffff 	.word	0x000fffff

0800e200 <_init>:
 800e200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e202:	bf00      	nop
 800e204:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e206:	bc08      	pop	{r3}
 800e208:	469e      	mov	lr, r3
 800e20a:	4770      	bx	lr

0800e20c <_fini>:
 800e20c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e20e:	bf00      	nop
 800e210:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e212:	bc08      	pop	{r3}
 800e214:	469e      	mov	lr, r3
 800e216:	4770      	bx	lr
