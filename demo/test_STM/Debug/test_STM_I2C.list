
test_STM_I2C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ea4  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08004fb8  08004fb8  00014fb8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005018  08005018  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08005018  08005018  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005018  08005018  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005018  08005018  00015018  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800501c  0800501c  0001501c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005020  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000244  20000070  08005090  00020070  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200002b4  08005090  000202b4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY
 13 .debug_info   00006850  00000000  00000000  000200dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001548  00000000  00000000  0002692c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000730  00000000  00000000  00027e78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000584  00000000  00000000  000285a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016b79  00000000  00000000  00028b2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a51c  00000000  00000000  0003f6a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000825bb  00000000  00000000  00049bc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002330  00000000  00000000  000cc17c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000048  00000000  00000000  000ce4ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000070 	.word	0x20000070
 800012c:	00000000 	.word	0x00000000
 8000130:	08004f9c 	.word	0x08004f9c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000074 	.word	0x20000074
 800014c:	08004f9c 	.word	0x08004f9c

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_frsub>:
 8000a28:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a2c:	e002      	b.n	8000a34 <__addsf3>
 8000a2e:	bf00      	nop

08000a30 <__aeabi_fsub>:
 8000a30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a34 <__addsf3>:
 8000a34:	0042      	lsls	r2, r0, #1
 8000a36:	bf1f      	itttt	ne
 8000a38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a3c:	ea92 0f03 	teqne	r2, r3
 8000a40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000a44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a48:	d06a      	beq.n	8000b20 <__addsf3+0xec>
 8000a4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000a4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000a52:	bfc1      	itttt	gt
 8000a54:	18d2      	addgt	r2, r2, r3
 8000a56:	4041      	eorgt	r1, r0
 8000a58:	4048      	eorgt	r0, r1
 8000a5a:	4041      	eorgt	r1, r0
 8000a5c:	bfb8      	it	lt
 8000a5e:	425b      	neglt	r3, r3
 8000a60:	2b19      	cmp	r3, #25
 8000a62:	bf88      	it	hi
 8000a64:	4770      	bxhi	lr
 8000a66:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000a6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000a72:	bf18      	it	ne
 8000a74:	4240      	negne	r0, r0
 8000a76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a7a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000a7e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000a82:	bf18      	it	ne
 8000a84:	4249      	negne	r1, r1
 8000a86:	ea92 0f03 	teq	r2, r3
 8000a8a:	d03f      	beq.n	8000b0c <__addsf3+0xd8>
 8000a8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000a90:	fa41 fc03 	asr.w	ip, r1, r3
 8000a94:	eb10 000c 	adds.w	r0, r0, ip
 8000a98:	f1c3 0320 	rsb	r3, r3, #32
 8000a9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000aa0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000aa4:	d502      	bpl.n	8000aac <__addsf3+0x78>
 8000aa6:	4249      	negs	r1, r1
 8000aa8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000aac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000ab0:	d313      	bcc.n	8000ada <__addsf3+0xa6>
 8000ab2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000ab6:	d306      	bcc.n	8000ac6 <__addsf3+0x92>
 8000ab8:	0840      	lsrs	r0, r0, #1
 8000aba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000abe:	f102 0201 	add.w	r2, r2, #1
 8000ac2:	2afe      	cmp	r2, #254	; 0xfe
 8000ac4:	d251      	bcs.n	8000b6a <__addsf3+0x136>
 8000ac6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000aca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ace:	bf08      	it	eq
 8000ad0:	f020 0001 	biceq.w	r0, r0, #1
 8000ad4:	ea40 0003 	orr.w	r0, r0, r3
 8000ad8:	4770      	bx	lr
 8000ada:	0049      	lsls	r1, r1, #1
 8000adc:	eb40 0000 	adc.w	r0, r0, r0
 8000ae0:	3a01      	subs	r2, #1
 8000ae2:	bf28      	it	cs
 8000ae4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000ae8:	d2ed      	bcs.n	8000ac6 <__addsf3+0x92>
 8000aea:	fab0 fc80 	clz	ip, r0
 8000aee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000af2:	ebb2 020c 	subs.w	r2, r2, ip
 8000af6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000afa:	bfaa      	itet	ge
 8000afc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b00:	4252      	neglt	r2, r2
 8000b02:	4318      	orrge	r0, r3
 8000b04:	bfbc      	itt	lt
 8000b06:	40d0      	lsrlt	r0, r2
 8000b08:	4318      	orrlt	r0, r3
 8000b0a:	4770      	bx	lr
 8000b0c:	f092 0f00 	teq	r2, #0
 8000b10:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b14:	bf06      	itte	eq
 8000b16:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b1a:	3201      	addeq	r2, #1
 8000b1c:	3b01      	subne	r3, #1
 8000b1e:	e7b5      	b.n	8000a8c <__addsf3+0x58>
 8000b20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b28:	bf18      	it	ne
 8000b2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b2e:	d021      	beq.n	8000b74 <__addsf3+0x140>
 8000b30:	ea92 0f03 	teq	r2, r3
 8000b34:	d004      	beq.n	8000b40 <__addsf3+0x10c>
 8000b36:	f092 0f00 	teq	r2, #0
 8000b3a:	bf08      	it	eq
 8000b3c:	4608      	moveq	r0, r1
 8000b3e:	4770      	bx	lr
 8000b40:	ea90 0f01 	teq	r0, r1
 8000b44:	bf1c      	itt	ne
 8000b46:	2000      	movne	r0, #0
 8000b48:	4770      	bxne	lr
 8000b4a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000b4e:	d104      	bne.n	8000b5a <__addsf3+0x126>
 8000b50:	0040      	lsls	r0, r0, #1
 8000b52:	bf28      	it	cs
 8000b54:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000b58:	4770      	bx	lr
 8000b5a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000b5e:	bf3c      	itt	cc
 8000b60:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bxcc	lr
 8000b66:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b6a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000b6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b72:	4770      	bx	lr
 8000b74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000b78:	bf16      	itet	ne
 8000b7a:	4608      	movne	r0, r1
 8000b7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000b80:	4601      	movne	r1, r0
 8000b82:	0242      	lsls	r2, r0, #9
 8000b84:	bf06      	itte	eq
 8000b86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000b8a:	ea90 0f01 	teqeq	r0, r1
 8000b8e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000b92:	4770      	bx	lr

08000b94 <__aeabi_ui2f>:
 8000b94:	f04f 0300 	mov.w	r3, #0
 8000b98:	e004      	b.n	8000ba4 <__aeabi_i2f+0x8>
 8000b9a:	bf00      	nop

08000b9c <__aeabi_i2f>:
 8000b9c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ba0:	bf48      	it	mi
 8000ba2:	4240      	negmi	r0, r0
 8000ba4:	ea5f 0c00 	movs.w	ip, r0
 8000ba8:	bf08      	it	eq
 8000baa:	4770      	bxeq	lr
 8000bac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000bb0:	4601      	mov	r1, r0
 8000bb2:	f04f 0000 	mov.w	r0, #0
 8000bb6:	e01c      	b.n	8000bf2 <__aeabi_l2f+0x2a>

08000bb8 <__aeabi_ul2f>:
 8000bb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000bbc:	bf08      	it	eq
 8000bbe:	4770      	bxeq	lr
 8000bc0:	f04f 0300 	mov.w	r3, #0
 8000bc4:	e00a      	b.n	8000bdc <__aeabi_l2f+0x14>
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_l2f>:
 8000bc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000bcc:	bf08      	it	eq
 8000bce:	4770      	bxeq	lr
 8000bd0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000bd4:	d502      	bpl.n	8000bdc <__aeabi_l2f+0x14>
 8000bd6:	4240      	negs	r0, r0
 8000bd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bdc:	ea5f 0c01 	movs.w	ip, r1
 8000be0:	bf02      	ittt	eq
 8000be2:	4684      	moveq	ip, r0
 8000be4:	4601      	moveq	r1, r0
 8000be6:	2000      	moveq	r0, #0
 8000be8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000bec:	bf08      	it	eq
 8000bee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000bf2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000bf6:	fabc f28c 	clz	r2, ip
 8000bfa:	3a08      	subs	r2, #8
 8000bfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c00:	db10      	blt.n	8000c24 <__aeabi_l2f+0x5c>
 8000c02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c06:	4463      	add	r3, ip
 8000c08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c0c:	f1c2 0220 	rsb	r2, r2, #32
 8000c10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c14:	fa20 f202 	lsr.w	r2, r0, r2
 8000c18:	eb43 0002 	adc.w	r0, r3, r2
 8000c1c:	bf08      	it	eq
 8000c1e:	f020 0001 	biceq.w	r0, r0, #1
 8000c22:	4770      	bx	lr
 8000c24:	f102 0220 	add.w	r2, r2, #32
 8000c28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c2c:	f1c2 0220 	rsb	r2, r2, #32
 8000c30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c34:	fa21 f202 	lsr.w	r2, r1, r2
 8000c38:	eb43 0002 	adc.w	r0, r3, r2
 8000c3c:	bf08      	it	eq
 8000c3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c42:	4770      	bx	lr

08000c44 <__aeabi_fmul>:
 8000c44:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000c48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000c4c:	bf1e      	ittt	ne
 8000c4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000c52:	ea92 0f0c 	teqne	r2, ip
 8000c56:	ea93 0f0c 	teqne	r3, ip
 8000c5a:	d06f      	beq.n	8000d3c <__aeabi_fmul+0xf8>
 8000c5c:	441a      	add	r2, r3
 8000c5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000c62:	0240      	lsls	r0, r0, #9
 8000c64:	bf18      	it	ne
 8000c66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000c6a:	d01e      	beq.n	8000caa <__aeabi_fmul+0x66>
 8000c6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000c70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000c74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000c78:	fba0 3101 	umull	r3, r1, r0, r1
 8000c7c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000c80:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000c84:	bf3e      	ittt	cc
 8000c86:	0049      	lslcc	r1, r1, #1
 8000c88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000c8c:	005b      	lslcc	r3, r3, #1
 8000c8e:	ea40 0001 	orr.w	r0, r0, r1
 8000c92:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000c96:	2afd      	cmp	r2, #253	; 0xfd
 8000c98:	d81d      	bhi.n	8000cd6 <__aeabi_fmul+0x92>
 8000c9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000c9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ca2:	bf08      	it	eq
 8000ca4:	f020 0001 	biceq.w	r0, r0, #1
 8000ca8:	4770      	bx	lr
 8000caa:	f090 0f00 	teq	r0, #0
 8000cae:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000cb2:	bf08      	it	eq
 8000cb4:	0249      	lsleq	r1, r1, #9
 8000cb6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000cba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000cbe:	3a7f      	subs	r2, #127	; 0x7f
 8000cc0:	bfc2      	ittt	gt
 8000cc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000cc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000cca:	4770      	bxgt	lr
 8000ccc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd0:	f04f 0300 	mov.w	r3, #0
 8000cd4:	3a01      	subs	r2, #1
 8000cd6:	dc5d      	bgt.n	8000d94 <__aeabi_fmul+0x150>
 8000cd8:	f112 0f19 	cmn.w	r2, #25
 8000cdc:	bfdc      	itt	le
 8000cde:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000ce2:	4770      	bxle	lr
 8000ce4:	f1c2 0200 	rsb	r2, r2, #0
 8000ce8:	0041      	lsls	r1, r0, #1
 8000cea:	fa21 f102 	lsr.w	r1, r1, r2
 8000cee:	f1c2 0220 	rsb	r2, r2, #32
 8000cf2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cf6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000cfa:	f140 0000 	adc.w	r0, r0, #0
 8000cfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d02:	bf08      	it	eq
 8000d04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d08:	4770      	bx	lr
 8000d0a:	f092 0f00 	teq	r2, #0
 8000d0e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d12:	bf02      	ittt	eq
 8000d14:	0040      	lsleq	r0, r0, #1
 8000d16:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d1a:	3a01      	subeq	r2, #1
 8000d1c:	d0f9      	beq.n	8000d12 <__aeabi_fmul+0xce>
 8000d1e:	ea40 000c 	orr.w	r0, r0, ip
 8000d22:	f093 0f00 	teq	r3, #0
 8000d26:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d2a:	bf02      	ittt	eq
 8000d2c:	0049      	lsleq	r1, r1, #1
 8000d2e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d32:	3b01      	subeq	r3, #1
 8000d34:	d0f9      	beq.n	8000d2a <__aeabi_fmul+0xe6>
 8000d36:	ea41 010c 	orr.w	r1, r1, ip
 8000d3a:	e78f      	b.n	8000c5c <__aeabi_fmul+0x18>
 8000d3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000d40:	ea92 0f0c 	teq	r2, ip
 8000d44:	bf18      	it	ne
 8000d46:	ea93 0f0c 	teqne	r3, ip
 8000d4a:	d00a      	beq.n	8000d62 <__aeabi_fmul+0x11e>
 8000d4c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000d50:	bf18      	it	ne
 8000d52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000d56:	d1d8      	bne.n	8000d0a <__aeabi_fmul+0xc6>
 8000d58:	ea80 0001 	eor.w	r0, r0, r1
 8000d5c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d60:	4770      	bx	lr
 8000d62:	f090 0f00 	teq	r0, #0
 8000d66:	bf17      	itett	ne
 8000d68:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000d6c:	4608      	moveq	r0, r1
 8000d6e:	f091 0f00 	teqne	r1, #0
 8000d72:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000d76:	d014      	beq.n	8000da2 <__aeabi_fmul+0x15e>
 8000d78:	ea92 0f0c 	teq	r2, ip
 8000d7c:	d101      	bne.n	8000d82 <__aeabi_fmul+0x13e>
 8000d7e:	0242      	lsls	r2, r0, #9
 8000d80:	d10f      	bne.n	8000da2 <__aeabi_fmul+0x15e>
 8000d82:	ea93 0f0c 	teq	r3, ip
 8000d86:	d103      	bne.n	8000d90 <__aeabi_fmul+0x14c>
 8000d88:	024b      	lsls	r3, r1, #9
 8000d8a:	bf18      	it	ne
 8000d8c:	4608      	movne	r0, r1
 8000d8e:	d108      	bne.n	8000da2 <__aeabi_fmul+0x15e>
 8000d90:	ea80 0001 	eor.w	r0, r0, r1
 8000d94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000da0:	4770      	bx	lr
 8000da2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000da6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000daa:	4770      	bx	lr

08000dac <__aeabi_fdiv>:
 8000dac:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000db0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000db4:	bf1e      	ittt	ne
 8000db6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000dba:	ea92 0f0c 	teqne	r2, ip
 8000dbe:	ea93 0f0c 	teqne	r3, ip
 8000dc2:	d069      	beq.n	8000e98 <__aeabi_fdiv+0xec>
 8000dc4:	eba2 0203 	sub.w	r2, r2, r3
 8000dc8:	ea80 0c01 	eor.w	ip, r0, r1
 8000dcc:	0249      	lsls	r1, r1, #9
 8000dce:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000dd2:	d037      	beq.n	8000e44 <__aeabi_fdiv+0x98>
 8000dd4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000dd8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ddc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000de0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000de4:	428b      	cmp	r3, r1
 8000de6:	bf38      	it	cc
 8000de8:	005b      	lslcc	r3, r3, #1
 8000dea:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000dee:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000df2:	428b      	cmp	r3, r1
 8000df4:	bf24      	itt	cs
 8000df6:	1a5b      	subcs	r3, r3, r1
 8000df8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000dfc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e00:	bf24      	itt	cs
 8000e02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e0e:	bf24      	itt	cs
 8000e10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e1c:	bf24      	itt	cs
 8000e1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e26:	011b      	lsls	r3, r3, #4
 8000e28:	bf18      	it	ne
 8000e2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e2e:	d1e0      	bne.n	8000df2 <__aeabi_fdiv+0x46>
 8000e30:	2afd      	cmp	r2, #253	; 0xfd
 8000e32:	f63f af50 	bhi.w	8000cd6 <__aeabi_fmul+0x92>
 8000e36:	428b      	cmp	r3, r1
 8000e38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e3c:	bf08      	it	eq
 8000e3e:	f020 0001 	biceq.w	r0, r0, #1
 8000e42:	4770      	bx	lr
 8000e44:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e4c:	327f      	adds	r2, #127	; 0x7f
 8000e4e:	bfc2      	ittt	gt
 8000e50:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e58:	4770      	bxgt	lr
 8000e5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e5e:	f04f 0300 	mov.w	r3, #0
 8000e62:	3a01      	subs	r2, #1
 8000e64:	e737      	b.n	8000cd6 <__aeabi_fmul+0x92>
 8000e66:	f092 0f00 	teq	r2, #0
 8000e6a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e6e:	bf02      	ittt	eq
 8000e70:	0040      	lsleq	r0, r0, #1
 8000e72:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e76:	3a01      	subeq	r2, #1
 8000e78:	d0f9      	beq.n	8000e6e <__aeabi_fdiv+0xc2>
 8000e7a:	ea40 000c 	orr.w	r0, r0, ip
 8000e7e:	f093 0f00 	teq	r3, #0
 8000e82:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e86:	bf02      	ittt	eq
 8000e88:	0049      	lsleq	r1, r1, #1
 8000e8a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e8e:	3b01      	subeq	r3, #1
 8000e90:	d0f9      	beq.n	8000e86 <__aeabi_fdiv+0xda>
 8000e92:	ea41 010c 	orr.w	r1, r1, ip
 8000e96:	e795      	b.n	8000dc4 <__aeabi_fdiv+0x18>
 8000e98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e9c:	ea92 0f0c 	teq	r2, ip
 8000ea0:	d108      	bne.n	8000eb4 <__aeabi_fdiv+0x108>
 8000ea2:	0242      	lsls	r2, r0, #9
 8000ea4:	f47f af7d 	bne.w	8000da2 <__aeabi_fmul+0x15e>
 8000ea8:	ea93 0f0c 	teq	r3, ip
 8000eac:	f47f af70 	bne.w	8000d90 <__aeabi_fmul+0x14c>
 8000eb0:	4608      	mov	r0, r1
 8000eb2:	e776      	b.n	8000da2 <__aeabi_fmul+0x15e>
 8000eb4:	ea93 0f0c 	teq	r3, ip
 8000eb8:	d104      	bne.n	8000ec4 <__aeabi_fdiv+0x118>
 8000eba:	024b      	lsls	r3, r1, #9
 8000ebc:	f43f af4c 	beq.w	8000d58 <__aeabi_fmul+0x114>
 8000ec0:	4608      	mov	r0, r1
 8000ec2:	e76e      	b.n	8000da2 <__aeabi_fmul+0x15e>
 8000ec4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ec8:	bf18      	it	ne
 8000eca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000ece:	d1ca      	bne.n	8000e66 <__aeabi_fdiv+0xba>
 8000ed0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000ed4:	f47f af5c 	bne.w	8000d90 <__aeabi_fmul+0x14c>
 8000ed8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000edc:	f47f af3c 	bne.w	8000d58 <__aeabi_fmul+0x114>
 8000ee0:	e75f      	b.n	8000da2 <__aeabi_fmul+0x15e>
 8000ee2:	bf00      	nop

08000ee4 <__aeabi_d2ulz>:
 8000ee4:	b5d0      	push	{r4, r6, r7, lr}
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	4b0b      	ldr	r3, [pc, #44]	; (8000f18 <__aeabi_d2ulz+0x34>)
 8000eea:	4606      	mov	r6, r0
 8000eec:	460f      	mov	r7, r1
 8000eee:	f7ff faeb 	bl	80004c8 <__aeabi_dmul>
 8000ef2:	f000 f815 	bl	8000f20 <__aeabi_d2uiz>
 8000ef6:	4604      	mov	r4, r0
 8000ef8:	f7ff fa6c 	bl	80003d4 <__aeabi_ui2d>
 8000efc:	2200      	movs	r2, #0
 8000efe:	4b07      	ldr	r3, [pc, #28]	; (8000f1c <__aeabi_d2ulz+0x38>)
 8000f00:	f7ff fae2 	bl	80004c8 <__aeabi_dmul>
 8000f04:	4602      	mov	r2, r0
 8000f06:	460b      	mov	r3, r1
 8000f08:	4630      	mov	r0, r6
 8000f0a:	4639      	mov	r1, r7
 8000f0c:	f7ff f924 	bl	8000158 <__aeabi_dsub>
 8000f10:	f000 f806 	bl	8000f20 <__aeabi_d2uiz>
 8000f14:	4621      	mov	r1, r4
 8000f16:	bdd0      	pop	{r4, r6, r7, pc}
 8000f18:	3df00000 	.word	0x3df00000
 8000f1c:	41f00000 	.word	0x41f00000

08000f20 <__aeabi_d2uiz>:
 8000f20:	004a      	lsls	r2, r1, #1
 8000f22:	d211      	bcs.n	8000f48 <__aeabi_d2uiz+0x28>
 8000f24:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000f28:	d211      	bcs.n	8000f4e <__aeabi_d2uiz+0x2e>
 8000f2a:	d50d      	bpl.n	8000f48 <__aeabi_d2uiz+0x28>
 8000f2c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000f30:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000f34:	d40e      	bmi.n	8000f54 <__aeabi_d2uiz+0x34>
 8000f36:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000f3a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f3e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000f42:	fa23 f002 	lsr.w	r0, r3, r2
 8000f46:	4770      	bx	lr
 8000f48:	f04f 0000 	mov.w	r0, #0
 8000f4c:	4770      	bx	lr
 8000f4e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000f52:	d102      	bne.n	8000f5a <__aeabi_d2uiz+0x3a>
 8000f54:	f04f 30ff 	mov.w	r0, #4294967295
 8000f58:	4770      	bx	lr
 8000f5a:	f04f 0000 	mov.w	r0, #0
 8000f5e:	4770      	bx	lr

08000f60 <HAL_I2C_SlaveRxCpltCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c){
 8000f60:	b590      	push	{r4, r7, lr}
 8000f62:	b085      	sub	sp, #20
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
	HAL_I2C_Slave_Receive_IT(&hi2c1, RxData, RxSIZE);
 8000f68:	2206      	movs	r2, #6
 8000f6a:	4940      	ldr	r1, [pc, #256]	; (800106c <HAL_I2C_SlaveRxCpltCallback+0x10c>)
 8000f6c:	4840      	ldr	r0, [pc, #256]	; (8001070 <HAL_I2C_SlaveRxCpltCallback+0x110>)
 8000f6e:	f000 ff21 	bl	8001db4 <HAL_I2C_Slave_Receive_IT>
	a = ((uint32_t)RxData[0] << 24) |
 8000f72:	4b3e      	ldr	r3, [pc, #248]	; (800106c <HAL_I2C_SlaveRxCpltCallback+0x10c>)
 8000f74:	781b      	ldrb	r3, [r3, #0]
 8000f76:	061a      	lsls	r2, r3, #24
			((uint32_t)RxData[1] << 16) |
 8000f78:	4b3c      	ldr	r3, [pc, #240]	; (800106c <HAL_I2C_SlaveRxCpltCallback+0x10c>)
 8000f7a:	785b      	ldrb	r3, [r3, #1]
 8000f7c:	041b      	lsls	r3, r3, #16
	a = ((uint32_t)RxData[0] << 24) |
 8000f7e:	431a      	orrs	r2, r3
			((uint32_t)RxData[2] << 8) |
 8000f80:	4b3a      	ldr	r3, [pc, #232]	; (800106c <HAL_I2C_SlaveRxCpltCallback+0x10c>)
 8000f82:	789b      	ldrb	r3, [r3, #2]
 8000f84:	021b      	lsls	r3, r3, #8
			((uint32_t)RxData[1] << 16) |
 8000f86:	4313      	orrs	r3, r2
			(uint32_t)RxData[3];
 8000f88:	4a38      	ldr	r2, [pc, #224]	; (800106c <HAL_I2C_SlaveRxCpltCallback+0x10c>)
 8000f8a:	78d2      	ldrb	r2, [r2, #3]
			((uint32_t)RxData[2] << 8) |
 8000f8c:	4313      	orrs	r3, r2
 8000f8e:	461a      	mov	r2, r3
	a = ((uint32_t)RxData[0] << 24) |
 8000f90:	4b38      	ldr	r3, [pc, #224]	; (8001074 <HAL_I2C_SlaveRxCpltCallback+0x114>)
 8000f92:	601a      	str	r2, [r3, #0]

	// Get the exponent value from RxData
	exponent = RxData[4];
 8000f94:	4b35      	ldr	r3, [pc, #212]	; (800106c <HAL_I2C_SlaveRxCpltCallback+0x10c>)
 8000f96:	791a      	ldrb	r2, [r3, #4]
 8000f98:	4b37      	ldr	r3, [pc, #220]	; (8001078 <HAL_I2C_SlaveRxCpltCallback+0x118>)
 8000f9a:	701a      	strb	r2, [r3, #0]

	// Calculate mu and real_num values
	mu = pow(10, exponent);
 8000f9c:	4b36      	ldr	r3, [pc, #216]	; (8001078 <HAL_I2C_SlaveRxCpltCallback+0x118>)
 8000f9e:	781b      	ldrb	r3, [r3, #0]
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f7ff fa17 	bl	80003d4 <__aeabi_ui2d>
 8000fa6:	4602      	mov	r2, r0
 8000fa8:	460b      	mov	r3, r1
 8000faa:	f04f 0000 	mov.w	r0, #0
 8000fae:	4933      	ldr	r1, [pc, #204]	; (800107c <HAL_I2C_SlaveRxCpltCallback+0x11c>)
 8000fb0:	f003 f8ec 	bl	800418c <pow>
 8000fb4:	4602      	mov	r2, r0
 8000fb6:	460b      	mov	r3, r1
 8000fb8:	4610      	mov	r0, r2
 8000fba:	4619      	mov	r1, r3
 8000fbc:	f7ff ff92 	bl	8000ee4 <__aeabi_d2ulz>
 8000fc0:	4602      	mov	r2, r0
 8000fc2:	460b      	mov	r3, r1
 8000fc4:	492e      	ldr	r1, [pc, #184]	; (8001080 <HAL_I2C_SlaveRxCpltCallback+0x120>)
 8000fc6:	e9c1 2300 	strd	r2, r3, [r1]
	real_num = (float)((float)a/ mu);
 8000fca:	4b2a      	ldr	r3, [pc, #168]	; (8001074 <HAL_I2C_SlaveRxCpltCallback+0x114>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f7ff fde4 	bl	8000b9c <__aeabi_i2f>
 8000fd4:	4604      	mov	r4, r0
 8000fd6:	4b2a      	ldr	r3, [pc, #168]	; (8001080 <HAL_I2C_SlaveRxCpltCallback+0x120>)
 8000fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fdc:	4610      	mov	r0, r2
 8000fde:	4619      	mov	r1, r3
 8000fe0:	f7ff fdea 	bl	8000bb8 <__aeabi_ul2f>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	4620      	mov	r0, r4
 8000fea:	f7ff fedf 	bl	8000dac <__aeabi_fdiv>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	461a      	mov	r2, r3
 8000ff2:	4b24      	ldr	r3, [pc, #144]	; (8001084 <HAL_I2C_SlaveRxCpltCallback+0x124>)
 8000ff4:	601a      	str	r2, [r3, #0]

	if (RxData[5] == 0xA5){
 8000ff6:	4b1d      	ldr	r3, [pc, #116]	; (800106c <HAL_I2C_SlaveRxCpltCallback+0x10c>)
 8000ff8:	795b      	ldrb	r3, [r3, #5]
 8000ffa:	2ba5      	cmp	r3, #165	; 0xa5
 8000ffc:	d11c      	bne.n	8001038 <HAL_I2C_SlaveRxCpltCallback+0xd8>
		real_num_array[real_num_count] = real_num;
 8000ffe:	4b22      	ldr	r3, [pc, #136]	; (8001088 <HAL_I2C_SlaveRxCpltCallback+0x128>)
 8001000:	781b      	ldrb	r3, [r3, #0]
 8001002:	4619      	mov	r1, r3
 8001004:	4b1f      	ldr	r3, [pc, #124]	; (8001084 <HAL_I2C_SlaveRxCpltCallback+0x124>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4a20      	ldr	r2, [pc, #128]	; (800108c <HAL_I2C_SlaveRxCpltCallback+0x12c>)
 800100a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		for(int i = real_num_count + 1; i<30; i++){
 800100e:	4b1e      	ldr	r3, [pc, #120]	; (8001088 <HAL_I2C_SlaveRxCpltCallback+0x128>)
 8001010:	781b      	ldrb	r3, [r3, #0]
 8001012:	3301      	adds	r3, #1
 8001014:	60fb      	str	r3, [r7, #12]
 8001016:	e008      	b.n	800102a <HAL_I2C_SlaveRxCpltCallback+0xca>
			real_num_array[i] = 0;
 8001018:	4a1c      	ldr	r2, [pc, #112]	; (800108c <HAL_I2C_SlaveRxCpltCallback+0x12c>)
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	f04f 0100 	mov.w	r1, #0
 8001020:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for(int i = real_num_count + 1; i<30; i++){
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	3301      	adds	r3, #1
 8001028:	60fb      	str	r3, [r7, #12]
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	2b1d      	cmp	r3, #29
 800102e:	ddf3      	ble.n	8001018 <HAL_I2C_SlaveRxCpltCallback+0xb8>
		}
		bit_end = 1;
 8001030:	4b17      	ldr	r3, [pc, #92]	; (8001090 <HAL_I2C_SlaveRxCpltCallback+0x130>)
 8001032:	2201      	movs	r2, #1
 8001034:	701a      	strb	r2, [r3, #0]

	else if(RxData[5] == 0x01 && bit_end == 0){
		real_num_array[real_num_count] = real_num;
		real_num_count++;
	}
}
 8001036:	e015      	b.n	8001064 <HAL_I2C_SlaveRxCpltCallback+0x104>
	else if(RxData[5] == 0x01 && bit_end == 0){
 8001038:	4b0c      	ldr	r3, [pc, #48]	; (800106c <HAL_I2C_SlaveRxCpltCallback+0x10c>)
 800103a:	795b      	ldrb	r3, [r3, #5]
 800103c:	2b01      	cmp	r3, #1
 800103e:	d111      	bne.n	8001064 <HAL_I2C_SlaveRxCpltCallback+0x104>
 8001040:	4b13      	ldr	r3, [pc, #76]	; (8001090 <HAL_I2C_SlaveRxCpltCallback+0x130>)
 8001042:	781b      	ldrb	r3, [r3, #0]
 8001044:	2b00      	cmp	r3, #0
 8001046:	d10d      	bne.n	8001064 <HAL_I2C_SlaveRxCpltCallback+0x104>
		real_num_array[real_num_count] = real_num;
 8001048:	4b0f      	ldr	r3, [pc, #60]	; (8001088 <HAL_I2C_SlaveRxCpltCallback+0x128>)
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	4619      	mov	r1, r3
 800104e:	4b0d      	ldr	r3, [pc, #52]	; (8001084 <HAL_I2C_SlaveRxCpltCallback+0x124>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	4a0e      	ldr	r2, [pc, #56]	; (800108c <HAL_I2C_SlaveRxCpltCallback+0x12c>)
 8001054:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		real_num_count++;
 8001058:	4b0b      	ldr	r3, [pc, #44]	; (8001088 <HAL_I2C_SlaveRxCpltCallback+0x128>)
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	3301      	adds	r3, #1
 800105e:	b2da      	uxtb	r2, r3
 8001060:	4b09      	ldr	r3, [pc, #36]	; (8001088 <HAL_I2C_SlaveRxCpltCallback+0x128>)
 8001062:	701a      	strb	r2, [r3, #0]
}
 8001064:	bf00      	nop
 8001066:	3714      	adds	r7, #20
 8001068:	46bd      	mov	sp, r7
 800106a:	bd90      	pop	{r4, r7, pc}
 800106c:	200000e0 	.word	0x200000e0
 8001070:	2000008c 	.word	0x2000008c
 8001074:	200000e8 	.word	0x200000e8
 8001078:	200000ec 	.word	0x200000ec
 800107c:	40240000 	.word	0x40240000
 8001080:	200000f0 	.word	0x200000f0
 8001084:	20000174 	.word	0x20000174
 8001088:	20000170 	.word	0x20000170
 800108c:	200000f8 	.word	0x200000f8
 8001090:	20000171 	.word	0x20000171

08001094 <HAL_I2C_AddrCallback>:

void HAL_I2C_AddrCallback(I2C_HandleTypeDef*hi2c,uint8_t TransferDirection,uint16_t AddrMatchCode)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
 800109c:	460b      	mov	r3, r1
 800109e:	70fb      	strb	r3, [r7, #3]
 80010a0:	4613      	mov	r3, r2
 80010a2:	803b      	strh	r3, [r7, #0]
		if(TransferDirection == I2C_DIRECTION_TRANSMIT)
 80010a4:	78fb      	ldrb	r3, [r7, #3]
 80010a6:	2b01      	cmp	r3, #1
 80010a8:	d106      	bne.n	80010b8 <HAL_I2C_AddrCallback+0x24>
		{
			HAL_I2C_Slave_Sequential_Receive_IT(hi2c,RxData, RxSIZE,I2C_FIRST_AND_LAST_FRAME);
 80010aa:	2308      	movs	r3, #8
 80010ac:	2206      	movs	r2, #6
 80010ae:	4905      	ldr	r1, [pc, #20]	; (80010c4 <HAL_I2C_AddrCallback+0x30>)
 80010b0:	6878      	ldr	r0, [r7, #4]
 80010b2:	f000 feed 	bl	8001e90 <HAL_I2C_Slave_Seq_Receive_IT>
		}
		else
		{
		Error_Handler();
		}
}
 80010b6:	e001      	b.n	80010bc <HAL_I2C_AddrCallback+0x28>
		Error_Handler();
 80010b8:	f000 f8bc 	bl	8001234 <Error_Handler>
}
 80010bc:	bf00      	nop
 80010be:	3708      	adds	r7, #8
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	200000e0 	.word	0x200000e0

080010c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010cc:	f000 f9a0 	bl	8001410 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010d0:	f000 f80e 	bl	80010f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010d4:	f000 f880 	bl	80011d8 <MX_GPIO_Init>
  MX_I2C1_Init();
 80010d8:	f000 f850 	bl	800117c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c);
  void HAL_I2C_AddrCallback(I2C_HandleTypeDef*hi2c,uint8_t TransferDirection,uint16_t AddrMatchCode);


  HAL_I2C_EnableListen_IT(&hi2c1);
 80010dc:	4803      	ldr	r0, [pc, #12]	; (80010ec <main+0x24>)
 80010de:	f000 ff49 	bl	8001f74 <HAL_I2C_EnableListen_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_I2C_SlaveRxCpltCallback(&hi2c1);
 80010e2:	4802      	ldr	r0, [pc, #8]	; (80010ec <main+0x24>)
 80010e4:	f7ff ff3c 	bl	8000f60 <HAL_I2C_SlaveRxCpltCallback>
 80010e8:	e7fb      	b.n	80010e2 <main+0x1a>
 80010ea:	bf00      	nop
 80010ec:	2000008c 	.word	0x2000008c

080010f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b090      	sub	sp, #64	; 0x40
 80010f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010f6:	f107 0318 	add.w	r3, r7, #24
 80010fa:	2228      	movs	r2, #40	; 0x28
 80010fc:	2100      	movs	r1, #0
 80010fe:	4618      	mov	r0, r3
 8001100:	f003 f812 	bl	8004128 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001104:	1d3b      	adds	r3, r7, #4
 8001106:	2200      	movs	r2, #0
 8001108:	601a      	str	r2, [r3, #0]
 800110a:	605a      	str	r2, [r3, #4]
 800110c:	609a      	str	r2, [r3, #8]
 800110e:	60da      	str	r2, [r3, #12]
 8001110:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001112:	2301      	movs	r3, #1
 8001114:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001116:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800111a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800111c:	2300      	movs	r3, #0
 800111e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001120:	2301      	movs	r3, #1
 8001122:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001124:	2302      	movs	r3, #2
 8001126:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001128:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800112c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800112e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001132:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001134:	f107 0318 	add.w	r3, r7, #24
 8001138:	4618      	mov	r0, r3
 800113a:	f002 fbf9 	bl	8003930 <HAL_RCC_OscConfig>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d001      	beq.n	8001148 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001144:	f000 f876 	bl	8001234 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001148:	230f      	movs	r3, #15
 800114a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800114c:	2302      	movs	r3, #2
 800114e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001150:	2300      	movs	r3, #0
 8001152:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001154:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001158:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800115a:	2300      	movs	r3, #0
 800115c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800115e:	1d3b      	adds	r3, r7, #4
 8001160:	2102      	movs	r1, #2
 8001162:	4618      	mov	r0, r3
 8001164:	f002 fe66 	bl	8003e34 <HAL_RCC_ClockConfig>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800116e:	f000 f861 	bl	8001234 <Error_Handler>
  }
}
 8001172:	bf00      	nop
 8001174:	3740      	adds	r7, #64	; 0x40
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
	...

0800117c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001180:	4b12      	ldr	r3, [pc, #72]	; (80011cc <MX_I2C1_Init+0x50>)
 8001182:	4a13      	ldr	r2, [pc, #76]	; (80011d0 <MX_I2C1_Init+0x54>)
 8001184:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001186:	4b11      	ldr	r3, [pc, #68]	; (80011cc <MX_I2C1_Init+0x50>)
 8001188:	4a12      	ldr	r2, [pc, #72]	; (80011d4 <MX_I2C1_Init+0x58>)
 800118a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800118c:	4b0f      	ldr	r3, [pc, #60]	; (80011cc <MX_I2C1_Init+0x50>)
 800118e:	2200      	movs	r2, #0
 8001190:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 36;
 8001192:	4b0e      	ldr	r3, [pc, #56]	; (80011cc <MX_I2C1_Init+0x50>)
 8001194:	2224      	movs	r2, #36	; 0x24
 8001196:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001198:	4b0c      	ldr	r3, [pc, #48]	; (80011cc <MX_I2C1_Init+0x50>)
 800119a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800119e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011a0:	4b0a      	ldr	r3, [pc, #40]	; (80011cc <MX_I2C1_Init+0x50>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80011a6:	4b09      	ldr	r3, [pc, #36]	; (80011cc <MX_I2C1_Init+0x50>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011ac:	4b07      	ldr	r3, [pc, #28]	; (80011cc <MX_I2C1_Init+0x50>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011b2:	4b06      	ldr	r3, [pc, #24]	; (80011cc <MX_I2C1_Init+0x50>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80011b8:	4804      	ldr	r0, [pc, #16]	; (80011cc <MX_I2C1_Init+0x50>)
 80011ba:	f000 fca3 	bl	8001b04 <HAL_I2C_Init>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d001      	beq.n	80011c8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80011c4:	f000 f836 	bl	8001234 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80011c8:	bf00      	nop
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	2000008c 	.word	0x2000008c
 80011d0:	40005400 	.word	0x40005400
 80011d4:	000186a0 	.word	0x000186a0

080011d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	b085      	sub	sp, #20
 80011dc:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011de:	4b14      	ldr	r3, [pc, #80]	; (8001230 <MX_GPIO_Init+0x58>)
 80011e0:	699b      	ldr	r3, [r3, #24]
 80011e2:	4a13      	ldr	r2, [pc, #76]	; (8001230 <MX_GPIO_Init+0x58>)
 80011e4:	f043 0320 	orr.w	r3, r3, #32
 80011e8:	6193      	str	r3, [r2, #24]
 80011ea:	4b11      	ldr	r3, [pc, #68]	; (8001230 <MX_GPIO_Init+0x58>)
 80011ec:	699b      	ldr	r3, [r3, #24]
 80011ee:	f003 0320 	and.w	r3, r3, #32
 80011f2:	60fb      	str	r3, [r7, #12]
 80011f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011f6:	4b0e      	ldr	r3, [pc, #56]	; (8001230 <MX_GPIO_Init+0x58>)
 80011f8:	699b      	ldr	r3, [r3, #24]
 80011fa:	4a0d      	ldr	r2, [pc, #52]	; (8001230 <MX_GPIO_Init+0x58>)
 80011fc:	f043 0304 	orr.w	r3, r3, #4
 8001200:	6193      	str	r3, [r2, #24]
 8001202:	4b0b      	ldr	r3, [pc, #44]	; (8001230 <MX_GPIO_Init+0x58>)
 8001204:	699b      	ldr	r3, [r3, #24]
 8001206:	f003 0304 	and.w	r3, r3, #4
 800120a:	60bb      	str	r3, [r7, #8]
 800120c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800120e:	4b08      	ldr	r3, [pc, #32]	; (8001230 <MX_GPIO_Init+0x58>)
 8001210:	699b      	ldr	r3, [r3, #24]
 8001212:	4a07      	ldr	r2, [pc, #28]	; (8001230 <MX_GPIO_Init+0x58>)
 8001214:	f043 0308 	orr.w	r3, r3, #8
 8001218:	6193      	str	r3, [r2, #24]
 800121a:	4b05      	ldr	r3, [pc, #20]	; (8001230 <MX_GPIO_Init+0x58>)
 800121c:	699b      	ldr	r3, [r3, #24]
 800121e:	f003 0308 	and.w	r3, r3, #8
 8001222:	607b      	str	r3, [r7, #4]
 8001224:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001226:	bf00      	nop
 8001228:	3714      	adds	r7, #20
 800122a:	46bd      	mov	sp, r7
 800122c:	bc80      	pop	{r7}
 800122e:	4770      	bx	lr
 8001230:	40021000 	.word	0x40021000

08001234 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001238:	b672      	cpsid	i
}
 800123a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800123c:	e7fe      	b.n	800123c <Error_Handler+0x8>
	...

08001240 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001240:	b480      	push	{r7}
 8001242:	b085      	sub	sp, #20
 8001244:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001246:	4b15      	ldr	r3, [pc, #84]	; (800129c <HAL_MspInit+0x5c>)
 8001248:	699b      	ldr	r3, [r3, #24]
 800124a:	4a14      	ldr	r2, [pc, #80]	; (800129c <HAL_MspInit+0x5c>)
 800124c:	f043 0301 	orr.w	r3, r3, #1
 8001250:	6193      	str	r3, [r2, #24]
 8001252:	4b12      	ldr	r3, [pc, #72]	; (800129c <HAL_MspInit+0x5c>)
 8001254:	699b      	ldr	r3, [r3, #24]
 8001256:	f003 0301 	and.w	r3, r3, #1
 800125a:	60bb      	str	r3, [r7, #8]
 800125c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800125e:	4b0f      	ldr	r3, [pc, #60]	; (800129c <HAL_MspInit+0x5c>)
 8001260:	69db      	ldr	r3, [r3, #28]
 8001262:	4a0e      	ldr	r2, [pc, #56]	; (800129c <HAL_MspInit+0x5c>)
 8001264:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001268:	61d3      	str	r3, [r2, #28]
 800126a:	4b0c      	ldr	r3, [pc, #48]	; (800129c <HAL_MspInit+0x5c>)
 800126c:	69db      	ldr	r3, [r3, #28]
 800126e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001272:	607b      	str	r3, [r7, #4]
 8001274:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001276:	4b0a      	ldr	r3, [pc, #40]	; (80012a0 <HAL_MspInit+0x60>)
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	60fb      	str	r3, [r7, #12]
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001282:	60fb      	str	r3, [r7, #12]
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800128a:	60fb      	str	r3, [r7, #12]
 800128c:	4a04      	ldr	r2, [pc, #16]	; (80012a0 <HAL_MspInit+0x60>)
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001292:	bf00      	nop
 8001294:	3714      	adds	r7, #20
 8001296:	46bd      	mov	sp, r7
 8001298:	bc80      	pop	{r7}
 800129a:	4770      	bx	lr
 800129c:	40021000 	.word	0x40021000
 80012a0:	40010000 	.word	0x40010000

080012a4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b088      	sub	sp, #32
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ac:	f107 0310 	add.w	r3, r7, #16
 80012b0:	2200      	movs	r2, #0
 80012b2:	601a      	str	r2, [r3, #0]
 80012b4:	605a      	str	r2, [r3, #4]
 80012b6:	609a      	str	r2, [r3, #8]
 80012b8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	4a1d      	ldr	r2, [pc, #116]	; (8001334 <HAL_I2C_MspInit+0x90>)
 80012c0:	4293      	cmp	r3, r2
 80012c2:	d133      	bne.n	800132c <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012c4:	4b1c      	ldr	r3, [pc, #112]	; (8001338 <HAL_I2C_MspInit+0x94>)
 80012c6:	699b      	ldr	r3, [r3, #24]
 80012c8:	4a1b      	ldr	r2, [pc, #108]	; (8001338 <HAL_I2C_MspInit+0x94>)
 80012ca:	f043 0308 	orr.w	r3, r3, #8
 80012ce:	6193      	str	r3, [r2, #24]
 80012d0:	4b19      	ldr	r3, [pc, #100]	; (8001338 <HAL_I2C_MspInit+0x94>)
 80012d2:	699b      	ldr	r3, [r3, #24]
 80012d4:	f003 0308 	and.w	r3, r3, #8
 80012d8:	60fb      	str	r3, [r7, #12]
 80012da:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80012dc:	23c0      	movs	r3, #192	; 0xc0
 80012de:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012e0:	2312      	movs	r3, #18
 80012e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012e4:	2303      	movs	r3, #3
 80012e6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012e8:	f107 0310 	add.w	r3, r7, #16
 80012ec:	4619      	mov	r1, r3
 80012ee:	4813      	ldr	r0, [pc, #76]	; (800133c <HAL_I2C_MspInit+0x98>)
 80012f0:	f000 fa84 	bl	80017fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80012f4:	4b10      	ldr	r3, [pc, #64]	; (8001338 <HAL_I2C_MspInit+0x94>)
 80012f6:	69db      	ldr	r3, [r3, #28]
 80012f8:	4a0f      	ldr	r2, [pc, #60]	; (8001338 <HAL_I2C_MspInit+0x94>)
 80012fa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80012fe:	61d3      	str	r3, [r2, #28]
 8001300:	4b0d      	ldr	r3, [pc, #52]	; (8001338 <HAL_I2C_MspInit+0x94>)
 8001302:	69db      	ldr	r3, [r3, #28]
 8001304:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001308:	60bb      	str	r3, [r7, #8]
 800130a:	68bb      	ldr	r3, [r7, #8]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800130c:	2200      	movs	r2, #0
 800130e:	2100      	movs	r1, #0
 8001310:	201f      	movs	r0, #31
 8001312:	f000 f9b6 	bl	8001682 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001316:	201f      	movs	r0, #31
 8001318:	f000 f9cf 	bl	80016ba <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 800131c:	2200      	movs	r2, #0
 800131e:	2100      	movs	r1, #0
 8001320:	2020      	movs	r0, #32
 8001322:	f000 f9ae 	bl	8001682 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001326:	2020      	movs	r0, #32
 8001328:	f000 f9c7 	bl	80016ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800132c:	bf00      	nop
 800132e:	3720      	adds	r7, #32
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	40005400 	.word	0x40005400
 8001338:	40021000 	.word	0x40021000
 800133c:	40010c00 	.word	0x40010c00

08001340 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001344:	e7fe      	b.n	8001344 <NMI_Handler+0x4>

08001346 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001346:	b480      	push	{r7}
 8001348:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800134a:	e7fe      	b.n	800134a <HardFault_Handler+0x4>

0800134c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001350:	e7fe      	b.n	8001350 <MemManage_Handler+0x4>

08001352 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001352:	b480      	push	{r7}
 8001354:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001356:	e7fe      	b.n	8001356 <BusFault_Handler+0x4>

08001358 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800135c:	e7fe      	b.n	800135c <UsageFault_Handler+0x4>

0800135e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800135e:	b480      	push	{r7}
 8001360:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001362:	bf00      	nop
 8001364:	46bd      	mov	sp, r7
 8001366:	bc80      	pop	{r7}
 8001368:	4770      	bx	lr

0800136a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800136a:	b480      	push	{r7}
 800136c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800136e:	bf00      	nop
 8001370:	46bd      	mov	sp, r7
 8001372:	bc80      	pop	{r7}
 8001374:	4770      	bx	lr

08001376 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001376:	b480      	push	{r7}
 8001378:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800137a:	bf00      	nop
 800137c:	46bd      	mov	sp, r7
 800137e:	bc80      	pop	{r7}
 8001380:	4770      	bx	lr

08001382 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001382:	b580      	push	{r7, lr}
 8001384:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001386:	f000 f889 	bl	800149c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800138a:	bf00      	nop
 800138c:	bd80      	pop	{r7, pc}
	...

08001390 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001394:	4802      	ldr	r0, [pc, #8]	; (80013a0 <I2C1_EV_IRQHandler+0x10>)
 8001396:	f000 fe22 	bl	8001fde <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800139a:	bf00      	nop
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	2000008c 	.word	0x2000008c

080013a4 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80013a8:	4802      	ldr	r0, [pc, #8]	; (80013b4 <I2C1_ER_IRQHandler+0x10>)
 80013aa:	f000 ff6b 	bl	8002284 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80013ae:	bf00      	nop
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	2000008c 	.word	0x2000008c

080013b8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013bc:	bf00      	nop
 80013be:	46bd      	mov	sp, r7
 80013c0:	bc80      	pop	{r7}
 80013c2:	4770      	bx	lr

080013c4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80013c4:	f7ff fff8 	bl	80013b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013c8:	480b      	ldr	r0, [pc, #44]	; (80013f8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80013ca:	490c      	ldr	r1, [pc, #48]	; (80013fc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80013cc:	4a0c      	ldr	r2, [pc, #48]	; (8001400 <LoopFillZerobss+0x16>)
  movs r3, #0
 80013ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013d0:	e002      	b.n	80013d8 <LoopCopyDataInit>

080013d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013d6:	3304      	adds	r3, #4

080013d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013dc:	d3f9      	bcc.n	80013d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013de:	4a09      	ldr	r2, [pc, #36]	; (8001404 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80013e0:	4c09      	ldr	r4, [pc, #36]	; (8001408 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80013e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013e4:	e001      	b.n	80013ea <LoopFillZerobss>

080013e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013e8:	3204      	adds	r2, #4

080013ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013ec:	d3fb      	bcc.n	80013e6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013ee:	f002 fea9 	bl	8004144 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80013f2:	f7ff fe69 	bl	80010c8 <main>
  bx lr
 80013f6:	4770      	bx	lr
  ldr r0, =_sdata
 80013f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013fc:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001400:	08005020 	.word	0x08005020
  ldr r2, =_sbss
 8001404:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001408:	200002b4 	.word	0x200002b4

0800140c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800140c:	e7fe      	b.n	800140c <ADC1_2_IRQHandler>
	...

08001410 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001414:	4b08      	ldr	r3, [pc, #32]	; (8001438 <HAL_Init+0x28>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a07      	ldr	r2, [pc, #28]	; (8001438 <HAL_Init+0x28>)
 800141a:	f043 0310 	orr.w	r3, r3, #16
 800141e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001420:	2003      	movs	r0, #3
 8001422:	f000 f923 	bl	800166c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001426:	200f      	movs	r0, #15
 8001428:	f000 f808 	bl	800143c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800142c:	f7ff ff08 	bl	8001240 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001430:	2300      	movs	r3, #0
}
 8001432:	4618      	mov	r0, r3
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	40022000 	.word	0x40022000

0800143c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b082      	sub	sp, #8
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001444:	4b12      	ldr	r3, [pc, #72]	; (8001490 <HAL_InitTick+0x54>)
 8001446:	681a      	ldr	r2, [r3, #0]
 8001448:	4b12      	ldr	r3, [pc, #72]	; (8001494 <HAL_InitTick+0x58>)
 800144a:	781b      	ldrb	r3, [r3, #0]
 800144c:	4619      	mov	r1, r3
 800144e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001452:	fbb3 f3f1 	udiv	r3, r3, r1
 8001456:	fbb2 f3f3 	udiv	r3, r2, r3
 800145a:	4618      	mov	r0, r3
 800145c:	f000 f93b 	bl	80016d6 <HAL_SYSTICK_Config>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d001      	beq.n	800146a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001466:	2301      	movs	r3, #1
 8001468:	e00e      	b.n	8001488 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	2b0f      	cmp	r3, #15
 800146e:	d80a      	bhi.n	8001486 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001470:	2200      	movs	r2, #0
 8001472:	6879      	ldr	r1, [r7, #4]
 8001474:	f04f 30ff 	mov.w	r0, #4294967295
 8001478:	f000 f903 	bl	8001682 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800147c:	4a06      	ldr	r2, [pc, #24]	; (8001498 <HAL_InitTick+0x5c>)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001482:	2300      	movs	r3, #0
 8001484:	e000      	b.n	8001488 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001486:	2301      	movs	r3, #1
}
 8001488:	4618      	mov	r0, r3
 800148a:	3708      	adds	r7, #8
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}
 8001490:	20000000 	.word	0x20000000
 8001494:	20000008 	.word	0x20000008
 8001498:	20000004 	.word	0x20000004

0800149c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014a0:	4b05      	ldr	r3, [pc, #20]	; (80014b8 <HAL_IncTick+0x1c>)
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	461a      	mov	r2, r3
 80014a6:	4b05      	ldr	r3, [pc, #20]	; (80014bc <HAL_IncTick+0x20>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4413      	add	r3, r2
 80014ac:	4a03      	ldr	r2, [pc, #12]	; (80014bc <HAL_IncTick+0x20>)
 80014ae:	6013      	str	r3, [r2, #0]
}
 80014b0:	bf00      	nop
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bc80      	pop	{r7}
 80014b6:	4770      	bx	lr
 80014b8:	20000008 	.word	0x20000008
 80014bc:	20000178 	.word	0x20000178

080014c0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
  return uwTick;
 80014c4:	4b02      	ldr	r3, [pc, #8]	; (80014d0 <HAL_GetTick+0x10>)
 80014c6:	681b      	ldr	r3, [r3, #0]
}
 80014c8:	4618      	mov	r0, r3
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bc80      	pop	{r7}
 80014ce:	4770      	bx	lr
 80014d0:	20000178 	.word	0x20000178

080014d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b085      	sub	sp, #20
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	f003 0307 	and.w	r3, r3, #7
 80014e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014e4:	4b0c      	ldr	r3, [pc, #48]	; (8001518 <__NVIC_SetPriorityGrouping+0x44>)
 80014e6:	68db      	ldr	r3, [r3, #12]
 80014e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014ea:	68ba      	ldr	r2, [r7, #8]
 80014ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014f0:	4013      	ands	r3, r2
 80014f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014f8:	68bb      	ldr	r3, [r7, #8]
 80014fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001500:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001504:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001506:	4a04      	ldr	r2, [pc, #16]	; (8001518 <__NVIC_SetPriorityGrouping+0x44>)
 8001508:	68bb      	ldr	r3, [r7, #8]
 800150a:	60d3      	str	r3, [r2, #12]
}
 800150c:	bf00      	nop
 800150e:	3714      	adds	r7, #20
 8001510:	46bd      	mov	sp, r7
 8001512:	bc80      	pop	{r7}
 8001514:	4770      	bx	lr
 8001516:	bf00      	nop
 8001518:	e000ed00 	.word	0xe000ed00

0800151c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001520:	4b04      	ldr	r3, [pc, #16]	; (8001534 <__NVIC_GetPriorityGrouping+0x18>)
 8001522:	68db      	ldr	r3, [r3, #12]
 8001524:	0a1b      	lsrs	r3, r3, #8
 8001526:	f003 0307 	and.w	r3, r3, #7
}
 800152a:	4618      	mov	r0, r3
 800152c:	46bd      	mov	sp, r7
 800152e:	bc80      	pop	{r7}
 8001530:	4770      	bx	lr
 8001532:	bf00      	nop
 8001534:	e000ed00 	.word	0xe000ed00

08001538 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001538:	b480      	push	{r7}
 800153a:	b083      	sub	sp, #12
 800153c:	af00      	add	r7, sp, #0
 800153e:	4603      	mov	r3, r0
 8001540:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001542:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001546:	2b00      	cmp	r3, #0
 8001548:	db0b      	blt.n	8001562 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800154a:	79fb      	ldrb	r3, [r7, #7]
 800154c:	f003 021f 	and.w	r2, r3, #31
 8001550:	4906      	ldr	r1, [pc, #24]	; (800156c <__NVIC_EnableIRQ+0x34>)
 8001552:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001556:	095b      	lsrs	r3, r3, #5
 8001558:	2001      	movs	r0, #1
 800155a:	fa00 f202 	lsl.w	r2, r0, r2
 800155e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001562:	bf00      	nop
 8001564:	370c      	adds	r7, #12
 8001566:	46bd      	mov	sp, r7
 8001568:	bc80      	pop	{r7}
 800156a:	4770      	bx	lr
 800156c:	e000e100 	.word	0xe000e100

08001570 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001570:	b480      	push	{r7}
 8001572:	b083      	sub	sp, #12
 8001574:	af00      	add	r7, sp, #0
 8001576:	4603      	mov	r3, r0
 8001578:	6039      	str	r1, [r7, #0]
 800157a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800157c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001580:	2b00      	cmp	r3, #0
 8001582:	db0a      	blt.n	800159a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	b2da      	uxtb	r2, r3
 8001588:	490c      	ldr	r1, [pc, #48]	; (80015bc <__NVIC_SetPriority+0x4c>)
 800158a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800158e:	0112      	lsls	r2, r2, #4
 8001590:	b2d2      	uxtb	r2, r2
 8001592:	440b      	add	r3, r1
 8001594:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001598:	e00a      	b.n	80015b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	b2da      	uxtb	r2, r3
 800159e:	4908      	ldr	r1, [pc, #32]	; (80015c0 <__NVIC_SetPriority+0x50>)
 80015a0:	79fb      	ldrb	r3, [r7, #7]
 80015a2:	f003 030f 	and.w	r3, r3, #15
 80015a6:	3b04      	subs	r3, #4
 80015a8:	0112      	lsls	r2, r2, #4
 80015aa:	b2d2      	uxtb	r2, r2
 80015ac:	440b      	add	r3, r1
 80015ae:	761a      	strb	r2, [r3, #24]
}
 80015b0:	bf00      	nop
 80015b2:	370c      	adds	r7, #12
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bc80      	pop	{r7}
 80015b8:	4770      	bx	lr
 80015ba:	bf00      	nop
 80015bc:	e000e100 	.word	0xe000e100
 80015c0:	e000ed00 	.word	0xe000ed00

080015c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b089      	sub	sp, #36	; 0x24
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	60f8      	str	r0, [r7, #12]
 80015cc:	60b9      	str	r1, [r7, #8]
 80015ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	f003 0307 	and.w	r3, r3, #7
 80015d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015d8:	69fb      	ldr	r3, [r7, #28]
 80015da:	f1c3 0307 	rsb	r3, r3, #7
 80015de:	2b04      	cmp	r3, #4
 80015e0:	bf28      	it	cs
 80015e2:	2304      	movcs	r3, #4
 80015e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015e6:	69fb      	ldr	r3, [r7, #28]
 80015e8:	3304      	adds	r3, #4
 80015ea:	2b06      	cmp	r3, #6
 80015ec:	d902      	bls.n	80015f4 <NVIC_EncodePriority+0x30>
 80015ee:	69fb      	ldr	r3, [r7, #28]
 80015f0:	3b03      	subs	r3, #3
 80015f2:	e000      	b.n	80015f6 <NVIC_EncodePriority+0x32>
 80015f4:	2300      	movs	r3, #0
 80015f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015f8:	f04f 32ff 	mov.w	r2, #4294967295
 80015fc:	69bb      	ldr	r3, [r7, #24]
 80015fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001602:	43da      	mvns	r2, r3
 8001604:	68bb      	ldr	r3, [r7, #8]
 8001606:	401a      	ands	r2, r3
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800160c:	f04f 31ff 	mov.w	r1, #4294967295
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	fa01 f303 	lsl.w	r3, r1, r3
 8001616:	43d9      	mvns	r1, r3
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800161c:	4313      	orrs	r3, r2
         );
}
 800161e:	4618      	mov	r0, r3
 8001620:	3724      	adds	r7, #36	; 0x24
 8001622:	46bd      	mov	sp, r7
 8001624:	bc80      	pop	{r7}
 8001626:	4770      	bx	lr

08001628 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b082      	sub	sp, #8
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	3b01      	subs	r3, #1
 8001634:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001638:	d301      	bcc.n	800163e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800163a:	2301      	movs	r3, #1
 800163c:	e00f      	b.n	800165e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800163e:	4a0a      	ldr	r2, [pc, #40]	; (8001668 <SysTick_Config+0x40>)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	3b01      	subs	r3, #1
 8001644:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001646:	210f      	movs	r1, #15
 8001648:	f04f 30ff 	mov.w	r0, #4294967295
 800164c:	f7ff ff90 	bl	8001570 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001650:	4b05      	ldr	r3, [pc, #20]	; (8001668 <SysTick_Config+0x40>)
 8001652:	2200      	movs	r2, #0
 8001654:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001656:	4b04      	ldr	r3, [pc, #16]	; (8001668 <SysTick_Config+0x40>)
 8001658:	2207      	movs	r2, #7
 800165a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800165c:	2300      	movs	r3, #0
}
 800165e:	4618      	mov	r0, r3
 8001660:	3708      	adds	r7, #8
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	e000e010 	.word	0xe000e010

0800166c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b082      	sub	sp, #8
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001674:	6878      	ldr	r0, [r7, #4]
 8001676:	f7ff ff2d 	bl	80014d4 <__NVIC_SetPriorityGrouping>
}
 800167a:	bf00      	nop
 800167c:	3708      	adds	r7, #8
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}

08001682 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001682:	b580      	push	{r7, lr}
 8001684:	b086      	sub	sp, #24
 8001686:	af00      	add	r7, sp, #0
 8001688:	4603      	mov	r3, r0
 800168a:	60b9      	str	r1, [r7, #8]
 800168c:	607a      	str	r2, [r7, #4]
 800168e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001690:	2300      	movs	r3, #0
 8001692:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001694:	f7ff ff42 	bl	800151c <__NVIC_GetPriorityGrouping>
 8001698:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800169a:	687a      	ldr	r2, [r7, #4]
 800169c:	68b9      	ldr	r1, [r7, #8]
 800169e:	6978      	ldr	r0, [r7, #20]
 80016a0:	f7ff ff90 	bl	80015c4 <NVIC_EncodePriority>
 80016a4:	4602      	mov	r2, r0
 80016a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016aa:	4611      	mov	r1, r2
 80016ac:	4618      	mov	r0, r3
 80016ae:	f7ff ff5f 	bl	8001570 <__NVIC_SetPriority>
}
 80016b2:	bf00      	nop
 80016b4:	3718      	adds	r7, #24
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}

080016ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016ba:	b580      	push	{r7, lr}
 80016bc:	b082      	sub	sp, #8
 80016be:	af00      	add	r7, sp, #0
 80016c0:	4603      	mov	r3, r0
 80016c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016c8:	4618      	mov	r0, r3
 80016ca:	f7ff ff35 	bl	8001538 <__NVIC_EnableIRQ>
}
 80016ce:	bf00      	nop
 80016d0:	3708      	adds	r7, #8
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}

080016d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016d6:	b580      	push	{r7, lr}
 80016d8:	b082      	sub	sp, #8
 80016da:	af00      	add	r7, sp, #0
 80016dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016de:	6878      	ldr	r0, [r7, #4]
 80016e0:	f7ff ffa2 	bl	8001628 <SysTick_Config>
 80016e4:	4603      	mov	r3, r0
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	3708      	adds	r7, #8
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
	...

080016f0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b084      	sub	sp, #16
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80016f8:	2300      	movs	r3, #0
 80016fa:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001702:	b2db      	uxtb	r3, r3
 8001704:	2b02      	cmp	r3, #2
 8001706:	d005      	beq.n	8001714 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2204      	movs	r2, #4
 800170c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800170e:	2301      	movs	r3, #1
 8001710:	73fb      	strb	r3, [r7, #15]
 8001712:	e051      	b.n	80017b8 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	681a      	ldr	r2, [r3, #0]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f022 020e 	bic.w	r2, r2, #14
 8001722:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	681a      	ldr	r2, [r3, #0]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f022 0201 	bic.w	r2, r2, #1
 8001732:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a22      	ldr	r2, [pc, #136]	; (80017c4 <HAL_DMA_Abort_IT+0xd4>)
 800173a:	4293      	cmp	r3, r2
 800173c:	d029      	beq.n	8001792 <HAL_DMA_Abort_IT+0xa2>
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4a21      	ldr	r2, [pc, #132]	; (80017c8 <HAL_DMA_Abort_IT+0xd8>)
 8001744:	4293      	cmp	r3, r2
 8001746:	d022      	beq.n	800178e <HAL_DMA_Abort_IT+0x9e>
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a1f      	ldr	r2, [pc, #124]	; (80017cc <HAL_DMA_Abort_IT+0xdc>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d01a      	beq.n	8001788 <HAL_DMA_Abort_IT+0x98>
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4a1e      	ldr	r2, [pc, #120]	; (80017d0 <HAL_DMA_Abort_IT+0xe0>)
 8001758:	4293      	cmp	r3, r2
 800175a:	d012      	beq.n	8001782 <HAL_DMA_Abort_IT+0x92>
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a1c      	ldr	r2, [pc, #112]	; (80017d4 <HAL_DMA_Abort_IT+0xe4>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d00a      	beq.n	800177c <HAL_DMA_Abort_IT+0x8c>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4a1b      	ldr	r2, [pc, #108]	; (80017d8 <HAL_DMA_Abort_IT+0xe8>)
 800176c:	4293      	cmp	r3, r2
 800176e:	d102      	bne.n	8001776 <HAL_DMA_Abort_IT+0x86>
 8001770:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001774:	e00e      	b.n	8001794 <HAL_DMA_Abort_IT+0xa4>
 8001776:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800177a:	e00b      	b.n	8001794 <HAL_DMA_Abort_IT+0xa4>
 800177c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001780:	e008      	b.n	8001794 <HAL_DMA_Abort_IT+0xa4>
 8001782:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001786:	e005      	b.n	8001794 <HAL_DMA_Abort_IT+0xa4>
 8001788:	f44f 7380 	mov.w	r3, #256	; 0x100
 800178c:	e002      	b.n	8001794 <HAL_DMA_Abort_IT+0xa4>
 800178e:	2310      	movs	r3, #16
 8001790:	e000      	b.n	8001794 <HAL_DMA_Abort_IT+0xa4>
 8001792:	2301      	movs	r3, #1
 8001794:	4a11      	ldr	r2, [pc, #68]	; (80017dc <HAL_DMA_Abort_IT+0xec>)
 8001796:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2201      	movs	r2, #1
 800179c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	2200      	movs	r2, #0
 80017a4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d003      	beq.n	80017b8 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017b4:	6878      	ldr	r0, [r7, #4]
 80017b6:	4798      	blx	r3
    } 
  }
  return status;
 80017b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	3710      	adds	r7, #16
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	40020008 	.word	0x40020008
 80017c8:	4002001c 	.word	0x4002001c
 80017cc:	40020030 	.word	0x40020030
 80017d0:	40020044 	.word	0x40020044
 80017d4:	40020058 	.word	0x40020058
 80017d8:	4002006c 	.word	0x4002006c
 80017dc:	40020000 	.word	0x40020000

080017e0 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b083      	sub	sp, #12
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80017ee:	b2db      	uxtb	r3, r3
}
 80017f0:	4618      	mov	r0, r3
 80017f2:	370c      	adds	r7, #12
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bc80      	pop	{r7}
 80017f8:	4770      	bx	lr
	...

080017fc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b08b      	sub	sp, #44	; 0x2c
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
 8001804:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001806:	2300      	movs	r3, #0
 8001808:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800180a:	2300      	movs	r3, #0
 800180c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800180e:	e169      	b.n	8001ae4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001810:	2201      	movs	r2, #1
 8001812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001814:	fa02 f303 	lsl.w	r3, r2, r3
 8001818:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	69fa      	ldr	r2, [r7, #28]
 8001820:	4013      	ands	r3, r2
 8001822:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001824:	69ba      	ldr	r2, [r7, #24]
 8001826:	69fb      	ldr	r3, [r7, #28]
 8001828:	429a      	cmp	r2, r3
 800182a:	f040 8158 	bne.w	8001ade <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	4a9a      	ldr	r2, [pc, #616]	; (8001a9c <HAL_GPIO_Init+0x2a0>)
 8001834:	4293      	cmp	r3, r2
 8001836:	d05e      	beq.n	80018f6 <HAL_GPIO_Init+0xfa>
 8001838:	4a98      	ldr	r2, [pc, #608]	; (8001a9c <HAL_GPIO_Init+0x2a0>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d875      	bhi.n	800192a <HAL_GPIO_Init+0x12e>
 800183e:	4a98      	ldr	r2, [pc, #608]	; (8001aa0 <HAL_GPIO_Init+0x2a4>)
 8001840:	4293      	cmp	r3, r2
 8001842:	d058      	beq.n	80018f6 <HAL_GPIO_Init+0xfa>
 8001844:	4a96      	ldr	r2, [pc, #600]	; (8001aa0 <HAL_GPIO_Init+0x2a4>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d86f      	bhi.n	800192a <HAL_GPIO_Init+0x12e>
 800184a:	4a96      	ldr	r2, [pc, #600]	; (8001aa4 <HAL_GPIO_Init+0x2a8>)
 800184c:	4293      	cmp	r3, r2
 800184e:	d052      	beq.n	80018f6 <HAL_GPIO_Init+0xfa>
 8001850:	4a94      	ldr	r2, [pc, #592]	; (8001aa4 <HAL_GPIO_Init+0x2a8>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d869      	bhi.n	800192a <HAL_GPIO_Init+0x12e>
 8001856:	4a94      	ldr	r2, [pc, #592]	; (8001aa8 <HAL_GPIO_Init+0x2ac>)
 8001858:	4293      	cmp	r3, r2
 800185a:	d04c      	beq.n	80018f6 <HAL_GPIO_Init+0xfa>
 800185c:	4a92      	ldr	r2, [pc, #584]	; (8001aa8 <HAL_GPIO_Init+0x2ac>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d863      	bhi.n	800192a <HAL_GPIO_Init+0x12e>
 8001862:	4a92      	ldr	r2, [pc, #584]	; (8001aac <HAL_GPIO_Init+0x2b0>)
 8001864:	4293      	cmp	r3, r2
 8001866:	d046      	beq.n	80018f6 <HAL_GPIO_Init+0xfa>
 8001868:	4a90      	ldr	r2, [pc, #576]	; (8001aac <HAL_GPIO_Init+0x2b0>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d85d      	bhi.n	800192a <HAL_GPIO_Init+0x12e>
 800186e:	2b12      	cmp	r3, #18
 8001870:	d82a      	bhi.n	80018c8 <HAL_GPIO_Init+0xcc>
 8001872:	2b12      	cmp	r3, #18
 8001874:	d859      	bhi.n	800192a <HAL_GPIO_Init+0x12e>
 8001876:	a201      	add	r2, pc, #4	; (adr r2, 800187c <HAL_GPIO_Init+0x80>)
 8001878:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800187c:	080018f7 	.word	0x080018f7
 8001880:	080018d1 	.word	0x080018d1
 8001884:	080018e3 	.word	0x080018e3
 8001888:	08001925 	.word	0x08001925
 800188c:	0800192b 	.word	0x0800192b
 8001890:	0800192b 	.word	0x0800192b
 8001894:	0800192b 	.word	0x0800192b
 8001898:	0800192b 	.word	0x0800192b
 800189c:	0800192b 	.word	0x0800192b
 80018a0:	0800192b 	.word	0x0800192b
 80018a4:	0800192b 	.word	0x0800192b
 80018a8:	0800192b 	.word	0x0800192b
 80018ac:	0800192b 	.word	0x0800192b
 80018b0:	0800192b 	.word	0x0800192b
 80018b4:	0800192b 	.word	0x0800192b
 80018b8:	0800192b 	.word	0x0800192b
 80018bc:	0800192b 	.word	0x0800192b
 80018c0:	080018d9 	.word	0x080018d9
 80018c4:	080018ed 	.word	0x080018ed
 80018c8:	4a79      	ldr	r2, [pc, #484]	; (8001ab0 <HAL_GPIO_Init+0x2b4>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d013      	beq.n	80018f6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80018ce:	e02c      	b.n	800192a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	68db      	ldr	r3, [r3, #12]
 80018d4:	623b      	str	r3, [r7, #32]
          break;
 80018d6:	e029      	b.n	800192c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	68db      	ldr	r3, [r3, #12]
 80018dc:	3304      	adds	r3, #4
 80018de:	623b      	str	r3, [r7, #32]
          break;
 80018e0:	e024      	b.n	800192c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	68db      	ldr	r3, [r3, #12]
 80018e6:	3308      	adds	r3, #8
 80018e8:	623b      	str	r3, [r7, #32]
          break;
 80018ea:	e01f      	b.n	800192c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	68db      	ldr	r3, [r3, #12]
 80018f0:	330c      	adds	r3, #12
 80018f2:	623b      	str	r3, [r7, #32]
          break;
 80018f4:	e01a      	b.n	800192c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	689b      	ldr	r3, [r3, #8]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d102      	bne.n	8001904 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80018fe:	2304      	movs	r3, #4
 8001900:	623b      	str	r3, [r7, #32]
          break;
 8001902:	e013      	b.n	800192c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	689b      	ldr	r3, [r3, #8]
 8001908:	2b01      	cmp	r3, #1
 800190a:	d105      	bne.n	8001918 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800190c:	2308      	movs	r3, #8
 800190e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	69fa      	ldr	r2, [r7, #28]
 8001914:	611a      	str	r2, [r3, #16]
          break;
 8001916:	e009      	b.n	800192c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001918:	2308      	movs	r3, #8
 800191a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	69fa      	ldr	r2, [r7, #28]
 8001920:	615a      	str	r2, [r3, #20]
          break;
 8001922:	e003      	b.n	800192c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001924:	2300      	movs	r3, #0
 8001926:	623b      	str	r3, [r7, #32]
          break;
 8001928:	e000      	b.n	800192c <HAL_GPIO_Init+0x130>
          break;
 800192a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800192c:	69bb      	ldr	r3, [r7, #24]
 800192e:	2bff      	cmp	r3, #255	; 0xff
 8001930:	d801      	bhi.n	8001936 <HAL_GPIO_Init+0x13a>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	e001      	b.n	800193a <HAL_GPIO_Init+0x13e>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	3304      	adds	r3, #4
 800193a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800193c:	69bb      	ldr	r3, [r7, #24]
 800193e:	2bff      	cmp	r3, #255	; 0xff
 8001940:	d802      	bhi.n	8001948 <HAL_GPIO_Init+0x14c>
 8001942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001944:	009b      	lsls	r3, r3, #2
 8001946:	e002      	b.n	800194e <HAL_GPIO_Init+0x152>
 8001948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800194a:	3b08      	subs	r3, #8
 800194c:	009b      	lsls	r3, r3, #2
 800194e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001950:	697b      	ldr	r3, [r7, #20]
 8001952:	681a      	ldr	r2, [r3, #0]
 8001954:	210f      	movs	r1, #15
 8001956:	693b      	ldr	r3, [r7, #16]
 8001958:	fa01 f303 	lsl.w	r3, r1, r3
 800195c:	43db      	mvns	r3, r3
 800195e:	401a      	ands	r2, r3
 8001960:	6a39      	ldr	r1, [r7, #32]
 8001962:	693b      	ldr	r3, [r7, #16]
 8001964:	fa01 f303 	lsl.w	r3, r1, r3
 8001968:	431a      	orrs	r2, r3
 800196a:	697b      	ldr	r3, [r7, #20]
 800196c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001976:	2b00      	cmp	r3, #0
 8001978:	f000 80b1 	beq.w	8001ade <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800197c:	4b4d      	ldr	r3, [pc, #308]	; (8001ab4 <HAL_GPIO_Init+0x2b8>)
 800197e:	699b      	ldr	r3, [r3, #24]
 8001980:	4a4c      	ldr	r2, [pc, #304]	; (8001ab4 <HAL_GPIO_Init+0x2b8>)
 8001982:	f043 0301 	orr.w	r3, r3, #1
 8001986:	6193      	str	r3, [r2, #24]
 8001988:	4b4a      	ldr	r3, [pc, #296]	; (8001ab4 <HAL_GPIO_Init+0x2b8>)
 800198a:	699b      	ldr	r3, [r3, #24]
 800198c:	f003 0301 	and.w	r3, r3, #1
 8001990:	60bb      	str	r3, [r7, #8]
 8001992:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001994:	4a48      	ldr	r2, [pc, #288]	; (8001ab8 <HAL_GPIO_Init+0x2bc>)
 8001996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001998:	089b      	lsrs	r3, r3, #2
 800199a:	3302      	adds	r3, #2
 800199c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019a0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80019a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a4:	f003 0303 	and.w	r3, r3, #3
 80019a8:	009b      	lsls	r3, r3, #2
 80019aa:	220f      	movs	r2, #15
 80019ac:	fa02 f303 	lsl.w	r3, r2, r3
 80019b0:	43db      	mvns	r3, r3
 80019b2:	68fa      	ldr	r2, [r7, #12]
 80019b4:	4013      	ands	r3, r2
 80019b6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	4a40      	ldr	r2, [pc, #256]	; (8001abc <HAL_GPIO_Init+0x2c0>)
 80019bc:	4293      	cmp	r3, r2
 80019be:	d013      	beq.n	80019e8 <HAL_GPIO_Init+0x1ec>
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	4a3f      	ldr	r2, [pc, #252]	; (8001ac0 <HAL_GPIO_Init+0x2c4>)
 80019c4:	4293      	cmp	r3, r2
 80019c6:	d00d      	beq.n	80019e4 <HAL_GPIO_Init+0x1e8>
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	4a3e      	ldr	r2, [pc, #248]	; (8001ac4 <HAL_GPIO_Init+0x2c8>)
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d007      	beq.n	80019e0 <HAL_GPIO_Init+0x1e4>
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	4a3d      	ldr	r2, [pc, #244]	; (8001ac8 <HAL_GPIO_Init+0x2cc>)
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d101      	bne.n	80019dc <HAL_GPIO_Init+0x1e0>
 80019d8:	2303      	movs	r3, #3
 80019da:	e006      	b.n	80019ea <HAL_GPIO_Init+0x1ee>
 80019dc:	2304      	movs	r3, #4
 80019de:	e004      	b.n	80019ea <HAL_GPIO_Init+0x1ee>
 80019e0:	2302      	movs	r3, #2
 80019e2:	e002      	b.n	80019ea <HAL_GPIO_Init+0x1ee>
 80019e4:	2301      	movs	r3, #1
 80019e6:	e000      	b.n	80019ea <HAL_GPIO_Init+0x1ee>
 80019e8:	2300      	movs	r3, #0
 80019ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019ec:	f002 0203 	and.w	r2, r2, #3
 80019f0:	0092      	lsls	r2, r2, #2
 80019f2:	4093      	lsls	r3, r2
 80019f4:	68fa      	ldr	r2, [r7, #12]
 80019f6:	4313      	orrs	r3, r2
 80019f8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80019fa:	492f      	ldr	r1, [pc, #188]	; (8001ab8 <HAL_GPIO_Init+0x2bc>)
 80019fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019fe:	089b      	lsrs	r3, r3, #2
 8001a00:	3302      	adds	r3, #2
 8001a02:	68fa      	ldr	r2, [r7, #12]
 8001a04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d006      	beq.n	8001a22 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001a14:	4b2d      	ldr	r3, [pc, #180]	; (8001acc <HAL_GPIO_Init+0x2d0>)
 8001a16:	689a      	ldr	r2, [r3, #8]
 8001a18:	492c      	ldr	r1, [pc, #176]	; (8001acc <HAL_GPIO_Init+0x2d0>)
 8001a1a:	69bb      	ldr	r3, [r7, #24]
 8001a1c:	4313      	orrs	r3, r2
 8001a1e:	608b      	str	r3, [r1, #8]
 8001a20:	e006      	b.n	8001a30 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001a22:	4b2a      	ldr	r3, [pc, #168]	; (8001acc <HAL_GPIO_Init+0x2d0>)
 8001a24:	689a      	ldr	r2, [r3, #8]
 8001a26:	69bb      	ldr	r3, [r7, #24]
 8001a28:	43db      	mvns	r3, r3
 8001a2a:	4928      	ldr	r1, [pc, #160]	; (8001acc <HAL_GPIO_Init+0x2d0>)
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d006      	beq.n	8001a4a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001a3c:	4b23      	ldr	r3, [pc, #140]	; (8001acc <HAL_GPIO_Init+0x2d0>)
 8001a3e:	68da      	ldr	r2, [r3, #12]
 8001a40:	4922      	ldr	r1, [pc, #136]	; (8001acc <HAL_GPIO_Init+0x2d0>)
 8001a42:	69bb      	ldr	r3, [r7, #24]
 8001a44:	4313      	orrs	r3, r2
 8001a46:	60cb      	str	r3, [r1, #12]
 8001a48:	e006      	b.n	8001a58 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001a4a:	4b20      	ldr	r3, [pc, #128]	; (8001acc <HAL_GPIO_Init+0x2d0>)
 8001a4c:	68da      	ldr	r2, [r3, #12]
 8001a4e:	69bb      	ldr	r3, [r7, #24]
 8001a50:	43db      	mvns	r3, r3
 8001a52:	491e      	ldr	r1, [pc, #120]	; (8001acc <HAL_GPIO_Init+0x2d0>)
 8001a54:	4013      	ands	r3, r2
 8001a56:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d006      	beq.n	8001a72 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001a64:	4b19      	ldr	r3, [pc, #100]	; (8001acc <HAL_GPIO_Init+0x2d0>)
 8001a66:	685a      	ldr	r2, [r3, #4]
 8001a68:	4918      	ldr	r1, [pc, #96]	; (8001acc <HAL_GPIO_Init+0x2d0>)
 8001a6a:	69bb      	ldr	r3, [r7, #24]
 8001a6c:	4313      	orrs	r3, r2
 8001a6e:	604b      	str	r3, [r1, #4]
 8001a70:	e006      	b.n	8001a80 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001a72:	4b16      	ldr	r3, [pc, #88]	; (8001acc <HAL_GPIO_Init+0x2d0>)
 8001a74:	685a      	ldr	r2, [r3, #4]
 8001a76:	69bb      	ldr	r3, [r7, #24]
 8001a78:	43db      	mvns	r3, r3
 8001a7a:	4914      	ldr	r1, [pc, #80]	; (8001acc <HAL_GPIO_Init+0x2d0>)
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d021      	beq.n	8001ad0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001a8c:	4b0f      	ldr	r3, [pc, #60]	; (8001acc <HAL_GPIO_Init+0x2d0>)
 8001a8e:	681a      	ldr	r2, [r3, #0]
 8001a90:	490e      	ldr	r1, [pc, #56]	; (8001acc <HAL_GPIO_Init+0x2d0>)
 8001a92:	69bb      	ldr	r3, [r7, #24]
 8001a94:	4313      	orrs	r3, r2
 8001a96:	600b      	str	r3, [r1, #0]
 8001a98:	e021      	b.n	8001ade <HAL_GPIO_Init+0x2e2>
 8001a9a:	bf00      	nop
 8001a9c:	10320000 	.word	0x10320000
 8001aa0:	10310000 	.word	0x10310000
 8001aa4:	10220000 	.word	0x10220000
 8001aa8:	10210000 	.word	0x10210000
 8001aac:	10120000 	.word	0x10120000
 8001ab0:	10110000 	.word	0x10110000
 8001ab4:	40021000 	.word	0x40021000
 8001ab8:	40010000 	.word	0x40010000
 8001abc:	40010800 	.word	0x40010800
 8001ac0:	40010c00 	.word	0x40010c00
 8001ac4:	40011000 	.word	0x40011000
 8001ac8:	40011400 	.word	0x40011400
 8001acc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001ad0:	4b0b      	ldr	r3, [pc, #44]	; (8001b00 <HAL_GPIO_Init+0x304>)
 8001ad2:	681a      	ldr	r2, [r3, #0]
 8001ad4:	69bb      	ldr	r3, [r7, #24]
 8001ad6:	43db      	mvns	r3, r3
 8001ad8:	4909      	ldr	r1, [pc, #36]	; (8001b00 <HAL_GPIO_Init+0x304>)
 8001ada:	4013      	ands	r3, r2
 8001adc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae0:	3301      	adds	r3, #1
 8001ae2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	681a      	ldr	r2, [r3, #0]
 8001ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aea:	fa22 f303 	lsr.w	r3, r2, r3
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	f47f ae8e 	bne.w	8001810 <HAL_GPIO_Init+0x14>
  }
}
 8001af4:	bf00      	nop
 8001af6:	bf00      	nop
 8001af8:	372c      	adds	r7, #44	; 0x2c
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bc80      	pop	{r7}
 8001afe:	4770      	bx	lr
 8001b00:	40010400 	.word	0x40010400

08001b04 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b084      	sub	sp, #16
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d101      	bne.n	8001b16 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001b12:	2301      	movs	r3, #1
 8001b14:	e12b      	b.n	8001d6e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b1c:	b2db      	uxtb	r3, r3
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d106      	bne.n	8001b30 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2200      	movs	r2, #0
 8001b26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001b2a:	6878      	ldr	r0, [r7, #4]
 8001b2c:	f7ff fbba 	bl	80012a4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2224      	movs	r2, #36	; 0x24
 8001b34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	681a      	ldr	r2, [r3, #0]
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f022 0201 	bic.w	r2, r2, #1
 8001b46:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	681a      	ldr	r2, [r3, #0]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001b56:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	681a      	ldr	r2, [r3, #0]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001b66:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001b68:	f002 faac 	bl	80040c4 <HAL_RCC_GetPCLK1Freq>
 8001b6c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	4a81      	ldr	r2, [pc, #516]	; (8001d78 <HAL_I2C_Init+0x274>)
 8001b74:	4293      	cmp	r3, r2
 8001b76:	d807      	bhi.n	8001b88 <HAL_I2C_Init+0x84>
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	4a80      	ldr	r2, [pc, #512]	; (8001d7c <HAL_I2C_Init+0x278>)
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	bf94      	ite	ls
 8001b80:	2301      	movls	r3, #1
 8001b82:	2300      	movhi	r3, #0
 8001b84:	b2db      	uxtb	r3, r3
 8001b86:	e006      	b.n	8001b96 <HAL_I2C_Init+0x92>
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	4a7d      	ldr	r2, [pc, #500]	; (8001d80 <HAL_I2C_Init+0x27c>)
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	bf94      	ite	ls
 8001b90:	2301      	movls	r3, #1
 8001b92:	2300      	movhi	r3, #0
 8001b94:	b2db      	uxtb	r3, r3
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d001      	beq.n	8001b9e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	e0e7      	b.n	8001d6e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	4a78      	ldr	r2, [pc, #480]	; (8001d84 <HAL_I2C_Init+0x280>)
 8001ba2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ba6:	0c9b      	lsrs	r3, r3, #18
 8001ba8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	68ba      	ldr	r2, [r7, #8]
 8001bba:	430a      	orrs	r2, r1
 8001bbc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	6a1b      	ldr	r3, [r3, #32]
 8001bc4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	4a6a      	ldr	r2, [pc, #424]	; (8001d78 <HAL_I2C_Init+0x274>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d802      	bhi.n	8001bd8 <HAL_I2C_Init+0xd4>
 8001bd2:	68bb      	ldr	r3, [r7, #8]
 8001bd4:	3301      	adds	r3, #1
 8001bd6:	e009      	b.n	8001bec <HAL_I2C_Init+0xe8>
 8001bd8:	68bb      	ldr	r3, [r7, #8]
 8001bda:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001bde:	fb02 f303 	mul.w	r3, r2, r3
 8001be2:	4a69      	ldr	r2, [pc, #420]	; (8001d88 <HAL_I2C_Init+0x284>)
 8001be4:	fba2 2303 	umull	r2, r3, r2, r3
 8001be8:	099b      	lsrs	r3, r3, #6
 8001bea:	3301      	adds	r3, #1
 8001bec:	687a      	ldr	r2, [r7, #4]
 8001bee:	6812      	ldr	r2, [r2, #0]
 8001bf0:	430b      	orrs	r3, r1
 8001bf2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	69db      	ldr	r3, [r3, #28]
 8001bfa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001bfe:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	495c      	ldr	r1, [pc, #368]	; (8001d78 <HAL_I2C_Init+0x274>)
 8001c08:	428b      	cmp	r3, r1
 8001c0a:	d819      	bhi.n	8001c40 <HAL_I2C_Init+0x13c>
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	1e59      	subs	r1, r3, #1
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	005b      	lsls	r3, r3, #1
 8001c16:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c1a:	1c59      	adds	r1, r3, #1
 8001c1c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001c20:	400b      	ands	r3, r1
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d00a      	beq.n	8001c3c <HAL_I2C_Init+0x138>
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	1e59      	subs	r1, r3, #1
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	005b      	lsls	r3, r3, #1
 8001c30:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c34:	3301      	adds	r3, #1
 8001c36:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c3a:	e051      	b.n	8001ce0 <HAL_I2C_Init+0x1dc>
 8001c3c:	2304      	movs	r3, #4
 8001c3e:	e04f      	b.n	8001ce0 <HAL_I2C_Init+0x1dc>
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	689b      	ldr	r3, [r3, #8]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d111      	bne.n	8001c6c <HAL_I2C_Init+0x168>
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	1e58      	subs	r0, r3, #1
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6859      	ldr	r1, [r3, #4]
 8001c50:	460b      	mov	r3, r1
 8001c52:	005b      	lsls	r3, r3, #1
 8001c54:	440b      	add	r3, r1
 8001c56:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c5a:	3301      	adds	r3, #1
 8001c5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	bf0c      	ite	eq
 8001c64:	2301      	moveq	r3, #1
 8001c66:	2300      	movne	r3, #0
 8001c68:	b2db      	uxtb	r3, r3
 8001c6a:	e012      	b.n	8001c92 <HAL_I2C_Init+0x18e>
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	1e58      	subs	r0, r3, #1
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6859      	ldr	r1, [r3, #4]
 8001c74:	460b      	mov	r3, r1
 8001c76:	009b      	lsls	r3, r3, #2
 8001c78:	440b      	add	r3, r1
 8001c7a:	0099      	lsls	r1, r3, #2
 8001c7c:	440b      	add	r3, r1
 8001c7e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c82:	3301      	adds	r3, #1
 8001c84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	bf0c      	ite	eq
 8001c8c:	2301      	moveq	r3, #1
 8001c8e:	2300      	movne	r3, #0
 8001c90:	b2db      	uxtb	r3, r3
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d001      	beq.n	8001c9a <HAL_I2C_Init+0x196>
 8001c96:	2301      	movs	r3, #1
 8001c98:	e022      	b.n	8001ce0 <HAL_I2C_Init+0x1dc>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	689b      	ldr	r3, [r3, #8]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d10e      	bne.n	8001cc0 <HAL_I2C_Init+0x1bc>
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	1e58      	subs	r0, r3, #1
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6859      	ldr	r1, [r3, #4]
 8001caa:	460b      	mov	r3, r1
 8001cac:	005b      	lsls	r3, r3, #1
 8001cae:	440b      	add	r3, r1
 8001cb0:	fbb0 f3f3 	udiv	r3, r0, r3
 8001cb4:	3301      	adds	r3, #1
 8001cb6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001cbe:	e00f      	b.n	8001ce0 <HAL_I2C_Init+0x1dc>
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	1e58      	subs	r0, r3, #1
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6859      	ldr	r1, [r3, #4]
 8001cc8:	460b      	mov	r3, r1
 8001cca:	009b      	lsls	r3, r3, #2
 8001ccc:	440b      	add	r3, r1
 8001cce:	0099      	lsls	r1, r3, #2
 8001cd0:	440b      	add	r3, r1
 8001cd2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001cd6:	3301      	adds	r3, #1
 8001cd8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cdc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001ce0:	6879      	ldr	r1, [r7, #4]
 8001ce2:	6809      	ldr	r1, [r1, #0]
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	69da      	ldr	r2, [r3, #28]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6a1b      	ldr	r3, [r3, #32]
 8001cfa:	431a      	orrs	r2, r3
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	430a      	orrs	r2, r1
 8001d02:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	689b      	ldr	r3, [r3, #8]
 8001d0a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001d0e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001d12:	687a      	ldr	r2, [r7, #4]
 8001d14:	6911      	ldr	r1, [r2, #16]
 8001d16:	687a      	ldr	r2, [r7, #4]
 8001d18:	68d2      	ldr	r2, [r2, #12]
 8001d1a:	4311      	orrs	r1, r2
 8001d1c:	687a      	ldr	r2, [r7, #4]
 8001d1e:	6812      	ldr	r2, [r2, #0]
 8001d20:	430b      	orrs	r3, r1
 8001d22:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	68db      	ldr	r3, [r3, #12]
 8001d2a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	695a      	ldr	r2, [r3, #20]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	699b      	ldr	r3, [r3, #24]
 8001d36:	431a      	orrs	r2, r3
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	430a      	orrs	r2, r1
 8001d3e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	681a      	ldr	r2, [r3, #0]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f042 0201 	orr.w	r2, r2, #1
 8001d4e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2200      	movs	r2, #0
 8001d54:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2220      	movs	r2, #32
 8001d5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2200      	movs	r2, #0
 8001d62:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2200      	movs	r2, #0
 8001d68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001d6c:	2300      	movs	r3, #0
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	3710      	adds	r7, #16
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	000186a0 	.word	0x000186a0
 8001d7c:	001e847f 	.word	0x001e847f
 8001d80:	003d08ff 	.word	0x003d08ff
 8001d84:	431bde83 	.word	0x431bde83
 8001d88:	10624dd3 	.word	0x10624dd3

08001d8c <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b083      	sub	sp, #12
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	695b      	ldr	r3, [r3, #20]
 8001d9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d9e:	2b80      	cmp	r3, #128	; 0x80
 8001da0:	d103      	bne.n	8001daa <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	2200      	movs	r2, #0
 8001da8:	611a      	str	r2, [r3, #16]
  }
}
 8001daa:	bf00      	nop
 8001dac:	370c      	adds	r7, #12
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bc80      	pop	{r7}
 8001db2:	4770      	bx	lr

08001db4 <HAL_I2C_Slave_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b085      	sub	sp, #20
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	60f8      	str	r0, [r7, #12]
 8001dbc:	60b9      	str	r1, [r7, #8]
 8001dbe:	4613      	mov	r3, r2
 8001dc0:	80fb      	strh	r3, [r7, #6]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001dc8:	b2db      	uxtb	r3, r3
 8001dca:	2b20      	cmp	r3, #32
 8001dcc:	d158      	bne.n	8001e80 <HAL_I2C_Slave_Receive_IT+0xcc>
  {
    if ((pData == NULL) || (Size == 0U))
 8001dce:	68bb      	ldr	r3, [r7, #8]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d002      	beq.n	8001dda <HAL_I2C_Slave_Receive_IT+0x26>
 8001dd4:	88fb      	ldrh	r3, [r7, #6]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d101      	bne.n	8001dde <HAL_I2C_Slave_Receive_IT+0x2a>
    {
      return  HAL_ERROR;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	e051      	b.n	8001e82 <HAL_I2C_Slave_Receive_IT+0xce>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001de4:	2b01      	cmp	r3, #1
 8001de6:	d101      	bne.n	8001dec <HAL_I2C_Slave_Receive_IT+0x38>
 8001de8:	2302      	movs	r3, #2
 8001dea:	e04a      	b.n	8001e82 <HAL_I2C_Slave_Receive_IT+0xce>
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	2201      	movs	r2, #1
 8001df0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f003 0301 	and.w	r3, r3, #1
 8001dfe:	2b01      	cmp	r3, #1
 8001e00:	d007      	beq.n	8001e12 <HAL_I2C_Slave_Receive_IT+0x5e>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	681a      	ldr	r2, [r3, #0]
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f042 0201 	orr.w	r2, r2, #1
 8001e10:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	681a      	ldr	r2, [r3, #0]
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e20:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	2222      	movs	r2, #34	; 0x22
 8001e26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	2220      	movs	r2, #32
 8001e2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	2200      	movs	r2, #0
 8001e36:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	68ba      	ldr	r2, [r7, #8]
 8001e3c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	88fa      	ldrh	r2, [r7, #6]
 8001e42:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e48:	b29a      	uxth	r2, r3
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	4a0e      	ldr	r2, [pc, #56]	; (8001e8c <HAL_I2C_Slave_Receive_IT+0xd8>)
 8001e52:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	681a      	ldr	r2, [r3, #0]
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001e62:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	2200      	movs	r2, #0
 8001e68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	685a      	ldr	r2, [r3, #4]
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8001e7a:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	e000      	b.n	8001e82 <HAL_I2C_Slave_Receive_IT+0xce>
  }
  else
  {
    return HAL_BUSY;
 8001e80:	2302      	movs	r3, #2
  }
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	3714      	adds	r7, #20
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bc80      	pop	{r7}
 8001e8a:	4770      	bx	lr
 8001e8c:	ffff0000 	.word	0xffff0000

08001e90 <HAL_I2C_Slave_Seq_Receive_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b087      	sub	sp, #28
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	60f8      	str	r0, [r7, #12]
 8001e98:	60b9      	str	r1, [r7, #8]
 8001e9a:	603b      	str	r3, [r7, #0]
 8001e9c:	4613      	mov	r3, r2
 8001e9e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ea6:	b2db      	uxtb	r3, r3
 8001ea8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8001eac:	2b28      	cmp	r3, #40	; 0x28
 8001eae:	d15b      	bne.n	8001f68 <HAL_I2C_Slave_Seq_Receive_IT+0xd8>
  {
    if ((pData == NULL) || (Size == 0U))
 8001eb0:	68bb      	ldr	r3, [r7, #8]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d002      	beq.n	8001ebc <HAL_I2C_Slave_Seq_Receive_IT+0x2c>
 8001eb6:	88fb      	ldrh	r3, [r7, #6]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d101      	bne.n	8001ec0 <HAL_I2C_Slave_Seq_Receive_IT+0x30>
    {
      return  HAL_ERROR;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	e054      	b.n	8001f6a <HAL_I2C_Slave_Seq_Receive_IT+0xda>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ec6:	2b01      	cmp	r3, #1
 8001ec8:	d101      	bne.n	8001ece <HAL_I2C_Slave_Seq_Receive_IT+0x3e>
 8001eca:	2302      	movs	r3, #2
 8001ecc:	e04d      	b.n	8001f6a <HAL_I2C_Slave_Seq_Receive_IT+0xda>
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	2201      	movs	r2, #1
 8001ed2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f003 0301 	and.w	r3, r3, #1
 8001ee0:	2b01      	cmp	r3, #1
 8001ee2:	d007      	beq.n	8001ef4 <HAL_I2C_Slave_Seq_Receive_IT+0x64>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	681a      	ldr	r2, [r3, #0]
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f042 0201 	orr.w	r2, r2, #1
 8001ef2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	681a      	ldr	r2, [r3, #0]
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f02:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	222a      	movs	r2, #42	; 0x2a
 8001f08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	2220      	movs	r2, #32
 8001f10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	2200      	movs	r2, #0
 8001f18:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	68ba      	ldr	r2, [r7, #8]
 8001f1e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	88fa      	ldrh	r2, [r7, #6]
 8001f24:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f2a:	b29a      	uxth	r2, r3
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	683a      	ldr	r2, [r7, #0]
 8001f34:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f36:	2300      	movs	r3, #0
 8001f38:	617b      	str	r3, [r7, #20]
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	695b      	ldr	r3, [r3, #20]
 8001f40:	617b      	str	r3, [r7, #20]
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	699b      	ldr	r3, [r3, #24]
 8001f48:	617b      	str	r3, [r7, #20]
 8001f4a:	697b      	ldr	r3, [r7, #20]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	2200      	movs	r2, #0
 8001f50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	685a      	ldr	r2, [r3, #4]
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8001f62:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8001f64:	2300      	movs	r3, #0
 8001f66:	e000      	b.n	8001f6a <HAL_I2C_Slave_Seq_Receive_IT+0xda>
  }
  else
  {
    return HAL_BUSY;
 8001f68:	2302      	movs	r3, #2
  }
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	371c      	adds	r7, #28
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bc80      	pop	{r7}
 8001f72:	4770      	bx	lr

08001f74 <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b083      	sub	sp, #12
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f82:	b2db      	uxtb	r3, r3
 8001f84:	2b20      	cmp	r3, #32
 8001f86:	d124      	bne.n	8001fd2 <HAL_I2C_EnableListen_IT+0x5e>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2228      	movs	r2, #40	; 0x28
 8001f8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f003 0301 	and.w	r3, r3, #1
 8001f9a:	2b01      	cmp	r3, #1
 8001f9c:	d007      	beq.n	8001fae <HAL_I2C_EnableListen_IT+0x3a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	681a      	ldr	r2, [r3, #0]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f042 0201 	orr.w	r2, r2, #1
 8001fac:	601a      	str	r2, [r3, #0]
    }

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	681a      	ldr	r2, [r3, #0]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001fbc:	601a      	str	r2, [r3, #0]

    /* Enable EVT and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	685a      	ldr	r2, [r3, #4]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8001fcc:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	e000      	b.n	8001fd4 <HAL_I2C_EnableListen_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8001fd2:	2302      	movs	r3, #2
  }
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	370c      	adds	r7, #12
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bc80      	pop	{r7}
 8001fdc:	4770      	bx	lr

08001fde <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001fde:	b580      	push	{r7, lr}
 8001fe0:	b088      	sub	sp, #32
 8001fe2:	af00      	add	r7, sp, #0
 8001fe4:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ff6:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001ffe:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002006:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002008:	7bfb      	ldrb	r3, [r7, #15]
 800200a:	2b10      	cmp	r3, #16
 800200c:	d003      	beq.n	8002016 <HAL_I2C_EV_IRQHandler+0x38>
 800200e:	7bfb      	ldrb	r3, [r7, #15]
 8002010:	2b40      	cmp	r3, #64	; 0x40
 8002012:	f040 80b1 	bne.w	8002178 <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	699b      	ldr	r3, [r3, #24]
 800201c:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	695b      	ldr	r3, [r3, #20]
 8002024:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8002026:	69fb      	ldr	r3, [r7, #28]
 8002028:	f003 0301 	and.w	r3, r3, #1
 800202c:	2b00      	cmp	r3, #0
 800202e:	d10d      	bne.n	800204c <HAL_I2C_EV_IRQHandler+0x6e>
 8002030:	693b      	ldr	r3, [r7, #16]
 8002032:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8002036:	d003      	beq.n	8002040 <HAL_I2C_EV_IRQHandler+0x62>
 8002038:	693b      	ldr	r3, [r7, #16]
 800203a:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800203e:	d101      	bne.n	8002044 <HAL_I2C_EV_IRQHandler+0x66>
 8002040:	2301      	movs	r3, #1
 8002042:	e000      	b.n	8002046 <HAL_I2C_EV_IRQHandler+0x68>
 8002044:	2300      	movs	r3, #0
 8002046:	2b01      	cmp	r3, #1
 8002048:	f000 8114 	beq.w	8002274 <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800204c:	69fb      	ldr	r3, [r7, #28]
 800204e:	f003 0301 	and.w	r3, r3, #1
 8002052:	2b00      	cmp	r3, #0
 8002054:	d00b      	beq.n	800206e <HAL_I2C_EV_IRQHandler+0x90>
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800205c:	2b00      	cmp	r3, #0
 800205e:	d006      	beq.n	800206e <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8002060:	6878      	ldr	r0, [r7, #4]
 8002062:	f001 fc4b 	bl	80038fc <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8002066:	6878      	ldr	r0, [r7, #4]
 8002068:	f000 fd4a 	bl	8002b00 <I2C_Master_SB>
 800206c:	e083      	b.n	8002176 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800206e:	69fb      	ldr	r3, [r7, #28]
 8002070:	f003 0308 	and.w	r3, r3, #8
 8002074:	2b00      	cmp	r3, #0
 8002076:	d008      	beq.n	800208a <HAL_I2C_EV_IRQHandler+0xac>
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800207e:	2b00      	cmp	r3, #0
 8002080:	d003      	beq.n	800208a <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 8002082:	6878      	ldr	r0, [r7, #4]
 8002084:	f000 fdc1 	bl	8002c0a <I2C_Master_ADD10>
 8002088:	e075      	b.n	8002176 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800208a:	69fb      	ldr	r3, [r7, #28]
 800208c:	f003 0302 	and.w	r3, r3, #2
 8002090:	2b00      	cmp	r3, #0
 8002092:	d008      	beq.n	80020a6 <HAL_I2C_EV_IRQHandler+0xc8>
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800209a:	2b00      	cmp	r3, #0
 800209c:	d003      	beq.n	80020a6 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 800209e:	6878      	ldr	r0, [r7, #4]
 80020a0:	f000 fddc 	bl	8002c5c <I2C_Master_ADDR>
 80020a4:	e067      	b.n	8002176 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80020a6:	69bb      	ldr	r3, [r7, #24]
 80020a8:	f003 0304 	and.w	r3, r3, #4
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d036      	beq.n	800211e <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80020ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80020be:	f000 80db 	beq.w	8002278 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80020c2:	69fb      	ldr	r3, [r7, #28]
 80020c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d00d      	beq.n	80020e8 <HAL_I2C_EV_IRQHandler+0x10a>
 80020cc:	697b      	ldr	r3, [r7, #20]
 80020ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d008      	beq.n	80020e8 <HAL_I2C_EV_IRQHandler+0x10a>
 80020d6:	69fb      	ldr	r3, [r7, #28]
 80020d8:	f003 0304 	and.w	r3, r3, #4
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d103      	bne.n	80020e8 <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80020e0:	6878      	ldr	r0, [r7, #4]
 80020e2:	f000 f9be 	bl	8002462 <I2C_MasterTransmit_TXE>
 80020e6:	e046      	b.n	8002176 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80020e8:	69fb      	ldr	r3, [r7, #28]
 80020ea:	f003 0304 	and.w	r3, r3, #4
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	f000 80c2 	beq.w	8002278 <HAL_I2C_EV_IRQHandler+0x29a>
 80020f4:	697b      	ldr	r3, [r7, #20]
 80020f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	f000 80bc 	beq.w	8002278 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002100:	7bbb      	ldrb	r3, [r7, #14]
 8002102:	2b21      	cmp	r3, #33	; 0x21
 8002104:	d103      	bne.n	800210e <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8002106:	6878      	ldr	r0, [r7, #4]
 8002108:	f000 fa47 	bl	800259a <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800210c:	e0b4      	b.n	8002278 <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800210e:	7bfb      	ldrb	r3, [r7, #15]
 8002110:	2b40      	cmp	r3, #64	; 0x40
 8002112:	f040 80b1 	bne.w	8002278 <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002116:	6878      	ldr	r0, [r7, #4]
 8002118:	f000 fab5 	bl	8002686 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800211c:	e0ac      	b.n	8002278 <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002128:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800212c:	f000 80a4 	beq.w	8002278 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002130:	69fb      	ldr	r3, [r7, #28]
 8002132:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002136:	2b00      	cmp	r3, #0
 8002138:	d00d      	beq.n	8002156 <HAL_I2C_EV_IRQHandler+0x178>
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002140:	2b00      	cmp	r3, #0
 8002142:	d008      	beq.n	8002156 <HAL_I2C_EV_IRQHandler+0x178>
 8002144:	69fb      	ldr	r3, [r7, #28]
 8002146:	f003 0304 	and.w	r3, r3, #4
 800214a:	2b00      	cmp	r3, #0
 800214c:	d103      	bne.n	8002156 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800214e:	6878      	ldr	r0, [r7, #4]
 8002150:	f000 fb31 	bl	80027b6 <I2C_MasterReceive_RXNE>
 8002154:	e00f      	b.n	8002176 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002156:	69fb      	ldr	r3, [r7, #28]
 8002158:	f003 0304 	and.w	r3, r3, #4
 800215c:	2b00      	cmp	r3, #0
 800215e:	f000 808b 	beq.w	8002278 <HAL_I2C_EV_IRQHandler+0x29a>
 8002162:	697b      	ldr	r3, [r7, #20]
 8002164:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002168:	2b00      	cmp	r3, #0
 800216a:	f000 8085 	beq.w	8002278 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 800216e:	6878      	ldr	r0, [r7, #4]
 8002170:	f000 fbdc 	bl	800292c <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002174:	e080      	b.n	8002278 <HAL_I2C_EV_IRQHandler+0x29a>
 8002176:	e07f      	b.n	8002278 <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800217c:	2b00      	cmp	r3, #0
 800217e:	d004      	beq.n	800218a <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	695b      	ldr	r3, [r3, #20]
 8002186:	61fb      	str	r3, [r7, #28]
 8002188:	e007      	b.n	800219a <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	699b      	ldr	r3, [r3, #24]
 8002190:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	695b      	ldr	r3, [r3, #20]
 8002198:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800219a:	69fb      	ldr	r3, [r7, #28]
 800219c:	f003 0302 	and.w	r3, r3, #2
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d011      	beq.n	80021c8 <HAL_I2C_EV_IRQHandler+0x1ea>
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d00c      	beq.n	80021c8 <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d003      	beq.n	80021be <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	699b      	ldr	r3, [r3, #24]
 80021bc:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80021be:	69b9      	ldr	r1, [r7, #24]
 80021c0:	6878      	ldr	r0, [r7, #4]
 80021c2:	f000 ffa2 	bl	800310a <I2C_Slave_ADDR>
 80021c6:	e05a      	b.n	800227e <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80021c8:	69fb      	ldr	r3, [r7, #28]
 80021ca:	f003 0310 	and.w	r3, r3, #16
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d008      	beq.n	80021e4 <HAL_I2C_EV_IRQHandler+0x206>
 80021d2:	697b      	ldr	r3, [r7, #20]
 80021d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d003      	beq.n	80021e4 <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 80021dc:	6878      	ldr	r0, [r7, #4]
 80021de:	f000 ffdd 	bl	800319c <I2C_Slave_STOPF>
 80021e2:	e04c      	b.n	800227e <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80021e4:	7bbb      	ldrb	r3, [r7, #14]
 80021e6:	2b21      	cmp	r3, #33	; 0x21
 80021e8:	d002      	beq.n	80021f0 <HAL_I2C_EV_IRQHandler+0x212>
 80021ea:	7bbb      	ldrb	r3, [r7, #14]
 80021ec:	2b29      	cmp	r3, #41	; 0x29
 80021ee:	d120      	bne.n	8002232 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80021f0:	69fb      	ldr	r3, [r7, #28]
 80021f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d00d      	beq.n	8002216 <HAL_I2C_EV_IRQHandler+0x238>
 80021fa:	697b      	ldr	r3, [r7, #20]
 80021fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002200:	2b00      	cmp	r3, #0
 8002202:	d008      	beq.n	8002216 <HAL_I2C_EV_IRQHandler+0x238>
 8002204:	69fb      	ldr	r3, [r7, #28]
 8002206:	f003 0304 	and.w	r3, r3, #4
 800220a:	2b00      	cmp	r3, #0
 800220c:	d103      	bne.n	8002216 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800220e:	6878      	ldr	r0, [r7, #4]
 8002210:	f000 febf 	bl	8002f92 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002214:	e032      	b.n	800227c <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002216:	69fb      	ldr	r3, [r7, #28]
 8002218:	f003 0304 	and.w	r3, r3, #4
 800221c:	2b00      	cmp	r3, #0
 800221e:	d02d      	beq.n	800227c <HAL_I2C_EV_IRQHandler+0x29e>
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002226:	2b00      	cmp	r3, #0
 8002228:	d028      	beq.n	800227c <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800222a:	6878      	ldr	r0, [r7, #4]
 800222c:	f000 feee 	bl	800300c <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002230:	e024      	b.n	800227c <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002232:	69fb      	ldr	r3, [r7, #28]
 8002234:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002238:	2b00      	cmp	r3, #0
 800223a:	d00d      	beq.n	8002258 <HAL_I2C_EV_IRQHandler+0x27a>
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002242:	2b00      	cmp	r3, #0
 8002244:	d008      	beq.n	8002258 <HAL_I2C_EV_IRQHandler+0x27a>
 8002246:	69fb      	ldr	r3, [r7, #28]
 8002248:	f003 0304 	and.w	r3, r3, #4
 800224c:	2b00      	cmp	r3, #0
 800224e:	d103      	bne.n	8002258 <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8002250:	6878      	ldr	r0, [r7, #4]
 8002252:	f000 fefb 	bl	800304c <I2C_SlaveReceive_RXNE>
 8002256:	e012      	b.n	800227e <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002258:	69fb      	ldr	r3, [r7, #28]
 800225a:	f003 0304 	and.w	r3, r3, #4
 800225e:	2b00      	cmp	r3, #0
 8002260:	d00d      	beq.n	800227e <HAL_I2C_EV_IRQHandler+0x2a0>
 8002262:	697b      	ldr	r3, [r7, #20]
 8002264:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002268:	2b00      	cmp	r3, #0
 800226a:	d008      	beq.n	800227e <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800226c:	6878      	ldr	r0, [r7, #4]
 800226e:	f000 ff2b 	bl	80030c8 <I2C_SlaveReceive_BTF>
 8002272:	e004      	b.n	800227e <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 8002274:	bf00      	nop
 8002276:	e002      	b.n	800227e <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002278:	bf00      	nop
 800227a:	e000      	b.n	800227e <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800227c:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 800227e:	3720      	adds	r7, #32
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}

08002284 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b08a      	sub	sp, #40	; 0x28
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	695b      	ldr	r3, [r3, #20]
 8002292:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800229c:	2300      	movs	r3, #0
 800229e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80022a6:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80022a8:	6a3b      	ldr	r3, [r7, #32]
 80022aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d015      	beq.n	80022de <HAL_I2C_ER_IRQHandler+0x5a>
 80022b2:	69fb      	ldr	r3, [r7, #28]
 80022b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d010      	beq.n	80022de <HAL_I2C_ER_IRQHandler+0x5a>
  {
    error |= HAL_I2C_ERROR_BERR;
 80022bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022be:	f043 0301 	orr.w	r3, r3, #1
 80022c2:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80022cc:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	681a      	ldr	r2, [r3, #0]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80022dc:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80022de:	6a3b      	ldr	r3, [r7, #32]
 80022e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d00d      	beq.n	8002304 <HAL_I2C_ER_IRQHandler+0x80>
 80022e8:	69fb      	ldr	r3, [r7, #28]
 80022ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d008      	beq.n	8002304 <HAL_I2C_ER_IRQHandler+0x80>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80022f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f4:	f043 0302 	orr.w	r3, r3, #2
 80022f8:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8002302:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002304:	6a3b      	ldr	r3, [r7, #32]
 8002306:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800230a:	2b00      	cmp	r3, #0
 800230c:	d03e      	beq.n	800238c <HAL_I2C_ER_IRQHandler+0x108>
 800230e:	69fb      	ldr	r3, [r7, #28]
 8002310:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002314:	2b00      	cmp	r3, #0
 8002316:	d039      	beq.n	800238c <HAL_I2C_ER_IRQHandler+0x108>
  {
    tmp1 = CurrentMode;
 8002318:	7efb      	ldrb	r3, [r7, #27]
 800231a:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002320:	b29b      	uxth	r3, r3
 8002322:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800232a:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002330:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8002332:	7ebb      	ldrb	r3, [r7, #26]
 8002334:	2b20      	cmp	r3, #32
 8002336:	d112      	bne.n	800235e <HAL_I2C_ER_IRQHandler+0xda>
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d10f      	bne.n	800235e <HAL_I2C_ER_IRQHandler+0xda>
 800233e:	7cfb      	ldrb	r3, [r7, #19]
 8002340:	2b21      	cmp	r3, #33	; 0x21
 8002342:	d008      	beq.n	8002356 <HAL_I2C_ER_IRQHandler+0xd2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8002344:	7cfb      	ldrb	r3, [r7, #19]
 8002346:	2b29      	cmp	r3, #41	; 0x29
 8002348:	d005      	beq.n	8002356 <HAL_I2C_ER_IRQHandler+0xd2>
 800234a:	7cfb      	ldrb	r3, [r7, #19]
 800234c:	2b28      	cmp	r3, #40	; 0x28
 800234e:	d106      	bne.n	800235e <HAL_I2C_ER_IRQHandler+0xda>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	2b21      	cmp	r3, #33	; 0x21
 8002354:	d103      	bne.n	800235e <HAL_I2C_ER_IRQHandler+0xda>
    {
      I2C_Slave_AF(hi2c);
 8002356:	6878      	ldr	r0, [r7, #4]
 8002358:	f001 f850 	bl	80033fc <I2C_Slave_AF>
 800235c:	e016      	b.n	800238c <HAL_I2C_ER_IRQHandler+0x108>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002366:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8002368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800236a:	f043 0304 	orr.w	r3, r3, #4
 800236e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002370:	7efb      	ldrb	r3, [r7, #27]
 8002372:	2b10      	cmp	r3, #16
 8002374:	d002      	beq.n	800237c <HAL_I2C_ER_IRQHandler+0xf8>
 8002376:	7efb      	ldrb	r3, [r7, #27]
 8002378:	2b40      	cmp	r3, #64	; 0x40
 800237a:	d107      	bne.n	800238c <HAL_I2C_ER_IRQHandler+0x108>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	681a      	ldr	r2, [r3, #0]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800238a:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800238c:	6a3b      	ldr	r3, [r7, #32]
 800238e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002392:	2b00      	cmp	r3, #0
 8002394:	d00d      	beq.n	80023b2 <HAL_I2C_ER_IRQHandler+0x12e>
 8002396:	69fb      	ldr	r3, [r7, #28]
 8002398:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800239c:	2b00      	cmp	r3, #0
 800239e:	d008      	beq.n	80023b2 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80023a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a2:	f043 0308 	orr.w	r3, r3, #8
 80023a6:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 80023b0:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80023b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d008      	beq.n	80023ca <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80023bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023be:	431a      	orrs	r2, r3
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 80023c4:	6878      	ldr	r0, [r7, #4]
 80023c6:	f001 f88d 	bl	80034e4 <I2C_ITError>
  }
}
 80023ca:	bf00      	nop
 80023cc:	3728      	adds	r7, #40	; 0x28
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}

080023d2 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80023d2:	b480      	push	{r7}
 80023d4:	b083      	sub	sp, #12
 80023d6:	af00      	add	r7, sp, #0
 80023d8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80023da:	bf00      	nop
 80023dc:	370c      	adds	r7, #12
 80023de:	46bd      	mov	sp, r7
 80023e0:	bc80      	pop	{r7}
 80023e2:	4770      	bx	lr

080023e4 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b083      	sub	sp, #12
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80023ec:	bf00      	nop
 80023ee:	370c      	adds	r7, #12
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bc80      	pop	{r7}
 80023f4:	4770      	bx	lr

080023f6 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80023f6:	b480      	push	{r7}
 80023f8:	b083      	sub	sp, #12
 80023fa:	af00      	add	r7, sp, #0
 80023fc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80023fe:	bf00      	nop
 8002400:	370c      	adds	r7, #12
 8002402:	46bd      	mov	sp, r7
 8002404:	bc80      	pop	{r7}
 8002406:	4770      	bx	lr

08002408 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002408:	b480      	push	{r7}
 800240a:	b083      	sub	sp, #12
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8002410:	bf00      	nop
 8002412:	370c      	adds	r7, #12
 8002414:	46bd      	mov	sp, r7
 8002416:	bc80      	pop	{r7}
 8002418:	4770      	bx	lr

0800241a <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800241a:	b480      	push	{r7}
 800241c:	b083      	sub	sp, #12
 800241e:	af00      	add	r7, sp, #0
 8002420:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8002422:	bf00      	nop
 8002424:	370c      	adds	r7, #12
 8002426:	46bd      	mov	sp, r7
 8002428:	bc80      	pop	{r7}
 800242a:	4770      	bx	lr

0800242c <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800242c:	b480      	push	{r7}
 800242e:	b083      	sub	sp, #12
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8002434:	bf00      	nop
 8002436:	370c      	adds	r7, #12
 8002438:	46bd      	mov	sp, r7
 800243a:	bc80      	pop	{r7}
 800243c:	4770      	bx	lr

0800243e <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800243e:	b480      	push	{r7}
 8002440:	b083      	sub	sp, #12
 8002442:	af00      	add	r7, sp, #0
 8002444:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002446:	bf00      	nop
 8002448:	370c      	adds	r7, #12
 800244a:	46bd      	mov	sp, r7
 800244c:	bc80      	pop	{r7}
 800244e:	4770      	bx	lr

08002450 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002450:	b480      	push	{r7}
 8002452:	b083      	sub	sp, #12
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002458:	bf00      	nop
 800245a:	370c      	adds	r7, #12
 800245c:	46bd      	mov	sp, r7
 800245e:	bc80      	pop	{r7}
 8002460:	4770      	bx	lr

08002462 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002462:	b580      	push	{r7, lr}
 8002464:	b084      	sub	sp, #16
 8002466:	af00      	add	r7, sp, #0
 8002468:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002470:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002478:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800247e:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002484:	2b00      	cmp	r3, #0
 8002486:	d150      	bne.n	800252a <I2C_MasterTransmit_TXE+0xc8>
 8002488:	7bfb      	ldrb	r3, [r7, #15]
 800248a:	2b21      	cmp	r3, #33	; 0x21
 800248c:	d14d      	bne.n	800252a <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800248e:	68bb      	ldr	r3, [r7, #8]
 8002490:	2b08      	cmp	r3, #8
 8002492:	d01d      	beq.n	80024d0 <I2C_MasterTransmit_TXE+0x6e>
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	2b20      	cmp	r3, #32
 8002498:	d01a      	beq.n	80024d0 <I2C_MasterTransmit_TXE+0x6e>
 800249a:	68bb      	ldr	r3, [r7, #8]
 800249c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80024a0:	d016      	beq.n	80024d0 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	685a      	ldr	r2, [r3, #4]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80024b0:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2211      	movs	r2, #17
 80024b6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2200      	movs	r2, #0
 80024bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2220      	movs	r2, #32
 80024c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80024c8:	6878      	ldr	r0, [r7, #4]
 80024ca:	f7ff ff82 	bl	80023d2 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80024ce:	e060      	b.n	8002592 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	685a      	ldr	r2, [r3, #4]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80024de:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	681a      	ldr	r2, [r3, #0]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024ee:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2200      	movs	r2, #0
 80024f4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2220      	movs	r2, #32
 80024fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002504:	b2db      	uxtb	r3, r3
 8002506:	2b40      	cmp	r3, #64	; 0x40
 8002508:	d107      	bne.n	800251a <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2200      	movs	r2, #0
 800250e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8002512:	6878      	ldr	r0, [r7, #4]
 8002514:	f7ff ff81 	bl	800241a <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002518:	e03b      	b.n	8002592 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2200      	movs	r2, #0
 800251e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002522:	6878      	ldr	r0, [r7, #4]
 8002524:	f7ff ff55 	bl	80023d2 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002528:	e033      	b.n	8002592 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800252a:	7bfb      	ldrb	r3, [r7, #15]
 800252c:	2b21      	cmp	r3, #33	; 0x21
 800252e:	d005      	beq.n	800253c <I2C_MasterTransmit_TXE+0xda>
 8002530:	7bbb      	ldrb	r3, [r7, #14]
 8002532:	2b40      	cmp	r3, #64	; 0x40
 8002534:	d12d      	bne.n	8002592 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8002536:	7bfb      	ldrb	r3, [r7, #15]
 8002538:	2b22      	cmp	r3, #34	; 0x22
 800253a:	d12a      	bne.n	8002592 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002540:	b29b      	uxth	r3, r3
 8002542:	2b00      	cmp	r3, #0
 8002544:	d108      	bne.n	8002558 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	685a      	ldr	r2, [r3, #4]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002554:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8002556:	e01c      	b.n	8002592 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800255e:	b2db      	uxtb	r3, r3
 8002560:	2b40      	cmp	r3, #64	; 0x40
 8002562:	d103      	bne.n	800256c <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002564:	6878      	ldr	r0, [r7, #4]
 8002566:	f000 f88e 	bl	8002686 <I2C_MemoryTransmit_TXE_BTF>
}
 800256a:	e012      	b.n	8002592 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002570:	781a      	ldrb	r2, [r3, #0]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800257c:	1c5a      	adds	r2, r3, #1
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002586:	b29b      	uxth	r3, r3
 8002588:	3b01      	subs	r3, #1
 800258a:	b29a      	uxth	r2, r3
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002590:	e7ff      	b.n	8002592 <I2C_MasterTransmit_TXE+0x130>
 8002592:	bf00      	nop
 8002594:	3710      	adds	r7, #16
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}

0800259a <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800259a:	b580      	push	{r7, lr}
 800259c:	b084      	sub	sp, #16
 800259e:	af00      	add	r7, sp, #0
 80025a0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025a6:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025ae:	b2db      	uxtb	r3, r3
 80025b0:	2b21      	cmp	r3, #33	; 0x21
 80025b2:	d164      	bne.n	800267e <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025b8:	b29b      	uxth	r3, r3
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d012      	beq.n	80025e4 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c2:	781a      	ldrb	r2, [r3, #0]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ce:	1c5a      	adds	r2, r3, #1
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025d8:	b29b      	uxth	r3, r3
 80025da:	3b01      	subs	r3, #1
 80025dc:	b29a      	uxth	r2, r3
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80025e2:	e04c      	b.n	800267e <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	2b08      	cmp	r3, #8
 80025e8:	d01d      	beq.n	8002626 <I2C_MasterTransmit_BTF+0x8c>
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	2b20      	cmp	r3, #32
 80025ee:	d01a      	beq.n	8002626 <I2C_MasterTransmit_BTF+0x8c>
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80025f6:	d016      	beq.n	8002626 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	685a      	ldr	r2, [r3, #4]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002606:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2211      	movs	r2, #17
 800260c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2200      	movs	r2, #0
 8002612:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2220      	movs	r2, #32
 800261a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800261e:	6878      	ldr	r0, [r7, #4]
 8002620:	f7ff fed7 	bl	80023d2 <HAL_I2C_MasterTxCpltCallback>
}
 8002624:	e02b      	b.n	800267e <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	685a      	ldr	r2, [r3, #4]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002634:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	681a      	ldr	r2, [r3, #0]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002644:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2200      	movs	r2, #0
 800264a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2220      	movs	r2, #32
 8002650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800265a:	b2db      	uxtb	r3, r3
 800265c:	2b40      	cmp	r3, #64	; 0x40
 800265e:	d107      	bne.n	8002670 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2200      	movs	r2, #0
 8002664:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8002668:	6878      	ldr	r0, [r7, #4]
 800266a:	f7ff fed6 	bl	800241a <HAL_I2C_MemTxCpltCallback>
}
 800266e:	e006      	b.n	800267e <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2200      	movs	r2, #0
 8002674:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8002678:	6878      	ldr	r0, [r7, #4]
 800267a:	f7ff feaa 	bl	80023d2 <HAL_I2C_MasterTxCpltCallback>
}
 800267e:	bf00      	nop
 8002680:	3710      	adds	r7, #16
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}

08002686 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8002686:	b580      	push	{r7, lr}
 8002688:	b084      	sub	sp, #16
 800268a:	af00      	add	r7, sp, #0
 800268c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002694:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800269a:	2b00      	cmp	r3, #0
 800269c:	d11d      	bne.n	80026da <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026a2:	2b01      	cmp	r3, #1
 80026a4:	d10b      	bne.n	80026be <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026aa:	b2da      	uxtb	r2, r3
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026b6:	1c9a      	adds	r2, r3, #2
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 80026bc:	e077      	b.n	80027ae <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026c2:	b29b      	uxth	r3, r3
 80026c4:	121b      	asrs	r3, r3, #8
 80026c6:	b2da      	uxtb	r2, r3
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026d2:	1c5a      	adds	r2, r3, #1
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	651a      	str	r2, [r3, #80]	; 0x50
}
 80026d8:	e069      	b.n	80027ae <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026de:	2b01      	cmp	r3, #1
 80026e0:	d10b      	bne.n	80026fa <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026e6:	b2da      	uxtb	r2, r3
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026f2:	1c5a      	adds	r2, r3, #1
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	651a      	str	r2, [r3, #80]	; 0x50
}
 80026f8:	e059      	b.n	80027ae <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026fe:	2b02      	cmp	r3, #2
 8002700:	d152      	bne.n	80027a8 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8002702:	7bfb      	ldrb	r3, [r7, #15]
 8002704:	2b22      	cmp	r3, #34	; 0x22
 8002706:	d10d      	bne.n	8002724 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	681a      	ldr	r2, [r3, #0]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002716:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800271c:	1c5a      	adds	r2, r3, #1
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002722:	e044      	b.n	80027ae <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002728:	b29b      	uxth	r3, r3
 800272a:	2b00      	cmp	r3, #0
 800272c:	d015      	beq.n	800275a <I2C_MemoryTransmit_TXE_BTF+0xd4>
 800272e:	7bfb      	ldrb	r3, [r7, #15]
 8002730:	2b21      	cmp	r3, #33	; 0x21
 8002732:	d112      	bne.n	800275a <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002738:	781a      	ldrb	r2, [r3, #0]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002744:	1c5a      	adds	r2, r3, #1
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800274e:	b29b      	uxth	r3, r3
 8002750:	3b01      	subs	r3, #1
 8002752:	b29a      	uxth	r2, r3
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002758:	e029      	b.n	80027ae <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800275e:	b29b      	uxth	r3, r3
 8002760:	2b00      	cmp	r3, #0
 8002762:	d124      	bne.n	80027ae <I2C_MemoryTransmit_TXE_BTF+0x128>
 8002764:	7bfb      	ldrb	r3, [r7, #15]
 8002766:	2b21      	cmp	r3, #33	; 0x21
 8002768:	d121      	bne.n	80027ae <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	685a      	ldr	r2, [r3, #4]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002778:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	681a      	ldr	r2, [r3, #0]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002788:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2200      	movs	r2, #0
 800278e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2220      	movs	r2, #32
 8002794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2200      	movs	r2, #0
 800279c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80027a0:	6878      	ldr	r0, [r7, #4]
 80027a2:	f7ff fe3a 	bl	800241a <HAL_I2C_MemTxCpltCallback>
}
 80027a6:	e002      	b.n	80027ae <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 80027a8:	6878      	ldr	r0, [r7, #4]
 80027aa:	f7ff faef 	bl	8001d8c <I2C_Flush_DR>
}
 80027ae:	bf00      	nop
 80027b0:	3710      	adds	r7, #16
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}

080027b6 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80027b6:	b580      	push	{r7, lr}
 80027b8:	b084      	sub	sp, #16
 80027ba:	af00      	add	r7, sp, #0
 80027bc:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027c4:	b2db      	uxtb	r3, r3
 80027c6:	2b22      	cmp	r3, #34	; 0x22
 80027c8:	f040 80ac 	bne.w	8002924 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027d0:	b29b      	uxth	r3, r3
 80027d2:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	2b03      	cmp	r3, #3
 80027d8:	d921      	bls.n	800281e <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	691a      	ldr	r2, [r3, #16]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e4:	b2d2      	uxtb	r2, r2
 80027e6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ec:	1c5a      	adds	r2, r3, #1
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027f6:	b29b      	uxth	r3, r3
 80027f8:	3b01      	subs	r3, #1
 80027fa:	b29a      	uxth	r2, r3
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002804:	b29b      	uxth	r3, r3
 8002806:	2b03      	cmp	r3, #3
 8002808:	f040 808c 	bne.w	8002924 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	685a      	ldr	r2, [r3, #4]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800281a:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 800281c:	e082      	b.n	8002924 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002822:	2b02      	cmp	r3, #2
 8002824:	d075      	beq.n	8002912 <I2C_MasterReceive_RXNE+0x15c>
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	2b01      	cmp	r3, #1
 800282a:	d002      	beq.n	8002832 <I2C_MasterReceive_RXNE+0x7c>
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d16f      	bne.n	8002912 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002832:	6878      	ldr	r0, [r7, #4]
 8002834:	f001 f830 	bl	8003898 <I2C_WaitOnSTOPRequestThroughIT>
 8002838:	4603      	mov	r3, r0
 800283a:	2b00      	cmp	r3, #0
 800283c:	d142      	bne.n	80028c4 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	681a      	ldr	r2, [r3, #0]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800284c:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	685a      	ldr	r2, [r3, #4]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800285c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	691a      	ldr	r2, [r3, #16]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002868:	b2d2      	uxtb	r2, r2
 800286a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002870:	1c5a      	adds	r2, r3, #1
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800287a:	b29b      	uxth	r3, r3
 800287c:	3b01      	subs	r3, #1
 800287e:	b29a      	uxth	r2, r3
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2220      	movs	r2, #32
 8002888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002892:	b2db      	uxtb	r3, r3
 8002894:	2b40      	cmp	r3, #64	; 0x40
 8002896:	d10a      	bne.n	80028ae <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2200      	movs	r2, #0
 800289c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2200      	movs	r2, #0
 80028a4:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80028a6:	6878      	ldr	r0, [r7, #4]
 80028a8:	f7ff fdc0 	bl	800242c <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80028ac:	e03a      	b.n	8002924 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2200      	movs	r2, #0
 80028b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2212      	movs	r2, #18
 80028ba:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80028bc:	6878      	ldr	r0, [r7, #4]
 80028be:	f7ff fd91 	bl	80023e4 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80028c2:	e02f      	b.n	8002924 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	685a      	ldr	r2, [r3, #4]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80028d2:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	691a      	ldr	r2, [r3, #16]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028de:	b2d2      	uxtb	r2, r2
 80028e0:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e6:	1c5a      	adds	r2, r3, #1
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028f0:	b29b      	uxth	r3, r3
 80028f2:	3b01      	subs	r3, #1
 80028f4:	b29a      	uxth	r2, r3
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2220      	movs	r2, #32
 80028fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2200      	movs	r2, #0
 8002906:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800290a:	6878      	ldr	r0, [r7, #4]
 800290c:	f7ff fd97 	bl	800243e <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002910:	e008      	b.n	8002924 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	685a      	ldr	r2, [r3, #4]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002920:	605a      	str	r2, [r3, #4]
}
 8002922:	e7ff      	b.n	8002924 <I2C_MasterReceive_RXNE+0x16e>
 8002924:	bf00      	nop
 8002926:	3710      	adds	r7, #16
 8002928:	46bd      	mov	sp, r7
 800292a:	bd80      	pop	{r7, pc}

0800292c <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b084      	sub	sp, #16
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002938:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800293e:	b29b      	uxth	r3, r3
 8002940:	2b04      	cmp	r3, #4
 8002942:	d11b      	bne.n	800297c <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	685a      	ldr	r2, [r3, #4]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002952:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	691a      	ldr	r2, [r3, #16]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800295e:	b2d2      	uxtb	r2, r2
 8002960:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002966:	1c5a      	adds	r2, r3, #1
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002970:	b29b      	uxth	r3, r3
 8002972:	3b01      	subs	r3, #1
 8002974:	b29a      	uxth	r2, r3
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800297a:	e0bd      	b.n	8002af8 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002980:	b29b      	uxth	r3, r3
 8002982:	2b03      	cmp	r3, #3
 8002984:	d129      	bne.n	80029da <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	685a      	ldr	r2, [r3, #4]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002994:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	2b04      	cmp	r3, #4
 800299a:	d00a      	beq.n	80029b2 <I2C_MasterReceive_BTF+0x86>
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	2b02      	cmp	r3, #2
 80029a0:	d007      	beq.n	80029b2 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	681a      	ldr	r2, [r3, #0]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029b0:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	691a      	ldr	r2, [r3, #16]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029bc:	b2d2      	uxtb	r2, r2
 80029be:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c4:	1c5a      	adds	r2, r3, #1
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029ce:	b29b      	uxth	r3, r3
 80029d0:	3b01      	subs	r3, #1
 80029d2:	b29a      	uxth	r2, r3
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80029d8:	e08e      	b.n	8002af8 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029de:	b29b      	uxth	r3, r3
 80029e0:	2b02      	cmp	r3, #2
 80029e2:	d176      	bne.n	8002ad2 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	2b01      	cmp	r3, #1
 80029e8:	d002      	beq.n	80029f0 <I2C_MasterReceive_BTF+0xc4>
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	2b10      	cmp	r3, #16
 80029ee:	d108      	bne.n	8002a02 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	681a      	ldr	r2, [r3, #0]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029fe:	601a      	str	r2, [r3, #0]
 8002a00:	e019      	b.n	8002a36 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	2b04      	cmp	r3, #4
 8002a06:	d002      	beq.n	8002a0e <I2C_MasterReceive_BTF+0xe2>
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	2b02      	cmp	r3, #2
 8002a0c:	d108      	bne.n	8002a20 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	681a      	ldr	r2, [r3, #0]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002a1c:	601a      	str	r2, [r3, #0]
 8002a1e:	e00a      	b.n	8002a36 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	2b10      	cmp	r3, #16
 8002a24:	d007      	beq.n	8002a36 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	681a      	ldr	r2, [r3, #0]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a34:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	691a      	ldr	r2, [r3, #16]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a40:	b2d2      	uxtb	r2, r2
 8002a42:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a48:	1c5a      	adds	r2, r3, #1
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a52:	b29b      	uxth	r3, r3
 8002a54:	3b01      	subs	r3, #1
 8002a56:	b29a      	uxth	r2, r3
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	691a      	ldr	r2, [r3, #16]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a66:	b2d2      	uxtb	r2, r2
 8002a68:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a6e:	1c5a      	adds	r2, r3, #1
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a78:	b29b      	uxth	r3, r3
 8002a7a:	3b01      	subs	r3, #1
 8002a7c:	b29a      	uxth	r2, r3
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	685a      	ldr	r2, [r3, #4]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002a90:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2220      	movs	r2, #32
 8002a96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002aa0:	b2db      	uxtb	r3, r3
 8002aa2:	2b40      	cmp	r3, #64	; 0x40
 8002aa4:	d10a      	bne.n	8002abc <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002ab4:	6878      	ldr	r0, [r7, #4]
 8002ab6:	f7ff fcb9 	bl	800242c <HAL_I2C_MemRxCpltCallback>
}
 8002aba:	e01d      	b.n	8002af8 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2200      	movs	r2, #0
 8002ac0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2212      	movs	r2, #18
 8002ac8:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8002aca:	6878      	ldr	r0, [r7, #4]
 8002acc:	f7ff fc8a 	bl	80023e4 <HAL_I2C_MasterRxCpltCallback>
}
 8002ad0:	e012      	b.n	8002af8 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	691a      	ldr	r2, [r3, #16]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002adc:	b2d2      	uxtb	r2, r2
 8002ade:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ae4:	1c5a      	adds	r2, r3, #1
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002aee:	b29b      	uxth	r3, r3
 8002af0:	3b01      	subs	r3, #1
 8002af2:	b29a      	uxth	r2, r3
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002af8:	bf00      	nop
 8002afa:	3710      	adds	r7, #16
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bd80      	pop	{r7, pc}

08002b00 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8002b00:	b480      	push	{r7}
 8002b02:	b083      	sub	sp, #12
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002b0e:	b2db      	uxtb	r3, r3
 8002b10:	2b40      	cmp	r3, #64	; 0x40
 8002b12:	d117      	bne.n	8002b44 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d109      	bne.n	8002b30 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b20:	b2db      	uxtb	r3, r3
 8002b22:	461a      	mov	r2, r3
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002b2c:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8002b2e:	e067      	b.n	8002c00 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b34:	b2db      	uxtb	r3, r3
 8002b36:	f043 0301 	orr.w	r3, r3, #1
 8002b3a:	b2da      	uxtb	r2, r3
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	611a      	str	r2, [r3, #16]
}
 8002b42:	e05d      	b.n	8002c00 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	691b      	ldr	r3, [r3, #16]
 8002b48:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002b4c:	d133      	bne.n	8002bb6 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b54:	b2db      	uxtb	r3, r3
 8002b56:	2b21      	cmp	r3, #33	; 0x21
 8002b58:	d109      	bne.n	8002b6e <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b5e:	b2db      	uxtb	r3, r3
 8002b60:	461a      	mov	r2, r3
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002b6a:	611a      	str	r2, [r3, #16]
 8002b6c:	e008      	b.n	8002b80 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b72:	b2db      	uxtb	r3, r3
 8002b74:	f043 0301 	orr.w	r3, r3, #1
 8002b78:	b2da      	uxtb	r2, r3
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d004      	beq.n	8002b92 <I2C_Master_SB+0x92>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d108      	bne.n	8002ba4 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d032      	beq.n	8002c00 <I2C_Master_SB+0x100>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d02d      	beq.n	8002c00 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	685a      	ldr	r2, [r3, #4]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002bb2:	605a      	str	r2, [r3, #4]
}
 8002bb4:	e024      	b.n	8002c00 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d10e      	bne.n	8002bdc <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bc2:	b29b      	uxth	r3, r3
 8002bc4:	11db      	asrs	r3, r3, #7
 8002bc6:	b2db      	uxtb	r3, r3
 8002bc8:	f003 0306 	and.w	r3, r3, #6
 8002bcc:	b2db      	uxtb	r3, r3
 8002bce:	f063 030f 	orn	r3, r3, #15
 8002bd2:	b2da      	uxtb	r2, r3
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	611a      	str	r2, [r3, #16]
}
 8002bda:	e011      	b.n	8002c00 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002be0:	2b01      	cmp	r3, #1
 8002be2:	d10d      	bne.n	8002c00 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002be8:	b29b      	uxth	r3, r3
 8002bea:	11db      	asrs	r3, r3, #7
 8002bec:	b2db      	uxtb	r3, r3
 8002bee:	f003 0306 	and.w	r3, r3, #6
 8002bf2:	b2db      	uxtb	r3, r3
 8002bf4:	f063 030e 	orn	r3, r3, #14
 8002bf8:	b2da      	uxtb	r2, r3
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	611a      	str	r2, [r3, #16]
}
 8002c00:	bf00      	nop
 8002c02:	370c      	adds	r7, #12
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bc80      	pop	{r7}
 8002c08:	4770      	bx	lr

08002c0a <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8002c0a:	b480      	push	{r7}
 8002c0c:	b083      	sub	sp, #12
 8002c0e:	af00      	add	r7, sp, #0
 8002c10:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c16:	b2da      	uxtb	r2, r3
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d004      	beq.n	8002c30 <I2C_Master_ADD10+0x26>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d108      	bne.n	8002c42 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d00c      	beq.n	8002c52 <I2C_Master_ADD10+0x48>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d007      	beq.n	8002c52 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	685a      	ldr	r2, [r3, #4]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c50:	605a      	str	r2, [r3, #4]
  }
}
 8002c52:	bf00      	nop
 8002c54:	370c      	adds	r7, #12
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bc80      	pop	{r7}
 8002c5a:	4770      	bx	lr

08002c5c <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b091      	sub	sp, #68	; 0x44
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002c6a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c72:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c78:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c80:	b2db      	uxtb	r3, r3
 8002c82:	2b22      	cmp	r3, #34	; 0x22
 8002c84:	f040 8174 	bne.w	8002f70 <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d10f      	bne.n	8002cb0 <I2C_Master_ADDR+0x54>
 8002c90:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002c94:	2b40      	cmp	r3, #64	; 0x40
 8002c96:	d10b      	bne.n	8002cb0 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c98:	2300      	movs	r3, #0
 8002c9a:	633b      	str	r3, [r7, #48]	; 0x30
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	695b      	ldr	r3, [r3, #20]
 8002ca2:	633b      	str	r3, [r7, #48]	; 0x30
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	699b      	ldr	r3, [r3, #24]
 8002caa:	633b      	str	r3, [r7, #48]	; 0x30
 8002cac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cae:	e16b      	b.n	8002f88 <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d11d      	bne.n	8002cf4 <I2C_Master_ADDR+0x98>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	691b      	ldr	r3, [r3, #16]
 8002cbc:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002cc0:	d118      	bne.n	8002cf4 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	695b      	ldr	r3, [r3, #20]
 8002ccc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	699b      	ldr	r3, [r3, #24]
 8002cd4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002cd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	681a      	ldr	r2, [r3, #0]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ce6:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cec:	1c5a      	adds	r2, r3, #1
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	651a      	str	r2, [r3, #80]	; 0x50
 8002cf2:	e149      	b.n	8002f88 <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cf8:	b29b      	uxth	r3, r3
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d113      	bne.n	8002d26 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cfe:	2300      	movs	r3, #0
 8002d00:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	695b      	ldr	r3, [r3, #20]
 8002d08:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	699b      	ldr	r3, [r3, #24]
 8002d10:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d12:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	681a      	ldr	r2, [r3, #0]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d22:	601a      	str	r2, [r3, #0]
 8002d24:	e120      	b.n	8002f68 <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d2a:	b29b      	uxth	r3, r3
 8002d2c:	2b01      	cmp	r3, #1
 8002d2e:	f040 808a 	bne.w	8002e46 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8002d32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d34:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002d38:	d137      	bne.n	8002daa <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	681a      	ldr	r2, [r3, #0]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d48:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d54:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d58:	d113      	bne.n	8002d82 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	681a      	ldr	r2, [r3, #0]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d68:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	627b      	str	r3, [r7, #36]	; 0x24
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	695b      	ldr	r3, [r3, #20]
 8002d74:	627b      	str	r3, [r7, #36]	; 0x24
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	699b      	ldr	r3, [r3, #24]
 8002d7c:	627b      	str	r3, [r7, #36]	; 0x24
 8002d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d80:	e0f2      	b.n	8002f68 <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d82:	2300      	movs	r3, #0
 8002d84:	623b      	str	r3, [r7, #32]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	695b      	ldr	r3, [r3, #20]
 8002d8c:	623b      	str	r3, [r7, #32]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	699b      	ldr	r3, [r3, #24]
 8002d94:	623b      	str	r3, [r7, #32]
 8002d96:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	681a      	ldr	r2, [r3, #0]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002da6:	601a      	str	r2, [r3, #0]
 8002da8:	e0de      	b.n	8002f68 <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8002daa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dac:	2b08      	cmp	r3, #8
 8002dae:	d02e      	beq.n	8002e0e <I2C_Master_ADDR+0x1b2>
 8002db0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002db2:	2b20      	cmp	r3, #32
 8002db4:	d02b      	beq.n	8002e0e <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8002db6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002db8:	2b12      	cmp	r3, #18
 8002dba:	d102      	bne.n	8002dc2 <I2C_Master_ADDR+0x166>
 8002dbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dbe:	2b01      	cmp	r3, #1
 8002dc0:	d125      	bne.n	8002e0e <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002dc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dc4:	2b04      	cmp	r3, #4
 8002dc6:	d00e      	beq.n	8002de6 <I2C_Master_ADDR+0x18a>
 8002dc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dca:	2b02      	cmp	r3, #2
 8002dcc:	d00b      	beq.n	8002de6 <I2C_Master_ADDR+0x18a>
 8002dce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dd0:	2b10      	cmp	r3, #16
 8002dd2:	d008      	beq.n	8002de6 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	681a      	ldr	r2, [r3, #0]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002de2:	601a      	str	r2, [r3, #0]
 8002de4:	e007      	b.n	8002df6 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	681a      	ldr	r2, [r3, #0]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002df4:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002df6:	2300      	movs	r3, #0
 8002df8:	61fb      	str	r3, [r7, #28]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	695b      	ldr	r3, [r3, #20]
 8002e00:	61fb      	str	r3, [r7, #28]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	699b      	ldr	r3, [r3, #24]
 8002e08:	61fb      	str	r3, [r7, #28]
 8002e0a:	69fb      	ldr	r3, [r7, #28]
 8002e0c:	e0ac      	b.n	8002f68 <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	681a      	ldr	r2, [r3, #0]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e1c:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e1e:	2300      	movs	r3, #0
 8002e20:	61bb      	str	r3, [r7, #24]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	695b      	ldr	r3, [r3, #20]
 8002e28:	61bb      	str	r3, [r7, #24]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	699b      	ldr	r3, [r3, #24]
 8002e30:	61bb      	str	r3, [r7, #24]
 8002e32:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	681a      	ldr	r2, [r3, #0]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e42:	601a      	str	r2, [r3, #0]
 8002e44:	e090      	b.n	8002f68 <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e4a:	b29b      	uxth	r3, r3
 8002e4c:	2b02      	cmp	r3, #2
 8002e4e:	d158      	bne.n	8002f02 <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002e50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e52:	2b04      	cmp	r3, #4
 8002e54:	d021      	beq.n	8002e9a <I2C_Master_ADDR+0x23e>
 8002e56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e58:	2b02      	cmp	r3, #2
 8002e5a:	d01e      	beq.n	8002e9a <I2C_Master_ADDR+0x23e>
 8002e5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e5e:	2b10      	cmp	r3, #16
 8002e60:	d01b      	beq.n	8002e9a <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	681a      	ldr	r2, [r3, #0]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e70:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e72:	2300      	movs	r3, #0
 8002e74:	617b      	str	r3, [r7, #20]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	695b      	ldr	r3, [r3, #20]
 8002e7c:	617b      	str	r3, [r7, #20]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	699b      	ldr	r3, [r3, #24]
 8002e84:	617b      	str	r3, [r7, #20]
 8002e86:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	681a      	ldr	r2, [r3, #0]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e96:	601a      	str	r2, [r3, #0]
 8002e98:	e012      	b.n	8002ec0 <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	681a      	ldr	r2, [r3, #0]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002ea8:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002eaa:	2300      	movs	r3, #0
 8002eac:	613b      	str	r3, [r7, #16]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	695b      	ldr	r3, [r3, #20]
 8002eb4:	613b      	str	r3, [r7, #16]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	699b      	ldr	r3, [r3, #24]
 8002ebc:	613b      	str	r3, [r7, #16]
 8002ebe:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002eca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ece:	d14b      	bne.n	8002f68 <I2C_Master_ADDR+0x30c>
 8002ed0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ed2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002ed6:	d00b      	beq.n	8002ef0 <I2C_Master_ADDR+0x294>
 8002ed8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002eda:	2b01      	cmp	r3, #1
 8002edc:	d008      	beq.n	8002ef0 <I2C_Master_ADDR+0x294>
 8002ede:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ee0:	2b08      	cmp	r3, #8
 8002ee2:	d005      	beq.n	8002ef0 <I2C_Master_ADDR+0x294>
 8002ee4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ee6:	2b10      	cmp	r3, #16
 8002ee8:	d002      	beq.n	8002ef0 <I2C_Master_ADDR+0x294>
 8002eea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002eec:	2b20      	cmp	r3, #32
 8002eee:	d13b      	bne.n	8002f68 <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	685a      	ldr	r2, [r3, #4]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002efe:	605a      	str	r2, [r3, #4]
 8002f00:	e032      	b.n	8002f68 <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	681a      	ldr	r2, [r3, #0]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002f10:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f1c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f20:	d117      	bne.n	8002f52 <I2C_Master_ADDR+0x2f6>
 8002f22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f24:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002f28:	d00b      	beq.n	8002f42 <I2C_Master_ADDR+0x2e6>
 8002f2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f2c:	2b01      	cmp	r3, #1
 8002f2e:	d008      	beq.n	8002f42 <I2C_Master_ADDR+0x2e6>
 8002f30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f32:	2b08      	cmp	r3, #8
 8002f34:	d005      	beq.n	8002f42 <I2C_Master_ADDR+0x2e6>
 8002f36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f38:	2b10      	cmp	r3, #16
 8002f3a:	d002      	beq.n	8002f42 <I2C_Master_ADDR+0x2e6>
 8002f3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f3e:	2b20      	cmp	r3, #32
 8002f40:	d107      	bne.n	8002f52 <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	685a      	ldr	r2, [r3, #4]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002f50:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f52:	2300      	movs	r3, #0
 8002f54:	60fb      	str	r3, [r7, #12]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	695b      	ldr	r3, [r3, #20]
 8002f5c:	60fb      	str	r3, [r7, #12]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	699b      	ldr	r3, [r3, #24]
 8002f64:	60fb      	str	r3, [r7, #12]
 8002f66:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8002f6e:	e00b      	b.n	8002f88 <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f70:	2300      	movs	r3, #0
 8002f72:	60bb      	str	r3, [r7, #8]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	695b      	ldr	r3, [r3, #20]
 8002f7a:	60bb      	str	r3, [r7, #8]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	699b      	ldr	r3, [r3, #24]
 8002f82:	60bb      	str	r3, [r7, #8]
 8002f84:	68bb      	ldr	r3, [r7, #8]
}
 8002f86:	e7ff      	b.n	8002f88 <I2C_Master_ADDR+0x32c>
 8002f88:	bf00      	nop
 8002f8a:	3744      	adds	r7, #68	; 0x44
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bc80      	pop	{r7}
 8002f90:	4770      	bx	lr

08002f92 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002f92:	b580      	push	{r7, lr}
 8002f94:	b084      	sub	sp, #16
 8002f96:	af00      	add	r7, sp, #0
 8002f98:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fa0:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fa6:	b29b      	uxth	r3, r3
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d02b      	beq.n	8003004 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb0:	781a      	ldrb	r2, [r3, #0]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fbc:	1c5a      	adds	r2, r3, #1
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fc6:	b29b      	uxth	r3, r3
 8002fc8:	3b01      	subs	r3, #1
 8002fca:	b29a      	uxth	r2, r3
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fd4:	b29b      	uxth	r3, r3
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d114      	bne.n	8003004 <I2C_SlaveTransmit_TXE+0x72>
 8002fda:	7bfb      	ldrb	r3, [r7, #15]
 8002fdc:	2b29      	cmp	r3, #41	; 0x29
 8002fde:	d111      	bne.n	8003004 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	685a      	ldr	r2, [r3, #4]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fee:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2221      	movs	r2, #33	; 0x21
 8002ff4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2228      	movs	r2, #40	; 0x28
 8002ffa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002ffe:	6878      	ldr	r0, [r7, #4]
 8003000:	f7ff f9f9 	bl	80023f6 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003004:	bf00      	nop
 8003006:	3710      	adds	r7, #16
 8003008:	46bd      	mov	sp, r7
 800300a:	bd80      	pop	{r7, pc}

0800300c <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800300c:	b480      	push	{r7}
 800300e:	b083      	sub	sp, #12
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003018:	b29b      	uxth	r3, r3
 800301a:	2b00      	cmp	r3, #0
 800301c:	d011      	beq.n	8003042 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003022:	781a      	ldrb	r2, [r3, #0]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800302e:	1c5a      	adds	r2, r3, #1
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003038:	b29b      	uxth	r3, r3
 800303a:	3b01      	subs	r3, #1
 800303c:	b29a      	uxth	r2, r3
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003042:	bf00      	nop
 8003044:	370c      	adds	r7, #12
 8003046:	46bd      	mov	sp, r7
 8003048:	bc80      	pop	{r7}
 800304a:	4770      	bx	lr

0800304c <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b084      	sub	sp, #16
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800305a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003060:	b29b      	uxth	r3, r3
 8003062:	2b00      	cmp	r3, #0
 8003064:	d02c      	beq.n	80030c0 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	691a      	ldr	r2, [r3, #16]
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003070:	b2d2      	uxtb	r2, r2
 8003072:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003078:	1c5a      	adds	r2, r3, #1
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003082:	b29b      	uxth	r3, r3
 8003084:	3b01      	subs	r3, #1
 8003086:	b29a      	uxth	r2, r3
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003090:	b29b      	uxth	r3, r3
 8003092:	2b00      	cmp	r3, #0
 8003094:	d114      	bne.n	80030c0 <I2C_SlaveReceive_RXNE+0x74>
 8003096:	7bfb      	ldrb	r3, [r7, #15]
 8003098:	2b2a      	cmp	r3, #42	; 0x2a
 800309a:	d111      	bne.n	80030c0 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	685a      	ldr	r2, [r3, #4]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030aa:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2222      	movs	r2, #34	; 0x22
 80030b0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2228      	movs	r2, #40	; 0x28
 80030b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80030ba:	6878      	ldr	r0, [r7, #4]
 80030bc:	f7fd ff50 	bl	8000f60 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80030c0:	bf00      	nop
 80030c2:	3710      	adds	r7, #16
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bd80      	pop	{r7, pc}

080030c8 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b083      	sub	sp, #12
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030d4:	b29b      	uxth	r3, r3
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d012      	beq.n	8003100 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	691a      	ldr	r2, [r3, #16]
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e4:	b2d2      	uxtb	r2, r2
 80030e6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ec:	1c5a      	adds	r2, r3, #1
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030f6:	b29b      	uxth	r3, r3
 80030f8:	3b01      	subs	r3, #1
 80030fa:	b29a      	uxth	r2, r3
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003100:	bf00      	nop
 8003102:	370c      	adds	r7, #12
 8003104:	46bd      	mov	sp, r7
 8003106:	bc80      	pop	{r7}
 8003108:	4770      	bx	lr

0800310a <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800310a:	b580      	push	{r7, lr}
 800310c:	b084      	sub	sp, #16
 800310e:	af00      	add	r7, sp, #0
 8003110:	6078      	str	r0, [r7, #4]
 8003112:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8003114:	2300      	movs	r3, #0
 8003116:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800311e:	b2db      	uxtb	r3, r3
 8003120:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003124:	2b28      	cmp	r3, #40	; 0x28
 8003126:	d125      	bne.n	8003174 <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	685a      	ldr	r2, [r3, #4]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003136:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	f003 0304 	and.w	r3, r3, #4
 800313e:	2b00      	cmp	r3, #0
 8003140:	d101      	bne.n	8003146 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8003142:	2301      	movs	r3, #1
 8003144:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800314c:	2b00      	cmp	r3, #0
 800314e:	d103      	bne.n	8003158 <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	68db      	ldr	r3, [r3, #12]
 8003154:	81bb      	strh	r3, [r7, #12]
 8003156:	e002      	b.n	800315e <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	699b      	ldr	r3, [r3, #24]
 800315c:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2200      	movs	r2, #0
 8003162:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8003166:	89ba      	ldrh	r2, [r7, #12]
 8003168:	7bfb      	ldrb	r3, [r7, #15]
 800316a:	4619      	mov	r1, r3
 800316c:	6878      	ldr	r0, [r7, #4]
 800316e:	f7fd ff91 	bl	8001094 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003172:	e00e      	b.n	8003192 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003174:	2300      	movs	r3, #0
 8003176:	60bb      	str	r3, [r7, #8]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	695b      	ldr	r3, [r3, #20]
 800317e:	60bb      	str	r3, [r7, #8]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	699b      	ldr	r3, [r3, #24]
 8003186:	60bb      	str	r3, [r7, #8]
 8003188:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2200      	movs	r2, #0
 800318e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8003192:	bf00      	nop
 8003194:	3710      	adds	r7, #16
 8003196:	46bd      	mov	sp, r7
 8003198:	bd80      	pop	{r7, pc}
	...

0800319c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b084      	sub	sp, #16
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031aa:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	685a      	ldr	r2, [r3, #4]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80031ba:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80031bc:	2300      	movs	r3, #0
 80031be:	60bb      	str	r3, [r7, #8]
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	695b      	ldr	r3, [r3, #20]
 80031c6:	60bb      	str	r3, [r7, #8]
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	681a      	ldr	r2, [r3, #0]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f042 0201 	orr.w	r2, r2, #1
 80031d6:	601a      	str	r2, [r3, #0]
 80031d8:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	681a      	ldr	r2, [r3, #0]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031e8:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80031f8:	d172      	bne.n	80032e0 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80031fa:	7bfb      	ldrb	r3, [r7, #15]
 80031fc:	2b22      	cmp	r3, #34	; 0x22
 80031fe:	d002      	beq.n	8003206 <I2C_Slave_STOPF+0x6a>
 8003200:	7bfb      	ldrb	r3, [r7, #15]
 8003202:	2b2a      	cmp	r3, #42	; 0x2a
 8003204:	d135      	bne.n	8003272 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	b29a      	uxth	r2, r3
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003218:	b29b      	uxth	r3, r3
 800321a:	2b00      	cmp	r3, #0
 800321c:	d005      	beq.n	800322a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003222:	f043 0204 	orr.w	r2, r3, #4
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	685a      	ldr	r2, [r3, #4]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003238:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800323e:	4618      	mov	r0, r3
 8003240:	f7fe face 	bl	80017e0 <HAL_DMA_GetState>
 8003244:	4603      	mov	r3, r0
 8003246:	2b01      	cmp	r3, #1
 8003248:	d049      	beq.n	80032de <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800324e:	4a69      	ldr	r2, [pc, #420]	; (80033f4 <I2C_Slave_STOPF+0x258>)
 8003250:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003256:	4618      	mov	r0, r3
 8003258:	f7fe fa4a 	bl	80016f0 <HAL_DMA_Abort_IT>
 800325c:	4603      	mov	r3, r0
 800325e:	2b00      	cmp	r3, #0
 8003260:	d03d      	beq.n	80032de <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003266:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003268:	687a      	ldr	r2, [r7, #4]
 800326a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800326c:	4610      	mov	r0, r2
 800326e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003270:	e035      	b.n	80032de <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	b29a      	uxth	r2, r3
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003284:	b29b      	uxth	r3, r3
 8003286:	2b00      	cmp	r3, #0
 8003288:	d005      	beq.n	8003296 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800328e:	f043 0204 	orr.w	r2, r3, #4
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	685a      	ldr	r2, [r3, #4]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80032a4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032aa:	4618      	mov	r0, r3
 80032ac:	f7fe fa98 	bl	80017e0 <HAL_DMA_GetState>
 80032b0:	4603      	mov	r3, r0
 80032b2:	2b01      	cmp	r3, #1
 80032b4:	d014      	beq.n	80032e0 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032ba:	4a4e      	ldr	r2, [pc, #312]	; (80033f4 <I2C_Slave_STOPF+0x258>)
 80032bc:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032c2:	4618      	mov	r0, r3
 80032c4:	f7fe fa14 	bl	80016f0 <HAL_DMA_Abort_IT>
 80032c8:	4603      	mov	r3, r0
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d008      	beq.n	80032e0 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032d4:	687a      	ldr	r2, [r7, #4]
 80032d6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80032d8:	4610      	mov	r0, r2
 80032da:	4798      	blx	r3
 80032dc:	e000      	b.n	80032e0 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80032de:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032e4:	b29b      	uxth	r3, r3
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d03e      	beq.n	8003368 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	695b      	ldr	r3, [r3, #20]
 80032f0:	f003 0304 	and.w	r3, r3, #4
 80032f4:	2b04      	cmp	r3, #4
 80032f6:	d112      	bne.n	800331e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	691a      	ldr	r2, [r3, #16]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003302:	b2d2      	uxtb	r2, r2
 8003304:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800330a:	1c5a      	adds	r2, r3, #1
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003314:	b29b      	uxth	r3, r3
 8003316:	3b01      	subs	r3, #1
 8003318:	b29a      	uxth	r2, r3
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	695b      	ldr	r3, [r3, #20]
 8003324:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003328:	2b40      	cmp	r3, #64	; 0x40
 800332a:	d112      	bne.n	8003352 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	691a      	ldr	r2, [r3, #16]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003336:	b2d2      	uxtb	r2, r2
 8003338:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800333e:	1c5a      	adds	r2, r3, #1
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003348:	b29b      	uxth	r3, r3
 800334a:	3b01      	subs	r3, #1
 800334c:	b29a      	uxth	r2, r3
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003356:	b29b      	uxth	r3, r3
 8003358:	2b00      	cmp	r3, #0
 800335a:	d005      	beq.n	8003368 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003360:	f043 0204 	orr.w	r2, r3, #4
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800336c:	2b00      	cmp	r3, #0
 800336e:	d003      	beq.n	8003378 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8003370:	6878      	ldr	r0, [r7, #4]
 8003372:	f000 f8b7 	bl	80034e4 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8003376:	e039      	b.n	80033ec <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003378:	7bfb      	ldrb	r3, [r7, #15]
 800337a:	2b2a      	cmp	r3, #42	; 0x2a
 800337c:	d109      	bne.n	8003392 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2200      	movs	r2, #0
 8003382:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2228      	movs	r2, #40	; 0x28
 8003388:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800338c:	6878      	ldr	r0, [r7, #4]
 800338e:	f7fd fde7 	bl	8000f60 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003398:	b2db      	uxtb	r3, r3
 800339a:	2b28      	cmp	r3, #40	; 0x28
 800339c:	d111      	bne.n	80033c2 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	4a15      	ldr	r2, [pc, #84]	; (80033f8 <I2C_Slave_STOPF+0x25c>)
 80033a2:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2200      	movs	r2, #0
 80033a8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2220      	movs	r2, #32
 80033ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2200      	movs	r2, #0
 80033b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80033ba:	6878      	ldr	r0, [r7, #4]
 80033bc:	f7ff f824 	bl	8002408 <HAL_I2C_ListenCpltCallback>
}
 80033c0:	e014      	b.n	80033ec <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033c6:	2b22      	cmp	r3, #34	; 0x22
 80033c8:	d002      	beq.n	80033d0 <I2C_Slave_STOPF+0x234>
 80033ca:	7bfb      	ldrb	r3, [r7, #15]
 80033cc:	2b22      	cmp	r3, #34	; 0x22
 80033ce:	d10d      	bne.n	80033ec <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2200      	movs	r2, #0
 80033d4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2220      	movs	r2, #32
 80033da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2200      	movs	r2, #0
 80033e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80033e6:	6878      	ldr	r0, [r7, #4]
 80033e8:	f7fd fdba 	bl	8000f60 <HAL_I2C_SlaveRxCpltCallback>
}
 80033ec:	bf00      	nop
 80033ee:	3710      	adds	r7, #16
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bd80      	pop	{r7, pc}
 80033f4:	08003749 	.word	0x08003749
 80033f8:	ffff0000 	.word	0xffff0000

080033fc <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b084      	sub	sp, #16
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800340a:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003410:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8003412:	68bb      	ldr	r3, [r7, #8]
 8003414:	2b08      	cmp	r3, #8
 8003416:	d002      	beq.n	800341e <I2C_Slave_AF+0x22>
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	2b20      	cmp	r3, #32
 800341c:	d129      	bne.n	8003472 <I2C_Slave_AF+0x76>
 800341e:	7bfb      	ldrb	r3, [r7, #15]
 8003420:	2b28      	cmp	r3, #40	; 0x28
 8003422:	d126      	bne.n	8003472 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	4a2e      	ldr	r2, [pc, #184]	; (80034e0 <I2C_Slave_AF+0xe4>)
 8003428:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	685a      	ldr	r2, [r3, #4]
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003438:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003442:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	681a      	ldr	r2, [r3, #0]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003452:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2200      	movs	r2, #0
 8003458:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2220      	movs	r2, #32
 800345e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2200      	movs	r2, #0
 8003466:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800346a:	6878      	ldr	r0, [r7, #4]
 800346c:	f7fe ffcc 	bl	8002408 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8003470:	e031      	b.n	80034d6 <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003472:	7bfb      	ldrb	r3, [r7, #15]
 8003474:	2b21      	cmp	r3, #33	; 0x21
 8003476:	d129      	bne.n	80034cc <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	4a19      	ldr	r2, [pc, #100]	; (80034e0 <I2C_Slave_AF+0xe4>)
 800347c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2221      	movs	r2, #33	; 0x21
 8003482:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2220      	movs	r2, #32
 8003488:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2200      	movs	r2, #0
 8003490:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	685a      	ldr	r2, [r3, #4]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80034a2:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80034ac:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	681a      	ldr	r2, [r3, #0]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034bc:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 80034be:	6878      	ldr	r0, [r7, #4]
 80034c0:	f7fe fc64 	bl	8001d8c <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80034c4:	6878      	ldr	r0, [r7, #4]
 80034c6:	f7fe ff96 	bl	80023f6 <HAL_I2C_SlaveTxCpltCallback>
}
 80034ca:	e004      	b.n	80034d6 <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80034d4:	615a      	str	r2, [r3, #20]
}
 80034d6:	bf00      	nop
 80034d8:	3710      	adds	r7, #16
 80034da:	46bd      	mov	sp, r7
 80034dc:	bd80      	pop	{r7, pc}
 80034de:	bf00      	nop
 80034e0:	ffff0000 	.word	0xffff0000

080034e4 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b084      	sub	sp, #16
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034f2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80034fa:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80034fc:	7bbb      	ldrb	r3, [r7, #14]
 80034fe:	2b10      	cmp	r3, #16
 8003500:	d002      	beq.n	8003508 <I2C_ITError+0x24>
 8003502:	7bbb      	ldrb	r3, [r7, #14]
 8003504:	2b40      	cmp	r3, #64	; 0x40
 8003506:	d10a      	bne.n	800351e <I2C_ITError+0x3a>
 8003508:	7bfb      	ldrb	r3, [r7, #15]
 800350a:	2b22      	cmp	r3, #34	; 0x22
 800350c:	d107      	bne.n	800351e <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	681a      	ldr	r2, [r3, #0]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800351c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800351e:	7bfb      	ldrb	r3, [r7, #15]
 8003520:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003524:	2b28      	cmp	r3, #40	; 0x28
 8003526:	d107      	bne.n	8003538 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2200      	movs	r2, #0
 800352c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2228      	movs	r2, #40	; 0x28
 8003532:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003536:	e015      	b.n	8003564 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003542:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003546:	d00a      	beq.n	800355e <I2C_ITError+0x7a>
 8003548:	7bfb      	ldrb	r3, [r7, #15]
 800354a:	2b60      	cmp	r3, #96	; 0x60
 800354c:	d007      	beq.n	800355e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2220      	movs	r2, #32
 8003552:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2200      	movs	r2, #0
 800355a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2200      	movs	r2, #0
 8003562:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800356e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003572:	d162      	bne.n	800363a <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	685a      	ldr	r2, [r3, #4]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003582:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003588:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800358c:	b2db      	uxtb	r3, r3
 800358e:	2b01      	cmp	r3, #1
 8003590:	d020      	beq.n	80035d4 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003596:	4a6a      	ldr	r2, [pc, #424]	; (8003740 <I2C_ITError+0x25c>)
 8003598:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800359e:	4618      	mov	r0, r3
 80035a0:	f7fe f8a6 	bl	80016f0 <HAL_DMA_Abort_IT>
 80035a4:	4603      	mov	r3, r0
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	f000 8089 	beq.w	80036be <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	681a      	ldr	r2, [r3, #0]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f022 0201 	bic.w	r2, r2, #1
 80035ba:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2220      	movs	r2, #32
 80035c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035ca:	687a      	ldr	r2, [r7, #4]
 80035cc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80035ce:	4610      	mov	r0, r2
 80035d0:	4798      	blx	r3
 80035d2:	e074      	b.n	80036be <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035d8:	4a59      	ldr	r2, [pc, #356]	; (8003740 <I2C_ITError+0x25c>)
 80035da:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035e0:	4618      	mov	r0, r3
 80035e2:	f7fe f885 	bl	80016f0 <HAL_DMA_Abort_IT>
 80035e6:	4603      	mov	r3, r0
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d068      	beq.n	80036be <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	695b      	ldr	r3, [r3, #20]
 80035f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035f6:	2b40      	cmp	r3, #64	; 0x40
 80035f8:	d10b      	bne.n	8003612 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	691a      	ldr	r2, [r3, #16]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003604:	b2d2      	uxtb	r2, r2
 8003606:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800360c:	1c5a      	adds	r2, r3, #1
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	681a      	ldr	r2, [r3, #0]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f022 0201 	bic.w	r2, r2, #1
 8003620:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2220      	movs	r2, #32
 8003626:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800362e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003630:	687a      	ldr	r2, [r7, #4]
 8003632:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003634:	4610      	mov	r0, r2
 8003636:	4798      	blx	r3
 8003638:	e041      	b.n	80036be <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003640:	b2db      	uxtb	r3, r3
 8003642:	2b60      	cmp	r3, #96	; 0x60
 8003644:	d125      	bne.n	8003692 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2220      	movs	r2, #32
 800364a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2200      	movs	r2, #0
 8003652:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	695b      	ldr	r3, [r3, #20]
 800365a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800365e:	2b40      	cmp	r3, #64	; 0x40
 8003660:	d10b      	bne.n	800367a <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	691a      	ldr	r2, [r3, #16]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800366c:	b2d2      	uxtb	r2, r2
 800366e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003674:	1c5a      	adds	r2, r3, #1
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	681a      	ldr	r2, [r3, #0]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f022 0201 	bic.w	r2, r2, #1
 8003688:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800368a:	6878      	ldr	r0, [r7, #4]
 800368c:	f7fe fee0 	bl	8002450 <HAL_I2C_AbortCpltCallback>
 8003690:	e015      	b.n	80036be <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	695b      	ldr	r3, [r3, #20]
 8003698:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800369c:	2b40      	cmp	r3, #64	; 0x40
 800369e:	d10b      	bne.n	80036b8 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	691a      	ldr	r2, [r3, #16]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036aa:	b2d2      	uxtb	r2, r2
 80036ac:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b2:	1c5a      	adds	r2, r3, #1
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80036b8:	6878      	ldr	r0, [r7, #4]
 80036ba:	f7fe fec0 	bl	800243e <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c2:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	f003 0301 	and.w	r3, r3, #1
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d10e      	bne.n	80036ec <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80036ce:	68bb      	ldr	r3, [r7, #8]
 80036d0:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d109      	bne.n	80036ec <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80036d8:	68bb      	ldr	r3, [r7, #8]
 80036da:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d104      	bne.n	80036ec <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80036e2:	68bb      	ldr	r3, [r7, #8]
 80036e4:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d007      	beq.n	80036fc <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	685a      	ldr	r2, [r3, #4]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80036fa:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003702:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003708:	f003 0304 	and.w	r3, r3, #4
 800370c:	2b04      	cmp	r3, #4
 800370e:	d113      	bne.n	8003738 <I2C_ITError+0x254>
 8003710:	7bfb      	ldrb	r3, [r7, #15]
 8003712:	2b28      	cmp	r3, #40	; 0x28
 8003714:	d110      	bne.n	8003738 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	4a0a      	ldr	r2, [pc, #40]	; (8003744 <I2C_ITError+0x260>)
 800371a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2200      	movs	r2, #0
 8003720:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2220      	movs	r2, #32
 8003726:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2200      	movs	r2, #0
 800372e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003732:	6878      	ldr	r0, [r7, #4]
 8003734:	f7fe fe68 	bl	8002408 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003738:	bf00      	nop
 800373a:	3710      	adds	r7, #16
 800373c:	46bd      	mov	sp, r7
 800373e:	bd80      	pop	{r7, pc}
 8003740:	08003749 	.word	0x08003749
 8003744:	ffff0000 	.word	0xffff0000

08003748 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b086      	sub	sp, #24
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003750:	2300      	movs	r3, #0
 8003752:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003758:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800375a:	697b      	ldr	r3, [r7, #20]
 800375c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003760:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003762:	4b4b      	ldr	r3, [pc, #300]	; (8003890 <I2C_DMAAbort+0x148>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	08db      	lsrs	r3, r3, #3
 8003768:	4a4a      	ldr	r2, [pc, #296]	; (8003894 <I2C_DMAAbort+0x14c>)
 800376a:	fba2 2303 	umull	r2, r3, r2, r3
 800376e:	0a1a      	lsrs	r2, r3, #8
 8003770:	4613      	mov	r3, r2
 8003772:	009b      	lsls	r3, r3, #2
 8003774:	4413      	add	r3, r2
 8003776:	00da      	lsls	r2, r3, #3
 8003778:	1ad3      	subs	r3, r2, r3
 800377a:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d106      	bne.n	8003790 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003782:	697b      	ldr	r3, [r7, #20]
 8003784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003786:	f043 0220 	orr.w	r2, r3, #32
 800378a:	697b      	ldr	r3, [r7, #20]
 800378c:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800378e:	e00a      	b.n	80037a6 <I2C_DMAAbort+0x5e>
    }
    count--;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	3b01      	subs	r3, #1
 8003794:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003796:	697b      	ldr	r3, [r7, #20]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037a4:	d0ea      	beq.n	800377c <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80037a6:	697b      	ldr	r3, [r7, #20]
 80037a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d003      	beq.n	80037b6 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80037ae:	697b      	ldr	r3, [r7, #20]
 80037b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037b2:	2200      	movs	r2, #0
 80037b4:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 80037b6:	697b      	ldr	r3, [r7, #20]
 80037b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d003      	beq.n	80037c6 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80037be:	697b      	ldr	r3, [r7, #20]
 80037c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037c2:	2200      	movs	r2, #0
 80037c4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037c6:	697b      	ldr	r3, [r7, #20]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	681a      	ldr	r2, [r3, #0]
 80037cc:	697b      	ldr	r3, [r7, #20]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037d4:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80037d6:	697b      	ldr	r3, [r7, #20]
 80037d8:	2200      	movs	r2, #0
 80037da:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80037dc:	697b      	ldr	r3, [r7, #20]
 80037de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d003      	beq.n	80037ec <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80037e4:	697b      	ldr	r3, [r7, #20]
 80037e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037e8:	2200      	movs	r2, #0
 80037ea:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d003      	beq.n	80037fc <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80037f4:	697b      	ldr	r3, [r7, #20]
 80037f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037f8:	2200      	movs	r2, #0
 80037fa:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80037fc:	697b      	ldr	r3, [r7, #20]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	681a      	ldr	r2, [r3, #0]
 8003802:	697b      	ldr	r3, [r7, #20]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f022 0201 	bic.w	r2, r2, #1
 800380a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800380c:	697b      	ldr	r3, [r7, #20]
 800380e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003812:	b2db      	uxtb	r3, r3
 8003814:	2b60      	cmp	r3, #96	; 0x60
 8003816:	d10e      	bne.n	8003836 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8003818:	697b      	ldr	r3, [r7, #20]
 800381a:	2220      	movs	r2, #32
 800381c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003820:	697b      	ldr	r3, [r7, #20]
 8003822:	2200      	movs	r2, #0
 8003824:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	2200      	movs	r2, #0
 800382c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800382e:	6978      	ldr	r0, [r7, #20]
 8003830:	f7fe fe0e 	bl	8002450 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003834:	e027      	b.n	8003886 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003836:	7cfb      	ldrb	r3, [r7, #19]
 8003838:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800383c:	2b28      	cmp	r3, #40	; 0x28
 800383e:	d117      	bne.n	8003870 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8003840:	697b      	ldr	r3, [r7, #20]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	681a      	ldr	r2, [r3, #0]
 8003846:	697b      	ldr	r3, [r7, #20]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f042 0201 	orr.w	r2, r2, #1
 800384e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	681a      	ldr	r2, [r3, #0]
 8003856:	697b      	ldr	r3, [r7, #20]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800385e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	2200      	movs	r2, #0
 8003864:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003866:	697b      	ldr	r3, [r7, #20]
 8003868:	2228      	movs	r2, #40	; 0x28
 800386a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800386e:	e007      	b.n	8003880 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8003870:	697b      	ldr	r3, [r7, #20]
 8003872:	2220      	movs	r2, #32
 8003874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003878:	697b      	ldr	r3, [r7, #20]
 800387a:	2200      	movs	r2, #0
 800387c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8003880:	6978      	ldr	r0, [r7, #20]
 8003882:	f7fe fddc 	bl	800243e <HAL_I2C_ErrorCallback>
}
 8003886:	bf00      	nop
 8003888:	3718      	adds	r7, #24
 800388a:	46bd      	mov	sp, r7
 800388c:	bd80      	pop	{r7, pc}
 800388e:	bf00      	nop
 8003890:	20000000 	.word	0x20000000
 8003894:	14f8b589 	.word	0x14f8b589

08003898 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8003898:	b480      	push	{r7}
 800389a:	b085      	sub	sp, #20
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80038a0:	2300      	movs	r3, #0
 80038a2:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80038a4:	4b13      	ldr	r3, [pc, #76]	; (80038f4 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	08db      	lsrs	r3, r3, #3
 80038aa:	4a13      	ldr	r2, [pc, #76]	; (80038f8 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80038ac:	fba2 2303 	umull	r2, r3, r2, r3
 80038b0:	0a1a      	lsrs	r2, r3, #8
 80038b2:	4613      	mov	r3, r2
 80038b4:	009b      	lsls	r3, r3, #2
 80038b6:	4413      	add	r3, r2
 80038b8:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	3b01      	subs	r3, #1
 80038be:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d107      	bne.n	80038d6 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ca:	f043 0220 	orr.w	r2, r3, #32
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80038d2:	2301      	movs	r3, #1
 80038d4:	e008      	b.n	80038e8 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80038e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038e4:	d0e9      	beq.n	80038ba <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80038e6:	2300      	movs	r3, #0
}
 80038e8:	4618      	mov	r0, r3
 80038ea:	3714      	adds	r7, #20
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bc80      	pop	{r7}
 80038f0:	4770      	bx	lr
 80038f2:	bf00      	nop
 80038f4:	20000000 	.word	0x20000000
 80038f8:	14f8b589 	.word	0x14f8b589

080038fc <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80038fc:	b480      	push	{r7}
 80038fe:	b083      	sub	sp, #12
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003908:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800390c:	d103      	bne.n	8003916 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2201      	movs	r2, #1
 8003912:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8003914:	e007      	b.n	8003926 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800391a:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800391e:	d102      	bne.n	8003926 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2208      	movs	r2, #8
 8003924:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8003926:	bf00      	nop
 8003928:	370c      	adds	r7, #12
 800392a:	46bd      	mov	sp, r7
 800392c:	bc80      	pop	{r7}
 800392e:	4770      	bx	lr

08003930 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b086      	sub	sp, #24
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d101      	bne.n	8003942 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800393e:	2301      	movs	r3, #1
 8003940:	e272      	b.n	8003e28 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f003 0301 	and.w	r3, r3, #1
 800394a:	2b00      	cmp	r3, #0
 800394c:	f000 8087 	beq.w	8003a5e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003950:	4b92      	ldr	r3, [pc, #584]	; (8003b9c <HAL_RCC_OscConfig+0x26c>)
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	f003 030c 	and.w	r3, r3, #12
 8003958:	2b04      	cmp	r3, #4
 800395a:	d00c      	beq.n	8003976 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800395c:	4b8f      	ldr	r3, [pc, #572]	; (8003b9c <HAL_RCC_OscConfig+0x26c>)
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	f003 030c 	and.w	r3, r3, #12
 8003964:	2b08      	cmp	r3, #8
 8003966:	d112      	bne.n	800398e <HAL_RCC_OscConfig+0x5e>
 8003968:	4b8c      	ldr	r3, [pc, #560]	; (8003b9c <HAL_RCC_OscConfig+0x26c>)
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003970:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003974:	d10b      	bne.n	800398e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003976:	4b89      	ldr	r3, [pc, #548]	; (8003b9c <HAL_RCC_OscConfig+0x26c>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800397e:	2b00      	cmp	r3, #0
 8003980:	d06c      	beq.n	8003a5c <HAL_RCC_OscConfig+0x12c>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d168      	bne.n	8003a5c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800398a:	2301      	movs	r3, #1
 800398c:	e24c      	b.n	8003e28 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	685b      	ldr	r3, [r3, #4]
 8003992:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003996:	d106      	bne.n	80039a6 <HAL_RCC_OscConfig+0x76>
 8003998:	4b80      	ldr	r3, [pc, #512]	; (8003b9c <HAL_RCC_OscConfig+0x26c>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a7f      	ldr	r2, [pc, #508]	; (8003b9c <HAL_RCC_OscConfig+0x26c>)
 800399e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039a2:	6013      	str	r3, [r2, #0]
 80039a4:	e02e      	b.n	8003a04 <HAL_RCC_OscConfig+0xd4>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d10c      	bne.n	80039c8 <HAL_RCC_OscConfig+0x98>
 80039ae:	4b7b      	ldr	r3, [pc, #492]	; (8003b9c <HAL_RCC_OscConfig+0x26c>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a7a      	ldr	r2, [pc, #488]	; (8003b9c <HAL_RCC_OscConfig+0x26c>)
 80039b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039b8:	6013      	str	r3, [r2, #0]
 80039ba:	4b78      	ldr	r3, [pc, #480]	; (8003b9c <HAL_RCC_OscConfig+0x26c>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a77      	ldr	r2, [pc, #476]	; (8003b9c <HAL_RCC_OscConfig+0x26c>)
 80039c0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80039c4:	6013      	str	r3, [r2, #0]
 80039c6:	e01d      	b.n	8003a04 <HAL_RCC_OscConfig+0xd4>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80039d0:	d10c      	bne.n	80039ec <HAL_RCC_OscConfig+0xbc>
 80039d2:	4b72      	ldr	r3, [pc, #456]	; (8003b9c <HAL_RCC_OscConfig+0x26c>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a71      	ldr	r2, [pc, #452]	; (8003b9c <HAL_RCC_OscConfig+0x26c>)
 80039d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80039dc:	6013      	str	r3, [r2, #0]
 80039de:	4b6f      	ldr	r3, [pc, #444]	; (8003b9c <HAL_RCC_OscConfig+0x26c>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a6e      	ldr	r2, [pc, #440]	; (8003b9c <HAL_RCC_OscConfig+0x26c>)
 80039e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039e8:	6013      	str	r3, [r2, #0]
 80039ea:	e00b      	b.n	8003a04 <HAL_RCC_OscConfig+0xd4>
 80039ec:	4b6b      	ldr	r3, [pc, #428]	; (8003b9c <HAL_RCC_OscConfig+0x26c>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a6a      	ldr	r2, [pc, #424]	; (8003b9c <HAL_RCC_OscConfig+0x26c>)
 80039f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039f6:	6013      	str	r3, [r2, #0]
 80039f8:	4b68      	ldr	r3, [pc, #416]	; (8003b9c <HAL_RCC_OscConfig+0x26c>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a67      	ldr	r2, [pc, #412]	; (8003b9c <HAL_RCC_OscConfig+0x26c>)
 80039fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a02:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d013      	beq.n	8003a34 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a0c:	f7fd fd58 	bl	80014c0 <HAL_GetTick>
 8003a10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a12:	e008      	b.n	8003a26 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a14:	f7fd fd54 	bl	80014c0 <HAL_GetTick>
 8003a18:	4602      	mov	r2, r0
 8003a1a:	693b      	ldr	r3, [r7, #16]
 8003a1c:	1ad3      	subs	r3, r2, r3
 8003a1e:	2b64      	cmp	r3, #100	; 0x64
 8003a20:	d901      	bls.n	8003a26 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003a22:	2303      	movs	r3, #3
 8003a24:	e200      	b.n	8003e28 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a26:	4b5d      	ldr	r3, [pc, #372]	; (8003b9c <HAL_RCC_OscConfig+0x26c>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d0f0      	beq.n	8003a14 <HAL_RCC_OscConfig+0xe4>
 8003a32:	e014      	b.n	8003a5e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a34:	f7fd fd44 	bl	80014c0 <HAL_GetTick>
 8003a38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a3a:	e008      	b.n	8003a4e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a3c:	f7fd fd40 	bl	80014c0 <HAL_GetTick>
 8003a40:	4602      	mov	r2, r0
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	1ad3      	subs	r3, r2, r3
 8003a46:	2b64      	cmp	r3, #100	; 0x64
 8003a48:	d901      	bls.n	8003a4e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003a4a:	2303      	movs	r3, #3
 8003a4c:	e1ec      	b.n	8003e28 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a4e:	4b53      	ldr	r3, [pc, #332]	; (8003b9c <HAL_RCC_OscConfig+0x26c>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d1f0      	bne.n	8003a3c <HAL_RCC_OscConfig+0x10c>
 8003a5a:	e000      	b.n	8003a5e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f003 0302 	and.w	r3, r3, #2
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d063      	beq.n	8003b32 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003a6a:	4b4c      	ldr	r3, [pc, #304]	; (8003b9c <HAL_RCC_OscConfig+0x26c>)
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	f003 030c 	and.w	r3, r3, #12
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d00b      	beq.n	8003a8e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003a76:	4b49      	ldr	r3, [pc, #292]	; (8003b9c <HAL_RCC_OscConfig+0x26c>)
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	f003 030c 	and.w	r3, r3, #12
 8003a7e:	2b08      	cmp	r3, #8
 8003a80:	d11c      	bne.n	8003abc <HAL_RCC_OscConfig+0x18c>
 8003a82:	4b46      	ldr	r3, [pc, #280]	; (8003b9c <HAL_RCC_OscConfig+0x26c>)
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d116      	bne.n	8003abc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a8e:	4b43      	ldr	r3, [pc, #268]	; (8003b9c <HAL_RCC_OscConfig+0x26c>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f003 0302 	and.w	r3, r3, #2
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d005      	beq.n	8003aa6 <HAL_RCC_OscConfig+0x176>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	691b      	ldr	r3, [r3, #16]
 8003a9e:	2b01      	cmp	r3, #1
 8003aa0:	d001      	beq.n	8003aa6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	e1c0      	b.n	8003e28 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003aa6:	4b3d      	ldr	r3, [pc, #244]	; (8003b9c <HAL_RCC_OscConfig+0x26c>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	695b      	ldr	r3, [r3, #20]
 8003ab2:	00db      	lsls	r3, r3, #3
 8003ab4:	4939      	ldr	r1, [pc, #228]	; (8003b9c <HAL_RCC_OscConfig+0x26c>)
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003aba:	e03a      	b.n	8003b32 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	691b      	ldr	r3, [r3, #16]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d020      	beq.n	8003b06 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ac4:	4b36      	ldr	r3, [pc, #216]	; (8003ba0 <HAL_RCC_OscConfig+0x270>)
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003aca:	f7fd fcf9 	bl	80014c0 <HAL_GetTick>
 8003ace:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ad0:	e008      	b.n	8003ae4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ad2:	f7fd fcf5 	bl	80014c0 <HAL_GetTick>
 8003ad6:	4602      	mov	r2, r0
 8003ad8:	693b      	ldr	r3, [r7, #16]
 8003ada:	1ad3      	subs	r3, r2, r3
 8003adc:	2b02      	cmp	r3, #2
 8003ade:	d901      	bls.n	8003ae4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003ae0:	2303      	movs	r3, #3
 8003ae2:	e1a1      	b.n	8003e28 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ae4:	4b2d      	ldr	r3, [pc, #180]	; (8003b9c <HAL_RCC_OscConfig+0x26c>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f003 0302 	and.w	r3, r3, #2
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d0f0      	beq.n	8003ad2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003af0:	4b2a      	ldr	r3, [pc, #168]	; (8003b9c <HAL_RCC_OscConfig+0x26c>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	695b      	ldr	r3, [r3, #20]
 8003afc:	00db      	lsls	r3, r3, #3
 8003afe:	4927      	ldr	r1, [pc, #156]	; (8003b9c <HAL_RCC_OscConfig+0x26c>)
 8003b00:	4313      	orrs	r3, r2
 8003b02:	600b      	str	r3, [r1, #0]
 8003b04:	e015      	b.n	8003b32 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b06:	4b26      	ldr	r3, [pc, #152]	; (8003ba0 <HAL_RCC_OscConfig+0x270>)
 8003b08:	2200      	movs	r2, #0
 8003b0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b0c:	f7fd fcd8 	bl	80014c0 <HAL_GetTick>
 8003b10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b12:	e008      	b.n	8003b26 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b14:	f7fd fcd4 	bl	80014c0 <HAL_GetTick>
 8003b18:	4602      	mov	r2, r0
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	1ad3      	subs	r3, r2, r3
 8003b1e:	2b02      	cmp	r3, #2
 8003b20:	d901      	bls.n	8003b26 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003b22:	2303      	movs	r3, #3
 8003b24:	e180      	b.n	8003e28 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b26:	4b1d      	ldr	r3, [pc, #116]	; (8003b9c <HAL_RCC_OscConfig+0x26c>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f003 0302 	and.w	r3, r3, #2
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d1f0      	bne.n	8003b14 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f003 0308 	and.w	r3, r3, #8
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d03a      	beq.n	8003bb4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	699b      	ldr	r3, [r3, #24]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d019      	beq.n	8003b7a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b46:	4b17      	ldr	r3, [pc, #92]	; (8003ba4 <HAL_RCC_OscConfig+0x274>)
 8003b48:	2201      	movs	r2, #1
 8003b4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b4c:	f7fd fcb8 	bl	80014c0 <HAL_GetTick>
 8003b50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b52:	e008      	b.n	8003b66 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b54:	f7fd fcb4 	bl	80014c0 <HAL_GetTick>
 8003b58:	4602      	mov	r2, r0
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	1ad3      	subs	r3, r2, r3
 8003b5e:	2b02      	cmp	r3, #2
 8003b60:	d901      	bls.n	8003b66 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003b62:	2303      	movs	r3, #3
 8003b64:	e160      	b.n	8003e28 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b66:	4b0d      	ldr	r3, [pc, #52]	; (8003b9c <HAL_RCC_OscConfig+0x26c>)
 8003b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b6a:	f003 0302 	and.w	r3, r3, #2
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d0f0      	beq.n	8003b54 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003b72:	2001      	movs	r0, #1
 8003b74:	f000 faba 	bl	80040ec <RCC_Delay>
 8003b78:	e01c      	b.n	8003bb4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b7a:	4b0a      	ldr	r3, [pc, #40]	; (8003ba4 <HAL_RCC_OscConfig+0x274>)
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b80:	f7fd fc9e 	bl	80014c0 <HAL_GetTick>
 8003b84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b86:	e00f      	b.n	8003ba8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b88:	f7fd fc9a 	bl	80014c0 <HAL_GetTick>
 8003b8c:	4602      	mov	r2, r0
 8003b8e:	693b      	ldr	r3, [r7, #16]
 8003b90:	1ad3      	subs	r3, r2, r3
 8003b92:	2b02      	cmp	r3, #2
 8003b94:	d908      	bls.n	8003ba8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003b96:	2303      	movs	r3, #3
 8003b98:	e146      	b.n	8003e28 <HAL_RCC_OscConfig+0x4f8>
 8003b9a:	bf00      	nop
 8003b9c:	40021000 	.word	0x40021000
 8003ba0:	42420000 	.word	0x42420000
 8003ba4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ba8:	4b92      	ldr	r3, [pc, #584]	; (8003df4 <HAL_RCC_OscConfig+0x4c4>)
 8003baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bac:	f003 0302 	and.w	r3, r3, #2
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d1e9      	bne.n	8003b88 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f003 0304 	and.w	r3, r3, #4
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	f000 80a6 	beq.w	8003d0e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003bc6:	4b8b      	ldr	r3, [pc, #556]	; (8003df4 <HAL_RCC_OscConfig+0x4c4>)
 8003bc8:	69db      	ldr	r3, [r3, #28]
 8003bca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d10d      	bne.n	8003bee <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bd2:	4b88      	ldr	r3, [pc, #544]	; (8003df4 <HAL_RCC_OscConfig+0x4c4>)
 8003bd4:	69db      	ldr	r3, [r3, #28]
 8003bd6:	4a87      	ldr	r2, [pc, #540]	; (8003df4 <HAL_RCC_OscConfig+0x4c4>)
 8003bd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bdc:	61d3      	str	r3, [r2, #28]
 8003bde:	4b85      	ldr	r3, [pc, #532]	; (8003df4 <HAL_RCC_OscConfig+0x4c4>)
 8003be0:	69db      	ldr	r3, [r3, #28]
 8003be2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003be6:	60bb      	str	r3, [r7, #8]
 8003be8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003bea:	2301      	movs	r3, #1
 8003bec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bee:	4b82      	ldr	r3, [pc, #520]	; (8003df8 <HAL_RCC_OscConfig+0x4c8>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d118      	bne.n	8003c2c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003bfa:	4b7f      	ldr	r3, [pc, #508]	; (8003df8 <HAL_RCC_OscConfig+0x4c8>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a7e      	ldr	r2, [pc, #504]	; (8003df8 <HAL_RCC_OscConfig+0x4c8>)
 8003c00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c04:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c06:	f7fd fc5b 	bl	80014c0 <HAL_GetTick>
 8003c0a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c0c:	e008      	b.n	8003c20 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c0e:	f7fd fc57 	bl	80014c0 <HAL_GetTick>
 8003c12:	4602      	mov	r2, r0
 8003c14:	693b      	ldr	r3, [r7, #16]
 8003c16:	1ad3      	subs	r3, r2, r3
 8003c18:	2b64      	cmp	r3, #100	; 0x64
 8003c1a:	d901      	bls.n	8003c20 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003c1c:	2303      	movs	r3, #3
 8003c1e:	e103      	b.n	8003e28 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c20:	4b75      	ldr	r3, [pc, #468]	; (8003df8 <HAL_RCC_OscConfig+0x4c8>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d0f0      	beq.n	8003c0e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	68db      	ldr	r3, [r3, #12]
 8003c30:	2b01      	cmp	r3, #1
 8003c32:	d106      	bne.n	8003c42 <HAL_RCC_OscConfig+0x312>
 8003c34:	4b6f      	ldr	r3, [pc, #444]	; (8003df4 <HAL_RCC_OscConfig+0x4c4>)
 8003c36:	6a1b      	ldr	r3, [r3, #32]
 8003c38:	4a6e      	ldr	r2, [pc, #440]	; (8003df4 <HAL_RCC_OscConfig+0x4c4>)
 8003c3a:	f043 0301 	orr.w	r3, r3, #1
 8003c3e:	6213      	str	r3, [r2, #32]
 8003c40:	e02d      	b.n	8003c9e <HAL_RCC_OscConfig+0x36e>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	68db      	ldr	r3, [r3, #12]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d10c      	bne.n	8003c64 <HAL_RCC_OscConfig+0x334>
 8003c4a:	4b6a      	ldr	r3, [pc, #424]	; (8003df4 <HAL_RCC_OscConfig+0x4c4>)
 8003c4c:	6a1b      	ldr	r3, [r3, #32]
 8003c4e:	4a69      	ldr	r2, [pc, #420]	; (8003df4 <HAL_RCC_OscConfig+0x4c4>)
 8003c50:	f023 0301 	bic.w	r3, r3, #1
 8003c54:	6213      	str	r3, [r2, #32]
 8003c56:	4b67      	ldr	r3, [pc, #412]	; (8003df4 <HAL_RCC_OscConfig+0x4c4>)
 8003c58:	6a1b      	ldr	r3, [r3, #32]
 8003c5a:	4a66      	ldr	r2, [pc, #408]	; (8003df4 <HAL_RCC_OscConfig+0x4c4>)
 8003c5c:	f023 0304 	bic.w	r3, r3, #4
 8003c60:	6213      	str	r3, [r2, #32]
 8003c62:	e01c      	b.n	8003c9e <HAL_RCC_OscConfig+0x36e>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	68db      	ldr	r3, [r3, #12]
 8003c68:	2b05      	cmp	r3, #5
 8003c6a:	d10c      	bne.n	8003c86 <HAL_RCC_OscConfig+0x356>
 8003c6c:	4b61      	ldr	r3, [pc, #388]	; (8003df4 <HAL_RCC_OscConfig+0x4c4>)
 8003c6e:	6a1b      	ldr	r3, [r3, #32]
 8003c70:	4a60      	ldr	r2, [pc, #384]	; (8003df4 <HAL_RCC_OscConfig+0x4c4>)
 8003c72:	f043 0304 	orr.w	r3, r3, #4
 8003c76:	6213      	str	r3, [r2, #32]
 8003c78:	4b5e      	ldr	r3, [pc, #376]	; (8003df4 <HAL_RCC_OscConfig+0x4c4>)
 8003c7a:	6a1b      	ldr	r3, [r3, #32]
 8003c7c:	4a5d      	ldr	r2, [pc, #372]	; (8003df4 <HAL_RCC_OscConfig+0x4c4>)
 8003c7e:	f043 0301 	orr.w	r3, r3, #1
 8003c82:	6213      	str	r3, [r2, #32]
 8003c84:	e00b      	b.n	8003c9e <HAL_RCC_OscConfig+0x36e>
 8003c86:	4b5b      	ldr	r3, [pc, #364]	; (8003df4 <HAL_RCC_OscConfig+0x4c4>)
 8003c88:	6a1b      	ldr	r3, [r3, #32]
 8003c8a:	4a5a      	ldr	r2, [pc, #360]	; (8003df4 <HAL_RCC_OscConfig+0x4c4>)
 8003c8c:	f023 0301 	bic.w	r3, r3, #1
 8003c90:	6213      	str	r3, [r2, #32]
 8003c92:	4b58      	ldr	r3, [pc, #352]	; (8003df4 <HAL_RCC_OscConfig+0x4c4>)
 8003c94:	6a1b      	ldr	r3, [r3, #32]
 8003c96:	4a57      	ldr	r2, [pc, #348]	; (8003df4 <HAL_RCC_OscConfig+0x4c4>)
 8003c98:	f023 0304 	bic.w	r3, r3, #4
 8003c9c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	68db      	ldr	r3, [r3, #12]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d015      	beq.n	8003cd2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ca6:	f7fd fc0b 	bl	80014c0 <HAL_GetTick>
 8003caa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cac:	e00a      	b.n	8003cc4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cae:	f7fd fc07 	bl	80014c0 <HAL_GetTick>
 8003cb2:	4602      	mov	r2, r0
 8003cb4:	693b      	ldr	r3, [r7, #16]
 8003cb6:	1ad3      	subs	r3, r2, r3
 8003cb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d901      	bls.n	8003cc4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003cc0:	2303      	movs	r3, #3
 8003cc2:	e0b1      	b.n	8003e28 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cc4:	4b4b      	ldr	r3, [pc, #300]	; (8003df4 <HAL_RCC_OscConfig+0x4c4>)
 8003cc6:	6a1b      	ldr	r3, [r3, #32]
 8003cc8:	f003 0302 	and.w	r3, r3, #2
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d0ee      	beq.n	8003cae <HAL_RCC_OscConfig+0x37e>
 8003cd0:	e014      	b.n	8003cfc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cd2:	f7fd fbf5 	bl	80014c0 <HAL_GetTick>
 8003cd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cd8:	e00a      	b.n	8003cf0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cda:	f7fd fbf1 	bl	80014c0 <HAL_GetTick>
 8003cde:	4602      	mov	r2, r0
 8003ce0:	693b      	ldr	r3, [r7, #16]
 8003ce2:	1ad3      	subs	r3, r2, r3
 8003ce4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d901      	bls.n	8003cf0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003cec:	2303      	movs	r3, #3
 8003cee:	e09b      	b.n	8003e28 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cf0:	4b40      	ldr	r3, [pc, #256]	; (8003df4 <HAL_RCC_OscConfig+0x4c4>)
 8003cf2:	6a1b      	ldr	r3, [r3, #32]
 8003cf4:	f003 0302 	and.w	r3, r3, #2
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d1ee      	bne.n	8003cda <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003cfc:	7dfb      	ldrb	r3, [r7, #23]
 8003cfe:	2b01      	cmp	r3, #1
 8003d00:	d105      	bne.n	8003d0e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d02:	4b3c      	ldr	r3, [pc, #240]	; (8003df4 <HAL_RCC_OscConfig+0x4c4>)
 8003d04:	69db      	ldr	r3, [r3, #28]
 8003d06:	4a3b      	ldr	r2, [pc, #236]	; (8003df4 <HAL_RCC_OscConfig+0x4c4>)
 8003d08:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d0c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	69db      	ldr	r3, [r3, #28]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	f000 8087 	beq.w	8003e26 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003d18:	4b36      	ldr	r3, [pc, #216]	; (8003df4 <HAL_RCC_OscConfig+0x4c4>)
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	f003 030c 	and.w	r3, r3, #12
 8003d20:	2b08      	cmp	r3, #8
 8003d22:	d061      	beq.n	8003de8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	69db      	ldr	r3, [r3, #28]
 8003d28:	2b02      	cmp	r3, #2
 8003d2a:	d146      	bne.n	8003dba <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d2c:	4b33      	ldr	r3, [pc, #204]	; (8003dfc <HAL_RCC_OscConfig+0x4cc>)
 8003d2e:	2200      	movs	r2, #0
 8003d30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d32:	f7fd fbc5 	bl	80014c0 <HAL_GetTick>
 8003d36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d38:	e008      	b.n	8003d4c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d3a:	f7fd fbc1 	bl	80014c0 <HAL_GetTick>
 8003d3e:	4602      	mov	r2, r0
 8003d40:	693b      	ldr	r3, [r7, #16]
 8003d42:	1ad3      	subs	r3, r2, r3
 8003d44:	2b02      	cmp	r3, #2
 8003d46:	d901      	bls.n	8003d4c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003d48:	2303      	movs	r3, #3
 8003d4a:	e06d      	b.n	8003e28 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d4c:	4b29      	ldr	r3, [pc, #164]	; (8003df4 <HAL_RCC_OscConfig+0x4c4>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d1f0      	bne.n	8003d3a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6a1b      	ldr	r3, [r3, #32]
 8003d5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d60:	d108      	bne.n	8003d74 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003d62:	4b24      	ldr	r3, [pc, #144]	; (8003df4 <HAL_RCC_OscConfig+0x4c4>)
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	689b      	ldr	r3, [r3, #8]
 8003d6e:	4921      	ldr	r1, [pc, #132]	; (8003df4 <HAL_RCC_OscConfig+0x4c4>)
 8003d70:	4313      	orrs	r3, r2
 8003d72:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003d74:	4b1f      	ldr	r3, [pc, #124]	; (8003df4 <HAL_RCC_OscConfig+0x4c4>)
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6a19      	ldr	r1, [r3, #32]
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d84:	430b      	orrs	r3, r1
 8003d86:	491b      	ldr	r1, [pc, #108]	; (8003df4 <HAL_RCC_OscConfig+0x4c4>)
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d8c:	4b1b      	ldr	r3, [pc, #108]	; (8003dfc <HAL_RCC_OscConfig+0x4cc>)
 8003d8e:	2201      	movs	r2, #1
 8003d90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d92:	f7fd fb95 	bl	80014c0 <HAL_GetTick>
 8003d96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003d98:	e008      	b.n	8003dac <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d9a:	f7fd fb91 	bl	80014c0 <HAL_GetTick>
 8003d9e:	4602      	mov	r2, r0
 8003da0:	693b      	ldr	r3, [r7, #16]
 8003da2:	1ad3      	subs	r3, r2, r3
 8003da4:	2b02      	cmp	r3, #2
 8003da6:	d901      	bls.n	8003dac <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003da8:	2303      	movs	r3, #3
 8003daa:	e03d      	b.n	8003e28 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003dac:	4b11      	ldr	r3, [pc, #68]	; (8003df4 <HAL_RCC_OscConfig+0x4c4>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d0f0      	beq.n	8003d9a <HAL_RCC_OscConfig+0x46a>
 8003db8:	e035      	b.n	8003e26 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dba:	4b10      	ldr	r3, [pc, #64]	; (8003dfc <HAL_RCC_OscConfig+0x4cc>)
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dc0:	f7fd fb7e 	bl	80014c0 <HAL_GetTick>
 8003dc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003dc6:	e008      	b.n	8003dda <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dc8:	f7fd fb7a 	bl	80014c0 <HAL_GetTick>
 8003dcc:	4602      	mov	r2, r0
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	1ad3      	subs	r3, r2, r3
 8003dd2:	2b02      	cmp	r3, #2
 8003dd4:	d901      	bls.n	8003dda <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003dd6:	2303      	movs	r3, #3
 8003dd8:	e026      	b.n	8003e28 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003dda:	4b06      	ldr	r3, [pc, #24]	; (8003df4 <HAL_RCC_OscConfig+0x4c4>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d1f0      	bne.n	8003dc8 <HAL_RCC_OscConfig+0x498>
 8003de6:	e01e      	b.n	8003e26 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	69db      	ldr	r3, [r3, #28]
 8003dec:	2b01      	cmp	r3, #1
 8003dee:	d107      	bne.n	8003e00 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003df0:	2301      	movs	r3, #1
 8003df2:	e019      	b.n	8003e28 <HAL_RCC_OscConfig+0x4f8>
 8003df4:	40021000 	.word	0x40021000
 8003df8:	40007000 	.word	0x40007000
 8003dfc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003e00:	4b0b      	ldr	r3, [pc, #44]	; (8003e30 <HAL_RCC_OscConfig+0x500>)
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6a1b      	ldr	r3, [r3, #32]
 8003e10:	429a      	cmp	r2, r3
 8003e12:	d106      	bne.n	8003e22 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e1e:	429a      	cmp	r2, r3
 8003e20:	d001      	beq.n	8003e26 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003e22:	2301      	movs	r3, #1
 8003e24:	e000      	b.n	8003e28 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003e26:	2300      	movs	r3, #0
}
 8003e28:	4618      	mov	r0, r3
 8003e2a:	3718      	adds	r7, #24
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	bd80      	pop	{r7, pc}
 8003e30:	40021000 	.word	0x40021000

08003e34 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b084      	sub	sp, #16
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
 8003e3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d101      	bne.n	8003e48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e44:	2301      	movs	r3, #1
 8003e46:	e0d0      	b.n	8003fea <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003e48:	4b6a      	ldr	r3, [pc, #424]	; (8003ff4 <HAL_RCC_ClockConfig+0x1c0>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f003 0307 	and.w	r3, r3, #7
 8003e50:	683a      	ldr	r2, [r7, #0]
 8003e52:	429a      	cmp	r2, r3
 8003e54:	d910      	bls.n	8003e78 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e56:	4b67      	ldr	r3, [pc, #412]	; (8003ff4 <HAL_RCC_ClockConfig+0x1c0>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f023 0207 	bic.w	r2, r3, #7
 8003e5e:	4965      	ldr	r1, [pc, #404]	; (8003ff4 <HAL_RCC_ClockConfig+0x1c0>)
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	4313      	orrs	r3, r2
 8003e64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e66:	4b63      	ldr	r3, [pc, #396]	; (8003ff4 <HAL_RCC_ClockConfig+0x1c0>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f003 0307 	and.w	r3, r3, #7
 8003e6e:	683a      	ldr	r2, [r7, #0]
 8003e70:	429a      	cmp	r2, r3
 8003e72:	d001      	beq.n	8003e78 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003e74:	2301      	movs	r3, #1
 8003e76:	e0b8      	b.n	8003fea <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f003 0302 	and.w	r3, r3, #2
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d020      	beq.n	8003ec6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f003 0304 	and.w	r3, r3, #4
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d005      	beq.n	8003e9c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e90:	4b59      	ldr	r3, [pc, #356]	; (8003ff8 <HAL_RCC_ClockConfig+0x1c4>)
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	4a58      	ldr	r2, [pc, #352]	; (8003ff8 <HAL_RCC_ClockConfig+0x1c4>)
 8003e96:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003e9a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f003 0308 	and.w	r3, r3, #8
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d005      	beq.n	8003eb4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ea8:	4b53      	ldr	r3, [pc, #332]	; (8003ff8 <HAL_RCC_ClockConfig+0x1c4>)
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	4a52      	ldr	r2, [pc, #328]	; (8003ff8 <HAL_RCC_ClockConfig+0x1c4>)
 8003eae:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003eb2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003eb4:	4b50      	ldr	r3, [pc, #320]	; (8003ff8 <HAL_RCC_ClockConfig+0x1c4>)
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	689b      	ldr	r3, [r3, #8]
 8003ec0:	494d      	ldr	r1, [pc, #308]	; (8003ff8 <HAL_RCC_ClockConfig+0x1c4>)
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f003 0301 	and.w	r3, r3, #1
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d040      	beq.n	8003f54 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	2b01      	cmp	r3, #1
 8003ed8:	d107      	bne.n	8003eea <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003eda:	4b47      	ldr	r3, [pc, #284]	; (8003ff8 <HAL_RCC_ClockConfig+0x1c4>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d115      	bne.n	8003f12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	e07f      	b.n	8003fea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	2b02      	cmp	r3, #2
 8003ef0:	d107      	bne.n	8003f02 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ef2:	4b41      	ldr	r3, [pc, #260]	; (8003ff8 <HAL_RCC_ClockConfig+0x1c4>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d109      	bne.n	8003f12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003efe:	2301      	movs	r3, #1
 8003f00:	e073      	b.n	8003fea <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f02:	4b3d      	ldr	r3, [pc, #244]	; (8003ff8 <HAL_RCC_ClockConfig+0x1c4>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f003 0302 	and.w	r3, r3, #2
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d101      	bne.n	8003f12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f0e:	2301      	movs	r3, #1
 8003f10:	e06b      	b.n	8003fea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f12:	4b39      	ldr	r3, [pc, #228]	; (8003ff8 <HAL_RCC_ClockConfig+0x1c4>)
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	f023 0203 	bic.w	r2, r3, #3
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	4936      	ldr	r1, [pc, #216]	; (8003ff8 <HAL_RCC_ClockConfig+0x1c4>)
 8003f20:	4313      	orrs	r3, r2
 8003f22:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f24:	f7fd facc 	bl	80014c0 <HAL_GetTick>
 8003f28:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f2a:	e00a      	b.n	8003f42 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f2c:	f7fd fac8 	bl	80014c0 <HAL_GetTick>
 8003f30:	4602      	mov	r2, r0
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	1ad3      	subs	r3, r2, r3
 8003f36:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d901      	bls.n	8003f42 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003f3e:	2303      	movs	r3, #3
 8003f40:	e053      	b.n	8003fea <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f42:	4b2d      	ldr	r3, [pc, #180]	; (8003ff8 <HAL_RCC_ClockConfig+0x1c4>)
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	f003 020c 	and.w	r2, r3, #12
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	009b      	lsls	r3, r3, #2
 8003f50:	429a      	cmp	r2, r3
 8003f52:	d1eb      	bne.n	8003f2c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003f54:	4b27      	ldr	r3, [pc, #156]	; (8003ff4 <HAL_RCC_ClockConfig+0x1c0>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f003 0307 	and.w	r3, r3, #7
 8003f5c:	683a      	ldr	r2, [r7, #0]
 8003f5e:	429a      	cmp	r2, r3
 8003f60:	d210      	bcs.n	8003f84 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f62:	4b24      	ldr	r3, [pc, #144]	; (8003ff4 <HAL_RCC_ClockConfig+0x1c0>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f023 0207 	bic.w	r2, r3, #7
 8003f6a:	4922      	ldr	r1, [pc, #136]	; (8003ff4 <HAL_RCC_ClockConfig+0x1c0>)
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f72:	4b20      	ldr	r3, [pc, #128]	; (8003ff4 <HAL_RCC_ClockConfig+0x1c0>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f003 0307 	and.w	r3, r3, #7
 8003f7a:	683a      	ldr	r2, [r7, #0]
 8003f7c:	429a      	cmp	r2, r3
 8003f7e:	d001      	beq.n	8003f84 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003f80:	2301      	movs	r3, #1
 8003f82:	e032      	b.n	8003fea <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f003 0304 	and.w	r3, r3, #4
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d008      	beq.n	8003fa2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f90:	4b19      	ldr	r3, [pc, #100]	; (8003ff8 <HAL_RCC_ClockConfig+0x1c4>)
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	68db      	ldr	r3, [r3, #12]
 8003f9c:	4916      	ldr	r1, [pc, #88]	; (8003ff8 <HAL_RCC_ClockConfig+0x1c4>)
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f003 0308 	and.w	r3, r3, #8
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d009      	beq.n	8003fc2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003fae:	4b12      	ldr	r3, [pc, #72]	; (8003ff8 <HAL_RCC_ClockConfig+0x1c4>)
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	691b      	ldr	r3, [r3, #16]
 8003fba:	00db      	lsls	r3, r3, #3
 8003fbc:	490e      	ldr	r1, [pc, #56]	; (8003ff8 <HAL_RCC_ClockConfig+0x1c4>)
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003fc2:	f000 f821 	bl	8004008 <HAL_RCC_GetSysClockFreq>
 8003fc6:	4602      	mov	r2, r0
 8003fc8:	4b0b      	ldr	r3, [pc, #44]	; (8003ff8 <HAL_RCC_ClockConfig+0x1c4>)
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	091b      	lsrs	r3, r3, #4
 8003fce:	f003 030f 	and.w	r3, r3, #15
 8003fd2:	490a      	ldr	r1, [pc, #40]	; (8003ffc <HAL_RCC_ClockConfig+0x1c8>)
 8003fd4:	5ccb      	ldrb	r3, [r1, r3]
 8003fd6:	fa22 f303 	lsr.w	r3, r2, r3
 8003fda:	4a09      	ldr	r2, [pc, #36]	; (8004000 <HAL_RCC_ClockConfig+0x1cc>)
 8003fdc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003fde:	4b09      	ldr	r3, [pc, #36]	; (8004004 <HAL_RCC_ClockConfig+0x1d0>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f7fd fa2a 	bl	800143c <HAL_InitTick>

  return HAL_OK;
 8003fe8:	2300      	movs	r3, #0
}
 8003fea:	4618      	mov	r0, r3
 8003fec:	3710      	adds	r7, #16
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bd80      	pop	{r7, pc}
 8003ff2:	bf00      	nop
 8003ff4:	40022000 	.word	0x40022000
 8003ff8:	40021000 	.word	0x40021000
 8003ffc:	08004fb8 	.word	0x08004fb8
 8004000:	20000000 	.word	0x20000000
 8004004:	20000004 	.word	0x20000004

08004008 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004008:	b480      	push	{r7}
 800400a:	b087      	sub	sp, #28
 800400c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800400e:	2300      	movs	r3, #0
 8004010:	60fb      	str	r3, [r7, #12]
 8004012:	2300      	movs	r3, #0
 8004014:	60bb      	str	r3, [r7, #8]
 8004016:	2300      	movs	r3, #0
 8004018:	617b      	str	r3, [r7, #20]
 800401a:	2300      	movs	r3, #0
 800401c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800401e:	2300      	movs	r3, #0
 8004020:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004022:	4b1e      	ldr	r3, [pc, #120]	; (800409c <HAL_RCC_GetSysClockFreq+0x94>)
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	f003 030c 	and.w	r3, r3, #12
 800402e:	2b04      	cmp	r3, #4
 8004030:	d002      	beq.n	8004038 <HAL_RCC_GetSysClockFreq+0x30>
 8004032:	2b08      	cmp	r3, #8
 8004034:	d003      	beq.n	800403e <HAL_RCC_GetSysClockFreq+0x36>
 8004036:	e027      	b.n	8004088 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004038:	4b19      	ldr	r3, [pc, #100]	; (80040a0 <HAL_RCC_GetSysClockFreq+0x98>)
 800403a:	613b      	str	r3, [r7, #16]
      break;
 800403c:	e027      	b.n	800408e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	0c9b      	lsrs	r3, r3, #18
 8004042:	f003 030f 	and.w	r3, r3, #15
 8004046:	4a17      	ldr	r2, [pc, #92]	; (80040a4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004048:	5cd3      	ldrb	r3, [r2, r3]
 800404a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004052:	2b00      	cmp	r3, #0
 8004054:	d010      	beq.n	8004078 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004056:	4b11      	ldr	r3, [pc, #68]	; (800409c <HAL_RCC_GetSysClockFreq+0x94>)
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	0c5b      	lsrs	r3, r3, #17
 800405c:	f003 0301 	and.w	r3, r3, #1
 8004060:	4a11      	ldr	r2, [pc, #68]	; (80040a8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004062:	5cd3      	ldrb	r3, [r2, r3]
 8004064:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	4a0d      	ldr	r2, [pc, #52]	; (80040a0 <HAL_RCC_GetSysClockFreq+0x98>)
 800406a:	fb03 f202 	mul.w	r2, r3, r2
 800406e:	68bb      	ldr	r3, [r7, #8]
 8004070:	fbb2 f3f3 	udiv	r3, r2, r3
 8004074:	617b      	str	r3, [r7, #20]
 8004076:	e004      	b.n	8004082 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	4a0c      	ldr	r2, [pc, #48]	; (80040ac <HAL_RCC_GetSysClockFreq+0xa4>)
 800407c:	fb02 f303 	mul.w	r3, r2, r3
 8004080:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004082:	697b      	ldr	r3, [r7, #20]
 8004084:	613b      	str	r3, [r7, #16]
      break;
 8004086:	e002      	b.n	800408e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004088:	4b05      	ldr	r3, [pc, #20]	; (80040a0 <HAL_RCC_GetSysClockFreq+0x98>)
 800408a:	613b      	str	r3, [r7, #16]
      break;
 800408c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800408e:	693b      	ldr	r3, [r7, #16]
}
 8004090:	4618      	mov	r0, r3
 8004092:	371c      	adds	r7, #28
 8004094:	46bd      	mov	sp, r7
 8004096:	bc80      	pop	{r7}
 8004098:	4770      	bx	lr
 800409a:	bf00      	nop
 800409c:	40021000 	.word	0x40021000
 80040a0:	007a1200 	.word	0x007a1200
 80040a4:	08004fd0 	.word	0x08004fd0
 80040a8:	08004fe0 	.word	0x08004fe0
 80040ac:	003d0900 	.word	0x003d0900

080040b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80040b0:	b480      	push	{r7}
 80040b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80040b4:	4b02      	ldr	r3, [pc, #8]	; (80040c0 <HAL_RCC_GetHCLKFreq+0x10>)
 80040b6:	681b      	ldr	r3, [r3, #0]
}
 80040b8:	4618      	mov	r0, r3
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bc80      	pop	{r7}
 80040be:	4770      	bx	lr
 80040c0:	20000000 	.word	0x20000000

080040c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80040c8:	f7ff fff2 	bl	80040b0 <HAL_RCC_GetHCLKFreq>
 80040cc:	4602      	mov	r2, r0
 80040ce:	4b05      	ldr	r3, [pc, #20]	; (80040e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	0a1b      	lsrs	r3, r3, #8
 80040d4:	f003 0307 	and.w	r3, r3, #7
 80040d8:	4903      	ldr	r1, [pc, #12]	; (80040e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80040da:	5ccb      	ldrb	r3, [r1, r3]
 80040dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040e0:	4618      	mov	r0, r3
 80040e2:	bd80      	pop	{r7, pc}
 80040e4:	40021000 	.word	0x40021000
 80040e8:	08004fc8 	.word	0x08004fc8

080040ec <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80040ec:	b480      	push	{r7}
 80040ee:	b085      	sub	sp, #20
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80040f4:	4b0a      	ldr	r3, [pc, #40]	; (8004120 <RCC_Delay+0x34>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4a0a      	ldr	r2, [pc, #40]	; (8004124 <RCC_Delay+0x38>)
 80040fa:	fba2 2303 	umull	r2, r3, r2, r3
 80040fe:	0a5b      	lsrs	r3, r3, #9
 8004100:	687a      	ldr	r2, [r7, #4]
 8004102:	fb02 f303 	mul.w	r3, r2, r3
 8004106:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004108:	bf00      	nop
  }
  while (Delay --);
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	1e5a      	subs	r2, r3, #1
 800410e:	60fa      	str	r2, [r7, #12]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d1f9      	bne.n	8004108 <RCC_Delay+0x1c>
}
 8004114:	bf00      	nop
 8004116:	bf00      	nop
 8004118:	3714      	adds	r7, #20
 800411a:	46bd      	mov	sp, r7
 800411c:	bc80      	pop	{r7}
 800411e:	4770      	bx	lr
 8004120:	20000000 	.word	0x20000000
 8004124:	10624dd3 	.word	0x10624dd3

08004128 <memset>:
 8004128:	4603      	mov	r3, r0
 800412a:	4402      	add	r2, r0
 800412c:	4293      	cmp	r3, r2
 800412e:	d100      	bne.n	8004132 <memset+0xa>
 8004130:	4770      	bx	lr
 8004132:	f803 1b01 	strb.w	r1, [r3], #1
 8004136:	e7f9      	b.n	800412c <memset+0x4>

08004138 <__errno>:
 8004138:	4b01      	ldr	r3, [pc, #4]	; (8004140 <__errno+0x8>)
 800413a:	6818      	ldr	r0, [r3, #0]
 800413c:	4770      	bx	lr
 800413e:	bf00      	nop
 8004140:	20000058 	.word	0x20000058

08004144 <__libc_init_array>:
 8004144:	b570      	push	{r4, r5, r6, lr}
 8004146:	2600      	movs	r6, #0
 8004148:	4d0c      	ldr	r5, [pc, #48]	; (800417c <__libc_init_array+0x38>)
 800414a:	4c0d      	ldr	r4, [pc, #52]	; (8004180 <__libc_init_array+0x3c>)
 800414c:	1b64      	subs	r4, r4, r5
 800414e:	10a4      	asrs	r4, r4, #2
 8004150:	42a6      	cmp	r6, r4
 8004152:	d109      	bne.n	8004168 <__libc_init_array+0x24>
 8004154:	f000 ff22 	bl	8004f9c <_init>
 8004158:	2600      	movs	r6, #0
 800415a:	4d0a      	ldr	r5, [pc, #40]	; (8004184 <__libc_init_array+0x40>)
 800415c:	4c0a      	ldr	r4, [pc, #40]	; (8004188 <__libc_init_array+0x44>)
 800415e:	1b64      	subs	r4, r4, r5
 8004160:	10a4      	asrs	r4, r4, #2
 8004162:	42a6      	cmp	r6, r4
 8004164:	d105      	bne.n	8004172 <__libc_init_array+0x2e>
 8004166:	bd70      	pop	{r4, r5, r6, pc}
 8004168:	f855 3b04 	ldr.w	r3, [r5], #4
 800416c:	4798      	blx	r3
 800416e:	3601      	adds	r6, #1
 8004170:	e7ee      	b.n	8004150 <__libc_init_array+0xc>
 8004172:	f855 3b04 	ldr.w	r3, [r5], #4
 8004176:	4798      	blx	r3
 8004178:	3601      	adds	r6, #1
 800417a:	e7f2      	b.n	8004162 <__libc_init_array+0x1e>
 800417c:	08005018 	.word	0x08005018
 8004180:	08005018 	.word	0x08005018
 8004184:	08005018 	.word	0x08005018
 8004188:	0800501c 	.word	0x0800501c

0800418c <pow>:
 800418c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004190:	4614      	mov	r4, r2
 8004192:	461d      	mov	r5, r3
 8004194:	4680      	mov	r8, r0
 8004196:	4689      	mov	r9, r1
 8004198:	f000 f866 	bl	8004268 <__ieee754_pow>
 800419c:	4622      	mov	r2, r4
 800419e:	4606      	mov	r6, r0
 80041a0:	460f      	mov	r7, r1
 80041a2:	462b      	mov	r3, r5
 80041a4:	4620      	mov	r0, r4
 80041a6:	4629      	mov	r1, r5
 80041a8:	f7fc fc28 	bl	80009fc <__aeabi_dcmpun>
 80041ac:	bbc8      	cbnz	r0, 8004222 <pow+0x96>
 80041ae:	2200      	movs	r2, #0
 80041b0:	2300      	movs	r3, #0
 80041b2:	4640      	mov	r0, r8
 80041b4:	4649      	mov	r1, r9
 80041b6:	f7fc fbef 	bl	8000998 <__aeabi_dcmpeq>
 80041ba:	b1b8      	cbz	r0, 80041ec <pow+0x60>
 80041bc:	2200      	movs	r2, #0
 80041be:	2300      	movs	r3, #0
 80041c0:	4620      	mov	r0, r4
 80041c2:	4629      	mov	r1, r5
 80041c4:	f7fc fbe8 	bl	8000998 <__aeabi_dcmpeq>
 80041c8:	2800      	cmp	r0, #0
 80041ca:	d141      	bne.n	8004250 <pow+0xc4>
 80041cc:	4620      	mov	r0, r4
 80041ce:	4629      	mov	r1, r5
 80041d0:	f000 f844 	bl	800425c <finite>
 80041d4:	b328      	cbz	r0, 8004222 <pow+0x96>
 80041d6:	2200      	movs	r2, #0
 80041d8:	2300      	movs	r3, #0
 80041da:	4620      	mov	r0, r4
 80041dc:	4629      	mov	r1, r5
 80041de:	f7fc fbe5 	bl	80009ac <__aeabi_dcmplt>
 80041e2:	b1f0      	cbz	r0, 8004222 <pow+0x96>
 80041e4:	f7ff ffa8 	bl	8004138 <__errno>
 80041e8:	2322      	movs	r3, #34	; 0x22
 80041ea:	e019      	b.n	8004220 <pow+0x94>
 80041ec:	4630      	mov	r0, r6
 80041ee:	4639      	mov	r1, r7
 80041f0:	f000 f834 	bl	800425c <finite>
 80041f4:	b9c8      	cbnz	r0, 800422a <pow+0x9e>
 80041f6:	4640      	mov	r0, r8
 80041f8:	4649      	mov	r1, r9
 80041fa:	f000 f82f 	bl	800425c <finite>
 80041fe:	b1a0      	cbz	r0, 800422a <pow+0x9e>
 8004200:	4620      	mov	r0, r4
 8004202:	4629      	mov	r1, r5
 8004204:	f000 f82a 	bl	800425c <finite>
 8004208:	b178      	cbz	r0, 800422a <pow+0x9e>
 800420a:	4632      	mov	r2, r6
 800420c:	463b      	mov	r3, r7
 800420e:	4630      	mov	r0, r6
 8004210:	4639      	mov	r1, r7
 8004212:	f7fc fbf3 	bl	80009fc <__aeabi_dcmpun>
 8004216:	2800      	cmp	r0, #0
 8004218:	d0e4      	beq.n	80041e4 <pow+0x58>
 800421a:	f7ff ff8d 	bl	8004138 <__errno>
 800421e:	2321      	movs	r3, #33	; 0x21
 8004220:	6003      	str	r3, [r0, #0]
 8004222:	4630      	mov	r0, r6
 8004224:	4639      	mov	r1, r7
 8004226:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800422a:	2200      	movs	r2, #0
 800422c:	2300      	movs	r3, #0
 800422e:	4630      	mov	r0, r6
 8004230:	4639      	mov	r1, r7
 8004232:	f7fc fbb1 	bl	8000998 <__aeabi_dcmpeq>
 8004236:	2800      	cmp	r0, #0
 8004238:	d0f3      	beq.n	8004222 <pow+0x96>
 800423a:	4640      	mov	r0, r8
 800423c:	4649      	mov	r1, r9
 800423e:	f000 f80d 	bl	800425c <finite>
 8004242:	2800      	cmp	r0, #0
 8004244:	d0ed      	beq.n	8004222 <pow+0x96>
 8004246:	4620      	mov	r0, r4
 8004248:	4629      	mov	r1, r5
 800424a:	f000 f807 	bl	800425c <finite>
 800424e:	e7c8      	b.n	80041e2 <pow+0x56>
 8004250:	2600      	movs	r6, #0
 8004252:	4f01      	ldr	r7, [pc, #4]	; (8004258 <pow+0xcc>)
 8004254:	e7e5      	b.n	8004222 <pow+0x96>
 8004256:	bf00      	nop
 8004258:	3ff00000 	.word	0x3ff00000

0800425c <finite>:
 800425c:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 8004260:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8004264:	0fc0      	lsrs	r0, r0, #31
 8004266:	4770      	bx	lr

08004268 <__ieee754_pow>:
 8004268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800426c:	b093      	sub	sp, #76	; 0x4c
 800426e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004272:	e9dd 2702 	ldrd	r2, r7, [sp, #8]
 8004276:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 800427a:	4689      	mov	r9, r1
 800427c:	ea56 0102 	orrs.w	r1, r6, r2
 8004280:	4680      	mov	r8, r0
 8004282:	d111      	bne.n	80042a8 <__ieee754_pow+0x40>
 8004284:	1803      	adds	r3, r0, r0
 8004286:	f489 2200 	eor.w	r2, r9, #524288	; 0x80000
 800428a:	4152      	adcs	r2, r2
 800428c:	4299      	cmp	r1, r3
 800428e:	4b82      	ldr	r3, [pc, #520]	; (8004498 <__ieee754_pow+0x230>)
 8004290:	4193      	sbcs	r3, r2
 8004292:	f080 84ba 	bcs.w	8004c0a <__ieee754_pow+0x9a2>
 8004296:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800429a:	4640      	mov	r0, r8
 800429c:	4649      	mov	r1, r9
 800429e:	f7fb ff5d 	bl	800015c <__adddf3>
 80042a2:	4683      	mov	fp, r0
 80042a4:	468c      	mov	ip, r1
 80042a6:	e06f      	b.n	8004388 <__ieee754_pow+0x120>
 80042a8:	4b7c      	ldr	r3, [pc, #496]	; (800449c <__ieee754_pow+0x234>)
 80042aa:	f029 4400 	bic.w	r4, r9, #2147483648	; 0x80000000
 80042ae:	429c      	cmp	r4, r3
 80042b0:	464d      	mov	r5, r9
 80042b2:	4682      	mov	sl, r0
 80042b4:	dc06      	bgt.n	80042c4 <__ieee754_pow+0x5c>
 80042b6:	d101      	bne.n	80042bc <__ieee754_pow+0x54>
 80042b8:	2800      	cmp	r0, #0
 80042ba:	d1ec      	bne.n	8004296 <__ieee754_pow+0x2e>
 80042bc:	429e      	cmp	r6, r3
 80042be:	dc01      	bgt.n	80042c4 <__ieee754_pow+0x5c>
 80042c0:	d10f      	bne.n	80042e2 <__ieee754_pow+0x7a>
 80042c2:	b172      	cbz	r2, 80042e2 <__ieee754_pow+0x7a>
 80042c4:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 80042c8:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 80042cc:	ea55 050a 	orrs.w	r5, r5, sl
 80042d0:	d1e1      	bne.n	8004296 <__ieee754_pow+0x2e>
 80042d2:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80042d6:	18db      	adds	r3, r3, r3
 80042d8:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 80042dc:	4152      	adcs	r2, r2
 80042de:	429d      	cmp	r5, r3
 80042e0:	e7d5      	b.n	800428e <__ieee754_pow+0x26>
 80042e2:	2d00      	cmp	r5, #0
 80042e4:	da39      	bge.n	800435a <__ieee754_pow+0xf2>
 80042e6:	4b6e      	ldr	r3, [pc, #440]	; (80044a0 <__ieee754_pow+0x238>)
 80042e8:	429e      	cmp	r6, r3
 80042ea:	dc52      	bgt.n	8004392 <__ieee754_pow+0x12a>
 80042ec:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80042f0:	429e      	cmp	r6, r3
 80042f2:	f340 849d 	ble.w	8004c30 <__ieee754_pow+0x9c8>
 80042f6:	1533      	asrs	r3, r6, #20
 80042f8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80042fc:	2b14      	cmp	r3, #20
 80042fe:	dd0f      	ble.n	8004320 <__ieee754_pow+0xb8>
 8004300:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8004304:	fa22 f103 	lsr.w	r1, r2, r3
 8004308:	fa01 f303 	lsl.w	r3, r1, r3
 800430c:	4293      	cmp	r3, r2
 800430e:	f040 848f 	bne.w	8004c30 <__ieee754_pow+0x9c8>
 8004312:	f001 0101 	and.w	r1, r1, #1
 8004316:	f1c1 0302 	rsb	r3, r1, #2
 800431a:	9300      	str	r3, [sp, #0]
 800431c:	b182      	cbz	r2, 8004340 <__ieee754_pow+0xd8>
 800431e:	e05d      	b.n	80043dc <__ieee754_pow+0x174>
 8004320:	2a00      	cmp	r2, #0
 8004322:	d159      	bne.n	80043d8 <__ieee754_pow+0x170>
 8004324:	f1c3 0314 	rsb	r3, r3, #20
 8004328:	fa46 f103 	asr.w	r1, r6, r3
 800432c:	fa01 f303 	lsl.w	r3, r1, r3
 8004330:	42b3      	cmp	r3, r6
 8004332:	f040 847a 	bne.w	8004c2a <__ieee754_pow+0x9c2>
 8004336:	f001 0101 	and.w	r1, r1, #1
 800433a:	f1c1 0302 	rsb	r3, r1, #2
 800433e:	9300      	str	r3, [sp, #0]
 8004340:	4b58      	ldr	r3, [pc, #352]	; (80044a4 <__ieee754_pow+0x23c>)
 8004342:	429e      	cmp	r6, r3
 8004344:	d132      	bne.n	80043ac <__ieee754_pow+0x144>
 8004346:	2f00      	cmp	r7, #0
 8004348:	f280 846b 	bge.w	8004c22 <__ieee754_pow+0x9ba>
 800434c:	4642      	mov	r2, r8
 800434e:	464b      	mov	r3, r9
 8004350:	2000      	movs	r0, #0
 8004352:	4954      	ldr	r1, [pc, #336]	; (80044a4 <__ieee754_pow+0x23c>)
 8004354:	f7fc f9e2 	bl	800071c <__aeabi_ddiv>
 8004358:	e7a3      	b.n	80042a2 <__ieee754_pow+0x3a>
 800435a:	2300      	movs	r3, #0
 800435c:	9300      	str	r3, [sp, #0]
 800435e:	2a00      	cmp	r2, #0
 8004360:	d13c      	bne.n	80043dc <__ieee754_pow+0x174>
 8004362:	4b4e      	ldr	r3, [pc, #312]	; (800449c <__ieee754_pow+0x234>)
 8004364:	429e      	cmp	r6, r3
 8004366:	d1eb      	bne.n	8004340 <__ieee754_pow+0xd8>
 8004368:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800436c:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8004370:	ea53 030a 	orrs.w	r3, r3, sl
 8004374:	f000 8449 	beq.w	8004c0a <__ieee754_pow+0x9a2>
 8004378:	4b4b      	ldr	r3, [pc, #300]	; (80044a8 <__ieee754_pow+0x240>)
 800437a:	429c      	cmp	r4, r3
 800437c:	dd0b      	ble.n	8004396 <__ieee754_pow+0x12e>
 800437e:	2f00      	cmp	r7, #0
 8004380:	f2c0 8449 	blt.w	8004c16 <__ieee754_pow+0x9ae>
 8004384:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 8004388:	4658      	mov	r0, fp
 800438a:	4661      	mov	r1, ip
 800438c:	b013      	add	sp, #76	; 0x4c
 800438e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004392:	2302      	movs	r3, #2
 8004394:	e7e2      	b.n	800435c <__ieee754_pow+0xf4>
 8004396:	2f00      	cmp	r7, #0
 8004398:	f04f 0b00 	mov.w	fp, #0
 800439c:	f04f 0c00 	mov.w	ip, #0
 80043a0:	daf2      	bge.n	8004388 <__ieee754_pow+0x120>
 80043a2:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 80043a6:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 80043aa:	e7ed      	b.n	8004388 <__ieee754_pow+0x120>
 80043ac:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 80043b0:	d106      	bne.n	80043c0 <__ieee754_pow+0x158>
 80043b2:	4642      	mov	r2, r8
 80043b4:	464b      	mov	r3, r9
 80043b6:	4640      	mov	r0, r8
 80043b8:	4649      	mov	r1, r9
 80043ba:	f7fc f885 	bl	80004c8 <__aeabi_dmul>
 80043be:	e770      	b.n	80042a2 <__ieee754_pow+0x3a>
 80043c0:	4b3a      	ldr	r3, [pc, #232]	; (80044ac <__ieee754_pow+0x244>)
 80043c2:	429f      	cmp	r7, r3
 80043c4:	d10a      	bne.n	80043dc <__ieee754_pow+0x174>
 80043c6:	2d00      	cmp	r5, #0
 80043c8:	db08      	blt.n	80043dc <__ieee754_pow+0x174>
 80043ca:	4640      	mov	r0, r8
 80043cc:	4649      	mov	r1, r9
 80043ce:	b013      	add	sp, #76	; 0x4c
 80043d0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043d4:	f000 bd0a 	b.w	8004dec <__ieee754_sqrt>
 80043d8:	2300      	movs	r3, #0
 80043da:	9300      	str	r3, [sp, #0]
 80043dc:	4640      	mov	r0, r8
 80043de:	4649      	mov	r1, r9
 80043e0:	f000 fc58 	bl	8004c94 <fabs>
 80043e4:	4683      	mov	fp, r0
 80043e6:	468c      	mov	ip, r1
 80043e8:	f1ba 0f00 	cmp.w	sl, #0
 80043ec:	d128      	bne.n	8004440 <__ieee754_pow+0x1d8>
 80043ee:	b124      	cbz	r4, 80043fa <__ieee754_pow+0x192>
 80043f0:	4b2c      	ldr	r3, [pc, #176]	; (80044a4 <__ieee754_pow+0x23c>)
 80043f2:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80043f6:	429a      	cmp	r2, r3
 80043f8:	d122      	bne.n	8004440 <__ieee754_pow+0x1d8>
 80043fa:	2f00      	cmp	r7, #0
 80043fc:	da07      	bge.n	800440e <__ieee754_pow+0x1a6>
 80043fe:	465a      	mov	r2, fp
 8004400:	4663      	mov	r3, ip
 8004402:	2000      	movs	r0, #0
 8004404:	4927      	ldr	r1, [pc, #156]	; (80044a4 <__ieee754_pow+0x23c>)
 8004406:	f7fc f989 	bl	800071c <__aeabi_ddiv>
 800440a:	4683      	mov	fp, r0
 800440c:	468c      	mov	ip, r1
 800440e:	2d00      	cmp	r5, #0
 8004410:	daba      	bge.n	8004388 <__ieee754_pow+0x120>
 8004412:	9b00      	ldr	r3, [sp, #0]
 8004414:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8004418:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800441c:	431c      	orrs	r4, r3
 800441e:	d108      	bne.n	8004432 <__ieee754_pow+0x1ca>
 8004420:	465a      	mov	r2, fp
 8004422:	4663      	mov	r3, ip
 8004424:	4658      	mov	r0, fp
 8004426:	4661      	mov	r1, ip
 8004428:	f7fb fe96 	bl	8000158 <__aeabi_dsub>
 800442c:	4602      	mov	r2, r0
 800442e:	460b      	mov	r3, r1
 8004430:	e790      	b.n	8004354 <__ieee754_pow+0xec>
 8004432:	9b00      	ldr	r3, [sp, #0]
 8004434:	2b01      	cmp	r3, #1
 8004436:	d1a7      	bne.n	8004388 <__ieee754_pow+0x120>
 8004438:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 800443c:	469c      	mov	ip, r3
 800443e:	e7a3      	b.n	8004388 <__ieee754_pow+0x120>
 8004440:	0feb      	lsrs	r3, r5, #31
 8004442:	3b01      	subs	r3, #1
 8004444:	930c      	str	r3, [sp, #48]	; 0x30
 8004446:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004448:	9b00      	ldr	r3, [sp, #0]
 800444a:	4313      	orrs	r3, r2
 800444c:	d104      	bne.n	8004458 <__ieee754_pow+0x1f0>
 800444e:	4642      	mov	r2, r8
 8004450:	464b      	mov	r3, r9
 8004452:	4640      	mov	r0, r8
 8004454:	4649      	mov	r1, r9
 8004456:	e7e7      	b.n	8004428 <__ieee754_pow+0x1c0>
 8004458:	4b15      	ldr	r3, [pc, #84]	; (80044b0 <__ieee754_pow+0x248>)
 800445a:	429e      	cmp	r6, r3
 800445c:	f340 80f6 	ble.w	800464c <__ieee754_pow+0x3e4>
 8004460:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8004464:	429e      	cmp	r6, r3
 8004466:	4b10      	ldr	r3, [pc, #64]	; (80044a8 <__ieee754_pow+0x240>)
 8004468:	dd09      	ble.n	800447e <__ieee754_pow+0x216>
 800446a:	429c      	cmp	r4, r3
 800446c:	dc0c      	bgt.n	8004488 <__ieee754_pow+0x220>
 800446e:	2f00      	cmp	r7, #0
 8004470:	da0c      	bge.n	800448c <__ieee754_pow+0x224>
 8004472:	2000      	movs	r0, #0
 8004474:	b013      	add	sp, #76	; 0x4c
 8004476:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800447a:	f000 bcb2 	b.w	8004de2 <__math_oflow>
 800447e:	429c      	cmp	r4, r3
 8004480:	dbf5      	blt.n	800446e <__ieee754_pow+0x206>
 8004482:	4b08      	ldr	r3, [pc, #32]	; (80044a4 <__ieee754_pow+0x23c>)
 8004484:	429c      	cmp	r4, r3
 8004486:	dd15      	ble.n	80044b4 <__ieee754_pow+0x24c>
 8004488:	2f00      	cmp	r7, #0
 800448a:	dcf2      	bgt.n	8004472 <__ieee754_pow+0x20a>
 800448c:	2000      	movs	r0, #0
 800448e:	b013      	add	sp, #76	; 0x4c
 8004490:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004494:	f000 bca0 	b.w	8004dd8 <__math_uflow>
 8004498:	fff00000 	.word	0xfff00000
 800449c:	7ff00000 	.word	0x7ff00000
 80044a0:	433fffff 	.word	0x433fffff
 80044a4:	3ff00000 	.word	0x3ff00000
 80044a8:	3fefffff 	.word	0x3fefffff
 80044ac:	3fe00000 	.word	0x3fe00000
 80044b0:	41e00000 	.word	0x41e00000
 80044b4:	4661      	mov	r1, ip
 80044b6:	2200      	movs	r2, #0
 80044b8:	4658      	mov	r0, fp
 80044ba:	4b5f      	ldr	r3, [pc, #380]	; (8004638 <__ieee754_pow+0x3d0>)
 80044bc:	f7fb fe4c 	bl	8000158 <__aeabi_dsub>
 80044c0:	a355      	add	r3, pc, #340	; (adr r3, 8004618 <__ieee754_pow+0x3b0>)
 80044c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044c6:	4604      	mov	r4, r0
 80044c8:	460d      	mov	r5, r1
 80044ca:	f7fb fffd 	bl	80004c8 <__aeabi_dmul>
 80044ce:	a354      	add	r3, pc, #336	; (adr r3, 8004620 <__ieee754_pow+0x3b8>)
 80044d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044d4:	4606      	mov	r6, r0
 80044d6:	460f      	mov	r7, r1
 80044d8:	4620      	mov	r0, r4
 80044da:	4629      	mov	r1, r5
 80044dc:	f7fb fff4 	bl	80004c8 <__aeabi_dmul>
 80044e0:	2200      	movs	r2, #0
 80044e2:	4682      	mov	sl, r0
 80044e4:	468b      	mov	fp, r1
 80044e6:	4620      	mov	r0, r4
 80044e8:	4629      	mov	r1, r5
 80044ea:	4b54      	ldr	r3, [pc, #336]	; (800463c <__ieee754_pow+0x3d4>)
 80044ec:	f7fb ffec 	bl	80004c8 <__aeabi_dmul>
 80044f0:	4602      	mov	r2, r0
 80044f2:	460b      	mov	r3, r1
 80044f4:	a14c      	add	r1, pc, #304	; (adr r1, 8004628 <__ieee754_pow+0x3c0>)
 80044f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80044fa:	f7fb fe2d 	bl	8000158 <__aeabi_dsub>
 80044fe:	4622      	mov	r2, r4
 8004500:	462b      	mov	r3, r5
 8004502:	f7fb ffe1 	bl	80004c8 <__aeabi_dmul>
 8004506:	4602      	mov	r2, r0
 8004508:	460b      	mov	r3, r1
 800450a:	2000      	movs	r0, #0
 800450c:	494c      	ldr	r1, [pc, #304]	; (8004640 <__ieee754_pow+0x3d8>)
 800450e:	f7fb fe23 	bl	8000158 <__aeabi_dsub>
 8004512:	4622      	mov	r2, r4
 8004514:	462b      	mov	r3, r5
 8004516:	4680      	mov	r8, r0
 8004518:	4689      	mov	r9, r1
 800451a:	4620      	mov	r0, r4
 800451c:	4629      	mov	r1, r5
 800451e:	f7fb ffd3 	bl	80004c8 <__aeabi_dmul>
 8004522:	4602      	mov	r2, r0
 8004524:	460b      	mov	r3, r1
 8004526:	4640      	mov	r0, r8
 8004528:	4649      	mov	r1, r9
 800452a:	f7fb ffcd 	bl	80004c8 <__aeabi_dmul>
 800452e:	a340      	add	r3, pc, #256	; (adr r3, 8004630 <__ieee754_pow+0x3c8>)
 8004530:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004534:	f7fb ffc8 	bl	80004c8 <__aeabi_dmul>
 8004538:	4602      	mov	r2, r0
 800453a:	460b      	mov	r3, r1
 800453c:	4650      	mov	r0, sl
 800453e:	4659      	mov	r1, fp
 8004540:	f7fb fe0a 	bl	8000158 <__aeabi_dsub>
 8004544:	4602      	mov	r2, r0
 8004546:	460b      	mov	r3, r1
 8004548:	4604      	mov	r4, r0
 800454a:	460d      	mov	r5, r1
 800454c:	4630      	mov	r0, r6
 800454e:	4639      	mov	r1, r7
 8004550:	f7fb fe04 	bl	800015c <__adddf3>
 8004554:	2000      	movs	r0, #0
 8004556:	4632      	mov	r2, r6
 8004558:	463b      	mov	r3, r7
 800455a:	4682      	mov	sl, r0
 800455c:	468b      	mov	fp, r1
 800455e:	f7fb fdfb 	bl	8000158 <__aeabi_dsub>
 8004562:	4602      	mov	r2, r0
 8004564:	460b      	mov	r3, r1
 8004566:	4620      	mov	r0, r4
 8004568:	4629      	mov	r1, r5
 800456a:	f7fb fdf5 	bl	8000158 <__aeabi_dsub>
 800456e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8004572:	9b00      	ldr	r3, [sp, #0]
 8004574:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004576:	3b01      	subs	r3, #1
 8004578:	4313      	orrs	r3, r2
 800457a:	f04f 0600 	mov.w	r6, #0
 800457e:	f04f 0200 	mov.w	r2, #0
 8004582:	bf0c      	ite	eq
 8004584:	4b2f      	ldreq	r3, [pc, #188]	; (8004644 <__ieee754_pow+0x3dc>)
 8004586:	4b2c      	ldrne	r3, [pc, #176]	; (8004638 <__ieee754_pow+0x3d0>)
 8004588:	4604      	mov	r4, r0
 800458a:	460d      	mov	r5, r1
 800458c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004590:	e9cd 2300 	strd	r2, r3, [sp]
 8004594:	4632      	mov	r2, r6
 8004596:	463b      	mov	r3, r7
 8004598:	f7fb fdde 	bl	8000158 <__aeabi_dsub>
 800459c:	4652      	mov	r2, sl
 800459e:	465b      	mov	r3, fp
 80045a0:	f7fb ff92 	bl	80004c8 <__aeabi_dmul>
 80045a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80045a8:	4680      	mov	r8, r0
 80045aa:	4689      	mov	r9, r1
 80045ac:	4620      	mov	r0, r4
 80045ae:	4629      	mov	r1, r5
 80045b0:	f7fb ff8a 	bl	80004c8 <__aeabi_dmul>
 80045b4:	4602      	mov	r2, r0
 80045b6:	460b      	mov	r3, r1
 80045b8:	4640      	mov	r0, r8
 80045ba:	4649      	mov	r1, r9
 80045bc:	f7fb fdce 	bl	800015c <__adddf3>
 80045c0:	4632      	mov	r2, r6
 80045c2:	463b      	mov	r3, r7
 80045c4:	4680      	mov	r8, r0
 80045c6:	4689      	mov	r9, r1
 80045c8:	4650      	mov	r0, sl
 80045ca:	4659      	mov	r1, fp
 80045cc:	f7fb ff7c 	bl	80004c8 <__aeabi_dmul>
 80045d0:	4604      	mov	r4, r0
 80045d2:	460d      	mov	r5, r1
 80045d4:	460b      	mov	r3, r1
 80045d6:	4602      	mov	r2, r0
 80045d8:	4649      	mov	r1, r9
 80045da:	4640      	mov	r0, r8
 80045dc:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80045e0:	f7fb fdbc 	bl	800015c <__adddf3>
 80045e4:	4b18      	ldr	r3, [pc, #96]	; (8004648 <__ieee754_pow+0x3e0>)
 80045e6:	4682      	mov	sl, r0
 80045e8:	4299      	cmp	r1, r3
 80045ea:	460f      	mov	r7, r1
 80045ec:	460e      	mov	r6, r1
 80045ee:	f340 82e7 	ble.w	8004bc0 <__ieee754_pow+0x958>
 80045f2:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80045f6:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80045fa:	4303      	orrs	r3, r0
 80045fc:	f000 81e2 	beq.w	80049c4 <__ieee754_pow+0x75c>
 8004600:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004604:	2200      	movs	r2, #0
 8004606:	2300      	movs	r3, #0
 8004608:	f7fc f9d0 	bl	80009ac <__aeabi_dcmplt>
 800460c:	3800      	subs	r0, #0
 800460e:	bf18      	it	ne
 8004610:	2001      	movne	r0, #1
 8004612:	e72f      	b.n	8004474 <__ieee754_pow+0x20c>
 8004614:	f3af 8000 	nop.w
 8004618:	60000000 	.word	0x60000000
 800461c:	3ff71547 	.word	0x3ff71547
 8004620:	f85ddf44 	.word	0xf85ddf44
 8004624:	3e54ae0b 	.word	0x3e54ae0b
 8004628:	55555555 	.word	0x55555555
 800462c:	3fd55555 	.word	0x3fd55555
 8004630:	652b82fe 	.word	0x652b82fe
 8004634:	3ff71547 	.word	0x3ff71547
 8004638:	3ff00000 	.word	0x3ff00000
 800463c:	3fd00000 	.word	0x3fd00000
 8004640:	3fe00000 	.word	0x3fe00000
 8004644:	bff00000 	.word	0xbff00000
 8004648:	408fffff 	.word	0x408fffff
 800464c:	4bd4      	ldr	r3, [pc, #848]	; (80049a0 <__ieee754_pow+0x738>)
 800464e:	2200      	movs	r2, #0
 8004650:	402b      	ands	r3, r5
 8004652:	b943      	cbnz	r3, 8004666 <__ieee754_pow+0x3fe>
 8004654:	4658      	mov	r0, fp
 8004656:	4661      	mov	r1, ip
 8004658:	4bd2      	ldr	r3, [pc, #840]	; (80049a4 <__ieee754_pow+0x73c>)
 800465a:	f7fb ff35 	bl	80004c8 <__aeabi_dmul>
 800465e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8004662:	4683      	mov	fp, r0
 8004664:	460c      	mov	r4, r1
 8004666:	1523      	asrs	r3, r4, #20
 8004668:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800466c:	4413      	add	r3, r2
 800466e:	930b      	str	r3, [sp, #44]	; 0x2c
 8004670:	4bcd      	ldr	r3, [pc, #820]	; (80049a8 <__ieee754_pow+0x740>)
 8004672:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8004676:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800467a:	429c      	cmp	r4, r3
 800467c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8004680:	dd08      	ble.n	8004694 <__ieee754_pow+0x42c>
 8004682:	4bca      	ldr	r3, [pc, #808]	; (80049ac <__ieee754_pow+0x744>)
 8004684:	429c      	cmp	r4, r3
 8004686:	f340 8164 	ble.w	8004952 <__ieee754_pow+0x6ea>
 800468a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800468c:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8004690:	3301      	adds	r3, #1
 8004692:	930b      	str	r3, [sp, #44]	; 0x2c
 8004694:	2600      	movs	r6, #0
 8004696:	00f3      	lsls	r3, r6, #3
 8004698:	930d      	str	r3, [sp, #52]	; 0x34
 800469a:	4bc5      	ldr	r3, [pc, #788]	; (80049b0 <__ieee754_pow+0x748>)
 800469c:	4658      	mov	r0, fp
 800469e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80046a2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80046a6:	4629      	mov	r1, r5
 80046a8:	461a      	mov	r2, r3
 80046aa:	e9cd 3408 	strd	r3, r4, [sp, #32]
 80046ae:	4623      	mov	r3, r4
 80046b0:	f7fb fd52 	bl	8000158 <__aeabi_dsub>
 80046b4:	46da      	mov	sl, fp
 80046b6:	462b      	mov	r3, r5
 80046b8:	4652      	mov	r2, sl
 80046ba:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80046be:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80046c2:	f7fb fd4b 	bl	800015c <__adddf3>
 80046c6:	4602      	mov	r2, r0
 80046c8:	460b      	mov	r3, r1
 80046ca:	2000      	movs	r0, #0
 80046cc:	49b9      	ldr	r1, [pc, #740]	; (80049b4 <__ieee754_pow+0x74c>)
 80046ce:	f7fc f825 	bl	800071c <__aeabi_ddiv>
 80046d2:	4602      	mov	r2, r0
 80046d4:	460b      	mov	r3, r1
 80046d6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80046da:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80046de:	f7fb fef3 	bl	80004c8 <__aeabi_dmul>
 80046e2:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80046e6:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 80046ea:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80046ee:	2300      	movs	r3, #0
 80046f0:	2200      	movs	r2, #0
 80046f2:	46ab      	mov	fp, r5
 80046f4:	106d      	asrs	r5, r5, #1
 80046f6:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80046fa:	9304      	str	r3, [sp, #16]
 80046fc:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8004700:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8004704:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 8004708:	4640      	mov	r0, r8
 800470a:	4649      	mov	r1, r9
 800470c:	4614      	mov	r4, r2
 800470e:	461d      	mov	r5, r3
 8004710:	f7fb feda 	bl	80004c8 <__aeabi_dmul>
 8004714:	4602      	mov	r2, r0
 8004716:	460b      	mov	r3, r1
 8004718:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800471c:	f7fb fd1c 	bl	8000158 <__aeabi_dsub>
 8004720:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004724:	4606      	mov	r6, r0
 8004726:	460f      	mov	r7, r1
 8004728:	4620      	mov	r0, r4
 800472a:	4629      	mov	r1, r5
 800472c:	f7fb fd14 	bl	8000158 <__aeabi_dsub>
 8004730:	4602      	mov	r2, r0
 8004732:	460b      	mov	r3, r1
 8004734:	4650      	mov	r0, sl
 8004736:	4659      	mov	r1, fp
 8004738:	f7fb fd0e 	bl	8000158 <__aeabi_dsub>
 800473c:	4642      	mov	r2, r8
 800473e:	464b      	mov	r3, r9
 8004740:	f7fb fec2 	bl	80004c8 <__aeabi_dmul>
 8004744:	4602      	mov	r2, r0
 8004746:	460b      	mov	r3, r1
 8004748:	4630      	mov	r0, r6
 800474a:	4639      	mov	r1, r7
 800474c:	f7fb fd04 	bl	8000158 <__aeabi_dsub>
 8004750:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004754:	f7fb feb8 	bl	80004c8 <__aeabi_dmul>
 8004758:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800475c:	4682      	mov	sl, r0
 800475e:	468b      	mov	fp, r1
 8004760:	4610      	mov	r0, r2
 8004762:	4619      	mov	r1, r3
 8004764:	f7fb feb0 	bl	80004c8 <__aeabi_dmul>
 8004768:	a37b      	add	r3, pc, #492	; (adr r3, 8004958 <__ieee754_pow+0x6f0>)
 800476a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800476e:	4604      	mov	r4, r0
 8004770:	460d      	mov	r5, r1
 8004772:	f7fb fea9 	bl	80004c8 <__aeabi_dmul>
 8004776:	a37a      	add	r3, pc, #488	; (adr r3, 8004960 <__ieee754_pow+0x6f8>)
 8004778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800477c:	f7fb fcee 	bl	800015c <__adddf3>
 8004780:	4622      	mov	r2, r4
 8004782:	462b      	mov	r3, r5
 8004784:	f7fb fea0 	bl	80004c8 <__aeabi_dmul>
 8004788:	a377      	add	r3, pc, #476	; (adr r3, 8004968 <__ieee754_pow+0x700>)
 800478a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800478e:	f7fb fce5 	bl	800015c <__adddf3>
 8004792:	4622      	mov	r2, r4
 8004794:	462b      	mov	r3, r5
 8004796:	f7fb fe97 	bl	80004c8 <__aeabi_dmul>
 800479a:	a375      	add	r3, pc, #468	; (adr r3, 8004970 <__ieee754_pow+0x708>)
 800479c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047a0:	f7fb fcdc 	bl	800015c <__adddf3>
 80047a4:	4622      	mov	r2, r4
 80047a6:	462b      	mov	r3, r5
 80047a8:	f7fb fe8e 	bl	80004c8 <__aeabi_dmul>
 80047ac:	a372      	add	r3, pc, #456	; (adr r3, 8004978 <__ieee754_pow+0x710>)
 80047ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047b2:	f7fb fcd3 	bl	800015c <__adddf3>
 80047b6:	4622      	mov	r2, r4
 80047b8:	462b      	mov	r3, r5
 80047ba:	f7fb fe85 	bl	80004c8 <__aeabi_dmul>
 80047be:	a370      	add	r3, pc, #448	; (adr r3, 8004980 <__ieee754_pow+0x718>)
 80047c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047c4:	f7fb fcca 	bl	800015c <__adddf3>
 80047c8:	4622      	mov	r2, r4
 80047ca:	4606      	mov	r6, r0
 80047cc:	460f      	mov	r7, r1
 80047ce:	462b      	mov	r3, r5
 80047d0:	4620      	mov	r0, r4
 80047d2:	4629      	mov	r1, r5
 80047d4:	f7fb fe78 	bl	80004c8 <__aeabi_dmul>
 80047d8:	4602      	mov	r2, r0
 80047da:	460b      	mov	r3, r1
 80047dc:	4630      	mov	r0, r6
 80047de:	4639      	mov	r1, r7
 80047e0:	f7fb fe72 	bl	80004c8 <__aeabi_dmul>
 80047e4:	4604      	mov	r4, r0
 80047e6:	460d      	mov	r5, r1
 80047e8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80047ec:	4642      	mov	r2, r8
 80047ee:	464b      	mov	r3, r9
 80047f0:	f7fb fcb4 	bl	800015c <__adddf3>
 80047f4:	4652      	mov	r2, sl
 80047f6:	465b      	mov	r3, fp
 80047f8:	f7fb fe66 	bl	80004c8 <__aeabi_dmul>
 80047fc:	4622      	mov	r2, r4
 80047fe:	462b      	mov	r3, r5
 8004800:	f7fb fcac 	bl	800015c <__adddf3>
 8004804:	4642      	mov	r2, r8
 8004806:	4606      	mov	r6, r0
 8004808:	460f      	mov	r7, r1
 800480a:	464b      	mov	r3, r9
 800480c:	4640      	mov	r0, r8
 800480e:	4649      	mov	r1, r9
 8004810:	f7fb fe5a 	bl	80004c8 <__aeabi_dmul>
 8004814:	4602      	mov	r2, r0
 8004816:	460b      	mov	r3, r1
 8004818:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800481c:	2200      	movs	r2, #0
 800481e:	4b66      	ldr	r3, [pc, #408]	; (80049b8 <__ieee754_pow+0x750>)
 8004820:	f7fb fc9c 	bl	800015c <__adddf3>
 8004824:	4632      	mov	r2, r6
 8004826:	463b      	mov	r3, r7
 8004828:	f7fb fc98 	bl	800015c <__adddf3>
 800482c:	2400      	movs	r4, #0
 800482e:	460d      	mov	r5, r1
 8004830:	4622      	mov	r2, r4
 8004832:	460b      	mov	r3, r1
 8004834:	4640      	mov	r0, r8
 8004836:	4649      	mov	r1, r9
 8004838:	f7fb fe46 	bl	80004c8 <__aeabi_dmul>
 800483c:	2200      	movs	r2, #0
 800483e:	4680      	mov	r8, r0
 8004840:	4689      	mov	r9, r1
 8004842:	4620      	mov	r0, r4
 8004844:	4629      	mov	r1, r5
 8004846:	4b5c      	ldr	r3, [pc, #368]	; (80049b8 <__ieee754_pow+0x750>)
 8004848:	f7fb fc86 	bl	8000158 <__aeabi_dsub>
 800484c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004850:	f7fb fc82 	bl	8000158 <__aeabi_dsub>
 8004854:	4602      	mov	r2, r0
 8004856:	460b      	mov	r3, r1
 8004858:	4630      	mov	r0, r6
 800485a:	4639      	mov	r1, r7
 800485c:	f7fb fc7c 	bl	8000158 <__aeabi_dsub>
 8004860:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004864:	f7fb fe30 	bl	80004c8 <__aeabi_dmul>
 8004868:	4622      	mov	r2, r4
 800486a:	4606      	mov	r6, r0
 800486c:	460f      	mov	r7, r1
 800486e:	462b      	mov	r3, r5
 8004870:	4650      	mov	r0, sl
 8004872:	4659      	mov	r1, fp
 8004874:	f7fb fe28 	bl	80004c8 <__aeabi_dmul>
 8004878:	4602      	mov	r2, r0
 800487a:	460b      	mov	r3, r1
 800487c:	4630      	mov	r0, r6
 800487e:	4639      	mov	r1, r7
 8004880:	f7fb fc6c 	bl	800015c <__adddf3>
 8004884:	2400      	movs	r4, #0
 8004886:	4606      	mov	r6, r0
 8004888:	460f      	mov	r7, r1
 800488a:	4602      	mov	r2, r0
 800488c:	460b      	mov	r3, r1
 800488e:	4640      	mov	r0, r8
 8004890:	4649      	mov	r1, r9
 8004892:	f7fb fc63 	bl	800015c <__adddf3>
 8004896:	a33c      	add	r3, pc, #240	; (adr r3, 8004988 <__ieee754_pow+0x720>)
 8004898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800489c:	4620      	mov	r0, r4
 800489e:	460d      	mov	r5, r1
 80048a0:	f7fb fe12 	bl	80004c8 <__aeabi_dmul>
 80048a4:	4642      	mov	r2, r8
 80048a6:	464b      	mov	r3, r9
 80048a8:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80048ac:	4620      	mov	r0, r4
 80048ae:	4629      	mov	r1, r5
 80048b0:	f7fb fc52 	bl	8000158 <__aeabi_dsub>
 80048b4:	4602      	mov	r2, r0
 80048b6:	460b      	mov	r3, r1
 80048b8:	4630      	mov	r0, r6
 80048ba:	4639      	mov	r1, r7
 80048bc:	f7fb fc4c 	bl	8000158 <__aeabi_dsub>
 80048c0:	a333      	add	r3, pc, #204	; (adr r3, 8004990 <__ieee754_pow+0x728>)
 80048c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048c6:	f7fb fdff 	bl	80004c8 <__aeabi_dmul>
 80048ca:	a333      	add	r3, pc, #204	; (adr r3, 8004998 <__ieee754_pow+0x730>)
 80048cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048d0:	4606      	mov	r6, r0
 80048d2:	460f      	mov	r7, r1
 80048d4:	4620      	mov	r0, r4
 80048d6:	4629      	mov	r1, r5
 80048d8:	f7fb fdf6 	bl	80004c8 <__aeabi_dmul>
 80048dc:	4602      	mov	r2, r0
 80048de:	460b      	mov	r3, r1
 80048e0:	4630      	mov	r0, r6
 80048e2:	4639      	mov	r1, r7
 80048e4:	f7fb fc3a 	bl	800015c <__adddf3>
 80048e8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80048ea:	4b34      	ldr	r3, [pc, #208]	; (80049bc <__ieee754_pow+0x754>)
 80048ec:	4413      	add	r3, r2
 80048ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048f2:	f7fb fc33 	bl	800015c <__adddf3>
 80048f6:	4680      	mov	r8, r0
 80048f8:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80048fa:	4689      	mov	r9, r1
 80048fc:	f7fb fd7a 	bl	80003f4 <__aeabi_i2d>
 8004900:	4604      	mov	r4, r0
 8004902:	460d      	mov	r5, r1
 8004904:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004908:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800490a:	4b2d      	ldr	r3, [pc, #180]	; (80049c0 <__ieee754_pow+0x758>)
 800490c:	4413      	add	r3, r2
 800490e:	e9d3 6700 	ldrd	r6, r7, [r3]
 8004912:	4642      	mov	r2, r8
 8004914:	464b      	mov	r3, r9
 8004916:	f7fb fc21 	bl	800015c <__adddf3>
 800491a:	4632      	mov	r2, r6
 800491c:	463b      	mov	r3, r7
 800491e:	f7fb fc1d 	bl	800015c <__adddf3>
 8004922:	4622      	mov	r2, r4
 8004924:	462b      	mov	r3, r5
 8004926:	f7fb fc19 	bl	800015c <__adddf3>
 800492a:	2000      	movs	r0, #0
 800492c:	4622      	mov	r2, r4
 800492e:	462b      	mov	r3, r5
 8004930:	4682      	mov	sl, r0
 8004932:	468b      	mov	fp, r1
 8004934:	f7fb fc10 	bl	8000158 <__aeabi_dsub>
 8004938:	4632      	mov	r2, r6
 800493a:	463b      	mov	r3, r7
 800493c:	f7fb fc0c 	bl	8000158 <__aeabi_dsub>
 8004940:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004944:	f7fb fc08 	bl	8000158 <__aeabi_dsub>
 8004948:	4602      	mov	r2, r0
 800494a:	460b      	mov	r3, r1
 800494c:	4640      	mov	r0, r8
 800494e:	4649      	mov	r1, r9
 8004950:	e60b      	b.n	800456a <__ieee754_pow+0x302>
 8004952:	2601      	movs	r6, #1
 8004954:	e69f      	b.n	8004696 <__ieee754_pow+0x42e>
 8004956:	bf00      	nop
 8004958:	4a454eef 	.word	0x4a454eef
 800495c:	3fca7e28 	.word	0x3fca7e28
 8004960:	93c9db65 	.word	0x93c9db65
 8004964:	3fcd864a 	.word	0x3fcd864a
 8004968:	a91d4101 	.word	0xa91d4101
 800496c:	3fd17460 	.word	0x3fd17460
 8004970:	518f264d 	.word	0x518f264d
 8004974:	3fd55555 	.word	0x3fd55555
 8004978:	db6fabff 	.word	0xdb6fabff
 800497c:	3fdb6db6 	.word	0x3fdb6db6
 8004980:	33333303 	.word	0x33333303
 8004984:	3fe33333 	.word	0x3fe33333
 8004988:	e0000000 	.word	0xe0000000
 800498c:	3feec709 	.word	0x3feec709
 8004990:	dc3a03fd 	.word	0xdc3a03fd
 8004994:	3feec709 	.word	0x3feec709
 8004998:	145b01f5 	.word	0x145b01f5
 800499c:	be3e2fe0 	.word	0xbe3e2fe0
 80049a0:	7ff00000 	.word	0x7ff00000
 80049a4:	43400000 	.word	0x43400000
 80049a8:	0003988e 	.word	0x0003988e
 80049ac:	000bb679 	.word	0x000bb679
 80049b0:	08004fe8 	.word	0x08004fe8
 80049b4:	3ff00000 	.word	0x3ff00000
 80049b8:	40080000 	.word	0x40080000
 80049bc:	08005008 	.word	0x08005008
 80049c0:	08004ff8 	.word	0x08004ff8
 80049c4:	a39c      	add	r3, pc, #624	; (adr r3, 8004c38 <__ieee754_pow+0x9d0>)
 80049c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049ca:	4640      	mov	r0, r8
 80049cc:	4649      	mov	r1, r9
 80049ce:	f7fb fbc5 	bl	800015c <__adddf3>
 80049d2:	4622      	mov	r2, r4
 80049d4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80049d8:	462b      	mov	r3, r5
 80049da:	4650      	mov	r0, sl
 80049dc:	4639      	mov	r1, r7
 80049de:	f7fb fbbb 	bl	8000158 <__aeabi_dsub>
 80049e2:	4602      	mov	r2, r0
 80049e4:	460b      	mov	r3, r1
 80049e6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80049ea:	f7fb fffd 	bl	80009e8 <__aeabi_dcmpgt>
 80049ee:	2800      	cmp	r0, #0
 80049f0:	f47f ae06 	bne.w	8004600 <__ieee754_pow+0x398>
 80049f4:	4aa2      	ldr	r2, [pc, #648]	; (8004c80 <__ieee754_pow+0xa18>)
 80049f6:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 80049fa:	4293      	cmp	r3, r2
 80049fc:	f340 8100 	ble.w	8004c00 <__ieee754_pow+0x998>
 8004a00:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8004a04:	151b      	asrs	r3, r3, #20
 8004a06:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8004a0a:	fa4a fa03 	asr.w	sl, sl, r3
 8004a0e:	44b2      	add	sl, r6
 8004a10:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8004a14:	489b      	ldr	r0, [pc, #620]	; (8004c84 <__ieee754_pow+0xa1c>)
 8004a16:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8004a1a:	4108      	asrs	r0, r1
 8004a1c:	ea00 030a 	and.w	r3, r0, sl
 8004a20:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8004a24:	f1c1 0114 	rsb	r1, r1, #20
 8004a28:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8004a2c:	fa4a fa01 	asr.w	sl, sl, r1
 8004a30:	2e00      	cmp	r6, #0
 8004a32:	f04f 0200 	mov.w	r2, #0
 8004a36:	4620      	mov	r0, r4
 8004a38:	4629      	mov	r1, r5
 8004a3a:	bfb8      	it	lt
 8004a3c:	f1ca 0a00 	rsblt	sl, sl, #0
 8004a40:	f7fb fb8a 	bl	8000158 <__aeabi_dsub>
 8004a44:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004a48:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004a4c:	2400      	movs	r4, #0
 8004a4e:	4642      	mov	r2, r8
 8004a50:	464b      	mov	r3, r9
 8004a52:	f7fb fb83 	bl	800015c <__adddf3>
 8004a56:	a37a      	add	r3, pc, #488	; (adr r3, 8004c40 <__ieee754_pow+0x9d8>)
 8004a58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a5c:	4620      	mov	r0, r4
 8004a5e:	460d      	mov	r5, r1
 8004a60:	f7fb fd32 	bl	80004c8 <__aeabi_dmul>
 8004a64:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004a68:	4606      	mov	r6, r0
 8004a6a:	460f      	mov	r7, r1
 8004a6c:	4620      	mov	r0, r4
 8004a6e:	4629      	mov	r1, r5
 8004a70:	f7fb fb72 	bl	8000158 <__aeabi_dsub>
 8004a74:	4602      	mov	r2, r0
 8004a76:	460b      	mov	r3, r1
 8004a78:	4640      	mov	r0, r8
 8004a7a:	4649      	mov	r1, r9
 8004a7c:	f7fb fb6c 	bl	8000158 <__aeabi_dsub>
 8004a80:	a371      	add	r3, pc, #452	; (adr r3, 8004c48 <__ieee754_pow+0x9e0>)
 8004a82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a86:	f7fb fd1f 	bl	80004c8 <__aeabi_dmul>
 8004a8a:	a371      	add	r3, pc, #452	; (adr r3, 8004c50 <__ieee754_pow+0x9e8>)
 8004a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a90:	4680      	mov	r8, r0
 8004a92:	4689      	mov	r9, r1
 8004a94:	4620      	mov	r0, r4
 8004a96:	4629      	mov	r1, r5
 8004a98:	f7fb fd16 	bl	80004c8 <__aeabi_dmul>
 8004a9c:	4602      	mov	r2, r0
 8004a9e:	460b      	mov	r3, r1
 8004aa0:	4640      	mov	r0, r8
 8004aa2:	4649      	mov	r1, r9
 8004aa4:	f7fb fb5a 	bl	800015c <__adddf3>
 8004aa8:	4604      	mov	r4, r0
 8004aaa:	460d      	mov	r5, r1
 8004aac:	4602      	mov	r2, r0
 8004aae:	460b      	mov	r3, r1
 8004ab0:	4630      	mov	r0, r6
 8004ab2:	4639      	mov	r1, r7
 8004ab4:	f7fb fb52 	bl	800015c <__adddf3>
 8004ab8:	4632      	mov	r2, r6
 8004aba:	463b      	mov	r3, r7
 8004abc:	4680      	mov	r8, r0
 8004abe:	4689      	mov	r9, r1
 8004ac0:	f7fb fb4a 	bl	8000158 <__aeabi_dsub>
 8004ac4:	4602      	mov	r2, r0
 8004ac6:	460b      	mov	r3, r1
 8004ac8:	4620      	mov	r0, r4
 8004aca:	4629      	mov	r1, r5
 8004acc:	f7fb fb44 	bl	8000158 <__aeabi_dsub>
 8004ad0:	4642      	mov	r2, r8
 8004ad2:	4606      	mov	r6, r0
 8004ad4:	460f      	mov	r7, r1
 8004ad6:	464b      	mov	r3, r9
 8004ad8:	4640      	mov	r0, r8
 8004ada:	4649      	mov	r1, r9
 8004adc:	f7fb fcf4 	bl	80004c8 <__aeabi_dmul>
 8004ae0:	a35d      	add	r3, pc, #372	; (adr r3, 8004c58 <__ieee754_pow+0x9f0>)
 8004ae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ae6:	4604      	mov	r4, r0
 8004ae8:	460d      	mov	r5, r1
 8004aea:	f7fb fced 	bl	80004c8 <__aeabi_dmul>
 8004aee:	a35c      	add	r3, pc, #368	; (adr r3, 8004c60 <__ieee754_pow+0x9f8>)
 8004af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004af4:	f7fb fb30 	bl	8000158 <__aeabi_dsub>
 8004af8:	4622      	mov	r2, r4
 8004afa:	462b      	mov	r3, r5
 8004afc:	f7fb fce4 	bl	80004c8 <__aeabi_dmul>
 8004b00:	a359      	add	r3, pc, #356	; (adr r3, 8004c68 <__ieee754_pow+0xa00>)
 8004b02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b06:	f7fb fb29 	bl	800015c <__adddf3>
 8004b0a:	4622      	mov	r2, r4
 8004b0c:	462b      	mov	r3, r5
 8004b0e:	f7fb fcdb 	bl	80004c8 <__aeabi_dmul>
 8004b12:	a357      	add	r3, pc, #348	; (adr r3, 8004c70 <__ieee754_pow+0xa08>)
 8004b14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b18:	f7fb fb1e 	bl	8000158 <__aeabi_dsub>
 8004b1c:	4622      	mov	r2, r4
 8004b1e:	462b      	mov	r3, r5
 8004b20:	f7fb fcd2 	bl	80004c8 <__aeabi_dmul>
 8004b24:	a354      	add	r3, pc, #336	; (adr r3, 8004c78 <__ieee754_pow+0xa10>)
 8004b26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b2a:	f7fb fb17 	bl	800015c <__adddf3>
 8004b2e:	4622      	mov	r2, r4
 8004b30:	462b      	mov	r3, r5
 8004b32:	f7fb fcc9 	bl	80004c8 <__aeabi_dmul>
 8004b36:	4602      	mov	r2, r0
 8004b38:	460b      	mov	r3, r1
 8004b3a:	4640      	mov	r0, r8
 8004b3c:	4649      	mov	r1, r9
 8004b3e:	f7fb fb0b 	bl	8000158 <__aeabi_dsub>
 8004b42:	4604      	mov	r4, r0
 8004b44:	460d      	mov	r5, r1
 8004b46:	4602      	mov	r2, r0
 8004b48:	460b      	mov	r3, r1
 8004b4a:	4640      	mov	r0, r8
 8004b4c:	4649      	mov	r1, r9
 8004b4e:	f7fb fcbb 	bl	80004c8 <__aeabi_dmul>
 8004b52:	2200      	movs	r2, #0
 8004b54:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004b58:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004b5c:	4620      	mov	r0, r4
 8004b5e:	4629      	mov	r1, r5
 8004b60:	f7fb fafa 	bl	8000158 <__aeabi_dsub>
 8004b64:	4602      	mov	r2, r0
 8004b66:	460b      	mov	r3, r1
 8004b68:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004b6c:	f7fb fdd6 	bl	800071c <__aeabi_ddiv>
 8004b70:	4632      	mov	r2, r6
 8004b72:	4604      	mov	r4, r0
 8004b74:	460d      	mov	r5, r1
 8004b76:	463b      	mov	r3, r7
 8004b78:	4640      	mov	r0, r8
 8004b7a:	4649      	mov	r1, r9
 8004b7c:	f7fb fca4 	bl	80004c8 <__aeabi_dmul>
 8004b80:	4632      	mov	r2, r6
 8004b82:	463b      	mov	r3, r7
 8004b84:	f7fb faea 	bl	800015c <__adddf3>
 8004b88:	4602      	mov	r2, r0
 8004b8a:	460b      	mov	r3, r1
 8004b8c:	4620      	mov	r0, r4
 8004b8e:	4629      	mov	r1, r5
 8004b90:	f7fb fae2 	bl	8000158 <__aeabi_dsub>
 8004b94:	4642      	mov	r2, r8
 8004b96:	464b      	mov	r3, r9
 8004b98:	f7fb fade 	bl	8000158 <__aeabi_dsub>
 8004b9c:	4602      	mov	r2, r0
 8004b9e:	460b      	mov	r3, r1
 8004ba0:	2000      	movs	r0, #0
 8004ba2:	4939      	ldr	r1, [pc, #228]	; (8004c88 <__ieee754_pow+0xa20>)
 8004ba4:	f7fb fad8 	bl	8000158 <__aeabi_dsub>
 8004ba8:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8004bac:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8004bb0:	da29      	bge.n	8004c06 <__ieee754_pow+0x99e>
 8004bb2:	4652      	mov	r2, sl
 8004bb4:	f000 f874 	bl	8004ca0 <scalbn>
 8004bb8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004bbc:	f7ff bbfd 	b.w	80043ba <__ieee754_pow+0x152>
 8004bc0:	4b32      	ldr	r3, [pc, #200]	; (8004c8c <__ieee754_pow+0xa24>)
 8004bc2:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 8004bc6:	429f      	cmp	r7, r3
 8004bc8:	f77f af14 	ble.w	80049f4 <__ieee754_pow+0x78c>
 8004bcc:	4b30      	ldr	r3, [pc, #192]	; (8004c90 <__ieee754_pow+0xa28>)
 8004bce:	440b      	add	r3, r1
 8004bd0:	4303      	orrs	r3, r0
 8004bd2:	d009      	beq.n	8004be8 <__ieee754_pow+0x980>
 8004bd4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004bd8:	2200      	movs	r2, #0
 8004bda:	2300      	movs	r3, #0
 8004bdc:	f7fb fee6 	bl	80009ac <__aeabi_dcmplt>
 8004be0:	3800      	subs	r0, #0
 8004be2:	bf18      	it	ne
 8004be4:	2001      	movne	r0, #1
 8004be6:	e452      	b.n	800448e <__ieee754_pow+0x226>
 8004be8:	4622      	mov	r2, r4
 8004bea:	462b      	mov	r3, r5
 8004bec:	f7fb fab4 	bl	8000158 <__aeabi_dsub>
 8004bf0:	4642      	mov	r2, r8
 8004bf2:	464b      	mov	r3, r9
 8004bf4:	f7fb feee 	bl	80009d4 <__aeabi_dcmpge>
 8004bf8:	2800      	cmp	r0, #0
 8004bfa:	f43f aefb 	beq.w	80049f4 <__ieee754_pow+0x78c>
 8004bfe:	e7e9      	b.n	8004bd4 <__ieee754_pow+0x96c>
 8004c00:	f04f 0a00 	mov.w	sl, #0
 8004c04:	e720      	b.n	8004a48 <__ieee754_pow+0x7e0>
 8004c06:	4621      	mov	r1, r4
 8004c08:	e7d6      	b.n	8004bb8 <__ieee754_pow+0x950>
 8004c0a:	f04f 0b00 	mov.w	fp, #0
 8004c0e:	f8df c078 	ldr.w	ip, [pc, #120]	; 8004c88 <__ieee754_pow+0xa20>
 8004c12:	f7ff bbb9 	b.w	8004388 <__ieee754_pow+0x120>
 8004c16:	f04f 0b00 	mov.w	fp, #0
 8004c1a:	f04f 0c00 	mov.w	ip, #0
 8004c1e:	f7ff bbb3 	b.w	8004388 <__ieee754_pow+0x120>
 8004c22:	4640      	mov	r0, r8
 8004c24:	4649      	mov	r1, r9
 8004c26:	f7ff bb3c 	b.w	80042a2 <__ieee754_pow+0x3a>
 8004c2a:	9200      	str	r2, [sp, #0]
 8004c2c:	f7ff bb88 	b.w	8004340 <__ieee754_pow+0xd8>
 8004c30:	2300      	movs	r3, #0
 8004c32:	f7ff bb72 	b.w	800431a <__ieee754_pow+0xb2>
 8004c36:	bf00      	nop
 8004c38:	652b82fe 	.word	0x652b82fe
 8004c3c:	3c971547 	.word	0x3c971547
 8004c40:	00000000 	.word	0x00000000
 8004c44:	3fe62e43 	.word	0x3fe62e43
 8004c48:	fefa39ef 	.word	0xfefa39ef
 8004c4c:	3fe62e42 	.word	0x3fe62e42
 8004c50:	0ca86c39 	.word	0x0ca86c39
 8004c54:	be205c61 	.word	0xbe205c61
 8004c58:	72bea4d0 	.word	0x72bea4d0
 8004c5c:	3e663769 	.word	0x3e663769
 8004c60:	c5d26bf1 	.word	0xc5d26bf1
 8004c64:	3ebbbd41 	.word	0x3ebbbd41
 8004c68:	af25de2c 	.word	0xaf25de2c
 8004c6c:	3f11566a 	.word	0x3f11566a
 8004c70:	16bebd93 	.word	0x16bebd93
 8004c74:	3f66c16c 	.word	0x3f66c16c
 8004c78:	5555553e 	.word	0x5555553e
 8004c7c:	3fc55555 	.word	0x3fc55555
 8004c80:	3fe00000 	.word	0x3fe00000
 8004c84:	fff00000 	.word	0xfff00000
 8004c88:	3ff00000 	.word	0x3ff00000
 8004c8c:	4090cbff 	.word	0x4090cbff
 8004c90:	3f6f3400 	.word	0x3f6f3400

08004c94 <fabs>:
 8004c94:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8004c98:	4619      	mov	r1, r3
 8004c9a:	4770      	bx	lr
 8004c9c:	0000      	movs	r0, r0
	...

08004ca0 <scalbn>:
 8004ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ca2:	4616      	mov	r6, r2
 8004ca4:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8004ca8:	4604      	mov	r4, r0
 8004caa:	460d      	mov	r5, r1
 8004cac:	460b      	mov	r3, r1
 8004cae:	b992      	cbnz	r2, 8004cd6 <scalbn+0x36>
 8004cb0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8004cb4:	4303      	orrs	r3, r0
 8004cb6:	d03c      	beq.n	8004d32 <scalbn+0x92>
 8004cb8:	4b31      	ldr	r3, [pc, #196]	; (8004d80 <scalbn+0xe0>)
 8004cba:	2200      	movs	r2, #0
 8004cbc:	f7fb fc04 	bl	80004c8 <__aeabi_dmul>
 8004cc0:	4b30      	ldr	r3, [pc, #192]	; (8004d84 <scalbn+0xe4>)
 8004cc2:	4604      	mov	r4, r0
 8004cc4:	429e      	cmp	r6, r3
 8004cc6:	460d      	mov	r5, r1
 8004cc8:	da0f      	bge.n	8004cea <scalbn+0x4a>
 8004cca:	a329      	add	r3, pc, #164	; (adr r3, 8004d70 <scalbn+0xd0>)
 8004ccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cd0:	f7fb fbfa 	bl	80004c8 <__aeabi_dmul>
 8004cd4:	e006      	b.n	8004ce4 <scalbn+0x44>
 8004cd6:	f240 77ff 	movw	r7, #2047	; 0x7ff
 8004cda:	42ba      	cmp	r2, r7
 8004cdc:	d109      	bne.n	8004cf2 <scalbn+0x52>
 8004cde:	4602      	mov	r2, r0
 8004ce0:	f7fb fa3c 	bl	800015c <__adddf3>
 8004ce4:	4604      	mov	r4, r0
 8004ce6:	460d      	mov	r5, r1
 8004ce8:	e023      	b.n	8004d32 <scalbn+0x92>
 8004cea:	460b      	mov	r3, r1
 8004cec:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8004cf0:	3a36      	subs	r2, #54	; 0x36
 8004cf2:	f24c 3150 	movw	r1, #50000	; 0xc350
 8004cf6:	428e      	cmp	r6, r1
 8004cf8:	dd0e      	ble.n	8004d18 <scalbn+0x78>
 8004cfa:	a31f      	add	r3, pc, #124	; (adr r3, 8004d78 <scalbn+0xd8>)
 8004cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d00:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 8004d04:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 8004d08:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 8004d0c:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 8004d10:	481d      	ldr	r0, [pc, #116]	; (8004d88 <scalbn+0xe8>)
 8004d12:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 8004d16:	e7db      	b.n	8004cd0 <scalbn+0x30>
 8004d18:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8004d1c:	4432      	add	r2, r6
 8004d1e:	428a      	cmp	r2, r1
 8004d20:	dceb      	bgt.n	8004cfa <scalbn+0x5a>
 8004d22:	2a00      	cmp	r2, #0
 8004d24:	dd08      	ble.n	8004d38 <scalbn+0x98>
 8004d26:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8004d2a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004d2e:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8004d32:	4620      	mov	r0, r4
 8004d34:	4629      	mov	r1, r5
 8004d36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d38:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8004d3c:	da0c      	bge.n	8004d58 <scalbn+0xb8>
 8004d3e:	a30c      	add	r3, pc, #48	; (adr r3, 8004d70 <scalbn+0xd0>)
 8004d40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d44:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 8004d48:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 8004d4c:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 8004d50:	480e      	ldr	r0, [pc, #56]	; (8004d8c <scalbn+0xec>)
 8004d52:	f041 011f 	orr.w	r1, r1, #31
 8004d56:	e7bb      	b.n	8004cd0 <scalbn+0x30>
 8004d58:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8004d5c:	3236      	adds	r2, #54	; 0x36
 8004d5e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004d62:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8004d66:	4620      	mov	r0, r4
 8004d68:	4629      	mov	r1, r5
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	4b08      	ldr	r3, [pc, #32]	; (8004d90 <scalbn+0xf0>)
 8004d6e:	e7af      	b.n	8004cd0 <scalbn+0x30>
 8004d70:	c2f8f359 	.word	0xc2f8f359
 8004d74:	01a56e1f 	.word	0x01a56e1f
 8004d78:	8800759c 	.word	0x8800759c
 8004d7c:	7e37e43c 	.word	0x7e37e43c
 8004d80:	43500000 	.word	0x43500000
 8004d84:	ffff3cb0 	.word	0xffff3cb0
 8004d88:	8800759c 	.word	0x8800759c
 8004d8c:	c2f8f359 	.word	0xc2f8f359
 8004d90:	3c900000 	.word	0x3c900000

08004d94 <with_errno>:
 8004d94:	b570      	push	{r4, r5, r6, lr}
 8004d96:	4604      	mov	r4, r0
 8004d98:	460d      	mov	r5, r1
 8004d9a:	4616      	mov	r6, r2
 8004d9c:	f7ff f9cc 	bl	8004138 <__errno>
 8004da0:	4629      	mov	r1, r5
 8004da2:	6006      	str	r6, [r0, #0]
 8004da4:	4620      	mov	r0, r4
 8004da6:	bd70      	pop	{r4, r5, r6, pc}

08004da8 <xflow>:
 8004da8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004daa:	4615      	mov	r5, r2
 8004dac:	461c      	mov	r4, r3
 8004dae:	b180      	cbz	r0, 8004dd2 <xflow+0x2a>
 8004db0:	4610      	mov	r0, r2
 8004db2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8004db6:	e9cd 0100 	strd	r0, r1, [sp]
 8004dba:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004dbe:	4628      	mov	r0, r5
 8004dc0:	4621      	mov	r1, r4
 8004dc2:	f7fb fb81 	bl	80004c8 <__aeabi_dmul>
 8004dc6:	2222      	movs	r2, #34	; 0x22
 8004dc8:	b003      	add	sp, #12
 8004dca:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004dce:	f7ff bfe1 	b.w	8004d94 <with_errno>
 8004dd2:	4610      	mov	r0, r2
 8004dd4:	4619      	mov	r1, r3
 8004dd6:	e7ee      	b.n	8004db6 <xflow+0xe>

08004dd8 <__math_uflow>:
 8004dd8:	2200      	movs	r2, #0
 8004dda:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004dde:	f7ff bfe3 	b.w	8004da8 <xflow>

08004de2 <__math_oflow>:
 8004de2:	2200      	movs	r2, #0
 8004de4:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8004de8:	f7ff bfde 	b.w	8004da8 <xflow>

08004dec <__ieee754_sqrt>:
 8004dec:	f8df c1a0 	ldr.w	ip, [pc, #416]	; 8004f90 <__ieee754_sqrt+0x1a4>
 8004df0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004df4:	ea3c 0c01 	bics.w	ip, ip, r1
 8004df8:	460b      	mov	r3, r1
 8004dfa:	4606      	mov	r6, r0
 8004dfc:	460d      	mov	r5, r1
 8004dfe:	460a      	mov	r2, r1
 8004e00:	4604      	mov	r4, r0
 8004e02:	d10e      	bne.n	8004e22 <__ieee754_sqrt+0x36>
 8004e04:	4602      	mov	r2, r0
 8004e06:	f7fb fb5f 	bl	80004c8 <__aeabi_dmul>
 8004e0a:	4602      	mov	r2, r0
 8004e0c:	460b      	mov	r3, r1
 8004e0e:	4630      	mov	r0, r6
 8004e10:	4629      	mov	r1, r5
 8004e12:	f7fb f9a3 	bl	800015c <__adddf3>
 8004e16:	4606      	mov	r6, r0
 8004e18:	460d      	mov	r5, r1
 8004e1a:	4630      	mov	r0, r6
 8004e1c:	4629      	mov	r1, r5
 8004e1e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e22:	2900      	cmp	r1, #0
 8004e24:	dc0d      	bgt.n	8004e42 <__ieee754_sqrt+0x56>
 8004e26:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8004e2a:	ea5c 0c00 	orrs.w	ip, ip, r0
 8004e2e:	d0f4      	beq.n	8004e1a <__ieee754_sqrt+0x2e>
 8004e30:	b139      	cbz	r1, 8004e42 <__ieee754_sqrt+0x56>
 8004e32:	4602      	mov	r2, r0
 8004e34:	f7fb f990 	bl	8000158 <__aeabi_dsub>
 8004e38:	4602      	mov	r2, r0
 8004e3a:	460b      	mov	r3, r1
 8004e3c:	f7fb fc6e 	bl	800071c <__aeabi_ddiv>
 8004e40:	e7e9      	b.n	8004e16 <__ieee754_sqrt+0x2a>
 8004e42:	1512      	asrs	r2, r2, #20
 8004e44:	f000 8089 	beq.w	8004f5a <__ieee754_sqrt+0x16e>
 8004e48:	2500      	movs	r5, #0
 8004e4a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004e4e:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8004e52:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e56:	07d2      	lsls	r2, r2, #31
 8004e58:	bf5c      	itt	pl
 8004e5a:	005b      	lslpl	r3, r3, #1
 8004e5c:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 8004e60:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8004e64:	bf58      	it	pl
 8004e66:	0064      	lslpl	r4, r4, #1
 8004e68:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8004e6c:	0062      	lsls	r2, r4, #1
 8004e6e:	2016      	movs	r0, #22
 8004e70:	4629      	mov	r1, r5
 8004e72:	f44f 1400 	mov.w	r4, #2097152	; 0x200000
 8004e76:	1076      	asrs	r6, r6, #1
 8004e78:	190f      	adds	r7, r1, r4
 8004e7a:	429f      	cmp	r7, r3
 8004e7c:	bfde      	ittt	le
 8004e7e:	1bdb      	suble	r3, r3, r7
 8004e80:	1939      	addle	r1, r7, r4
 8004e82:	192d      	addle	r5, r5, r4
 8004e84:	005b      	lsls	r3, r3, #1
 8004e86:	3801      	subs	r0, #1
 8004e88:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8004e8c:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8004e90:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8004e94:	d1f0      	bne.n	8004e78 <__ieee754_sqrt+0x8c>
 8004e96:	4604      	mov	r4, r0
 8004e98:	2720      	movs	r7, #32
 8004e9a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8004e9e:	428b      	cmp	r3, r1
 8004ea0:	eb0c 0e00 	add.w	lr, ip, r0
 8004ea4:	dc02      	bgt.n	8004eac <__ieee754_sqrt+0xc0>
 8004ea6:	d113      	bne.n	8004ed0 <__ieee754_sqrt+0xe4>
 8004ea8:	4596      	cmp	lr, r2
 8004eaa:	d811      	bhi.n	8004ed0 <__ieee754_sqrt+0xe4>
 8004eac:	f1be 0f00 	cmp.w	lr, #0
 8004eb0:	eb0e 000c 	add.w	r0, lr, ip
 8004eb4:	da56      	bge.n	8004f64 <__ieee754_sqrt+0x178>
 8004eb6:	2800      	cmp	r0, #0
 8004eb8:	db54      	blt.n	8004f64 <__ieee754_sqrt+0x178>
 8004eba:	f101 0801 	add.w	r8, r1, #1
 8004ebe:	1a5b      	subs	r3, r3, r1
 8004ec0:	4641      	mov	r1, r8
 8004ec2:	4596      	cmp	lr, r2
 8004ec4:	bf88      	it	hi
 8004ec6:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8004eca:	eba2 020e 	sub.w	r2, r2, lr
 8004ece:	4464      	add	r4, ip
 8004ed0:	005b      	lsls	r3, r3, #1
 8004ed2:	3f01      	subs	r7, #1
 8004ed4:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8004ed8:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8004edc:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8004ee0:	d1dd      	bne.n	8004e9e <__ieee754_sqrt+0xb2>
 8004ee2:	4313      	orrs	r3, r2
 8004ee4:	d01b      	beq.n	8004f1e <__ieee754_sqrt+0x132>
 8004ee6:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8004f94 <__ieee754_sqrt+0x1a8>
 8004eea:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8004f98 <__ieee754_sqrt+0x1ac>
 8004eee:	e9da 0100 	ldrd	r0, r1, [sl]
 8004ef2:	e9db 2300 	ldrd	r2, r3, [fp]
 8004ef6:	f7fb f92f 	bl	8000158 <__aeabi_dsub>
 8004efa:	e9da 8900 	ldrd	r8, r9, [sl]
 8004efe:	4602      	mov	r2, r0
 8004f00:	460b      	mov	r3, r1
 8004f02:	4640      	mov	r0, r8
 8004f04:	4649      	mov	r1, r9
 8004f06:	f7fb fd5b 	bl	80009c0 <__aeabi_dcmple>
 8004f0a:	b140      	cbz	r0, 8004f1e <__ieee754_sqrt+0x132>
 8004f0c:	e9da 0100 	ldrd	r0, r1, [sl]
 8004f10:	e9db 2300 	ldrd	r2, r3, [fp]
 8004f14:	f1b4 3fff 	cmp.w	r4, #4294967295
 8004f18:	d126      	bne.n	8004f68 <__ieee754_sqrt+0x17c>
 8004f1a:	463c      	mov	r4, r7
 8004f1c:	3501      	adds	r5, #1
 8004f1e:	106b      	asrs	r3, r5, #1
 8004f20:	0864      	lsrs	r4, r4, #1
 8004f22:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8004f26:	07ea      	lsls	r2, r5, #31
 8004f28:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8004f2c:	bf48      	it	mi
 8004f2e:	f044 4400 	orrmi.w	r4, r4, #2147483648	; 0x80000000
 8004f32:	4620      	mov	r0, r4
 8004f34:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 8004f38:	e76d      	b.n	8004e16 <__ieee754_sqrt+0x2a>
 8004f3a:	0ae3      	lsrs	r3, r4, #11
 8004f3c:	3915      	subs	r1, #21
 8004f3e:	0564      	lsls	r4, r4, #21
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d0fa      	beq.n	8004f3a <__ieee754_sqrt+0x14e>
 8004f44:	02d8      	lsls	r0, r3, #11
 8004f46:	d50a      	bpl.n	8004f5e <__ieee754_sqrt+0x172>
 8004f48:	f1c2 0020 	rsb	r0, r2, #32
 8004f4c:	fa24 f000 	lsr.w	r0, r4, r0
 8004f50:	1e55      	subs	r5, r2, #1
 8004f52:	4094      	lsls	r4, r2
 8004f54:	4303      	orrs	r3, r0
 8004f56:	1b4a      	subs	r2, r1, r5
 8004f58:	e776      	b.n	8004e48 <__ieee754_sqrt+0x5c>
 8004f5a:	4611      	mov	r1, r2
 8004f5c:	e7f0      	b.n	8004f40 <__ieee754_sqrt+0x154>
 8004f5e:	005b      	lsls	r3, r3, #1
 8004f60:	3201      	adds	r2, #1
 8004f62:	e7ef      	b.n	8004f44 <__ieee754_sqrt+0x158>
 8004f64:	4688      	mov	r8, r1
 8004f66:	e7aa      	b.n	8004ebe <__ieee754_sqrt+0xd2>
 8004f68:	f7fb f8f8 	bl	800015c <__adddf3>
 8004f6c:	e9da 8900 	ldrd	r8, r9, [sl]
 8004f70:	4602      	mov	r2, r0
 8004f72:	460b      	mov	r3, r1
 8004f74:	4640      	mov	r0, r8
 8004f76:	4649      	mov	r1, r9
 8004f78:	f7fb fd18 	bl	80009ac <__aeabi_dcmplt>
 8004f7c:	b120      	cbz	r0, 8004f88 <__ieee754_sqrt+0x19c>
 8004f7e:	1ca1      	adds	r1, r4, #2
 8004f80:	bf08      	it	eq
 8004f82:	3501      	addeq	r5, #1
 8004f84:	3402      	adds	r4, #2
 8004f86:	e7ca      	b.n	8004f1e <__ieee754_sqrt+0x132>
 8004f88:	3401      	adds	r4, #1
 8004f8a:	f024 0401 	bic.w	r4, r4, #1
 8004f8e:	e7c6      	b.n	8004f1e <__ieee754_sqrt+0x132>
 8004f90:	7ff00000 	.word	0x7ff00000
 8004f94:	20000060 	.word	0x20000060
 8004f98:	20000068 	.word	0x20000068

08004f9c <_init>:
 8004f9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f9e:	bf00      	nop
 8004fa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fa2:	bc08      	pop	{r3}
 8004fa4:	469e      	mov	lr, r3
 8004fa6:	4770      	bx	lr

08004fa8 <_fini>:
 8004fa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004faa:	bf00      	nop
 8004fac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fae:	bc08      	pop	{r3}
 8004fb0:	469e      	mov	lr, r3
 8004fb2:	4770      	bx	lr
