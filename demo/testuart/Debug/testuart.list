
testuart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a338  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000053c  0800a448  0800a448  0001a448  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a984  0800a984  00020214  2**0
                  CONTENTS
  4 .ARM          00000000  0800a984  0800a984  00020214  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a984  0800a984  00020214  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a984  0800a984  0001a984  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a988  0800a988  0001a988  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000214  20000000  0800a98c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000028c  20000214  0800aba0  00020214  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004a0  0800aba0  000204a0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001093e  00000000  00000000  0002023d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002809  00000000  00000000  00030b7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e90  00000000  00000000  00033388  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d50  00000000  00000000  00034218  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019283  00000000  00000000  00034f68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000113e0  00000000  00000000  0004e1eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c278  00000000  00000000  0005f5cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000eb843  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000052ec  00000000  00000000  000eb894  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000214 	.word	0x20000214
 800012c:	00000000 	.word	0x00000000
 8000130:	0800a430 	.word	0x0800a430

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000218 	.word	0x20000218
 800014c:	0800a430 	.word	0x0800a430

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd6:	2afd      	cmp	r2, #253	; 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	; 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	; 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	; 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__gesf2>:
 8001024:	f04f 3cff 	mov.w	ip, #4294967295
 8001028:	e006      	b.n	8001038 <__cmpsf2+0x4>
 800102a:	bf00      	nop

0800102c <__lesf2>:
 800102c:	f04f 0c01 	mov.w	ip, #1
 8001030:	e002      	b.n	8001038 <__cmpsf2+0x4>
 8001032:	bf00      	nop

08001034 <__cmpsf2>:
 8001034:	f04f 0c01 	mov.w	ip, #1
 8001038:	f84d cd04 	str.w	ip, [sp, #-4]!
 800103c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001040:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001044:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001048:	bf18      	it	ne
 800104a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800104e:	d011      	beq.n	8001074 <__cmpsf2+0x40>
 8001050:	b001      	add	sp, #4
 8001052:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001056:	bf18      	it	ne
 8001058:	ea90 0f01 	teqne	r0, r1
 800105c:	bf58      	it	pl
 800105e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001062:	bf88      	it	hi
 8001064:	17c8      	asrhi	r0, r1, #31
 8001066:	bf38      	it	cc
 8001068:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800106c:	bf18      	it	ne
 800106e:	f040 0001 	orrne.w	r0, r0, #1
 8001072:	4770      	bx	lr
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	d102      	bne.n	8001080 <__cmpsf2+0x4c>
 800107a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800107e:	d105      	bne.n	800108c <__cmpsf2+0x58>
 8001080:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001084:	d1e4      	bne.n	8001050 <__cmpsf2+0x1c>
 8001086:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108a:	d0e1      	beq.n	8001050 <__cmpsf2+0x1c>
 800108c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop

08001094 <__aeabi_cfrcmple>:
 8001094:	4684      	mov	ip, r0
 8001096:	4608      	mov	r0, r1
 8001098:	4661      	mov	r1, ip
 800109a:	e7ff      	b.n	800109c <__aeabi_cfcmpeq>

0800109c <__aeabi_cfcmpeq>:
 800109c:	b50f      	push	{r0, r1, r2, r3, lr}
 800109e:	f7ff ffc9 	bl	8001034 <__cmpsf2>
 80010a2:	2800      	cmp	r0, #0
 80010a4:	bf48      	it	mi
 80010a6:	f110 0f00 	cmnmi.w	r0, #0
 80010aa:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010ac <__aeabi_fcmpeq>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff fff4 	bl	800109c <__aeabi_cfcmpeq>
 80010b4:	bf0c      	ite	eq
 80010b6:	2001      	moveq	r0, #1
 80010b8:	2000      	movne	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmplt>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff ffea 	bl	800109c <__aeabi_cfcmpeq>
 80010c8:	bf34      	ite	cc
 80010ca:	2001      	movcc	r0, #1
 80010cc:	2000      	movcs	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmple>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffe0 	bl	800109c <__aeabi_cfcmpeq>
 80010dc:	bf94      	ite	ls
 80010de:	2001      	movls	r0, #1
 80010e0:	2000      	movhi	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmpge>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffd2 	bl	8001094 <__aeabi_cfrcmple>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpgt>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffc8 	bl	8001094 <__aeabi_cfrcmple>
 8001104:	bf34      	ite	cc
 8001106:	2001      	movcc	r0, #1
 8001108:	2000      	movcs	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_f2iz>:
 8001110:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001114:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001118:	d30f      	bcc.n	800113a <__aeabi_f2iz+0x2a>
 800111a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800111e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001122:	d90d      	bls.n	8001140 <__aeabi_f2iz+0x30>
 8001124:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001128:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800112c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001130:	fa23 f002 	lsr.w	r0, r3, r2
 8001134:	bf18      	it	ne
 8001136:	4240      	negne	r0, r0
 8001138:	4770      	bx	lr
 800113a:	f04f 0000 	mov.w	r0, #0
 800113e:	4770      	bx	lr
 8001140:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001144:	d101      	bne.n	800114a <__aeabi_f2iz+0x3a>
 8001146:	0242      	lsls	r2, r0, #9
 8001148:	d105      	bne.n	8001156 <__aeabi_f2iz+0x46>
 800114a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800114e:	bf08      	it	eq
 8001150:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001154:	4770      	bx	lr
 8001156:	f04f 0000 	mov.w	r0, #0
 800115a:	4770      	bx	lr

0800115c <__aeabi_f2uiz>:
 800115c:	0042      	lsls	r2, r0, #1
 800115e:	d20e      	bcs.n	800117e <__aeabi_f2uiz+0x22>
 8001160:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001164:	d30b      	bcc.n	800117e <__aeabi_f2uiz+0x22>
 8001166:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800116a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800116e:	d409      	bmi.n	8001184 <__aeabi_f2uiz+0x28>
 8001170:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001174:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001178:	fa23 f002 	lsr.w	r0, r3, r2
 800117c:	4770      	bx	lr
 800117e:	f04f 0000 	mov.w	r0, #0
 8001182:	4770      	bx	lr
 8001184:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001188:	d101      	bne.n	800118e <__aeabi_f2uiz+0x32>
 800118a:	0242      	lsls	r2, r0, #9
 800118c:	d102      	bne.n	8001194 <__aeabi_f2uiz+0x38>
 800118e:	f04f 30ff 	mov.w	r0, #4294967295
 8001192:	4770      	bx	lr
 8001194:	f04f 0000 	mov.w	r0, #0
 8001198:	4770      	bx	lr
 800119a:	bf00      	nop

0800119c <__aeabi_d2lz>:
 800119c:	b538      	push	{r3, r4, r5, lr}
 800119e:	4605      	mov	r5, r0
 80011a0:	460c      	mov	r4, r1
 80011a2:	2200      	movs	r2, #0
 80011a4:	2300      	movs	r3, #0
 80011a6:	4628      	mov	r0, r5
 80011a8:	4621      	mov	r1, r4
 80011aa:	f7ff fc07 	bl	80009bc <__aeabi_dcmplt>
 80011ae:	b928      	cbnz	r0, 80011bc <__aeabi_d2lz+0x20>
 80011b0:	4628      	mov	r0, r5
 80011b2:	4621      	mov	r1, r4
 80011b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80011b8:	f000 b80a 	b.w	80011d0 <__aeabi_d2ulz>
 80011bc:	4628      	mov	r0, r5
 80011be:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 80011c2:	f000 f805 	bl	80011d0 <__aeabi_d2ulz>
 80011c6:	4240      	negs	r0, r0
 80011c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80011cc:	bd38      	pop	{r3, r4, r5, pc}
 80011ce:	bf00      	nop

080011d0 <__aeabi_d2ulz>:
 80011d0:	b5d0      	push	{r4, r6, r7, lr}
 80011d2:	2200      	movs	r2, #0
 80011d4:	4b0b      	ldr	r3, [pc, #44]	; (8001204 <__aeabi_d2ulz+0x34>)
 80011d6:	4606      	mov	r6, r0
 80011d8:	460f      	mov	r7, r1
 80011da:	f7ff f97d 	bl	80004d8 <__aeabi_dmul>
 80011de:	f7ff fc53 	bl	8000a88 <__aeabi_d2uiz>
 80011e2:	4604      	mov	r4, r0
 80011e4:	f7ff f8fe 	bl	80003e4 <__aeabi_ui2d>
 80011e8:	2200      	movs	r2, #0
 80011ea:	4b07      	ldr	r3, [pc, #28]	; (8001208 <__aeabi_d2ulz+0x38>)
 80011ec:	f7ff f974 	bl	80004d8 <__aeabi_dmul>
 80011f0:	4602      	mov	r2, r0
 80011f2:	460b      	mov	r3, r1
 80011f4:	4630      	mov	r0, r6
 80011f6:	4639      	mov	r1, r7
 80011f8:	f7fe ffb6 	bl	8000168 <__aeabi_dsub>
 80011fc:	f7ff fc44 	bl	8000a88 <__aeabi_d2uiz>
 8001200:	4621      	mov	r1, r4
 8001202:	bdd0      	pop	{r4, r6, r7, pc}
 8001204:	3df00000 	.word	0x3df00000
 8001208:	41f00000 	.word	0x41f00000

0800120c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001210:	f000 fccc 	bl	8001bac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001214:	f000 f825 	bl	8001262 <SystemClock_Config>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001218:	f000 f9cc 	bl	80015b4 <MX_GPIO_Init>
  MX_TIM2_Init();
 800121c:	f000 f8b8 	bl	8001390 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001220:	f000 f902 	bl	8001428 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001224:	f000 f94e 	bl	80014c4 <MX_TIM4_Init>
  MX_USART2_UART_Init();
 8001228:	f000 f99a 	bl	8001560 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 800122c:	f000 f85e 	bl	80012ec <MX_TIM1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  khoi_tao();
 8001230:	f003 f8a6 	bl	8004380 <khoi_tao>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  /* Reset */
	  	 reset_step();
 8001234:	f003 f854 	bl	80042e0 <reset_step>
	     reset_thong_so();
 8001238:	f003 f86c 	bl	8004314 <reset_thong_so>
	/* Nhận tín hiệu từ UART */
	     wait_uart();
 800123c:	f003 f986 	bl	800454c <wait_uart>
		  /* Gán giá trị cho các biến */
		 gan_du_lieu_uart();
 8001240:	f003 f8b0 	bl	80043a4 <gan_du_lieu_uart>
		 /* reset thông số giá trị đếm của các motor */
		 reset_gia_tri_dem();
 8001244:	f003 f8ea 	bl	800441c <reset_gia_tri_dem>
		  /* Xác định hướng quay */
		 director();
 8001248:	f003 fb58 	bl	80048fc <director>
		  /* Gửi tín hiệu cho Encoder */
		 send_encoder_begin();
 800124c:	f003 f906 	bl	800445c <send_encoder_begin>
		  /* Bắt đầu quay động cơ*/
		 begin_motor();
 8001250:	f003 f928 	bl	80044a4 <begin_motor>
		  /* Đợi động cơ quay xong*/
		 wait_motor_finish();
 8001254:	f003 f98a 	bl	800456c <wait_motor_finish>
		  /* Sau khi quay xong */
		 motor_finish();
 8001258:	f003 f9a2 	bl	80045a0 <motor_finish>
		 send_encoder_finish();
 800125c:	f003 f910 	bl	8004480 <send_encoder_finish>
	  	 reset_step();
 8001260:	e7e8      	b.n	8001234 <main+0x28>

08001262 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001262:	b580      	push	{r7, lr}
 8001264:	b090      	sub	sp, #64	; 0x40
 8001266:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001268:	f107 0318 	add.w	r3, r7, #24
 800126c:	2228      	movs	r2, #40	; 0x28
 800126e:	2100      	movs	r1, #0
 8001270:	4618      	mov	r0, r3
 8001272:	f004 f871 	bl	8005358 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001276:	1d3b      	adds	r3, r7, #4
 8001278:	2200      	movs	r2, #0
 800127a:	601a      	str	r2, [r3, #0]
 800127c:	605a      	str	r2, [r3, #4]
 800127e:	609a      	str	r2, [r3, #8]
 8001280:	60da      	str	r2, [r3, #12]
 8001282:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001284:	2301      	movs	r3, #1
 8001286:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001288:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800128c:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800128e:	2300      	movs	r3, #0
 8001290:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001292:	2301      	movs	r3, #1
 8001294:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001296:	2302      	movs	r3, #2
 8001298:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800129a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800129e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80012a0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80012a4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012a6:	f107 0318 	add.w	r3, r7, #24
 80012aa:	4618      	mov	r0, r3
 80012ac:	f001 f88c 	bl	80023c8 <HAL_RCC_OscConfig>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d001      	beq.n	80012ba <SystemClock_Config+0x58>
  {
    Error_Handler();
 80012b6:	f000 fa2d 	bl	8001714 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012ba:	230f      	movs	r3, #15
 80012bc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012be:	2302      	movs	r3, #2
 80012c0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012c2:	2300      	movs	r3, #0
 80012c4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80012c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012ca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012cc:	2300      	movs	r3, #0
 80012ce:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80012d0:	1d3b      	adds	r3, r7, #4
 80012d2:	2102      	movs	r1, #2
 80012d4:	4618      	mov	r0, r3
 80012d6:	f001 faf9 	bl	80028cc <HAL_RCC_ClockConfig>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d001      	beq.n	80012e4 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80012e0:	f000 fa18 	bl	8001714 <Error_Handler>
  }
}
 80012e4:	bf00      	nop
 80012e6:	3740      	adds	r7, #64	; 0x40
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}

080012ec <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b086      	sub	sp, #24
 80012f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012f2:	f107 0308 	add.w	r3, r7, #8
 80012f6:	2200      	movs	r2, #0
 80012f8:	601a      	str	r2, [r3, #0]
 80012fa:	605a      	str	r2, [r3, #4]
 80012fc:	609a      	str	r2, [r3, #8]
 80012fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001300:	463b      	mov	r3, r7
 8001302:	2200      	movs	r2, #0
 8001304:	601a      	str	r2, [r3, #0]
 8001306:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001308:	4b1f      	ldr	r3, [pc, #124]	; (8001388 <MX_TIM1_Init+0x9c>)
 800130a:	4a20      	ldr	r2, [pc, #128]	; (800138c <MX_TIM1_Init+0xa0>)
 800130c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 7200-1;
 800130e:	4b1e      	ldr	r3, [pc, #120]	; (8001388 <MX_TIM1_Init+0x9c>)
 8001310:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8001314:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001316:	4b1c      	ldr	r3, [pc, #112]	; (8001388 <MX_TIM1_Init+0x9c>)
 8001318:	2200      	movs	r2, #0
 800131a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000-1;
 800131c:	4b1a      	ldr	r3, [pc, #104]	; (8001388 <MX_TIM1_Init+0x9c>)
 800131e:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001322:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001324:	4b18      	ldr	r3, [pc, #96]	; (8001388 <MX_TIM1_Init+0x9c>)
 8001326:	2200      	movs	r2, #0
 8001328:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800132a:	4b17      	ldr	r3, [pc, #92]	; (8001388 <MX_TIM1_Init+0x9c>)
 800132c:	2200      	movs	r2, #0
 800132e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001330:	4b15      	ldr	r3, [pc, #84]	; (8001388 <MX_TIM1_Init+0x9c>)
 8001332:	2280      	movs	r2, #128	; 0x80
 8001334:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001336:	4814      	ldr	r0, [pc, #80]	; (8001388 <MX_TIM1_Init+0x9c>)
 8001338:	f001 fc56 	bl	8002be8 <HAL_TIM_Base_Init>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d001      	beq.n	8001346 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8001342:	f000 f9e7 	bl	8001714 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001346:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800134a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800134c:	f107 0308 	add.w	r3, r7, #8
 8001350:	4619      	mov	r1, r3
 8001352:	480d      	ldr	r0, [pc, #52]	; (8001388 <MX_TIM1_Init+0x9c>)
 8001354:	f001 fe20 	bl	8002f98 <HAL_TIM_ConfigClockSource>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800135e:	f000 f9d9 	bl	8001714 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001362:	2300      	movs	r3, #0
 8001364:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001366:	2300      	movs	r3, #0
 8001368:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800136a:	463b      	mov	r3, r7
 800136c:	4619      	mov	r1, r3
 800136e:	4806      	ldr	r0, [pc, #24]	; (8001388 <MX_TIM1_Init+0x9c>)
 8001370:	f001 fff6 	bl	8003360 <HAL_TIMEx_MasterConfigSynchronization>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d001      	beq.n	800137e <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 800137a:	f000 f9cb 	bl	8001714 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800137e:	bf00      	nop
 8001380:	3718      	adds	r7, #24
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	20000230 	.word	0x20000230
 800138c:	40012c00 	.word	0x40012c00

08001390 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b086      	sub	sp, #24
 8001394:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001396:	f107 0308 	add.w	r3, r7, #8
 800139a:	2200      	movs	r2, #0
 800139c:	601a      	str	r2, [r3, #0]
 800139e:	605a      	str	r2, [r3, #4]
 80013a0:	609a      	str	r2, [r3, #8]
 80013a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013a4:	463b      	mov	r3, r7
 80013a6:	2200      	movs	r2, #0
 80013a8:	601a      	str	r2, [r3, #0]
 80013aa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80013ac:	4b1d      	ldr	r3, [pc, #116]	; (8001424 <MX_TIM2_Init+0x94>)
 80013ae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80013b2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 720;
 80013b4:	4b1b      	ldr	r3, [pc, #108]	; (8001424 <MX_TIM2_Init+0x94>)
 80013b6:	f44f 7234 	mov.w	r2, #720	; 0x2d0
 80013ba:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013bc:	4b19      	ldr	r3, [pc, #100]	; (8001424 <MX_TIM2_Init+0x94>)
 80013be:	2200      	movs	r2, #0
 80013c0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 71;
 80013c2:	4b18      	ldr	r3, [pc, #96]	; (8001424 <MX_TIM2_Init+0x94>)
 80013c4:	2247      	movs	r2, #71	; 0x47
 80013c6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013c8:	4b16      	ldr	r3, [pc, #88]	; (8001424 <MX_TIM2_Init+0x94>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80013ce:	4b15      	ldr	r3, [pc, #84]	; (8001424 <MX_TIM2_Init+0x94>)
 80013d0:	2280      	movs	r2, #128	; 0x80
 80013d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80013d4:	4813      	ldr	r0, [pc, #76]	; (8001424 <MX_TIM2_Init+0x94>)
 80013d6:	f001 fc07 	bl	8002be8 <HAL_TIM_Base_Init>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d001      	beq.n	80013e4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80013e0:	f000 f998 	bl	8001714 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013e8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80013ea:	f107 0308 	add.w	r3, r7, #8
 80013ee:	4619      	mov	r1, r3
 80013f0:	480c      	ldr	r0, [pc, #48]	; (8001424 <MX_TIM2_Init+0x94>)
 80013f2:	f001 fdd1 	bl	8002f98 <HAL_TIM_ConfigClockSource>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d001      	beq.n	8001400 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80013fc:	f000 f98a 	bl	8001714 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001400:	2300      	movs	r3, #0
 8001402:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001404:	2300      	movs	r3, #0
 8001406:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001408:	463b      	mov	r3, r7
 800140a:	4619      	mov	r1, r3
 800140c:	4805      	ldr	r0, [pc, #20]	; (8001424 <MX_TIM2_Init+0x94>)
 800140e:	f001 ffa7 	bl	8003360 <HAL_TIMEx_MasterConfigSynchronization>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d001      	beq.n	800141c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001418:	f000 f97c 	bl	8001714 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800141c:	bf00      	nop
 800141e:	3718      	adds	r7, #24
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}
 8001424:	20000278 	.word	0x20000278

08001428 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b086      	sub	sp, #24
 800142c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800142e:	f107 0308 	add.w	r3, r7, #8
 8001432:	2200      	movs	r2, #0
 8001434:	601a      	str	r2, [r3, #0]
 8001436:	605a      	str	r2, [r3, #4]
 8001438:	609a      	str	r2, [r3, #8]
 800143a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800143c:	463b      	mov	r3, r7
 800143e:	2200      	movs	r2, #0
 8001440:	601a      	str	r2, [r3, #0]
 8001442:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001444:	4b1d      	ldr	r3, [pc, #116]	; (80014bc <MX_TIM3_Init+0x94>)
 8001446:	4a1e      	ldr	r2, [pc, #120]	; (80014c0 <MX_TIM3_Init+0x98>)
 8001448:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 720;
 800144a:	4b1c      	ldr	r3, [pc, #112]	; (80014bc <MX_TIM3_Init+0x94>)
 800144c:	f44f 7234 	mov.w	r2, #720	; 0x2d0
 8001450:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001452:	4b1a      	ldr	r3, [pc, #104]	; (80014bc <MX_TIM3_Init+0x94>)
 8001454:	2200      	movs	r2, #0
 8001456:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 71;
 8001458:	4b18      	ldr	r3, [pc, #96]	; (80014bc <MX_TIM3_Init+0x94>)
 800145a:	2247      	movs	r2, #71	; 0x47
 800145c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800145e:	4b17      	ldr	r3, [pc, #92]	; (80014bc <MX_TIM3_Init+0x94>)
 8001460:	2200      	movs	r2, #0
 8001462:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001464:	4b15      	ldr	r3, [pc, #84]	; (80014bc <MX_TIM3_Init+0x94>)
 8001466:	2280      	movs	r2, #128	; 0x80
 8001468:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800146a:	4814      	ldr	r0, [pc, #80]	; (80014bc <MX_TIM3_Init+0x94>)
 800146c:	f001 fbbc 	bl	8002be8 <HAL_TIM_Base_Init>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d001      	beq.n	800147a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001476:	f000 f94d 	bl	8001714 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800147a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800147e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001480:	f107 0308 	add.w	r3, r7, #8
 8001484:	4619      	mov	r1, r3
 8001486:	480d      	ldr	r0, [pc, #52]	; (80014bc <MX_TIM3_Init+0x94>)
 8001488:	f001 fd86 	bl	8002f98 <HAL_TIM_ConfigClockSource>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d001      	beq.n	8001496 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8001492:	f000 f93f 	bl	8001714 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001496:	2300      	movs	r3, #0
 8001498:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800149a:	2300      	movs	r3, #0
 800149c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800149e:	463b      	mov	r3, r7
 80014a0:	4619      	mov	r1, r3
 80014a2:	4806      	ldr	r0, [pc, #24]	; (80014bc <MX_TIM3_Init+0x94>)
 80014a4:	f001 ff5c 	bl	8003360 <HAL_TIMEx_MasterConfigSynchronization>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d001      	beq.n	80014b2 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80014ae:	f000 f931 	bl	8001714 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80014b2:	bf00      	nop
 80014b4:	3718      	adds	r7, #24
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	200002c0 	.word	0x200002c0
 80014c0:	40000400 	.word	0x40000400

080014c4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b086      	sub	sp, #24
 80014c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014ca:	f107 0308 	add.w	r3, r7, #8
 80014ce:	2200      	movs	r2, #0
 80014d0:	601a      	str	r2, [r3, #0]
 80014d2:	605a      	str	r2, [r3, #4]
 80014d4:	609a      	str	r2, [r3, #8]
 80014d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014d8:	463b      	mov	r3, r7
 80014da:	2200      	movs	r2, #0
 80014dc:	601a      	str	r2, [r3, #0]
 80014de:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80014e0:	4b1d      	ldr	r3, [pc, #116]	; (8001558 <MX_TIM4_Init+0x94>)
 80014e2:	4a1e      	ldr	r2, [pc, #120]	; (800155c <MX_TIM4_Init+0x98>)
 80014e4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 720;
 80014e6:	4b1c      	ldr	r3, [pc, #112]	; (8001558 <MX_TIM4_Init+0x94>)
 80014e8:	f44f 7234 	mov.w	r2, #720	; 0x2d0
 80014ec:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014ee:	4b1a      	ldr	r3, [pc, #104]	; (8001558 <MX_TIM4_Init+0x94>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80014f4:	4b18      	ldr	r3, [pc, #96]	; (8001558 <MX_TIM4_Init+0x94>)
 80014f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80014fa:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014fc:	4b16      	ldr	r3, [pc, #88]	; (8001558 <MX_TIM4_Init+0x94>)
 80014fe:	2200      	movs	r2, #0
 8001500:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001502:	4b15      	ldr	r3, [pc, #84]	; (8001558 <MX_TIM4_Init+0x94>)
 8001504:	2280      	movs	r2, #128	; 0x80
 8001506:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001508:	4813      	ldr	r0, [pc, #76]	; (8001558 <MX_TIM4_Init+0x94>)
 800150a:	f001 fb6d 	bl	8002be8 <HAL_TIM_Base_Init>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	d001      	beq.n	8001518 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8001514:	f000 f8fe 	bl	8001714 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001518:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800151c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800151e:	f107 0308 	add.w	r3, r7, #8
 8001522:	4619      	mov	r1, r3
 8001524:	480c      	ldr	r0, [pc, #48]	; (8001558 <MX_TIM4_Init+0x94>)
 8001526:	f001 fd37 	bl	8002f98 <HAL_TIM_ConfigClockSource>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d001      	beq.n	8001534 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8001530:	f000 f8f0 	bl	8001714 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001534:	2300      	movs	r3, #0
 8001536:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001538:	2300      	movs	r3, #0
 800153a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800153c:	463b      	mov	r3, r7
 800153e:	4619      	mov	r1, r3
 8001540:	4805      	ldr	r0, [pc, #20]	; (8001558 <MX_TIM4_Init+0x94>)
 8001542:	f001 ff0d 	bl	8003360 <HAL_TIMEx_MasterConfigSynchronization>
 8001546:	4603      	mov	r3, r0
 8001548:	2b00      	cmp	r3, #0
 800154a:	d001      	beq.n	8001550 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 800154c:	f000 f8e2 	bl	8001714 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001550:	bf00      	nop
 8001552:	3718      	adds	r7, #24
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}
 8001558:	20000308 	.word	0x20000308
 800155c:	40000800 	.word	0x40000800

08001560 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001564:	4b11      	ldr	r3, [pc, #68]	; (80015ac <MX_USART2_UART_Init+0x4c>)
 8001566:	4a12      	ldr	r2, [pc, #72]	; (80015b0 <MX_USART2_UART_Init+0x50>)
 8001568:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800156a:	4b10      	ldr	r3, [pc, #64]	; (80015ac <MX_USART2_UART_Init+0x4c>)
 800156c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001570:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001572:	4b0e      	ldr	r3, [pc, #56]	; (80015ac <MX_USART2_UART_Init+0x4c>)
 8001574:	2200      	movs	r2, #0
 8001576:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001578:	4b0c      	ldr	r3, [pc, #48]	; (80015ac <MX_USART2_UART_Init+0x4c>)
 800157a:	2200      	movs	r2, #0
 800157c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800157e:	4b0b      	ldr	r3, [pc, #44]	; (80015ac <MX_USART2_UART_Init+0x4c>)
 8001580:	2200      	movs	r2, #0
 8001582:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001584:	4b09      	ldr	r3, [pc, #36]	; (80015ac <MX_USART2_UART_Init+0x4c>)
 8001586:	220c      	movs	r2, #12
 8001588:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800158a:	4b08      	ldr	r3, [pc, #32]	; (80015ac <MX_USART2_UART_Init+0x4c>)
 800158c:	2200      	movs	r2, #0
 800158e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001590:	4b06      	ldr	r3, [pc, #24]	; (80015ac <MX_USART2_UART_Init+0x4c>)
 8001592:	2200      	movs	r2, #0
 8001594:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001596:	4805      	ldr	r0, [pc, #20]	; (80015ac <MX_USART2_UART_Init+0x4c>)
 8001598:	f001 ff52 	bl	8003440 <HAL_UART_Init>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d001      	beq.n	80015a6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80015a2:	f000 f8b7 	bl	8001714 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80015a6:	bf00      	nop
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	20000350 	.word	0x20000350
 80015b0:	40004400 	.word	0x40004400

080015b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b088      	sub	sp, #32
 80015b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ba:	f107 0310 	add.w	r3, r7, #16
 80015be:	2200      	movs	r2, #0
 80015c0:	601a      	str	r2, [r3, #0]
 80015c2:	605a      	str	r2, [r3, #4]
 80015c4:	609a      	str	r2, [r3, #8]
 80015c6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015c8:	4b4d      	ldr	r3, [pc, #308]	; (8001700 <MX_GPIO_Init+0x14c>)
 80015ca:	699b      	ldr	r3, [r3, #24]
 80015cc:	4a4c      	ldr	r2, [pc, #304]	; (8001700 <MX_GPIO_Init+0x14c>)
 80015ce:	f043 0310 	orr.w	r3, r3, #16
 80015d2:	6193      	str	r3, [r2, #24]
 80015d4:	4b4a      	ldr	r3, [pc, #296]	; (8001700 <MX_GPIO_Init+0x14c>)
 80015d6:	699b      	ldr	r3, [r3, #24]
 80015d8:	f003 0310 	and.w	r3, r3, #16
 80015dc:	60fb      	str	r3, [r7, #12]
 80015de:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015e0:	4b47      	ldr	r3, [pc, #284]	; (8001700 <MX_GPIO_Init+0x14c>)
 80015e2:	699b      	ldr	r3, [r3, #24]
 80015e4:	4a46      	ldr	r2, [pc, #280]	; (8001700 <MX_GPIO_Init+0x14c>)
 80015e6:	f043 0320 	orr.w	r3, r3, #32
 80015ea:	6193      	str	r3, [r2, #24]
 80015ec:	4b44      	ldr	r3, [pc, #272]	; (8001700 <MX_GPIO_Init+0x14c>)
 80015ee:	699b      	ldr	r3, [r3, #24]
 80015f0:	f003 0320 	and.w	r3, r3, #32
 80015f4:	60bb      	str	r3, [r7, #8]
 80015f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015f8:	4b41      	ldr	r3, [pc, #260]	; (8001700 <MX_GPIO_Init+0x14c>)
 80015fa:	699b      	ldr	r3, [r3, #24]
 80015fc:	4a40      	ldr	r2, [pc, #256]	; (8001700 <MX_GPIO_Init+0x14c>)
 80015fe:	f043 0304 	orr.w	r3, r3, #4
 8001602:	6193      	str	r3, [r2, #24]
 8001604:	4b3e      	ldr	r3, [pc, #248]	; (8001700 <MX_GPIO_Init+0x14c>)
 8001606:	699b      	ldr	r3, [r3, #24]
 8001608:	f003 0304 	and.w	r3, r3, #4
 800160c:	607b      	str	r3, [r7, #4]
 800160e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001610:	4b3b      	ldr	r3, [pc, #236]	; (8001700 <MX_GPIO_Init+0x14c>)
 8001612:	699b      	ldr	r3, [r3, #24]
 8001614:	4a3a      	ldr	r2, [pc, #232]	; (8001700 <MX_GPIO_Init+0x14c>)
 8001616:	f043 0308 	orr.w	r3, r3, #8
 800161a:	6193      	str	r3, [r2, #24]
 800161c:	4b38      	ldr	r3, [pc, #224]	; (8001700 <MX_GPIO_Init+0x14c>)
 800161e:	699b      	ldr	r3, [r3, #24]
 8001620:	f003 0308 	and.w	r3, r3, #8
 8001624:	603b      	str	r3, [r7, #0]
 8001626:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001628:	2200      	movs	r2, #0
 800162a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800162e:	4835      	ldr	r0, [pc, #212]	; (8001704 <MX_GPIO_Init+0x150>)
 8001630:	f000 fe9a 	bl	8002368 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 8001634:	2200      	movs	r2, #0
 8001636:	f248 31e0 	movw	r1, #33760	; 0x83e0
 800163a:	4833      	ldr	r0, [pc, #204]	; (8001708 <MX_GPIO_Init+0x154>)
 800163c:	f000 fe94 	bl	8002368 <HAL_GPIO_WritePin>
                          |GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001640:	2200      	movs	r2, #0
 8001642:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
 8001646:	4831      	ldr	r0, [pc, #196]	; (800170c <MX_GPIO_Init+0x158>)
 8001648:	f000 fe8e 	bl	8002368 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800164c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001650:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001652:	2301      	movs	r3, #1
 8001654:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001656:	2300      	movs	r3, #0
 8001658:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800165a:	2302      	movs	r3, #2
 800165c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800165e:	f107 0310 	add.w	r3, r7, #16
 8001662:	4619      	mov	r1, r3
 8001664:	4827      	ldr	r0, [pc, #156]	; (8001704 <MX_GPIO_Init+0x150>)
 8001666:	f000 fcfb 	bl	8002060 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800166a:	23e0      	movs	r3, #224	; 0xe0
 800166c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800166e:	4b28      	ldr	r3, [pc, #160]	; (8001710 <MX_GPIO_Init+0x15c>)
 8001670:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001672:	2301      	movs	r3, #1
 8001674:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001676:	f107 0310 	add.w	r3, r7, #16
 800167a:	4619      	mov	r1, r3
 800167c:	4823      	ldr	r0, [pc, #140]	; (800170c <MX_GPIO_Init+0x158>)
 800167e:	f000 fcef 	bl	8002060 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001682:	2302      	movs	r3, #2
 8001684:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001686:	4b22      	ldr	r3, [pc, #136]	; (8001710 <MX_GPIO_Init+0x15c>)
 8001688:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800168a:	2301      	movs	r3, #1
 800168c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800168e:	f107 0310 	add.w	r3, r7, #16
 8001692:	4619      	mov	r1, r3
 8001694:	481c      	ldr	r0, [pc, #112]	; (8001708 <MX_GPIO_Init+0x154>)
 8001696:	f000 fce3 	bl	8002060 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB15 PB5 PB6 PB7
                           PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 800169a:	f248 33e0 	movw	r3, #33760	; 0x83e0
 800169e:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016a0:	2301      	movs	r3, #1
 80016a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a4:	2300      	movs	r3, #0
 80016a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016a8:	2302      	movs	r3, #2
 80016aa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016ac:	f107 0310 	add.w	r3, r7, #16
 80016b0:	4619      	mov	r1, r3
 80016b2:	4815      	ldr	r0, [pc, #84]	; (8001708 <MX_GPIO_Init+0x154>)
 80016b4:	f000 fcd4 	bl	8002060 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 PA11
                           PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80016b8:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80016bc:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016be:	2301      	movs	r3, #1
 80016c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c2:	2300      	movs	r3, #0
 80016c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016c6:	2302      	movs	r3, #2
 80016c8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016ca:	f107 0310 	add.w	r3, r7, #16
 80016ce:	4619      	mov	r1, r3
 80016d0:	480e      	ldr	r0, [pc, #56]	; (800170c <MX_GPIO_Init+0x158>)
 80016d2:	f000 fcc5 	bl	8002060 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80016d6:	2200      	movs	r2, #0
 80016d8:	2100      	movs	r1, #0
 80016da:	2007      	movs	r0, #7
 80016dc:	f000 fbbd 	bl	8001e5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80016e0:	2007      	movs	r0, #7
 80016e2:	f000 fbd6 	bl	8001e92 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80016e6:	2200      	movs	r2, #0
 80016e8:	2100      	movs	r1, #0
 80016ea:	2017      	movs	r0, #23
 80016ec:	f000 fbb5 	bl	8001e5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80016f0:	2017      	movs	r0, #23
 80016f2:	f000 fbce 	bl	8001e92 <HAL_NVIC_EnableIRQ>

}
 80016f6:	bf00      	nop
 80016f8:	3720      	adds	r7, #32
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	40021000 	.word	0x40021000
 8001704:	40011000 	.word	0x40011000
 8001708:	40010c00 	.word	0x40010c00
 800170c:	40010800 	.word	0x40010800
 8001710:	10210000 	.word	0x10210000

08001714 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001718:	b672      	cpsid	i
}
 800171a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800171c:	e7fe      	b.n	800171c <Error_Handler+0x8>
	...

08001720 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001720:	b480      	push	{r7}
 8001722:	b083      	sub	sp, #12
 8001724:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001726:	4b0e      	ldr	r3, [pc, #56]	; (8001760 <HAL_MspInit+0x40>)
 8001728:	699b      	ldr	r3, [r3, #24]
 800172a:	4a0d      	ldr	r2, [pc, #52]	; (8001760 <HAL_MspInit+0x40>)
 800172c:	f043 0301 	orr.w	r3, r3, #1
 8001730:	6193      	str	r3, [r2, #24]
 8001732:	4b0b      	ldr	r3, [pc, #44]	; (8001760 <HAL_MspInit+0x40>)
 8001734:	699b      	ldr	r3, [r3, #24]
 8001736:	f003 0301 	and.w	r3, r3, #1
 800173a:	607b      	str	r3, [r7, #4]
 800173c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800173e:	4b08      	ldr	r3, [pc, #32]	; (8001760 <HAL_MspInit+0x40>)
 8001740:	69db      	ldr	r3, [r3, #28]
 8001742:	4a07      	ldr	r2, [pc, #28]	; (8001760 <HAL_MspInit+0x40>)
 8001744:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001748:	61d3      	str	r3, [r2, #28]
 800174a:	4b05      	ldr	r3, [pc, #20]	; (8001760 <HAL_MspInit+0x40>)
 800174c:	69db      	ldr	r3, [r3, #28]
 800174e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001752:	603b      	str	r3, [r7, #0]
 8001754:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001756:	bf00      	nop
 8001758:	370c      	adds	r7, #12
 800175a:	46bd      	mov	sp, r7
 800175c:	bc80      	pop	{r7}
 800175e:	4770      	bx	lr
 8001760:	40021000 	.word	0x40021000

08001764 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b086      	sub	sp, #24
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a34      	ldr	r2, [pc, #208]	; (8001844 <HAL_TIM_Base_MspInit+0xe0>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d114      	bne.n	80017a0 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001776:	4b34      	ldr	r3, [pc, #208]	; (8001848 <HAL_TIM_Base_MspInit+0xe4>)
 8001778:	699b      	ldr	r3, [r3, #24]
 800177a:	4a33      	ldr	r2, [pc, #204]	; (8001848 <HAL_TIM_Base_MspInit+0xe4>)
 800177c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001780:	6193      	str	r3, [r2, #24]
 8001782:	4b31      	ldr	r3, [pc, #196]	; (8001848 <HAL_TIM_Base_MspInit+0xe4>)
 8001784:	699b      	ldr	r3, [r3, #24]
 8001786:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800178a:	617b      	str	r3, [r7, #20]
 800178c:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 800178e:	2200      	movs	r2, #0
 8001790:	2100      	movs	r1, #0
 8001792:	2019      	movs	r0, #25
 8001794:	f000 fb61 	bl	8001e5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001798:	2019      	movs	r0, #25
 800179a:	f000 fb7a 	bl	8001e92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800179e:	e04c      	b.n	800183a <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM2)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017a8:	d114      	bne.n	80017d4 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80017aa:	4b27      	ldr	r3, [pc, #156]	; (8001848 <HAL_TIM_Base_MspInit+0xe4>)
 80017ac:	69db      	ldr	r3, [r3, #28]
 80017ae:	4a26      	ldr	r2, [pc, #152]	; (8001848 <HAL_TIM_Base_MspInit+0xe4>)
 80017b0:	f043 0301 	orr.w	r3, r3, #1
 80017b4:	61d3      	str	r3, [r2, #28]
 80017b6:	4b24      	ldr	r3, [pc, #144]	; (8001848 <HAL_TIM_Base_MspInit+0xe4>)
 80017b8:	69db      	ldr	r3, [r3, #28]
 80017ba:	f003 0301 	and.w	r3, r3, #1
 80017be:	613b      	str	r3, [r7, #16]
 80017c0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80017c2:	2200      	movs	r2, #0
 80017c4:	2100      	movs	r1, #0
 80017c6:	201c      	movs	r0, #28
 80017c8:	f000 fb47 	bl	8001e5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80017cc:	201c      	movs	r0, #28
 80017ce:	f000 fb60 	bl	8001e92 <HAL_NVIC_EnableIRQ>
}
 80017d2:	e032      	b.n	800183a <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM3)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a1c      	ldr	r2, [pc, #112]	; (800184c <HAL_TIM_Base_MspInit+0xe8>)
 80017da:	4293      	cmp	r3, r2
 80017dc:	d114      	bne.n	8001808 <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80017de:	4b1a      	ldr	r3, [pc, #104]	; (8001848 <HAL_TIM_Base_MspInit+0xe4>)
 80017e0:	69db      	ldr	r3, [r3, #28]
 80017e2:	4a19      	ldr	r2, [pc, #100]	; (8001848 <HAL_TIM_Base_MspInit+0xe4>)
 80017e4:	f043 0302 	orr.w	r3, r3, #2
 80017e8:	61d3      	str	r3, [r2, #28]
 80017ea:	4b17      	ldr	r3, [pc, #92]	; (8001848 <HAL_TIM_Base_MspInit+0xe4>)
 80017ec:	69db      	ldr	r3, [r3, #28]
 80017ee:	f003 0302 	and.w	r3, r3, #2
 80017f2:	60fb      	str	r3, [r7, #12]
 80017f4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80017f6:	2200      	movs	r2, #0
 80017f8:	2100      	movs	r1, #0
 80017fa:	201d      	movs	r0, #29
 80017fc:	f000 fb2d 	bl	8001e5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001800:	201d      	movs	r0, #29
 8001802:	f000 fb46 	bl	8001e92 <HAL_NVIC_EnableIRQ>
}
 8001806:	e018      	b.n	800183a <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM4)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a10      	ldr	r2, [pc, #64]	; (8001850 <HAL_TIM_Base_MspInit+0xec>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d113      	bne.n	800183a <HAL_TIM_Base_MspInit+0xd6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001812:	4b0d      	ldr	r3, [pc, #52]	; (8001848 <HAL_TIM_Base_MspInit+0xe4>)
 8001814:	69db      	ldr	r3, [r3, #28]
 8001816:	4a0c      	ldr	r2, [pc, #48]	; (8001848 <HAL_TIM_Base_MspInit+0xe4>)
 8001818:	f043 0304 	orr.w	r3, r3, #4
 800181c:	61d3      	str	r3, [r2, #28]
 800181e:	4b0a      	ldr	r3, [pc, #40]	; (8001848 <HAL_TIM_Base_MspInit+0xe4>)
 8001820:	69db      	ldr	r3, [r3, #28]
 8001822:	f003 0304 	and.w	r3, r3, #4
 8001826:	60bb      	str	r3, [r7, #8]
 8001828:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800182a:	2200      	movs	r2, #0
 800182c:	2100      	movs	r1, #0
 800182e:	201e      	movs	r0, #30
 8001830:	f000 fb13 	bl	8001e5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001834:	201e      	movs	r0, #30
 8001836:	f000 fb2c 	bl	8001e92 <HAL_NVIC_EnableIRQ>
}
 800183a:	bf00      	nop
 800183c:	3718      	adds	r7, #24
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	40012c00 	.word	0x40012c00
 8001848:	40021000 	.word	0x40021000
 800184c:	40000400 	.word	0x40000400
 8001850:	40000800 	.word	0x40000800

08001854 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b088      	sub	sp, #32
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800185c:	f107 0310 	add.w	r3, r7, #16
 8001860:	2200      	movs	r2, #0
 8001862:	601a      	str	r2, [r3, #0]
 8001864:	605a      	str	r2, [r3, #4]
 8001866:	609a      	str	r2, [r3, #8]
 8001868:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4a1f      	ldr	r2, [pc, #124]	; (80018ec <HAL_UART_MspInit+0x98>)
 8001870:	4293      	cmp	r3, r2
 8001872:	d137      	bne.n	80018e4 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001874:	4b1e      	ldr	r3, [pc, #120]	; (80018f0 <HAL_UART_MspInit+0x9c>)
 8001876:	69db      	ldr	r3, [r3, #28]
 8001878:	4a1d      	ldr	r2, [pc, #116]	; (80018f0 <HAL_UART_MspInit+0x9c>)
 800187a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800187e:	61d3      	str	r3, [r2, #28]
 8001880:	4b1b      	ldr	r3, [pc, #108]	; (80018f0 <HAL_UART_MspInit+0x9c>)
 8001882:	69db      	ldr	r3, [r3, #28]
 8001884:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001888:	60fb      	str	r3, [r7, #12]
 800188a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800188c:	4b18      	ldr	r3, [pc, #96]	; (80018f0 <HAL_UART_MspInit+0x9c>)
 800188e:	699b      	ldr	r3, [r3, #24]
 8001890:	4a17      	ldr	r2, [pc, #92]	; (80018f0 <HAL_UART_MspInit+0x9c>)
 8001892:	f043 0304 	orr.w	r3, r3, #4
 8001896:	6193      	str	r3, [r2, #24]
 8001898:	4b15      	ldr	r3, [pc, #84]	; (80018f0 <HAL_UART_MspInit+0x9c>)
 800189a:	699b      	ldr	r3, [r3, #24]
 800189c:	f003 0304 	and.w	r3, r3, #4
 80018a0:	60bb      	str	r3, [r7, #8]
 80018a2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80018a4:	2304      	movs	r3, #4
 80018a6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018a8:	2302      	movs	r3, #2
 80018aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018ac:	2303      	movs	r3, #3
 80018ae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018b0:	f107 0310 	add.w	r3, r7, #16
 80018b4:	4619      	mov	r1, r3
 80018b6:	480f      	ldr	r0, [pc, #60]	; (80018f4 <HAL_UART_MspInit+0xa0>)
 80018b8:	f000 fbd2 	bl	8002060 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80018bc:	2308      	movs	r3, #8
 80018be:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018c0:	2300      	movs	r3, #0
 80018c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c4:	2300      	movs	r3, #0
 80018c6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018c8:	f107 0310 	add.w	r3, r7, #16
 80018cc:	4619      	mov	r1, r3
 80018ce:	4809      	ldr	r0, [pc, #36]	; (80018f4 <HAL_UART_MspInit+0xa0>)
 80018d0:	f000 fbc6 	bl	8002060 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80018d4:	2200      	movs	r2, #0
 80018d6:	2100      	movs	r1, #0
 80018d8:	2026      	movs	r0, #38	; 0x26
 80018da:	f000 fabe 	bl	8001e5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80018de:	2026      	movs	r0, #38	; 0x26
 80018e0:	f000 fad7 	bl	8001e92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80018e4:	bf00      	nop
 80018e6:	3720      	adds	r7, #32
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	40004400 	.word	0x40004400
 80018f0:	40021000 	.word	0x40021000
 80018f4:	40010800 	.word	0x40010800

080018f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018f8:	b480      	push	{r7}
 80018fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018fc:	e7fe      	b.n	80018fc <NMI_Handler+0x4>

080018fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018fe:	b480      	push	{r7}
 8001900:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001902:	e7fe      	b.n	8001902 <HardFault_Handler+0x4>

08001904 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001904:	b480      	push	{r7}
 8001906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001908:	e7fe      	b.n	8001908 <MemManage_Handler+0x4>

0800190a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800190a:	b480      	push	{r7}
 800190c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800190e:	e7fe      	b.n	800190e <BusFault_Handler+0x4>

08001910 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001910:	b480      	push	{r7}
 8001912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001914:	e7fe      	b.n	8001914 <UsageFault_Handler+0x4>

08001916 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001916:	b480      	push	{r7}
 8001918:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800191a:	bf00      	nop
 800191c:	46bd      	mov	sp, r7
 800191e:	bc80      	pop	{r7}
 8001920:	4770      	bx	lr

08001922 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001922:	b480      	push	{r7}
 8001924:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001926:	bf00      	nop
 8001928:	46bd      	mov	sp, r7
 800192a:	bc80      	pop	{r7}
 800192c:	4770      	bx	lr

0800192e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800192e:	b480      	push	{r7}
 8001930:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001932:	bf00      	nop
 8001934:	46bd      	mov	sp, r7
 8001936:	bc80      	pop	{r7}
 8001938:	4770      	bx	lr

0800193a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800193a:	b580      	push	{r7, lr}
 800193c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800193e:	f000 f97b 	bl	8001c38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001942:	bf00      	nop
 8001944:	bd80      	pop	{r7, pc}

08001946 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001946:	b580      	push	{r7, lr}
 8001948:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 800194a:	2002      	movs	r0, #2
 800194c:	f000 fd24 	bl	8002398 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001950:	bf00      	nop
 8001952:	bd80      	pop	{r7, pc}

08001954 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8001958:	2020      	movs	r0, #32
 800195a:	f000 fd1d 	bl	8002398 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 800195e:	2040      	movs	r0, #64	; 0x40
 8001960:	f000 fd1a 	bl	8002398 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8001964:	2080      	movs	r0, #128	; 0x80
 8001966:	f000 fd17 	bl	8002398 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800196a:	bf00      	nop
 800196c:	bd80      	pop	{r7, pc}
	...

08001970 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001974:	4802      	ldr	r0, [pc, #8]	; (8001980 <TIM1_UP_IRQHandler+0x10>)
 8001976:	f001 fa07 	bl	8002d88 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800197a:	bf00      	nop
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	20000230 	.word	0x20000230

08001984 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001988:	4802      	ldr	r0, [pc, #8]	; (8001994 <TIM2_IRQHandler+0x10>)
 800198a:	f001 f9fd 	bl	8002d88 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800198e:	bf00      	nop
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	20000278 	.word	0x20000278

08001998 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800199c:	4802      	ldr	r0, [pc, #8]	; (80019a8 <TIM3_IRQHandler+0x10>)
 800199e:	f001 f9f3 	bl	8002d88 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80019a2:	bf00      	nop
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	200002c0 	.word	0x200002c0

080019ac <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80019b0:	4802      	ldr	r0, [pc, #8]	; (80019bc <TIM4_IRQHandler+0x10>)
 80019b2:	f001 f9e9 	bl	8002d88 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80019b6:	bf00      	nop
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	20000308 	.word	0x20000308

080019c0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80019c4:	4802      	ldr	r0, [pc, #8]	; (80019d0 <USART2_IRQHandler+0x10>)
 80019c6:	f001 fed7 	bl	8003778 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80019ca:	bf00      	nop
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	20000350 	.word	0x20000350

080019d4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80019d4:	b480      	push	{r7}
 80019d6:	af00      	add	r7, sp, #0
	return 1;
 80019d8:	2301      	movs	r3, #1
}
 80019da:	4618      	mov	r0, r3
 80019dc:	46bd      	mov	sp, r7
 80019de:	bc80      	pop	{r7}
 80019e0:	4770      	bx	lr

080019e2 <_kill>:

int _kill(int pid, int sig)
{
 80019e2:	b580      	push	{r7, lr}
 80019e4:	b082      	sub	sp, #8
 80019e6:	af00      	add	r7, sp, #0
 80019e8:	6078      	str	r0, [r7, #4]
 80019ea:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80019ec:	f003 fc8a 	bl	8005304 <__errno>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2216      	movs	r2, #22
 80019f4:	601a      	str	r2, [r3, #0]
	return -1;
 80019f6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	3708      	adds	r7, #8
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}

08001a02 <_exit>:

void _exit (int status)
{
 8001a02:	b580      	push	{r7, lr}
 8001a04:	b082      	sub	sp, #8
 8001a06:	af00      	add	r7, sp, #0
 8001a08:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001a0a:	f04f 31ff 	mov.w	r1, #4294967295
 8001a0e:	6878      	ldr	r0, [r7, #4]
 8001a10:	f7ff ffe7 	bl	80019e2 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001a14:	e7fe      	b.n	8001a14 <_exit+0x12>

08001a16 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a16:	b580      	push	{r7, lr}
 8001a18:	b086      	sub	sp, #24
 8001a1a:	af00      	add	r7, sp, #0
 8001a1c:	60f8      	str	r0, [r7, #12]
 8001a1e:	60b9      	str	r1, [r7, #8]
 8001a20:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a22:	2300      	movs	r3, #0
 8001a24:	617b      	str	r3, [r7, #20]
 8001a26:	e00a      	b.n	8001a3e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001a28:	f3af 8000 	nop.w
 8001a2c:	4601      	mov	r1, r0
 8001a2e:	68bb      	ldr	r3, [r7, #8]
 8001a30:	1c5a      	adds	r2, r3, #1
 8001a32:	60ba      	str	r2, [r7, #8]
 8001a34:	b2ca      	uxtb	r2, r1
 8001a36:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	3301      	adds	r3, #1
 8001a3c:	617b      	str	r3, [r7, #20]
 8001a3e:	697a      	ldr	r2, [r7, #20]
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	429a      	cmp	r2, r3
 8001a44:	dbf0      	blt.n	8001a28 <_read+0x12>
	}

return len;
 8001a46:	687b      	ldr	r3, [r7, #4]
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	3718      	adds	r7, #24
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}

08001a50 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b086      	sub	sp, #24
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	60f8      	str	r0, [r7, #12]
 8001a58:	60b9      	str	r1, [r7, #8]
 8001a5a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	617b      	str	r3, [r7, #20]
 8001a60:	e009      	b.n	8001a76 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001a62:	68bb      	ldr	r3, [r7, #8]
 8001a64:	1c5a      	adds	r2, r3, #1
 8001a66:	60ba      	str	r2, [r7, #8]
 8001a68:	781b      	ldrb	r3, [r3, #0]
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	3301      	adds	r3, #1
 8001a74:	617b      	str	r3, [r7, #20]
 8001a76:	697a      	ldr	r2, [r7, #20]
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	429a      	cmp	r2, r3
 8001a7c:	dbf1      	blt.n	8001a62 <_write+0x12>
	}
	return len;
 8001a7e:	687b      	ldr	r3, [r7, #4]
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	3718      	adds	r7, #24
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}

08001a88 <_close>:

int _close(int file)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b083      	sub	sp, #12
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
	return -1;
 8001a90:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	370c      	adds	r7, #12
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bc80      	pop	{r7}
 8001a9c:	4770      	bx	lr

08001a9e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a9e:	b480      	push	{r7}
 8001aa0:	b083      	sub	sp, #12
 8001aa2:	af00      	add	r7, sp, #0
 8001aa4:	6078      	str	r0, [r7, #4]
 8001aa6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001aae:	605a      	str	r2, [r3, #4]
	return 0;
 8001ab0:	2300      	movs	r3, #0
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	370c      	adds	r7, #12
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bc80      	pop	{r7}
 8001aba:	4770      	bx	lr

08001abc <_isatty>:

int _isatty(int file)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b083      	sub	sp, #12
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
	return 1;
 8001ac4:	2301      	movs	r3, #1
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	370c      	adds	r7, #12
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bc80      	pop	{r7}
 8001ace:	4770      	bx	lr

08001ad0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b085      	sub	sp, #20
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	60f8      	str	r0, [r7, #12]
 8001ad8:	60b9      	str	r1, [r7, #8]
 8001ada:	607a      	str	r2, [r7, #4]
	return 0;
 8001adc:	2300      	movs	r3, #0
}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	3714      	adds	r7, #20
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bc80      	pop	{r7}
 8001ae6:	4770      	bx	lr

08001ae8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b086      	sub	sp, #24
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001af0:	4a14      	ldr	r2, [pc, #80]	; (8001b44 <_sbrk+0x5c>)
 8001af2:	4b15      	ldr	r3, [pc, #84]	; (8001b48 <_sbrk+0x60>)
 8001af4:	1ad3      	subs	r3, r2, r3
 8001af6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001afc:	4b13      	ldr	r3, [pc, #76]	; (8001b4c <_sbrk+0x64>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d102      	bne.n	8001b0a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b04:	4b11      	ldr	r3, [pc, #68]	; (8001b4c <_sbrk+0x64>)
 8001b06:	4a12      	ldr	r2, [pc, #72]	; (8001b50 <_sbrk+0x68>)
 8001b08:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b0a:	4b10      	ldr	r3, [pc, #64]	; (8001b4c <_sbrk+0x64>)
 8001b0c:	681a      	ldr	r2, [r3, #0]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	4413      	add	r3, r2
 8001b12:	693a      	ldr	r2, [r7, #16]
 8001b14:	429a      	cmp	r2, r3
 8001b16:	d207      	bcs.n	8001b28 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b18:	f003 fbf4 	bl	8005304 <__errno>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	220c      	movs	r2, #12
 8001b20:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b22:	f04f 33ff 	mov.w	r3, #4294967295
 8001b26:	e009      	b.n	8001b3c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b28:	4b08      	ldr	r3, [pc, #32]	; (8001b4c <_sbrk+0x64>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b2e:	4b07      	ldr	r3, [pc, #28]	; (8001b4c <_sbrk+0x64>)
 8001b30:	681a      	ldr	r2, [r3, #0]
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	4413      	add	r3, r2
 8001b36:	4a05      	ldr	r2, [pc, #20]	; (8001b4c <_sbrk+0x64>)
 8001b38:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b3a:	68fb      	ldr	r3, [r7, #12]
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	3718      	adds	r7, #24
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	20005000 	.word	0x20005000
 8001b48:	00000400 	.word	0x00000400
 8001b4c:	20000398 	.word	0x20000398
 8001b50:	200004a0 	.word	0x200004a0

08001b54 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001b54:	b480      	push	{r7}
 8001b56:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */

}
 8001b58:	bf00      	nop
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bc80      	pop	{r7}
 8001b5e:	4770      	bx	lr

08001b60 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001b60:	f7ff fff8 	bl	8001b54 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b64:	480b      	ldr	r0, [pc, #44]	; (8001b94 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001b66:	490c      	ldr	r1, [pc, #48]	; (8001b98 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001b68:	4a0c      	ldr	r2, [pc, #48]	; (8001b9c <LoopFillZerobss+0x16>)
  movs r3, #0
 8001b6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b6c:	e002      	b.n	8001b74 <LoopCopyDataInit>

08001b6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b72:	3304      	adds	r3, #4

08001b74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b78:	d3f9      	bcc.n	8001b6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b7a:	4a09      	ldr	r2, [pc, #36]	; (8001ba0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001b7c:	4c09      	ldr	r4, [pc, #36]	; (8001ba4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b80:	e001      	b.n	8001b86 <LoopFillZerobss>

08001b82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b84:	3204      	adds	r2, #4

08001b86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b88:	d3fb      	bcc.n	8001b82 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b8a:	f003 fbc1 	bl	8005310 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001b8e:	f7ff fb3d 	bl	800120c <main>
  bx lr
 8001b92:	4770      	bx	lr
  ldr r0, =_sdata
 8001b94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b98:	20000214 	.word	0x20000214
  ldr r2, =_sidata
 8001b9c:	0800a98c 	.word	0x0800a98c
  ldr r2, =_sbss
 8001ba0:	20000214 	.word	0x20000214
  ldr r4, =_ebss
 8001ba4:	200004a0 	.word	0x200004a0

08001ba8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001ba8:	e7fe      	b.n	8001ba8 <ADC1_2_IRQHandler>
	...

08001bac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bb0:	4b08      	ldr	r3, [pc, #32]	; (8001bd4 <HAL_Init+0x28>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a07      	ldr	r2, [pc, #28]	; (8001bd4 <HAL_Init+0x28>)
 8001bb6:	f043 0310 	orr.w	r3, r3, #16
 8001bba:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bbc:	2003      	movs	r0, #3
 8001bbe:	f000 f941 	bl	8001e44 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bc2:	200f      	movs	r0, #15
 8001bc4:	f000 f808 	bl	8001bd8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bc8:	f7ff fdaa 	bl	8001720 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bcc:	2300      	movs	r3, #0
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	40022000 	.word	0x40022000

08001bd8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b082      	sub	sp, #8
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001be0:	4b12      	ldr	r3, [pc, #72]	; (8001c2c <HAL_InitTick+0x54>)
 8001be2:	681a      	ldr	r2, [r3, #0]
 8001be4:	4b12      	ldr	r3, [pc, #72]	; (8001c30 <HAL_InitTick+0x58>)
 8001be6:	781b      	ldrb	r3, [r3, #0]
 8001be8:	4619      	mov	r1, r3
 8001bea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bee:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bf2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f000 f959 	bl	8001eae <HAL_SYSTICK_Config>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d001      	beq.n	8001c06 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c02:	2301      	movs	r3, #1
 8001c04:	e00e      	b.n	8001c24 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2b0f      	cmp	r3, #15
 8001c0a:	d80a      	bhi.n	8001c22 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	6879      	ldr	r1, [r7, #4]
 8001c10:	f04f 30ff 	mov.w	r0, #4294967295
 8001c14:	f000 f921 	bl	8001e5a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c18:	4a06      	ldr	r2, [pc, #24]	; (8001c34 <HAL_InitTick+0x5c>)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	e000      	b.n	8001c24 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c22:	2301      	movs	r3, #1
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	3708      	adds	r7, #8
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	20000000 	.word	0x20000000
 8001c30:	20000008 	.word	0x20000008
 8001c34:	20000004 	.word	0x20000004

08001c38 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c3c:	4b05      	ldr	r3, [pc, #20]	; (8001c54 <HAL_IncTick+0x1c>)
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	461a      	mov	r2, r3
 8001c42:	4b05      	ldr	r3, [pc, #20]	; (8001c58 <HAL_IncTick+0x20>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4413      	add	r3, r2
 8001c48:	4a03      	ldr	r2, [pc, #12]	; (8001c58 <HAL_IncTick+0x20>)
 8001c4a:	6013      	str	r3, [r2, #0]
}
 8001c4c:	bf00      	nop
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bc80      	pop	{r7}
 8001c52:	4770      	bx	lr
 8001c54:	20000008 	.word	0x20000008
 8001c58:	2000039c 	.word	0x2000039c

08001c5c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	af00      	add	r7, sp, #0
  return uwTick;
 8001c60:	4b02      	ldr	r3, [pc, #8]	; (8001c6c <HAL_GetTick+0x10>)
 8001c62:	681b      	ldr	r3, [r3, #0]
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bc80      	pop	{r7}
 8001c6a:	4770      	bx	lr
 8001c6c:	2000039c 	.word	0x2000039c

08001c70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b085      	sub	sp, #20
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	f003 0307 	and.w	r3, r3, #7
 8001c7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c80:	4b0c      	ldr	r3, [pc, #48]	; (8001cb4 <__NVIC_SetPriorityGrouping+0x44>)
 8001c82:	68db      	ldr	r3, [r3, #12]
 8001c84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c86:	68ba      	ldr	r2, [r7, #8]
 8001c88:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c94:	68bb      	ldr	r3, [r7, #8]
 8001c96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c98:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ca0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ca2:	4a04      	ldr	r2, [pc, #16]	; (8001cb4 <__NVIC_SetPriorityGrouping+0x44>)
 8001ca4:	68bb      	ldr	r3, [r7, #8]
 8001ca6:	60d3      	str	r3, [r2, #12]
}
 8001ca8:	bf00      	nop
 8001caa:	3714      	adds	r7, #20
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bc80      	pop	{r7}
 8001cb0:	4770      	bx	lr
 8001cb2:	bf00      	nop
 8001cb4:	e000ed00 	.word	0xe000ed00

08001cb8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cbc:	4b04      	ldr	r3, [pc, #16]	; (8001cd0 <__NVIC_GetPriorityGrouping+0x18>)
 8001cbe:	68db      	ldr	r3, [r3, #12]
 8001cc0:	0a1b      	lsrs	r3, r3, #8
 8001cc2:	f003 0307 	and.w	r3, r3, #7
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bc80      	pop	{r7}
 8001ccc:	4770      	bx	lr
 8001cce:	bf00      	nop
 8001cd0:	e000ed00 	.word	0xe000ed00

08001cd4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b083      	sub	sp, #12
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	4603      	mov	r3, r0
 8001cdc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	db0b      	blt.n	8001cfe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ce6:	79fb      	ldrb	r3, [r7, #7]
 8001ce8:	f003 021f 	and.w	r2, r3, #31
 8001cec:	4906      	ldr	r1, [pc, #24]	; (8001d08 <__NVIC_EnableIRQ+0x34>)
 8001cee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cf2:	095b      	lsrs	r3, r3, #5
 8001cf4:	2001      	movs	r0, #1
 8001cf6:	fa00 f202 	lsl.w	r2, r0, r2
 8001cfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001cfe:	bf00      	nop
 8001d00:	370c      	adds	r7, #12
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bc80      	pop	{r7}
 8001d06:	4770      	bx	lr
 8001d08:	e000e100 	.word	0xe000e100

08001d0c <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b083      	sub	sp, #12
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	4603      	mov	r3, r0
 8001d14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	db0c      	blt.n	8001d38 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d1e:	79fb      	ldrb	r3, [r7, #7]
 8001d20:	f003 021f 	and.w	r2, r3, #31
 8001d24:	4907      	ldr	r1, [pc, #28]	; (8001d44 <__NVIC_ClearPendingIRQ+0x38>)
 8001d26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d2a:	095b      	lsrs	r3, r3, #5
 8001d2c:	2001      	movs	r0, #1
 8001d2e:	fa00 f202 	lsl.w	r2, r0, r2
 8001d32:	3360      	adds	r3, #96	; 0x60
 8001d34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d38:	bf00      	nop
 8001d3a:	370c      	adds	r7, #12
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bc80      	pop	{r7}
 8001d40:	4770      	bx	lr
 8001d42:	bf00      	nop
 8001d44:	e000e100 	.word	0xe000e100

08001d48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b083      	sub	sp, #12
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	4603      	mov	r3, r0
 8001d50:	6039      	str	r1, [r7, #0]
 8001d52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	db0a      	blt.n	8001d72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	b2da      	uxtb	r2, r3
 8001d60:	490c      	ldr	r1, [pc, #48]	; (8001d94 <__NVIC_SetPriority+0x4c>)
 8001d62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d66:	0112      	lsls	r2, r2, #4
 8001d68:	b2d2      	uxtb	r2, r2
 8001d6a:	440b      	add	r3, r1
 8001d6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d70:	e00a      	b.n	8001d88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	b2da      	uxtb	r2, r3
 8001d76:	4908      	ldr	r1, [pc, #32]	; (8001d98 <__NVIC_SetPriority+0x50>)
 8001d78:	79fb      	ldrb	r3, [r7, #7]
 8001d7a:	f003 030f 	and.w	r3, r3, #15
 8001d7e:	3b04      	subs	r3, #4
 8001d80:	0112      	lsls	r2, r2, #4
 8001d82:	b2d2      	uxtb	r2, r2
 8001d84:	440b      	add	r3, r1
 8001d86:	761a      	strb	r2, [r3, #24]
}
 8001d88:	bf00      	nop
 8001d8a:	370c      	adds	r7, #12
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bc80      	pop	{r7}
 8001d90:	4770      	bx	lr
 8001d92:	bf00      	nop
 8001d94:	e000e100 	.word	0xe000e100
 8001d98:	e000ed00 	.word	0xe000ed00

08001d9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b089      	sub	sp, #36	; 0x24
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	60f8      	str	r0, [r7, #12]
 8001da4:	60b9      	str	r1, [r7, #8]
 8001da6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	f003 0307 	and.w	r3, r3, #7
 8001dae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001db0:	69fb      	ldr	r3, [r7, #28]
 8001db2:	f1c3 0307 	rsb	r3, r3, #7
 8001db6:	2b04      	cmp	r3, #4
 8001db8:	bf28      	it	cs
 8001dba:	2304      	movcs	r3, #4
 8001dbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dbe:	69fb      	ldr	r3, [r7, #28]
 8001dc0:	3304      	adds	r3, #4
 8001dc2:	2b06      	cmp	r3, #6
 8001dc4:	d902      	bls.n	8001dcc <NVIC_EncodePriority+0x30>
 8001dc6:	69fb      	ldr	r3, [r7, #28]
 8001dc8:	3b03      	subs	r3, #3
 8001dca:	e000      	b.n	8001dce <NVIC_EncodePriority+0x32>
 8001dcc:	2300      	movs	r3, #0
 8001dce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dd0:	f04f 32ff 	mov.w	r2, #4294967295
 8001dd4:	69bb      	ldr	r3, [r7, #24]
 8001dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dda:	43da      	mvns	r2, r3
 8001ddc:	68bb      	ldr	r3, [r7, #8]
 8001dde:	401a      	ands	r2, r3
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001de4:	f04f 31ff 	mov.w	r1, #4294967295
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	fa01 f303 	lsl.w	r3, r1, r3
 8001dee:	43d9      	mvns	r1, r3
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001df4:	4313      	orrs	r3, r2
         );
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	3724      	adds	r7, #36	; 0x24
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bc80      	pop	{r7}
 8001dfe:	4770      	bx	lr

08001e00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b082      	sub	sp, #8
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	3b01      	subs	r3, #1
 8001e0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e10:	d301      	bcc.n	8001e16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e12:	2301      	movs	r3, #1
 8001e14:	e00f      	b.n	8001e36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e16:	4a0a      	ldr	r2, [pc, #40]	; (8001e40 <SysTick_Config+0x40>)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	3b01      	subs	r3, #1
 8001e1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e1e:	210f      	movs	r1, #15
 8001e20:	f04f 30ff 	mov.w	r0, #4294967295
 8001e24:	f7ff ff90 	bl	8001d48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e28:	4b05      	ldr	r3, [pc, #20]	; (8001e40 <SysTick_Config+0x40>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e2e:	4b04      	ldr	r3, [pc, #16]	; (8001e40 <SysTick_Config+0x40>)
 8001e30:	2207      	movs	r2, #7
 8001e32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e34:	2300      	movs	r3, #0
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	3708      	adds	r7, #8
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	e000e010 	.word	0xe000e010

08001e44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b082      	sub	sp, #8
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e4c:	6878      	ldr	r0, [r7, #4]
 8001e4e:	f7ff ff0f 	bl	8001c70 <__NVIC_SetPriorityGrouping>
}
 8001e52:	bf00      	nop
 8001e54:	3708      	adds	r7, #8
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}

08001e5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e5a:	b580      	push	{r7, lr}
 8001e5c:	b086      	sub	sp, #24
 8001e5e:	af00      	add	r7, sp, #0
 8001e60:	4603      	mov	r3, r0
 8001e62:	60b9      	str	r1, [r7, #8]
 8001e64:	607a      	str	r2, [r7, #4]
 8001e66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e6c:	f7ff ff24 	bl	8001cb8 <__NVIC_GetPriorityGrouping>
 8001e70:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e72:	687a      	ldr	r2, [r7, #4]
 8001e74:	68b9      	ldr	r1, [r7, #8]
 8001e76:	6978      	ldr	r0, [r7, #20]
 8001e78:	f7ff ff90 	bl	8001d9c <NVIC_EncodePriority>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e82:	4611      	mov	r1, r2
 8001e84:	4618      	mov	r0, r3
 8001e86:	f7ff ff5f 	bl	8001d48 <__NVIC_SetPriority>
}
 8001e8a:	bf00      	nop
 8001e8c:	3718      	adds	r7, #24
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}

08001e92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e92:	b580      	push	{r7, lr}
 8001e94:	b082      	sub	sp, #8
 8001e96:	af00      	add	r7, sp, #0
 8001e98:	4603      	mov	r3, r0
 8001e9a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f7ff ff17 	bl	8001cd4 <__NVIC_EnableIRQ>
}
 8001ea6:	bf00      	nop
 8001ea8:	3708      	adds	r7, #8
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}

08001eae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001eae:	b580      	push	{r7, lr}
 8001eb0:	b082      	sub	sp, #8
 8001eb2:	af00      	add	r7, sp, #0
 8001eb4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001eb6:	6878      	ldr	r0, [r7, #4]
 8001eb8:	f7ff ffa2 	bl	8001e00 <SysTick_Config>
 8001ebc:	4603      	mov	r3, r0
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	3708      	adds	r7, #8
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}

08001ec6 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8001ec6:	b580      	push	{r7, lr}
 8001ec8:	b082      	sub	sp, #8
 8001eca:	af00      	add	r7, sp, #0
 8001ecc:	4603      	mov	r3, r0
 8001ece:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8001ed0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f7ff ff19 	bl	8001d0c <__NVIC_ClearPendingIRQ>
}
 8001eda:	bf00      	nop
 8001edc:	3708      	adds	r7, #8
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}

08001ee2 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001ee2:	b480      	push	{r7}
 8001ee4:	b085      	sub	sp, #20
 8001ee6:	af00      	add	r7, sp, #0
 8001ee8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001eea:	2300      	movs	r3, #0
 8001eec:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001ef4:	b2db      	uxtb	r3, r3
 8001ef6:	2b02      	cmp	r3, #2
 8001ef8:	d008      	beq.n	8001f0c <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2204      	movs	r2, #4
 8001efe:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2200      	movs	r2, #0
 8001f04:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	e020      	b.n	8001f4e <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	681a      	ldr	r2, [r3, #0]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f022 020e 	bic.w	r2, r2, #14
 8001f1a:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	681a      	ldr	r2, [r3, #0]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f022 0201 	bic.w	r2, r2, #1
 8001f2a:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f34:	2101      	movs	r1, #1
 8001f36:	fa01 f202 	lsl.w	r2, r1, r2
 8001f3a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2201      	movs	r2, #1
 8001f40:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2200      	movs	r2, #0
 8001f48:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001f4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	3714      	adds	r7, #20
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bc80      	pop	{r7}
 8001f56:	4770      	bx	lr

08001f58 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b084      	sub	sp, #16
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f60:	2300      	movs	r3, #0
 8001f62:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001f6a:	b2db      	uxtb	r3, r3
 8001f6c:	2b02      	cmp	r3, #2
 8001f6e:	d005      	beq.n	8001f7c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2204      	movs	r2, #4
 8001f74:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001f76:	2301      	movs	r3, #1
 8001f78:	73fb      	strb	r3, [r7, #15]
 8001f7a:	e051      	b.n	8002020 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	681a      	ldr	r2, [r3, #0]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f022 020e 	bic.w	r2, r2, #14
 8001f8a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	681a      	ldr	r2, [r3, #0]
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f022 0201 	bic.w	r2, r2, #1
 8001f9a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a22      	ldr	r2, [pc, #136]	; (800202c <HAL_DMA_Abort_IT+0xd4>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d029      	beq.n	8001ffa <HAL_DMA_Abort_IT+0xa2>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4a21      	ldr	r2, [pc, #132]	; (8002030 <HAL_DMA_Abort_IT+0xd8>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d022      	beq.n	8001ff6 <HAL_DMA_Abort_IT+0x9e>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a1f      	ldr	r2, [pc, #124]	; (8002034 <HAL_DMA_Abort_IT+0xdc>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d01a      	beq.n	8001ff0 <HAL_DMA_Abort_IT+0x98>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4a1e      	ldr	r2, [pc, #120]	; (8002038 <HAL_DMA_Abort_IT+0xe0>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d012      	beq.n	8001fea <HAL_DMA_Abort_IT+0x92>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a1c      	ldr	r2, [pc, #112]	; (800203c <HAL_DMA_Abort_IT+0xe4>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d00a      	beq.n	8001fe4 <HAL_DMA_Abort_IT+0x8c>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4a1b      	ldr	r2, [pc, #108]	; (8002040 <HAL_DMA_Abort_IT+0xe8>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d102      	bne.n	8001fde <HAL_DMA_Abort_IT+0x86>
 8001fd8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001fdc:	e00e      	b.n	8001ffc <HAL_DMA_Abort_IT+0xa4>
 8001fde:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001fe2:	e00b      	b.n	8001ffc <HAL_DMA_Abort_IT+0xa4>
 8001fe4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001fe8:	e008      	b.n	8001ffc <HAL_DMA_Abort_IT+0xa4>
 8001fea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fee:	e005      	b.n	8001ffc <HAL_DMA_Abort_IT+0xa4>
 8001ff0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ff4:	e002      	b.n	8001ffc <HAL_DMA_Abort_IT+0xa4>
 8001ff6:	2310      	movs	r3, #16
 8001ff8:	e000      	b.n	8001ffc <HAL_DMA_Abort_IT+0xa4>
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	4a11      	ldr	r2, [pc, #68]	; (8002044 <HAL_DMA_Abort_IT+0xec>)
 8001ffe:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2201      	movs	r2, #1
 8002004:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2200      	movs	r2, #0
 800200c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002014:	2b00      	cmp	r3, #0
 8002016:	d003      	beq.n	8002020 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800201c:	6878      	ldr	r0, [r7, #4]
 800201e:	4798      	blx	r3
    } 
  }
  return status;
 8002020:	7bfb      	ldrb	r3, [r7, #15]
}
 8002022:	4618      	mov	r0, r3
 8002024:	3710      	adds	r7, #16
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}
 800202a:	bf00      	nop
 800202c:	40020008 	.word	0x40020008
 8002030:	4002001c 	.word	0x4002001c
 8002034:	40020030 	.word	0x40020030
 8002038:	40020044 	.word	0x40020044
 800203c:	40020058 	.word	0x40020058
 8002040:	4002006c 	.word	0x4002006c
 8002044:	40020000 	.word	0x40020000

08002048 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002048:	b480      	push	{r7}
 800204a:	b083      	sub	sp, #12
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 8002054:	4618      	mov	r0, r3
 8002056:	370c      	adds	r7, #12
 8002058:	46bd      	mov	sp, r7
 800205a:	bc80      	pop	{r7}
 800205c:	4770      	bx	lr
	...

08002060 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002060:	b480      	push	{r7}
 8002062:	b08b      	sub	sp, #44	; 0x2c
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
 8002068:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800206a:	2300      	movs	r3, #0
 800206c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800206e:	2300      	movs	r3, #0
 8002070:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002072:	e169      	b.n	8002348 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002074:	2201      	movs	r2, #1
 8002076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002078:	fa02 f303 	lsl.w	r3, r2, r3
 800207c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	69fa      	ldr	r2, [r7, #28]
 8002084:	4013      	ands	r3, r2
 8002086:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002088:	69ba      	ldr	r2, [r7, #24]
 800208a:	69fb      	ldr	r3, [r7, #28]
 800208c:	429a      	cmp	r2, r3
 800208e:	f040 8158 	bne.w	8002342 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	4a9a      	ldr	r2, [pc, #616]	; (8002300 <HAL_GPIO_Init+0x2a0>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d05e      	beq.n	800215a <HAL_GPIO_Init+0xfa>
 800209c:	4a98      	ldr	r2, [pc, #608]	; (8002300 <HAL_GPIO_Init+0x2a0>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d875      	bhi.n	800218e <HAL_GPIO_Init+0x12e>
 80020a2:	4a98      	ldr	r2, [pc, #608]	; (8002304 <HAL_GPIO_Init+0x2a4>)
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d058      	beq.n	800215a <HAL_GPIO_Init+0xfa>
 80020a8:	4a96      	ldr	r2, [pc, #600]	; (8002304 <HAL_GPIO_Init+0x2a4>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d86f      	bhi.n	800218e <HAL_GPIO_Init+0x12e>
 80020ae:	4a96      	ldr	r2, [pc, #600]	; (8002308 <HAL_GPIO_Init+0x2a8>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d052      	beq.n	800215a <HAL_GPIO_Init+0xfa>
 80020b4:	4a94      	ldr	r2, [pc, #592]	; (8002308 <HAL_GPIO_Init+0x2a8>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d869      	bhi.n	800218e <HAL_GPIO_Init+0x12e>
 80020ba:	4a94      	ldr	r2, [pc, #592]	; (800230c <HAL_GPIO_Init+0x2ac>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	d04c      	beq.n	800215a <HAL_GPIO_Init+0xfa>
 80020c0:	4a92      	ldr	r2, [pc, #584]	; (800230c <HAL_GPIO_Init+0x2ac>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d863      	bhi.n	800218e <HAL_GPIO_Init+0x12e>
 80020c6:	4a92      	ldr	r2, [pc, #584]	; (8002310 <HAL_GPIO_Init+0x2b0>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d046      	beq.n	800215a <HAL_GPIO_Init+0xfa>
 80020cc:	4a90      	ldr	r2, [pc, #576]	; (8002310 <HAL_GPIO_Init+0x2b0>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d85d      	bhi.n	800218e <HAL_GPIO_Init+0x12e>
 80020d2:	2b12      	cmp	r3, #18
 80020d4:	d82a      	bhi.n	800212c <HAL_GPIO_Init+0xcc>
 80020d6:	2b12      	cmp	r3, #18
 80020d8:	d859      	bhi.n	800218e <HAL_GPIO_Init+0x12e>
 80020da:	a201      	add	r2, pc, #4	; (adr r2, 80020e0 <HAL_GPIO_Init+0x80>)
 80020dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020e0:	0800215b 	.word	0x0800215b
 80020e4:	08002135 	.word	0x08002135
 80020e8:	08002147 	.word	0x08002147
 80020ec:	08002189 	.word	0x08002189
 80020f0:	0800218f 	.word	0x0800218f
 80020f4:	0800218f 	.word	0x0800218f
 80020f8:	0800218f 	.word	0x0800218f
 80020fc:	0800218f 	.word	0x0800218f
 8002100:	0800218f 	.word	0x0800218f
 8002104:	0800218f 	.word	0x0800218f
 8002108:	0800218f 	.word	0x0800218f
 800210c:	0800218f 	.word	0x0800218f
 8002110:	0800218f 	.word	0x0800218f
 8002114:	0800218f 	.word	0x0800218f
 8002118:	0800218f 	.word	0x0800218f
 800211c:	0800218f 	.word	0x0800218f
 8002120:	0800218f 	.word	0x0800218f
 8002124:	0800213d 	.word	0x0800213d
 8002128:	08002151 	.word	0x08002151
 800212c:	4a79      	ldr	r2, [pc, #484]	; (8002314 <HAL_GPIO_Init+0x2b4>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d013      	beq.n	800215a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002132:	e02c      	b.n	800218e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	68db      	ldr	r3, [r3, #12]
 8002138:	623b      	str	r3, [r7, #32]
          break;
 800213a:	e029      	b.n	8002190 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	68db      	ldr	r3, [r3, #12]
 8002140:	3304      	adds	r3, #4
 8002142:	623b      	str	r3, [r7, #32]
          break;
 8002144:	e024      	b.n	8002190 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	68db      	ldr	r3, [r3, #12]
 800214a:	3308      	adds	r3, #8
 800214c:	623b      	str	r3, [r7, #32]
          break;
 800214e:	e01f      	b.n	8002190 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	68db      	ldr	r3, [r3, #12]
 8002154:	330c      	adds	r3, #12
 8002156:	623b      	str	r3, [r7, #32]
          break;
 8002158:	e01a      	b.n	8002190 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	689b      	ldr	r3, [r3, #8]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d102      	bne.n	8002168 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002162:	2304      	movs	r3, #4
 8002164:	623b      	str	r3, [r7, #32]
          break;
 8002166:	e013      	b.n	8002190 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	689b      	ldr	r3, [r3, #8]
 800216c:	2b01      	cmp	r3, #1
 800216e:	d105      	bne.n	800217c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002170:	2308      	movs	r3, #8
 8002172:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	69fa      	ldr	r2, [r7, #28]
 8002178:	611a      	str	r2, [r3, #16]
          break;
 800217a:	e009      	b.n	8002190 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800217c:	2308      	movs	r3, #8
 800217e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	69fa      	ldr	r2, [r7, #28]
 8002184:	615a      	str	r2, [r3, #20]
          break;
 8002186:	e003      	b.n	8002190 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002188:	2300      	movs	r3, #0
 800218a:	623b      	str	r3, [r7, #32]
          break;
 800218c:	e000      	b.n	8002190 <HAL_GPIO_Init+0x130>
          break;
 800218e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002190:	69bb      	ldr	r3, [r7, #24]
 8002192:	2bff      	cmp	r3, #255	; 0xff
 8002194:	d801      	bhi.n	800219a <HAL_GPIO_Init+0x13a>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	e001      	b.n	800219e <HAL_GPIO_Init+0x13e>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	3304      	adds	r3, #4
 800219e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80021a0:	69bb      	ldr	r3, [r7, #24]
 80021a2:	2bff      	cmp	r3, #255	; 0xff
 80021a4:	d802      	bhi.n	80021ac <HAL_GPIO_Init+0x14c>
 80021a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a8:	009b      	lsls	r3, r3, #2
 80021aa:	e002      	b.n	80021b2 <HAL_GPIO_Init+0x152>
 80021ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ae:	3b08      	subs	r3, #8
 80021b0:	009b      	lsls	r3, r3, #2
 80021b2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	681a      	ldr	r2, [r3, #0]
 80021b8:	210f      	movs	r1, #15
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	fa01 f303 	lsl.w	r3, r1, r3
 80021c0:	43db      	mvns	r3, r3
 80021c2:	401a      	ands	r2, r3
 80021c4:	6a39      	ldr	r1, [r7, #32]
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	fa01 f303 	lsl.w	r3, r1, r3
 80021cc:	431a      	orrs	r2, r3
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021da:	2b00      	cmp	r3, #0
 80021dc:	f000 80b1 	beq.w	8002342 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80021e0:	4b4d      	ldr	r3, [pc, #308]	; (8002318 <HAL_GPIO_Init+0x2b8>)
 80021e2:	699b      	ldr	r3, [r3, #24]
 80021e4:	4a4c      	ldr	r2, [pc, #304]	; (8002318 <HAL_GPIO_Init+0x2b8>)
 80021e6:	f043 0301 	orr.w	r3, r3, #1
 80021ea:	6193      	str	r3, [r2, #24]
 80021ec:	4b4a      	ldr	r3, [pc, #296]	; (8002318 <HAL_GPIO_Init+0x2b8>)
 80021ee:	699b      	ldr	r3, [r3, #24]
 80021f0:	f003 0301 	and.w	r3, r3, #1
 80021f4:	60bb      	str	r3, [r7, #8]
 80021f6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80021f8:	4a48      	ldr	r2, [pc, #288]	; (800231c <HAL_GPIO_Init+0x2bc>)
 80021fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021fc:	089b      	lsrs	r3, r3, #2
 80021fe:	3302      	adds	r3, #2
 8002200:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002204:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002208:	f003 0303 	and.w	r3, r3, #3
 800220c:	009b      	lsls	r3, r3, #2
 800220e:	220f      	movs	r2, #15
 8002210:	fa02 f303 	lsl.w	r3, r2, r3
 8002214:	43db      	mvns	r3, r3
 8002216:	68fa      	ldr	r2, [r7, #12]
 8002218:	4013      	ands	r3, r2
 800221a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	4a40      	ldr	r2, [pc, #256]	; (8002320 <HAL_GPIO_Init+0x2c0>)
 8002220:	4293      	cmp	r3, r2
 8002222:	d013      	beq.n	800224c <HAL_GPIO_Init+0x1ec>
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	4a3f      	ldr	r2, [pc, #252]	; (8002324 <HAL_GPIO_Init+0x2c4>)
 8002228:	4293      	cmp	r3, r2
 800222a:	d00d      	beq.n	8002248 <HAL_GPIO_Init+0x1e8>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	4a3e      	ldr	r2, [pc, #248]	; (8002328 <HAL_GPIO_Init+0x2c8>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d007      	beq.n	8002244 <HAL_GPIO_Init+0x1e4>
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	4a3d      	ldr	r2, [pc, #244]	; (800232c <HAL_GPIO_Init+0x2cc>)
 8002238:	4293      	cmp	r3, r2
 800223a:	d101      	bne.n	8002240 <HAL_GPIO_Init+0x1e0>
 800223c:	2303      	movs	r3, #3
 800223e:	e006      	b.n	800224e <HAL_GPIO_Init+0x1ee>
 8002240:	2304      	movs	r3, #4
 8002242:	e004      	b.n	800224e <HAL_GPIO_Init+0x1ee>
 8002244:	2302      	movs	r3, #2
 8002246:	e002      	b.n	800224e <HAL_GPIO_Init+0x1ee>
 8002248:	2301      	movs	r3, #1
 800224a:	e000      	b.n	800224e <HAL_GPIO_Init+0x1ee>
 800224c:	2300      	movs	r3, #0
 800224e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002250:	f002 0203 	and.w	r2, r2, #3
 8002254:	0092      	lsls	r2, r2, #2
 8002256:	4093      	lsls	r3, r2
 8002258:	68fa      	ldr	r2, [r7, #12]
 800225a:	4313      	orrs	r3, r2
 800225c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800225e:	492f      	ldr	r1, [pc, #188]	; (800231c <HAL_GPIO_Init+0x2bc>)
 8002260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002262:	089b      	lsrs	r3, r3, #2
 8002264:	3302      	adds	r3, #2
 8002266:	68fa      	ldr	r2, [r7, #12]
 8002268:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002274:	2b00      	cmp	r3, #0
 8002276:	d006      	beq.n	8002286 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002278:	4b2d      	ldr	r3, [pc, #180]	; (8002330 <HAL_GPIO_Init+0x2d0>)
 800227a:	689a      	ldr	r2, [r3, #8]
 800227c:	492c      	ldr	r1, [pc, #176]	; (8002330 <HAL_GPIO_Init+0x2d0>)
 800227e:	69bb      	ldr	r3, [r7, #24]
 8002280:	4313      	orrs	r3, r2
 8002282:	608b      	str	r3, [r1, #8]
 8002284:	e006      	b.n	8002294 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002286:	4b2a      	ldr	r3, [pc, #168]	; (8002330 <HAL_GPIO_Init+0x2d0>)
 8002288:	689a      	ldr	r2, [r3, #8]
 800228a:	69bb      	ldr	r3, [r7, #24]
 800228c:	43db      	mvns	r3, r3
 800228e:	4928      	ldr	r1, [pc, #160]	; (8002330 <HAL_GPIO_Init+0x2d0>)
 8002290:	4013      	ands	r3, r2
 8002292:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800229c:	2b00      	cmp	r3, #0
 800229e:	d006      	beq.n	80022ae <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80022a0:	4b23      	ldr	r3, [pc, #140]	; (8002330 <HAL_GPIO_Init+0x2d0>)
 80022a2:	68da      	ldr	r2, [r3, #12]
 80022a4:	4922      	ldr	r1, [pc, #136]	; (8002330 <HAL_GPIO_Init+0x2d0>)
 80022a6:	69bb      	ldr	r3, [r7, #24]
 80022a8:	4313      	orrs	r3, r2
 80022aa:	60cb      	str	r3, [r1, #12]
 80022ac:	e006      	b.n	80022bc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80022ae:	4b20      	ldr	r3, [pc, #128]	; (8002330 <HAL_GPIO_Init+0x2d0>)
 80022b0:	68da      	ldr	r2, [r3, #12]
 80022b2:	69bb      	ldr	r3, [r7, #24]
 80022b4:	43db      	mvns	r3, r3
 80022b6:	491e      	ldr	r1, [pc, #120]	; (8002330 <HAL_GPIO_Init+0x2d0>)
 80022b8:	4013      	ands	r3, r2
 80022ba:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d006      	beq.n	80022d6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80022c8:	4b19      	ldr	r3, [pc, #100]	; (8002330 <HAL_GPIO_Init+0x2d0>)
 80022ca:	685a      	ldr	r2, [r3, #4]
 80022cc:	4918      	ldr	r1, [pc, #96]	; (8002330 <HAL_GPIO_Init+0x2d0>)
 80022ce:	69bb      	ldr	r3, [r7, #24]
 80022d0:	4313      	orrs	r3, r2
 80022d2:	604b      	str	r3, [r1, #4]
 80022d4:	e006      	b.n	80022e4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80022d6:	4b16      	ldr	r3, [pc, #88]	; (8002330 <HAL_GPIO_Init+0x2d0>)
 80022d8:	685a      	ldr	r2, [r3, #4]
 80022da:	69bb      	ldr	r3, [r7, #24]
 80022dc:	43db      	mvns	r3, r3
 80022de:	4914      	ldr	r1, [pc, #80]	; (8002330 <HAL_GPIO_Init+0x2d0>)
 80022e0:	4013      	ands	r3, r2
 80022e2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d021      	beq.n	8002334 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80022f0:	4b0f      	ldr	r3, [pc, #60]	; (8002330 <HAL_GPIO_Init+0x2d0>)
 80022f2:	681a      	ldr	r2, [r3, #0]
 80022f4:	490e      	ldr	r1, [pc, #56]	; (8002330 <HAL_GPIO_Init+0x2d0>)
 80022f6:	69bb      	ldr	r3, [r7, #24]
 80022f8:	4313      	orrs	r3, r2
 80022fa:	600b      	str	r3, [r1, #0]
 80022fc:	e021      	b.n	8002342 <HAL_GPIO_Init+0x2e2>
 80022fe:	bf00      	nop
 8002300:	10320000 	.word	0x10320000
 8002304:	10310000 	.word	0x10310000
 8002308:	10220000 	.word	0x10220000
 800230c:	10210000 	.word	0x10210000
 8002310:	10120000 	.word	0x10120000
 8002314:	10110000 	.word	0x10110000
 8002318:	40021000 	.word	0x40021000
 800231c:	40010000 	.word	0x40010000
 8002320:	40010800 	.word	0x40010800
 8002324:	40010c00 	.word	0x40010c00
 8002328:	40011000 	.word	0x40011000
 800232c:	40011400 	.word	0x40011400
 8002330:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002334:	4b0b      	ldr	r3, [pc, #44]	; (8002364 <HAL_GPIO_Init+0x304>)
 8002336:	681a      	ldr	r2, [r3, #0]
 8002338:	69bb      	ldr	r3, [r7, #24]
 800233a:	43db      	mvns	r3, r3
 800233c:	4909      	ldr	r1, [pc, #36]	; (8002364 <HAL_GPIO_Init+0x304>)
 800233e:	4013      	ands	r3, r2
 8002340:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002344:	3301      	adds	r3, #1
 8002346:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	681a      	ldr	r2, [r3, #0]
 800234c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800234e:	fa22 f303 	lsr.w	r3, r2, r3
 8002352:	2b00      	cmp	r3, #0
 8002354:	f47f ae8e 	bne.w	8002074 <HAL_GPIO_Init+0x14>
  }
}
 8002358:	bf00      	nop
 800235a:	bf00      	nop
 800235c:	372c      	adds	r7, #44	; 0x2c
 800235e:	46bd      	mov	sp, r7
 8002360:	bc80      	pop	{r7}
 8002362:	4770      	bx	lr
 8002364:	40010400 	.word	0x40010400

08002368 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002368:	b480      	push	{r7}
 800236a:	b083      	sub	sp, #12
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
 8002370:	460b      	mov	r3, r1
 8002372:	807b      	strh	r3, [r7, #2]
 8002374:	4613      	mov	r3, r2
 8002376:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002378:	787b      	ldrb	r3, [r7, #1]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d003      	beq.n	8002386 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800237e:	887a      	ldrh	r2, [r7, #2]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002384:	e003      	b.n	800238e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002386:	887b      	ldrh	r3, [r7, #2]
 8002388:	041a      	lsls	r2, r3, #16
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	611a      	str	r2, [r3, #16]
}
 800238e:	bf00      	nop
 8002390:	370c      	adds	r7, #12
 8002392:	46bd      	mov	sp, r7
 8002394:	bc80      	pop	{r7}
 8002396:	4770      	bx	lr

08002398 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b082      	sub	sp, #8
 800239c:	af00      	add	r7, sp, #0
 800239e:	4603      	mov	r3, r0
 80023a0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80023a2:	4b08      	ldr	r3, [pc, #32]	; (80023c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80023a4:	695a      	ldr	r2, [r3, #20]
 80023a6:	88fb      	ldrh	r3, [r7, #6]
 80023a8:	4013      	ands	r3, r2
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d006      	beq.n	80023bc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80023ae:	4a05      	ldr	r2, [pc, #20]	; (80023c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80023b0:	88fb      	ldrh	r3, [r7, #6]
 80023b2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80023b4:	88fb      	ldrh	r3, [r7, #6]
 80023b6:	4618      	mov	r0, r3
 80023b8:	f002 fb72 	bl	8004aa0 <HAL_GPIO_EXTI_Callback>
  }
}
 80023bc:	bf00      	nop
 80023be:	3708      	adds	r7, #8
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}
 80023c4:	40010400 	.word	0x40010400

080023c8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b086      	sub	sp, #24
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d101      	bne.n	80023da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	e272      	b.n	80028c0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f003 0301 	and.w	r3, r3, #1
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	f000 8087 	beq.w	80024f6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80023e8:	4b92      	ldr	r3, [pc, #584]	; (8002634 <HAL_RCC_OscConfig+0x26c>)
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	f003 030c 	and.w	r3, r3, #12
 80023f0:	2b04      	cmp	r3, #4
 80023f2:	d00c      	beq.n	800240e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80023f4:	4b8f      	ldr	r3, [pc, #572]	; (8002634 <HAL_RCC_OscConfig+0x26c>)
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	f003 030c 	and.w	r3, r3, #12
 80023fc:	2b08      	cmp	r3, #8
 80023fe:	d112      	bne.n	8002426 <HAL_RCC_OscConfig+0x5e>
 8002400:	4b8c      	ldr	r3, [pc, #560]	; (8002634 <HAL_RCC_OscConfig+0x26c>)
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002408:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800240c:	d10b      	bne.n	8002426 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800240e:	4b89      	ldr	r3, [pc, #548]	; (8002634 <HAL_RCC_OscConfig+0x26c>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002416:	2b00      	cmp	r3, #0
 8002418:	d06c      	beq.n	80024f4 <HAL_RCC_OscConfig+0x12c>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d168      	bne.n	80024f4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	e24c      	b.n	80028c0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800242e:	d106      	bne.n	800243e <HAL_RCC_OscConfig+0x76>
 8002430:	4b80      	ldr	r3, [pc, #512]	; (8002634 <HAL_RCC_OscConfig+0x26c>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a7f      	ldr	r2, [pc, #508]	; (8002634 <HAL_RCC_OscConfig+0x26c>)
 8002436:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800243a:	6013      	str	r3, [r2, #0]
 800243c:	e02e      	b.n	800249c <HAL_RCC_OscConfig+0xd4>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d10c      	bne.n	8002460 <HAL_RCC_OscConfig+0x98>
 8002446:	4b7b      	ldr	r3, [pc, #492]	; (8002634 <HAL_RCC_OscConfig+0x26c>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4a7a      	ldr	r2, [pc, #488]	; (8002634 <HAL_RCC_OscConfig+0x26c>)
 800244c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002450:	6013      	str	r3, [r2, #0]
 8002452:	4b78      	ldr	r3, [pc, #480]	; (8002634 <HAL_RCC_OscConfig+0x26c>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4a77      	ldr	r2, [pc, #476]	; (8002634 <HAL_RCC_OscConfig+0x26c>)
 8002458:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800245c:	6013      	str	r3, [r2, #0]
 800245e:	e01d      	b.n	800249c <HAL_RCC_OscConfig+0xd4>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002468:	d10c      	bne.n	8002484 <HAL_RCC_OscConfig+0xbc>
 800246a:	4b72      	ldr	r3, [pc, #456]	; (8002634 <HAL_RCC_OscConfig+0x26c>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4a71      	ldr	r2, [pc, #452]	; (8002634 <HAL_RCC_OscConfig+0x26c>)
 8002470:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002474:	6013      	str	r3, [r2, #0]
 8002476:	4b6f      	ldr	r3, [pc, #444]	; (8002634 <HAL_RCC_OscConfig+0x26c>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4a6e      	ldr	r2, [pc, #440]	; (8002634 <HAL_RCC_OscConfig+0x26c>)
 800247c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002480:	6013      	str	r3, [r2, #0]
 8002482:	e00b      	b.n	800249c <HAL_RCC_OscConfig+0xd4>
 8002484:	4b6b      	ldr	r3, [pc, #428]	; (8002634 <HAL_RCC_OscConfig+0x26c>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a6a      	ldr	r2, [pc, #424]	; (8002634 <HAL_RCC_OscConfig+0x26c>)
 800248a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800248e:	6013      	str	r3, [r2, #0]
 8002490:	4b68      	ldr	r3, [pc, #416]	; (8002634 <HAL_RCC_OscConfig+0x26c>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a67      	ldr	r2, [pc, #412]	; (8002634 <HAL_RCC_OscConfig+0x26c>)
 8002496:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800249a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d013      	beq.n	80024cc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024a4:	f7ff fbda 	bl	8001c5c <HAL_GetTick>
 80024a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024aa:	e008      	b.n	80024be <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024ac:	f7ff fbd6 	bl	8001c5c <HAL_GetTick>
 80024b0:	4602      	mov	r2, r0
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	1ad3      	subs	r3, r2, r3
 80024b6:	2b64      	cmp	r3, #100	; 0x64
 80024b8:	d901      	bls.n	80024be <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80024ba:	2303      	movs	r3, #3
 80024bc:	e200      	b.n	80028c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024be:	4b5d      	ldr	r3, [pc, #372]	; (8002634 <HAL_RCC_OscConfig+0x26c>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d0f0      	beq.n	80024ac <HAL_RCC_OscConfig+0xe4>
 80024ca:	e014      	b.n	80024f6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024cc:	f7ff fbc6 	bl	8001c5c <HAL_GetTick>
 80024d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024d2:	e008      	b.n	80024e6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024d4:	f7ff fbc2 	bl	8001c5c <HAL_GetTick>
 80024d8:	4602      	mov	r2, r0
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	1ad3      	subs	r3, r2, r3
 80024de:	2b64      	cmp	r3, #100	; 0x64
 80024e0:	d901      	bls.n	80024e6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80024e2:	2303      	movs	r3, #3
 80024e4:	e1ec      	b.n	80028c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024e6:	4b53      	ldr	r3, [pc, #332]	; (8002634 <HAL_RCC_OscConfig+0x26c>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d1f0      	bne.n	80024d4 <HAL_RCC_OscConfig+0x10c>
 80024f2:	e000      	b.n	80024f6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f003 0302 	and.w	r3, r3, #2
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d063      	beq.n	80025ca <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002502:	4b4c      	ldr	r3, [pc, #304]	; (8002634 <HAL_RCC_OscConfig+0x26c>)
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	f003 030c 	and.w	r3, r3, #12
 800250a:	2b00      	cmp	r3, #0
 800250c:	d00b      	beq.n	8002526 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800250e:	4b49      	ldr	r3, [pc, #292]	; (8002634 <HAL_RCC_OscConfig+0x26c>)
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	f003 030c 	and.w	r3, r3, #12
 8002516:	2b08      	cmp	r3, #8
 8002518:	d11c      	bne.n	8002554 <HAL_RCC_OscConfig+0x18c>
 800251a:	4b46      	ldr	r3, [pc, #280]	; (8002634 <HAL_RCC_OscConfig+0x26c>)
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002522:	2b00      	cmp	r3, #0
 8002524:	d116      	bne.n	8002554 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002526:	4b43      	ldr	r3, [pc, #268]	; (8002634 <HAL_RCC_OscConfig+0x26c>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f003 0302 	and.w	r3, r3, #2
 800252e:	2b00      	cmp	r3, #0
 8002530:	d005      	beq.n	800253e <HAL_RCC_OscConfig+0x176>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	691b      	ldr	r3, [r3, #16]
 8002536:	2b01      	cmp	r3, #1
 8002538:	d001      	beq.n	800253e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	e1c0      	b.n	80028c0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800253e:	4b3d      	ldr	r3, [pc, #244]	; (8002634 <HAL_RCC_OscConfig+0x26c>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	695b      	ldr	r3, [r3, #20]
 800254a:	00db      	lsls	r3, r3, #3
 800254c:	4939      	ldr	r1, [pc, #228]	; (8002634 <HAL_RCC_OscConfig+0x26c>)
 800254e:	4313      	orrs	r3, r2
 8002550:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002552:	e03a      	b.n	80025ca <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	691b      	ldr	r3, [r3, #16]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d020      	beq.n	800259e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800255c:	4b36      	ldr	r3, [pc, #216]	; (8002638 <HAL_RCC_OscConfig+0x270>)
 800255e:	2201      	movs	r2, #1
 8002560:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002562:	f7ff fb7b 	bl	8001c5c <HAL_GetTick>
 8002566:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002568:	e008      	b.n	800257c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800256a:	f7ff fb77 	bl	8001c5c <HAL_GetTick>
 800256e:	4602      	mov	r2, r0
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	1ad3      	subs	r3, r2, r3
 8002574:	2b02      	cmp	r3, #2
 8002576:	d901      	bls.n	800257c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002578:	2303      	movs	r3, #3
 800257a:	e1a1      	b.n	80028c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800257c:	4b2d      	ldr	r3, [pc, #180]	; (8002634 <HAL_RCC_OscConfig+0x26c>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f003 0302 	and.w	r3, r3, #2
 8002584:	2b00      	cmp	r3, #0
 8002586:	d0f0      	beq.n	800256a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002588:	4b2a      	ldr	r3, [pc, #168]	; (8002634 <HAL_RCC_OscConfig+0x26c>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	695b      	ldr	r3, [r3, #20]
 8002594:	00db      	lsls	r3, r3, #3
 8002596:	4927      	ldr	r1, [pc, #156]	; (8002634 <HAL_RCC_OscConfig+0x26c>)
 8002598:	4313      	orrs	r3, r2
 800259a:	600b      	str	r3, [r1, #0]
 800259c:	e015      	b.n	80025ca <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800259e:	4b26      	ldr	r3, [pc, #152]	; (8002638 <HAL_RCC_OscConfig+0x270>)
 80025a0:	2200      	movs	r2, #0
 80025a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025a4:	f7ff fb5a 	bl	8001c5c <HAL_GetTick>
 80025a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025aa:	e008      	b.n	80025be <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025ac:	f7ff fb56 	bl	8001c5c <HAL_GetTick>
 80025b0:	4602      	mov	r2, r0
 80025b2:	693b      	ldr	r3, [r7, #16]
 80025b4:	1ad3      	subs	r3, r2, r3
 80025b6:	2b02      	cmp	r3, #2
 80025b8:	d901      	bls.n	80025be <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80025ba:	2303      	movs	r3, #3
 80025bc:	e180      	b.n	80028c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025be:	4b1d      	ldr	r3, [pc, #116]	; (8002634 <HAL_RCC_OscConfig+0x26c>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f003 0302 	and.w	r3, r3, #2
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d1f0      	bne.n	80025ac <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f003 0308 	and.w	r3, r3, #8
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d03a      	beq.n	800264c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	699b      	ldr	r3, [r3, #24]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d019      	beq.n	8002612 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025de:	4b17      	ldr	r3, [pc, #92]	; (800263c <HAL_RCC_OscConfig+0x274>)
 80025e0:	2201      	movs	r2, #1
 80025e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025e4:	f7ff fb3a 	bl	8001c5c <HAL_GetTick>
 80025e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025ea:	e008      	b.n	80025fe <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025ec:	f7ff fb36 	bl	8001c5c <HAL_GetTick>
 80025f0:	4602      	mov	r2, r0
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	1ad3      	subs	r3, r2, r3
 80025f6:	2b02      	cmp	r3, #2
 80025f8:	d901      	bls.n	80025fe <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80025fa:	2303      	movs	r3, #3
 80025fc:	e160      	b.n	80028c0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025fe:	4b0d      	ldr	r3, [pc, #52]	; (8002634 <HAL_RCC_OscConfig+0x26c>)
 8002600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002602:	f003 0302 	and.w	r3, r3, #2
 8002606:	2b00      	cmp	r3, #0
 8002608:	d0f0      	beq.n	80025ec <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800260a:	2001      	movs	r0, #1
 800260c:	f000 face 	bl	8002bac <RCC_Delay>
 8002610:	e01c      	b.n	800264c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002612:	4b0a      	ldr	r3, [pc, #40]	; (800263c <HAL_RCC_OscConfig+0x274>)
 8002614:	2200      	movs	r2, #0
 8002616:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002618:	f7ff fb20 	bl	8001c5c <HAL_GetTick>
 800261c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800261e:	e00f      	b.n	8002640 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002620:	f7ff fb1c 	bl	8001c5c <HAL_GetTick>
 8002624:	4602      	mov	r2, r0
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	1ad3      	subs	r3, r2, r3
 800262a:	2b02      	cmp	r3, #2
 800262c:	d908      	bls.n	8002640 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800262e:	2303      	movs	r3, #3
 8002630:	e146      	b.n	80028c0 <HAL_RCC_OscConfig+0x4f8>
 8002632:	bf00      	nop
 8002634:	40021000 	.word	0x40021000
 8002638:	42420000 	.word	0x42420000
 800263c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002640:	4b92      	ldr	r3, [pc, #584]	; (800288c <HAL_RCC_OscConfig+0x4c4>)
 8002642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002644:	f003 0302 	and.w	r3, r3, #2
 8002648:	2b00      	cmp	r3, #0
 800264a:	d1e9      	bne.n	8002620 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f003 0304 	and.w	r3, r3, #4
 8002654:	2b00      	cmp	r3, #0
 8002656:	f000 80a6 	beq.w	80027a6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800265a:	2300      	movs	r3, #0
 800265c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800265e:	4b8b      	ldr	r3, [pc, #556]	; (800288c <HAL_RCC_OscConfig+0x4c4>)
 8002660:	69db      	ldr	r3, [r3, #28]
 8002662:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002666:	2b00      	cmp	r3, #0
 8002668:	d10d      	bne.n	8002686 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800266a:	4b88      	ldr	r3, [pc, #544]	; (800288c <HAL_RCC_OscConfig+0x4c4>)
 800266c:	69db      	ldr	r3, [r3, #28]
 800266e:	4a87      	ldr	r2, [pc, #540]	; (800288c <HAL_RCC_OscConfig+0x4c4>)
 8002670:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002674:	61d3      	str	r3, [r2, #28]
 8002676:	4b85      	ldr	r3, [pc, #532]	; (800288c <HAL_RCC_OscConfig+0x4c4>)
 8002678:	69db      	ldr	r3, [r3, #28]
 800267a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800267e:	60bb      	str	r3, [r7, #8]
 8002680:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002682:	2301      	movs	r3, #1
 8002684:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002686:	4b82      	ldr	r3, [pc, #520]	; (8002890 <HAL_RCC_OscConfig+0x4c8>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800268e:	2b00      	cmp	r3, #0
 8002690:	d118      	bne.n	80026c4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002692:	4b7f      	ldr	r3, [pc, #508]	; (8002890 <HAL_RCC_OscConfig+0x4c8>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4a7e      	ldr	r2, [pc, #504]	; (8002890 <HAL_RCC_OscConfig+0x4c8>)
 8002698:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800269c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800269e:	f7ff fadd 	bl	8001c5c <HAL_GetTick>
 80026a2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026a4:	e008      	b.n	80026b8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026a6:	f7ff fad9 	bl	8001c5c <HAL_GetTick>
 80026aa:	4602      	mov	r2, r0
 80026ac:	693b      	ldr	r3, [r7, #16]
 80026ae:	1ad3      	subs	r3, r2, r3
 80026b0:	2b64      	cmp	r3, #100	; 0x64
 80026b2:	d901      	bls.n	80026b8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80026b4:	2303      	movs	r3, #3
 80026b6:	e103      	b.n	80028c0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026b8:	4b75      	ldr	r3, [pc, #468]	; (8002890 <HAL_RCC_OscConfig+0x4c8>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d0f0      	beq.n	80026a6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	68db      	ldr	r3, [r3, #12]
 80026c8:	2b01      	cmp	r3, #1
 80026ca:	d106      	bne.n	80026da <HAL_RCC_OscConfig+0x312>
 80026cc:	4b6f      	ldr	r3, [pc, #444]	; (800288c <HAL_RCC_OscConfig+0x4c4>)
 80026ce:	6a1b      	ldr	r3, [r3, #32]
 80026d0:	4a6e      	ldr	r2, [pc, #440]	; (800288c <HAL_RCC_OscConfig+0x4c4>)
 80026d2:	f043 0301 	orr.w	r3, r3, #1
 80026d6:	6213      	str	r3, [r2, #32]
 80026d8:	e02d      	b.n	8002736 <HAL_RCC_OscConfig+0x36e>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	68db      	ldr	r3, [r3, #12]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d10c      	bne.n	80026fc <HAL_RCC_OscConfig+0x334>
 80026e2:	4b6a      	ldr	r3, [pc, #424]	; (800288c <HAL_RCC_OscConfig+0x4c4>)
 80026e4:	6a1b      	ldr	r3, [r3, #32]
 80026e6:	4a69      	ldr	r2, [pc, #420]	; (800288c <HAL_RCC_OscConfig+0x4c4>)
 80026e8:	f023 0301 	bic.w	r3, r3, #1
 80026ec:	6213      	str	r3, [r2, #32]
 80026ee:	4b67      	ldr	r3, [pc, #412]	; (800288c <HAL_RCC_OscConfig+0x4c4>)
 80026f0:	6a1b      	ldr	r3, [r3, #32]
 80026f2:	4a66      	ldr	r2, [pc, #408]	; (800288c <HAL_RCC_OscConfig+0x4c4>)
 80026f4:	f023 0304 	bic.w	r3, r3, #4
 80026f8:	6213      	str	r3, [r2, #32]
 80026fa:	e01c      	b.n	8002736 <HAL_RCC_OscConfig+0x36e>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	68db      	ldr	r3, [r3, #12]
 8002700:	2b05      	cmp	r3, #5
 8002702:	d10c      	bne.n	800271e <HAL_RCC_OscConfig+0x356>
 8002704:	4b61      	ldr	r3, [pc, #388]	; (800288c <HAL_RCC_OscConfig+0x4c4>)
 8002706:	6a1b      	ldr	r3, [r3, #32]
 8002708:	4a60      	ldr	r2, [pc, #384]	; (800288c <HAL_RCC_OscConfig+0x4c4>)
 800270a:	f043 0304 	orr.w	r3, r3, #4
 800270e:	6213      	str	r3, [r2, #32]
 8002710:	4b5e      	ldr	r3, [pc, #376]	; (800288c <HAL_RCC_OscConfig+0x4c4>)
 8002712:	6a1b      	ldr	r3, [r3, #32]
 8002714:	4a5d      	ldr	r2, [pc, #372]	; (800288c <HAL_RCC_OscConfig+0x4c4>)
 8002716:	f043 0301 	orr.w	r3, r3, #1
 800271a:	6213      	str	r3, [r2, #32]
 800271c:	e00b      	b.n	8002736 <HAL_RCC_OscConfig+0x36e>
 800271e:	4b5b      	ldr	r3, [pc, #364]	; (800288c <HAL_RCC_OscConfig+0x4c4>)
 8002720:	6a1b      	ldr	r3, [r3, #32]
 8002722:	4a5a      	ldr	r2, [pc, #360]	; (800288c <HAL_RCC_OscConfig+0x4c4>)
 8002724:	f023 0301 	bic.w	r3, r3, #1
 8002728:	6213      	str	r3, [r2, #32]
 800272a:	4b58      	ldr	r3, [pc, #352]	; (800288c <HAL_RCC_OscConfig+0x4c4>)
 800272c:	6a1b      	ldr	r3, [r3, #32]
 800272e:	4a57      	ldr	r2, [pc, #348]	; (800288c <HAL_RCC_OscConfig+0x4c4>)
 8002730:	f023 0304 	bic.w	r3, r3, #4
 8002734:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	68db      	ldr	r3, [r3, #12]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d015      	beq.n	800276a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800273e:	f7ff fa8d 	bl	8001c5c <HAL_GetTick>
 8002742:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002744:	e00a      	b.n	800275c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002746:	f7ff fa89 	bl	8001c5c <HAL_GetTick>
 800274a:	4602      	mov	r2, r0
 800274c:	693b      	ldr	r3, [r7, #16]
 800274e:	1ad3      	subs	r3, r2, r3
 8002750:	f241 3288 	movw	r2, #5000	; 0x1388
 8002754:	4293      	cmp	r3, r2
 8002756:	d901      	bls.n	800275c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002758:	2303      	movs	r3, #3
 800275a:	e0b1      	b.n	80028c0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800275c:	4b4b      	ldr	r3, [pc, #300]	; (800288c <HAL_RCC_OscConfig+0x4c4>)
 800275e:	6a1b      	ldr	r3, [r3, #32]
 8002760:	f003 0302 	and.w	r3, r3, #2
 8002764:	2b00      	cmp	r3, #0
 8002766:	d0ee      	beq.n	8002746 <HAL_RCC_OscConfig+0x37e>
 8002768:	e014      	b.n	8002794 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800276a:	f7ff fa77 	bl	8001c5c <HAL_GetTick>
 800276e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002770:	e00a      	b.n	8002788 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002772:	f7ff fa73 	bl	8001c5c <HAL_GetTick>
 8002776:	4602      	mov	r2, r0
 8002778:	693b      	ldr	r3, [r7, #16]
 800277a:	1ad3      	subs	r3, r2, r3
 800277c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002780:	4293      	cmp	r3, r2
 8002782:	d901      	bls.n	8002788 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002784:	2303      	movs	r3, #3
 8002786:	e09b      	b.n	80028c0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002788:	4b40      	ldr	r3, [pc, #256]	; (800288c <HAL_RCC_OscConfig+0x4c4>)
 800278a:	6a1b      	ldr	r3, [r3, #32]
 800278c:	f003 0302 	and.w	r3, r3, #2
 8002790:	2b00      	cmp	r3, #0
 8002792:	d1ee      	bne.n	8002772 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002794:	7dfb      	ldrb	r3, [r7, #23]
 8002796:	2b01      	cmp	r3, #1
 8002798:	d105      	bne.n	80027a6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800279a:	4b3c      	ldr	r3, [pc, #240]	; (800288c <HAL_RCC_OscConfig+0x4c4>)
 800279c:	69db      	ldr	r3, [r3, #28]
 800279e:	4a3b      	ldr	r2, [pc, #236]	; (800288c <HAL_RCC_OscConfig+0x4c4>)
 80027a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027a4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	69db      	ldr	r3, [r3, #28]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	f000 8087 	beq.w	80028be <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80027b0:	4b36      	ldr	r3, [pc, #216]	; (800288c <HAL_RCC_OscConfig+0x4c4>)
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	f003 030c 	and.w	r3, r3, #12
 80027b8:	2b08      	cmp	r3, #8
 80027ba:	d061      	beq.n	8002880 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	69db      	ldr	r3, [r3, #28]
 80027c0:	2b02      	cmp	r3, #2
 80027c2:	d146      	bne.n	8002852 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027c4:	4b33      	ldr	r3, [pc, #204]	; (8002894 <HAL_RCC_OscConfig+0x4cc>)
 80027c6:	2200      	movs	r2, #0
 80027c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027ca:	f7ff fa47 	bl	8001c5c <HAL_GetTick>
 80027ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027d0:	e008      	b.n	80027e4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027d2:	f7ff fa43 	bl	8001c5c <HAL_GetTick>
 80027d6:	4602      	mov	r2, r0
 80027d8:	693b      	ldr	r3, [r7, #16]
 80027da:	1ad3      	subs	r3, r2, r3
 80027dc:	2b02      	cmp	r3, #2
 80027de:	d901      	bls.n	80027e4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80027e0:	2303      	movs	r3, #3
 80027e2:	e06d      	b.n	80028c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027e4:	4b29      	ldr	r3, [pc, #164]	; (800288c <HAL_RCC_OscConfig+0x4c4>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d1f0      	bne.n	80027d2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6a1b      	ldr	r3, [r3, #32]
 80027f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027f8:	d108      	bne.n	800280c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80027fa:	4b24      	ldr	r3, [pc, #144]	; (800288c <HAL_RCC_OscConfig+0x4c4>)
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	689b      	ldr	r3, [r3, #8]
 8002806:	4921      	ldr	r1, [pc, #132]	; (800288c <HAL_RCC_OscConfig+0x4c4>)
 8002808:	4313      	orrs	r3, r2
 800280a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800280c:	4b1f      	ldr	r3, [pc, #124]	; (800288c <HAL_RCC_OscConfig+0x4c4>)
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6a19      	ldr	r1, [r3, #32]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800281c:	430b      	orrs	r3, r1
 800281e:	491b      	ldr	r1, [pc, #108]	; (800288c <HAL_RCC_OscConfig+0x4c4>)
 8002820:	4313      	orrs	r3, r2
 8002822:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002824:	4b1b      	ldr	r3, [pc, #108]	; (8002894 <HAL_RCC_OscConfig+0x4cc>)
 8002826:	2201      	movs	r2, #1
 8002828:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800282a:	f7ff fa17 	bl	8001c5c <HAL_GetTick>
 800282e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002830:	e008      	b.n	8002844 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002832:	f7ff fa13 	bl	8001c5c <HAL_GetTick>
 8002836:	4602      	mov	r2, r0
 8002838:	693b      	ldr	r3, [r7, #16]
 800283a:	1ad3      	subs	r3, r2, r3
 800283c:	2b02      	cmp	r3, #2
 800283e:	d901      	bls.n	8002844 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002840:	2303      	movs	r3, #3
 8002842:	e03d      	b.n	80028c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002844:	4b11      	ldr	r3, [pc, #68]	; (800288c <HAL_RCC_OscConfig+0x4c4>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800284c:	2b00      	cmp	r3, #0
 800284e:	d0f0      	beq.n	8002832 <HAL_RCC_OscConfig+0x46a>
 8002850:	e035      	b.n	80028be <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002852:	4b10      	ldr	r3, [pc, #64]	; (8002894 <HAL_RCC_OscConfig+0x4cc>)
 8002854:	2200      	movs	r2, #0
 8002856:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002858:	f7ff fa00 	bl	8001c5c <HAL_GetTick>
 800285c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800285e:	e008      	b.n	8002872 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002860:	f7ff f9fc 	bl	8001c5c <HAL_GetTick>
 8002864:	4602      	mov	r2, r0
 8002866:	693b      	ldr	r3, [r7, #16]
 8002868:	1ad3      	subs	r3, r2, r3
 800286a:	2b02      	cmp	r3, #2
 800286c:	d901      	bls.n	8002872 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800286e:	2303      	movs	r3, #3
 8002870:	e026      	b.n	80028c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002872:	4b06      	ldr	r3, [pc, #24]	; (800288c <HAL_RCC_OscConfig+0x4c4>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800287a:	2b00      	cmp	r3, #0
 800287c:	d1f0      	bne.n	8002860 <HAL_RCC_OscConfig+0x498>
 800287e:	e01e      	b.n	80028be <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	69db      	ldr	r3, [r3, #28]
 8002884:	2b01      	cmp	r3, #1
 8002886:	d107      	bne.n	8002898 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002888:	2301      	movs	r3, #1
 800288a:	e019      	b.n	80028c0 <HAL_RCC_OscConfig+0x4f8>
 800288c:	40021000 	.word	0x40021000
 8002890:	40007000 	.word	0x40007000
 8002894:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002898:	4b0b      	ldr	r3, [pc, #44]	; (80028c8 <HAL_RCC_OscConfig+0x500>)
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6a1b      	ldr	r3, [r3, #32]
 80028a8:	429a      	cmp	r2, r3
 80028aa:	d106      	bne.n	80028ba <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028b6:	429a      	cmp	r2, r3
 80028b8:	d001      	beq.n	80028be <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80028ba:	2301      	movs	r3, #1
 80028bc:	e000      	b.n	80028c0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80028be:	2300      	movs	r3, #0
}
 80028c0:	4618      	mov	r0, r3
 80028c2:	3718      	adds	r7, #24
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd80      	pop	{r7, pc}
 80028c8:	40021000 	.word	0x40021000

080028cc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b084      	sub	sp, #16
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
 80028d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d101      	bne.n	80028e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028dc:	2301      	movs	r3, #1
 80028de:	e0d0      	b.n	8002a82 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80028e0:	4b6a      	ldr	r3, [pc, #424]	; (8002a8c <HAL_RCC_ClockConfig+0x1c0>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f003 0307 	and.w	r3, r3, #7
 80028e8:	683a      	ldr	r2, [r7, #0]
 80028ea:	429a      	cmp	r2, r3
 80028ec:	d910      	bls.n	8002910 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028ee:	4b67      	ldr	r3, [pc, #412]	; (8002a8c <HAL_RCC_ClockConfig+0x1c0>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f023 0207 	bic.w	r2, r3, #7
 80028f6:	4965      	ldr	r1, [pc, #404]	; (8002a8c <HAL_RCC_ClockConfig+0x1c0>)
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	4313      	orrs	r3, r2
 80028fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028fe:	4b63      	ldr	r3, [pc, #396]	; (8002a8c <HAL_RCC_ClockConfig+0x1c0>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f003 0307 	and.w	r3, r3, #7
 8002906:	683a      	ldr	r2, [r7, #0]
 8002908:	429a      	cmp	r2, r3
 800290a:	d001      	beq.n	8002910 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800290c:	2301      	movs	r3, #1
 800290e:	e0b8      	b.n	8002a82 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f003 0302 	and.w	r3, r3, #2
 8002918:	2b00      	cmp	r3, #0
 800291a:	d020      	beq.n	800295e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f003 0304 	and.w	r3, r3, #4
 8002924:	2b00      	cmp	r3, #0
 8002926:	d005      	beq.n	8002934 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002928:	4b59      	ldr	r3, [pc, #356]	; (8002a90 <HAL_RCC_ClockConfig+0x1c4>)
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	4a58      	ldr	r2, [pc, #352]	; (8002a90 <HAL_RCC_ClockConfig+0x1c4>)
 800292e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002932:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f003 0308 	and.w	r3, r3, #8
 800293c:	2b00      	cmp	r3, #0
 800293e:	d005      	beq.n	800294c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002940:	4b53      	ldr	r3, [pc, #332]	; (8002a90 <HAL_RCC_ClockConfig+0x1c4>)
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	4a52      	ldr	r2, [pc, #328]	; (8002a90 <HAL_RCC_ClockConfig+0x1c4>)
 8002946:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800294a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800294c:	4b50      	ldr	r3, [pc, #320]	; (8002a90 <HAL_RCC_ClockConfig+0x1c4>)
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	689b      	ldr	r3, [r3, #8]
 8002958:	494d      	ldr	r1, [pc, #308]	; (8002a90 <HAL_RCC_ClockConfig+0x1c4>)
 800295a:	4313      	orrs	r3, r2
 800295c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f003 0301 	and.w	r3, r3, #1
 8002966:	2b00      	cmp	r3, #0
 8002968:	d040      	beq.n	80029ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	2b01      	cmp	r3, #1
 8002970:	d107      	bne.n	8002982 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002972:	4b47      	ldr	r3, [pc, #284]	; (8002a90 <HAL_RCC_ClockConfig+0x1c4>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800297a:	2b00      	cmp	r3, #0
 800297c:	d115      	bne.n	80029aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800297e:	2301      	movs	r3, #1
 8002980:	e07f      	b.n	8002a82 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	2b02      	cmp	r3, #2
 8002988:	d107      	bne.n	800299a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800298a:	4b41      	ldr	r3, [pc, #260]	; (8002a90 <HAL_RCC_ClockConfig+0x1c4>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002992:	2b00      	cmp	r3, #0
 8002994:	d109      	bne.n	80029aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002996:	2301      	movs	r3, #1
 8002998:	e073      	b.n	8002a82 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800299a:	4b3d      	ldr	r3, [pc, #244]	; (8002a90 <HAL_RCC_ClockConfig+0x1c4>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f003 0302 	and.w	r3, r3, #2
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d101      	bne.n	80029aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
 80029a8:	e06b      	b.n	8002a82 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029aa:	4b39      	ldr	r3, [pc, #228]	; (8002a90 <HAL_RCC_ClockConfig+0x1c4>)
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	f023 0203 	bic.w	r2, r3, #3
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	4936      	ldr	r1, [pc, #216]	; (8002a90 <HAL_RCC_ClockConfig+0x1c4>)
 80029b8:	4313      	orrs	r3, r2
 80029ba:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029bc:	f7ff f94e 	bl	8001c5c <HAL_GetTick>
 80029c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029c2:	e00a      	b.n	80029da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029c4:	f7ff f94a 	bl	8001c5c <HAL_GetTick>
 80029c8:	4602      	mov	r2, r0
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	1ad3      	subs	r3, r2, r3
 80029ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d901      	bls.n	80029da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80029d6:	2303      	movs	r3, #3
 80029d8:	e053      	b.n	8002a82 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029da:	4b2d      	ldr	r3, [pc, #180]	; (8002a90 <HAL_RCC_ClockConfig+0x1c4>)
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	f003 020c 	and.w	r2, r3, #12
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	009b      	lsls	r3, r3, #2
 80029e8:	429a      	cmp	r2, r3
 80029ea:	d1eb      	bne.n	80029c4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80029ec:	4b27      	ldr	r3, [pc, #156]	; (8002a8c <HAL_RCC_ClockConfig+0x1c0>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f003 0307 	and.w	r3, r3, #7
 80029f4:	683a      	ldr	r2, [r7, #0]
 80029f6:	429a      	cmp	r2, r3
 80029f8:	d210      	bcs.n	8002a1c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029fa:	4b24      	ldr	r3, [pc, #144]	; (8002a8c <HAL_RCC_ClockConfig+0x1c0>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f023 0207 	bic.w	r2, r3, #7
 8002a02:	4922      	ldr	r1, [pc, #136]	; (8002a8c <HAL_RCC_ClockConfig+0x1c0>)
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	4313      	orrs	r3, r2
 8002a08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a0a:	4b20      	ldr	r3, [pc, #128]	; (8002a8c <HAL_RCC_ClockConfig+0x1c0>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f003 0307 	and.w	r3, r3, #7
 8002a12:	683a      	ldr	r2, [r7, #0]
 8002a14:	429a      	cmp	r2, r3
 8002a16:	d001      	beq.n	8002a1c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	e032      	b.n	8002a82 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f003 0304 	and.w	r3, r3, #4
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d008      	beq.n	8002a3a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a28:	4b19      	ldr	r3, [pc, #100]	; (8002a90 <HAL_RCC_ClockConfig+0x1c4>)
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	68db      	ldr	r3, [r3, #12]
 8002a34:	4916      	ldr	r1, [pc, #88]	; (8002a90 <HAL_RCC_ClockConfig+0x1c4>)
 8002a36:	4313      	orrs	r3, r2
 8002a38:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f003 0308 	and.w	r3, r3, #8
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d009      	beq.n	8002a5a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002a46:	4b12      	ldr	r3, [pc, #72]	; (8002a90 <HAL_RCC_ClockConfig+0x1c4>)
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	691b      	ldr	r3, [r3, #16]
 8002a52:	00db      	lsls	r3, r3, #3
 8002a54:	490e      	ldr	r1, [pc, #56]	; (8002a90 <HAL_RCC_ClockConfig+0x1c4>)
 8002a56:	4313      	orrs	r3, r2
 8002a58:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002a5a:	f000 f821 	bl	8002aa0 <HAL_RCC_GetSysClockFreq>
 8002a5e:	4602      	mov	r2, r0
 8002a60:	4b0b      	ldr	r3, [pc, #44]	; (8002a90 <HAL_RCC_ClockConfig+0x1c4>)
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	091b      	lsrs	r3, r3, #4
 8002a66:	f003 030f 	and.w	r3, r3, #15
 8002a6a:	490a      	ldr	r1, [pc, #40]	; (8002a94 <HAL_RCC_ClockConfig+0x1c8>)
 8002a6c:	5ccb      	ldrb	r3, [r1, r3]
 8002a6e:	fa22 f303 	lsr.w	r3, r2, r3
 8002a72:	4a09      	ldr	r2, [pc, #36]	; (8002a98 <HAL_RCC_ClockConfig+0x1cc>)
 8002a74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002a76:	4b09      	ldr	r3, [pc, #36]	; (8002a9c <HAL_RCC_ClockConfig+0x1d0>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f7ff f8ac 	bl	8001bd8 <HAL_InitTick>

  return HAL_OK;
 8002a80:	2300      	movs	r3, #0
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	3710      	adds	r7, #16
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}
 8002a8a:	bf00      	nop
 8002a8c:	40022000 	.word	0x40022000
 8002a90:	40021000 	.word	0x40021000
 8002a94:	0800a49c 	.word	0x0800a49c
 8002a98:	20000000 	.word	0x20000000
 8002a9c:	20000004 	.word	0x20000004

08002aa0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b087      	sub	sp, #28
 8002aa4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	60fb      	str	r3, [r7, #12]
 8002aaa:	2300      	movs	r3, #0
 8002aac:	60bb      	str	r3, [r7, #8]
 8002aae:	2300      	movs	r3, #0
 8002ab0:	617b      	str	r3, [r7, #20]
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002aba:	4b1e      	ldr	r3, [pc, #120]	; (8002b34 <HAL_RCC_GetSysClockFreq+0x94>)
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	f003 030c 	and.w	r3, r3, #12
 8002ac6:	2b04      	cmp	r3, #4
 8002ac8:	d002      	beq.n	8002ad0 <HAL_RCC_GetSysClockFreq+0x30>
 8002aca:	2b08      	cmp	r3, #8
 8002acc:	d003      	beq.n	8002ad6 <HAL_RCC_GetSysClockFreq+0x36>
 8002ace:	e027      	b.n	8002b20 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002ad0:	4b19      	ldr	r3, [pc, #100]	; (8002b38 <HAL_RCC_GetSysClockFreq+0x98>)
 8002ad2:	613b      	str	r3, [r7, #16]
      break;
 8002ad4:	e027      	b.n	8002b26 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	0c9b      	lsrs	r3, r3, #18
 8002ada:	f003 030f 	and.w	r3, r3, #15
 8002ade:	4a17      	ldr	r2, [pc, #92]	; (8002b3c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002ae0:	5cd3      	ldrb	r3, [r2, r3]
 8002ae2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d010      	beq.n	8002b10 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002aee:	4b11      	ldr	r3, [pc, #68]	; (8002b34 <HAL_RCC_GetSysClockFreq+0x94>)
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	0c5b      	lsrs	r3, r3, #17
 8002af4:	f003 0301 	and.w	r3, r3, #1
 8002af8:	4a11      	ldr	r2, [pc, #68]	; (8002b40 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002afa:	5cd3      	ldrb	r3, [r2, r3]
 8002afc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	4a0d      	ldr	r2, [pc, #52]	; (8002b38 <HAL_RCC_GetSysClockFreq+0x98>)
 8002b02:	fb03 f202 	mul.w	r2, r3, r2
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b0c:	617b      	str	r3, [r7, #20]
 8002b0e:	e004      	b.n	8002b1a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	4a0c      	ldr	r2, [pc, #48]	; (8002b44 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002b14:	fb02 f303 	mul.w	r3, r2, r3
 8002b18:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	613b      	str	r3, [r7, #16]
      break;
 8002b1e:	e002      	b.n	8002b26 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002b20:	4b05      	ldr	r3, [pc, #20]	; (8002b38 <HAL_RCC_GetSysClockFreq+0x98>)
 8002b22:	613b      	str	r3, [r7, #16]
      break;
 8002b24:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b26:	693b      	ldr	r3, [r7, #16]
}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	371c      	adds	r7, #28
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bc80      	pop	{r7}
 8002b30:	4770      	bx	lr
 8002b32:	bf00      	nop
 8002b34:	40021000 	.word	0x40021000
 8002b38:	007a1200 	.word	0x007a1200
 8002b3c:	0800a4b4 	.word	0x0800a4b4
 8002b40:	0800a4c4 	.word	0x0800a4c4
 8002b44:	003d0900 	.word	0x003d0900

08002b48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b4c:	4b02      	ldr	r3, [pc, #8]	; (8002b58 <HAL_RCC_GetHCLKFreq+0x10>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bc80      	pop	{r7}
 8002b56:	4770      	bx	lr
 8002b58:	20000000 	.word	0x20000000

08002b5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002b60:	f7ff fff2 	bl	8002b48 <HAL_RCC_GetHCLKFreq>
 8002b64:	4602      	mov	r2, r0
 8002b66:	4b05      	ldr	r3, [pc, #20]	; (8002b7c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	0a1b      	lsrs	r3, r3, #8
 8002b6c:	f003 0307 	and.w	r3, r3, #7
 8002b70:	4903      	ldr	r1, [pc, #12]	; (8002b80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b72:	5ccb      	ldrb	r3, [r1, r3]
 8002b74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	bd80      	pop	{r7, pc}
 8002b7c:	40021000 	.word	0x40021000
 8002b80:	0800a4ac 	.word	0x0800a4ac

08002b84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002b88:	f7ff ffde 	bl	8002b48 <HAL_RCC_GetHCLKFreq>
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	4b05      	ldr	r3, [pc, #20]	; (8002ba4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	0adb      	lsrs	r3, r3, #11
 8002b94:	f003 0307 	and.w	r3, r3, #7
 8002b98:	4903      	ldr	r1, [pc, #12]	; (8002ba8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b9a:	5ccb      	ldrb	r3, [r1, r3]
 8002b9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	bd80      	pop	{r7, pc}
 8002ba4:	40021000 	.word	0x40021000
 8002ba8:	0800a4ac 	.word	0x0800a4ac

08002bac <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002bac:	b480      	push	{r7}
 8002bae:	b085      	sub	sp, #20
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002bb4:	4b0a      	ldr	r3, [pc, #40]	; (8002be0 <RCC_Delay+0x34>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a0a      	ldr	r2, [pc, #40]	; (8002be4 <RCC_Delay+0x38>)
 8002bba:	fba2 2303 	umull	r2, r3, r2, r3
 8002bbe:	0a5b      	lsrs	r3, r3, #9
 8002bc0:	687a      	ldr	r2, [r7, #4]
 8002bc2:	fb02 f303 	mul.w	r3, r2, r3
 8002bc6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002bc8:	bf00      	nop
  }
  while (Delay --);
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	1e5a      	subs	r2, r3, #1
 8002bce:	60fa      	str	r2, [r7, #12]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d1f9      	bne.n	8002bc8 <RCC_Delay+0x1c>
}
 8002bd4:	bf00      	nop
 8002bd6:	bf00      	nop
 8002bd8:	3714      	adds	r7, #20
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bc80      	pop	{r7}
 8002bde:	4770      	bx	lr
 8002be0:	20000000 	.word	0x20000000
 8002be4:	10624dd3 	.word	0x10624dd3

08002be8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b082      	sub	sp, #8
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d101      	bne.n	8002bfa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e041      	b.n	8002c7e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c00:	b2db      	uxtb	r3, r3
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d106      	bne.n	8002c14 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002c0e:	6878      	ldr	r0, [r7, #4]
 8002c10:	f7fe fda8 	bl	8001764 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2202      	movs	r2, #2
 8002c18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681a      	ldr	r2, [r3, #0]
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	3304      	adds	r3, #4
 8002c24:	4619      	mov	r1, r3
 8002c26:	4610      	mov	r0, r2
 8002c28:	f000 faa2 	bl	8003170 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2201      	movs	r2, #1
 8002c30:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2201      	movs	r2, #1
 8002c38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2201      	movs	r2, #1
 8002c40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2201      	movs	r2, #1
 8002c48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2201      	movs	r2, #1
 8002c50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2201      	movs	r2, #1
 8002c58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2201      	movs	r2, #1
 8002c60:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2201      	movs	r2, #1
 8002c68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2201      	movs	r2, #1
 8002c70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2201      	movs	r2, #1
 8002c78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002c7c:	2300      	movs	r3, #0
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	3708      	adds	r7, #8
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd80      	pop	{r7, pc}
	...

08002c88 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b085      	sub	sp, #20
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c96:	b2db      	uxtb	r3, r3
 8002c98:	2b01      	cmp	r3, #1
 8002c9a:	d001      	beq.n	8002ca0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	e03a      	b.n	8002d16 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2202      	movs	r2, #2
 8002ca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	68da      	ldr	r2, [r3, #12]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f042 0201 	orr.w	r2, r2, #1
 8002cb6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a18      	ldr	r2, [pc, #96]	; (8002d20 <HAL_TIM_Base_Start_IT+0x98>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d00e      	beq.n	8002ce0 <HAL_TIM_Base_Start_IT+0x58>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cca:	d009      	beq.n	8002ce0 <HAL_TIM_Base_Start_IT+0x58>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a14      	ldr	r2, [pc, #80]	; (8002d24 <HAL_TIM_Base_Start_IT+0x9c>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d004      	beq.n	8002ce0 <HAL_TIM_Base_Start_IT+0x58>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a13      	ldr	r2, [pc, #76]	; (8002d28 <HAL_TIM_Base_Start_IT+0xa0>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d111      	bne.n	8002d04 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	689b      	ldr	r3, [r3, #8]
 8002ce6:	f003 0307 	and.w	r3, r3, #7
 8002cea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	2b06      	cmp	r3, #6
 8002cf0:	d010      	beq.n	8002d14 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	681a      	ldr	r2, [r3, #0]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f042 0201 	orr.w	r2, r2, #1
 8002d00:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d02:	e007      	b.n	8002d14 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	681a      	ldr	r2, [r3, #0]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f042 0201 	orr.w	r2, r2, #1
 8002d12:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002d14:	2300      	movs	r3, #0
}
 8002d16:	4618      	mov	r0, r3
 8002d18:	3714      	adds	r7, #20
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bc80      	pop	{r7}
 8002d1e:	4770      	bx	lr
 8002d20:	40012c00 	.word	0x40012c00
 8002d24:	40000400 	.word	0x40000400
 8002d28:	40000800 	.word	0x40000800

08002d2c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b083      	sub	sp, #12
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	68da      	ldr	r2, [r3, #12]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f022 0201 	bic.w	r2, r2, #1
 8002d42:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	6a1a      	ldr	r2, [r3, #32]
 8002d4a:	f241 1311 	movw	r3, #4369	; 0x1111
 8002d4e:	4013      	ands	r3, r2
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d10f      	bne.n	8002d74 <HAL_TIM_Base_Stop_IT+0x48>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	6a1a      	ldr	r2, [r3, #32]
 8002d5a:	f240 4344 	movw	r3, #1092	; 0x444
 8002d5e:	4013      	ands	r3, r2
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d107      	bne.n	8002d74 <HAL_TIM_Base_Stop_IT+0x48>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	681a      	ldr	r2, [r3, #0]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f022 0201 	bic.w	r2, r2, #1
 8002d72:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2201      	movs	r2, #1
 8002d78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8002d7c:	2300      	movs	r3, #0
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	370c      	adds	r7, #12
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bc80      	pop	{r7}
 8002d86:	4770      	bx	lr

08002d88 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b082      	sub	sp, #8
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	691b      	ldr	r3, [r3, #16]
 8002d96:	f003 0302 	and.w	r3, r3, #2
 8002d9a:	2b02      	cmp	r3, #2
 8002d9c:	d122      	bne.n	8002de4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	68db      	ldr	r3, [r3, #12]
 8002da4:	f003 0302 	and.w	r3, r3, #2
 8002da8:	2b02      	cmp	r3, #2
 8002daa:	d11b      	bne.n	8002de4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f06f 0202 	mvn.w	r2, #2
 8002db4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2201      	movs	r2, #1
 8002dba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	699b      	ldr	r3, [r3, #24]
 8002dc2:	f003 0303 	and.w	r3, r3, #3
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d003      	beq.n	8002dd2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002dca:	6878      	ldr	r0, [r7, #4]
 8002dcc:	f000 f9b4 	bl	8003138 <HAL_TIM_IC_CaptureCallback>
 8002dd0:	e005      	b.n	8002dde <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dd2:	6878      	ldr	r0, [r7, #4]
 8002dd4:	f000 f9a7 	bl	8003126 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002dd8:	6878      	ldr	r0, [r7, #4]
 8002dda:	f000 f9b6 	bl	800314a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2200      	movs	r2, #0
 8002de2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	691b      	ldr	r3, [r3, #16]
 8002dea:	f003 0304 	and.w	r3, r3, #4
 8002dee:	2b04      	cmp	r3, #4
 8002df0:	d122      	bne.n	8002e38 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	68db      	ldr	r3, [r3, #12]
 8002df8:	f003 0304 	and.w	r3, r3, #4
 8002dfc:	2b04      	cmp	r3, #4
 8002dfe:	d11b      	bne.n	8002e38 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f06f 0204 	mvn.w	r2, #4
 8002e08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2202      	movs	r2, #2
 8002e0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	699b      	ldr	r3, [r3, #24]
 8002e16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d003      	beq.n	8002e26 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e1e:	6878      	ldr	r0, [r7, #4]
 8002e20:	f000 f98a 	bl	8003138 <HAL_TIM_IC_CaptureCallback>
 8002e24:	e005      	b.n	8002e32 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e26:	6878      	ldr	r0, [r7, #4]
 8002e28:	f000 f97d 	bl	8003126 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e2c:	6878      	ldr	r0, [r7, #4]
 8002e2e:	f000 f98c 	bl	800314a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2200      	movs	r2, #0
 8002e36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	691b      	ldr	r3, [r3, #16]
 8002e3e:	f003 0308 	and.w	r3, r3, #8
 8002e42:	2b08      	cmp	r3, #8
 8002e44:	d122      	bne.n	8002e8c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	68db      	ldr	r3, [r3, #12]
 8002e4c:	f003 0308 	and.w	r3, r3, #8
 8002e50:	2b08      	cmp	r3, #8
 8002e52:	d11b      	bne.n	8002e8c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f06f 0208 	mvn.w	r2, #8
 8002e5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2204      	movs	r2, #4
 8002e62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	69db      	ldr	r3, [r3, #28]
 8002e6a:	f003 0303 	and.w	r3, r3, #3
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d003      	beq.n	8002e7a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e72:	6878      	ldr	r0, [r7, #4]
 8002e74:	f000 f960 	bl	8003138 <HAL_TIM_IC_CaptureCallback>
 8002e78:	e005      	b.n	8002e86 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e7a:	6878      	ldr	r0, [r7, #4]
 8002e7c:	f000 f953 	bl	8003126 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e80:	6878      	ldr	r0, [r7, #4]
 8002e82:	f000 f962 	bl	800314a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2200      	movs	r2, #0
 8002e8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	691b      	ldr	r3, [r3, #16]
 8002e92:	f003 0310 	and.w	r3, r3, #16
 8002e96:	2b10      	cmp	r3, #16
 8002e98:	d122      	bne.n	8002ee0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	68db      	ldr	r3, [r3, #12]
 8002ea0:	f003 0310 	and.w	r3, r3, #16
 8002ea4:	2b10      	cmp	r3, #16
 8002ea6:	d11b      	bne.n	8002ee0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f06f 0210 	mvn.w	r2, #16
 8002eb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2208      	movs	r2, #8
 8002eb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	69db      	ldr	r3, [r3, #28]
 8002ebe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d003      	beq.n	8002ece <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ec6:	6878      	ldr	r0, [r7, #4]
 8002ec8:	f000 f936 	bl	8003138 <HAL_TIM_IC_CaptureCallback>
 8002ecc:	e005      	b.n	8002eda <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ece:	6878      	ldr	r0, [r7, #4]
 8002ed0:	f000 f929 	bl	8003126 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ed4:	6878      	ldr	r0, [r7, #4]
 8002ed6:	f000 f938 	bl	800314a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2200      	movs	r2, #0
 8002ede:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	691b      	ldr	r3, [r3, #16]
 8002ee6:	f003 0301 	and.w	r3, r3, #1
 8002eea:	2b01      	cmp	r3, #1
 8002eec:	d10e      	bne.n	8002f0c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	68db      	ldr	r3, [r3, #12]
 8002ef4:	f003 0301 	and.w	r3, r3, #1
 8002ef8:	2b01      	cmp	r3, #1
 8002efa:	d107      	bne.n	8002f0c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f06f 0201 	mvn.w	r2, #1
 8002f04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002f06:	6878      	ldr	r0, [r7, #4]
 8002f08:	f001 fed6 	bl	8004cb8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	691b      	ldr	r3, [r3, #16]
 8002f12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f16:	2b80      	cmp	r3, #128	; 0x80
 8002f18:	d10e      	bne.n	8002f38 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	68db      	ldr	r3, [r3, #12]
 8002f20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f24:	2b80      	cmp	r3, #128	; 0x80
 8002f26:	d107      	bne.n	8002f38 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002f30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002f32:	6878      	ldr	r0, [r7, #4]
 8002f34:	f000 fa7b 	bl	800342e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	691b      	ldr	r3, [r3, #16]
 8002f3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f42:	2b40      	cmp	r3, #64	; 0x40
 8002f44:	d10e      	bne.n	8002f64 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	68db      	ldr	r3, [r3, #12]
 8002f4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f50:	2b40      	cmp	r3, #64	; 0x40
 8002f52:	d107      	bne.n	8002f64 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002f5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002f5e:	6878      	ldr	r0, [r7, #4]
 8002f60:	f000 f8fc 	bl	800315c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	691b      	ldr	r3, [r3, #16]
 8002f6a:	f003 0320 	and.w	r3, r3, #32
 8002f6e:	2b20      	cmp	r3, #32
 8002f70:	d10e      	bne.n	8002f90 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	68db      	ldr	r3, [r3, #12]
 8002f78:	f003 0320 	and.w	r3, r3, #32
 8002f7c:	2b20      	cmp	r3, #32
 8002f7e:	d107      	bne.n	8002f90 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f06f 0220 	mvn.w	r2, #32
 8002f88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002f8a:	6878      	ldr	r0, [r7, #4]
 8002f8c:	f000 fa46 	bl	800341c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002f90:	bf00      	nop
 8002f92:	3708      	adds	r7, #8
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bd80      	pop	{r7, pc}

08002f98 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b084      	sub	sp, #16
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
 8002fa0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fac:	2b01      	cmp	r3, #1
 8002fae:	d101      	bne.n	8002fb4 <HAL_TIM_ConfigClockSource+0x1c>
 8002fb0:	2302      	movs	r3, #2
 8002fb2:	e0b4      	b.n	800311e <HAL_TIM_ConfigClockSource+0x186>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2202      	movs	r2, #2
 8002fc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	689b      	ldr	r3, [r3, #8]
 8002fca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002fd2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002fda:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	68ba      	ldr	r2, [r7, #8]
 8002fe2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002fec:	d03e      	beq.n	800306c <HAL_TIM_ConfigClockSource+0xd4>
 8002fee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ff2:	f200 8087 	bhi.w	8003104 <HAL_TIM_ConfigClockSource+0x16c>
 8002ff6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ffa:	f000 8086 	beq.w	800310a <HAL_TIM_ConfigClockSource+0x172>
 8002ffe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003002:	d87f      	bhi.n	8003104 <HAL_TIM_ConfigClockSource+0x16c>
 8003004:	2b70      	cmp	r3, #112	; 0x70
 8003006:	d01a      	beq.n	800303e <HAL_TIM_ConfigClockSource+0xa6>
 8003008:	2b70      	cmp	r3, #112	; 0x70
 800300a:	d87b      	bhi.n	8003104 <HAL_TIM_ConfigClockSource+0x16c>
 800300c:	2b60      	cmp	r3, #96	; 0x60
 800300e:	d050      	beq.n	80030b2 <HAL_TIM_ConfigClockSource+0x11a>
 8003010:	2b60      	cmp	r3, #96	; 0x60
 8003012:	d877      	bhi.n	8003104 <HAL_TIM_ConfigClockSource+0x16c>
 8003014:	2b50      	cmp	r3, #80	; 0x50
 8003016:	d03c      	beq.n	8003092 <HAL_TIM_ConfigClockSource+0xfa>
 8003018:	2b50      	cmp	r3, #80	; 0x50
 800301a:	d873      	bhi.n	8003104 <HAL_TIM_ConfigClockSource+0x16c>
 800301c:	2b40      	cmp	r3, #64	; 0x40
 800301e:	d058      	beq.n	80030d2 <HAL_TIM_ConfigClockSource+0x13a>
 8003020:	2b40      	cmp	r3, #64	; 0x40
 8003022:	d86f      	bhi.n	8003104 <HAL_TIM_ConfigClockSource+0x16c>
 8003024:	2b30      	cmp	r3, #48	; 0x30
 8003026:	d064      	beq.n	80030f2 <HAL_TIM_ConfigClockSource+0x15a>
 8003028:	2b30      	cmp	r3, #48	; 0x30
 800302a:	d86b      	bhi.n	8003104 <HAL_TIM_ConfigClockSource+0x16c>
 800302c:	2b20      	cmp	r3, #32
 800302e:	d060      	beq.n	80030f2 <HAL_TIM_ConfigClockSource+0x15a>
 8003030:	2b20      	cmp	r3, #32
 8003032:	d867      	bhi.n	8003104 <HAL_TIM_ConfigClockSource+0x16c>
 8003034:	2b00      	cmp	r3, #0
 8003036:	d05c      	beq.n	80030f2 <HAL_TIM_ConfigClockSource+0x15a>
 8003038:	2b10      	cmp	r3, #16
 800303a:	d05a      	beq.n	80030f2 <HAL_TIM_ConfigClockSource+0x15a>
 800303c:	e062      	b.n	8003104 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6818      	ldr	r0, [r3, #0]
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	6899      	ldr	r1, [r3, #8]
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	685a      	ldr	r2, [r3, #4]
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	68db      	ldr	r3, [r3, #12]
 800304e:	f000 f968 	bl	8003322 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	689b      	ldr	r3, [r3, #8]
 8003058:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800305a:	68bb      	ldr	r3, [r7, #8]
 800305c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003060:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	68ba      	ldr	r2, [r7, #8]
 8003068:	609a      	str	r2, [r3, #8]
      break;
 800306a:	e04f      	b.n	800310c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6818      	ldr	r0, [r3, #0]
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	6899      	ldr	r1, [r3, #8]
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	685a      	ldr	r2, [r3, #4]
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	68db      	ldr	r3, [r3, #12]
 800307c:	f000 f951 	bl	8003322 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	689a      	ldr	r2, [r3, #8]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800308e:	609a      	str	r2, [r3, #8]
      break;
 8003090:	e03c      	b.n	800310c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6818      	ldr	r0, [r3, #0]
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	6859      	ldr	r1, [r3, #4]
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	68db      	ldr	r3, [r3, #12]
 800309e:	461a      	mov	r2, r3
 80030a0:	f000 f8c8 	bl	8003234 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	2150      	movs	r1, #80	; 0x50
 80030aa:	4618      	mov	r0, r3
 80030ac:	f000 f91f 	bl	80032ee <TIM_ITRx_SetConfig>
      break;
 80030b0:	e02c      	b.n	800310c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6818      	ldr	r0, [r3, #0]
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	6859      	ldr	r1, [r3, #4]
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	68db      	ldr	r3, [r3, #12]
 80030be:	461a      	mov	r2, r3
 80030c0:	f000 f8e6 	bl	8003290 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	2160      	movs	r1, #96	; 0x60
 80030ca:	4618      	mov	r0, r3
 80030cc:	f000 f90f 	bl	80032ee <TIM_ITRx_SetConfig>
      break;
 80030d0:	e01c      	b.n	800310c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6818      	ldr	r0, [r3, #0]
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	6859      	ldr	r1, [r3, #4]
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	68db      	ldr	r3, [r3, #12]
 80030de:	461a      	mov	r2, r3
 80030e0:	f000 f8a8 	bl	8003234 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	2140      	movs	r1, #64	; 0x40
 80030ea:	4618      	mov	r0, r3
 80030ec:	f000 f8ff 	bl	80032ee <TIM_ITRx_SetConfig>
      break;
 80030f0:	e00c      	b.n	800310c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681a      	ldr	r2, [r3, #0]
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4619      	mov	r1, r3
 80030fc:	4610      	mov	r0, r2
 80030fe:	f000 f8f6 	bl	80032ee <TIM_ITRx_SetConfig>
      break;
 8003102:	e003      	b.n	800310c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003104:	2301      	movs	r3, #1
 8003106:	73fb      	strb	r3, [r7, #15]
      break;
 8003108:	e000      	b.n	800310c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800310a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2201      	movs	r2, #1
 8003110:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2200      	movs	r2, #0
 8003118:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800311c:	7bfb      	ldrb	r3, [r7, #15]
}
 800311e:	4618      	mov	r0, r3
 8003120:	3710      	adds	r7, #16
 8003122:	46bd      	mov	sp, r7
 8003124:	bd80      	pop	{r7, pc}

08003126 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003126:	b480      	push	{r7}
 8003128:	b083      	sub	sp, #12
 800312a:	af00      	add	r7, sp, #0
 800312c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800312e:	bf00      	nop
 8003130:	370c      	adds	r7, #12
 8003132:	46bd      	mov	sp, r7
 8003134:	bc80      	pop	{r7}
 8003136:	4770      	bx	lr

08003138 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003138:	b480      	push	{r7}
 800313a:	b083      	sub	sp, #12
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003140:	bf00      	nop
 8003142:	370c      	adds	r7, #12
 8003144:	46bd      	mov	sp, r7
 8003146:	bc80      	pop	{r7}
 8003148:	4770      	bx	lr

0800314a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800314a:	b480      	push	{r7}
 800314c:	b083      	sub	sp, #12
 800314e:	af00      	add	r7, sp, #0
 8003150:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003152:	bf00      	nop
 8003154:	370c      	adds	r7, #12
 8003156:	46bd      	mov	sp, r7
 8003158:	bc80      	pop	{r7}
 800315a:	4770      	bx	lr

0800315c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800315c:	b480      	push	{r7}
 800315e:	b083      	sub	sp, #12
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003164:	bf00      	nop
 8003166:	370c      	adds	r7, #12
 8003168:	46bd      	mov	sp, r7
 800316a:	bc80      	pop	{r7}
 800316c:	4770      	bx	lr
	...

08003170 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003170:	b480      	push	{r7}
 8003172:	b085      	sub	sp, #20
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
 8003178:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	4a29      	ldr	r2, [pc, #164]	; (8003228 <TIM_Base_SetConfig+0xb8>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d00b      	beq.n	80031a0 <TIM_Base_SetConfig+0x30>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800318e:	d007      	beq.n	80031a0 <TIM_Base_SetConfig+0x30>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	4a26      	ldr	r2, [pc, #152]	; (800322c <TIM_Base_SetConfig+0xbc>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d003      	beq.n	80031a0 <TIM_Base_SetConfig+0x30>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	4a25      	ldr	r2, [pc, #148]	; (8003230 <TIM_Base_SetConfig+0xc0>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d108      	bne.n	80031b2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	68fa      	ldr	r2, [r7, #12]
 80031ae:	4313      	orrs	r3, r2
 80031b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	4a1c      	ldr	r2, [pc, #112]	; (8003228 <TIM_Base_SetConfig+0xb8>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d00b      	beq.n	80031d2 <TIM_Base_SetConfig+0x62>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031c0:	d007      	beq.n	80031d2 <TIM_Base_SetConfig+0x62>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	4a19      	ldr	r2, [pc, #100]	; (800322c <TIM_Base_SetConfig+0xbc>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d003      	beq.n	80031d2 <TIM_Base_SetConfig+0x62>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	4a18      	ldr	r2, [pc, #96]	; (8003230 <TIM_Base_SetConfig+0xc0>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d108      	bne.n	80031e4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	68db      	ldr	r3, [r3, #12]
 80031de:	68fa      	ldr	r2, [r7, #12]
 80031e0:	4313      	orrs	r3, r2
 80031e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	695b      	ldr	r3, [r3, #20]
 80031ee:	4313      	orrs	r3, r2
 80031f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	68fa      	ldr	r2, [r7, #12]
 80031f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	689a      	ldr	r2, [r3, #8]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	681a      	ldr	r2, [r3, #0]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	4a07      	ldr	r2, [pc, #28]	; (8003228 <TIM_Base_SetConfig+0xb8>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d103      	bne.n	8003218 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	691a      	ldr	r2, [r3, #16]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2201      	movs	r2, #1
 800321c:	615a      	str	r2, [r3, #20]
}
 800321e:	bf00      	nop
 8003220:	3714      	adds	r7, #20
 8003222:	46bd      	mov	sp, r7
 8003224:	bc80      	pop	{r7}
 8003226:	4770      	bx	lr
 8003228:	40012c00 	.word	0x40012c00
 800322c:	40000400 	.word	0x40000400
 8003230:	40000800 	.word	0x40000800

08003234 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003234:	b480      	push	{r7}
 8003236:	b087      	sub	sp, #28
 8003238:	af00      	add	r7, sp, #0
 800323a:	60f8      	str	r0, [r7, #12]
 800323c:	60b9      	str	r1, [r7, #8]
 800323e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	6a1b      	ldr	r3, [r3, #32]
 8003244:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	6a1b      	ldr	r3, [r3, #32]
 800324a:	f023 0201 	bic.w	r2, r3, #1
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	699b      	ldr	r3, [r3, #24]
 8003256:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800325e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	011b      	lsls	r3, r3, #4
 8003264:	693a      	ldr	r2, [r7, #16]
 8003266:	4313      	orrs	r3, r2
 8003268:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	f023 030a 	bic.w	r3, r3, #10
 8003270:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003272:	697a      	ldr	r2, [r7, #20]
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	4313      	orrs	r3, r2
 8003278:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	693a      	ldr	r2, [r7, #16]
 800327e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	697a      	ldr	r2, [r7, #20]
 8003284:	621a      	str	r2, [r3, #32]
}
 8003286:	bf00      	nop
 8003288:	371c      	adds	r7, #28
 800328a:	46bd      	mov	sp, r7
 800328c:	bc80      	pop	{r7}
 800328e:	4770      	bx	lr

08003290 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003290:	b480      	push	{r7}
 8003292:	b087      	sub	sp, #28
 8003294:	af00      	add	r7, sp, #0
 8003296:	60f8      	str	r0, [r7, #12]
 8003298:	60b9      	str	r1, [r7, #8]
 800329a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	6a1b      	ldr	r3, [r3, #32]
 80032a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	6a1b      	ldr	r3, [r3, #32]
 80032a6:	f023 0210 	bic.w	r2, r3, #16
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	699b      	ldr	r3, [r3, #24]
 80032b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80032b4:	693b      	ldr	r3, [r7, #16]
 80032b6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80032ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	031b      	lsls	r3, r3, #12
 80032c0:	693a      	ldr	r2, [r7, #16]
 80032c2:	4313      	orrs	r3, r2
 80032c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80032c6:	697b      	ldr	r3, [r7, #20]
 80032c8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80032cc:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80032ce:	68bb      	ldr	r3, [r7, #8]
 80032d0:	011b      	lsls	r3, r3, #4
 80032d2:	697a      	ldr	r2, [r7, #20]
 80032d4:	4313      	orrs	r3, r2
 80032d6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	693a      	ldr	r2, [r7, #16]
 80032dc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	697a      	ldr	r2, [r7, #20]
 80032e2:	621a      	str	r2, [r3, #32]
}
 80032e4:	bf00      	nop
 80032e6:	371c      	adds	r7, #28
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bc80      	pop	{r7}
 80032ec:	4770      	bx	lr

080032ee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80032ee:	b480      	push	{r7}
 80032f0:	b085      	sub	sp, #20
 80032f2:	af00      	add	r7, sp, #0
 80032f4:	6078      	str	r0, [r7, #4]
 80032f6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	689b      	ldr	r3, [r3, #8]
 80032fc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003304:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003306:	683a      	ldr	r2, [r7, #0]
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	4313      	orrs	r3, r2
 800330c:	f043 0307 	orr.w	r3, r3, #7
 8003310:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	68fa      	ldr	r2, [r7, #12]
 8003316:	609a      	str	r2, [r3, #8]
}
 8003318:	bf00      	nop
 800331a:	3714      	adds	r7, #20
 800331c:	46bd      	mov	sp, r7
 800331e:	bc80      	pop	{r7}
 8003320:	4770      	bx	lr

08003322 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003322:	b480      	push	{r7}
 8003324:	b087      	sub	sp, #28
 8003326:	af00      	add	r7, sp, #0
 8003328:	60f8      	str	r0, [r7, #12]
 800332a:	60b9      	str	r1, [r7, #8]
 800332c:	607a      	str	r2, [r7, #4]
 800332e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003336:	697b      	ldr	r3, [r7, #20]
 8003338:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800333c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	021a      	lsls	r2, r3, #8
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	431a      	orrs	r2, r3
 8003346:	68bb      	ldr	r3, [r7, #8]
 8003348:	4313      	orrs	r3, r2
 800334a:	697a      	ldr	r2, [r7, #20]
 800334c:	4313      	orrs	r3, r2
 800334e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	697a      	ldr	r2, [r7, #20]
 8003354:	609a      	str	r2, [r3, #8]
}
 8003356:	bf00      	nop
 8003358:	371c      	adds	r7, #28
 800335a:	46bd      	mov	sp, r7
 800335c:	bc80      	pop	{r7}
 800335e:	4770      	bx	lr

08003360 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003360:	b480      	push	{r7}
 8003362:	b085      	sub	sp, #20
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
 8003368:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003370:	2b01      	cmp	r3, #1
 8003372:	d101      	bne.n	8003378 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003374:	2302      	movs	r3, #2
 8003376:	e046      	b.n	8003406 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2201      	movs	r2, #1
 800337c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2202      	movs	r2, #2
 8003384:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	689b      	ldr	r3, [r3, #8]
 8003396:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800339e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	68fa      	ldr	r2, [r7, #12]
 80033a6:	4313      	orrs	r3, r2
 80033a8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	68fa      	ldr	r2, [r7, #12]
 80033b0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a16      	ldr	r2, [pc, #88]	; (8003410 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d00e      	beq.n	80033da <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033c4:	d009      	beq.n	80033da <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a12      	ldr	r2, [pc, #72]	; (8003414 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d004      	beq.n	80033da <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a10      	ldr	r2, [pc, #64]	; (8003418 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d10c      	bne.n	80033f4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80033da:	68bb      	ldr	r3, [r7, #8]
 80033dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80033e0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	68ba      	ldr	r2, [r7, #8]
 80033e8:	4313      	orrs	r3, r2
 80033ea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	68ba      	ldr	r2, [r7, #8]
 80033f2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2201      	movs	r2, #1
 80033f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2200      	movs	r2, #0
 8003400:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003404:	2300      	movs	r3, #0
}
 8003406:	4618      	mov	r0, r3
 8003408:	3714      	adds	r7, #20
 800340a:	46bd      	mov	sp, r7
 800340c:	bc80      	pop	{r7}
 800340e:	4770      	bx	lr
 8003410:	40012c00 	.word	0x40012c00
 8003414:	40000400 	.word	0x40000400
 8003418:	40000800 	.word	0x40000800

0800341c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800341c:	b480      	push	{r7}
 800341e:	b083      	sub	sp, #12
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003424:	bf00      	nop
 8003426:	370c      	adds	r7, #12
 8003428:	46bd      	mov	sp, r7
 800342a:	bc80      	pop	{r7}
 800342c:	4770      	bx	lr

0800342e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800342e:	b480      	push	{r7}
 8003430:	b083      	sub	sp, #12
 8003432:	af00      	add	r7, sp, #0
 8003434:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003436:	bf00      	nop
 8003438:	370c      	adds	r7, #12
 800343a:	46bd      	mov	sp, r7
 800343c:	bc80      	pop	{r7}
 800343e:	4770      	bx	lr

08003440 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b082      	sub	sp, #8
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d101      	bne.n	8003452 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800344e:	2301      	movs	r3, #1
 8003450:	e042      	b.n	80034d8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003458:	b2db      	uxtb	r3, r3
 800345a:	2b00      	cmp	r3, #0
 800345c:	d106      	bne.n	800346c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2200      	movs	r2, #0
 8003462:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003466:	6878      	ldr	r0, [r7, #4]
 8003468:	f7fe f9f4 	bl	8001854 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2224      	movs	r2, #36	; 0x24
 8003470:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	68da      	ldr	r2, [r3, #12]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003482:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003484:	6878      	ldr	r0, [r7, #4]
 8003486:	f000 fe69 	bl	800415c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	691a      	ldr	r2, [r3, #16]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003498:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	695a      	ldr	r2, [r3, #20]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80034a8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	68da      	ldr	r2, [r3, #12]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80034b8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2200      	movs	r2, #0
 80034be:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2220      	movs	r2, #32
 80034c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2220      	movs	r2, #32
 80034cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2200      	movs	r2, #0
 80034d4:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80034d6:	2300      	movs	r3, #0
}
 80034d8:	4618      	mov	r0, r3
 80034da:	3708      	adds	r7, #8
 80034dc:	46bd      	mov	sp, r7
 80034de:	bd80      	pop	{r7, pc}

080034e0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b08a      	sub	sp, #40	; 0x28
 80034e4:	af02      	add	r7, sp, #8
 80034e6:	60f8      	str	r0, [r7, #12]
 80034e8:	60b9      	str	r1, [r7, #8]
 80034ea:	603b      	str	r3, [r7, #0]
 80034ec:	4613      	mov	r3, r2
 80034ee:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80034f0:	2300      	movs	r3, #0
 80034f2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034fa:	b2db      	uxtb	r3, r3
 80034fc:	2b20      	cmp	r3, #32
 80034fe:	d16d      	bne.n	80035dc <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d002      	beq.n	800350c <HAL_UART_Transmit+0x2c>
 8003506:	88fb      	ldrh	r3, [r7, #6]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d101      	bne.n	8003510 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800350c:	2301      	movs	r3, #1
 800350e:	e066      	b.n	80035de <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	2200      	movs	r2, #0
 8003514:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	2221      	movs	r2, #33	; 0x21
 800351a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800351e:	f7fe fb9d 	bl	8001c5c <HAL_GetTick>
 8003522:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	88fa      	ldrh	r2, [r7, #6]
 8003528:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	88fa      	ldrh	r2, [r7, #6]
 800352e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003538:	d108      	bne.n	800354c <HAL_UART_Transmit+0x6c>
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	691b      	ldr	r3, [r3, #16]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d104      	bne.n	800354c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003542:	2300      	movs	r3, #0
 8003544:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003546:	68bb      	ldr	r3, [r7, #8]
 8003548:	61bb      	str	r3, [r7, #24]
 800354a:	e003      	b.n	8003554 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003550:	2300      	movs	r3, #0
 8003552:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003554:	e02a      	b.n	80035ac <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	9300      	str	r3, [sp, #0]
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	2200      	movs	r2, #0
 800355e:	2180      	movs	r1, #128	; 0x80
 8003560:	68f8      	ldr	r0, [r7, #12]
 8003562:	f000 fbb8 	bl	8003cd6 <UART_WaitOnFlagUntilTimeout>
 8003566:	4603      	mov	r3, r0
 8003568:	2b00      	cmp	r3, #0
 800356a:	d001      	beq.n	8003570 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 800356c:	2303      	movs	r3, #3
 800356e:	e036      	b.n	80035de <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003570:	69fb      	ldr	r3, [r7, #28]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d10b      	bne.n	800358e <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003576:	69bb      	ldr	r3, [r7, #24]
 8003578:	881b      	ldrh	r3, [r3, #0]
 800357a:	461a      	mov	r2, r3
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003584:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003586:	69bb      	ldr	r3, [r7, #24]
 8003588:	3302      	adds	r3, #2
 800358a:	61bb      	str	r3, [r7, #24]
 800358c:	e007      	b.n	800359e <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800358e:	69fb      	ldr	r3, [r7, #28]
 8003590:	781a      	ldrb	r2, [r3, #0]
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003598:	69fb      	ldr	r3, [r7, #28]
 800359a:	3301      	adds	r3, #1
 800359c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80035a2:	b29b      	uxth	r3, r3
 80035a4:	3b01      	subs	r3, #1
 80035a6:	b29a      	uxth	r2, r3
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80035b0:	b29b      	uxth	r3, r3
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d1cf      	bne.n	8003556 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	9300      	str	r3, [sp, #0]
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	2200      	movs	r2, #0
 80035be:	2140      	movs	r1, #64	; 0x40
 80035c0:	68f8      	ldr	r0, [r7, #12]
 80035c2:	f000 fb88 	bl	8003cd6 <UART_WaitOnFlagUntilTimeout>
 80035c6:	4603      	mov	r3, r0
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d001      	beq.n	80035d0 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80035cc:	2303      	movs	r3, #3
 80035ce:	e006      	b.n	80035de <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	2220      	movs	r2, #32
 80035d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80035d8:	2300      	movs	r3, #0
 80035da:	e000      	b.n	80035de <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80035dc:	2302      	movs	r3, #2
  }
}
 80035de:	4618      	mov	r0, r3
 80035e0:	3720      	adds	r7, #32
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bd80      	pop	{r7, pc}

080035e6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80035e6:	b580      	push	{r7, lr}
 80035e8:	b084      	sub	sp, #16
 80035ea:	af00      	add	r7, sp, #0
 80035ec:	60f8      	str	r0, [r7, #12]
 80035ee:	60b9      	str	r1, [r7, #8]
 80035f0:	4613      	mov	r3, r2
 80035f2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80035fa:	b2db      	uxtb	r3, r3
 80035fc:	2b20      	cmp	r3, #32
 80035fe:	d112      	bne.n	8003626 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003600:	68bb      	ldr	r3, [r7, #8]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d002      	beq.n	800360c <HAL_UART_Receive_IT+0x26>
 8003606:	88fb      	ldrh	r3, [r7, #6]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d101      	bne.n	8003610 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800360c:	2301      	movs	r3, #1
 800360e:	e00b      	b.n	8003628 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	2200      	movs	r2, #0
 8003614:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003616:	88fb      	ldrh	r3, [r7, #6]
 8003618:	461a      	mov	r2, r3
 800361a:	68b9      	ldr	r1, [r7, #8]
 800361c:	68f8      	ldr	r0, [r7, #12]
 800361e:	f000 fbc8 	bl	8003db2 <UART_Start_Receive_IT>
 8003622:	4603      	mov	r3, r0
 8003624:	e000      	b.n	8003628 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003626:	2302      	movs	r3, #2
  }
}
 8003628:	4618      	mov	r0, r3
 800362a:	3710      	adds	r7, #16
 800362c:	46bd      	mov	sp, r7
 800362e:	bd80      	pop	{r7, pc}

08003630 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b09a      	sub	sp, #104	; 0x68
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	330c      	adds	r3, #12
 800363e:	64bb      	str	r3, [r7, #72]	; 0x48
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003640:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003642:	e853 3f00 	ldrex	r3, [r3]
 8003646:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8003648:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800364a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800364e:	667b      	str	r3, [r7, #100]	; 0x64
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	330c      	adds	r3, #12
 8003656:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003658:	657a      	str	r2, [r7, #84]	; 0x54
 800365a:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800365c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800365e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003660:	e841 2300 	strex	r3, r2, [r1]
 8003664:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003666:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003668:	2b00      	cmp	r3, #0
 800366a:	d1e5      	bne.n	8003638 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	3314      	adds	r3, #20
 8003672:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003674:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003676:	e853 3f00 	ldrex	r3, [r3]
 800367a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800367c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800367e:	f023 0301 	bic.w	r3, r3, #1
 8003682:	663b      	str	r3, [r7, #96]	; 0x60
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	3314      	adds	r3, #20
 800368a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800368c:	643a      	str	r2, [r7, #64]	; 0x40
 800368e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003690:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003692:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003694:	e841 2300 	strex	r3, r2, [r1]
 8003698:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800369a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800369c:	2b00      	cmp	r3, #0
 800369e:	d1e5      	bne.n	800366c <HAL_UART_AbortReceive+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036a4:	2b01      	cmp	r3, #1
 80036a6:	d119      	bne.n	80036dc <HAL_UART_AbortReceive+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	330c      	adds	r3, #12
 80036ae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036b0:	6a3b      	ldr	r3, [r7, #32]
 80036b2:	e853 3f00 	ldrex	r3, [r3]
 80036b6:	61fb      	str	r3, [r7, #28]
   return(result);
 80036b8:	69fb      	ldr	r3, [r7, #28]
 80036ba:	f023 0310 	bic.w	r3, r3, #16
 80036be:	65fb      	str	r3, [r7, #92]	; 0x5c
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	330c      	adds	r3, #12
 80036c6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80036c8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80036ca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80036ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80036d0:	e841 2300 	strex	r3, r2, [r1]
 80036d4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80036d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d1e5      	bne.n	80036a8 <HAL_UART_AbortReceive+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	695b      	ldr	r3, [r3, #20]
 80036e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d036      	beq.n	8003758 <HAL_UART_AbortReceive+0x128>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	3314      	adds	r3, #20
 80036f0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	e853 3f00 	ldrex	r3, [r3]
 80036f8:	60bb      	str	r3, [r7, #8]
   return(result);
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003700:	65bb      	str	r3, [r7, #88]	; 0x58
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	3314      	adds	r3, #20
 8003708:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800370a:	61ba      	str	r2, [r7, #24]
 800370c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800370e:	6979      	ldr	r1, [r7, #20]
 8003710:	69ba      	ldr	r2, [r7, #24]
 8003712:	e841 2300 	strex	r3, r2, [r1]
 8003716:	613b      	str	r3, [r7, #16]
   return(result);
 8003718:	693b      	ldr	r3, [r7, #16]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d1e5      	bne.n	80036ea <HAL_UART_AbortReceive+0xba>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003722:	2b00      	cmp	r3, #0
 8003724:	d018      	beq.n	8003758 <HAL_UART_AbortReceive+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800372a:	2200      	movs	r2, #0
 800372c:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003732:	4618      	mov	r0, r3
 8003734:	f7fe fbd5 	bl	8001ee2 <HAL_DMA_Abort>
 8003738:	4603      	mov	r3, r0
 800373a:	2b00      	cmp	r3, #0
 800373c:	d00c      	beq.n	8003758 <HAL_UART_AbortReceive+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003742:	4618      	mov	r0, r3
 8003744:	f7fe fc80 	bl	8002048 <HAL_DMA_GetError>
 8003748:	4603      	mov	r3, r0
 800374a:	2b20      	cmp	r3, #32
 800374c:	d104      	bne.n	8003758 <HAL_UART_AbortReceive+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2210      	movs	r2, #16
 8003752:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_TIMEOUT;
 8003754:	2303      	movs	r3, #3
 8003756:	e00a      	b.n	800376e <HAL_UART_AbortReceive+0x13e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0x00U;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2200      	movs	r2, #0
 800375c:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2220      	movs	r2, #32
 8003762:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2200      	movs	r2, #0
 800376a:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 800376c:	2300      	movs	r3, #0
}
 800376e:	4618      	mov	r0, r3
 8003770:	3768      	adds	r7, #104	; 0x68
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}
	...

08003778 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b0ba      	sub	sp, #232	; 0xe8
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	68db      	ldr	r3, [r3, #12]
 8003790:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	695b      	ldr	r3, [r3, #20]
 800379a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800379e:	2300      	movs	r3, #0
 80037a0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80037a4:	2300      	movs	r3, #0
 80037a6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80037aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037ae:	f003 030f 	and.w	r3, r3, #15
 80037b2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80037b6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d10f      	bne.n	80037de <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80037be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037c2:	f003 0320 	and.w	r3, r3, #32
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d009      	beq.n	80037de <HAL_UART_IRQHandler+0x66>
 80037ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80037ce:	f003 0320 	and.w	r3, r3, #32
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d003      	beq.n	80037de <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80037d6:	6878      	ldr	r0, [r7, #4]
 80037d8:	f000 fc01 	bl	8003fde <UART_Receive_IT>
      return;
 80037dc:	e25b      	b.n	8003c96 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80037de:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	f000 80de 	beq.w	80039a4 <HAL_UART_IRQHandler+0x22c>
 80037e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80037ec:	f003 0301 	and.w	r3, r3, #1
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d106      	bne.n	8003802 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80037f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80037f8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	f000 80d1 	beq.w	80039a4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003802:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003806:	f003 0301 	and.w	r3, r3, #1
 800380a:	2b00      	cmp	r3, #0
 800380c:	d00b      	beq.n	8003826 <HAL_UART_IRQHandler+0xae>
 800380e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003812:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003816:	2b00      	cmp	r3, #0
 8003818:	d005      	beq.n	8003826 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800381e:	f043 0201 	orr.w	r2, r3, #1
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003826:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800382a:	f003 0304 	and.w	r3, r3, #4
 800382e:	2b00      	cmp	r3, #0
 8003830:	d00b      	beq.n	800384a <HAL_UART_IRQHandler+0xd2>
 8003832:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003836:	f003 0301 	and.w	r3, r3, #1
 800383a:	2b00      	cmp	r3, #0
 800383c:	d005      	beq.n	800384a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003842:	f043 0202 	orr.w	r2, r3, #2
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800384a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800384e:	f003 0302 	and.w	r3, r3, #2
 8003852:	2b00      	cmp	r3, #0
 8003854:	d00b      	beq.n	800386e <HAL_UART_IRQHandler+0xf6>
 8003856:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800385a:	f003 0301 	and.w	r3, r3, #1
 800385e:	2b00      	cmp	r3, #0
 8003860:	d005      	beq.n	800386e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003866:	f043 0204 	orr.w	r2, r3, #4
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800386e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003872:	f003 0308 	and.w	r3, r3, #8
 8003876:	2b00      	cmp	r3, #0
 8003878:	d011      	beq.n	800389e <HAL_UART_IRQHandler+0x126>
 800387a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800387e:	f003 0320 	and.w	r3, r3, #32
 8003882:	2b00      	cmp	r3, #0
 8003884:	d105      	bne.n	8003892 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003886:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800388a:	f003 0301 	and.w	r3, r3, #1
 800388e:	2b00      	cmp	r3, #0
 8003890:	d005      	beq.n	800389e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003896:	f043 0208 	orr.w	r2, r3, #8
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	f000 81f2 	beq.w	8003c8c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80038a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038ac:	f003 0320 	and.w	r3, r3, #32
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d008      	beq.n	80038c6 <HAL_UART_IRQHandler+0x14e>
 80038b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80038b8:	f003 0320 	and.w	r3, r3, #32
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d002      	beq.n	80038c6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80038c0:	6878      	ldr	r0, [r7, #4]
 80038c2:	f000 fb8c 	bl	8003fde <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	695b      	ldr	r3, [r3, #20]
 80038cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	bf14      	ite	ne
 80038d4:	2301      	movne	r3, #1
 80038d6:	2300      	moveq	r3, #0
 80038d8:	b2db      	uxtb	r3, r3
 80038da:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038e2:	f003 0308 	and.w	r3, r3, #8
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d103      	bne.n	80038f2 <HAL_UART_IRQHandler+0x17a>
 80038ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d04f      	beq.n	8003992 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80038f2:	6878      	ldr	r0, [r7, #4]
 80038f4:	f000 fa96 	bl	8003e24 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	695b      	ldr	r3, [r3, #20]
 80038fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003902:	2b00      	cmp	r3, #0
 8003904:	d041      	beq.n	800398a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	3314      	adds	r3, #20
 800390c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003910:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003914:	e853 3f00 	ldrex	r3, [r3]
 8003918:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800391c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003920:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003924:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	3314      	adds	r3, #20
 800392e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003932:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003936:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800393a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800393e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003942:	e841 2300 	strex	r3, r2, [r1]
 8003946:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800394a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800394e:	2b00      	cmp	r3, #0
 8003950:	d1d9      	bne.n	8003906 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003956:	2b00      	cmp	r3, #0
 8003958:	d013      	beq.n	8003982 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800395e:	4a7e      	ldr	r2, [pc, #504]	; (8003b58 <HAL_UART_IRQHandler+0x3e0>)
 8003960:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003966:	4618      	mov	r0, r3
 8003968:	f7fe faf6 	bl	8001f58 <HAL_DMA_Abort_IT>
 800396c:	4603      	mov	r3, r0
 800396e:	2b00      	cmp	r3, #0
 8003970:	d016      	beq.n	80039a0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003976:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003978:	687a      	ldr	r2, [r7, #4]
 800397a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800397c:	4610      	mov	r0, r2
 800397e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003980:	e00e      	b.n	80039a0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003982:	6878      	ldr	r0, [r7, #4]
 8003984:	f000 f993 	bl	8003cae <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003988:	e00a      	b.n	80039a0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800398a:	6878      	ldr	r0, [r7, #4]
 800398c:	f000 f98f 	bl	8003cae <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003990:	e006      	b.n	80039a0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003992:	6878      	ldr	r0, [r7, #4]
 8003994:	f000 f98b 	bl	8003cae <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2200      	movs	r2, #0
 800399c:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800399e:	e175      	b.n	8003c8c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039a0:	bf00      	nop
    return;
 80039a2:	e173      	b.n	8003c8c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039a8:	2b01      	cmp	r3, #1
 80039aa:	f040 814f 	bne.w	8003c4c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80039ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039b2:	f003 0310 	and.w	r3, r3, #16
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	f000 8148 	beq.w	8003c4c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80039bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80039c0:	f003 0310 	and.w	r3, r3, #16
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	f000 8141 	beq.w	8003c4c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80039ca:	2300      	movs	r3, #0
 80039cc:	60bb      	str	r3, [r7, #8]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	60bb      	str	r3, [r7, #8]
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	60bb      	str	r3, [r7, #8]
 80039de:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	695b      	ldr	r3, [r3, #20]
 80039e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	f000 80b6 	beq.w	8003b5c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80039fc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	f000 8145 	beq.w	8003c90 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003a0a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003a0e:	429a      	cmp	r2, r3
 8003a10:	f080 813e 	bcs.w	8003c90 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003a1a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a20:	699b      	ldr	r3, [r3, #24]
 8003a22:	2b20      	cmp	r3, #32
 8003a24:	f000 8088 	beq.w	8003b38 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	330c      	adds	r3, #12
 8003a2e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a32:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003a36:	e853 3f00 	ldrex	r3, [r3]
 8003a3a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003a3e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003a42:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a46:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	330c      	adds	r3, #12
 8003a50:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003a54:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003a58:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a5c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003a60:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003a64:	e841 2300 	strex	r3, r2, [r1]
 8003a68:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003a6c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d1d9      	bne.n	8003a28 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	3314      	adds	r3, #20
 8003a7a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a7c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a7e:	e853 3f00 	ldrex	r3, [r3]
 8003a82:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003a84:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003a86:	f023 0301 	bic.w	r3, r3, #1
 8003a8a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	3314      	adds	r3, #20
 8003a94:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003a98:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003a9c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a9e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003aa0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003aa4:	e841 2300 	strex	r3, r2, [r1]
 8003aa8:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003aaa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d1e1      	bne.n	8003a74 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	3314      	adds	r3, #20
 8003ab6:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ab8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003aba:	e853 3f00 	ldrex	r3, [r3]
 8003abe:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003ac0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ac2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ac6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	3314      	adds	r3, #20
 8003ad0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003ad4:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003ad6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ad8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003ada:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003adc:	e841 2300 	strex	r3, r2, [r1]
 8003ae0:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003ae2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d1e3      	bne.n	8003ab0 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2220      	movs	r2, #32
 8003aec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2200      	movs	r2, #0
 8003af4:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	330c      	adds	r3, #12
 8003afc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003afe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b00:	e853 3f00 	ldrex	r3, [r3]
 8003b04:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003b06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b08:	f023 0310 	bic.w	r3, r3, #16
 8003b0c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	330c      	adds	r3, #12
 8003b16:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003b1a:	65ba      	str	r2, [r7, #88]	; 0x58
 8003b1c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b1e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003b20:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003b22:	e841 2300 	strex	r3, r2, [r1]
 8003b26:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003b28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d1e3      	bne.n	8003af6 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b32:	4618      	mov	r0, r3
 8003b34:	f7fe f9d5 	bl	8001ee2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2202      	movs	r2, #2
 8003b3c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003b46:	b29b      	uxth	r3, r3
 8003b48:	1ad3      	subs	r3, r2, r3
 8003b4a:	b29b      	uxth	r3, r3
 8003b4c:	4619      	mov	r1, r3
 8003b4e:	6878      	ldr	r0, [r7, #4]
 8003b50:	f000 f8b6 	bl	8003cc0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003b54:	e09c      	b.n	8003c90 <HAL_UART_IRQHandler+0x518>
 8003b56:	bf00      	nop
 8003b58:	08003ee9 	.word	0x08003ee9
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003b64:	b29b      	uxth	r3, r3
 8003b66:	1ad3      	subs	r3, r2, r3
 8003b68:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003b70:	b29b      	uxth	r3, r3
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	f000 808e 	beq.w	8003c94 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003b78:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	f000 8089 	beq.w	8003c94 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	330c      	adds	r3, #12
 8003b88:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b8c:	e853 3f00 	ldrex	r3, [r3]
 8003b90:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003b92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b94:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003b98:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	330c      	adds	r3, #12
 8003ba2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003ba6:	647a      	str	r2, [r7, #68]	; 0x44
 8003ba8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003baa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003bac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003bae:	e841 2300 	strex	r3, r2, [r1]
 8003bb2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003bb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d1e3      	bne.n	8003b82 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	3314      	adds	r3, #20
 8003bc0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc4:	e853 3f00 	ldrex	r3, [r3]
 8003bc8:	623b      	str	r3, [r7, #32]
   return(result);
 8003bca:	6a3b      	ldr	r3, [r7, #32]
 8003bcc:	f023 0301 	bic.w	r3, r3, #1
 8003bd0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	3314      	adds	r3, #20
 8003bda:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003bde:	633a      	str	r2, [r7, #48]	; 0x30
 8003be0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003be2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003be4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003be6:	e841 2300 	strex	r3, r2, [r1]
 8003bea:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003bec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d1e3      	bne.n	8003bba <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2220      	movs	r2, #32
 8003bf6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	330c      	adds	r3, #12
 8003c06:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c08:	693b      	ldr	r3, [r7, #16]
 8003c0a:	e853 3f00 	ldrex	r3, [r3]
 8003c0e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	f023 0310 	bic.w	r3, r3, #16
 8003c16:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	330c      	adds	r3, #12
 8003c20:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003c24:	61fa      	str	r2, [r7, #28]
 8003c26:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c28:	69b9      	ldr	r1, [r7, #24]
 8003c2a:	69fa      	ldr	r2, [r7, #28]
 8003c2c:	e841 2300 	strex	r3, r2, [r1]
 8003c30:	617b      	str	r3, [r7, #20]
   return(result);
 8003c32:	697b      	ldr	r3, [r7, #20]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d1e3      	bne.n	8003c00 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2202      	movs	r2, #2
 8003c3c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003c3e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003c42:	4619      	mov	r1, r3
 8003c44:	6878      	ldr	r0, [r7, #4]
 8003c46:	f000 f83b 	bl	8003cc0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003c4a:	e023      	b.n	8003c94 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003c4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d009      	beq.n	8003c6c <HAL_UART_IRQHandler+0x4f4>
 8003c58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d003      	beq.n	8003c6c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003c64:	6878      	ldr	r0, [r7, #4]
 8003c66:	f000 f953 	bl	8003f10 <UART_Transmit_IT>
    return;
 8003c6a:	e014      	b.n	8003c96 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003c6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d00e      	beq.n	8003c96 <HAL_UART_IRQHandler+0x51e>
 8003c78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d008      	beq.n	8003c96 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003c84:	6878      	ldr	r0, [r7, #4]
 8003c86:	f000 f992 	bl	8003fae <UART_EndTransmit_IT>
    return;
 8003c8a:	e004      	b.n	8003c96 <HAL_UART_IRQHandler+0x51e>
    return;
 8003c8c:	bf00      	nop
 8003c8e:	e002      	b.n	8003c96 <HAL_UART_IRQHandler+0x51e>
      return;
 8003c90:	bf00      	nop
 8003c92:	e000      	b.n	8003c96 <HAL_UART_IRQHandler+0x51e>
      return;
 8003c94:	bf00      	nop
  }
}
 8003c96:	37e8      	adds	r7, #232	; 0xe8
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	bd80      	pop	{r7, pc}

08003c9c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	b083      	sub	sp, #12
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003ca4:	bf00      	nop
 8003ca6:	370c      	adds	r7, #12
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	bc80      	pop	{r7}
 8003cac:	4770      	bx	lr

08003cae <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003cae:	b480      	push	{r7}
 8003cb0:	b083      	sub	sp, #12
 8003cb2:	af00      	add	r7, sp, #0
 8003cb4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003cb6:	bf00      	nop
 8003cb8:	370c      	adds	r7, #12
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bc80      	pop	{r7}
 8003cbe:	4770      	bx	lr

08003cc0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b083      	sub	sp, #12
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
 8003cc8:	460b      	mov	r3, r1
 8003cca:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003ccc:	bf00      	nop
 8003cce:	370c      	adds	r7, #12
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	bc80      	pop	{r7}
 8003cd4:	4770      	bx	lr

08003cd6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003cd6:	b580      	push	{r7, lr}
 8003cd8:	b090      	sub	sp, #64	; 0x40
 8003cda:	af00      	add	r7, sp, #0
 8003cdc:	60f8      	str	r0, [r7, #12]
 8003cde:	60b9      	str	r1, [r7, #8]
 8003ce0:	603b      	str	r3, [r7, #0]
 8003ce2:	4613      	mov	r3, r2
 8003ce4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ce6:	e050      	b.n	8003d8a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ce8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003cea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cee:	d04c      	beq.n	8003d8a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003cf0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d007      	beq.n	8003d06 <UART_WaitOnFlagUntilTimeout+0x30>
 8003cf6:	f7fd ffb1 	bl	8001c5c <HAL_GetTick>
 8003cfa:	4602      	mov	r2, r0
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	1ad3      	subs	r3, r2, r3
 8003d00:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003d02:	429a      	cmp	r2, r3
 8003d04:	d241      	bcs.n	8003d8a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	330c      	adds	r3, #12
 8003d0c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d10:	e853 3f00 	ldrex	r3, [r3]
 8003d14:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d18:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003d1c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	330c      	adds	r3, #12
 8003d24:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003d26:	637a      	str	r2, [r7, #52]	; 0x34
 8003d28:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d2a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003d2c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003d2e:	e841 2300 	strex	r3, r2, [r1]
 8003d32:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003d34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d1e5      	bne.n	8003d06 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	3314      	adds	r3, #20
 8003d40:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	e853 3f00 	ldrex	r3, [r3]
 8003d48:	613b      	str	r3, [r7, #16]
   return(result);
 8003d4a:	693b      	ldr	r3, [r7, #16]
 8003d4c:	f023 0301 	bic.w	r3, r3, #1
 8003d50:	63bb      	str	r3, [r7, #56]	; 0x38
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	3314      	adds	r3, #20
 8003d58:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003d5a:	623a      	str	r2, [r7, #32]
 8003d5c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d5e:	69f9      	ldr	r1, [r7, #28]
 8003d60:	6a3a      	ldr	r2, [r7, #32]
 8003d62:	e841 2300 	strex	r3, r2, [r1]
 8003d66:	61bb      	str	r3, [r7, #24]
   return(result);
 8003d68:	69bb      	ldr	r3, [r7, #24]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d1e5      	bne.n	8003d3a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	2220      	movs	r2, #32
 8003d72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	2220      	movs	r2, #32
 8003d7a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	2200      	movs	r2, #0
 8003d82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8003d86:	2303      	movs	r3, #3
 8003d88:	e00f      	b.n	8003daa <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	681a      	ldr	r2, [r3, #0]
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	4013      	ands	r3, r2
 8003d94:	68ba      	ldr	r2, [r7, #8]
 8003d96:	429a      	cmp	r2, r3
 8003d98:	bf0c      	ite	eq
 8003d9a:	2301      	moveq	r3, #1
 8003d9c:	2300      	movne	r3, #0
 8003d9e:	b2db      	uxtb	r3, r3
 8003da0:	461a      	mov	r2, r3
 8003da2:	79fb      	ldrb	r3, [r7, #7]
 8003da4:	429a      	cmp	r2, r3
 8003da6:	d09f      	beq.n	8003ce8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003da8:	2300      	movs	r3, #0
}
 8003daa:	4618      	mov	r0, r3
 8003dac:	3740      	adds	r7, #64	; 0x40
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd80      	pop	{r7, pc}

08003db2 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003db2:	b480      	push	{r7}
 8003db4:	b085      	sub	sp, #20
 8003db6:	af00      	add	r7, sp, #0
 8003db8:	60f8      	str	r0, [r7, #12]
 8003dba:	60b9      	str	r1, [r7, #8]
 8003dbc:	4613      	mov	r3, r2
 8003dbe:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	68ba      	ldr	r2, [r7, #8]
 8003dc4:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	88fa      	ldrh	r2, [r7, #6]
 8003dca:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	88fa      	ldrh	r2, [r7, #6]
 8003dd0:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	2222      	movs	r2, #34	; 0x22
 8003ddc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	691b      	ldr	r3, [r3, #16]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d007      	beq.n	8003df8 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	68da      	ldr	r2, [r3, #12]
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003df6:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	695a      	ldr	r2, [r3, #20]
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f042 0201 	orr.w	r2, r2, #1
 8003e06:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	68da      	ldr	r2, [r3, #12]
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f042 0220 	orr.w	r2, r2, #32
 8003e16:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003e18:	2300      	movs	r3, #0
}
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	3714      	adds	r7, #20
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bc80      	pop	{r7}
 8003e22:	4770      	bx	lr

08003e24 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003e24:	b480      	push	{r7}
 8003e26:	b095      	sub	sp, #84	; 0x54
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	330c      	adds	r3, #12
 8003e32:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e36:	e853 3f00 	ldrex	r3, [r3]
 8003e3a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003e3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e3e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003e42:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	330c      	adds	r3, #12
 8003e4a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003e4c:	643a      	str	r2, [r7, #64]	; 0x40
 8003e4e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e50:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003e52:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003e54:	e841 2300 	strex	r3, r2, [r1]
 8003e58:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003e5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d1e5      	bne.n	8003e2c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	3314      	adds	r3, #20
 8003e66:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e68:	6a3b      	ldr	r3, [r7, #32]
 8003e6a:	e853 3f00 	ldrex	r3, [r3]
 8003e6e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003e70:	69fb      	ldr	r3, [r7, #28]
 8003e72:	f023 0301 	bic.w	r3, r3, #1
 8003e76:	64bb      	str	r3, [r7, #72]	; 0x48
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	3314      	adds	r3, #20
 8003e7e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003e80:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003e82:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e84:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003e86:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e88:	e841 2300 	strex	r3, r2, [r1]
 8003e8c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d1e5      	bne.n	8003e60 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e98:	2b01      	cmp	r3, #1
 8003e9a:	d119      	bne.n	8003ed0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	330c      	adds	r3, #12
 8003ea2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	e853 3f00 	ldrex	r3, [r3]
 8003eaa:	60bb      	str	r3, [r7, #8]
   return(result);
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	f023 0310 	bic.w	r3, r3, #16
 8003eb2:	647b      	str	r3, [r7, #68]	; 0x44
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	330c      	adds	r3, #12
 8003eba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003ebc:	61ba      	str	r2, [r7, #24]
 8003ebe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ec0:	6979      	ldr	r1, [r7, #20]
 8003ec2:	69ba      	ldr	r2, [r7, #24]
 8003ec4:	e841 2300 	strex	r3, r2, [r1]
 8003ec8:	613b      	str	r3, [r7, #16]
   return(result);
 8003eca:	693b      	ldr	r3, [r7, #16]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d1e5      	bne.n	8003e9c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2220      	movs	r2, #32
 8003ed4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2200      	movs	r2, #0
 8003edc:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003ede:	bf00      	nop
 8003ee0:	3754      	adds	r7, #84	; 0x54
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bc80      	pop	{r7}
 8003ee6:	4770      	bx	lr

08003ee8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b084      	sub	sp, #16
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	2200      	movs	r2, #0
 8003efa:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	2200      	movs	r2, #0
 8003f00:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003f02:	68f8      	ldr	r0, [r7, #12]
 8003f04:	f7ff fed3 	bl	8003cae <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003f08:	bf00      	nop
 8003f0a:	3710      	adds	r7, #16
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bd80      	pop	{r7, pc}

08003f10 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003f10:	b480      	push	{r7}
 8003f12:	b085      	sub	sp, #20
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f1e:	b2db      	uxtb	r3, r3
 8003f20:	2b21      	cmp	r3, #33	; 0x21
 8003f22:	d13e      	bne.n	8003fa2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	689b      	ldr	r3, [r3, #8]
 8003f28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f2c:	d114      	bne.n	8003f58 <UART_Transmit_IT+0x48>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	691b      	ldr	r3, [r3, #16]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d110      	bne.n	8003f58 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6a1b      	ldr	r3, [r3, #32]
 8003f3a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	881b      	ldrh	r3, [r3, #0]
 8003f40:	461a      	mov	r2, r3
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003f4a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6a1b      	ldr	r3, [r3, #32]
 8003f50:	1c9a      	adds	r2, r3, #2
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	621a      	str	r2, [r3, #32]
 8003f56:	e008      	b.n	8003f6a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6a1b      	ldr	r3, [r3, #32]
 8003f5c:	1c59      	adds	r1, r3, #1
 8003f5e:	687a      	ldr	r2, [r7, #4]
 8003f60:	6211      	str	r1, [r2, #32]
 8003f62:	781a      	ldrb	r2, [r3, #0]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003f6e:	b29b      	uxth	r3, r3
 8003f70:	3b01      	subs	r3, #1
 8003f72:	b29b      	uxth	r3, r3
 8003f74:	687a      	ldr	r2, [r7, #4]
 8003f76:	4619      	mov	r1, r3
 8003f78:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d10f      	bne.n	8003f9e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	68da      	ldr	r2, [r3, #12]
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003f8c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	68da      	ldr	r2, [r3, #12]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f9c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	e000      	b.n	8003fa4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003fa2:	2302      	movs	r3, #2
  }
}
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	3714      	adds	r7, #20
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bc80      	pop	{r7}
 8003fac:	4770      	bx	lr

08003fae <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003fae:	b580      	push	{r7, lr}
 8003fb0:	b082      	sub	sp, #8
 8003fb2:	af00      	add	r7, sp, #0
 8003fb4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	68da      	ldr	r2, [r3, #12]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003fc4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2220      	movs	r2, #32
 8003fca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003fce:	6878      	ldr	r0, [r7, #4]
 8003fd0:	f7ff fe64 	bl	8003c9c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003fd4:	2300      	movs	r3, #0
}
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	3708      	adds	r7, #8
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bd80      	pop	{r7, pc}

08003fde <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003fde:	b580      	push	{r7, lr}
 8003fe0:	b08c      	sub	sp, #48	; 0x30
 8003fe2:	af00      	add	r7, sp, #0
 8003fe4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003fec:	b2db      	uxtb	r3, r3
 8003fee:	2b22      	cmp	r3, #34	; 0x22
 8003ff0:	f040 80ae 	bne.w	8004150 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	689b      	ldr	r3, [r3, #8]
 8003ff8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ffc:	d117      	bne.n	800402e <UART_Receive_IT+0x50>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	691b      	ldr	r3, [r3, #16]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d113      	bne.n	800402e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004006:	2300      	movs	r3, #0
 8004008:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800400e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	b29b      	uxth	r3, r3
 8004018:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800401c:	b29a      	uxth	r2, r3
 800401e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004020:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004026:	1c9a      	adds	r2, r3, #2
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	629a      	str	r2, [r3, #40]	; 0x28
 800402c:	e026      	b.n	800407c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004032:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004034:	2300      	movs	r3, #0
 8004036:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	689b      	ldr	r3, [r3, #8]
 800403c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004040:	d007      	beq.n	8004052 <UART_Receive_IT+0x74>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	689b      	ldr	r3, [r3, #8]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d10a      	bne.n	8004060 <UART_Receive_IT+0x82>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	691b      	ldr	r3, [r3, #16]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d106      	bne.n	8004060 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	b2da      	uxtb	r2, r3
 800405a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800405c:	701a      	strb	r2, [r3, #0]
 800405e:	e008      	b.n	8004072 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	b2db      	uxtb	r3, r3
 8004068:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800406c:	b2da      	uxtb	r2, r3
 800406e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004070:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004076:	1c5a      	adds	r2, r3, #1
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004080:	b29b      	uxth	r3, r3
 8004082:	3b01      	subs	r3, #1
 8004084:	b29b      	uxth	r3, r3
 8004086:	687a      	ldr	r2, [r7, #4]
 8004088:	4619      	mov	r1, r3
 800408a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800408c:	2b00      	cmp	r3, #0
 800408e:	d15d      	bne.n	800414c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	68da      	ldr	r2, [r3, #12]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f022 0220 	bic.w	r2, r2, #32
 800409e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	68da      	ldr	r2, [r3, #12]
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80040ae:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	695a      	ldr	r2, [r3, #20]
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f022 0201 	bic.w	r2, r2, #1
 80040be:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2220      	movs	r2, #32
 80040c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2200      	movs	r2, #0
 80040cc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040d2:	2b01      	cmp	r3, #1
 80040d4:	d135      	bne.n	8004142 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2200      	movs	r2, #0
 80040da:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	330c      	adds	r3, #12
 80040e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040e4:	697b      	ldr	r3, [r7, #20]
 80040e6:	e853 3f00 	ldrex	r3, [r3]
 80040ea:	613b      	str	r3, [r7, #16]
   return(result);
 80040ec:	693b      	ldr	r3, [r7, #16]
 80040ee:	f023 0310 	bic.w	r3, r3, #16
 80040f2:	627b      	str	r3, [r7, #36]	; 0x24
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	330c      	adds	r3, #12
 80040fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040fc:	623a      	str	r2, [r7, #32]
 80040fe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004100:	69f9      	ldr	r1, [r7, #28]
 8004102:	6a3a      	ldr	r2, [r7, #32]
 8004104:	e841 2300 	strex	r3, r2, [r1]
 8004108:	61bb      	str	r3, [r7, #24]
   return(result);
 800410a:	69bb      	ldr	r3, [r7, #24]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d1e5      	bne.n	80040dc <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f003 0310 	and.w	r3, r3, #16
 800411a:	2b10      	cmp	r3, #16
 800411c:	d10a      	bne.n	8004134 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800411e:	2300      	movs	r3, #0
 8004120:	60fb      	str	r3, [r7, #12]
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	60fb      	str	r3, [r7, #12]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	60fb      	str	r3, [r7, #12]
 8004132:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004138:	4619      	mov	r1, r3
 800413a:	6878      	ldr	r0, [r7, #4]
 800413c:	f7ff fdc0 	bl	8003cc0 <HAL_UARTEx_RxEventCallback>
 8004140:	e002      	b.n	8004148 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004142:	6878      	ldr	r0, [r7, #4]
 8004144:	f001 f81e 	bl	8005184 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004148:	2300      	movs	r3, #0
 800414a:	e002      	b.n	8004152 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800414c:	2300      	movs	r3, #0
 800414e:	e000      	b.n	8004152 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004150:	2302      	movs	r3, #2
  }
}
 8004152:	4618      	mov	r0, r3
 8004154:	3730      	adds	r7, #48	; 0x30
 8004156:	46bd      	mov	sp, r7
 8004158:	bd80      	pop	{r7, pc}
	...

0800415c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b084      	sub	sp, #16
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	691b      	ldr	r3, [r3, #16]
 800416a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	68da      	ldr	r2, [r3, #12]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	430a      	orrs	r2, r1
 8004178:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	689a      	ldr	r2, [r3, #8]
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	691b      	ldr	r3, [r3, #16]
 8004182:	431a      	orrs	r2, r3
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	695b      	ldr	r3, [r3, #20]
 8004188:	4313      	orrs	r3, r2
 800418a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	68db      	ldr	r3, [r3, #12]
 8004192:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004196:	f023 030c 	bic.w	r3, r3, #12
 800419a:	687a      	ldr	r2, [r7, #4]
 800419c:	6812      	ldr	r2, [r2, #0]
 800419e:	68b9      	ldr	r1, [r7, #8]
 80041a0:	430b      	orrs	r3, r1
 80041a2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	695b      	ldr	r3, [r3, #20]
 80041aa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	699a      	ldr	r2, [r3, #24]
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	430a      	orrs	r2, r1
 80041b8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4a2c      	ldr	r2, [pc, #176]	; (8004270 <UART_SetConfig+0x114>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d103      	bne.n	80041cc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80041c4:	f7fe fcde 	bl	8002b84 <HAL_RCC_GetPCLK2Freq>
 80041c8:	60f8      	str	r0, [r7, #12]
 80041ca:	e002      	b.n	80041d2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80041cc:	f7fe fcc6 	bl	8002b5c <HAL_RCC_GetPCLK1Freq>
 80041d0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80041d2:	68fa      	ldr	r2, [r7, #12]
 80041d4:	4613      	mov	r3, r2
 80041d6:	009b      	lsls	r3, r3, #2
 80041d8:	4413      	add	r3, r2
 80041da:	009a      	lsls	r2, r3, #2
 80041dc:	441a      	add	r2, r3
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	009b      	lsls	r3, r3, #2
 80041e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80041e8:	4a22      	ldr	r2, [pc, #136]	; (8004274 <UART_SetConfig+0x118>)
 80041ea:	fba2 2303 	umull	r2, r3, r2, r3
 80041ee:	095b      	lsrs	r3, r3, #5
 80041f0:	0119      	lsls	r1, r3, #4
 80041f2:	68fa      	ldr	r2, [r7, #12]
 80041f4:	4613      	mov	r3, r2
 80041f6:	009b      	lsls	r3, r3, #2
 80041f8:	4413      	add	r3, r2
 80041fa:	009a      	lsls	r2, r3, #2
 80041fc:	441a      	add	r2, r3
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	009b      	lsls	r3, r3, #2
 8004204:	fbb2 f2f3 	udiv	r2, r2, r3
 8004208:	4b1a      	ldr	r3, [pc, #104]	; (8004274 <UART_SetConfig+0x118>)
 800420a:	fba3 0302 	umull	r0, r3, r3, r2
 800420e:	095b      	lsrs	r3, r3, #5
 8004210:	2064      	movs	r0, #100	; 0x64
 8004212:	fb00 f303 	mul.w	r3, r0, r3
 8004216:	1ad3      	subs	r3, r2, r3
 8004218:	011b      	lsls	r3, r3, #4
 800421a:	3332      	adds	r3, #50	; 0x32
 800421c:	4a15      	ldr	r2, [pc, #84]	; (8004274 <UART_SetConfig+0x118>)
 800421e:	fba2 2303 	umull	r2, r3, r2, r3
 8004222:	095b      	lsrs	r3, r3, #5
 8004224:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004228:	4419      	add	r1, r3
 800422a:	68fa      	ldr	r2, [r7, #12]
 800422c:	4613      	mov	r3, r2
 800422e:	009b      	lsls	r3, r3, #2
 8004230:	4413      	add	r3, r2
 8004232:	009a      	lsls	r2, r3, #2
 8004234:	441a      	add	r2, r3
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	009b      	lsls	r3, r3, #2
 800423c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004240:	4b0c      	ldr	r3, [pc, #48]	; (8004274 <UART_SetConfig+0x118>)
 8004242:	fba3 0302 	umull	r0, r3, r3, r2
 8004246:	095b      	lsrs	r3, r3, #5
 8004248:	2064      	movs	r0, #100	; 0x64
 800424a:	fb00 f303 	mul.w	r3, r0, r3
 800424e:	1ad3      	subs	r3, r2, r3
 8004250:	011b      	lsls	r3, r3, #4
 8004252:	3332      	adds	r3, #50	; 0x32
 8004254:	4a07      	ldr	r2, [pc, #28]	; (8004274 <UART_SetConfig+0x118>)
 8004256:	fba2 2303 	umull	r2, r3, r2, r3
 800425a:	095b      	lsrs	r3, r3, #5
 800425c:	f003 020f 	and.w	r2, r3, #15
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	440a      	add	r2, r1
 8004266:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004268:	bf00      	nop
 800426a:	3710      	adds	r7, #16
 800426c:	46bd      	mov	sp, r7
 800426e:	bd80      	pop	{r7, pc}
 8004270:	40013800 	.word	0x40013800
 8004274:	51eb851f 	.word	0x51eb851f

08004278 <reset_EN>:
#include "begin.h"

void reset_EN(void){
 8004278:	b580      	push	{r7, lr}
 800427a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(EN2_PORT, EN2_PIN, 0);
 800427c:	2200      	movs	r2, #0
 800427e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004282:	4808      	ldr	r0, [pc, #32]	; (80042a4 <reset_EN+0x2c>)
 8004284:	f7fe f870 	bl	8002368 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN3_PORT, EN3_PIN, 0);
 8004288:	2200      	movs	r2, #0
 800428a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800428e:	4805      	ldr	r0, [pc, #20]	; (80042a4 <reset_EN+0x2c>)
 8004290:	f7fe f86a 	bl	8002368 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN4_PORT, EN4_PIN, 0);
 8004294:	2200      	movs	r2, #0
 8004296:	2180      	movs	r1, #128	; 0x80
 8004298:	4803      	ldr	r0, [pc, #12]	; (80042a8 <reset_EN+0x30>)
 800429a:	f7fe f865 	bl	8002368 <HAL_GPIO_WritePin>
}
 800429e:	bf00      	nop
 80042a0:	bd80      	pop	{r7, pc}
 80042a2:	bf00      	nop
 80042a4:	40010800 	.word	0x40010800
 80042a8:	40010c00 	.word	0x40010c00

080042ac <reset_dir>:

void reset_dir(void){
 80042ac:	b580      	push	{r7, lr}
 80042ae:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(DIR2_PORT, DIR2_PIN, 0);
 80042b0:	2200      	movs	r2, #0
 80042b2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80042b6:	4808      	ldr	r0, [pc, #32]	; (80042d8 <reset_dir+0x2c>)
 80042b8:	f7fe f856 	bl	8002368 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DIR3_PORT, DIR3_PIN, 0);
 80042bc:	2200      	movs	r2, #0
 80042be:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80042c2:	4805      	ldr	r0, [pc, #20]	; (80042d8 <reset_dir+0x2c>)
 80042c4:	f7fe f850 	bl	8002368 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DIR4_PORT, DIR4_PIN, 0);
 80042c8:	2200      	movs	r2, #0
 80042ca:	2140      	movs	r1, #64	; 0x40
 80042cc:	4803      	ldr	r0, [pc, #12]	; (80042dc <reset_dir+0x30>)
 80042ce:	f7fe f84b 	bl	8002368 <HAL_GPIO_WritePin>
}
 80042d2:	bf00      	nop
 80042d4:	bd80      	pop	{r7, pc}
 80042d6:	bf00      	nop
 80042d8:	40010800 	.word	0x40010800
 80042dc:	40010c00 	.word	0x40010c00

080042e0 <reset_step>:

void reset_step(void){
 80042e0:	b580      	push	{r7, lr}
 80042e2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(STEP2_PORT, STEP2_PIN, 0);
 80042e4:	2200      	movs	r2, #0
 80042e6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80042ea:	4808      	ldr	r0, [pc, #32]	; (800430c <reset_step+0x2c>)
 80042ec:	f7fe f83c 	bl	8002368 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(STEP3_PORT, STEP3_PIN, 0);
 80042f0:	2200      	movs	r2, #0
 80042f2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80042f6:	4806      	ldr	r0, [pc, #24]	; (8004310 <reset_step+0x30>)
 80042f8:	f7fe f836 	bl	8002368 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(STEP4_PORT, STEP4_PIN, 0);
 80042fc:	2200      	movs	r2, #0
 80042fe:	2120      	movs	r1, #32
 8004300:	4803      	ldr	r0, [pc, #12]	; (8004310 <reset_step+0x30>)
 8004302:	f7fe f831 	bl	8002368 <HAL_GPIO_WritePin>
}
 8004306:	bf00      	nop
 8004308:	bd80      	pop	{r7, pc}
 800430a:	bf00      	nop
 800430c:	40010800 	.word	0x40010800
 8004310:	40010c00 	.word	0x40010c00

08004314 <reset_thong_so>:

void reset_thong_so(void){
 8004314:	b580      	push	{r7, lr}
 8004316:	af00      	add	r7, sp, #0
	currentSpeed2 = 0.0;
 8004318:	4b11      	ldr	r3, [pc, #68]	; (8004360 <reset_thong_so+0x4c>)
 800431a:	f04f 0200 	mov.w	r2, #0
 800431e:	601a      	str	r2, [r3, #0]
	currentSpeed3 = 0.0;
 8004320:	4b10      	ldr	r3, [pc, #64]	; (8004364 <reset_thong_so+0x50>)
 8004322:	f04f 0200 	mov.w	r2, #0
 8004326:	601a      	str	r2, [r3, #0]
	currentSpeed4 = 0.0;
 8004328:	4b0f      	ldr	r3, [pc, #60]	; (8004368 <reset_thong_so+0x54>)
 800432a:	f04f 0200 	mov.w	r2, #0
 800432e:	601a      	str	r2, [r3, #0]
	acceleration2 = 0.000681333316;
 8004330:	4b0e      	ldr	r3, [pc, #56]	; (800436c <reset_thong_so+0x58>)
 8004332:	4a0f      	ldr	r2, [pc, #60]	; (8004370 <reset_thong_so+0x5c>)
 8004334:	601a      	str	r2, [r3, #0]
	acceleration3 = 0.000681333316;
 8004336:	4b0f      	ldr	r3, [pc, #60]	; (8004374 <reset_thong_so+0x60>)
 8004338:	4a0d      	ldr	r2, [pc, #52]	; (8004370 <reset_thong_so+0x5c>)
 800433a:	601a      	str	r2, [r3, #0]
	acceleration4 = 0.000681333316;
 800433c:	4b0e      	ldr	r3, [pc, #56]	; (8004378 <reset_thong_so+0x64>)
 800433e:	4a0c      	ldr	r2, [pc, #48]	; (8004370 <reset_thong_so+0x5c>)
 8004340:	601a      	str	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8,0);
 8004342:	2200      	movs	r2, #0
 8004344:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004348:	480c      	ldr	r0, [pc, #48]	; (800437c <reset_thong_so+0x68>)
 800434a:	f7fe f80d 	bl	8002368 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9,0);
 800434e:	2200      	movs	r2, #0
 8004350:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004354:	4809      	ldr	r0, [pc, #36]	; (800437c <reset_thong_so+0x68>)
 8004356:	f7fe f807 	bl	8002368 <HAL_GPIO_WritePin>
}
 800435a:	bf00      	nop
 800435c:	bd80      	pop	{r7, pc}
 800435e:	bf00      	nop
 8004360:	20000460 	.word	0x20000460
 8004364:	20000464 	.word	0x20000464
 8004368:	20000468 	.word	0x20000468
 800436c:	20000034 	.word	0x20000034
 8004370:	3a329b81 	.word	0x3a329b81
 8004374:	20000038 	.word	0x20000038
 8004378:	20000030 	.word	0x20000030
 800437c:	40010c00 	.word	0x40010c00

08004380 <khoi_tao>:
void khoi_tao(void){
 8004380:	b580      	push	{r7, lr}
 8004382:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart2, uartBuffer, 1);
 8004384:	2201      	movs	r2, #1
 8004386:	4905      	ldr	r1, [pc, #20]	; (800439c <khoi_tao+0x1c>)
 8004388:	4805      	ldr	r0, [pc, #20]	; (80043a0 <khoi_tao+0x20>)
 800438a:	f7ff f92c 	bl	80035e6 <HAL_UART_Receive_IT>
	reset_EN();
 800438e:	f7ff ff73 	bl	8004278 <reset_EN>
	reset_dir();
 8004392:	f7ff ff8b 	bl	80042ac <reset_dir>
}
 8004396:	bf00      	nop
 8004398:	bd80      	pop	{r7, pc}
 800439a:	bf00      	nop
 800439c:	200003e0 	.word	0x200003e0
 80043a0:	20000350 	.word	0x20000350

080043a4 <gan_du_lieu_uart>:
#include "body.h"

void gan_du_lieu_uart(void){
 80043a4:	b480      	push	{r7}
 80043a6:	af00      	add	r7, sp, #0
	ngatuart=0;
 80043a8:	4b0f      	ldr	r3, [pc, #60]	; (80043e8 <gan_du_lieu_uart+0x44>)
 80043aa:	2200      	movs	r2, #0
 80043ac:	701a      	strb	r2, [r3, #0]
	xungmotor2=pre_xungmotor2;
 80043ae:	4b0f      	ldr	r3, [pc, #60]	; (80043ec <gan_du_lieu_uart+0x48>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4a0f      	ldr	r2, [pc, #60]	; (80043f0 <gan_du_lieu_uart+0x4c>)
 80043b4:	6013      	str	r3, [r2, #0]
	xungmotor3=pre_xungmotor3;
 80043b6:	4b0f      	ldr	r3, [pc, #60]	; (80043f4 <gan_du_lieu_uart+0x50>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4a0f      	ldr	r2, [pc, #60]	; (80043f8 <gan_du_lieu_uart+0x54>)
 80043bc:	6013      	str	r3, [r2, #0]
	xungmotor4=pre_xungmotor4;
 80043be:	4b0f      	ldr	r3, [pc, #60]	; (80043fc <gan_du_lieu_uart+0x58>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4a0f      	ldr	r2, [pc, #60]	; (8004400 <gan_du_lieu_uart+0x5c>)
 80043c4:	6013      	str	r3, [r2, #0]
	targetSpeed2=pre_targetSpeed2;
 80043c6:	4b0f      	ldr	r3, [pc, #60]	; (8004404 <gan_du_lieu_uart+0x60>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a0f      	ldr	r2, [pc, #60]	; (8004408 <gan_du_lieu_uart+0x64>)
 80043cc:	6013      	str	r3, [r2, #0]
	targetSpeed3= pre_targetSpeed3;
 80043ce:	4b0f      	ldr	r3, [pc, #60]	; (800440c <gan_du_lieu_uart+0x68>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4a0f      	ldr	r2, [pc, #60]	; (8004410 <gan_du_lieu_uart+0x6c>)
 80043d4:	6013      	str	r3, [r2, #0]
	targetSpeed4=pre_targetSpeed4;
 80043d6:	4b0f      	ldr	r3, [pc, #60]	; (8004414 <gan_du_lieu_uart+0x70>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4a0f      	ldr	r2, [pc, #60]	; (8004418 <gan_du_lieu_uart+0x74>)
 80043dc:	6013      	str	r3, [r2, #0]
}
 80043de:	bf00      	nop
 80043e0:	46bd      	mov	sp, r7
 80043e2:	bc80      	pop	{r7}
 80043e4:	4770      	bx	lr
 80043e6:	bf00      	nop
 80043e8:	200003bd 	.word	0x200003bd
 80043ec:	20000484 	.word	0x20000484
 80043f0:	20000478 	.word	0x20000478
 80043f4:	20000488 	.word	0x20000488
 80043f8:	2000047c 	.word	0x2000047c
 80043fc:	2000048c 	.word	0x2000048c
 8004400:	20000480 	.word	0x20000480
 8004404:	20000024 	.word	0x20000024
 8004408:	20000018 	.word	0x20000018
 800440c:	20000028 	.word	0x20000028
 8004410:	2000001c 	.word	0x2000001c
 8004414:	2000002c 	.word	0x2000002c
 8004418:	20000020 	.word	0x20000020

0800441c <reset_gia_tri_dem>:

void reset_gia_tri_dem(void){
 800441c:	b480      	push	{r7}
 800441e:	af00      	add	r7, sp, #0
	dem2=0;
 8004420:	4b09      	ldr	r3, [pc, #36]	; (8004448 <reset_gia_tri_dem+0x2c>)
 8004422:	2200      	movs	r2, #0
 8004424:	601a      	str	r2, [r3, #0]
	dem3=0;
 8004426:	4b09      	ldr	r3, [pc, #36]	; (800444c <reset_gia_tri_dem+0x30>)
 8004428:	2200      	movs	r2, #0
 800442a:	601a      	str	r2, [r3, #0]
	dem4=0;
 800442c:	4b08      	ldr	r3, [pc, #32]	; (8004450 <reset_gia_tri_dem+0x34>)
 800442e:	2200      	movs	r2, #0
 8004430:	601a      	str	r2, [r3, #0]
	state=0;
 8004432:	4b08      	ldr	r3, [pc, #32]	; (8004454 <reset_gia_tri_dem+0x38>)
 8004434:	2200      	movs	r2, #0
 8004436:	701a      	strb	r2, [r3, #0]
	sta1=0;
 8004438:	4b07      	ldr	r3, [pc, #28]	; (8004458 <reset_gia_tri_dem+0x3c>)
 800443a:	2200      	movs	r2, #0
 800443c:	601a      	str	r2, [r3, #0]
}
 800443e:	bf00      	nop
 8004440:	46bd      	mov	sp, r7
 8004442:	bc80      	pop	{r7}
 8004444:	4770      	bx	lr
 8004446:	bf00      	nop
 8004448:	200003cc 	.word	0x200003cc
 800444c:	200003d0 	.word	0x200003d0
 8004450:	200003d4 	.word	0x200003d4
 8004454:	200003bc 	.word	0x200003bc
 8004458:	2000000c 	.word	0x2000000c

0800445c <send_encoder_begin>:

void send_encoder_begin(void){
 800445c:	b580      	push	{r7, lr}
 800445e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8,1);
 8004460:	2201      	movs	r2, #1
 8004462:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004466:	4805      	ldr	r0, [pc, #20]	; (800447c <send_encoder_begin+0x20>)
 8004468:	f7fd ff7e 	bl	8002368 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8,0);
 800446c:	2200      	movs	r2, #0
 800446e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004472:	4802      	ldr	r0, [pc, #8]	; (800447c <send_encoder_begin+0x20>)
 8004474:	f7fd ff78 	bl	8002368 <HAL_GPIO_WritePin>
}
 8004478:	bf00      	nop
 800447a:	bd80      	pop	{r7, pc}
 800447c:	40010c00 	.word	0x40010c00

08004480 <send_encoder_finish>:
void send_encoder_finish(void){
 8004480:	b580      	push	{r7, lr}
 8004482:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9,1);
 8004484:	2201      	movs	r2, #1
 8004486:	f44f 7100 	mov.w	r1, #512	; 0x200
 800448a:	4805      	ldr	r0, [pc, #20]	; (80044a0 <send_encoder_finish+0x20>)
 800448c:	f7fd ff6c 	bl	8002368 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9,0);
 8004490:	2200      	movs	r2, #0
 8004492:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004496:	4802      	ldr	r0, [pc, #8]	; (80044a0 <send_encoder_finish+0x20>)
 8004498:	f7fd ff66 	bl	8002368 <HAL_GPIO_WritePin>
}
 800449c:	bf00      	nop
 800449e:	bd80      	pop	{r7, pc}
 80044a0:	40010c00 	.word	0x40010c00

080044a4 <begin_motor>:

void begin_motor(void){
 80044a4:	b580      	push	{r7, lr}
 80044a6:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim1);
 80044a8:	4806      	ldr	r0, [pc, #24]	; (80044c4 <begin_motor+0x20>)
 80044aa:	f7fe fbed 	bl	8002c88 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim2);
 80044ae:	4806      	ldr	r0, [pc, #24]	; (80044c8 <begin_motor+0x24>)
 80044b0:	f7fe fbea 	bl	8002c88 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim3);
 80044b4:	4805      	ldr	r0, [pc, #20]	; (80044cc <begin_motor+0x28>)
 80044b6:	f7fe fbe7 	bl	8002c88 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim4);
 80044ba:	4805      	ldr	r0, [pc, #20]	; (80044d0 <begin_motor+0x2c>)
 80044bc:	f7fe fbe4 	bl	8002c88 <HAL_TIM_Base_Start_IT>
}
 80044c0:	bf00      	nop
 80044c2:	bd80      	pop	{r7, pc}
 80044c4:	20000230 	.word	0x20000230
 80044c8:	20000278 	.word	0x20000278
 80044cc:	200002c0 	.word	0x200002c0
 80044d0:	20000308 	.word	0x20000308

080044d4 <stop_motor>:

void stop_motor(void){
 80044d4:	b580      	push	{r7, lr}
 80044d6:	af00      	add	r7, sp, #0
	ngatuart=0;
 80044d8:	4b13      	ldr	r3, [pc, #76]	; (8004528 <stop_motor+0x54>)
 80044da:	2200      	movs	r2, #0
 80044dc:	701a      	strb	r2, [r3, #0]
	isTimerInterrupt2 = 1;
 80044de:	4b13      	ldr	r3, [pc, #76]	; (800452c <stop_motor+0x58>)
 80044e0:	2201      	movs	r2, #1
 80044e2:	701a      	strb	r2, [r3, #0]
	isTimerInterrupt3 = 1;
 80044e4:	4b12      	ldr	r3, [pc, #72]	; (8004530 <stop_motor+0x5c>)
 80044e6:	2201      	movs	r2, #1
 80044e8:	701a      	strb	r2, [r3, #0]
	isTimerInterrupt4 = 1;
 80044ea:	4b12      	ldr	r3, [pc, #72]	; (8004534 <stop_motor+0x60>)
 80044ec:	2201      	movs	r2, #1
 80044ee:	701a      	strb	r2, [r3, #0]
	HAL_TIM_Base_Stop_IT(&htim2);
 80044f0:	4811      	ldr	r0, [pc, #68]	; (8004538 <stop_motor+0x64>)
 80044f2:	f7fe fc1b 	bl	8002d2c <HAL_TIM_Base_Stop_IT>
	HAL_TIM_Base_Stop_IT(&htim3);
 80044f6:	4811      	ldr	r0, [pc, #68]	; (800453c <stop_motor+0x68>)
 80044f8:	f7fe fc18 	bl	8002d2c <HAL_TIM_Base_Stop_IT>
	HAL_TIM_Base_Stop_IT(&htim4);
 80044fc:	4810      	ldr	r0, [pc, #64]	; (8004540 <stop_motor+0x6c>)
 80044fe:	f7fe fc15 	bl	8002d2c <HAL_TIM_Base_Stop_IT>
	HAL_GPIO_WritePin(EN2_PORT, EN2_PIN, 1);
 8004502:	2201      	movs	r2, #1
 8004504:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004508:	480e      	ldr	r0, [pc, #56]	; (8004544 <stop_motor+0x70>)
 800450a:	f7fd ff2d 	bl	8002368 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN3_PORT, EN3_PIN, 1);
 800450e:	2201      	movs	r2, #1
 8004510:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004514:	480b      	ldr	r0, [pc, #44]	; (8004544 <stop_motor+0x70>)
 8004516:	f7fd ff27 	bl	8002368 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN4_PORT, EN4_PIN, 1);
 800451a:	2201      	movs	r2, #1
 800451c:	2180      	movs	r1, #128	; 0x80
 800451e:	480a      	ldr	r0, [pc, #40]	; (8004548 <stop_motor+0x74>)
 8004520:	f7fd ff22 	bl	8002368 <HAL_GPIO_WritePin>
}
 8004524:	bf00      	nop
 8004526:	bd80      	pop	{r7, pc}
 8004528:	200003bd 	.word	0x200003bd
 800452c:	200003d8 	.word	0x200003d8
 8004530:	200003d9 	.word	0x200003d9
 8004534:	200003da 	.word	0x200003da
 8004538:	20000278 	.word	0x20000278
 800453c:	200002c0 	.word	0x200002c0
 8004540:	20000308 	.word	0x20000308
 8004544:	40010800 	.word	0x40010800
 8004548:	40010c00 	.word	0x40010c00

0800454c <wait_uart>:

void wait_uart(void){
 800454c:	b480      	push	{r7}
 800454e:	af00      	add	r7, sp, #0
	while(!(ngatuart)){};
 8004550:	bf00      	nop
 8004552:	4b05      	ldr	r3, [pc, #20]	; (8004568 <wait_uart+0x1c>)
 8004554:	f993 3000 	ldrsb.w	r3, [r3]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d0fa      	beq.n	8004552 <wait_uart+0x6>
}
 800455c:	bf00      	nop
 800455e:	bf00      	nop
 8004560:	46bd      	mov	sp, r7
 8004562:	bc80      	pop	{r7}
 8004564:	4770      	bx	lr
 8004566:	bf00      	nop
 8004568:	200003bd 	.word	0x200003bd

0800456c <wait_motor_finish>:

void wait_motor_finish(void){
 800456c:	b480      	push	{r7}
 800456e:	af00      	add	r7, sp, #0
	while (!((isTimerInterrupt2==1)&&(isTimerInterrupt3==1)&&(isTimerInterrupt4==1))) {}
 8004570:	bf00      	nop
 8004572:	4b08      	ldr	r3, [pc, #32]	; (8004594 <wait_motor_finish+0x28>)
 8004574:	781b      	ldrb	r3, [r3, #0]
 8004576:	2b01      	cmp	r3, #1
 8004578:	d1fb      	bne.n	8004572 <wait_motor_finish+0x6>
 800457a:	4b07      	ldr	r3, [pc, #28]	; (8004598 <wait_motor_finish+0x2c>)
 800457c:	781b      	ldrb	r3, [r3, #0]
 800457e:	2b01      	cmp	r3, #1
 8004580:	d1f7      	bne.n	8004572 <wait_motor_finish+0x6>
 8004582:	4b06      	ldr	r3, [pc, #24]	; (800459c <wait_motor_finish+0x30>)
 8004584:	781b      	ldrb	r3, [r3, #0]
 8004586:	2b01      	cmp	r3, #1
 8004588:	d1f3      	bne.n	8004572 <wait_motor_finish+0x6>
}
 800458a:	bf00      	nop
 800458c:	bf00      	nop
 800458e:	46bd      	mov	sp, r7
 8004590:	bc80      	pop	{r7}
 8004592:	4770      	bx	lr
 8004594:	200003d8 	.word	0x200003d8
 8004598:	200003d9 	.word	0x200003d9
 800459c:	200003da 	.word	0x200003da

080045a0 <motor_finish>:

void motor_finish(void){
 80045a0:	b580      	push	{r7, lr}
 80045a2:	af00      	add	r7, sp, #0
	if (((isTimerInterrupt2==1)&&(isTimerInterrupt3==1)&&(isTimerInterrupt4==1)))
 80045a4:	4b18      	ldr	r3, [pc, #96]	; (8004608 <motor_finish+0x68>)
 80045a6:	781b      	ldrb	r3, [r3, #0]
 80045a8:	2b01      	cmp	r3, #1
 80045aa:	d124      	bne.n	80045f6 <motor_finish+0x56>
 80045ac:	4b17      	ldr	r3, [pc, #92]	; (800460c <motor_finish+0x6c>)
 80045ae:	781b      	ldrb	r3, [r3, #0]
 80045b0:	2b01      	cmp	r3, #1
 80045b2:	d120      	bne.n	80045f6 <motor_finish+0x56>
 80045b4:	4b16      	ldr	r3, [pc, #88]	; (8004610 <motor_finish+0x70>)
 80045b6:	781b      	ldrb	r3, [r3, #0]
 80045b8:	2b01      	cmp	r3, #1
 80045ba:	d11c      	bne.n	80045f6 <motor_finish+0x56>
	{
		send_encoder_finish();
 80045bc:	f7ff ff60 	bl	8004480 <send_encoder_finish>
		HAL_TIM_Base_Stop_IT(&htim1);
 80045c0:	4814      	ldr	r0, [pc, #80]	; (8004614 <motor_finish+0x74>)
 80045c2:	f7fe fbb3 	bl	8002d2c <HAL_TIM_Base_Stop_IT>
		isTimerInterrupt2 = 0;
 80045c6:	4b10      	ldr	r3, [pc, #64]	; (8004608 <motor_finish+0x68>)
 80045c8:	2200      	movs	r2, #0
 80045ca:	701a      	strb	r2, [r3, #0]
		isTimerInterrupt3 = 0;
 80045cc:	4b0f      	ldr	r3, [pc, #60]	; (800460c <motor_finish+0x6c>)
 80045ce:	2200      	movs	r2, #0
 80045d0:	701a      	strb	r2, [r3, #0]
		isTimerInterrupt4 = 0;
 80045d2:	4b0f      	ldr	r3, [pc, #60]	; (8004610 <motor_finish+0x70>)
 80045d4:	2200      	movs	r2, #0
 80045d6:	701a      	strb	r2, [r3, #0]
		state=1;
 80045d8:	4b0f      	ldr	r3, [pc, #60]	; (8004618 <motor_finish+0x78>)
 80045da:	2201      	movs	r2, #1
 80045dc:	701a      	strb	r2, [r3, #0]
		sta1=sta1+1;
 80045de:	4b0f      	ldr	r3, [pc, #60]	; (800461c <motor_finish+0x7c>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	3301      	adds	r3, #1
 80045e4:	4a0d      	ldr	r2, [pc, #52]	; (800461c <motor_finish+0x7c>)
 80045e6:	6013      	str	r3, [r2, #0]
		sta2= sta2+1;
 80045e8:	4b0d      	ldr	r3, [pc, #52]	; (8004620 <motor_finish+0x80>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	3301      	adds	r3, #1
 80045ee:	4a0c      	ldr	r2, [pc, #48]	; (8004620 <motor_finish+0x80>)
 80045f0:	6013      	str	r3, [r2, #0]
		send_uart();
 80045f2:	f000 f819 	bl	8004628 <send_uart>
	}
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80045f6:	2200      	movs	r2, #0
 80045f8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80045fc:	4809      	ldr	r0, [pc, #36]	; (8004624 <motor_finish+0x84>)
 80045fe:	f7fd feb3 	bl	8002368 <HAL_GPIO_WritePin>
}
 8004602:	bf00      	nop
 8004604:	bd80      	pop	{r7, pc}
 8004606:	bf00      	nop
 8004608:	200003d8 	.word	0x200003d8
 800460c:	200003d9 	.word	0x200003d9
 8004610:	200003da 	.word	0x200003da
 8004614:	20000230 	.word	0x20000230
 8004618:	200003bc 	.word	0x200003bc
 800461c:	2000000c 	.word	0x2000000c
 8004620:	200003b8 	.word	0x200003b8
 8004624:	40011000 	.word	0x40011000

08004628 <send_uart>:

void send_uart(void){
 8004628:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800462c:	b0c3      	sub	sp, #268	; 0x10c
 800462e:	af0c      	add	r7, sp, #48	; 0x30
	char buffer12[200];
	sprintf(buffer12, "an%dn%.3fn%dn%.3fn%dn%.3fn%dn%dnz\n", current_position2, currentSpeed2, current_position3, currentSpeed3, current_position4, currentSpeed4, sta2, state);
 8004630:	4b24      	ldr	r3, [pc, #144]	; (80046c4 <send_uart+0x9c>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	60fb      	str	r3, [r7, #12]
 8004636:	4b24      	ldr	r3, [pc, #144]	; (80046c8 <send_uart+0xa0>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4618      	mov	r0, r3
 800463c:	f7fb fef4 	bl	8000428 <__aeabi_f2d>
 8004640:	4604      	mov	r4, r0
 8004642:	460d      	mov	r5, r1
 8004644:	4b21      	ldr	r3, [pc, #132]	; (80046cc <send_uart+0xa4>)
 8004646:	681e      	ldr	r6, [r3, #0]
 8004648:	4b21      	ldr	r3, [pc, #132]	; (80046d0 <send_uart+0xa8>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4618      	mov	r0, r3
 800464e:	f7fb feeb 	bl	8000428 <__aeabi_f2d>
 8004652:	4680      	mov	r8, r0
 8004654:	4689      	mov	r9, r1
 8004656:	4b1f      	ldr	r3, [pc, #124]	; (80046d4 <send_uart+0xac>)
 8004658:	6819      	ldr	r1, [r3, #0]
 800465a:	60b9      	str	r1, [r7, #8]
 800465c:	4b1e      	ldr	r3, [pc, #120]	; (80046d8 <send_uart+0xb0>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4618      	mov	r0, r3
 8004662:	f7fb fee1 	bl	8000428 <__aeabi_f2d>
 8004666:	4602      	mov	r2, r0
 8004668:	460b      	mov	r3, r1
 800466a:	491c      	ldr	r1, [pc, #112]	; (80046dc <send_uart+0xb4>)
 800466c:	6809      	ldr	r1, [r1, #0]
 800466e:	481c      	ldr	r0, [pc, #112]	; (80046e0 <send_uart+0xb8>)
 8004670:	f990 0000 	ldrsb.w	r0, [r0]
 8004674:	6078      	str	r0, [r7, #4]
 8004676:	f107 0010 	add.w	r0, r7, #16
 800467a:	f8d7 c004 	ldr.w	ip, [r7, #4]
 800467e:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
 8004682:	910a      	str	r1, [sp, #40]	; 0x28
 8004684:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8004688:	68b9      	ldr	r1, [r7, #8]
 800468a:	9106      	str	r1, [sp, #24]
 800468c:	e9cd 8904 	strd	r8, r9, [sp, #16]
 8004690:	9602      	str	r6, [sp, #8]
 8004692:	e9cd 4500 	strd	r4, r5, [sp]
 8004696:	68fa      	ldr	r2, [r7, #12]
 8004698:	4912      	ldr	r1, [pc, #72]	; (80046e4 <send_uart+0xbc>)
 800469a:	f001 fcd7 	bl	800604c <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t *)buffer12, strlen(buffer12), HAL_MAX_DELAY);
 800469e:	f107 0310 	add.w	r3, r7, #16
 80046a2:	4618      	mov	r0, r3
 80046a4:	f7fb fd54 	bl	8000150 <strlen>
 80046a8:	4603      	mov	r3, r0
 80046aa:	b29a      	uxth	r2, r3
 80046ac:	f107 0110 	add.w	r1, r7, #16
 80046b0:	f04f 33ff 	mov.w	r3, #4294967295
 80046b4:	480c      	ldr	r0, [pc, #48]	; (80046e8 <send_uart+0xc0>)
 80046b6:	f7fe ff13 	bl	80034e0 <HAL_UART_Transmit>
}
 80046ba:	bf00      	nop
 80046bc:	37dc      	adds	r7, #220	; 0xdc
 80046be:	46bd      	mov	sp, r7
 80046c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80046c4:	200003c0 	.word	0x200003c0
 80046c8:	20000460 	.word	0x20000460
 80046cc:	200003c4 	.word	0x200003c4
 80046d0:	20000464 	.word	0x20000464
 80046d4:	200003c8 	.word	0x200003c8
 80046d8:	20000468 	.word	0x20000468
 80046dc:	200003b8 	.word	0x200003b8
 80046e0:	200003bc 	.word	0x200003bc
 80046e4:	0800a448 	.word	0x0800a448
 80046e8:	20000350 	.word	0x20000350
 80046ec:	00000000 	.word	0x00000000

080046f0 <calculate_Period2>:
#include "calculate_ARR.h"

/* Các hàm tính toán giá trị ARR dựa trên tần số có sẵn  */

uint16_t calculate_Period2(float frequency) {
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b084      	sub	sp, #16
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
	if (frequency <= 0.0f) {
 80046f8:	f04f 0100 	mov.w	r1, #0
 80046fc:	6878      	ldr	r0, [r7, #4]
 80046fe:	f7fc fce9 	bl	80010d4 <__aeabi_fcmple>
 8004702:	4603      	mov	r3, r0
 8004704:	2b00      	cmp	r3, #0
 8004706:	d001      	beq.n	800470c <calculate_Period2+0x1c>
	   return 0;
 8004708:	2300      	movs	r3, #0
 800470a:	e02a      	b.n	8004762 <calculate_Period2+0x72>
	}
    float period=((72000000.0 / (frequency * (720-1)*1000.0)) - 1);
 800470c:	491a      	ldr	r1, [pc, #104]	; (8004778 <calculate_Period2+0x88>)
 800470e:	6878      	ldr	r0, [r7, #4]
 8004710:	f7fc fb38 	bl	8000d84 <__aeabi_fmul>
 8004714:	4603      	mov	r3, r0
 8004716:	4618      	mov	r0, r3
 8004718:	f7fb fe86 	bl	8000428 <__aeabi_f2d>
 800471c:	f04f 0200 	mov.w	r2, #0
 8004720:	4b16      	ldr	r3, [pc, #88]	; (800477c <calculate_Period2+0x8c>)
 8004722:	f7fb fed9 	bl	80004d8 <__aeabi_dmul>
 8004726:	4602      	mov	r2, r0
 8004728:	460b      	mov	r3, r1
 800472a:	a111      	add	r1, pc, #68	; (adr r1, 8004770 <calculate_Period2+0x80>)
 800472c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004730:	f7fb fffc 	bl	800072c <__aeabi_ddiv>
 8004734:	4602      	mov	r2, r0
 8004736:	460b      	mov	r3, r1
 8004738:	4610      	mov	r0, r2
 800473a:	4619      	mov	r1, r3
 800473c:	f04f 0200 	mov.w	r2, #0
 8004740:	4b0f      	ldr	r3, [pc, #60]	; (8004780 <calculate_Period2+0x90>)
 8004742:	f7fb fd11 	bl	8000168 <__aeabi_dsub>
 8004746:	4602      	mov	r2, r0
 8004748:	460b      	mov	r3, r1
 800474a:	4610      	mov	r0, r2
 800474c:	4619      	mov	r1, r3
 800474e:	f7fc f9bb 	bl	8000ac8 <__aeabi_d2f>
 8004752:	4603      	mov	r3, r0
 8004754:	60fb      	str	r3, [r7, #12]
    uint16_t period_u = float_to_uint16(period);
 8004756:	68f8      	ldr	r0, [r7, #12]
 8004758:	f000 f8ac 	bl	80048b4 <float_to_uint16>
 800475c:	4603      	mov	r3, r0
 800475e:	817b      	strh	r3, [r7, #10]
    return period_u;
 8004760:	897b      	ldrh	r3, [r7, #10]
}
 8004762:	4618      	mov	r0, r3
 8004764:	3710      	adds	r7, #16
 8004766:	46bd      	mov	sp, r7
 8004768:	bd80      	pop	{r7, pc}
 800476a:	bf00      	nop
 800476c:	f3af 8000 	nop.w
 8004770:	00000000 	.word	0x00000000
 8004774:	41912a88 	.word	0x41912a88
 8004778:	4433c000 	.word	0x4433c000
 800477c:	408f4000 	.word	0x408f4000
 8004780:	3ff00000 	.word	0x3ff00000
 8004784:	00000000 	.word	0x00000000

08004788 <calculate_Period3>:
uint16_t calculate_Period3(float frequency) {
 8004788:	b580      	push	{r7, lr}
 800478a:	b084      	sub	sp, #16
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
	if (frequency <= 0.0f) {
 8004790:	f04f 0100 	mov.w	r1, #0
 8004794:	6878      	ldr	r0, [r7, #4]
 8004796:	f7fc fc9d 	bl	80010d4 <__aeabi_fcmple>
 800479a:	4603      	mov	r3, r0
 800479c:	2b00      	cmp	r3, #0
 800479e:	d001      	beq.n	80047a4 <calculate_Period3+0x1c>
		return 0;
 80047a0:	2300      	movs	r3, #0
 80047a2:	e02a      	b.n	80047fa <calculate_Period3+0x72>
	}
	float period=((72000000.0 / (frequency * (720-1)*1000.0)) - 1);
 80047a4:	491a      	ldr	r1, [pc, #104]	; (8004810 <calculate_Period3+0x88>)
 80047a6:	6878      	ldr	r0, [r7, #4]
 80047a8:	f7fc faec 	bl	8000d84 <__aeabi_fmul>
 80047ac:	4603      	mov	r3, r0
 80047ae:	4618      	mov	r0, r3
 80047b0:	f7fb fe3a 	bl	8000428 <__aeabi_f2d>
 80047b4:	f04f 0200 	mov.w	r2, #0
 80047b8:	4b16      	ldr	r3, [pc, #88]	; (8004814 <calculate_Period3+0x8c>)
 80047ba:	f7fb fe8d 	bl	80004d8 <__aeabi_dmul>
 80047be:	4602      	mov	r2, r0
 80047c0:	460b      	mov	r3, r1
 80047c2:	a111      	add	r1, pc, #68	; (adr r1, 8004808 <calculate_Period3+0x80>)
 80047c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80047c8:	f7fb ffb0 	bl	800072c <__aeabi_ddiv>
 80047cc:	4602      	mov	r2, r0
 80047ce:	460b      	mov	r3, r1
 80047d0:	4610      	mov	r0, r2
 80047d2:	4619      	mov	r1, r3
 80047d4:	f04f 0200 	mov.w	r2, #0
 80047d8:	4b0f      	ldr	r3, [pc, #60]	; (8004818 <calculate_Period3+0x90>)
 80047da:	f7fb fcc5 	bl	8000168 <__aeabi_dsub>
 80047de:	4602      	mov	r2, r0
 80047e0:	460b      	mov	r3, r1
 80047e2:	4610      	mov	r0, r2
 80047e4:	4619      	mov	r1, r3
 80047e6:	f7fc f96f 	bl	8000ac8 <__aeabi_d2f>
 80047ea:	4603      	mov	r3, r0
 80047ec:	60fb      	str	r3, [r7, #12]
	uint16_t period_u = float_to_uint16(period);
 80047ee:	68f8      	ldr	r0, [r7, #12]
 80047f0:	f000 f860 	bl	80048b4 <float_to_uint16>
 80047f4:	4603      	mov	r3, r0
 80047f6:	817b      	strh	r3, [r7, #10]
	return period_u;
 80047f8:	897b      	ldrh	r3, [r7, #10]
}
 80047fa:	4618      	mov	r0, r3
 80047fc:	3710      	adds	r7, #16
 80047fe:	46bd      	mov	sp, r7
 8004800:	bd80      	pop	{r7, pc}
 8004802:	bf00      	nop
 8004804:	f3af 8000 	nop.w
 8004808:	00000000 	.word	0x00000000
 800480c:	41912a88 	.word	0x41912a88
 8004810:	4433c000 	.word	0x4433c000
 8004814:	408f4000 	.word	0x408f4000
 8004818:	3ff00000 	.word	0x3ff00000
 800481c:	00000000 	.word	0x00000000

08004820 <calculate_Period4>:
uint16_t calculate_Period4(float frequency) {
 8004820:	b580      	push	{r7, lr}
 8004822:	b084      	sub	sp, #16
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
	if (frequency <= 0.0f) {
 8004828:	f04f 0100 	mov.w	r1, #0
 800482c:	6878      	ldr	r0, [r7, #4]
 800482e:	f7fc fc51 	bl	80010d4 <__aeabi_fcmple>
 8004832:	4603      	mov	r3, r0
 8004834:	2b00      	cmp	r3, #0
 8004836:	d001      	beq.n	800483c <calculate_Period4+0x1c>
		return 0;
 8004838:	2300      	movs	r3, #0
 800483a:	e02a      	b.n	8004892 <calculate_Period4+0x72>
	}
	float period=((72000000.0 / (frequency * (720-1)*1000.0)) - 1);
 800483c:	491a      	ldr	r1, [pc, #104]	; (80048a8 <calculate_Period4+0x88>)
 800483e:	6878      	ldr	r0, [r7, #4]
 8004840:	f7fc faa0 	bl	8000d84 <__aeabi_fmul>
 8004844:	4603      	mov	r3, r0
 8004846:	4618      	mov	r0, r3
 8004848:	f7fb fdee 	bl	8000428 <__aeabi_f2d>
 800484c:	f04f 0200 	mov.w	r2, #0
 8004850:	4b16      	ldr	r3, [pc, #88]	; (80048ac <calculate_Period4+0x8c>)
 8004852:	f7fb fe41 	bl	80004d8 <__aeabi_dmul>
 8004856:	4602      	mov	r2, r0
 8004858:	460b      	mov	r3, r1
 800485a:	a111      	add	r1, pc, #68	; (adr r1, 80048a0 <calculate_Period4+0x80>)
 800485c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004860:	f7fb ff64 	bl	800072c <__aeabi_ddiv>
 8004864:	4602      	mov	r2, r0
 8004866:	460b      	mov	r3, r1
 8004868:	4610      	mov	r0, r2
 800486a:	4619      	mov	r1, r3
 800486c:	f04f 0200 	mov.w	r2, #0
 8004870:	4b0f      	ldr	r3, [pc, #60]	; (80048b0 <calculate_Period4+0x90>)
 8004872:	f7fb fc79 	bl	8000168 <__aeabi_dsub>
 8004876:	4602      	mov	r2, r0
 8004878:	460b      	mov	r3, r1
 800487a:	4610      	mov	r0, r2
 800487c:	4619      	mov	r1, r3
 800487e:	f7fc f923 	bl	8000ac8 <__aeabi_d2f>
 8004882:	4603      	mov	r3, r0
 8004884:	60fb      	str	r3, [r7, #12]
	uint16_t period_u = float_to_uint16(period);
 8004886:	68f8      	ldr	r0, [r7, #12]
 8004888:	f000 f814 	bl	80048b4 <float_to_uint16>
 800488c:	4603      	mov	r3, r0
 800488e:	817b      	strh	r3, [r7, #10]
	return period_u;
 8004890:	897b      	ldrh	r3, [r7, #10]
}
 8004892:	4618      	mov	r0, r3
 8004894:	3710      	adds	r7, #16
 8004896:	46bd      	mov	sp, r7
 8004898:	bd80      	pop	{r7, pc}
 800489a:	bf00      	nop
 800489c:	f3af 8000 	nop.w
 80048a0:	00000000 	.word	0x00000000
 80048a4:	41912a88 	.word	0x41912a88
 80048a8:	4433c000 	.word	0x4433c000
 80048ac:	408f4000 	.word	0x408f4000
 80048b0:	3ff00000 	.word	0x3ff00000

080048b4 <float_to_uint16>:
uint16_t float_to_uint16(float number){
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b082      	sub	sp, #8
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
	 if (number < 0.0f) {
 80048bc:	f04f 0100 	mov.w	r1, #0
 80048c0:	6878      	ldr	r0, [r7, #4]
 80048c2:	f7fc fbfd 	bl	80010c0 <__aeabi_fcmplt>
 80048c6:	4603      	mov	r3, r0
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d001      	beq.n	80048d0 <float_to_uint16+0x1c>
	        return 0;
 80048cc:	2300      	movs	r3, #0
 80048ce:	e00e      	b.n	80048ee <float_to_uint16+0x3a>
	    } else if (number > 65535.0f) {
 80048d0:	4909      	ldr	r1, [pc, #36]	; (80048f8 <float_to_uint16+0x44>)
 80048d2:	6878      	ldr	r0, [r7, #4]
 80048d4:	f7fc fc12 	bl	80010fc <__aeabi_fcmpgt>
 80048d8:	4603      	mov	r3, r0
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d002      	beq.n	80048e4 <float_to_uint16+0x30>
	        return 65535;
 80048de:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80048e2:	e004      	b.n	80048ee <float_to_uint16+0x3a>
	    } else {
	        return (uint16_t)number;
 80048e4:	6878      	ldr	r0, [r7, #4]
 80048e6:	f7fc fc39 	bl	800115c <__aeabi_f2uiz>
 80048ea:	4603      	mov	r3, r0
 80048ec:	b29b      	uxth	r3, r3
	    }
}
 80048ee:	4618      	mov	r0, r3
 80048f0:	3708      	adds	r7, #8
 80048f2:	46bd      	mov	sp, r7
 80048f4:	bd80      	pop	{r7, pc}
 80048f6:	bf00      	nop
 80048f8:	477fff00 	.word	0x477fff00

080048fc <director>:
#include <var.h>
#include <define.h>

/*Hàm xác định chiều của 3 động cơ, nếu xung dương thì quay cùng chiều, xung âm thì quay ngược chiều */

void director(void){
 80048fc:	b580      	push	{r7, lr}
 80048fe:	af00      	add	r7, sp, #0

    if (xungmotor2 > 0) {
 8004900:	4b58      	ldr	r3, [pc, #352]	; (8004a64 <director+0x168>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	2b00      	cmp	r3, #0
 8004906:	dd0f      	ble.n	8004928 <director+0x2c>
        HAL_GPIO_WritePin(STEP2_PORT, STEP2_PIN, GPIO_PIN_RESET);
 8004908:	2200      	movs	r2, #0
 800490a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800490e:	4856      	ldr	r0, [pc, #344]	; (8004a68 <director+0x16c>)
 8004910:	f7fd fd2a 	bl	8002368 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(DIR2_PORT, DIR2_PIN, GPIO_PIN_SET);
 8004914:	2201      	movs	r2, #1
 8004916:	f44f 7100 	mov.w	r1, #512	; 0x200
 800491a:	4853      	ldr	r0, [pc, #332]	; (8004a68 <director+0x16c>)
 800491c:	f7fd fd24 	bl	8002368 <HAL_GPIO_WritePin>
        flag2 = 1;
 8004920:	4b52      	ldr	r3, [pc, #328]	; (8004a6c <director+0x170>)
 8004922:	2201      	movs	r2, #1
 8004924:	701a      	strb	r2, [r3, #0]
 8004926:	e017      	b.n	8004958 <director+0x5c>
    } else if (xungmotor2 < 0) {
 8004928:	4b4e      	ldr	r3, [pc, #312]	; (8004a64 <director+0x168>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	2b00      	cmp	r3, #0
 800492e:	da13      	bge.n	8004958 <director+0x5c>
        xungmotor2 = -xungmotor2;
 8004930:	4b4c      	ldr	r3, [pc, #304]	; (8004a64 <director+0x168>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	425b      	negs	r3, r3
 8004936:	4a4b      	ldr	r2, [pc, #300]	; (8004a64 <director+0x168>)
 8004938:	6013      	str	r3, [r2, #0]
        HAL_GPIO_WritePin(STEP2_PORT, STEP2_PIN, GPIO_PIN_RESET);
 800493a:	2200      	movs	r2, #0
 800493c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004940:	4849      	ldr	r0, [pc, #292]	; (8004a68 <director+0x16c>)
 8004942:	f7fd fd11 	bl	8002368 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(DIR2_PORT, DIR2_PIN, GPIO_PIN_RESET);
 8004946:	2200      	movs	r2, #0
 8004948:	f44f 7100 	mov.w	r1, #512	; 0x200
 800494c:	4846      	ldr	r0, [pc, #280]	; (8004a68 <director+0x16c>)
 800494e:	f7fd fd0b 	bl	8002368 <HAL_GPIO_WritePin>
        flag2 = 2;
 8004952:	4b46      	ldr	r3, [pc, #280]	; (8004a6c <director+0x170>)
 8004954:	2202      	movs	r2, #2
 8004956:	701a      	strb	r2, [r3, #0]
    }

    if (xungmotor3 > 0) {
 8004958:	4b45      	ldr	r3, [pc, #276]	; (8004a70 <director+0x174>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	2b00      	cmp	r3, #0
 800495e:	dd0f      	ble.n	8004980 <director+0x84>
        HAL_GPIO_WritePin(STEP3_PORT, STEP3_PIN, GPIO_PIN_RESET);
 8004960:	2200      	movs	r2, #0
 8004962:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004966:	4843      	ldr	r0, [pc, #268]	; (8004a74 <director+0x178>)
 8004968:	f7fd fcfe 	bl	8002368 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(DIR3_PORT, DIR3_PIN, GPIO_PIN_SET);
 800496c:	2201      	movs	r2, #1
 800496e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004972:	483d      	ldr	r0, [pc, #244]	; (8004a68 <director+0x16c>)
 8004974:	f7fd fcf8 	bl	8002368 <HAL_GPIO_WritePin>
        flag3 = 1;
 8004978:	4b3f      	ldr	r3, [pc, #252]	; (8004a78 <director+0x17c>)
 800497a:	2201      	movs	r2, #1
 800497c:	701a      	strb	r2, [r3, #0]
 800497e:	e017      	b.n	80049b0 <director+0xb4>
    } else if (xungmotor3 < 0) {
 8004980:	4b3b      	ldr	r3, [pc, #236]	; (8004a70 <director+0x174>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	2b00      	cmp	r3, #0
 8004986:	da13      	bge.n	80049b0 <director+0xb4>
        xungmotor3 = -xungmotor3;
 8004988:	4b39      	ldr	r3, [pc, #228]	; (8004a70 <director+0x174>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	425b      	negs	r3, r3
 800498e:	4a38      	ldr	r2, [pc, #224]	; (8004a70 <director+0x174>)
 8004990:	6013      	str	r3, [r2, #0]
        HAL_GPIO_WritePin(STEP3_PORT, STEP3_PIN, GPIO_PIN_RESET);
 8004992:	2200      	movs	r2, #0
 8004994:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004998:	4836      	ldr	r0, [pc, #216]	; (8004a74 <director+0x178>)
 800499a:	f7fd fce5 	bl	8002368 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(DIR3_PORT, DIR3_PIN, GPIO_PIN_RESET);
 800499e:	2200      	movs	r2, #0
 80049a0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80049a4:	4830      	ldr	r0, [pc, #192]	; (8004a68 <director+0x16c>)
 80049a6:	f7fd fcdf 	bl	8002368 <HAL_GPIO_WritePin>
        flag3 = 2;
 80049aa:	4b33      	ldr	r3, [pc, #204]	; (8004a78 <director+0x17c>)
 80049ac:	2202      	movs	r2, #2
 80049ae:	701a      	strb	r2, [r3, #0]
    }

    if (xungmotor4 > 0) {
 80049b0:	4b32      	ldr	r3, [pc, #200]	; (8004a7c <director+0x180>)
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	dd0d      	ble.n	80049d4 <director+0xd8>
        HAL_GPIO_WritePin(STEP4_PORT, STEP4_PIN, GPIO_PIN_RESET);
 80049b8:	2200      	movs	r2, #0
 80049ba:	2120      	movs	r1, #32
 80049bc:	482d      	ldr	r0, [pc, #180]	; (8004a74 <director+0x178>)
 80049be:	f7fd fcd3 	bl	8002368 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(DIR4_PORT, DIR4_PIN, GPIO_PIN_SET);
 80049c2:	2201      	movs	r2, #1
 80049c4:	2140      	movs	r1, #64	; 0x40
 80049c6:	482b      	ldr	r0, [pc, #172]	; (8004a74 <director+0x178>)
 80049c8:	f7fd fcce 	bl	8002368 <HAL_GPIO_WritePin>
        flag4 = 1;
 80049cc:	4b2c      	ldr	r3, [pc, #176]	; (8004a80 <director+0x184>)
 80049ce:	2201      	movs	r2, #1
 80049d0:	701a      	strb	r2, [r3, #0]
 80049d2:	e015      	b.n	8004a00 <director+0x104>
    } else if (xungmotor4 < 0) {
 80049d4:	4b29      	ldr	r3, [pc, #164]	; (8004a7c <director+0x180>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	da11      	bge.n	8004a00 <director+0x104>
        xungmotor4 = -xungmotor4;
 80049dc:	4b27      	ldr	r3, [pc, #156]	; (8004a7c <director+0x180>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	425b      	negs	r3, r3
 80049e2:	4a26      	ldr	r2, [pc, #152]	; (8004a7c <director+0x180>)
 80049e4:	6013      	str	r3, [r2, #0]
        HAL_GPIO_WritePin(STEP4_PORT, STEP4_PIN, GPIO_PIN_RESET);
 80049e6:	2200      	movs	r2, #0
 80049e8:	2120      	movs	r1, #32
 80049ea:	4822      	ldr	r0, [pc, #136]	; (8004a74 <director+0x178>)
 80049ec:	f7fd fcbc 	bl	8002368 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(DIR4_PORT, DIR4_PIN, GPIO_PIN_RESET);
 80049f0:	2200      	movs	r2, #0
 80049f2:	2140      	movs	r1, #64	; 0x40
 80049f4:	481f      	ldr	r0, [pc, #124]	; (8004a74 <director+0x178>)
 80049f6:	f7fd fcb7 	bl	8002368 <HAL_GPIO_WritePin>
        flag4 = 2;
 80049fa:	4b21      	ldr	r3, [pc, #132]	; (8004a80 <director+0x184>)
 80049fc:	2202      	movs	r2, #2
 80049fe:	701a      	strb	r2, [r3, #0]
    }

    biennho3 = (int)(targetSpeed3 / acceleration1);
 8004a00:	4b20      	ldr	r3, [pc, #128]	; (8004a84 <director+0x188>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4a20      	ldr	r2, [pc, #128]	; (8004a88 <director+0x18c>)
 8004a06:	6812      	ldr	r2, [r2, #0]
 8004a08:	4611      	mov	r1, r2
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	f7fc fa6e 	bl	8000eec <__aeabi_fdiv>
 8004a10:	4603      	mov	r3, r0
 8004a12:	4618      	mov	r0, r3
 8004a14:	f7fc fb7c 	bl	8001110 <__aeabi_f2iz>
 8004a18:	4603      	mov	r3, r0
 8004a1a:	461a      	mov	r2, r3
 8004a1c:	4b1b      	ldr	r3, [pc, #108]	; (8004a8c <director+0x190>)
 8004a1e:	601a      	str	r2, [r3, #0]
    biennho2 = (int)(targetSpeed2 / acceleration1);
 8004a20:	4b1b      	ldr	r3, [pc, #108]	; (8004a90 <director+0x194>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4a18      	ldr	r2, [pc, #96]	; (8004a88 <director+0x18c>)
 8004a26:	6812      	ldr	r2, [r2, #0]
 8004a28:	4611      	mov	r1, r2
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	f7fc fa5e 	bl	8000eec <__aeabi_fdiv>
 8004a30:	4603      	mov	r3, r0
 8004a32:	4618      	mov	r0, r3
 8004a34:	f7fc fb6c 	bl	8001110 <__aeabi_f2iz>
 8004a38:	4603      	mov	r3, r0
 8004a3a:	461a      	mov	r2, r3
 8004a3c:	4b15      	ldr	r3, [pc, #84]	; (8004a94 <director+0x198>)
 8004a3e:	601a      	str	r2, [r3, #0]
    biennho4 = (int)(targetSpeed4 / acceleration1);
 8004a40:	4b15      	ldr	r3, [pc, #84]	; (8004a98 <director+0x19c>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	4a10      	ldr	r2, [pc, #64]	; (8004a88 <director+0x18c>)
 8004a46:	6812      	ldr	r2, [r2, #0]
 8004a48:	4611      	mov	r1, r2
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	f7fc fa4e 	bl	8000eec <__aeabi_fdiv>
 8004a50:	4603      	mov	r3, r0
 8004a52:	4618      	mov	r0, r3
 8004a54:	f7fc fb5c 	bl	8001110 <__aeabi_f2iz>
 8004a58:	4603      	mov	r3, r0
 8004a5a:	461a      	mov	r2, r3
 8004a5c:	4b0f      	ldr	r3, [pc, #60]	; (8004a9c <director+0x1a0>)
 8004a5e:	601a      	str	r2, [r3, #0]
}
 8004a60:	bf00      	nop
 8004a62:	bd80      	pop	{r7, pc}
 8004a64:	20000478 	.word	0x20000478
 8004a68:	40010800 	.word	0x40010800
 8004a6c:	200003db 	.word	0x200003db
 8004a70:	2000047c 	.word	0x2000047c
 8004a74:	40010c00 	.word	0x40010c00
 8004a78:	200003dc 	.word	0x200003dc
 8004a7c:	20000480 	.word	0x20000480
 8004a80:	200003dd 	.word	0x200003dd
 8004a84:	2000001c 	.word	0x2000001c
 8004a88:	2000003c 	.word	0x2000003c
 8004a8c:	20000470 	.word	0x20000470
 8004a90:	20000018 	.word	0x20000018
 8004a94:	2000046c 	.word	0x2000046c
 8004a98:	20000020 	.word	0x20000020
 8004a9c:	20000474 	.word	0x20000474

08004aa0 <HAL_GPIO_EXTI_Callback>:
#include "exti_interrupt.h"
#include "body.h"

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b082      	sub	sp, #8
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	4603      	mov	r3, r0
 8004aa8:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == GPIO_PIN_1) {
 8004aaa:	88fb      	ldrh	r3, [r7, #6]
 8004aac:	2b02      	cmp	r3, #2
 8004aae:	d102      	bne.n	8004ab6 <HAL_GPIO_EXTI_Callback+0x16>
        Handle_GPIO_PIN_1();
 8004ab0:	f000 f84e 	bl	8004b50 <Handle_GPIO_PIN_1>
    } else if (GPIO_Pin == GPIO_PIN_6) {
        Handle_GPIO_PIN_6();
    } else if (GPIO_Pin == GPIO_PIN_7) {
        Handle_GPIO_PIN_7();
    }
}
 8004ab4:	e010      	b.n	8004ad8 <HAL_GPIO_EXTI_Callback+0x38>
    } else if (GPIO_Pin == GPIO_PIN_5) {
 8004ab6:	88fb      	ldrh	r3, [r7, #6]
 8004ab8:	2b20      	cmp	r3, #32
 8004aba:	d102      	bne.n	8004ac2 <HAL_GPIO_EXTI_Callback+0x22>
        Handle_GPIO_PIN_5();
 8004abc:	f000 f810 	bl	8004ae0 <Handle_GPIO_PIN_5>
}
 8004ac0:	e00a      	b.n	8004ad8 <HAL_GPIO_EXTI_Callback+0x38>
    } else if (GPIO_Pin == GPIO_PIN_6) {
 8004ac2:	88fb      	ldrh	r3, [r7, #6]
 8004ac4:	2b40      	cmp	r3, #64	; 0x40
 8004ac6:	d102      	bne.n	8004ace <HAL_GPIO_EXTI_Callback+0x2e>
        Handle_GPIO_PIN_6();
 8004ac8:	f000 f886 	bl	8004bd8 <Handle_GPIO_PIN_6>
}
 8004acc:	e004      	b.n	8004ad8 <HAL_GPIO_EXTI_Callback+0x38>
    } else if (GPIO_Pin == GPIO_PIN_7) {
 8004ace:	88fb      	ldrh	r3, [r7, #6]
 8004ad0:	2b80      	cmp	r3, #128	; 0x80
 8004ad2:	d101      	bne.n	8004ad8 <HAL_GPIO_EXTI_Callback+0x38>
        Handle_GPIO_PIN_7();
 8004ad4:	f000 f8b8 	bl	8004c48 <Handle_GPIO_PIN_7>
}
 8004ad8:	bf00      	nop
 8004ada:	3708      	adds	r7, #8
 8004adc:	46bd      	mov	sp, r7
 8004ade:	bd80      	pop	{r7, pc}

08004ae0 <Handle_GPIO_PIN_5>:

static void Handle_GPIO_PIN_5(void) {
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b0b4      	sub	sp, #208	; 0xd0
 8004ae4:	af00      	add	r7, sp, #0
	char buffer1234[200];
	sprintf(buffer1234, "ngatA5\n");
 8004ae6:	1d3b      	adds	r3, r7, #4
 8004ae8:	4915      	ldr	r1, [pc, #84]	; (8004b40 <Handle_GPIO_PIN_5+0x60>)
 8004aea:	4618      	mov	r0, r3
 8004aec:	f001 faae 	bl	800604c <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t *)buffer1234, strlen(buffer1234), HAL_MAX_DELAY);
 8004af0:	1d3b      	adds	r3, r7, #4
 8004af2:	4618      	mov	r0, r3
 8004af4:	f7fb fb2c 	bl	8000150 <strlen>
 8004af8:	4603      	mov	r3, r0
 8004afa:	b29a      	uxth	r2, r3
 8004afc:	1d39      	adds	r1, r7, #4
 8004afe:	f04f 33ff 	mov.w	r3, #4294967295
 8004b02:	4810      	ldr	r0, [pc, #64]	; (8004b44 <Handle_GPIO_PIN_5+0x64>)
 8004b04:	f7fe fcec 	bl	80034e0 <HAL_UART_Transmit>
	HAL_UART_AbortReceive(&huart2);
 8004b08:	480e      	ldr	r0, [pc, #56]	; (8004b44 <Handle_GPIO_PIN_5+0x64>)
 8004b0a:	f7fe fd91 	bl	8003630 <HAL_UART_AbortReceive>
	stop_motor();
 8004b0e:	f7ff fce1 	bl	80044d4 <stop_motor>
	for (int x=10000000; x>0;x--);
 8004b12:	4b0d      	ldr	r3, [pc, #52]	; (8004b48 <Handle_GPIO_PIN_5+0x68>)
 8004b14:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004b18:	e004      	b.n	8004b24 <Handle_GPIO_PIN_5+0x44>
 8004b1a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004b1e:	3b01      	subs	r3, #1
 8004b20:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004b24:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	dcf6      	bgt.n	8004b1a <Handle_GPIO_PIN_5+0x3a>
	__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_5);
 8004b2c:	4b07      	ldr	r3, [pc, #28]	; (8004b4c <Handle_GPIO_PIN_5+0x6c>)
 8004b2e:	2220      	movs	r2, #32
 8004b30:	615a      	str	r2, [r3, #20]
	HAL_NVIC_ClearPendingIRQ(EXTI9_5_IRQn);
 8004b32:	2017      	movs	r0, #23
 8004b34:	f7fd f9c7 	bl	8001ec6 <HAL_NVIC_ClearPendingIRQ>

}
 8004b38:	bf00      	nop
 8004b3a:	37d0      	adds	r7, #208	; 0xd0
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	bd80      	pop	{r7, pc}
 8004b40:	0800a46c 	.word	0x0800a46c
 8004b44:	20000350 	.word	0x20000350
 8004b48:	00989680 	.word	0x00989680
 8004b4c:	40010400 	.word	0x40010400

08004b50 <Handle_GPIO_PIN_1>:

static void Handle_GPIO_PIN_1(void) {
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b0b4      	sub	sp, #208	; 0xd0
 8004b54:	af00      	add	r7, sp, #0
	char bufferb4[200];
	sprintf(bufferb4, "ngatB1\n");
 8004b56:	1d3b      	adds	r3, r7, #4
 8004b58:	4919      	ldr	r1, [pc, #100]	; (8004bc0 <Handle_GPIO_PIN_1+0x70>)
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	f001 fa76 	bl	800604c <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t *)bufferb4, strlen(bufferb4), HAL_MAX_DELAY);
 8004b60:	1d3b      	adds	r3, r7, #4
 8004b62:	4618      	mov	r0, r3
 8004b64:	f7fb faf4 	bl	8000150 <strlen>
 8004b68:	4603      	mov	r3, r0
 8004b6a:	b29a      	uxth	r2, r3
 8004b6c:	1d39      	adds	r1, r7, #4
 8004b6e:	f04f 33ff 	mov.w	r3, #4294967295
 8004b72:	4814      	ldr	r0, [pc, #80]	; (8004bc4 <Handle_GPIO_PIN_1+0x74>)
 8004b74:	f7fe fcb4 	bl	80034e0 <HAL_UART_Transmit>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 8004b78:	2200      	movs	r2, #0
 8004b7a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004b7e:	4812      	ldr	r0, [pc, #72]	; (8004bc8 <Handle_GPIO_PIN_1+0x78>)
 8004b80:	f7fd fbf2 	bl	8002368 <HAL_GPIO_WritePin>
	HAL_UART_Receive_IT(&huart2, uartBuffer, 1);
 8004b84:	2201      	movs	r2, #1
 8004b86:	4911      	ldr	r1, [pc, #68]	; (8004bcc <Handle_GPIO_PIN_1+0x7c>)
 8004b88:	480e      	ldr	r0, [pc, #56]	; (8004bc4 <Handle_GPIO_PIN_1+0x74>)
 8004b8a:	f7fe fd2c 	bl	80035e6 <HAL_UART_Receive_IT>
	reset_EN();
 8004b8e:	f7ff fb73 	bl	8004278 <reset_EN>
	for (int x=5000000; x>0;x--);
 8004b92:	4b0f      	ldr	r3, [pc, #60]	; (8004bd0 <Handle_GPIO_PIN_1+0x80>)
 8004b94:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004b98:	e004      	b.n	8004ba4 <Handle_GPIO_PIN_1+0x54>
 8004b9a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004b9e:	3b01      	subs	r3, #1
 8004ba0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004ba4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	dcf6      	bgt.n	8004b9a <Handle_GPIO_PIN_1+0x4a>
	__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_1);
 8004bac:	4b09      	ldr	r3, [pc, #36]	; (8004bd4 <Handle_GPIO_PIN_1+0x84>)
 8004bae:	2202      	movs	r2, #2
 8004bb0:	615a      	str	r2, [r3, #20]
	HAL_NVIC_ClearPendingIRQ(EXTI1_IRQn);
 8004bb2:	2007      	movs	r0, #7
 8004bb4:	f7fd f987 	bl	8001ec6 <HAL_NVIC_ClearPendingIRQ>
}
 8004bb8:	bf00      	nop
 8004bba:	37d0      	adds	r7, #208	; 0xd0
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	bd80      	pop	{r7, pc}
 8004bc0:	0800a474 	.word	0x0800a474
 8004bc4:	20000350 	.word	0x20000350
 8004bc8:	40011000 	.word	0x40011000
 8004bcc:	200003e0 	.word	0x200003e0
 8004bd0:	004c4b40 	.word	0x004c4b40
 8004bd4:	40010400 	.word	0x40010400

08004bd8 <Handle_GPIO_PIN_6>:

static void Handle_GPIO_PIN_6(void) {
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b0b4      	sub	sp, #208	; 0xd0
 8004bdc:	af00      	add	r7, sp, #0
	char buffera5[200];
	sprintf(buffera5, "ngatA6\n");
 8004bde:	1d3b      	adds	r3, r7, #4
 8004be0:	4915      	ldr	r1, [pc, #84]	; (8004c38 <Handle_GPIO_PIN_6+0x60>)
 8004be2:	4618      	mov	r0, r3
 8004be4:	f001 fa32 	bl	800604c <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t *)buffera5, strlen(buffera5), HAL_MAX_DELAY);
 8004be8:	1d3b      	adds	r3, r7, #4
 8004bea:	4618      	mov	r0, r3
 8004bec:	f7fb fab0 	bl	8000150 <strlen>
 8004bf0:	4603      	mov	r3, r0
 8004bf2:	b29a      	uxth	r2, r3
 8004bf4:	1d39      	adds	r1, r7, #4
 8004bf6:	f04f 33ff 	mov.w	r3, #4294967295
 8004bfa:	4810      	ldr	r0, [pc, #64]	; (8004c3c <Handle_GPIO_PIN_6+0x64>)
 8004bfc:	f7fe fc70 	bl	80034e0 <HAL_UART_Transmit>
	HAL_UART_AbortReceive(&huart2);
 8004c00:	480e      	ldr	r0, [pc, #56]	; (8004c3c <Handle_GPIO_PIN_6+0x64>)
 8004c02:	f7fe fd15 	bl	8003630 <HAL_UART_AbortReceive>
	stop_motor();
 8004c06:	f7ff fc65 	bl	80044d4 <stop_motor>
	for (int x=10000000; x>0;x--);
 8004c0a:	4b0d      	ldr	r3, [pc, #52]	; (8004c40 <Handle_GPIO_PIN_6+0x68>)
 8004c0c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004c10:	e004      	b.n	8004c1c <Handle_GPIO_PIN_6+0x44>
 8004c12:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004c16:	3b01      	subs	r3, #1
 8004c18:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004c1c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	dcf6      	bgt.n	8004c12 <Handle_GPIO_PIN_6+0x3a>
	__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_6);
 8004c24:	4b07      	ldr	r3, [pc, #28]	; (8004c44 <Handle_GPIO_PIN_6+0x6c>)
 8004c26:	2240      	movs	r2, #64	; 0x40
 8004c28:	615a      	str	r2, [r3, #20]
	HAL_NVIC_ClearPendingIRQ(EXTI9_5_IRQn);
 8004c2a:	2017      	movs	r0, #23
 8004c2c:	f7fd f94b 	bl	8001ec6 <HAL_NVIC_ClearPendingIRQ>
}
 8004c30:	bf00      	nop
 8004c32:	37d0      	adds	r7, #208	; 0xd0
 8004c34:	46bd      	mov	sp, r7
 8004c36:	bd80      	pop	{r7, pc}
 8004c38:	0800a47c 	.word	0x0800a47c
 8004c3c:	20000350 	.word	0x20000350
 8004c40:	00989680 	.word	0x00989680
 8004c44:	40010400 	.word	0x40010400

08004c48 <Handle_GPIO_PIN_7>:

static void Handle_GPIO_PIN_7(void) {
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b0b4      	sub	sp, #208	; 0xd0
 8004c4c:	af00      	add	r7, sp, #0
	char buffera8[200];
	sprintf(buffera8, "ngatA7\n");
 8004c4e:	1d3b      	adds	r3, r7, #4
 8004c50:	4915      	ldr	r1, [pc, #84]	; (8004ca8 <Handle_GPIO_PIN_7+0x60>)
 8004c52:	4618      	mov	r0, r3
 8004c54:	f001 f9fa 	bl	800604c <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t *)buffera8, strlen(buffera8), HAL_MAX_DELAY);
 8004c58:	1d3b      	adds	r3, r7, #4
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	f7fb fa78 	bl	8000150 <strlen>
 8004c60:	4603      	mov	r3, r0
 8004c62:	b29a      	uxth	r2, r3
 8004c64:	1d39      	adds	r1, r7, #4
 8004c66:	f04f 33ff 	mov.w	r3, #4294967295
 8004c6a:	4810      	ldr	r0, [pc, #64]	; (8004cac <Handle_GPIO_PIN_7+0x64>)
 8004c6c:	f7fe fc38 	bl	80034e0 <HAL_UART_Transmit>
    HAL_UART_AbortReceive(&huart2);
 8004c70:	480e      	ldr	r0, [pc, #56]	; (8004cac <Handle_GPIO_PIN_7+0x64>)
 8004c72:	f7fe fcdd 	bl	8003630 <HAL_UART_AbortReceive>
    stop_motor();
 8004c76:	f7ff fc2d 	bl	80044d4 <stop_motor>
    for (int x=10000000; x>0;x--);
 8004c7a:	4b0d      	ldr	r3, [pc, #52]	; (8004cb0 <Handle_GPIO_PIN_7+0x68>)
 8004c7c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004c80:	e004      	b.n	8004c8c <Handle_GPIO_PIN_7+0x44>
 8004c82:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004c86:	3b01      	subs	r3, #1
 8004c88:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004c8c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	dcf6      	bgt.n	8004c82 <Handle_GPIO_PIN_7+0x3a>
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_7);
 8004c94:	4b07      	ldr	r3, [pc, #28]	; (8004cb4 <Handle_GPIO_PIN_7+0x6c>)
 8004c96:	2280      	movs	r2, #128	; 0x80
 8004c98:	615a      	str	r2, [r3, #20]
    HAL_NVIC_ClearPendingIRQ(EXTI9_5_IRQn);
 8004c9a:	2017      	movs	r0, #23
 8004c9c:	f7fd f913 	bl	8001ec6 <HAL_NVIC_ClearPendingIRQ>
}
 8004ca0:	bf00      	nop
 8004ca2:	37d0      	adds	r7, #208	; 0xd0
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	bd80      	pop	{r7, pc}
 8004ca8:	0800a484 	.word	0x0800a484
 8004cac:	20000350 	.word	0x20000350
 8004cb0:	00989680 	.word	0x00989680
 8004cb4:	40010400 	.word	0x40010400

08004cb8 <HAL_TIM_PeriodElapsedCallback>:
#include "var.h"
#include "body.h"
#include <string.h> // Add this line to include the declaration of strlen

/*Hàm ngắt Timer*/
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b082      	sub	sp, #8
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM1) {
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4a10      	ldr	r2, [pc, #64]	; (8004d08 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d102      	bne.n	8004cd0 <HAL_TIM_PeriodElapsedCallback+0x18>
        Handle_TIM1();
 8004cca:	f000 f823 	bl	8004d14 <Handle_TIM1>
    } else if (htim->Instance == TIM4) {
        Handle_TIM4();
    } else {

    }
}
 8004cce:	e016      	b.n	8004cfe <HAL_TIM_PeriodElapsedCallback+0x46>
    } else if (htim->Instance == TIM2) {
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cd8:	d102      	bne.n	8004ce0 <HAL_TIM_PeriodElapsedCallback+0x28>
        Handle_TIM2();
 8004cda:	f000 f82f 	bl	8004d3c <Handle_TIM2>
}
 8004cde:	e00e      	b.n	8004cfe <HAL_TIM_PeriodElapsedCallback+0x46>
    } else if (htim->Instance == TIM3) {
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	4a09      	ldr	r2, [pc, #36]	; (8004d0c <HAL_TIM_PeriodElapsedCallback+0x54>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d102      	bne.n	8004cf0 <HAL_TIM_PeriodElapsedCallback+0x38>
        Handle_TIM3();
 8004cea:	f000 f8dd 	bl	8004ea8 <Handle_TIM3>
}
 8004cee:	e006      	b.n	8004cfe <HAL_TIM_PeriodElapsedCallback+0x46>
    } else if (htim->Instance == TIM4) {
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4a06      	ldr	r2, [pc, #24]	; (8004d10 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d101      	bne.n	8004cfe <HAL_TIM_PeriodElapsedCallback+0x46>
        Handle_TIM4();
 8004cfa:	f000 f98d 	bl	8005018 <Handle_TIM4>
}
 8004cfe:	bf00      	nop
 8004d00:	3708      	adds	r7, #8
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bd80      	pop	{r7, pc}
 8004d06:	bf00      	nop
 8004d08:	40012c00 	.word	0x40012c00
 8004d0c:	40000400 	.word	0x40000400
 8004d10:	40000800 	.word	0x40000800

08004d14 <Handle_TIM1>:

void Handle_TIM1(void) {
 8004d14:	b580      	push	{r7, lr}
 8004d16:	af00      	add	r7, sp, #0
	// Logic cho Timer 1
	sta1 = sta1 + 1;
 8004d18:	4b06      	ldr	r3, [pc, #24]	; (8004d34 <Handle_TIM1+0x20>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	3301      	adds	r3, #1
 8004d1e:	4a05      	ldr	r2, [pc, #20]	; (8004d34 <Handle_TIM1+0x20>)
 8004d20:	6013      	str	r3, [r2, #0]
	sta2 = sta1*2;
 8004d22:	4b04      	ldr	r3, [pc, #16]	; (8004d34 <Handle_TIM1+0x20>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	005b      	lsls	r3, r3, #1
 8004d28:	4a03      	ldr	r2, [pc, #12]	; (8004d38 <Handle_TIM1+0x24>)
 8004d2a:	6013      	str	r3, [r2, #0]
	send_uart();
 8004d2c:	f7ff fc7c 	bl	8004628 <send_uart>
}
 8004d30:	bf00      	nop
 8004d32:	bd80      	pop	{r7, pc}
 8004d34:	2000000c 	.word	0x2000000c
 8004d38:	200003b8 	.word	0x200003b8

08004d3c <Handle_TIM2>:

void Handle_TIM2(void) {
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	af00      	add	r7, sp, #0
	 // Logic cho Timer 2
	 if (flag2 == 1) {current_position2 = current_position2 + 1;}
 8004d40:	4b4c      	ldr	r3, [pc, #304]	; (8004e74 <Handle_TIM2+0x138>)
 8004d42:	781b      	ldrb	r3, [r3, #0]
 8004d44:	2b01      	cmp	r3, #1
 8004d46:	d105      	bne.n	8004d54 <Handle_TIM2+0x18>
 8004d48:	4b4b      	ldr	r3, [pc, #300]	; (8004e78 <Handle_TIM2+0x13c>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	3301      	adds	r3, #1
 8004d4e:	4a4a      	ldr	r2, [pc, #296]	; (8004e78 <Handle_TIM2+0x13c>)
 8004d50:	6013      	str	r3, [r2, #0]
 8004d52:	e011      	b.n	8004d78 <Handle_TIM2+0x3c>
	 else if (flag2 == 2) {
 8004d54:	4b47      	ldr	r3, [pc, #284]	; (8004e74 <Handle_TIM2+0x138>)
 8004d56:	781b      	ldrb	r3, [r3, #0]
 8004d58:	2b02      	cmp	r3, #2
 8004d5a:	d10d      	bne.n	8004d78 <Handle_TIM2+0x3c>
	    if (current_position2 == 0) {current_position2 = current_position2 + 1;}
 8004d5c:	4b46      	ldr	r3, [pc, #280]	; (8004e78 <Handle_TIM2+0x13c>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d104      	bne.n	8004d6e <Handle_TIM2+0x32>
 8004d64:	4b44      	ldr	r3, [pc, #272]	; (8004e78 <Handle_TIM2+0x13c>)
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	3301      	adds	r3, #1
 8004d6a:	4a43      	ldr	r2, [pc, #268]	; (8004e78 <Handle_TIM2+0x13c>)
 8004d6c:	6013      	str	r3, [r2, #0]
	    current_position2 = current_position2 - 1;
 8004d6e:	4b42      	ldr	r3, [pc, #264]	; (8004e78 <Handle_TIM2+0x13c>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	3b01      	subs	r3, #1
 8004d74:	4a40      	ldr	r2, [pc, #256]	; (8004e78 <Handle_TIM2+0x13c>)
 8004d76:	6013      	str	r3, [r2, #0]
	  }
	 dem2 = dem2 + 1;
 8004d78:	4b40      	ldr	r3, [pc, #256]	; (8004e7c <Handle_TIM2+0x140>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	3301      	adds	r3, #1
 8004d7e:	4a3f      	ldr	r2, [pc, #252]	; (8004e7c <Handle_TIM2+0x140>)
 8004d80:	6013      	str	r3, [r2, #0]
	 HAL_GPIO_WritePin(STEP2_PORT, STEP2_PIN, 1);
 8004d82:	2201      	movs	r2, #1
 8004d84:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004d88:	483d      	ldr	r0, [pc, #244]	; (8004e80 <Handle_TIM2+0x144>)
 8004d8a:	f7fd faed 	bl	8002368 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(STEP2_PORT, STEP2_PIN, 0);
 8004d8e:	2200      	movs	r2, #0
 8004d90:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004d94:	483a      	ldr	r0, [pc, #232]	; (8004e80 <Handle_TIM2+0x144>)
 8004d96:	f7fd fae7 	bl	8002368 <HAL_GPIO_WritePin>
	 currentSpeed2 = currentSpeed2 + acceleration2;
 8004d9a:	4b3a      	ldr	r3, [pc, #232]	; (8004e84 <Handle_TIM2+0x148>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4a3a      	ldr	r2, [pc, #232]	; (8004e88 <Handle_TIM2+0x14c>)
 8004da0:	6812      	ldr	r2, [r2, #0]
 8004da2:	4611      	mov	r1, r2
 8004da4:	4618      	mov	r0, r3
 8004da6:	f7fb fee5 	bl	8000b74 <__addsf3>
 8004daa:	4603      	mov	r3, r0
 8004dac:	461a      	mov	r2, r3
 8004dae:	4b35      	ldr	r3, [pc, #212]	; (8004e84 <Handle_TIM2+0x148>)
 8004db0:	601a      	str	r2, [r3, #0]
	 if (currentSpeed2 >= targetSpeed2) {currentSpeed2 = targetSpeed2;}
 8004db2:	4b34      	ldr	r3, [pc, #208]	; (8004e84 <Handle_TIM2+0x148>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4a35      	ldr	r2, [pc, #212]	; (8004e8c <Handle_TIM2+0x150>)
 8004db8:	6812      	ldr	r2, [r2, #0]
 8004dba:	4611      	mov	r1, r2
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	f7fc f993 	bl	80010e8 <__aeabi_fcmpge>
 8004dc2:	4603      	mov	r3, r0
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d003      	beq.n	8004dd0 <Handle_TIM2+0x94>
 8004dc8:	4b30      	ldr	r3, [pc, #192]	; (8004e8c <Handle_TIM2+0x150>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4a2d      	ldr	r2, [pc, #180]	; (8004e84 <Handle_TIM2+0x148>)
 8004dce:	6013      	str	r3, [r2, #0]
	 period2 = calculate_Period2(currentSpeed2);
 8004dd0:	4b2c      	ldr	r3, [pc, #176]	; (8004e84 <Handle_TIM2+0x148>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	f7ff fc8b 	bl	80046f0 <calculate_Period2>
 8004dda:	4603      	mov	r3, r0
 8004ddc:	461a      	mov	r2, r3
 8004dde:	4b2c      	ldr	r3, [pc, #176]	; (8004e90 <Handle_TIM2+0x154>)
 8004de0:	801a      	strh	r2, [r3, #0]
	 TIM2->ARR = period2;
 8004de2:	4b2b      	ldr	r3, [pc, #172]	; (8004e90 <Handle_TIM2+0x154>)
 8004de4:	881a      	ldrh	r2, [r3, #0]
 8004de6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004dea:	62da      	str	r2, [r3, #44]	; 0x2c
	 if (xungmotor2 > (biennho2 * 2)) {
 8004dec:	4b29      	ldr	r3, [pc, #164]	; (8004e94 <Handle_TIM2+0x158>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	005b      	lsls	r3, r3, #1
 8004df2:	4a29      	ldr	r2, [pc, #164]	; (8004e98 <Handle_TIM2+0x15c>)
 8004df4:	6812      	ldr	r2, [r2, #0]
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d212      	bcs.n	8004e20 <Handle_TIM2+0xe4>
	    if (dem2 >= ((int)(xungmotor2 - (biennho2 - 100)))) {acceleration2 = -acceleration1;}
 8004dfa:	4b27      	ldr	r3, [pc, #156]	; (8004e98 <Handle_TIM2+0x15c>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	461a      	mov	r2, r3
 8004e00:	4b24      	ldr	r3, [pc, #144]	; (8004e94 <Handle_TIM2+0x158>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	1ad3      	subs	r3, r2, r3
 8004e06:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8004e0a:	4b1c      	ldr	r3, [pc, #112]	; (8004e7c <Handle_TIM2+0x140>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	429a      	cmp	r2, r3
 8004e10:	d822      	bhi.n	8004e58 <Handle_TIM2+0x11c>
 8004e12:	4b22      	ldr	r3, [pc, #136]	; (8004e9c <Handle_TIM2+0x160>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8004e1a:	4a1b      	ldr	r2, [pc, #108]	; (8004e88 <Handle_TIM2+0x14c>)
 8004e1c:	6013      	str	r3, [r2, #0]
 8004e1e:	e01b      	b.n	8004e58 <Handle_TIM2+0x11c>
	 } else if (xungmotor2 > 0) {
 8004e20:	4b1d      	ldr	r3, [pc, #116]	; (8004e98 <Handle_TIM2+0x15c>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	dd17      	ble.n	8004e58 <Handle_TIM2+0x11c>
	    if (dem2 <= (biennho2 * 2)) {
 8004e28:	4b1a      	ldr	r3, [pc, #104]	; (8004e94 <Handle_TIM2+0x158>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	005a      	lsls	r2, r3, #1
 8004e2e:	4b13      	ldr	r3, [pc, #76]	; (8004e7c <Handle_TIM2+0x140>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	429a      	cmp	r2, r3
 8004e34:	d310      	bcc.n	8004e58 <Handle_TIM2+0x11c>
	    	if (dem2 >= ((int)((xungmotor2 / 2) + 100))) {acceleration2 = -acceleration1;}
 8004e36:	4b18      	ldr	r3, [pc, #96]	; (8004e98 <Handle_TIM2+0x15c>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	0fda      	lsrs	r2, r3, #31
 8004e3c:	4413      	add	r3, r2
 8004e3e:	105b      	asrs	r3, r3, #1
 8004e40:	3364      	adds	r3, #100	; 0x64
 8004e42:	461a      	mov	r2, r3
 8004e44:	4b0d      	ldr	r3, [pc, #52]	; (8004e7c <Handle_TIM2+0x140>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	429a      	cmp	r2, r3
 8004e4a:	d805      	bhi.n	8004e58 <Handle_TIM2+0x11c>
 8004e4c:	4b13      	ldr	r3, [pc, #76]	; (8004e9c <Handle_TIM2+0x160>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8004e54:	4a0c      	ldr	r2, [pc, #48]	; (8004e88 <Handle_TIM2+0x14c>)
 8004e56:	6013      	str	r3, [r2, #0]
	     }
	 }
	 if (dem2 >= (xungmotor2)) {
 8004e58:	4b08      	ldr	r3, [pc, #32]	; (8004e7c <Handle_TIM2+0x140>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	4a0e      	ldr	r2, [pc, #56]	; (8004e98 <Handle_TIM2+0x15c>)
 8004e5e:	6812      	ldr	r2, [r2, #0]
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d305      	bcc.n	8004e70 <Handle_TIM2+0x134>
	     isTimerInterrupt2 = 1;
 8004e64:	4b0e      	ldr	r3, [pc, #56]	; (8004ea0 <Handle_TIM2+0x164>)
 8004e66:	2201      	movs	r2, #1
 8004e68:	701a      	strb	r2, [r3, #0]
	     HAL_TIM_Base_Stop_IT(&htim2);
 8004e6a:	480e      	ldr	r0, [pc, #56]	; (8004ea4 <Handle_TIM2+0x168>)
 8004e6c:	f7fd ff5e 	bl	8002d2c <HAL_TIM_Base_Stop_IT>
	 }
}
 8004e70:	bf00      	nop
 8004e72:	bd80      	pop	{r7, pc}
 8004e74:	200003db 	.word	0x200003db
 8004e78:	200003c0 	.word	0x200003c0
 8004e7c:	200003cc 	.word	0x200003cc
 8004e80:	40010800 	.word	0x40010800
 8004e84:	20000460 	.word	0x20000460
 8004e88:	20000034 	.word	0x20000034
 8004e8c:	20000018 	.word	0x20000018
 8004e90:	20000010 	.word	0x20000010
 8004e94:	2000046c 	.word	0x2000046c
 8004e98:	20000478 	.word	0x20000478
 8004e9c:	2000003c 	.word	0x2000003c
 8004ea0:	200003d8 	.word	0x200003d8
 8004ea4:	20000278 	.word	0x20000278

08004ea8 <Handle_TIM3>:

void Handle_TIM3(void) {
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	af00      	add	r7, sp, #0
	 // Logic cho Timer 3
	if (flag3 == 1) {current_position3 += 1;}
 8004eac:	4b4c      	ldr	r3, [pc, #304]	; (8004fe0 <Handle_TIM3+0x138>)
 8004eae:	781b      	ldrb	r3, [r3, #0]
 8004eb0:	2b01      	cmp	r3, #1
 8004eb2:	d105      	bne.n	8004ec0 <Handle_TIM3+0x18>
 8004eb4:	4b4b      	ldr	r3, [pc, #300]	; (8004fe4 <Handle_TIM3+0x13c>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	3301      	adds	r3, #1
 8004eba:	4a4a      	ldr	r2, [pc, #296]	; (8004fe4 <Handle_TIM3+0x13c>)
 8004ebc:	6013      	str	r3, [r2, #0]
 8004ebe:	e011      	b.n	8004ee4 <Handle_TIM3+0x3c>
	else if (flag3 == 2) {
 8004ec0:	4b47      	ldr	r3, [pc, #284]	; (8004fe0 <Handle_TIM3+0x138>)
 8004ec2:	781b      	ldrb	r3, [r3, #0]
 8004ec4:	2b02      	cmp	r3, #2
 8004ec6:	d10d      	bne.n	8004ee4 <Handle_TIM3+0x3c>
	  if (current_position3 == 0) {current_position3 = current_position3 + 1;}
 8004ec8:	4b46      	ldr	r3, [pc, #280]	; (8004fe4 <Handle_TIM3+0x13c>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d104      	bne.n	8004eda <Handle_TIM3+0x32>
 8004ed0:	4b44      	ldr	r3, [pc, #272]	; (8004fe4 <Handle_TIM3+0x13c>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	3301      	adds	r3, #1
 8004ed6:	4a43      	ldr	r2, [pc, #268]	; (8004fe4 <Handle_TIM3+0x13c>)
 8004ed8:	6013      	str	r3, [r2, #0]
	     current_position3 =current_position3-1;
 8004eda:	4b42      	ldr	r3, [pc, #264]	; (8004fe4 <Handle_TIM3+0x13c>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	3b01      	subs	r3, #1
 8004ee0:	4a40      	ldr	r2, [pc, #256]	; (8004fe4 <Handle_TIM3+0x13c>)
 8004ee2:	6013      	str	r3, [r2, #0]
	  }
	 dem3 = dem3 + 1;
 8004ee4:	4b40      	ldr	r3, [pc, #256]	; (8004fe8 <Handle_TIM3+0x140>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	3301      	adds	r3, #1
 8004eea:	4a3f      	ldr	r2, [pc, #252]	; (8004fe8 <Handle_TIM3+0x140>)
 8004eec:	6013      	str	r3, [r2, #0]
	 HAL_GPIO_WritePin(STEP3_PORT, STEP3_PIN, 1);
 8004eee:	2201      	movs	r2, #1
 8004ef0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004ef4:	483d      	ldr	r0, [pc, #244]	; (8004fec <Handle_TIM3+0x144>)
 8004ef6:	f7fd fa37 	bl	8002368 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(STEP3_PORT, STEP3_PIN, 0);
 8004efa:	2200      	movs	r2, #0
 8004efc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004f00:	483a      	ldr	r0, [pc, #232]	; (8004fec <Handle_TIM3+0x144>)
 8004f02:	f7fd fa31 	bl	8002368 <HAL_GPIO_WritePin>
	 currentSpeed3 = currentSpeed3 + acceleration3;
 8004f06:	4b3a      	ldr	r3, [pc, #232]	; (8004ff0 <Handle_TIM3+0x148>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4a3a      	ldr	r2, [pc, #232]	; (8004ff4 <Handle_TIM3+0x14c>)
 8004f0c:	6812      	ldr	r2, [r2, #0]
 8004f0e:	4611      	mov	r1, r2
 8004f10:	4618      	mov	r0, r3
 8004f12:	f7fb fe2f 	bl	8000b74 <__addsf3>
 8004f16:	4603      	mov	r3, r0
 8004f18:	461a      	mov	r2, r3
 8004f1a:	4b35      	ldr	r3, [pc, #212]	; (8004ff0 <Handle_TIM3+0x148>)
 8004f1c:	601a      	str	r2, [r3, #0]
	 if (currentSpeed3 >= targetSpeed3) {currentSpeed3 = targetSpeed3;}
 8004f1e:	4b34      	ldr	r3, [pc, #208]	; (8004ff0 <Handle_TIM3+0x148>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	4a35      	ldr	r2, [pc, #212]	; (8004ff8 <Handle_TIM3+0x150>)
 8004f24:	6812      	ldr	r2, [r2, #0]
 8004f26:	4611      	mov	r1, r2
 8004f28:	4618      	mov	r0, r3
 8004f2a:	f7fc f8dd 	bl	80010e8 <__aeabi_fcmpge>
 8004f2e:	4603      	mov	r3, r0
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d003      	beq.n	8004f3c <Handle_TIM3+0x94>
 8004f34:	4b30      	ldr	r3, [pc, #192]	; (8004ff8 <Handle_TIM3+0x150>)
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4a2d      	ldr	r2, [pc, #180]	; (8004ff0 <Handle_TIM3+0x148>)
 8004f3a:	6013      	str	r3, [r2, #0]
	 period3 = calculate_Period3(currentSpeed3);
 8004f3c:	4b2c      	ldr	r3, [pc, #176]	; (8004ff0 <Handle_TIM3+0x148>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4618      	mov	r0, r3
 8004f42:	f7ff fc21 	bl	8004788 <calculate_Period3>
 8004f46:	4603      	mov	r3, r0
 8004f48:	461a      	mov	r2, r3
 8004f4a:	4b2c      	ldr	r3, [pc, #176]	; (8004ffc <Handle_TIM3+0x154>)
 8004f4c:	801a      	strh	r2, [r3, #0]
	 TIM3->ARR = period3;
 8004f4e:	4b2b      	ldr	r3, [pc, #172]	; (8004ffc <Handle_TIM3+0x154>)
 8004f50:	881a      	ldrh	r2, [r3, #0]
 8004f52:	4b2b      	ldr	r3, [pc, #172]	; (8005000 <Handle_TIM3+0x158>)
 8004f54:	62da      	str	r2, [r3, #44]	; 0x2c
	 if (xungmotor3 > (biennho3 * 2)) {
 8004f56:	4b2b      	ldr	r3, [pc, #172]	; (8005004 <Handle_TIM3+0x15c>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	005b      	lsls	r3, r3, #1
 8004f5c:	4a2a      	ldr	r2, [pc, #168]	; (8005008 <Handle_TIM3+0x160>)
 8004f5e:	6812      	ldr	r2, [r2, #0]
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d212      	bcs.n	8004f8a <Handle_TIM3+0xe2>
	   if (dem3 >= ((int)(xungmotor3 - (biennho3 - 100)))) {acceleration3 = -acceleration1;}
 8004f64:	4b28      	ldr	r3, [pc, #160]	; (8005008 <Handle_TIM3+0x160>)
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	461a      	mov	r2, r3
 8004f6a:	4b26      	ldr	r3, [pc, #152]	; (8005004 <Handle_TIM3+0x15c>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	1ad3      	subs	r3, r2, r3
 8004f70:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8004f74:	4b1c      	ldr	r3, [pc, #112]	; (8004fe8 <Handle_TIM3+0x140>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	429a      	cmp	r2, r3
 8004f7a:	d822      	bhi.n	8004fc2 <Handle_TIM3+0x11a>
 8004f7c:	4b23      	ldr	r3, [pc, #140]	; (800500c <Handle_TIM3+0x164>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8004f84:	4a1b      	ldr	r2, [pc, #108]	; (8004ff4 <Handle_TIM3+0x14c>)
 8004f86:	6013      	str	r3, [r2, #0]
 8004f88:	e01b      	b.n	8004fc2 <Handle_TIM3+0x11a>
	   } else if (xungmotor3 > 0) {
 8004f8a:	4b1f      	ldr	r3, [pc, #124]	; (8005008 <Handle_TIM3+0x160>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	dd17      	ble.n	8004fc2 <Handle_TIM3+0x11a>
	      if (dem3 <= (biennho3 * 2)) {
 8004f92:	4b1c      	ldr	r3, [pc, #112]	; (8005004 <Handle_TIM3+0x15c>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	005a      	lsls	r2, r3, #1
 8004f98:	4b13      	ldr	r3, [pc, #76]	; (8004fe8 <Handle_TIM3+0x140>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	429a      	cmp	r2, r3
 8004f9e:	d310      	bcc.n	8004fc2 <Handle_TIM3+0x11a>
	        if (dem3 >= ((int)((xungmotor3 / 2) + 100))) {acceleration3 = -acceleration1;}
 8004fa0:	4b19      	ldr	r3, [pc, #100]	; (8005008 <Handle_TIM3+0x160>)
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	0fda      	lsrs	r2, r3, #31
 8004fa6:	4413      	add	r3, r2
 8004fa8:	105b      	asrs	r3, r3, #1
 8004faa:	3364      	adds	r3, #100	; 0x64
 8004fac:	461a      	mov	r2, r3
 8004fae:	4b0e      	ldr	r3, [pc, #56]	; (8004fe8 <Handle_TIM3+0x140>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	429a      	cmp	r2, r3
 8004fb4:	d805      	bhi.n	8004fc2 <Handle_TIM3+0x11a>
 8004fb6:	4b15      	ldr	r3, [pc, #84]	; (800500c <Handle_TIM3+0x164>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8004fbe:	4a0d      	ldr	r2, [pc, #52]	; (8004ff4 <Handle_TIM3+0x14c>)
 8004fc0:	6013      	str	r3, [r2, #0]
	     }
	  }
	  if (dem3 >= (xungmotor3)) {
 8004fc2:	4b09      	ldr	r3, [pc, #36]	; (8004fe8 <Handle_TIM3+0x140>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	4a10      	ldr	r2, [pc, #64]	; (8005008 <Handle_TIM3+0x160>)
 8004fc8:	6812      	ldr	r2, [r2, #0]
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d305      	bcc.n	8004fda <Handle_TIM3+0x132>
	     isTimerInterrupt3 = 1;
 8004fce:	4b10      	ldr	r3, [pc, #64]	; (8005010 <Handle_TIM3+0x168>)
 8004fd0:	2201      	movs	r2, #1
 8004fd2:	701a      	strb	r2, [r3, #0]
	     HAL_TIM_Base_Stop_IT(&htim3);
 8004fd4:	480f      	ldr	r0, [pc, #60]	; (8005014 <Handle_TIM3+0x16c>)
 8004fd6:	f7fd fea9 	bl	8002d2c <HAL_TIM_Base_Stop_IT>
	  }
}
 8004fda:	bf00      	nop
 8004fdc:	bd80      	pop	{r7, pc}
 8004fde:	bf00      	nop
 8004fe0:	200003dc 	.word	0x200003dc
 8004fe4:	200003c4 	.word	0x200003c4
 8004fe8:	200003d0 	.word	0x200003d0
 8004fec:	40010c00 	.word	0x40010c00
 8004ff0:	20000464 	.word	0x20000464
 8004ff4:	20000038 	.word	0x20000038
 8004ff8:	2000001c 	.word	0x2000001c
 8004ffc:	20000012 	.word	0x20000012
 8005000:	40000400 	.word	0x40000400
 8005004:	20000470 	.word	0x20000470
 8005008:	2000047c 	.word	0x2000047c
 800500c:	2000003c 	.word	0x2000003c
 8005010:	200003d9 	.word	0x200003d9
 8005014:	200002c0 	.word	0x200002c0

08005018 <Handle_TIM4>:

void Handle_TIM4(void) {
 8005018:	b580      	push	{r7, lr}
 800501a:	af00      	add	r7, sp, #0
	 // Logic cho Timer 4
	 if (flag4 == 1) {current_position4 = current_position4 + 1;}
 800501c:	4b4b      	ldr	r3, [pc, #300]	; (800514c <Handle_TIM4+0x134>)
 800501e:	781b      	ldrb	r3, [r3, #0]
 8005020:	2b01      	cmp	r3, #1
 8005022:	d105      	bne.n	8005030 <Handle_TIM4+0x18>
 8005024:	4b4a      	ldr	r3, [pc, #296]	; (8005150 <Handle_TIM4+0x138>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	3301      	adds	r3, #1
 800502a:	4a49      	ldr	r2, [pc, #292]	; (8005150 <Handle_TIM4+0x138>)
 800502c:	6013      	str	r3, [r2, #0]
 800502e:	e011      	b.n	8005054 <Handle_TIM4+0x3c>
	 else if (flag4 == 2) {
 8005030:	4b46      	ldr	r3, [pc, #280]	; (800514c <Handle_TIM4+0x134>)
 8005032:	781b      	ldrb	r3, [r3, #0]
 8005034:	2b02      	cmp	r3, #2
 8005036:	d10d      	bne.n	8005054 <Handle_TIM4+0x3c>
	     if (current_position4 == 0) {current_position4 = current_position4 + 1;}
 8005038:	4b45      	ldr	r3, [pc, #276]	; (8005150 <Handle_TIM4+0x138>)
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d104      	bne.n	800504a <Handle_TIM4+0x32>
 8005040:	4b43      	ldr	r3, [pc, #268]	; (8005150 <Handle_TIM4+0x138>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	3301      	adds	r3, #1
 8005046:	4a42      	ldr	r2, [pc, #264]	; (8005150 <Handle_TIM4+0x138>)
 8005048:	6013      	str	r3, [r2, #0]
	     current_position4 = current_position4 - 1;
 800504a:	4b41      	ldr	r3, [pc, #260]	; (8005150 <Handle_TIM4+0x138>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	3b01      	subs	r3, #1
 8005050:	4a3f      	ldr	r2, [pc, #252]	; (8005150 <Handle_TIM4+0x138>)
 8005052:	6013      	str	r3, [r2, #0]
	 }
	 dem4 = dem4 + 1;
 8005054:	4b3f      	ldr	r3, [pc, #252]	; (8005154 <Handle_TIM4+0x13c>)
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	3301      	adds	r3, #1
 800505a:	4a3e      	ldr	r2, [pc, #248]	; (8005154 <Handle_TIM4+0x13c>)
 800505c:	6013      	str	r3, [r2, #0]
	 HAL_GPIO_WritePin(STEP4_PORT, STEP4_PIN, 1);
 800505e:	2201      	movs	r2, #1
 8005060:	2120      	movs	r1, #32
 8005062:	483d      	ldr	r0, [pc, #244]	; (8005158 <Handle_TIM4+0x140>)
 8005064:	f7fd f980 	bl	8002368 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(STEP4_PORT, STEP4_PIN, 0);
 8005068:	2200      	movs	r2, #0
 800506a:	2120      	movs	r1, #32
 800506c:	483a      	ldr	r0, [pc, #232]	; (8005158 <Handle_TIM4+0x140>)
 800506e:	f7fd f97b 	bl	8002368 <HAL_GPIO_WritePin>
	 currentSpeed4 = currentSpeed4 + acceleration4;
 8005072:	4b3a      	ldr	r3, [pc, #232]	; (800515c <Handle_TIM4+0x144>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4a3a      	ldr	r2, [pc, #232]	; (8005160 <Handle_TIM4+0x148>)
 8005078:	6812      	ldr	r2, [r2, #0]
 800507a:	4611      	mov	r1, r2
 800507c:	4618      	mov	r0, r3
 800507e:	f7fb fd79 	bl	8000b74 <__addsf3>
 8005082:	4603      	mov	r3, r0
 8005084:	461a      	mov	r2, r3
 8005086:	4b35      	ldr	r3, [pc, #212]	; (800515c <Handle_TIM4+0x144>)
 8005088:	601a      	str	r2, [r3, #0]
	 if (currentSpeed4 >= targetSpeed4) {currentSpeed4 = targetSpeed4;}
 800508a:	4b34      	ldr	r3, [pc, #208]	; (800515c <Handle_TIM4+0x144>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4a35      	ldr	r2, [pc, #212]	; (8005164 <Handle_TIM4+0x14c>)
 8005090:	6812      	ldr	r2, [r2, #0]
 8005092:	4611      	mov	r1, r2
 8005094:	4618      	mov	r0, r3
 8005096:	f7fc f827 	bl	80010e8 <__aeabi_fcmpge>
 800509a:	4603      	mov	r3, r0
 800509c:	2b00      	cmp	r3, #0
 800509e:	d003      	beq.n	80050a8 <Handle_TIM4+0x90>
 80050a0:	4b30      	ldr	r3, [pc, #192]	; (8005164 <Handle_TIM4+0x14c>)
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4a2d      	ldr	r2, [pc, #180]	; (800515c <Handle_TIM4+0x144>)
 80050a6:	6013      	str	r3, [r2, #0]
	    period4 = calculate_Period4(currentSpeed4);
 80050a8:	4b2c      	ldr	r3, [pc, #176]	; (800515c <Handle_TIM4+0x144>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4618      	mov	r0, r3
 80050ae:	f7ff fbb7 	bl	8004820 <calculate_Period4>
 80050b2:	4603      	mov	r3, r0
 80050b4:	461a      	mov	r2, r3
 80050b6:	4b2c      	ldr	r3, [pc, #176]	; (8005168 <Handle_TIM4+0x150>)
 80050b8:	801a      	strh	r2, [r3, #0]
	    TIM4->ARR = period4;
 80050ba:	4b2b      	ldr	r3, [pc, #172]	; (8005168 <Handle_TIM4+0x150>)
 80050bc:	881a      	ldrh	r2, [r3, #0]
 80050be:	4b2b      	ldr	r3, [pc, #172]	; (800516c <Handle_TIM4+0x154>)
 80050c0:	62da      	str	r2, [r3, #44]	; 0x2c
	 if (xungmotor4 > (biennho4 * 2)) {
 80050c2:	4b2b      	ldr	r3, [pc, #172]	; (8005170 <Handle_TIM4+0x158>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	005b      	lsls	r3, r3, #1
 80050c8:	4a2a      	ldr	r2, [pc, #168]	; (8005174 <Handle_TIM4+0x15c>)
 80050ca:	6812      	ldr	r2, [r2, #0]
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d212      	bcs.n	80050f6 <Handle_TIM4+0xde>
	    if (dem4 >= ((int)(xungmotor4 - (biennho4 - 100)))) {acceleration4 = -acceleration1;}
 80050d0:	4b28      	ldr	r3, [pc, #160]	; (8005174 <Handle_TIM4+0x15c>)
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	461a      	mov	r2, r3
 80050d6:	4b26      	ldr	r3, [pc, #152]	; (8005170 <Handle_TIM4+0x158>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	1ad3      	subs	r3, r2, r3
 80050dc:	f103 0264 	add.w	r2, r3, #100	; 0x64
 80050e0:	4b1c      	ldr	r3, [pc, #112]	; (8005154 <Handle_TIM4+0x13c>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	429a      	cmp	r2, r3
 80050e6:	d822      	bhi.n	800512e <Handle_TIM4+0x116>
 80050e8:	4b23      	ldr	r3, [pc, #140]	; (8005178 <Handle_TIM4+0x160>)
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80050f0:	4a1b      	ldr	r2, [pc, #108]	; (8005160 <Handle_TIM4+0x148>)
 80050f2:	6013      	str	r3, [r2, #0]
 80050f4:	e01b      	b.n	800512e <Handle_TIM4+0x116>
	 } else if (xungmotor4 > 0) {
 80050f6:	4b1f      	ldr	r3, [pc, #124]	; (8005174 <Handle_TIM4+0x15c>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	dd17      	ble.n	800512e <Handle_TIM4+0x116>
	    if (dem4 <= (biennho4 * 2)) {
 80050fe:	4b1c      	ldr	r3, [pc, #112]	; (8005170 <Handle_TIM4+0x158>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	005a      	lsls	r2, r3, #1
 8005104:	4b13      	ldr	r3, [pc, #76]	; (8005154 <Handle_TIM4+0x13c>)
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	429a      	cmp	r2, r3
 800510a:	d310      	bcc.n	800512e <Handle_TIM4+0x116>
	      if (dem4 >= ((int)((xungmotor4 / 2) + 100))) {acceleration4 = -acceleration1;}
 800510c:	4b19      	ldr	r3, [pc, #100]	; (8005174 <Handle_TIM4+0x15c>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	0fda      	lsrs	r2, r3, #31
 8005112:	4413      	add	r3, r2
 8005114:	105b      	asrs	r3, r3, #1
 8005116:	3364      	adds	r3, #100	; 0x64
 8005118:	461a      	mov	r2, r3
 800511a:	4b0e      	ldr	r3, [pc, #56]	; (8005154 <Handle_TIM4+0x13c>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	429a      	cmp	r2, r3
 8005120:	d805      	bhi.n	800512e <Handle_TIM4+0x116>
 8005122:	4b15      	ldr	r3, [pc, #84]	; (8005178 <Handle_TIM4+0x160>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800512a:	4a0d      	ldr	r2, [pc, #52]	; (8005160 <Handle_TIM4+0x148>)
 800512c:	6013      	str	r3, [r2, #0]
	    }
	 }
	 if (dem4 >= (xungmotor4)) {
 800512e:	4b09      	ldr	r3, [pc, #36]	; (8005154 <Handle_TIM4+0x13c>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	4a10      	ldr	r2, [pc, #64]	; (8005174 <Handle_TIM4+0x15c>)
 8005134:	6812      	ldr	r2, [r2, #0]
 8005136:	4293      	cmp	r3, r2
 8005138:	d305      	bcc.n	8005146 <Handle_TIM4+0x12e>
	    isTimerInterrupt4 = 1;
 800513a:	4b10      	ldr	r3, [pc, #64]	; (800517c <Handle_TIM4+0x164>)
 800513c:	2201      	movs	r2, #1
 800513e:	701a      	strb	r2, [r3, #0]
	    HAL_TIM_Base_Stop_IT(&htim4);
 8005140:	480f      	ldr	r0, [pc, #60]	; (8005180 <Handle_TIM4+0x168>)
 8005142:	f7fd fdf3 	bl	8002d2c <HAL_TIM_Base_Stop_IT>
	 }
}
 8005146:	bf00      	nop
 8005148:	bd80      	pop	{r7, pc}
 800514a:	bf00      	nop
 800514c:	200003dd 	.word	0x200003dd
 8005150:	200003c8 	.word	0x200003c8
 8005154:	200003d4 	.word	0x200003d4
 8005158:	40010c00 	.word	0x40010c00
 800515c:	20000468 	.word	0x20000468
 8005160:	20000030 	.word	0x20000030
 8005164:	20000020 	.word	0x20000020
 8005168:	20000014 	.word	0x20000014
 800516c:	40000800 	.word	0x40000800
 8005170:	20000474 	.word	0x20000474
 8005174:	20000480 	.word	0x20000480
 8005178:	2000003c 	.word	0x2000003c
 800517c:	200003da 	.word	0x200003da
 8005180:	20000308 	.word	0x20000308

08005184 <HAL_UART_RxCpltCallback>:
extern TIM_HandleTypeDef htim3;
extern TIM_HandleTypeDef htim4;

// Định nghĩa hàm callback ngắt UART

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8005184:	b580      	push	{r7, lr}
 8005186:	b084      	sub	sp, #16
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART2) {
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4a4c      	ldr	r2, [pc, #304]	; (80052c4 <HAL_UART_RxCpltCallback+0x140>)
 8005192:	4293      	cmp	r3, r2
 8005194:	f040 8091 	bne.w	80052ba <HAL_UART_RxCpltCallback+0x136>
        static int numbersIndex = 0;
        static char numberBuffer[20];
        if (uartBuffer[0] == 'a') {
 8005198:	4b4b      	ldr	r3, [pc, #300]	; (80052c8 <HAL_UART_RxCpltCallback+0x144>)
 800519a:	781b      	ldrb	r3, [r3, #0]
 800519c:	2b61      	cmp	r3, #97	; 0x61
 800519e:	d102      	bne.n	80051a6 <HAL_UART_RxCpltCallback+0x22>
            bufferIndex = 0;
 80051a0:	4b4a      	ldr	r3, [pc, #296]	; (80052cc <HAL_UART_RxCpltCallback+0x148>)
 80051a2:	2200      	movs	r2, #0
 80051a4:	701a      	strb	r2, [r3, #0]
        }
        uartBuffer[bufferIndex] = uartBuffer[0];
 80051a6:	4b49      	ldr	r3, [pc, #292]	; (80052cc <HAL_UART_RxCpltCallback+0x148>)
 80051a8:	781b      	ldrb	r3, [r3, #0]
 80051aa:	461a      	mov	r2, r3
 80051ac:	4b46      	ldr	r3, [pc, #280]	; (80052c8 <HAL_UART_RxCpltCallback+0x144>)
 80051ae:	7819      	ldrb	r1, [r3, #0]
 80051b0:	4b45      	ldr	r3, [pc, #276]	; (80052c8 <HAL_UART_RxCpltCallback+0x144>)
 80051b2:	5499      	strb	r1, [r3, r2]
        bufferIndex++;
 80051b4:	4b45      	ldr	r3, [pc, #276]	; (80052cc <HAL_UART_RxCpltCallback+0x148>)
 80051b6:	781b      	ldrb	r3, [r3, #0]
 80051b8:	3301      	adds	r3, #1
 80051ba:	b2da      	uxtb	r2, r3
 80051bc:	4b43      	ldr	r3, [pc, #268]	; (80052cc <HAL_UART_RxCpltCallback+0x148>)
 80051be:	701a      	strb	r2, [r3, #0]
        if (uartBuffer[bufferIndex - 1] == 'z') {
 80051c0:	4b42      	ldr	r3, [pc, #264]	; (80052cc <HAL_UART_RxCpltCallback+0x148>)
 80051c2:	781b      	ldrb	r3, [r3, #0]
 80051c4:	3b01      	subs	r3, #1
 80051c6:	4a40      	ldr	r2, [pc, #256]	; (80052c8 <HAL_UART_RxCpltCallback+0x144>)
 80051c8:	5cd3      	ldrb	r3, [r2, r3]
 80051ca:	2b7a      	cmp	r3, #122	; 0x7a
 80051cc:	d163      	bne.n	8005296 <HAL_UART_RxCpltCallback+0x112>
            int i = 0;
 80051ce:	2300      	movs	r3, #0
 80051d0:	60fb      	str	r3, [r7, #12]
            int j = 0;
 80051d2:	2300      	movs	r3, #0
 80051d4:	60bb      	str	r3, [r7, #8]
            while (i < bufferIndex) {
 80051d6:	e02b      	b.n	8005230 <HAL_UART_RxCpltCallback+0xac>
                if (uartBuffer[i] == 'n') {
 80051d8:	4a3b      	ldr	r2, [pc, #236]	; (80052c8 <HAL_UART_RxCpltCallback+0x144>)
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	4413      	add	r3, r2
 80051de:	781b      	ldrb	r3, [r3, #0]
 80051e0:	2b6e      	cmp	r3, #110	; 0x6e
 80051e2:	d116      	bne.n	8005212 <HAL_UART_RxCpltCallback+0x8e>
                    numberBuffer[j] = '\0';
 80051e4:	4a3a      	ldr	r2, [pc, #232]	; (80052d0 <HAL_UART_RxCpltCallback+0x14c>)
 80051e6:	68bb      	ldr	r3, [r7, #8]
 80051e8:	4413      	add	r3, r2
 80051ea:	2200      	movs	r2, #0
 80051ec:	701a      	strb	r2, [r3, #0]
                    sscanf(numberBuffer, "%f", &numbers[numbersIndex]);
 80051ee:	4b39      	ldr	r3, [pc, #228]	; (80052d4 <HAL_UART_RxCpltCallback+0x150>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	009b      	lsls	r3, r3, #2
 80051f4:	4a38      	ldr	r2, [pc, #224]	; (80052d8 <HAL_UART_RxCpltCallback+0x154>)
 80051f6:	4413      	add	r3, r2
 80051f8:	461a      	mov	r2, r3
 80051fa:	4938      	ldr	r1, [pc, #224]	; (80052dc <HAL_UART_RxCpltCallback+0x158>)
 80051fc:	4834      	ldr	r0, [pc, #208]	; (80052d0 <HAL_UART_RxCpltCallback+0x14c>)
 80051fe:	f000 ff45 	bl	800608c <siscanf>
                    numbersIndex++;
 8005202:	4b34      	ldr	r3, [pc, #208]	; (80052d4 <HAL_UART_RxCpltCallback+0x150>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	3301      	adds	r3, #1
 8005208:	4a32      	ldr	r2, [pc, #200]	; (80052d4 <HAL_UART_RxCpltCallback+0x150>)
 800520a:	6013      	str	r3, [r2, #0]
                    j = 0;
 800520c:	2300      	movs	r3, #0
 800520e:	60bb      	str	r3, [r7, #8]
 8005210:	e00b      	b.n	800522a <HAL_UART_RxCpltCallback+0xa6>
                } else {
                    numberBuffer[j] = uartBuffer[i];
 8005212:	4a2d      	ldr	r2, [pc, #180]	; (80052c8 <HAL_UART_RxCpltCallback+0x144>)
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	4413      	add	r3, r2
 8005218:	7819      	ldrb	r1, [r3, #0]
 800521a:	4a2d      	ldr	r2, [pc, #180]	; (80052d0 <HAL_UART_RxCpltCallback+0x14c>)
 800521c:	68bb      	ldr	r3, [r7, #8]
 800521e:	4413      	add	r3, r2
 8005220:	460a      	mov	r2, r1
 8005222:	701a      	strb	r2, [r3, #0]
                    j++;
 8005224:	68bb      	ldr	r3, [r7, #8]
 8005226:	3301      	adds	r3, #1
 8005228:	60bb      	str	r3, [r7, #8]
                }
                i++;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	3301      	adds	r3, #1
 800522e:	60fb      	str	r3, [r7, #12]
            while (i < bufferIndex) {
 8005230:	4b26      	ldr	r3, [pc, #152]	; (80052cc <HAL_UART_RxCpltCallback+0x148>)
 8005232:	781b      	ldrb	r3, [r3, #0]
 8005234:	461a      	mov	r2, r3
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	4293      	cmp	r3, r2
 800523a:	dbcd      	blt.n	80051d8 <HAL_UART_RxCpltCallback+0x54>
            }
            bufferIndex = 0;
 800523c:	4b23      	ldr	r3, [pc, #140]	; (80052cc <HAL_UART_RxCpltCallback+0x148>)
 800523e:	2200      	movs	r2, #0
 8005240:	701a      	strb	r2, [r3, #0]
            numbersIndex = 0;
 8005242:	4b24      	ldr	r3, [pc, #144]	; (80052d4 <HAL_UART_RxCpltCallback+0x150>)
 8005244:	2200      	movs	r2, #0
 8005246:	601a      	str	r2, [r3, #0]
            pre_xungmotor2 = numbers[1];
 8005248:	4b23      	ldr	r3, [pc, #140]	; (80052d8 <HAL_UART_RxCpltCallback+0x154>)
 800524a:	685b      	ldr	r3, [r3, #4]
 800524c:	4618      	mov	r0, r3
 800524e:	f7fb ff5f 	bl	8001110 <__aeabi_f2iz>
 8005252:	4603      	mov	r3, r0
 8005254:	4a22      	ldr	r2, [pc, #136]	; (80052e0 <HAL_UART_RxCpltCallback+0x15c>)
 8005256:	6013      	str	r3, [r2, #0]
            pre_targetSpeed2 = numbers[2];
 8005258:	4b1f      	ldr	r3, [pc, #124]	; (80052d8 <HAL_UART_RxCpltCallback+0x154>)
 800525a:	689b      	ldr	r3, [r3, #8]
 800525c:	4a21      	ldr	r2, [pc, #132]	; (80052e4 <HAL_UART_RxCpltCallback+0x160>)
 800525e:	6013      	str	r3, [r2, #0]
            pre_xungmotor3 = numbers[3];
 8005260:	4b1d      	ldr	r3, [pc, #116]	; (80052d8 <HAL_UART_RxCpltCallback+0x154>)
 8005262:	68db      	ldr	r3, [r3, #12]
 8005264:	4618      	mov	r0, r3
 8005266:	f7fb ff53 	bl	8001110 <__aeabi_f2iz>
 800526a:	4603      	mov	r3, r0
 800526c:	4a1e      	ldr	r2, [pc, #120]	; (80052e8 <HAL_UART_RxCpltCallback+0x164>)
 800526e:	6013      	str	r3, [r2, #0]
            pre_targetSpeed3 = numbers[4];
 8005270:	4b19      	ldr	r3, [pc, #100]	; (80052d8 <HAL_UART_RxCpltCallback+0x154>)
 8005272:	691b      	ldr	r3, [r3, #16]
 8005274:	4a1d      	ldr	r2, [pc, #116]	; (80052ec <HAL_UART_RxCpltCallback+0x168>)
 8005276:	6013      	str	r3, [r2, #0]
            pre_xungmotor4 = numbers[5];
 8005278:	4b17      	ldr	r3, [pc, #92]	; (80052d8 <HAL_UART_RxCpltCallback+0x154>)
 800527a:	695b      	ldr	r3, [r3, #20]
 800527c:	4618      	mov	r0, r3
 800527e:	f7fb ff47 	bl	8001110 <__aeabi_f2iz>
 8005282:	4603      	mov	r3, r0
 8005284:	4a1a      	ldr	r2, [pc, #104]	; (80052f0 <HAL_UART_RxCpltCallback+0x16c>)
 8005286:	6013      	str	r3, [r2, #0]
            pre_targetSpeed4 = numbers[6];
 8005288:	4b13      	ldr	r3, [pc, #76]	; (80052d8 <HAL_UART_RxCpltCallback+0x154>)
 800528a:	699b      	ldr	r3, [r3, #24]
 800528c:	4a19      	ldr	r2, [pc, #100]	; (80052f4 <HAL_UART_RxCpltCallback+0x170>)
 800528e:	6013      	str	r3, [r2, #0]
            ngatuart = 1;
 8005290:	4b19      	ldr	r3, [pc, #100]	; (80052f8 <HAL_UART_RxCpltCallback+0x174>)
 8005292:	2201      	movs	r2, #1
 8005294:	701a      	strb	r2, [r3, #0]
        }
        if (bufferIndex >= UART_BUFFER_SIZE) {
 8005296:	4b0d      	ldr	r3, [pc, #52]	; (80052cc <HAL_UART_RxCpltCallback+0x148>)
 8005298:	781b      	ldrb	r3, [r3, #0]
 800529a:	2b63      	cmp	r3, #99	; 0x63
 800529c:	d902      	bls.n	80052a4 <HAL_UART_RxCpltCallback+0x120>
            bufferIndex = 0; // Reset buffer index
 800529e:	4b0b      	ldr	r3, [pc, #44]	; (80052cc <HAL_UART_RxCpltCallback+0x148>)
 80052a0:	2200      	movs	r2, #0
 80052a2:	701a      	strb	r2, [r3, #0]
        }
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80052a4:	2201      	movs	r2, #1
 80052a6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80052aa:	4814      	ldr	r0, [pc, #80]	; (80052fc <HAL_UART_RxCpltCallback+0x178>)
 80052ac:	f7fd f85c 	bl	8002368 <HAL_GPIO_WritePin>
        HAL_UART_Receive_IT(&huart2, uartBuffer, 1);
 80052b0:	2201      	movs	r2, #1
 80052b2:	4905      	ldr	r1, [pc, #20]	; (80052c8 <HAL_UART_RxCpltCallback+0x144>)
 80052b4:	4812      	ldr	r0, [pc, #72]	; (8005300 <HAL_UART_RxCpltCallback+0x17c>)
 80052b6:	f7fe f996 	bl	80035e6 <HAL_UART_Receive_IT>
    }
}
 80052ba:	bf00      	nop
 80052bc:	3710      	adds	r7, #16
 80052be:	46bd      	mov	sp, r7
 80052c0:	bd80      	pop	{r7, pc}
 80052c2:	bf00      	nop
 80052c4:	40004400 	.word	0x40004400
 80052c8:	200003e0 	.word	0x200003e0
 80052cc:	200003be 	.word	0x200003be
 80052d0:	200003a0 	.word	0x200003a0
 80052d4:	200003b4 	.word	0x200003b4
 80052d8:	20000444 	.word	0x20000444
 80052dc:	0800a48c 	.word	0x0800a48c
 80052e0:	20000484 	.word	0x20000484
 80052e4:	20000024 	.word	0x20000024
 80052e8:	20000488 	.word	0x20000488
 80052ec:	20000028 	.word	0x20000028
 80052f0:	2000048c 	.word	0x2000048c
 80052f4:	2000002c 	.word	0x2000002c
 80052f8:	200003bd 	.word	0x200003bd
 80052fc:	40011000 	.word	0x40011000
 8005300:	20000350 	.word	0x20000350

08005304 <__errno>:
 8005304:	4b01      	ldr	r3, [pc, #4]	; (800530c <__errno+0x8>)
 8005306:	6818      	ldr	r0, [r3, #0]
 8005308:	4770      	bx	lr
 800530a:	bf00      	nop
 800530c:	20000040 	.word	0x20000040

08005310 <__libc_init_array>:
 8005310:	b570      	push	{r4, r5, r6, lr}
 8005312:	2600      	movs	r6, #0
 8005314:	4d0c      	ldr	r5, [pc, #48]	; (8005348 <__libc_init_array+0x38>)
 8005316:	4c0d      	ldr	r4, [pc, #52]	; (800534c <__libc_init_array+0x3c>)
 8005318:	1b64      	subs	r4, r4, r5
 800531a:	10a4      	asrs	r4, r4, #2
 800531c:	42a6      	cmp	r6, r4
 800531e:	d109      	bne.n	8005334 <__libc_init_array+0x24>
 8005320:	f005 f886 	bl	800a430 <_init>
 8005324:	2600      	movs	r6, #0
 8005326:	4d0a      	ldr	r5, [pc, #40]	; (8005350 <__libc_init_array+0x40>)
 8005328:	4c0a      	ldr	r4, [pc, #40]	; (8005354 <__libc_init_array+0x44>)
 800532a:	1b64      	subs	r4, r4, r5
 800532c:	10a4      	asrs	r4, r4, #2
 800532e:	42a6      	cmp	r6, r4
 8005330:	d105      	bne.n	800533e <__libc_init_array+0x2e>
 8005332:	bd70      	pop	{r4, r5, r6, pc}
 8005334:	f855 3b04 	ldr.w	r3, [r5], #4
 8005338:	4798      	blx	r3
 800533a:	3601      	adds	r6, #1
 800533c:	e7ee      	b.n	800531c <__libc_init_array+0xc>
 800533e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005342:	4798      	blx	r3
 8005344:	3601      	adds	r6, #1
 8005346:	e7f2      	b.n	800532e <__libc_init_array+0x1e>
 8005348:	0800a984 	.word	0x0800a984
 800534c:	0800a984 	.word	0x0800a984
 8005350:	0800a984 	.word	0x0800a984
 8005354:	0800a988 	.word	0x0800a988

08005358 <memset>:
 8005358:	4603      	mov	r3, r0
 800535a:	4402      	add	r2, r0
 800535c:	4293      	cmp	r3, r2
 800535e:	d100      	bne.n	8005362 <memset+0xa>
 8005360:	4770      	bx	lr
 8005362:	f803 1b01 	strb.w	r1, [r3], #1
 8005366:	e7f9      	b.n	800535c <memset+0x4>

08005368 <__cvt>:
 8005368:	2b00      	cmp	r3, #0
 800536a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800536e:	461f      	mov	r7, r3
 8005370:	bfbb      	ittet	lt
 8005372:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8005376:	461f      	movlt	r7, r3
 8005378:	2300      	movge	r3, #0
 800537a:	232d      	movlt	r3, #45	; 0x2d
 800537c:	b088      	sub	sp, #32
 800537e:	4614      	mov	r4, r2
 8005380:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005382:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8005384:	7013      	strb	r3, [r2, #0]
 8005386:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005388:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800538c:	f023 0820 	bic.w	r8, r3, #32
 8005390:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005394:	d005      	beq.n	80053a2 <__cvt+0x3a>
 8005396:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800539a:	d100      	bne.n	800539e <__cvt+0x36>
 800539c:	3501      	adds	r5, #1
 800539e:	2302      	movs	r3, #2
 80053a0:	e000      	b.n	80053a4 <__cvt+0x3c>
 80053a2:	2303      	movs	r3, #3
 80053a4:	aa07      	add	r2, sp, #28
 80053a6:	9204      	str	r2, [sp, #16]
 80053a8:	aa06      	add	r2, sp, #24
 80053aa:	e9cd a202 	strd	sl, r2, [sp, #8]
 80053ae:	e9cd 3500 	strd	r3, r5, [sp]
 80053b2:	4622      	mov	r2, r4
 80053b4:	463b      	mov	r3, r7
 80053b6:	f001 fe17 	bl	8006fe8 <_dtoa_r>
 80053ba:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80053be:	4606      	mov	r6, r0
 80053c0:	d102      	bne.n	80053c8 <__cvt+0x60>
 80053c2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80053c4:	07db      	lsls	r3, r3, #31
 80053c6:	d522      	bpl.n	800540e <__cvt+0xa6>
 80053c8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80053cc:	eb06 0905 	add.w	r9, r6, r5
 80053d0:	d110      	bne.n	80053f4 <__cvt+0x8c>
 80053d2:	7833      	ldrb	r3, [r6, #0]
 80053d4:	2b30      	cmp	r3, #48	; 0x30
 80053d6:	d10a      	bne.n	80053ee <__cvt+0x86>
 80053d8:	2200      	movs	r2, #0
 80053da:	2300      	movs	r3, #0
 80053dc:	4620      	mov	r0, r4
 80053de:	4639      	mov	r1, r7
 80053e0:	f7fb fae2 	bl	80009a8 <__aeabi_dcmpeq>
 80053e4:	b918      	cbnz	r0, 80053ee <__cvt+0x86>
 80053e6:	f1c5 0501 	rsb	r5, r5, #1
 80053ea:	f8ca 5000 	str.w	r5, [sl]
 80053ee:	f8da 3000 	ldr.w	r3, [sl]
 80053f2:	4499      	add	r9, r3
 80053f4:	2200      	movs	r2, #0
 80053f6:	2300      	movs	r3, #0
 80053f8:	4620      	mov	r0, r4
 80053fa:	4639      	mov	r1, r7
 80053fc:	f7fb fad4 	bl	80009a8 <__aeabi_dcmpeq>
 8005400:	b108      	cbz	r0, 8005406 <__cvt+0x9e>
 8005402:	f8cd 901c 	str.w	r9, [sp, #28]
 8005406:	2230      	movs	r2, #48	; 0x30
 8005408:	9b07      	ldr	r3, [sp, #28]
 800540a:	454b      	cmp	r3, r9
 800540c:	d307      	bcc.n	800541e <__cvt+0xb6>
 800540e:	4630      	mov	r0, r6
 8005410:	9b07      	ldr	r3, [sp, #28]
 8005412:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005414:	1b9b      	subs	r3, r3, r6
 8005416:	6013      	str	r3, [r2, #0]
 8005418:	b008      	add	sp, #32
 800541a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800541e:	1c59      	adds	r1, r3, #1
 8005420:	9107      	str	r1, [sp, #28]
 8005422:	701a      	strb	r2, [r3, #0]
 8005424:	e7f0      	b.n	8005408 <__cvt+0xa0>

08005426 <__exponent>:
 8005426:	4603      	mov	r3, r0
 8005428:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800542a:	2900      	cmp	r1, #0
 800542c:	f803 2b02 	strb.w	r2, [r3], #2
 8005430:	bfb6      	itet	lt
 8005432:	222d      	movlt	r2, #45	; 0x2d
 8005434:	222b      	movge	r2, #43	; 0x2b
 8005436:	4249      	neglt	r1, r1
 8005438:	2909      	cmp	r1, #9
 800543a:	7042      	strb	r2, [r0, #1]
 800543c:	dd2b      	ble.n	8005496 <__exponent+0x70>
 800543e:	f10d 0407 	add.w	r4, sp, #7
 8005442:	46a4      	mov	ip, r4
 8005444:	270a      	movs	r7, #10
 8005446:	fb91 f6f7 	sdiv	r6, r1, r7
 800544a:	460a      	mov	r2, r1
 800544c:	46a6      	mov	lr, r4
 800544e:	fb07 1516 	mls	r5, r7, r6, r1
 8005452:	2a63      	cmp	r2, #99	; 0x63
 8005454:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8005458:	4631      	mov	r1, r6
 800545a:	f104 34ff 	add.w	r4, r4, #4294967295
 800545e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005462:	dcf0      	bgt.n	8005446 <__exponent+0x20>
 8005464:	3130      	adds	r1, #48	; 0x30
 8005466:	f1ae 0502 	sub.w	r5, lr, #2
 800546a:	f804 1c01 	strb.w	r1, [r4, #-1]
 800546e:	4629      	mov	r1, r5
 8005470:	1c44      	adds	r4, r0, #1
 8005472:	4561      	cmp	r1, ip
 8005474:	d30a      	bcc.n	800548c <__exponent+0x66>
 8005476:	f10d 0209 	add.w	r2, sp, #9
 800547a:	eba2 020e 	sub.w	r2, r2, lr
 800547e:	4565      	cmp	r5, ip
 8005480:	bf88      	it	hi
 8005482:	2200      	movhi	r2, #0
 8005484:	4413      	add	r3, r2
 8005486:	1a18      	subs	r0, r3, r0
 8005488:	b003      	add	sp, #12
 800548a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800548c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005490:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005494:	e7ed      	b.n	8005472 <__exponent+0x4c>
 8005496:	2330      	movs	r3, #48	; 0x30
 8005498:	3130      	adds	r1, #48	; 0x30
 800549a:	7083      	strb	r3, [r0, #2]
 800549c:	70c1      	strb	r1, [r0, #3]
 800549e:	1d03      	adds	r3, r0, #4
 80054a0:	e7f1      	b.n	8005486 <__exponent+0x60>
	...

080054a4 <_printf_float>:
 80054a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054a8:	b091      	sub	sp, #68	; 0x44
 80054aa:	460c      	mov	r4, r1
 80054ac:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80054b0:	4616      	mov	r6, r2
 80054b2:	461f      	mov	r7, r3
 80054b4:	4605      	mov	r5, r0
 80054b6:	f002 feeb 	bl	8008290 <_localeconv_r>
 80054ba:	6803      	ldr	r3, [r0, #0]
 80054bc:	4618      	mov	r0, r3
 80054be:	9309      	str	r3, [sp, #36]	; 0x24
 80054c0:	f7fa fe46 	bl	8000150 <strlen>
 80054c4:	2300      	movs	r3, #0
 80054c6:	930e      	str	r3, [sp, #56]	; 0x38
 80054c8:	f8d8 3000 	ldr.w	r3, [r8]
 80054cc:	900a      	str	r0, [sp, #40]	; 0x28
 80054ce:	3307      	adds	r3, #7
 80054d0:	f023 0307 	bic.w	r3, r3, #7
 80054d4:	f103 0208 	add.w	r2, r3, #8
 80054d8:	f894 9018 	ldrb.w	r9, [r4, #24]
 80054dc:	f8d4 b000 	ldr.w	fp, [r4]
 80054e0:	f8c8 2000 	str.w	r2, [r8]
 80054e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054e8:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80054ec:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 80054f0:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80054f4:	930b      	str	r3, [sp, #44]	; 0x2c
 80054f6:	f04f 32ff 	mov.w	r2, #4294967295
 80054fa:	4640      	mov	r0, r8
 80054fc:	4b9c      	ldr	r3, [pc, #624]	; (8005770 <_printf_float+0x2cc>)
 80054fe:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005500:	f7fb fa84 	bl	8000a0c <__aeabi_dcmpun>
 8005504:	bb70      	cbnz	r0, 8005564 <_printf_float+0xc0>
 8005506:	f04f 32ff 	mov.w	r2, #4294967295
 800550a:	4640      	mov	r0, r8
 800550c:	4b98      	ldr	r3, [pc, #608]	; (8005770 <_printf_float+0x2cc>)
 800550e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005510:	f7fb fa5e 	bl	80009d0 <__aeabi_dcmple>
 8005514:	bb30      	cbnz	r0, 8005564 <_printf_float+0xc0>
 8005516:	2200      	movs	r2, #0
 8005518:	2300      	movs	r3, #0
 800551a:	4640      	mov	r0, r8
 800551c:	4651      	mov	r1, sl
 800551e:	f7fb fa4d 	bl	80009bc <__aeabi_dcmplt>
 8005522:	b110      	cbz	r0, 800552a <_printf_float+0x86>
 8005524:	232d      	movs	r3, #45	; 0x2d
 8005526:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800552a:	4b92      	ldr	r3, [pc, #584]	; (8005774 <_printf_float+0x2d0>)
 800552c:	4892      	ldr	r0, [pc, #584]	; (8005778 <_printf_float+0x2d4>)
 800552e:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8005532:	bf94      	ite	ls
 8005534:	4698      	movls	r8, r3
 8005536:	4680      	movhi	r8, r0
 8005538:	2303      	movs	r3, #3
 800553a:	f04f 0a00 	mov.w	sl, #0
 800553e:	6123      	str	r3, [r4, #16]
 8005540:	f02b 0304 	bic.w	r3, fp, #4
 8005544:	6023      	str	r3, [r4, #0]
 8005546:	4633      	mov	r3, r6
 8005548:	4621      	mov	r1, r4
 800554a:	4628      	mov	r0, r5
 800554c:	9700      	str	r7, [sp, #0]
 800554e:	aa0f      	add	r2, sp, #60	; 0x3c
 8005550:	f000 f9d4 	bl	80058fc <_printf_common>
 8005554:	3001      	adds	r0, #1
 8005556:	f040 8090 	bne.w	800567a <_printf_float+0x1d6>
 800555a:	f04f 30ff 	mov.w	r0, #4294967295
 800555e:	b011      	add	sp, #68	; 0x44
 8005560:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005564:	4642      	mov	r2, r8
 8005566:	4653      	mov	r3, sl
 8005568:	4640      	mov	r0, r8
 800556a:	4651      	mov	r1, sl
 800556c:	f7fb fa4e 	bl	8000a0c <__aeabi_dcmpun>
 8005570:	b148      	cbz	r0, 8005586 <_printf_float+0xe2>
 8005572:	f1ba 0f00 	cmp.w	sl, #0
 8005576:	bfb8      	it	lt
 8005578:	232d      	movlt	r3, #45	; 0x2d
 800557a:	4880      	ldr	r0, [pc, #512]	; (800577c <_printf_float+0x2d8>)
 800557c:	bfb8      	it	lt
 800557e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005582:	4b7f      	ldr	r3, [pc, #508]	; (8005780 <_printf_float+0x2dc>)
 8005584:	e7d3      	b.n	800552e <_printf_float+0x8a>
 8005586:	6863      	ldr	r3, [r4, #4]
 8005588:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800558c:	1c5a      	adds	r2, r3, #1
 800558e:	d142      	bne.n	8005616 <_printf_float+0x172>
 8005590:	2306      	movs	r3, #6
 8005592:	6063      	str	r3, [r4, #4]
 8005594:	2200      	movs	r2, #0
 8005596:	9206      	str	r2, [sp, #24]
 8005598:	aa0e      	add	r2, sp, #56	; 0x38
 800559a:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800559e:	aa0d      	add	r2, sp, #52	; 0x34
 80055a0:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 80055a4:	9203      	str	r2, [sp, #12]
 80055a6:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80055aa:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80055ae:	6023      	str	r3, [r4, #0]
 80055b0:	6863      	ldr	r3, [r4, #4]
 80055b2:	4642      	mov	r2, r8
 80055b4:	9300      	str	r3, [sp, #0]
 80055b6:	4628      	mov	r0, r5
 80055b8:	4653      	mov	r3, sl
 80055ba:	910b      	str	r1, [sp, #44]	; 0x2c
 80055bc:	f7ff fed4 	bl	8005368 <__cvt>
 80055c0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80055c2:	4680      	mov	r8, r0
 80055c4:	2947      	cmp	r1, #71	; 0x47
 80055c6:	990d      	ldr	r1, [sp, #52]	; 0x34
 80055c8:	d108      	bne.n	80055dc <_printf_float+0x138>
 80055ca:	1cc8      	adds	r0, r1, #3
 80055cc:	db02      	blt.n	80055d4 <_printf_float+0x130>
 80055ce:	6863      	ldr	r3, [r4, #4]
 80055d0:	4299      	cmp	r1, r3
 80055d2:	dd40      	ble.n	8005656 <_printf_float+0x1b2>
 80055d4:	f1a9 0902 	sub.w	r9, r9, #2
 80055d8:	fa5f f989 	uxtb.w	r9, r9
 80055dc:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80055e0:	d81f      	bhi.n	8005622 <_printf_float+0x17e>
 80055e2:	464a      	mov	r2, r9
 80055e4:	3901      	subs	r1, #1
 80055e6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80055ea:	910d      	str	r1, [sp, #52]	; 0x34
 80055ec:	f7ff ff1b 	bl	8005426 <__exponent>
 80055f0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80055f2:	4682      	mov	sl, r0
 80055f4:	1813      	adds	r3, r2, r0
 80055f6:	2a01      	cmp	r2, #1
 80055f8:	6123      	str	r3, [r4, #16]
 80055fa:	dc02      	bgt.n	8005602 <_printf_float+0x15e>
 80055fc:	6822      	ldr	r2, [r4, #0]
 80055fe:	07d2      	lsls	r2, r2, #31
 8005600:	d501      	bpl.n	8005606 <_printf_float+0x162>
 8005602:	3301      	adds	r3, #1
 8005604:	6123      	str	r3, [r4, #16]
 8005606:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800560a:	2b00      	cmp	r3, #0
 800560c:	d09b      	beq.n	8005546 <_printf_float+0xa2>
 800560e:	232d      	movs	r3, #45	; 0x2d
 8005610:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005614:	e797      	b.n	8005546 <_printf_float+0xa2>
 8005616:	2947      	cmp	r1, #71	; 0x47
 8005618:	d1bc      	bne.n	8005594 <_printf_float+0xf0>
 800561a:	2b00      	cmp	r3, #0
 800561c:	d1ba      	bne.n	8005594 <_printf_float+0xf0>
 800561e:	2301      	movs	r3, #1
 8005620:	e7b7      	b.n	8005592 <_printf_float+0xee>
 8005622:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8005626:	d118      	bne.n	800565a <_printf_float+0x1b6>
 8005628:	2900      	cmp	r1, #0
 800562a:	6863      	ldr	r3, [r4, #4]
 800562c:	dd0b      	ble.n	8005646 <_printf_float+0x1a2>
 800562e:	6121      	str	r1, [r4, #16]
 8005630:	b913      	cbnz	r3, 8005638 <_printf_float+0x194>
 8005632:	6822      	ldr	r2, [r4, #0]
 8005634:	07d0      	lsls	r0, r2, #31
 8005636:	d502      	bpl.n	800563e <_printf_float+0x19a>
 8005638:	3301      	adds	r3, #1
 800563a:	440b      	add	r3, r1
 800563c:	6123      	str	r3, [r4, #16]
 800563e:	f04f 0a00 	mov.w	sl, #0
 8005642:	65a1      	str	r1, [r4, #88]	; 0x58
 8005644:	e7df      	b.n	8005606 <_printf_float+0x162>
 8005646:	b913      	cbnz	r3, 800564e <_printf_float+0x1aa>
 8005648:	6822      	ldr	r2, [r4, #0]
 800564a:	07d2      	lsls	r2, r2, #31
 800564c:	d501      	bpl.n	8005652 <_printf_float+0x1ae>
 800564e:	3302      	adds	r3, #2
 8005650:	e7f4      	b.n	800563c <_printf_float+0x198>
 8005652:	2301      	movs	r3, #1
 8005654:	e7f2      	b.n	800563c <_printf_float+0x198>
 8005656:	f04f 0967 	mov.w	r9, #103	; 0x67
 800565a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800565c:	4299      	cmp	r1, r3
 800565e:	db05      	blt.n	800566c <_printf_float+0x1c8>
 8005660:	6823      	ldr	r3, [r4, #0]
 8005662:	6121      	str	r1, [r4, #16]
 8005664:	07d8      	lsls	r0, r3, #31
 8005666:	d5ea      	bpl.n	800563e <_printf_float+0x19a>
 8005668:	1c4b      	adds	r3, r1, #1
 800566a:	e7e7      	b.n	800563c <_printf_float+0x198>
 800566c:	2900      	cmp	r1, #0
 800566e:	bfcc      	ite	gt
 8005670:	2201      	movgt	r2, #1
 8005672:	f1c1 0202 	rsble	r2, r1, #2
 8005676:	4413      	add	r3, r2
 8005678:	e7e0      	b.n	800563c <_printf_float+0x198>
 800567a:	6823      	ldr	r3, [r4, #0]
 800567c:	055a      	lsls	r2, r3, #21
 800567e:	d407      	bmi.n	8005690 <_printf_float+0x1ec>
 8005680:	6923      	ldr	r3, [r4, #16]
 8005682:	4642      	mov	r2, r8
 8005684:	4631      	mov	r1, r6
 8005686:	4628      	mov	r0, r5
 8005688:	47b8      	blx	r7
 800568a:	3001      	adds	r0, #1
 800568c:	d12b      	bne.n	80056e6 <_printf_float+0x242>
 800568e:	e764      	b.n	800555a <_printf_float+0xb6>
 8005690:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005694:	f240 80dd 	bls.w	8005852 <_printf_float+0x3ae>
 8005698:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800569c:	2200      	movs	r2, #0
 800569e:	2300      	movs	r3, #0
 80056a0:	f7fb f982 	bl	80009a8 <__aeabi_dcmpeq>
 80056a4:	2800      	cmp	r0, #0
 80056a6:	d033      	beq.n	8005710 <_printf_float+0x26c>
 80056a8:	2301      	movs	r3, #1
 80056aa:	4631      	mov	r1, r6
 80056ac:	4628      	mov	r0, r5
 80056ae:	4a35      	ldr	r2, [pc, #212]	; (8005784 <_printf_float+0x2e0>)
 80056b0:	47b8      	blx	r7
 80056b2:	3001      	adds	r0, #1
 80056b4:	f43f af51 	beq.w	800555a <_printf_float+0xb6>
 80056b8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80056bc:	429a      	cmp	r2, r3
 80056be:	db02      	blt.n	80056c6 <_printf_float+0x222>
 80056c0:	6823      	ldr	r3, [r4, #0]
 80056c2:	07d8      	lsls	r0, r3, #31
 80056c4:	d50f      	bpl.n	80056e6 <_printf_float+0x242>
 80056c6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80056ca:	4631      	mov	r1, r6
 80056cc:	4628      	mov	r0, r5
 80056ce:	47b8      	blx	r7
 80056d0:	3001      	adds	r0, #1
 80056d2:	f43f af42 	beq.w	800555a <_printf_float+0xb6>
 80056d6:	f04f 0800 	mov.w	r8, #0
 80056da:	f104 091a 	add.w	r9, r4, #26
 80056de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80056e0:	3b01      	subs	r3, #1
 80056e2:	4543      	cmp	r3, r8
 80056e4:	dc09      	bgt.n	80056fa <_printf_float+0x256>
 80056e6:	6823      	ldr	r3, [r4, #0]
 80056e8:	079b      	lsls	r3, r3, #30
 80056ea:	f100 8102 	bmi.w	80058f2 <_printf_float+0x44e>
 80056ee:	68e0      	ldr	r0, [r4, #12]
 80056f0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80056f2:	4298      	cmp	r0, r3
 80056f4:	bfb8      	it	lt
 80056f6:	4618      	movlt	r0, r3
 80056f8:	e731      	b.n	800555e <_printf_float+0xba>
 80056fa:	2301      	movs	r3, #1
 80056fc:	464a      	mov	r2, r9
 80056fe:	4631      	mov	r1, r6
 8005700:	4628      	mov	r0, r5
 8005702:	47b8      	blx	r7
 8005704:	3001      	adds	r0, #1
 8005706:	f43f af28 	beq.w	800555a <_printf_float+0xb6>
 800570a:	f108 0801 	add.w	r8, r8, #1
 800570e:	e7e6      	b.n	80056de <_printf_float+0x23a>
 8005710:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005712:	2b00      	cmp	r3, #0
 8005714:	dc38      	bgt.n	8005788 <_printf_float+0x2e4>
 8005716:	2301      	movs	r3, #1
 8005718:	4631      	mov	r1, r6
 800571a:	4628      	mov	r0, r5
 800571c:	4a19      	ldr	r2, [pc, #100]	; (8005784 <_printf_float+0x2e0>)
 800571e:	47b8      	blx	r7
 8005720:	3001      	adds	r0, #1
 8005722:	f43f af1a 	beq.w	800555a <_printf_float+0xb6>
 8005726:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800572a:	4313      	orrs	r3, r2
 800572c:	d102      	bne.n	8005734 <_printf_float+0x290>
 800572e:	6823      	ldr	r3, [r4, #0]
 8005730:	07d9      	lsls	r1, r3, #31
 8005732:	d5d8      	bpl.n	80056e6 <_printf_float+0x242>
 8005734:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005738:	4631      	mov	r1, r6
 800573a:	4628      	mov	r0, r5
 800573c:	47b8      	blx	r7
 800573e:	3001      	adds	r0, #1
 8005740:	f43f af0b 	beq.w	800555a <_printf_float+0xb6>
 8005744:	f04f 0900 	mov.w	r9, #0
 8005748:	f104 0a1a 	add.w	sl, r4, #26
 800574c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800574e:	425b      	negs	r3, r3
 8005750:	454b      	cmp	r3, r9
 8005752:	dc01      	bgt.n	8005758 <_printf_float+0x2b4>
 8005754:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005756:	e794      	b.n	8005682 <_printf_float+0x1de>
 8005758:	2301      	movs	r3, #1
 800575a:	4652      	mov	r2, sl
 800575c:	4631      	mov	r1, r6
 800575e:	4628      	mov	r0, r5
 8005760:	47b8      	blx	r7
 8005762:	3001      	adds	r0, #1
 8005764:	f43f aef9 	beq.w	800555a <_printf_float+0xb6>
 8005768:	f109 0901 	add.w	r9, r9, #1
 800576c:	e7ee      	b.n	800574c <_printf_float+0x2a8>
 800576e:	bf00      	nop
 8005770:	7fefffff 	.word	0x7fefffff
 8005774:	0800a4cc 	.word	0x0800a4cc
 8005778:	0800a4d0 	.word	0x0800a4d0
 800577c:	0800a4d8 	.word	0x0800a4d8
 8005780:	0800a4d4 	.word	0x0800a4d4
 8005784:	0800a8d1 	.word	0x0800a8d1
 8005788:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800578a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800578c:	429a      	cmp	r2, r3
 800578e:	bfa8      	it	ge
 8005790:	461a      	movge	r2, r3
 8005792:	2a00      	cmp	r2, #0
 8005794:	4691      	mov	r9, r2
 8005796:	dc37      	bgt.n	8005808 <_printf_float+0x364>
 8005798:	f04f 0b00 	mov.w	fp, #0
 800579c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80057a0:	f104 021a 	add.w	r2, r4, #26
 80057a4:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80057a8:	ebaa 0309 	sub.w	r3, sl, r9
 80057ac:	455b      	cmp	r3, fp
 80057ae:	dc33      	bgt.n	8005818 <_printf_float+0x374>
 80057b0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80057b4:	429a      	cmp	r2, r3
 80057b6:	db3b      	blt.n	8005830 <_printf_float+0x38c>
 80057b8:	6823      	ldr	r3, [r4, #0]
 80057ba:	07da      	lsls	r2, r3, #31
 80057bc:	d438      	bmi.n	8005830 <_printf_float+0x38c>
 80057be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80057c0:	990d      	ldr	r1, [sp, #52]	; 0x34
 80057c2:	eba3 020a 	sub.w	r2, r3, sl
 80057c6:	eba3 0901 	sub.w	r9, r3, r1
 80057ca:	4591      	cmp	r9, r2
 80057cc:	bfa8      	it	ge
 80057ce:	4691      	movge	r9, r2
 80057d0:	f1b9 0f00 	cmp.w	r9, #0
 80057d4:	dc34      	bgt.n	8005840 <_printf_float+0x39c>
 80057d6:	f04f 0800 	mov.w	r8, #0
 80057da:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80057de:	f104 0a1a 	add.w	sl, r4, #26
 80057e2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80057e6:	1a9b      	subs	r3, r3, r2
 80057e8:	eba3 0309 	sub.w	r3, r3, r9
 80057ec:	4543      	cmp	r3, r8
 80057ee:	f77f af7a 	ble.w	80056e6 <_printf_float+0x242>
 80057f2:	2301      	movs	r3, #1
 80057f4:	4652      	mov	r2, sl
 80057f6:	4631      	mov	r1, r6
 80057f8:	4628      	mov	r0, r5
 80057fa:	47b8      	blx	r7
 80057fc:	3001      	adds	r0, #1
 80057fe:	f43f aeac 	beq.w	800555a <_printf_float+0xb6>
 8005802:	f108 0801 	add.w	r8, r8, #1
 8005806:	e7ec      	b.n	80057e2 <_printf_float+0x33e>
 8005808:	4613      	mov	r3, r2
 800580a:	4631      	mov	r1, r6
 800580c:	4642      	mov	r2, r8
 800580e:	4628      	mov	r0, r5
 8005810:	47b8      	blx	r7
 8005812:	3001      	adds	r0, #1
 8005814:	d1c0      	bne.n	8005798 <_printf_float+0x2f4>
 8005816:	e6a0      	b.n	800555a <_printf_float+0xb6>
 8005818:	2301      	movs	r3, #1
 800581a:	4631      	mov	r1, r6
 800581c:	4628      	mov	r0, r5
 800581e:	920b      	str	r2, [sp, #44]	; 0x2c
 8005820:	47b8      	blx	r7
 8005822:	3001      	adds	r0, #1
 8005824:	f43f ae99 	beq.w	800555a <_printf_float+0xb6>
 8005828:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800582a:	f10b 0b01 	add.w	fp, fp, #1
 800582e:	e7b9      	b.n	80057a4 <_printf_float+0x300>
 8005830:	4631      	mov	r1, r6
 8005832:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005836:	4628      	mov	r0, r5
 8005838:	47b8      	blx	r7
 800583a:	3001      	adds	r0, #1
 800583c:	d1bf      	bne.n	80057be <_printf_float+0x31a>
 800583e:	e68c      	b.n	800555a <_printf_float+0xb6>
 8005840:	464b      	mov	r3, r9
 8005842:	4631      	mov	r1, r6
 8005844:	4628      	mov	r0, r5
 8005846:	eb08 020a 	add.w	r2, r8, sl
 800584a:	47b8      	blx	r7
 800584c:	3001      	adds	r0, #1
 800584e:	d1c2      	bne.n	80057d6 <_printf_float+0x332>
 8005850:	e683      	b.n	800555a <_printf_float+0xb6>
 8005852:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005854:	2a01      	cmp	r2, #1
 8005856:	dc01      	bgt.n	800585c <_printf_float+0x3b8>
 8005858:	07db      	lsls	r3, r3, #31
 800585a:	d537      	bpl.n	80058cc <_printf_float+0x428>
 800585c:	2301      	movs	r3, #1
 800585e:	4642      	mov	r2, r8
 8005860:	4631      	mov	r1, r6
 8005862:	4628      	mov	r0, r5
 8005864:	47b8      	blx	r7
 8005866:	3001      	adds	r0, #1
 8005868:	f43f ae77 	beq.w	800555a <_printf_float+0xb6>
 800586c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005870:	4631      	mov	r1, r6
 8005872:	4628      	mov	r0, r5
 8005874:	47b8      	blx	r7
 8005876:	3001      	adds	r0, #1
 8005878:	f43f ae6f 	beq.w	800555a <_printf_float+0xb6>
 800587c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005880:	2200      	movs	r2, #0
 8005882:	2300      	movs	r3, #0
 8005884:	f7fb f890 	bl	80009a8 <__aeabi_dcmpeq>
 8005888:	b9d8      	cbnz	r0, 80058c2 <_printf_float+0x41e>
 800588a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800588c:	f108 0201 	add.w	r2, r8, #1
 8005890:	3b01      	subs	r3, #1
 8005892:	4631      	mov	r1, r6
 8005894:	4628      	mov	r0, r5
 8005896:	47b8      	blx	r7
 8005898:	3001      	adds	r0, #1
 800589a:	d10e      	bne.n	80058ba <_printf_float+0x416>
 800589c:	e65d      	b.n	800555a <_printf_float+0xb6>
 800589e:	2301      	movs	r3, #1
 80058a0:	464a      	mov	r2, r9
 80058a2:	4631      	mov	r1, r6
 80058a4:	4628      	mov	r0, r5
 80058a6:	47b8      	blx	r7
 80058a8:	3001      	adds	r0, #1
 80058aa:	f43f ae56 	beq.w	800555a <_printf_float+0xb6>
 80058ae:	f108 0801 	add.w	r8, r8, #1
 80058b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80058b4:	3b01      	subs	r3, #1
 80058b6:	4543      	cmp	r3, r8
 80058b8:	dcf1      	bgt.n	800589e <_printf_float+0x3fa>
 80058ba:	4653      	mov	r3, sl
 80058bc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80058c0:	e6e0      	b.n	8005684 <_printf_float+0x1e0>
 80058c2:	f04f 0800 	mov.w	r8, #0
 80058c6:	f104 091a 	add.w	r9, r4, #26
 80058ca:	e7f2      	b.n	80058b2 <_printf_float+0x40e>
 80058cc:	2301      	movs	r3, #1
 80058ce:	4642      	mov	r2, r8
 80058d0:	e7df      	b.n	8005892 <_printf_float+0x3ee>
 80058d2:	2301      	movs	r3, #1
 80058d4:	464a      	mov	r2, r9
 80058d6:	4631      	mov	r1, r6
 80058d8:	4628      	mov	r0, r5
 80058da:	47b8      	blx	r7
 80058dc:	3001      	adds	r0, #1
 80058de:	f43f ae3c 	beq.w	800555a <_printf_float+0xb6>
 80058e2:	f108 0801 	add.w	r8, r8, #1
 80058e6:	68e3      	ldr	r3, [r4, #12]
 80058e8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80058ea:	1a5b      	subs	r3, r3, r1
 80058ec:	4543      	cmp	r3, r8
 80058ee:	dcf0      	bgt.n	80058d2 <_printf_float+0x42e>
 80058f0:	e6fd      	b.n	80056ee <_printf_float+0x24a>
 80058f2:	f04f 0800 	mov.w	r8, #0
 80058f6:	f104 0919 	add.w	r9, r4, #25
 80058fa:	e7f4      	b.n	80058e6 <_printf_float+0x442>

080058fc <_printf_common>:
 80058fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005900:	4616      	mov	r6, r2
 8005902:	4699      	mov	r9, r3
 8005904:	688a      	ldr	r2, [r1, #8]
 8005906:	690b      	ldr	r3, [r1, #16]
 8005908:	4607      	mov	r7, r0
 800590a:	4293      	cmp	r3, r2
 800590c:	bfb8      	it	lt
 800590e:	4613      	movlt	r3, r2
 8005910:	6033      	str	r3, [r6, #0]
 8005912:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005916:	460c      	mov	r4, r1
 8005918:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800591c:	b10a      	cbz	r2, 8005922 <_printf_common+0x26>
 800591e:	3301      	adds	r3, #1
 8005920:	6033      	str	r3, [r6, #0]
 8005922:	6823      	ldr	r3, [r4, #0]
 8005924:	0699      	lsls	r1, r3, #26
 8005926:	bf42      	ittt	mi
 8005928:	6833      	ldrmi	r3, [r6, #0]
 800592a:	3302      	addmi	r3, #2
 800592c:	6033      	strmi	r3, [r6, #0]
 800592e:	6825      	ldr	r5, [r4, #0]
 8005930:	f015 0506 	ands.w	r5, r5, #6
 8005934:	d106      	bne.n	8005944 <_printf_common+0x48>
 8005936:	f104 0a19 	add.w	sl, r4, #25
 800593a:	68e3      	ldr	r3, [r4, #12]
 800593c:	6832      	ldr	r2, [r6, #0]
 800593e:	1a9b      	subs	r3, r3, r2
 8005940:	42ab      	cmp	r3, r5
 8005942:	dc28      	bgt.n	8005996 <_printf_common+0x9a>
 8005944:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005948:	1e13      	subs	r3, r2, #0
 800594a:	6822      	ldr	r2, [r4, #0]
 800594c:	bf18      	it	ne
 800594e:	2301      	movne	r3, #1
 8005950:	0692      	lsls	r2, r2, #26
 8005952:	d42d      	bmi.n	80059b0 <_printf_common+0xb4>
 8005954:	4649      	mov	r1, r9
 8005956:	4638      	mov	r0, r7
 8005958:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800595c:	47c0      	blx	r8
 800595e:	3001      	adds	r0, #1
 8005960:	d020      	beq.n	80059a4 <_printf_common+0xa8>
 8005962:	6823      	ldr	r3, [r4, #0]
 8005964:	68e5      	ldr	r5, [r4, #12]
 8005966:	f003 0306 	and.w	r3, r3, #6
 800596a:	2b04      	cmp	r3, #4
 800596c:	bf18      	it	ne
 800596e:	2500      	movne	r5, #0
 8005970:	6832      	ldr	r2, [r6, #0]
 8005972:	f04f 0600 	mov.w	r6, #0
 8005976:	68a3      	ldr	r3, [r4, #8]
 8005978:	bf08      	it	eq
 800597a:	1aad      	subeq	r5, r5, r2
 800597c:	6922      	ldr	r2, [r4, #16]
 800597e:	bf08      	it	eq
 8005980:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005984:	4293      	cmp	r3, r2
 8005986:	bfc4      	itt	gt
 8005988:	1a9b      	subgt	r3, r3, r2
 800598a:	18ed      	addgt	r5, r5, r3
 800598c:	341a      	adds	r4, #26
 800598e:	42b5      	cmp	r5, r6
 8005990:	d11a      	bne.n	80059c8 <_printf_common+0xcc>
 8005992:	2000      	movs	r0, #0
 8005994:	e008      	b.n	80059a8 <_printf_common+0xac>
 8005996:	2301      	movs	r3, #1
 8005998:	4652      	mov	r2, sl
 800599a:	4649      	mov	r1, r9
 800599c:	4638      	mov	r0, r7
 800599e:	47c0      	blx	r8
 80059a0:	3001      	adds	r0, #1
 80059a2:	d103      	bne.n	80059ac <_printf_common+0xb0>
 80059a4:	f04f 30ff 	mov.w	r0, #4294967295
 80059a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059ac:	3501      	adds	r5, #1
 80059ae:	e7c4      	b.n	800593a <_printf_common+0x3e>
 80059b0:	2030      	movs	r0, #48	; 0x30
 80059b2:	18e1      	adds	r1, r4, r3
 80059b4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80059b8:	1c5a      	adds	r2, r3, #1
 80059ba:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80059be:	4422      	add	r2, r4
 80059c0:	3302      	adds	r3, #2
 80059c2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80059c6:	e7c5      	b.n	8005954 <_printf_common+0x58>
 80059c8:	2301      	movs	r3, #1
 80059ca:	4622      	mov	r2, r4
 80059cc:	4649      	mov	r1, r9
 80059ce:	4638      	mov	r0, r7
 80059d0:	47c0      	blx	r8
 80059d2:	3001      	adds	r0, #1
 80059d4:	d0e6      	beq.n	80059a4 <_printf_common+0xa8>
 80059d6:	3601      	adds	r6, #1
 80059d8:	e7d9      	b.n	800598e <_printf_common+0x92>
	...

080059dc <_printf_i>:
 80059dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80059e0:	7e0f      	ldrb	r7, [r1, #24]
 80059e2:	4691      	mov	r9, r2
 80059e4:	2f78      	cmp	r7, #120	; 0x78
 80059e6:	4680      	mov	r8, r0
 80059e8:	460c      	mov	r4, r1
 80059ea:	469a      	mov	sl, r3
 80059ec:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80059ee:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80059f2:	d807      	bhi.n	8005a04 <_printf_i+0x28>
 80059f4:	2f62      	cmp	r7, #98	; 0x62
 80059f6:	d80a      	bhi.n	8005a0e <_printf_i+0x32>
 80059f8:	2f00      	cmp	r7, #0
 80059fa:	f000 80d9 	beq.w	8005bb0 <_printf_i+0x1d4>
 80059fe:	2f58      	cmp	r7, #88	; 0x58
 8005a00:	f000 80a4 	beq.w	8005b4c <_printf_i+0x170>
 8005a04:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005a08:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005a0c:	e03a      	b.n	8005a84 <_printf_i+0xa8>
 8005a0e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005a12:	2b15      	cmp	r3, #21
 8005a14:	d8f6      	bhi.n	8005a04 <_printf_i+0x28>
 8005a16:	a101      	add	r1, pc, #4	; (adr r1, 8005a1c <_printf_i+0x40>)
 8005a18:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005a1c:	08005a75 	.word	0x08005a75
 8005a20:	08005a89 	.word	0x08005a89
 8005a24:	08005a05 	.word	0x08005a05
 8005a28:	08005a05 	.word	0x08005a05
 8005a2c:	08005a05 	.word	0x08005a05
 8005a30:	08005a05 	.word	0x08005a05
 8005a34:	08005a89 	.word	0x08005a89
 8005a38:	08005a05 	.word	0x08005a05
 8005a3c:	08005a05 	.word	0x08005a05
 8005a40:	08005a05 	.word	0x08005a05
 8005a44:	08005a05 	.word	0x08005a05
 8005a48:	08005b97 	.word	0x08005b97
 8005a4c:	08005ab9 	.word	0x08005ab9
 8005a50:	08005b79 	.word	0x08005b79
 8005a54:	08005a05 	.word	0x08005a05
 8005a58:	08005a05 	.word	0x08005a05
 8005a5c:	08005bb9 	.word	0x08005bb9
 8005a60:	08005a05 	.word	0x08005a05
 8005a64:	08005ab9 	.word	0x08005ab9
 8005a68:	08005a05 	.word	0x08005a05
 8005a6c:	08005a05 	.word	0x08005a05
 8005a70:	08005b81 	.word	0x08005b81
 8005a74:	682b      	ldr	r3, [r5, #0]
 8005a76:	1d1a      	adds	r2, r3, #4
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	602a      	str	r2, [r5, #0]
 8005a7c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005a80:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005a84:	2301      	movs	r3, #1
 8005a86:	e0a4      	b.n	8005bd2 <_printf_i+0x1f6>
 8005a88:	6820      	ldr	r0, [r4, #0]
 8005a8a:	6829      	ldr	r1, [r5, #0]
 8005a8c:	0606      	lsls	r6, r0, #24
 8005a8e:	f101 0304 	add.w	r3, r1, #4
 8005a92:	d50a      	bpl.n	8005aaa <_printf_i+0xce>
 8005a94:	680e      	ldr	r6, [r1, #0]
 8005a96:	602b      	str	r3, [r5, #0]
 8005a98:	2e00      	cmp	r6, #0
 8005a9a:	da03      	bge.n	8005aa4 <_printf_i+0xc8>
 8005a9c:	232d      	movs	r3, #45	; 0x2d
 8005a9e:	4276      	negs	r6, r6
 8005aa0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005aa4:	230a      	movs	r3, #10
 8005aa6:	485e      	ldr	r0, [pc, #376]	; (8005c20 <_printf_i+0x244>)
 8005aa8:	e019      	b.n	8005ade <_printf_i+0x102>
 8005aaa:	680e      	ldr	r6, [r1, #0]
 8005aac:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005ab0:	602b      	str	r3, [r5, #0]
 8005ab2:	bf18      	it	ne
 8005ab4:	b236      	sxthne	r6, r6
 8005ab6:	e7ef      	b.n	8005a98 <_printf_i+0xbc>
 8005ab8:	682b      	ldr	r3, [r5, #0]
 8005aba:	6820      	ldr	r0, [r4, #0]
 8005abc:	1d19      	adds	r1, r3, #4
 8005abe:	6029      	str	r1, [r5, #0]
 8005ac0:	0601      	lsls	r1, r0, #24
 8005ac2:	d501      	bpl.n	8005ac8 <_printf_i+0xec>
 8005ac4:	681e      	ldr	r6, [r3, #0]
 8005ac6:	e002      	b.n	8005ace <_printf_i+0xf2>
 8005ac8:	0646      	lsls	r6, r0, #25
 8005aca:	d5fb      	bpl.n	8005ac4 <_printf_i+0xe8>
 8005acc:	881e      	ldrh	r6, [r3, #0]
 8005ace:	2f6f      	cmp	r7, #111	; 0x6f
 8005ad0:	bf0c      	ite	eq
 8005ad2:	2308      	moveq	r3, #8
 8005ad4:	230a      	movne	r3, #10
 8005ad6:	4852      	ldr	r0, [pc, #328]	; (8005c20 <_printf_i+0x244>)
 8005ad8:	2100      	movs	r1, #0
 8005ada:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005ade:	6865      	ldr	r5, [r4, #4]
 8005ae0:	2d00      	cmp	r5, #0
 8005ae2:	bfa8      	it	ge
 8005ae4:	6821      	ldrge	r1, [r4, #0]
 8005ae6:	60a5      	str	r5, [r4, #8]
 8005ae8:	bfa4      	itt	ge
 8005aea:	f021 0104 	bicge.w	r1, r1, #4
 8005aee:	6021      	strge	r1, [r4, #0]
 8005af0:	b90e      	cbnz	r6, 8005af6 <_printf_i+0x11a>
 8005af2:	2d00      	cmp	r5, #0
 8005af4:	d04d      	beq.n	8005b92 <_printf_i+0x1b6>
 8005af6:	4615      	mov	r5, r2
 8005af8:	fbb6 f1f3 	udiv	r1, r6, r3
 8005afc:	fb03 6711 	mls	r7, r3, r1, r6
 8005b00:	5dc7      	ldrb	r7, [r0, r7]
 8005b02:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005b06:	4637      	mov	r7, r6
 8005b08:	42bb      	cmp	r3, r7
 8005b0a:	460e      	mov	r6, r1
 8005b0c:	d9f4      	bls.n	8005af8 <_printf_i+0x11c>
 8005b0e:	2b08      	cmp	r3, #8
 8005b10:	d10b      	bne.n	8005b2a <_printf_i+0x14e>
 8005b12:	6823      	ldr	r3, [r4, #0]
 8005b14:	07de      	lsls	r6, r3, #31
 8005b16:	d508      	bpl.n	8005b2a <_printf_i+0x14e>
 8005b18:	6923      	ldr	r3, [r4, #16]
 8005b1a:	6861      	ldr	r1, [r4, #4]
 8005b1c:	4299      	cmp	r1, r3
 8005b1e:	bfde      	ittt	le
 8005b20:	2330      	movle	r3, #48	; 0x30
 8005b22:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005b26:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005b2a:	1b52      	subs	r2, r2, r5
 8005b2c:	6122      	str	r2, [r4, #16]
 8005b2e:	464b      	mov	r3, r9
 8005b30:	4621      	mov	r1, r4
 8005b32:	4640      	mov	r0, r8
 8005b34:	f8cd a000 	str.w	sl, [sp]
 8005b38:	aa03      	add	r2, sp, #12
 8005b3a:	f7ff fedf 	bl	80058fc <_printf_common>
 8005b3e:	3001      	adds	r0, #1
 8005b40:	d14c      	bne.n	8005bdc <_printf_i+0x200>
 8005b42:	f04f 30ff 	mov.w	r0, #4294967295
 8005b46:	b004      	add	sp, #16
 8005b48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b4c:	4834      	ldr	r0, [pc, #208]	; (8005c20 <_printf_i+0x244>)
 8005b4e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005b52:	6829      	ldr	r1, [r5, #0]
 8005b54:	6823      	ldr	r3, [r4, #0]
 8005b56:	f851 6b04 	ldr.w	r6, [r1], #4
 8005b5a:	6029      	str	r1, [r5, #0]
 8005b5c:	061d      	lsls	r5, r3, #24
 8005b5e:	d514      	bpl.n	8005b8a <_printf_i+0x1ae>
 8005b60:	07df      	lsls	r7, r3, #31
 8005b62:	bf44      	itt	mi
 8005b64:	f043 0320 	orrmi.w	r3, r3, #32
 8005b68:	6023      	strmi	r3, [r4, #0]
 8005b6a:	b91e      	cbnz	r6, 8005b74 <_printf_i+0x198>
 8005b6c:	6823      	ldr	r3, [r4, #0]
 8005b6e:	f023 0320 	bic.w	r3, r3, #32
 8005b72:	6023      	str	r3, [r4, #0]
 8005b74:	2310      	movs	r3, #16
 8005b76:	e7af      	b.n	8005ad8 <_printf_i+0xfc>
 8005b78:	6823      	ldr	r3, [r4, #0]
 8005b7a:	f043 0320 	orr.w	r3, r3, #32
 8005b7e:	6023      	str	r3, [r4, #0]
 8005b80:	2378      	movs	r3, #120	; 0x78
 8005b82:	4828      	ldr	r0, [pc, #160]	; (8005c24 <_printf_i+0x248>)
 8005b84:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005b88:	e7e3      	b.n	8005b52 <_printf_i+0x176>
 8005b8a:	0659      	lsls	r1, r3, #25
 8005b8c:	bf48      	it	mi
 8005b8e:	b2b6      	uxthmi	r6, r6
 8005b90:	e7e6      	b.n	8005b60 <_printf_i+0x184>
 8005b92:	4615      	mov	r5, r2
 8005b94:	e7bb      	b.n	8005b0e <_printf_i+0x132>
 8005b96:	682b      	ldr	r3, [r5, #0]
 8005b98:	6826      	ldr	r6, [r4, #0]
 8005b9a:	1d18      	adds	r0, r3, #4
 8005b9c:	6961      	ldr	r1, [r4, #20]
 8005b9e:	6028      	str	r0, [r5, #0]
 8005ba0:	0635      	lsls	r5, r6, #24
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	d501      	bpl.n	8005baa <_printf_i+0x1ce>
 8005ba6:	6019      	str	r1, [r3, #0]
 8005ba8:	e002      	b.n	8005bb0 <_printf_i+0x1d4>
 8005baa:	0670      	lsls	r0, r6, #25
 8005bac:	d5fb      	bpl.n	8005ba6 <_printf_i+0x1ca>
 8005bae:	8019      	strh	r1, [r3, #0]
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	4615      	mov	r5, r2
 8005bb4:	6123      	str	r3, [r4, #16]
 8005bb6:	e7ba      	b.n	8005b2e <_printf_i+0x152>
 8005bb8:	682b      	ldr	r3, [r5, #0]
 8005bba:	2100      	movs	r1, #0
 8005bbc:	1d1a      	adds	r2, r3, #4
 8005bbe:	602a      	str	r2, [r5, #0]
 8005bc0:	681d      	ldr	r5, [r3, #0]
 8005bc2:	6862      	ldr	r2, [r4, #4]
 8005bc4:	4628      	mov	r0, r5
 8005bc6:	f002 fb93 	bl	80082f0 <memchr>
 8005bca:	b108      	cbz	r0, 8005bd0 <_printf_i+0x1f4>
 8005bcc:	1b40      	subs	r0, r0, r5
 8005bce:	6060      	str	r0, [r4, #4]
 8005bd0:	6863      	ldr	r3, [r4, #4]
 8005bd2:	6123      	str	r3, [r4, #16]
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005bda:	e7a8      	b.n	8005b2e <_printf_i+0x152>
 8005bdc:	462a      	mov	r2, r5
 8005bde:	4649      	mov	r1, r9
 8005be0:	4640      	mov	r0, r8
 8005be2:	6923      	ldr	r3, [r4, #16]
 8005be4:	47d0      	blx	sl
 8005be6:	3001      	adds	r0, #1
 8005be8:	d0ab      	beq.n	8005b42 <_printf_i+0x166>
 8005bea:	6823      	ldr	r3, [r4, #0]
 8005bec:	079b      	lsls	r3, r3, #30
 8005bee:	d413      	bmi.n	8005c18 <_printf_i+0x23c>
 8005bf0:	68e0      	ldr	r0, [r4, #12]
 8005bf2:	9b03      	ldr	r3, [sp, #12]
 8005bf4:	4298      	cmp	r0, r3
 8005bf6:	bfb8      	it	lt
 8005bf8:	4618      	movlt	r0, r3
 8005bfa:	e7a4      	b.n	8005b46 <_printf_i+0x16a>
 8005bfc:	2301      	movs	r3, #1
 8005bfe:	4632      	mov	r2, r6
 8005c00:	4649      	mov	r1, r9
 8005c02:	4640      	mov	r0, r8
 8005c04:	47d0      	blx	sl
 8005c06:	3001      	adds	r0, #1
 8005c08:	d09b      	beq.n	8005b42 <_printf_i+0x166>
 8005c0a:	3501      	adds	r5, #1
 8005c0c:	68e3      	ldr	r3, [r4, #12]
 8005c0e:	9903      	ldr	r1, [sp, #12]
 8005c10:	1a5b      	subs	r3, r3, r1
 8005c12:	42ab      	cmp	r3, r5
 8005c14:	dcf2      	bgt.n	8005bfc <_printf_i+0x220>
 8005c16:	e7eb      	b.n	8005bf0 <_printf_i+0x214>
 8005c18:	2500      	movs	r5, #0
 8005c1a:	f104 0619 	add.w	r6, r4, #25
 8005c1e:	e7f5      	b.n	8005c0c <_printf_i+0x230>
 8005c20:	0800a4dc 	.word	0x0800a4dc
 8005c24:	0800a4ed 	.word	0x0800a4ed

08005c28 <_scanf_float>:
 8005c28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c2c:	b087      	sub	sp, #28
 8005c2e:	9303      	str	r3, [sp, #12]
 8005c30:	688b      	ldr	r3, [r1, #8]
 8005c32:	4617      	mov	r7, r2
 8005c34:	1e5a      	subs	r2, r3, #1
 8005c36:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8005c3a:	bf85      	ittet	hi
 8005c3c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8005c40:	195b      	addhi	r3, r3, r5
 8005c42:	2300      	movls	r3, #0
 8005c44:	9302      	strhi	r3, [sp, #8]
 8005c46:	bf88      	it	hi
 8005c48:	f240 135d 	movwhi	r3, #349	; 0x15d
 8005c4c:	468b      	mov	fp, r1
 8005c4e:	f04f 0500 	mov.w	r5, #0
 8005c52:	bf8c      	ite	hi
 8005c54:	608b      	strhi	r3, [r1, #8]
 8005c56:	9302      	strls	r3, [sp, #8]
 8005c58:	680b      	ldr	r3, [r1, #0]
 8005c5a:	4680      	mov	r8, r0
 8005c5c:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8005c60:	f84b 3b1c 	str.w	r3, [fp], #28
 8005c64:	460c      	mov	r4, r1
 8005c66:	465e      	mov	r6, fp
 8005c68:	46aa      	mov	sl, r5
 8005c6a:	46a9      	mov	r9, r5
 8005c6c:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8005c70:	9501      	str	r5, [sp, #4]
 8005c72:	68a2      	ldr	r2, [r4, #8]
 8005c74:	b152      	cbz	r2, 8005c8c <_scanf_float+0x64>
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	781b      	ldrb	r3, [r3, #0]
 8005c7a:	2b4e      	cmp	r3, #78	; 0x4e
 8005c7c:	d864      	bhi.n	8005d48 <_scanf_float+0x120>
 8005c7e:	2b40      	cmp	r3, #64	; 0x40
 8005c80:	d83c      	bhi.n	8005cfc <_scanf_float+0xd4>
 8005c82:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8005c86:	b2c8      	uxtb	r0, r1
 8005c88:	280e      	cmp	r0, #14
 8005c8a:	d93a      	bls.n	8005d02 <_scanf_float+0xda>
 8005c8c:	f1b9 0f00 	cmp.w	r9, #0
 8005c90:	d003      	beq.n	8005c9a <_scanf_float+0x72>
 8005c92:	6823      	ldr	r3, [r4, #0]
 8005c94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c98:	6023      	str	r3, [r4, #0]
 8005c9a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005c9e:	f1ba 0f01 	cmp.w	sl, #1
 8005ca2:	f200 8113 	bhi.w	8005ecc <_scanf_float+0x2a4>
 8005ca6:	455e      	cmp	r6, fp
 8005ca8:	f200 8105 	bhi.w	8005eb6 <_scanf_float+0x28e>
 8005cac:	2501      	movs	r5, #1
 8005cae:	4628      	mov	r0, r5
 8005cb0:	b007      	add	sp, #28
 8005cb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005cb6:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8005cba:	2a0d      	cmp	r2, #13
 8005cbc:	d8e6      	bhi.n	8005c8c <_scanf_float+0x64>
 8005cbe:	a101      	add	r1, pc, #4	; (adr r1, 8005cc4 <_scanf_float+0x9c>)
 8005cc0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005cc4:	08005e03 	.word	0x08005e03
 8005cc8:	08005c8d 	.word	0x08005c8d
 8005ccc:	08005c8d 	.word	0x08005c8d
 8005cd0:	08005c8d 	.word	0x08005c8d
 8005cd4:	08005e63 	.word	0x08005e63
 8005cd8:	08005e3b 	.word	0x08005e3b
 8005cdc:	08005c8d 	.word	0x08005c8d
 8005ce0:	08005c8d 	.word	0x08005c8d
 8005ce4:	08005e11 	.word	0x08005e11
 8005ce8:	08005c8d 	.word	0x08005c8d
 8005cec:	08005c8d 	.word	0x08005c8d
 8005cf0:	08005c8d 	.word	0x08005c8d
 8005cf4:	08005c8d 	.word	0x08005c8d
 8005cf8:	08005dc9 	.word	0x08005dc9
 8005cfc:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8005d00:	e7db      	b.n	8005cba <_scanf_float+0x92>
 8005d02:	290e      	cmp	r1, #14
 8005d04:	d8c2      	bhi.n	8005c8c <_scanf_float+0x64>
 8005d06:	a001      	add	r0, pc, #4	; (adr r0, 8005d0c <_scanf_float+0xe4>)
 8005d08:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8005d0c:	08005dbb 	.word	0x08005dbb
 8005d10:	08005c8d 	.word	0x08005c8d
 8005d14:	08005dbb 	.word	0x08005dbb
 8005d18:	08005e4f 	.word	0x08005e4f
 8005d1c:	08005c8d 	.word	0x08005c8d
 8005d20:	08005d69 	.word	0x08005d69
 8005d24:	08005da5 	.word	0x08005da5
 8005d28:	08005da5 	.word	0x08005da5
 8005d2c:	08005da5 	.word	0x08005da5
 8005d30:	08005da5 	.word	0x08005da5
 8005d34:	08005da5 	.word	0x08005da5
 8005d38:	08005da5 	.word	0x08005da5
 8005d3c:	08005da5 	.word	0x08005da5
 8005d40:	08005da5 	.word	0x08005da5
 8005d44:	08005da5 	.word	0x08005da5
 8005d48:	2b6e      	cmp	r3, #110	; 0x6e
 8005d4a:	d809      	bhi.n	8005d60 <_scanf_float+0x138>
 8005d4c:	2b60      	cmp	r3, #96	; 0x60
 8005d4e:	d8b2      	bhi.n	8005cb6 <_scanf_float+0x8e>
 8005d50:	2b54      	cmp	r3, #84	; 0x54
 8005d52:	d077      	beq.n	8005e44 <_scanf_float+0x21c>
 8005d54:	2b59      	cmp	r3, #89	; 0x59
 8005d56:	d199      	bne.n	8005c8c <_scanf_float+0x64>
 8005d58:	2d07      	cmp	r5, #7
 8005d5a:	d197      	bne.n	8005c8c <_scanf_float+0x64>
 8005d5c:	2508      	movs	r5, #8
 8005d5e:	e029      	b.n	8005db4 <_scanf_float+0x18c>
 8005d60:	2b74      	cmp	r3, #116	; 0x74
 8005d62:	d06f      	beq.n	8005e44 <_scanf_float+0x21c>
 8005d64:	2b79      	cmp	r3, #121	; 0x79
 8005d66:	e7f6      	b.n	8005d56 <_scanf_float+0x12e>
 8005d68:	6821      	ldr	r1, [r4, #0]
 8005d6a:	05c8      	lsls	r0, r1, #23
 8005d6c:	d51a      	bpl.n	8005da4 <_scanf_float+0x17c>
 8005d6e:	9b02      	ldr	r3, [sp, #8]
 8005d70:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8005d74:	6021      	str	r1, [r4, #0]
 8005d76:	f109 0901 	add.w	r9, r9, #1
 8005d7a:	b11b      	cbz	r3, 8005d84 <_scanf_float+0x15c>
 8005d7c:	3b01      	subs	r3, #1
 8005d7e:	3201      	adds	r2, #1
 8005d80:	9302      	str	r3, [sp, #8]
 8005d82:	60a2      	str	r2, [r4, #8]
 8005d84:	68a3      	ldr	r3, [r4, #8]
 8005d86:	3b01      	subs	r3, #1
 8005d88:	60a3      	str	r3, [r4, #8]
 8005d8a:	6923      	ldr	r3, [r4, #16]
 8005d8c:	3301      	adds	r3, #1
 8005d8e:	6123      	str	r3, [r4, #16]
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	3b01      	subs	r3, #1
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	607b      	str	r3, [r7, #4]
 8005d98:	f340 8084 	ble.w	8005ea4 <_scanf_float+0x27c>
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	3301      	adds	r3, #1
 8005da0:	603b      	str	r3, [r7, #0]
 8005da2:	e766      	b.n	8005c72 <_scanf_float+0x4a>
 8005da4:	eb1a 0f05 	cmn.w	sl, r5
 8005da8:	f47f af70 	bne.w	8005c8c <_scanf_float+0x64>
 8005dac:	6822      	ldr	r2, [r4, #0]
 8005dae:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8005db2:	6022      	str	r2, [r4, #0]
 8005db4:	f806 3b01 	strb.w	r3, [r6], #1
 8005db8:	e7e4      	b.n	8005d84 <_scanf_float+0x15c>
 8005dba:	6822      	ldr	r2, [r4, #0]
 8005dbc:	0610      	lsls	r0, r2, #24
 8005dbe:	f57f af65 	bpl.w	8005c8c <_scanf_float+0x64>
 8005dc2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005dc6:	e7f4      	b.n	8005db2 <_scanf_float+0x18a>
 8005dc8:	f1ba 0f00 	cmp.w	sl, #0
 8005dcc:	d10e      	bne.n	8005dec <_scanf_float+0x1c4>
 8005dce:	f1b9 0f00 	cmp.w	r9, #0
 8005dd2:	d10e      	bne.n	8005df2 <_scanf_float+0x1ca>
 8005dd4:	6822      	ldr	r2, [r4, #0]
 8005dd6:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005dda:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005dde:	d108      	bne.n	8005df2 <_scanf_float+0x1ca>
 8005de0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005de4:	f04f 0a01 	mov.w	sl, #1
 8005de8:	6022      	str	r2, [r4, #0]
 8005dea:	e7e3      	b.n	8005db4 <_scanf_float+0x18c>
 8005dec:	f1ba 0f02 	cmp.w	sl, #2
 8005df0:	d055      	beq.n	8005e9e <_scanf_float+0x276>
 8005df2:	2d01      	cmp	r5, #1
 8005df4:	d002      	beq.n	8005dfc <_scanf_float+0x1d4>
 8005df6:	2d04      	cmp	r5, #4
 8005df8:	f47f af48 	bne.w	8005c8c <_scanf_float+0x64>
 8005dfc:	3501      	adds	r5, #1
 8005dfe:	b2ed      	uxtb	r5, r5
 8005e00:	e7d8      	b.n	8005db4 <_scanf_float+0x18c>
 8005e02:	f1ba 0f01 	cmp.w	sl, #1
 8005e06:	f47f af41 	bne.w	8005c8c <_scanf_float+0x64>
 8005e0a:	f04f 0a02 	mov.w	sl, #2
 8005e0e:	e7d1      	b.n	8005db4 <_scanf_float+0x18c>
 8005e10:	b97d      	cbnz	r5, 8005e32 <_scanf_float+0x20a>
 8005e12:	f1b9 0f00 	cmp.w	r9, #0
 8005e16:	f47f af3c 	bne.w	8005c92 <_scanf_float+0x6a>
 8005e1a:	6822      	ldr	r2, [r4, #0]
 8005e1c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005e20:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005e24:	f47f af39 	bne.w	8005c9a <_scanf_float+0x72>
 8005e28:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005e2c:	2501      	movs	r5, #1
 8005e2e:	6022      	str	r2, [r4, #0]
 8005e30:	e7c0      	b.n	8005db4 <_scanf_float+0x18c>
 8005e32:	2d03      	cmp	r5, #3
 8005e34:	d0e2      	beq.n	8005dfc <_scanf_float+0x1d4>
 8005e36:	2d05      	cmp	r5, #5
 8005e38:	e7de      	b.n	8005df8 <_scanf_float+0x1d0>
 8005e3a:	2d02      	cmp	r5, #2
 8005e3c:	f47f af26 	bne.w	8005c8c <_scanf_float+0x64>
 8005e40:	2503      	movs	r5, #3
 8005e42:	e7b7      	b.n	8005db4 <_scanf_float+0x18c>
 8005e44:	2d06      	cmp	r5, #6
 8005e46:	f47f af21 	bne.w	8005c8c <_scanf_float+0x64>
 8005e4a:	2507      	movs	r5, #7
 8005e4c:	e7b2      	b.n	8005db4 <_scanf_float+0x18c>
 8005e4e:	6822      	ldr	r2, [r4, #0]
 8005e50:	0591      	lsls	r1, r2, #22
 8005e52:	f57f af1b 	bpl.w	8005c8c <_scanf_float+0x64>
 8005e56:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8005e5a:	6022      	str	r2, [r4, #0]
 8005e5c:	f8cd 9004 	str.w	r9, [sp, #4]
 8005e60:	e7a8      	b.n	8005db4 <_scanf_float+0x18c>
 8005e62:	6822      	ldr	r2, [r4, #0]
 8005e64:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8005e68:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8005e6c:	d006      	beq.n	8005e7c <_scanf_float+0x254>
 8005e6e:	0550      	lsls	r0, r2, #21
 8005e70:	f57f af0c 	bpl.w	8005c8c <_scanf_float+0x64>
 8005e74:	f1b9 0f00 	cmp.w	r9, #0
 8005e78:	f43f af0f 	beq.w	8005c9a <_scanf_float+0x72>
 8005e7c:	0591      	lsls	r1, r2, #22
 8005e7e:	bf58      	it	pl
 8005e80:	9901      	ldrpl	r1, [sp, #4]
 8005e82:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005e86:	bf58      	it	pl
 8005e88:	eba9 0101 	subpl.w	r1, r9, r1
 8005e8c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8005e90:	f04f 0900 	mov.w	r9, #0
 8005e94:	bf58      	it	pl
 8005e96:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8005e9a:	6022      	str	r2, [r4, #0]
 8005e9c:	e78a      	b.n	8005db4 <_scanf_float+0x18c>
 8005e9e:	f04f 0a03 	mov.w	sl, #3
 8005ea2:	e787      	b.n	8005db4 <_scanf_float+0x18c>
 8005ea4:	4639      	mov	r1, r7
 8005ea6:	4640      	mov	r0, r8
 8005ea8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005eac:	4798      	blx	r3
 8005eae:	2800      	cmp	r0, #0
 8005eb0:	f43f aedf 	beq.w	8005c72 <_scanf_float+0x4a>
 8005eb4:	e6ea      	b.n	8005c8c <_scanf_float+0x64>
 8005eb6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005eba:	463a      	mov	r2, r7
 8005ebc:	4640      	mov	r0, r8
 8005ebe:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005ec2:	4798      	blx	r3
 8005ec4:	6923      	ldr	r3, [r4, #16]
 8005ec6:	3b01      	subs	r3, #1
 8005ec8:	6123      	str	r3, [r4, #16]
 8005eca:	e6ec      	b.n	8005ca6 <_scanf_float+0x7e>
 8005ecc:	1e6b      	subs	r3, r5, #1
 8005ece:	2b06      	cmp	r3, #6
 8005ed0:	d825      	bhi.n	8005f1e <_scanf_float+0x2f6>
 8005ed2:	2d02      	cmp	r5, #2
 8005ed4:	d836      	bhi.n	8005f44 <_scanf_float+0x31c>
 8005ed6:	455e      	cmp	r6, fp
 8005ed8:	f67f aee8 	bls.w	8005cac <_scanf_float+0x84>
 8005edc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005ee0:	463a      	mov	r2, r7
 8005ee2:	4640      	mov	r0, r8
 8005ee4:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005ee8:	4798      	blx	r3
 8005eea:	6923      	ldr	r3, [r4, #16]
 8005eec:	3b01      	subs	r3, #1
 8005eee:	6123      	str	r3, [r4, #16]
 8005ef0:	e7f1      	b.n	8005ed6 <_scanf_float+0x2ae>
 8005ef2:	9802      	ldr	r0, [sp, #8]
 8005ef4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005ef8:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8005efc:	463a      	mov	r2, r7
 8005efe:	9002      	str	r0, [sp, #8]
 8005f00:	4640      	mov	r0, r8
 8005f02:	4798      	blx	r3
 8005f04:	6923      	ldr	r3, [r4, #16]
 8005f06:	3b01      	subs	r3, #1
 8005f08:	6123      	str	r3, [r4, #16]
 8005f0a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005f0e:	fa5f fa8a 	uxtb.w	sl, sl
 8005f12:	f1ba 0f02 	cmp.w	sl, #2
 8005f16:	d1ec      	bne.n	8005ef2 <_scanf_float+0x2ca>
 8005f18:	3d03      	subs	r5, #3
 8005f1a:	b2ed      	uxtb	r5, r5
 8005f1c:	1b76      	subs	r6, r6, r5
 8005f1e:	6823      	ldr	r3, [r4, #0]
 8005f20:	05da      	lsls	r2, r3, #23
 8005f22:	d52f      	bpl.n	8005f84 <_scanf_float+0x35c>
 8005f24:	055b      	lsls	r3, r3, #21
 8005f26:	d510      	bpl.n	8005f4a <_scanf_float+0x322>
 8005f28:	455e      	cmp	r6, fp
 8005f2a:	f67f aebf 	bls.w	8005cac <_scanf_float+0x84>
 8005f2e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005f32:	463a      	mov	r2, r7
 8005f34:	4640      	mov	r0, r8
 8005f36:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005f3a:	4798      	blx	r3
 8005f3c:	6923      	ldr	r3, [r4, #16]
 8005f3e:	3b01      	subs	r3, #1
 8005f40:	6123      	str	r3, [r4, #16]
 8005f42:	e7f1      	b.n	8005f28 <_scanf_float+0x300>
 8005f44:	46aa      	mov	sl, r5
 8005f46:	9602      	str	r6, [sp, #8]
 8005f48:	e7df      	b.n	8005f0a <_scanf_float+0x2e2>
 8005f4a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8005f4e:	6923      	ldr	r3, [r4, #16]
 8005f50:	2965      	cmp	r1, #101	; 0x65
 8005f52:	f103 33ff 	add.w	r3, r3, #4294967295
 8005f56:	f106 35ff 	add.w	r5, r6, #4294967295
 8005f5a:	6123      	str	r3, [r4, #16]
 8005f5c:	d00c      	beq.n	8005f78 <_scanf_float+0x350>
 8005f5e:	2945      	cmp	r1, #69	; 0x45
 8005f60:	d00a      	beq.n	8005f78 <_scanf_float+0x350>
 8005f62:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005f66:	463a      	mov	r2, r7
 8005f68:	4640      	mov	r0, r8
 8005f6a:	4798      	blx	r3
 8005f6c:	6923      	ldr	r3, [r4, #16]
 8005f6e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8005f72:	3b01      	subs	r3, #1
 8005f74:	1eb5      	subs	r5, r6, #2
 8005f76:	6123      	str	r3, [r4, #16]
 8005f78:	463a      	mov	r2, r7
 8005f7a:	4640      	mov	r0, r8
 8005f7c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005f80:	4798      	blx	r3
 8005f82:	462e      	mov	r6, r5
 8005f84:	6825      	ldr	r5, [r4, #0]
 8005f86:	f015 0510 	ands.w	r5, r5, #16
 8005f8a:	d155      	bne.n	8006038 <_scanf_float+0x410>
 8005f8c:	7035      	strb	r5, [r6, #0]
 8005f8e:	6823      	ldr	r3, [r4, #0]
 8005f90:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005f94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f98:	d11b      	bne.n	8005fd2 <_scanf_float+0x3aa>
 8005f9a:	9b01      	ldr	r3, [sp, #4]
 8005f9c:	454b      	cmp	r3, r9
 8005f9e:	eba3 0209 	sub.w	r2, r3, r9
 8005fa2:	d123      	bne.n	8005fec <_scanf_float+0x3c4>
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	4659      	mov	r1, fp
 8005fa8:	4640      	mov	r0, r8
 8005faa:	f000 fee9 	bl	8006d80 <_strtod_r>
 8005fae:	6822      	ldr	r2, [r4, #0]
 8005fb0:	9b03      	ldr	r3, [sp, #12]
 8005fb2:	f012 0f02 	tst.w	r2, #2
 8005fb6:	4606      	mov	r6, r0
 8005fb8:	460f      	mov	r7, r1
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	d021      	beq.n	8006002 <_scanf_float+0x3da>
 8005fbe:	1d1a      	adds	r2, r3, #4
 8005fc0:	9903      	ldr	r1, [sp, #12]
 8005fc2:	600a      	str	r2, [r1, #0]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	e9c3 6700 	strd	r6, r7, [r3]
 8005fca:	68e3      	ldr	r3, [r4, #12]
 8005fcc:	3301      	adds	r3, #1
 8005fce:	60e3      	str	r3, [r4, #12]
 8005fd0:	e66d      	b.n	8005cae <_scanf_float+0x86>
 8005fd2:	9b04      	ldr	r3, [sp, #16]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d0e5      	beq.n	8005fa4 <_scanf_float+0x37c>
 8005fd8:	9905      	ldr	r1, [sp, #20]
 8005fda:	230a      	movs	r3, #10
 8005fdc:	462a      	mov	r2, r5
 8005fde:	4640      	mov	r0, r8
 8005fe0:	3101      	adds	r1, #1
 8005fe2:	f000 ff4f 	bl	8006e84 <_strtol_r>
 8005fe6:	9b04      	ldr	r3, [sp, #16]
 8005fe8:	9e05      	ldr	r6, [sp, #20]
 8005fea:	1ac2      	subs	r2, r0, r3
 8005fec:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8005ff0:	429e      	cmp	r6, r3
 8005ff2:	bf28      	it	cs
 8005ff4:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8005ff8:	4630      	mov	r0, r6
 8005ffa:	4910      	ldr	r1, [pc, #64]	; (800603c <_scanf_float+0x414>)
 8005ffc:	f000 f826 	bl	800604c <siprintf>
 8006000:	e7d0      	b.n	8005fa4 <_scanf_float+0x37c>
 8006002:	f012 0f04 	tst.w	r2, #4
 8006006:	f103 0204 	add.w	r2, r3, #4
 800600a:	d1d9      	bne.n	8005fc0 <_scanf_float+0x398>
 800600c:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8006010:	f8cc 2000 	str.w	r2, [ip]
 8006014:	f8d3 8000 	ldr.w	r8, [r3]
 8006018:	4602      	mov	r2, r0
 800601a:	460b      	mov	r3, r1
 800601c:	f7fa fcf6 	bl	8000a0c <__aeabi_dcmpun>
 8006020:	b128      	cbz	r0, 800602e <_scanf_float+0x406>
 8006022:	4807      	ldr	r0, [pc, #28]	; (8006040 <_scanf_float+0x418>)
 8006024:	f000 f80e 	bl	8006044 <nanf>
 8006028:	f8c8 0000 	str.w	r0, [r8]
 800602c:	e7cd      	b.n	8005fca <_scanf_float+0x3a2>
 800602e:	4630      	mov	r0, r6
 8006030:	4639      	mov	r1, r7
 8006032:	f7fa fd49 	bl	8000ac8 <__aeabi_d2f>
 8006036:	e7f7      	b.n	8006028 <_scanf_float+0x400>
 8006038:	2500      	movs	r5, #0
 800603a:	e638      	b.n	8005cae <_scanf_float+0x86>
 800603c:	0800a4fe 	.word	0x0800a4fe
 8006040:	0800a923 	.word	0x0800a923

08006044 <nanf>:
 8006044:	4800      	ldr	r0, [pc, #0]	; (8006048 <nanf+0x4>)
 8006046:	4770      	bx	lr
 8006048:	7fc00000 	.word	0x7fc00000

0800604c <siprintf>:
 800604c:	b40e      	push	{r1, r2, r3}
 800604e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006052:	b500      	push	{lr}
 8006054:	b09c      	sub	sp, #112	; 0x70
 8006056:	ab1d      	add	r3, sp, #116	; 0x74
 8006058:	9002      	str	r0, [sp, #8]
 800605a:	9006      	str	r0, [sp, #24]
 800605c:	9107      	str	r1, [sp, #28]
 800605e:	9104      	str	r1, [sp, #16]
 8006060:	4808      	ldr	r0, [pc, #32]	; (8006084 <siprintf+0x38>)
 8006062:	4909      	ldr	r1, [pc, #36]	; (8006088 <siprintf+0x3c>)
 8006064:	f853 2b04 	ldr.w	r2, [r3], #4
 8006068:	9105      	str	r1, [sp, #20]
 800606a:	6800      	ldr	r0, [r0, #0]
 800606c:	a902      	add	r1, sp, #8
 800606e:	9301      	str	r3, [sp, #4]
 8006070:	f002 ff5e 	bl	8008f30 <_svfiprintf_r>
 8006074:	2200      	movs	r2, #0
 8006076:	9b02      	ldr	r3, [sp, #8]
 8006078:	701a      	strb	r2, [r3, #0]
 800607a:	b01c      	add	sp, #112	; 0x70
 800607c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006080:	b003      	add	sp, #12
 8006082:	4770      	bx	lr
 8006084:	20000040 	.word	0x20000040
 8006088:	ffff0208 	.word	0xffff0208

0800608c <siscanf>:
 800608c:	b40e      	push	{r1, r2, r3}
 800608e:	f44f 7201 	mov.w	r2, #516	; 0x204
 8006092:	b530      	push	{r4, r5, lr}
 8006094:	b09c      	sub	sp, #112	; 0x70
 8006096:	ac1f      	add	r4, sp, #124	; 0x7c
 8006098:	f854 5b04 	ldr.w	r5, [r4], #4
 800609c:	f8ad 2014 	strh.w	r2, [sp, #20]
 80060a0:	9002      	str	r0, [sp, #8]
 80060a2:	9006      	str	r0, [sp, #24]
 80060a4:	f7fa f854 	bl	8000150 <strlen>
 80060a8:	4b0b      	ldr	r3, [pc, #44]	; (80060d8 <siscanf+0x4c>)
 80060aa:	9003      	str	r0, [sp, #12]
 80060ac:	930b      	str	r3, [sp, #44]	; 0x2c
 80060ae:	2300      	movs	r3, #0
 80060b0:	930f      	str	r3, [sp, #60]	; 0x3c
 80060b2:	9314      	str	r3, [sp, #80]	; 0x50
 80060b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80060b8:	9007      	str	r0, [sp, #28]
 80060ba:	4808      	ldr	r0, [pc, #32]	; (80060dc <siscanf+0x50>)
 80060bc:	f8ad 3016 	strh.w	r3, [sp, #22]
 80060c0:	462a      	mov	r2, r5
 80060c2:	4623      	mov	r3, r4
 80060c4:	a902      	add	r1, sp, #8
 80060c6:	6800      	ldr	r0, [r0, #0]
 80060c8:	9401      	str	r4, [sp, #4]
 80060ca:	f003 f88b 	bl	80091e4 <__ssvfiscanf_r>
 80060ce:	b01c      	add	sp, #112	; 0x70
 80060d0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80060d4:	b003      	add	sp, #12
 80060d6:	4770      	bx	lr
 80060d8:	08006103 	.word	0x08006103
 80060dc:	20000040 	.word	0x20000040

080060e0 <__sread>:
 80060e0:	b510      	push	{r4, lr}
 80060e2:	460c      	mov	r4, r1
 80060e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060e8:	f003 fb48 	bl	800977c <_read_r>
 80060ec:	2800      	cmp	r0, #0
 80060ee:	bfab      	itete	ge
 80060f0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80060f2:	89a3      	ldrhlt	r3, [r4, #12]
 80060f4:	181b      	addge	r3, r3, r0
 80060f6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80060fa:	bfac      	ite	ge
 80060fc:	6563      	strge	r3, [r4, #84]	; 0x54
 80060fe:	81a3      	strhlt	r3, [r4, #12]
 8006100:	bd10      	pop	{r4, pc}

08006102 <__seofread>:
 8006102:	2000      	movs	r0, #0
 8006104:	4770      	bx	lr

08006106 <__swrite>:
 8006106:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800610a:	461f      	mov	r7, r3
 800610c:	898b      	ldrh	r3, [r1, #12]
 800610e:	4605      	mov	r5, r0
 8006110:	05db      	lsls	r3, r3, #23
 8006112:	460c      	mov	r4, r1
 8006114:	4616      	mov	r6, r2
 8006116:	d505      	bpl.n	8006124 <__swrite+0x1e>
 8006118:	2302      	movs	r3, #2
 800611a:	2200      	movs	r2, #0
 800611c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006120:	f002 f8ba 	bl	8008298 <_lseek_r>
 8006124:	89a3      	ldrh	r3, [r4, #12]
 8006126:	4632      	mov	r2, r6
 8006128:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800612c:	81a3      	strh	r3, [r4, #12]
 800612e:	4628      	mov	r0, r5
 8006130:	463b      	mov	r3, r7
 8006132:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006136:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800613a:	f000 bea5 	b.w	8006e88 <_write_r>

0800613e <__sseek>:
 800613e:	b510      	push	{r4, lr}
 8006140:	460c      	mov	r4, r1
 8006142:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006146:	f002 f8a7 	bl	8008298 <_lseek_r>
 800614a:	1c43      	adds	r3, r0, #1
 800614c:	89a3      	ldrh	r3, [r4, #12]
 800614e:	bf15      	itete	ne
 8006150:	6560      	strne	r0, [r4, #84]	; 0x54
 8006152:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006156:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800615a:	81a3      	strheq	r3, [r4, #12]
 800615c:	bf18      	it	ne
 800615e:	81a3      	strhne	r3, [r4, #12]
 8006160:	bd10      	pop	{r4, pc}

08006162 <__sclose>:
 8006162:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006166:	f000 bea1 	b.w	8006eac <_close_r>

0800616a <sulp>:
 800616a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800616e:	460f      	mov	r7, r1
 8006170:	4690      	mov	r8, r2
 8006172:	f002 fc49 	bl	8008a08 <__ulp>
 8006176:	4604      	mov	r4, r0
 8006178:	460d      	mov	r5, r1
 800617a:	f1b8 0f00 	cmp.w	r8, #0
 800617e:	d011      	beq.n	80061a4 <sulp+0x3a>
 8006180:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8006184:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006188:	2b00      	cmp	r3, #0
 800618a:	dd0b      	ble.n	80061a4 <sulp+0x3a>
 800618c:	2400      	movs	r4, #0
 800618e:	051b      	lsls	r3, r3, #20
 8006190:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8006194:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8006198:	4622      	mov	r2, r4
 800619a:	462b      	mov	r3, r5
 800619c:	f7fa f99c 	bl	80004d8 <__aeabi_dmul>
 80061a0:	4604      	mov	r4, r0
 80061a2:	460d      	mov	r5, r1
 80061a4:	4620      	mov	r0, r4
 80061a6:	4629      	mov	r1, r5
 80061a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80061ac:	0000      	movs	r0, r0
	...

080061b0 <_strtod_l>:
 80061b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061b4:	469b      	mov	fp, r3
 80061b6:	2300      	movs	r3, #0
 80061b8:	b09f      	sub	sp, #124	; 0x7c
 80061ba:	931a      	str	r3, [sp, #104]	; 0x68
 80061bc:	4b9e      	ldr	r3, [pc, #632]	; (8006438 <_strtod_l+0x288>)
 80061be:	4682      	mov	sl, r0
 80061c0:	681f      	ldr	r7, [r3, #0]
 80061c2:	460e      	mov	r6, r1
 80061c4:	4638      	mov	r0, r7
 80061c6:	9215      	str	r2, [sp, #84]	; 0x54
 80061c8:	f7f9 ffc2 	bl	8000150 <strlen>
 80061cc:	f04f 0800 	mov.w	r8, #0
 80061d0:	4604      	mov	r4, r0
 80061d2:	f04f 0900 	mov.w	r9, #0
 80061d6:	9619      	str	r6, [sp, #100]	; 0x64
 80061d8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80061da:	781a      	ldrb	r2, [r3, #0]
 80061dc:	2a2b      	cmp	r2, #43	; 0x2b
 80061de:	d04c      	beq.n	800627a <_strtod_l+0xca>
 80061e0:	d83a      	bhi.n	8006258 <_strtod_l+0xa8>
 80061e2:	2a0d      	cmp	r2, #13
 80061e4:	d833      	bhi.n	800624e <_strtod_l+0x9e>
 80061e6:	2a08      	cmp	r2, #8
 80061e8:	d833      	bhi.n	8006252 <_strtod_l+0xa2>
 80061ea:	2a00      	cmp	r2, #0
 80061ec:	d03d      	beq.n	800626a <_strtod_l+0xba>
 80061ee:	2300      	movs	r3, #0
 80061f0:	930a      	str	r3, [sp, #40]	; 0x28
 80061f2:	9d19      	ldr	r5, [sp, #100]	; 0x64
 80061f4:	782b      	ldrb	r3, [r5, #0]
 80061f6:	2b30      	cmp	r3, #48	; 0x30
 80061f8:	f040 80aa 	bne.w	8006350 <_strtod_l+0x1a0>
 80061fc:	786b      	ldrb	r3, [r5, #1]
 80061fe:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006202:	2b58      	cmp	r3, #88	; 0x58
 8006204:	d166      	bne.n	80062d4 <_strtod_l+0x124>
 8006206:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006208:	4650      	mov	r0, sl
 800620a:	9301      	str	r3, [sp, #4]
 800620c:	ab1a      	add	r3, sp, #104	; 0x68
 800620e:	9300      	str	r3, [sp, #0]
 8006210:	4a8a      	ldr	r2, [pc, #552]	; (800643c <_strtod_l+0x28c>)
 8006212:	f8cd b008 	str.w	fp, [sp, #8]
 8006216:	ab1b      	add	r3, sp, #108	; 0x6c
 8006218:	a919      	add	r1, sp, #100	; 0x64
 800621a:	f001 fd3b 	bl	8007c94 <__gethex>
 800621e:	f010 0607 	ands.w	r6, r0, #7
 8006222:	4604      	mov	r4, r0
 8006224:	d005      	beq.n	8006232 <_strtod_l+0x82>
 8006226:	2e06      	cmp	r6, #6
 8006228:	d129      	bne.n	800627e <_strtod_l+0xce>
 800622a:	2300      	movs	r3, #0
 800622c:	3501      	adds	r5, #1
 800622e:	9519      	str	r5, [sp, #100]	; 0x64
 8006230:	930a      	str	r3, [sp, #40]	; 0x28
 8006232:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006234:	2b00      	cmp	r3, #0
 8006236:	f040 858a 	bne.w	8006d4e <_strtod_l+0xb9e>
 800623a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800623c:	b1d3      	cbz	r3, 8006274 <_strtod_l+0xc4>
 800623e:	4642      	mov	r2, r8
 8006240:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8006244:	4610      	mov	r0, r2
 8006246:	4619      	mov	r1, r3
 8006248:	b01f      	add	sp, #124	; 0x7c
 800624a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800624e:	2a20      	cmp	r2, #32
 8006250:	d1cd      	bne.n	80061ee <_strtod_l+0x3e>
 8006252:	3301      	adds	r3, #1
 8006254:	9319      	str	r3, [sp, #100]	; 0x64
 8006256:	e7bf      	b.n	80061d8 <_strtod_l+0x28>
 8006258:	2a2d      	cmp	r2, #45	; 0x2d
 800625a:	d1c8      	bne.n	80061ee <_strtod_l+0x3e>
 800625c:	2201      	movs	r2, #1
 800625e:	920a      	str	r2, [sp, #40]	; 0x28
 8006260:	1c5a      	adds	r2, r3, #1
 8006262:	9219      	str	r2, [sp, #100]	; 0x64
 8006264:	785b      	ldrb	r3, [r3, #1]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d1c3      	bne.n	80061f2 <_strtod_l+0x42>
 800626a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800626c:	9619      	str	r6, [sp, #100]	; 0x64
 800626e:	2b00      	cmp	r3, #0
 8006270:	f040 856b 	bne.w	8006d4a <_strtod_l+0xb9a>
 8006274:	4642      	mov	r2, r8
 8006276:	464b      	mov	r3, r9
 8006278:	e7e4      	b.n	8006244 <_strtod_l+0x94>
 800627a:	2200      	movs	r2, #0
 800627c:	e7ef      	b.n	800625e <_strtod_l+0xae>
 800627e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8006280:	b13a      	cbz	r2, 8006292 <_strtod_l+0xe2>
 8006282:	2135      	movs	r1, #53	; 0x35
 8006284:	a81c      	add	r0, sp, #112	; 0x70
 8006286:	f002 fcc3 	bl	8008c10 <__copybits>
 800628a:	4650      	mov	r0, sl
 800628c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800628e:	f002 f88b 	bl	80083a8 <_Bfree>
 8006292:	3e01      	subs	r6, #1
 8006294:	2e04      	cmp	r6, #4
 8006296:	d806      	bhi.n	80062a6 <_strtod_l+0xf6>
 8006298:	e8df f006 	tbb	[pc, r6]
 800629c:	1714030a 	.word	0x1714030a
 80062a0:	0a          	.byte	0x0a
 80062a1:	00          	.byte	0x00
 80062a2:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 80062a6:	0721      	lsls	r1, r4, #28
 80062a8:	d5c3      	bpl.n	8006232 <_strtod_l+0x82>
 80062aa:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 80062ae:	e7c0      	b.n	8006232 <_strtod_l+0x82>
 80062b0:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80062b2:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 80062b6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80062ba:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80062be:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80062c2:	e7f0      	b.n	80062a6 <_strtod_l+0xf6>
 80062c4:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8006440 <_strtod_l+0x290>
 80062c8:	e7ed      	b.n	80062a6 <_strtod_l+0xf6>
 80062ca:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80062ce:	f04f 38ff 	mov.w	r8, #4294967295
 80062d2:	e7e8      	b.n	80062a6 <_strtod_l+0xf6>
 80062d4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80062d6:	1c5a      	adds	r2, r3, #1
 80062d8:	9219      	str	r2, [sp, #100]	; 0x64
 80062da:	785b      	ldrb	r3, [r3, #1]
 80062dc:	2b30      	cmp	r3, #48	; 0x30
 80062de:	d0f9      	beq.n	80062d4 <_strtod_l+0x124>
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d0a6      	beq.n	8006232 <_strtod_l+0x82>
 80062e4:	2301      	movs	r3, #1
 80062e6:	9307      	str	r3, [sp, #28]
 80062e8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80062ea:	220a      	movs	r2, #10
 80062ec:	9308      	str	r3, [sp, #32]
 80062ee:	2300      	movs	r3, #0
 80062f0:	469b      	mov	fp, r3
 80062f2:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80062f6:	9819      	ldr	r0, [sp, #100]	; 0x64
 80062f8:	7805      	ldrb	r5, [r0, #0]
 80062fa:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 80062fe:	b2d9      	uxtb	r1, r3
 8006300:	2909      	cmp	r1, #9
 8006302:	d927      	bls.n	8006354 <_strtod_l+0x1a4>
 8006304:	4622      	mov	r2, r4
 8006306:	4639      	mov	r1, r7
 8006308:	f003 fa98 	bl	800983c <strncmp>
 800630c:	2800      	cmp	r0, #0
 800630e:	d033      	beq.n	8006378 <_strtod_l+0x1c8>
 8006310:	2000      	movs	r0, #0
 8006312:	462a      	mov	r2, r5
 8006314:	465c      	mov	r4, fp
 8006316:	4603      	mov	r3, r0
 8006318:	9004      	str	r0, [sp, #16]
 800631a:	2a65      	cmp	r2, #101	; 0x65
 800631c:	d001      	beq.n	8006322 <_strtod_l+0x172>
 800631e:	2a45      	cmp	r2, #69	; 0x45
 8006320:	d114      	bne.n	800634c <_strtod_l+0x19c>
 8006322:	b91c      	cbnz	r4, 800632c <_strtod_l+0x17c>
 8006324:	9a07      	ldr	r2, [sp, #28]
 8006326:	4302      	orrs	r2, r0
 8006328:	d09f      	beq.n	800626a <_strtod_l+0xba>
 800632a:	2400      	movs	r4, #0
 800632c:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800632e:	1c72      	adds	r2, r6, #1
 8006330:	9219      	str	r2, [sp, #100]	; 0x64
 8006332:	7872      	ldrb	r2, [r6, #1]
 8006334:	2a2b      	cmp	r2, #43	; 0x2b
 8006336:	d079      	beq.n	800642c <_strtod_l+0x27c>
 8006338:	2a2d      	cmp	r2, #45	; 0x2d
 800633a:	f000 8083 	beq.w	8006444 <_strtod_l+0x294>
 800633e:	2700      	movs	r7, #0
 8006340:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8006344:	2909      	cmp	r1, #9
 8006346:	f240 8083 	bls.w	8006450 <_strtod_l+0x2a0>
 800634a:	9619      	str	r6, [sp, #100]	; 0x64
 800634c:	2500      	movs	r5, #0
 800634e:	e09f      	b.n	8006490 <_strtod_l+0x2e0>
 8006350:	2300      	movs	r3, #0
 8006352:	e7c8      	b.n	80062e6 <_strtod_l+0x136>
 8006354:	f1bb 0f08 	cmp.w	fp, #8
 8006358:	bfd5      	itete	le
 800635a:	9906      	ldrle	r1, [sp, #24]
 800635c:	9905      	ldrgt	r1, [sp, #20]
 800635e:	fb02 3301 	mlale	r3, r2, r1, r3
 8006362:	fb02 3301 	mlagt	r3, r2, r1, r3
 8006366:	f100 0001 	add.w	r0, r0, #1
 800636a:	bfd4      	ite	le
 800636c:	9306      	strle	r3, [sp, #24]
 800636e:	9305      	strgt	r3, [sp, #20]
 8006370:	f10b 0b01 	add.w	fp, fp, #1
 8006374:	9019      	str	r0, [sp, #100]	; 0x64
 8006376:	e7be      	b.n	80062f6 <_strtod_l+0x146>
 8006378:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800637a:	191a      	adds	r2, r3, r4
 800637c:	9219      	str	r2, [sp, #100]	; 0x64
 800637e:	5d1a      	ldrb	r2, [r3, r4]
 8006380:	f1bb 0f00 	cmp.w	fp, #0
 8006384:	d036      	beq.n	80063f4 <_strtod_l+0x244>
 8006386:	465c      	mov	r4, fp
 8006388:	9004      	str	r0, [sp, #16]
 800638a:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800638e:	2b09      	cmp	r3, #9
 8006390:	d912      	bls.n	80063b8 <_strtod_l+0x208>
 8006392:	2301      	movs	r3, #1
 8006394:	e7c1      	b.n	800631a <_strtod_l+0x16a>
 8006396:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006398:	3001      	adds	r0, #1
 800639a:	1c5a      	adds	r2, r3, #1
 800639c:	9219      	str	r2, [sp, #100]	; 0x64
 800639e:	785a      	ldrb	r2, [r3, #1]
 80063a0:	2a30      	cmp	r2, #48	; 0x30
 80063a2:	d0f8      	beq.n	8006396 <_strtod_l+0x1e6>
 80063a4:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80063a8:	2b08      	cmp	r3, #8
 80063aa:	f200 84d5 	bhi.w	8006d58 <_strtod_l+0xba8>
 80063ae:	9004      	str	r0, [sp, #16]
 80063b0:	2000      	movs	r0, #0
 80063b2:	4604      	mov	r4, r0
 80063b4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80063b6:	9308      	str	r3, [sp, #32]
 80063b8:	3a30      	subs	r2, #48	; 0x30
 80063ba:	f100 0301 	add.w	r3, r0, #1
 80063be:	d013      	beq.n	80063e8 <_strtod_l+0x238>
 80063c0:	9904      	ldr	r1, [sp, #16]
 80063c2:	1905      	adds	r5, r0, r4
 80063c4:	4419      	add	r1, r3
 80063c6:	9104      	str	r1, [sp, #16]
 80063c8:	4623      	mov	r3, r4
 80063ca:	210a      	movs	r1, #10
 80063cc:	42ab      	cmp	r3, r5
 80063ce:	d113      	bne.n	80063f8 <_strtod_l+0x248>
 80063d0:	1823      	adds	r3, r4, r0
 80063d2:	2b08      	cmp	r3, #8
 80063d4:	f104 0401 	add.w	r4, r4, #1
 80063d8:	4404      	add	r4, r0
 80063da:	dc1b      	bgt.n	8006414 <_strtod_l+0x264>
 80063dc:	230a      	movs	r3, #10
 80063de:	9906      	ldr	r1, [sp, #24]
 80063e0:	fb03 2301 	mla	r3, r3, r1, r2
 80063e4:	9306      	str	r3, [sp, #24]
 80063e6:	2300      	movs	r3, #0
 80063e8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80063ea:	4618      	mov	r0, r3
 80063ec:	1c51      	adds	r1, r2, #1
 80063ee:	9119      	str	r1, [sp, #100]	; 0x64
 80063f0:	7852      	ldrb	r2, [r2, #1]
 80063f2:	e7ca      	b.n	800638a <_strtod_l+0x1da>
 80063f4:	4658      	mov	r0, fp
 80063f6:	e7d3      	b.n	80063a0 <_strtod_l+0x1f0>
 80063f8:	2b08      	cmp	r3, #8
 80063fa:	dc04      	bgt.n	8006406 <_strtod_l+0x256>
 80063fc:	9f06      	ldr	r7, [sp, #24]
 80063fe:	434f      	muls	r7, r1
 8006400:	9706      	str	r7, [sp, #24]
 8006402:	3301      	adds	r3, #1
 8006404:	e7e2      	b.n	80063cc <_strtod_l+0x21c>
 8006406:	1c5f      	adds	r7, r3, #1
 8006408:	2f10      	cmp	r7, #16
 800640a:	bfde      	ittt	le
 800640c:	9f05      	ldrle	r7, [sp, #20]
 800640e:	434f      	mulle	r7, r1
 8006410:	9705      	strle	r7, [sp, #20]
 8006412:	e7f6      	b.n	8006402 <_strtod_l+0x252>
 8006414:	2c10      	cmp	r4, #16
 8006416:	bfdf      	itttt	le
 8006418:	230a      	movle	r3, #10
 800641a:	9905      	ldrle	r1, [sp, #20]
 800641c:	fb03 2301 	mlale	r3, r3, r1, r2
 8006420:	9305      	strle	r3, [sp, #20]
 8006422:	e7e0      	b.n	80063e6 <_strtod_l+0x236>
 8006424:	2300      	movs	r3, #0
 8006426:	9304      	str	r3, [sp, #16]
 8006428:	2301      	movs	r3, #1
 800642a:	e77b      	b.n	8006324 <_strtod_l+0x174>
 800642c:	2700      	movs	r7, #0
 800642e:	1cb2      	adds	r2, r6, #2
 8006430:	9219      	str	r2, [sp, #100]	; 0x64
 8006432:	78b2      	ldrb	r2, [r6, #2]
 8006434:	e784      	b.n	8006340 <_strtod_l+0x190>
 8006436:	bf00      	nop
 8006438:	0800a750 	.word	0x0800a750
 800643c:	0800a504 	.word	0x0800a504
 8006440:	7ff00000 	.word	0x7ff00000
 8006444:	2701      	movs	r7, #1
 8006446:	e7f2      	b.n	800642e <_strtod_l+0x27e>
 8006448:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800644a:	1c51      	adds	r1, r2, #1
 800644c:	9119      	str	r1, [sp, #100]	; 0x64
 800644e:	7852      	ldrb	r2, [r2, #1]
 8006450:	2a30      	cmp	r2, #48	; 0x30
 8006452:	d0f9      	beq.n	8006448 <_strtod_l+0x298>
 8006454:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8006458:	2908      	cmp	r1, #8
 800645a:	f63f af77 	bhi.w	800634c <_strtod_l+0x19c>
 800645e:	f04f 0e0a 	mov.w	lr, #10
 8006462:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8006466:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006468:	9209      	str	r2, [sp, #36]	; 0x24
 800646a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800646c:	1c51      	adds	r1, r2, #1
 800646e:	9119      	str	r1, [sp, #100]	; 0x64
 8006470:	7852      	ldrb	r2, [r2, #1]
 8006472:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8006476:	2d09      	cmp	r5, #9
 8006478:	d935      	bls.n	80064e6 <_strtod_l+0x336>
 800647a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800647c:	1b49      	subs	r1, r1, r5
 800647e:	2908      	cmp	r1, #8
 8006480:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8006484:	dc02      	bgt.n	800648c <_strtod_l+0x2dc>
 8006486:	4565      	cmp	r5, ip
 8006488:	bfa8      	it	ge
 800648a:	4665      	movge	r5, ip
 800648c:	b107      	cbz	r7, 8006490 <_strtod_l+0x2e0>
 800648e:	426d      	negs	r5, r5
 8006490:	2c00      	cmp	r4, #0
 8006492:	d14c      	bne.n	800652e <_strtod_l+0x37e>
 8006494:	9907      	ldr	r1, [sp, #28]
 8006496:	4301      	orrs	r1, r0
 8006498:	f47f aecb 	bne.w	8006232 <_strtod_l+0x82>
 800649c:	2b00      	cmp	r3, #0
 800649e:	f47f aee4 	bne.w	800626a <_strtod_l+0xba>
 80064a2:	2a69      	cmp	r2, #105	; 0x69
 80064a4:	d026      	beq.n	80064f4 <_strtod_l+0x344>
 80064a6:	dc23      	bgt.n	80064f0 <_strtod_l+0x340>
 80064a8:	2a49      	cmp	r2, #73	; 0x49
 80064aa:	d023      	beq.n	80064f4 <_strtod_l+0x344>
 80064ac:	2a4e      	cmp	r2, #78	; 0x4e
 80064ae:	f47f aedc 	bne.w	800626a <_strtod_l+0xba>
 80064b2:	499d      	ldr	r1, [pc, #628]	; (8006728 <_strtod_l+0x578>)
 80064b4:	a819      	add	r0, sp, #100	; 0x64
 80064b6:	f001 fe3b 	bl	8008130 <__match>
 80064ba:	2800      	cmp	r0, #0
 80064bc:	f43f aed5 	beq.w	800626a <_strtod_l+0xba>
 80064c0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80064c2:	781b      	ldrb	r3, [r3, #0]
 80064c4:	2b28      	cmp	r3, #40	; 0x28
 80064c6:	d12c      	bne.n	8006522 <_strtod_l+0x372>
 80064c8:	4998      	ldr	r1, [pc, #608]	; (800672c <_strtod_l+0x57c>)
 80064ca:	aa1c      	add	r2, sp, #112	; 0x70
 80064cc:	a819      	add	r0, sp, #100	; 0x64
 80064ce:	f001 fe43 	bl	8008158 <__hexnan>
 80064d2:	2805      	cmp	r0, #5
 80064d4:	d125      	bne.n	8006522 <_strtod_l+0x372>
 80064d6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80064d8:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 80064dc:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80064e0:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80064e4:	e6a5      	b.n	8006232 <_strtod_l+0x82>
 80064e6:	fb0e 2c0c 	mla	ip, lr, ip, r2
 80064ea:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 80064ee:	e7bc      	b.n	800646a <_strtod_l+0x2ba>
 80064f0:	2a6e      	cmp	r2, #110	; 0x6e
 80064f2:	e7dc      	b.n	80064ae <_strtod_l+0x2fe>
 80064f4:	498e      	ldr	r1, [pc, #568]	; (8006730 <_strtod_l+0x580>)
 80064f6:	a819      	add	r0, sp, #100	; 0x64
 80064f8:	f001 fe1a 	bl	8008130 <__match>
 80064fc:	2800      	cmp	r0, #0
 80064fe:	f43f aeb4 	beq.w	800626a <_strtod_l+0xba>
 8006502:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006504:	498b      	ldr	r1, [pc, #556]	; (8006734 <_strtod_l+0x584>)
 8006506:	3b01      	subs	r3, #1
 8006508:	a819      	add	r0, sp, #100	; 0x64
 800650a:	9319      	str	r3, [sp, #100]	; 0x64
 800650c:	f001 fe10 	bl	8008130 <__match>
 8006510:	b910      	cbnz	r0, 8006518 <_strtod_l+0x368>
 8006512:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006514:	3301      	adds	r3, #1
 8006516:	9319      	str	r3, [sp, #100]	; 0x64
 8006518:	f04f 0800 	mov.w	r8, #0
 800651c:	f8df 9218 	ldr.w	r9, [pc, #536]	; 8006738 <_strtod_l+0x588>
 8006520:	e687      	b.n	8006232 <_strtod_l+0x82>
 8006522:	4886      	ldr	r0, [pc, #536]	; (800673c <_strtod_l+0x58c>)
 8006524:	f003 f93c 	bl	80097a0 <nan>
 8006528:	4680      	mov	r8, r0
 800652a:	4689      	mov	r9, r1
 800652c:	e681      	b.n	8006232 <_strtod_l+0x82>
 800652e:	9b04      	ldr	r3, [sp, #16]
 8006530:	f1bb 0f00 	cmp.w	fp, #0
 8006534:	bf08      	it	eq
 8006536:	46a3      	moveq	fp, r4
 8006538:	1aeb      	subs	r3, r5, r3
 800653a:	2c10      	cmp	r4, #16
 800653c:	9806      	ldr	r0, [sp, #24]
 800653e:	4626      	mov	r6, r4
 8006540:	9307      	str	r3, [sp, #28]
 8006542:	bfa8      	it	ge
 8006544:	2610      	movge	r6, #16
 8006546:	f7f9 ff4d 	bl	80003e4 <__aeabi_ui2d>
 800654a:	2c09      	cmp	r4, #9
 800654c:	4680      	mov	r8, r0
 800654e:	4689      	mov	r9, r1
 8006550:	dd13      	ble.n	800657a <_strtod_l+0x3ca>
 8006552:	4b7b      	ldr	r3, [pc, #492]	; (8006740 <_strtod_l+0x590>)
 8006554:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006558:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800655c:	f7f9 ffbc 	bl	80004d8 <__aeabi_dmul>
 8006560:	4680      	mov	r8, r0
 8006562:	9805      	ldr	r0, [sp, #20]
 8006564:	4689      	mov	r9, r1
 8006566:	f7f9 ff3d 	bl	80003e4 <__aeabi_ui2d>
 800656a:	4602      	mov	r2, r0
 800656c:	460b      	mov	r3, r1
 800656e:	4640      	mov	r0, r8
 8006570:	4649      	mov	r1, r9
 8006572:	f7f9 fdfb 	bl	800016c <__adddf3>
 8006576:	4680      	mov	r8, r0
 8006578:	4689      	mov	r9, r1
 800657a:	2c0f      	cmp	r4, #15
 800657c:	dc36      	bgt.n	80065ec <_strtod_l+0x43c>
 800657e:	9b07      	ldr	r3, [sp, #28]
 8006580:	2b00      	cmp	r3, #0
 8006582:	f43f ae56 	beq.w	8006232 <_strtod_l+0x82>
 8006586:	dd22      	ble.n	80065ce <_strtod_l+0x41e>
 8006588:	2b16      	cmp	r3, #22
 800658a:	dc09      	bgt.n	80065a0 <_strtod_l+0x3f0>
 800658c:	496c      	ldr	r1, [pc, #432]	; (8006740 <_strtod_l+0x590>)
 800658e:	4642      	mov	r2, r8
 8006590:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006594:	464b      	mov	r3, r9
 8006596:	e9d1 0100 	ldrd	r0, r1, [r1]
 800659a:	f7f9 ff9d 	bl	80004d8 <__aeabi_dmul>
 800659e:	e7c3      	b.n	8006528 <_strtod_l+0x378>
 80065a0:	9a07      	ldr	r2, [sp, #28]
 80065a2:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 80065a6:	4293      	cmp	r3, r2
 80065a8:	db20      	blt.n	80065ec <_strtod_l+0x43c>
 80065aa:	4d65      	ldr	r5, [pc, #404]	; (8006740 <_strtod_l+0x590>)
 80065ac:	f1c4 040f 	rsb	r4, r4, #15
 80065b0:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 80065b4:	4642      	mov	r2, r8
 80065b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80065ba:	464b      	mov	r3, r9
 80065bc:	f7f9 ff8c 	bl	80004d8 <__aeabi_dmul>
 80065c0:	9b07      	ldr	r3, [sp, #28]
 80065c2:	1b1c      	subs	r4, r3, r4
 80065c4:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 80065c8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80065cc:	e7e5      	b.n	800659a <_strtod_l+0x3ea>
 80065ce:	9b07      	ldr	r3, [sp, #28]
 80065d0:	3316      	adds	r3, #22
 80065d2:	db0b      	blt.n	80065ec <_strtod_l+0x43c>
 80065d4:	9b04      	ldr	r3, [sp, #16]
 80065d6:	4640      	mov	r0, r8
 80065d8:	1b5d      	subs	r5, r3, r5
 80065da:	4b59      	ldr	r3, [pc, #356]	; (8006740 <_strtod_l+0x590>)
 80065dc:	4649      	mov	r1, r9
 80065de:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80065e2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80065e6:	f7fa f8a1 	bl	800072c <__aeabi_ddiv>
 80065ea:	e79d      	b.n	8006528 <_strtod_l+0x378>
 80065ec:	9b07      	ldr	r3, [sp, #28]
 80065ee:	1ba6      	subs	r6, r4, r6
 80065f0:	441e      	add	r6, r3
 80065f2:	2e00      	cmp	r6, #0
 80065f4:	dd74      	ble.n	80066e0 <_strtod_l+0x530>
 80065f6:	f016 030f 	ands.w	r3, r6, #15
 80065fa:	d00a      	beq.n	8006612 <_strtod_l+0x462>
 80065fc:	4950      	ldr	r1, [pc, #320]	; (8006740 <_strtod_l+0x590>)
 80065fe:	4642      	mov	r2, r8
 8006600:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006604:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006608:	464b      	mov	r3, r9
 800660a:	f7f9 ff65 	bl	80004d8 <__aeabi_dmul>
 800660e:	4680      	mov	r8, r0
 8006610:	4689      	mov	r9, r1
 8006612:	f036 060f 	bics.w	r6, r6, #15
 8006616:	d052      	beq.n	80066be <_strtod_l+0x50e>
 8006618:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 800661c:	dd27      	ble.n	800666e <_strtod_l+0x4be>
 800661e:	f04f 0b00 	mov.w	fp, #0
 8006622:	f8cd b010 	str.w	fp, [sp, #16]
 8006626:	f8cd b020 	str.w	fp, [sp, #32]
 800662a:	f8cd b018 	str.w	fp, [sp, #24]
 800662e:	2322      	movs	r3, #34	; 0x22
 8006630:	f04f 0800 	mov.w	r8, #0
 8006634:	f8df 9100 	ldr.w	r9, [pc, #256]	; 8006738 <_strtod_l+0x588>
 8006638:	f8ca 3000 	str.w	r3, [sl]
 800663c:	9b08      	ldr	r3, [sp, #32]
 800663e:	2b00      	cmp	r3, #0
 8006640:	f43f adf7 	beq.w	8006232 <_strtod_l+0x82>
 8006644:	4650      	mov	r0, sl
 8006646:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006648:	f001 feae 	bl	80083a8 <_Bfree>
 800664c:	4650      	mov	r0, sl
 800664e:	9906      	ldr	r1, [sp, #24]
 8006650:	f001 feaa 	bl	80083a8 <_Bfree>
 8006654:	4650      	mov	r0, sl
 8006656:	9904      	ldr	r1, [sp, #16]
 8006658:	f001 fea6 	bl	80083a8 <_Bfree>
 800665c:	4650      	mov	r0, sl
 800665e:	9908      	ldr	r1, [sp, #32]
 8006660:	f001 fea2 	bl	80083a8 <_Bfree>
 8006664:	4659      	mov	r1, fp
 8006666:	4650      	mov	r0, sl
 8006668:	f001 fe9e 	bl	80083a8 <_Bfree>
 800666c:	e5e1      	b.n	8006232 <_strtod_l+0x82>
 800666e:	4b35      	ldr	r3, [pc, #212]	; (8006744 <_strtod_l+0x594>)
 8006670:	4640      	mov	r0, r8
 8006672:	9305      	str	r3, [sp, #20]
 8006674:	2300      	movs	r3, #0
 8006676:	4649      	mov	r1, r9
 8006678:	461f      	mov	r7, r3
 800667a:	1136      	asrs	r6, r6, #4
 800667c:	2e01      	cmp	r6, #1
 800667e:	dc21      	bgt.n	80066c4 <_strtod_l+0x514>
 8006680:	b10b      	cbz	r3, 8006686 <_strtod_l+0x4d6>
 8006682:	4680      	mov	r8, r0
 8006684:	4689      	mov	r9, r1
 8006686:	4b2f      	ldr	r3, [pc, #188]	; (8006744 <_strtod_l+0x594>)
 8006688:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800668c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8006690:	4642      	mov	r2, r8
 8006692:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006696:	464b      	mov	r3, r9
 8006698:	f7f9 ff1e 	bl	80004d8 <__aeabi_dmul>
 800669c:	4b26      	ldr	r3, [pc, #152]	; (8006738 <_strtod_l+0x588>)
 800669e:	460a      	mov	r2, r1
 80066a0:	400b      	ands	r3, r1
 80066a2:	4929      	ldr	r1, [pc, #164]	; (8006748 <_strtod_l+0x598>)
 80066a4:	4680      	mov	r8, r0
 80066a6:	428b      	cmp	r3, r1
 80066a8:	d8b9      	bhi.n	800661e <_strtod_l+0x46e>
 80066aa:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80066ae:	428b      	cmp	r3, r1
 80066b0:	bf86      	itte	hi
 80066b2:	f04f 38ff 	movhi.w	r8, #4294967295
 80066b6:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 800674c <_strtod_l+0x59c>
 80066ba:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 80066be:	2300      	movs	r3, #0
 80066c0:	9305      	str	r3, [sp, #20]
 80066c2:	e07f      	b.n	80067c4 <_strtod_l+0x614>
 80066c4:	07f2      	lsls	r2, r6, #31
 80066c6:	d505      	bpl.n	80066d4 <_strtod_l+0x524>
 80066c8:	9b05      	ldr	r3, [sp, #20]
 80066ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066ce:	f7f9 ff03 	bl	80004d8 <__aeabi_dmul>
 80066d2:	2301      	movs	r3, #1
 80066d4:	9a05      	ldr	r2, [sp, #20]
 80066d6:	3701      	adds	r7, #1
 80066d8:	3208      	adds	r2, #8
 80066da:	1076      	asrs	r6, r6, #1
 80066dc:	9205      	str	r2, [sp, #20]
 80066de:	e7cd      	b.n	800667c <_strtod_l+0x4cc>
 80066e0:	d0ed      	beq.n	80066be <_strtod_l+0x50e>
 80066e2:	4276      	negs	r6, r6
 80066e4:	f016 020f 	ands.w	r2, r6, #15
 80066e8:	d00a      	beq.n	8006700 <_strtod_l+0x550>
 80066ea:	4b15      	ldr	r3, [pc, #84]	; (8006740 <_strtod_l+0x590>)
 80066ec:	4640      	mov	r0, r8
 80066ee:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80066f2:	4649      	mov	r1, r9
 80066f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066f8:	f7fa f818 	bl	800072c <__aeabi_ddiv>
 80066fc:	4680      	mov	r8, r0
 80066fe:	4689      	mov	r9, r1
 8006700:	1136      	asrs	r6, r6, #4
 8006702:	d0dc      	beq.n	80066be <_strtod_l+0x50e>
 8006704:	2e1f      	cmp	r6, #31
 8006706:	dd23      	ble.n	8006750 <_strtod_l+0x5a0>
 8006708:	f04f 0b00 	mov.w	fp, #0
 800670c:	f8cd b010 	str.w	fp, [sp, #16]
 8006710:	f8cd b020 	str.w	fp, [sp, #32]
 8006714:	f8cd b018 	str.w	fp, [sp, #24]
 8006718:	2322      	movs	r3, #34	; 0x22
 800671a:	f04f 0800 	mov.w	r8, #0
 800671e:	f04f 0900 	mov.w	r9, #0
 8006722:	f8ca 3000 	str.w	r3, [sl]
 8006726:	e789      	b.n	800663c <_strtod_l+0x48c>
 8006728:	0800a4d9 	.word	0x0800a4d9
 800672c:	0800a518 	.word	0x0800a518
 8006730:	0800a4d1 	.word	0x0800a4d1
 8006734:	0800a65c 	.word	0x0800a65c
 8006738:	7ff00000 	.word	0x7ff00000
 800673c:	0800a923 	.word	0x0800a923
 8006740:	0800a7e8 	.word	0x0800a7e8
 8006744:	0800a7c0 	.word	0x0800a7c0
 8006748:	7ca00000 	.word	0x7ca00000
 800674c:	7fefffff 	.word	0x7fefffff
 8006750:	f016 0310 	ands.w	r3, r6, #16
 8006754:	bf18      	it	ne
 8006756:	236a      	movne	r3, #106	; 0x6a
 8006758:	4640      	mov	r0, r8
 800675a:	9305      	str	r3, [sp, #20]
 800675c:	4649      	mov	r1, r9
 800675e:	2300      	movs	r3, #0
 8006760:	4fb0      	ldr	r7, [pc, #704]	; (8006a24 <_strtod_l+0x874>)
 8006762:	07f2      	lsls	r2, r6, #31
 8006764:	d504      	bpl.n	8006770 <_strtod_l+0x5c0>
 8006766:	e9d7 2300 	ldrd	r2, r3, [r7]
 800676a:	f7f9 feb5 	bl	80004d8 <__aeabi_dmul>
 800676e:	2301      	movs	r3, #1
 8006770:	1076      	asrs	r6, r6, #1
 8006772:	f107 0708 	add.w	r7, r7, #8
 8006776:	d1f4      	bne.n	8006762 <_strtod_l+0x5b2>
 8006778:	b10b      	cbz	r3, 800677e <_strtod_l+0x5ce>
 800677a:	4680      	mov	r8, r0
 800677c:	4689      	mov	r9, r1
 800677e:	9b05      	ldr	r3, [sp, #20]
 8006780:	b1c3      	cbz	r3, 80067b4 <_strtod_l+0x604>
 8006782:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8006786:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800678a:	2b00      	cmp	r3, #0
 800678c:	4649      	mov	r1, r9
 800678e:	dd11      	ble.n	80067b4 <_strtod_l+0x604>
 8006790:	2b1f      	cmp	r3, #31
 8006792:	f340 8127 	ble.w	80069e4 <_strtod_l+0x834>
 8006796:	2b34      	cmp	r3, #52	; 0x34
 8006798:	bfd8      	it	le
 800679a:	f04f 33ff 	movle.w	r3, #4294967295
 800679e:	f04f 0800 	mov.w	r8, #0
 80067a2:	bfcf      	iteee	gt
 80067a4:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80067a8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80067ac:	fa03 f202 	lslle.w	r2, r3, r2
 80067b0:	ea02 0901 	andle.w	r9, r2, r1
 80067b4:	2200      	movs	r2, #0
 80067b6:	2300      	movs	r3, #0
 80067b8:	4640      	mov	r0, r8
 80067ba:	4649      	mov	r1, r9
 80067bc:	f7fa f8f4 	bl	80009a8 <__aeabi_dcmpeq>
 80067c0:	2800      	cmp	r0, #0
 80067c2:	d1a1      	bne.n	8006708 <_strtod_l+0x558>
 80067c4:	9b06      	ldr	r3, [sp, #24]
 80067c6:	465a      	mov	r2, fp
 80067c8:	9300      	str	r3, [sp, #0]
 80067ca:	4650      	mov	r0, sl
 80067cc:	4623      	mov	r3, r4
 80067ce:	9908      	ldr	r1, [sp, #32]
 80067d0:	f001 fe52 	bl	8008478 <__s2b>
 80067d4:	9008      	str	r0, [sp, #32]
 80067d6:	2800      	cmp	r0, #0
 80067d8:	f43f af21 	beq.w	800661e <_strtod_l+0x46e>
 80067dc:	9b04      	ldr	r3, [sp, #16]
 80067de:	f04f 0b00 	mov.w	fp, #0
 80067e2:	1b5d      	subs	r5, r3, r5
 80067e4:	9b07      	ldr	r3, [sp, #28]
 80067e6:	f8cd b010 	str.w	fp, [sp, #16]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	bfb4      	ite	lt
 80067ee:	462b      	movlt	r3, r5
 80067f0:	2300      	movge	r3, #0
 80067f2:	930e      	str	r3, [sp, #56]	; 0x38
 80067f4:	9b07      	ldr	r3, [sp, #28]
 80067f6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80067fa:	9314      	str	r3, [sp, #80]	; 0x50
 80067fc:	9b08      	ldr	r3, [sp, #32]
 80067fe:	4650      	mov	r0, sl
 8006800:	6859      	ldr	r1, [r3, #4]
 8006802:	f001 fd91 	bl	8008328 <_Balloc>
 8006806:	9006      	str	r0, [sp, #24]
 8006808:	2800      	cmp	r0, #0
 800680a:	f43f af10 	beq.w	800662e <_strtod_l+0x47e>
 800680e:	9b08      	ldr	r3, [sp, #32]
 8006810:	300c      	adds	r0, #12
 8006812:	691a      	ldr	r2, [r3, #16]
 8006814:	f103 010c 	add.w	r1, r3, #12
 8006818:	3202      	adds	r2, #2
 800681a:	0092      	lsls	r2, r2, #2
 800681c:	f001 fd76 	bl	800830c <memcpy>
 8006820:	ab1c      	add	r3, sp, #112	; 0x70
 8006822:	9301      	str	r3, [sp, #4]
 8006824:	ab1b      	add	r3, sp, #108	; 0x6c
 8006826:	9300      	str	r3, [sp, #0]
 8006828:	4642      	mov	r2, r8
 800682a:	464b      	mov	r3, r9
 800682c:	4650      	mov	r0, sl
 800682e:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 8006832:	f002 f963 	bl	8008afc <__d2b>
 8006836:	901a      	str	r0, [sp, #104]	; 0x68
 8006838:	2800      	cmp	r0, #0
 800683a:	f43f aef8 	beq.w	800662e <_strtod_l+0x47e>
 800683e:	2101      	movs	r1, #1
 8006840:	4650      	mov	r0, sl
 8006842:	f001 feb1 	bl	80085a8 <__i2b>
 8006846:	4603      	mov	r3, r0
 8006848:	9004      	str	r0, [sp, #16]
 800684a:	2800      	cmp	r0, #0
 800684c:	f43f aeef 	beq.w	800662e <_strtod_l+0x47e>
 8006850:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8006852:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8006854:	2d00      	cmp	r5, #0
 8006856:	bfab      	itete	ge
 8006858:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800685a:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 800685c:	18ee      	addge	r6, r5, r3
 800685e:	1b5c      	sublt	r4, r3, r5
 8006860:	9b05      	ldr	r3, [sp, #20]
 8006862:	bfa8      	it	ge
 8006864:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 8006866:	eba5 0503 	sub.w	r5, r5, r3
 800686a:	4415      	add	r5, r2
 800686c:	4b6e      	ldr	r3, [pc, #440]	; (8006a28 <_strtod_l+0x878>)
 800686e:	f105 35ff 	add.w	r5, r5, #4294967295
 8006872:	bfb8      	it	lt
 8006874:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8006876:	429d      	cmp	r5, r3
 8006878:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800687c:	f280 80c4 	bge.w	8006a08 <_strtod_l+0x858>
 8006880:	1b5b      	subs	r3, r3, r5
 8006882:	2b1f      	cmp	r3, #31
 8006884:	f04f 0701 	mov.w	r7, #1
 8006888:	eba2 0203 	sub.w	r2, r2, r3
 800688c:	f300 80b1 	bgt.w	80069f2 <_strtod_l+0x842>
 8006890:	2500      	movs	r5, #0
 8006892:	fa07 f303 	lsl.w	r3, r7, r3
 8006896:	930f      	str	r3, [sp, #60]	; 0x3c
 8006898:	18b7      	adds	r7, r6, r2
 800689a:	9b05      	ldr	r3, [sp, #20]
 800689c:	42be      	cmp	r6, r7
 800689e:	4414      	add	r4, r2
 80068a0:	441c      	add	r4, r3
 80068a2:	4633      	mov	r3, r6
 80068a4:	bfa8      	it	ge
 80068a6:	463b      	movge	r3, r7
 80068a8:	42a3      	cmp	r3, r4
 80068aa:	bfa8      	it	ge
 80068ac:	4623      	movge	r3, r4
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	bfc2      	ittt	gt
 80068b2:	1aff      	subgt	r7, r7, r3
 80068b4:	1ae4      	subgt	r4, r4, r3
 80068b6:	1af6      	subgt	r6, r6, r3
 80068b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	dd17      	ble.n	80068ee <_strtod_l+0x73e>
 80068be:	461a      	mov	r2, r3
 80068c0:	4650      	mov	r0, sl
 80068c2:	9904      	ldr	r1, [sp, #16]
 80068c4:	f001 ff2e 	bl	8008724 <__pow5mult>
 80068c8:	9004      	str	r0, [sp, #16]
 80068ca:	2800      	cmp	r0, #0
 80068cc:	f43f aeaf 	beq.w	800662e <_strtod_l+0x47e>
 80068d0:	4601      	mov	r1, r0
 80068d2:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80068d4:	4650      	mov	r0, sl
 80068d6:	f001 fe7d 	bl	80085d4 <__multiply>
 80068da:	9009      	str	r0, [sp, #36]	; 0x24
 80068dc:	2800      	cmp	r0, #0
 80068de:	f43f aea6 	beq.w	800662e <_strtod_l+0x47e>
 80068e2:	4650      	mov	r0, sl
 80068e4:	991a      	ldr	r1, [sp, #104]	; 0x68
 80068e6:	f001 fd5f 	bl	80083a8 <_Bfree>
 80068ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068ec:	931a      	str	r3, [sp, #104]	; 0x68
 80068ee:	2f00      	cmp	r7, #0
 80068f0:	f300 808e 	bgt.w	8006a10 <_strtod_l+0x860>
 80068f4:	9b07      	ldr	r3, [sp, #28]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	dd08      	ble.n	800690c <_strtod_l+0x75c>
 80068fa:	4650      	mov	r0, sl
 80068fc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80068fe:	9906      	ldr	r1, [sp, #24]
 8006900:	f001 ff10 	bl	8008724 <__pow5mult>
 8006904:	9006      	str	r0, [sp, #24]
 8006906:	2800      	cmp	r0, #0
 8006908:	f43f ae91 	beq.w	800662e <_strtod_l+0x47e>
 800690c:	2c00      	cmp	r4, #0
 800690e:	dd08      	ble.n	8006922 <_strtod_l+0x772>
 8006910:	4622      	mov	r2, r4
 8006912:	4650      	mov	r0, sl
 8006914:	9906      	ldr	r1, [sp, #24]
 8006916:	f001 ff5f 	bl	80087d8 <__lshift>
 800691a:	9006      	str	r0, [sp, #24]
 800691c:	2800      	cmp	r0, #0
 800691e:	f43f ae86 	beq.w	800662e <_strtod_l+0x47e>
 8006922:	2e00      	cmp	r6, #0
 8006924:	dd08      	ble.n	8006938 <_strtod_l+0x788>
 8006926:	4632      	mov	r2, r6
 8006928:	4650      	mov	r0, sl
 800692a:	9904      	ldr	r1, [sp, #16]
 800692c:	f001 ff54 	bl	80087d8 <__lshift>
 8006930:	9004      	str	r0, [sp, #16]
 8006932:	2800      	cmp	r0, #0
 8006934:	f43f ae7b 	beq.w	800662e <_strtod_l+0x47e>
 8006938:	4650      	mov	r0, sl
 800693a:	9a06      	ldr	r2, [sp, #24]
 800693c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800693e:	f001 ffd7 	bl	80088f0 <__mdiff>
 8006942:	4683      	mov	fp, r0
 8006944:	2800      	cmp	r0, #0
 8006946:	f43f ae72 	beq.w	800662e <_strtod_l+0x47e>
 800694a:	2400      	movs	r4, #0
 800694c:	68c3      	ldr	r3, [r0, #12]
 800694e:	9904      	ldr	r1, [sp, #16]
 8006950:	60c4      	str	r4, [r0, #12]
 8006952:	930b      	str	r3, [sp, #44]	; 0x2c
 8006954:	f001 ffb0 	bl	80088b8 <__mcmp>
 8006958:	42a0      	cmp	r0, r4
 800695a:	da6b      	bge.n	8006a34 <_strtod_l+0x884>
 800695c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800695e:	ea53 0308 	orrs.w	r3, r3, r8
 8006962:	f040 8091 	bne.w	8006a88 <_strtod_l+0x8d8>
 8006966:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800696a:	2b00      	cmp	r3, #0
 800696c:	f040 808c 	bne.w	8006a88 <_strtod_l+0x8d8>
 8006970:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006974:	0d1b      	lsrs	r3, r3, #20
 8006976:	051b      	lsls	r3, r3, #20
 8006978:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800697c:	f240 8084 	bls.w	8006a88 <_strtod_l+0x8d8>
 8006980:	f8db 3014 	ldr.w	r3, [fp, #20]
 8006984:	b91b      	cbnz	r3, 800698e <_strtod_l+0x7de>
 8006986:	f8db 3010 	ldr.w	r3, [fp, #16]
 800698a:	2b01      	cmp	r3, #1
 800698c:	dd7c      	ble.n	8006a88 <_strtod_l+0x8d8>
 800698e:	4659      	mov	r1, fp
 8006990:	2201      	movs	r2, #1
 8006992:	4650      	mov	r0, sl
 8006994:	f001 ff20 	bl	80087d8 <__lshift>
 8006998:	9904      	ldr	r1, [sp, #16]
 800699a:	4683      	mov	fp, r0
 800699c:	f001 ff8c 	bl	80088b8 <__mcmp>
 80069a0:	2800      	cmp	r0, #0
 80069a2:	dd71      	ble.n	8006a88 <_strtod_l+0x8d8>
 80069a4:	9905      	ldr	r1, [sp, #20]
 80069a6:	464b      	mov	r3, r9
 80069a8:	4a20      	ldr	r2, [pc, #128]	; (8006a2c <_strtod_l+0x87c>)
 80069aa:	2900      	cmp	r1, #0
 80069ac:	f000 808c 	beq.w	8006ac8 <_strtod_l+0x918>
 80069b0:	ea02 0109 	and.w	r1, r2, r9
 80069b4:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80069b8:	f300 8086 	bgt.w	8006ac8 <_strtod_l+0x918>
 80069bc:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80069c0:	f77f aeaa 	ble.w	8006718 <_strtod_l+0x568>
 80069c4:	4640      	mov	r0, r8
 80069c6:	4649      	mov	r1, r9
 80069c8:	4b19      	ldr	r3, [pc, #100]	; (8006a30 <_strtod_l+0x880>)
 80069ca:	2200      	movs	r2, #0
 80069cc:	f7f9 fd84 	bl	80004d8 <__aeabi_dmul>
 80069d0:	460b      	mov	r3, r1
 80069d2:	4303      	orrs	r3, r0
 80069d4:	bf08      	it	eq
 80069d6:	2322      	moveq	r3, #34	; 0x22
 80069d8:	4680      	mov	r8, r0
 80069da:	4689      	mov	r9, r1
 80069dc:	bf08      	it	eq
 80069de:	f8ca 3000 	streq.w	r3, [sl]
 80069e2:	e62f      	b.n	8006644 <_strtod_l+0x494>
 80069e4:	f04f 32ff 	mov.w	r2, #4294967295
 80069e8:	fa02 f303 	lsl.w	r3, r2, r3
 80069ec:	ea03 0808 	and.w	r8, r3, r8
 80069f0:	e6e0      	b.n	80067b4 <_strtod_l+0x604>
 80069f2:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 80069f6:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 80069fa:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 80069fe:	35e2      	adds	r5, #226	; 0xe2
 8006a00:	fa07 f505 	lsl.w	r5, r7, r5
 8006a04:	970f      	str	r7, [sp, #60]	; 0x3c
 8006a06:	e747      	b.n	8006898 <_strtod_l+0x6e8>
 8006a08:	2301      	movs	r3, #1
 8006a0a:	2500      	movs	r5, #0
 8006a0c:	930f      	str	r3, [sp, #60]	; 0x3c
 8006a0e:	e743      	b.n	8006898 <_strtod_l+0x6e8>
 8006a10:	463a      	mov	r2, r7
 8006a12:	4650      	mov	r0, sl
 8006a14:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006a16:	f001 fedf 	bl	80087d8 <__lshift>
 8006a1a:	901a      	str	r0, [sp, #104]	; 0x68
 8006a1c:	2800      	cmp	r0, #0
 8006a1e:	f47f af69 	bne.w	80068f4 <_strtod_l+0x744>
 8006a22:	e604      	b.n	800662e <_strtod_l+0x47e>
 8006a24:	0800a530 	.word	0x0800a530
 8006a28:	fffffc02 	.word	0xfffffc02
 8006a2c:	7ff00000 	.word	0x7ff00000
 8006a30:	39500000 	.word	0x39500000
 8006a34:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8006a38:	d165      	bne.n	8006b06 <_strtod_l+0x956>
 8006a3a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006a3c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006a40:	b35a      	cbz	r2, 8006a9a <_strtod_l+0x8ea>
 8006a42:	4a99      	ldr	r2, [pc, #612]	; (8006ca8 <_strtod_l+0xaf8>)
 8006a44:	4293      	cmp	r3, r2
 8006a46:	d12b      	bne.n	8006aa0 <_strtod_l+0x8f0>
 8006a48:	9b05      	ldr	r3, [sp, #20]
 8006a4a:	4641      	mov	r1, r8
 8006a4c:	b303      	cbz	r3, 8006a90 <_strtod_l+0x8e0>
 8006a4e:	464a      	mov	r2, r9
 8006a50:	4b96      	ldr	r3, [pc, #600]	; (8006cac <_strtod_l+0xafc>)
 8006a52:	4013      	ands	r3, r2
 8006a54:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006a58:	f04f 32ff 	mov.w	r2, #4294967295
 8006a5c:	d81b      	bhi.n	8006a96 <_strtod_l+0x8e6>
 8006a5e:	0d1b      	lsrs	r3, r3, #20
 8006a60:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006a64:	fa02 f303 	lsl.w	r3, r2, r3
 8006a68:	4299      	cmp	r1, r3
 8006a6a:	d119      	bne.n	8006aa0 <_strtod_l+0x8f0>
 8006a6c:	4b90      	ldr	r3, [pc, #576]	; (8006cb0 <_strtod_l+0xb00>)
 8006a6e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006a70:	429a      	cmp	r2, r3
 8006a72:	d102      	bne.n	8006a7a <_strtod_l+0x8ca>
 8006a74:	3101      	adds	r1, #1
 8006a76:	f43f adda 	beq.w	800662e <_strtod_l+0x47e>
 8006a7a:	f04f 0800 	mov.w	r8, #0
 8006a7e:	4b8b      	ldr	r3, [pc, #556]	; (8006cac <_strtod_l+0xafc>)
 8006a80:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006a82:	401a      	ands	r2, r3
 8006a84:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 8006a88:	9b05      	ldr	r3, [sp, #20]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d19a      	bne.n	80069c4 <_strtod_l+0x814>
 8006a8e:	e5d9      	b.n	8006644 <_strtod_l+0x494>
 8006a90:	f04f 33ff 	mov.w	r3, #4294967295
 8006a94:	e7e8      	b.n	8006a68 <_strtod_l+0x8b8>
 8006a96:	4613      	mov	r3, r2
 8006a98:	e7e6      	b.n	8006a68 <_strtod_l+0x8b8>
 8006a9a:	ea53 0308 	orrs.w	r3, r3, r8
 8006a9e:	d081      	beq.n	80069a4 <_strtod_l+0x7f4>
 8006aa0:	b1e5      	cbz	r5, 8006adc <_strtod_l+0x92c>
 8006aa2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006aa4:	421d      	tst	r5, r3
 8006aa6:	d0ef      	beq.n	8006a88 <_strtod_l+0x8d8>
 8006aa8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006aaa:	4640      	mov	r0, r8
 8006aac:	4649      	mov	r1, r9
 8006aae:	9a05      	ldr	r2, [sp, #20]
 8006ab0:	b1c3      	cbz	r3, 8006ae4 <_strtod_l+0x934>
 8006ab2:	f7ff fb5a 	bl	800616a <sulp>
 8006ab6:	4602      	mov	r2, r0
 8006ab8:	460b      	mov	r3, r1
 8006aba:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006abe:	f7f9 fb55 	bl	800016c <__adddf3>
 8006ac2:	4680      	mov	r8, r0
 8006ac4:	4689      	mov	r9, r1
 8006ac6:	e7df      	b.n	8006a88 <_strtod_l+0x8d8>
 8006ac8:	4013      	ands	r3, r2
 8006aca:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8006ace:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8006ad2:	f04f 38ff 	mov.w	r8, #4294967295
 8006ad6:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8006ada:	e7d5      	b.n	8006a88 <_strtod_l+0x8d8>
 8006adc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006ade:	ea13 0f08 	tst.w	r3, r8
 8006ae2:	e7e0      	b.n	8006aa6 <_strtod_l+0x8f6>
 8006ae4:	f7ff fb41 	bl	800616a <sulp>
 8006ae8:	4602      	mov	r2, r0
 8006aea:	460b      	mov	r3, r1
 8006aec:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006af0:	f7f9 fb3a 	bl	8000168 <__aeabi_dsub>
 8006af4:	2200      	movs	r2, #0
 8006af6:	2300      	movs	r3, #0
 8006af8:	4680      	mov	r8, r0
 8006afa:	4689      	mov	r9, r1
 8006afc:	f7f9 ff54 	bl	80009a8 <__aeabi_dcmpeq>
 8006b00:	2800      	cmp	r0, #0
 8006b02:	d0c1      	beq.n	8006a88 <_strtod_l+0x8d8>
 8006b04:	e608      	b.n	8006718 <_strtod_l+0x568>
 8006b06:	4658      	mov	r0, fp
 8006b08:	9904      	ldr	r1, [sp, #16]
 8006b0a:	f002 f853 	bl	8008bb4 <__ratio>
 8006b0e:	2200      	movs	r2, #0
 8006b10:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006b14:	4606      	mov	r6, r0
 8006b16:	460f      	mov	r7, r1
 8006b18:	f7f9 ff5a 	bl	80009d0 <__aeabi_dcmple>
 8006b1c:	2800      	cmp	r0, #0
 8006b1e:	d070      	beq.n	8006c02 <_strtod_l+0xa52>
 8006b20:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d042      	beq.n	8006bac <_strtod_l+0x9fc>
 8006b26:	2600      	movs	r6, #0
 8006b28:	4f62      	ldr	r7, [pc, #392]	; (8006cb4 <_strtod_l+0xb04>)
 8006b2a:	4d62      	ldr	r5, [pc, #392]	; (8006cb4 <_strtod_l+0xb04>)
 8006b2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b2e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006b32:	0d1b      	lsrs	r3, r3, #20
 8006b34:	051b      	lsls	r3, r3, #20
 8006b36:	930f      	str	r3, [sp, #60]	; 0x3c
 8006b38:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006b3a:	4b5f      	ldr	r3, [pc, #380]	; (8006cb8 <_strtod_l+0xb08>)
 8006b3c:	429a      	cmp	r2, r3
 8006b3e:	f040 80c3 	bne.w	8006cc8 <_strtod_l+0xb18>
 8006b42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b44:	4640      	mov	r0, r8
 8006b46:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 8006b4a:	4649      	mov	r1, r9
 8006b4c:	f001 ff5c 	bl	8008a08 <__ulp>
 8006b50:	4602      	mov	r2, r0
 8006b52:	460b      	mov	r3, r1
 8006b54:	4630      	mov	r0, r6
 8006b56:	4639      	mov	r1, r7
 8006b58:	f7f9 fcbe 	bl	80004d8 <__aeabi_dmul>
 8006b5c:	4642      	mov	r2, r8
 8006b5e:	464b      	mov	r3, r9
 8006b60:	f7f9 fb04 	bl	800016c <__adddf3>
 8006b64:	460b      	mov	r3, r1
 8006b66:	4951      	ldr	r1, [pc, #324]	; (8006cac <_strtod_l+0xafc>)
 8006b68:	4a54      	ldr	r2, [pc, #336]	; (8006cbc <_strtod_l+0xb0c>)
 8006b6a:	4019      	ands	r1, r3
 8006b6c:	4291      	cmp	r1, r2
 8006b6e:	4680      	mov	r8, r0
 8006b70:	d95d      	bls.n	8006c2e <_strtod_l+0xa7e>
 8006b72:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006b74:	4b4e      	ldr	r3, [pc, #312]	; (8006cb0 <_strtod_l+0xb00>)
 8006b76:	429a      	cmp	r2, r3
 8006b78:	d103      	bne.n	8006b82 <_strtod_l+0x9d2>
 8006b7a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006b7c:	3301      	adds	r3, #1
 8006b7e:	f43f ad56 	beq.w	800662e <_strtod_l+0x47e>
 8006b82:	f04f 38ff 	mov.w	r8, #4294967295
 8006b86:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8006cb0 <_strtod_l+0xb00>
 8006b8a:	4650      	mov	r0, sl
 8006b8c:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006b8e:	f001 fc0b 	bl	80083a8 <_Bfree>
 8006b92:	4650      	mov	r0, sl
 8006b94:	9906      	ldr	r1, [sp, #24]
 8006b96:	f001 fc07 	bl	80083a8 <_Bfree>
 8006b9a:	4650      	mov	r0, sl
 8006b9c:	9904      	ldr	r1, [sp, #16]
 8006b9e:	f001 fc03 	bl	80083a8 <_Bfree>
 8006ba2:	4659      	mov	r1, fp
 8006ba4:	4650      	mov	r0, sl
 8006ba6:	f001 fbff 	bl	80083a8 <_Bfree>
 8006baa:	e627      	b.n	80067fc <_strtod_l+0x64c>
 8006bac:	f1b8 0f00 	cmp.w	r8, #0
 8006bb0:	d119      	bne.n	8006be6 <_strtod_l+0xa36>
 8006bb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006bb4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006bb8:	b9e3      	cbnz	r3, 8006bf4 <_strtod_l+0xa44>
 8006bba:	2200      	movs	r2, #0
 8006bbc:	4630      	mov	r0, r6
 8006bbe:	4639      	mov	r1, r7
 8006bc0:	4b3c      	ldr	r3, [pc, #240]	; (8006cb4 <_strtod_l+0xb04>)
 8006bc2:	f7f9 fefb 	bl	80009bc <__aeabi_dcmplt>
 8006bc6:	b9c8      	cbnz	r0, 8006bfc <_strtod_l+0xa4c>
 8006bc8:	2200      	movs	r2, #0
 8006bca:	4630      	mov	r0, r6
 8006bcc:	4639      	mov	r1, r7
 8006bce:	4b3c      	ldr	r3, [pc, #240]	; (8006cc0 <_strtod_l+0xb10>)
 8006bd0:	f7f9 fc82 	bl	80004d8 <__aeabi_dmul>
 8006bd4:	4604      	mov	r4, r0
 8006bd6:	460d      	mov	r5, r1
 8006bd8:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8006bdc:	9416      	str	r4, [sp, #88]	; 0x58
 8006bde:	9317      	str	r3, [sp, #92]	; 0x5c
 8006be0:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 8006be4:	e7a2      	b.n	8006b2c <_strtod_l+0x97c>
 8006be6:	f1b8 0f01 	cmp.w	r8, #1
 8006bea:	d103      	bne.n	8006bf4 <_strtod_l+0xa44>
 8006bec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	f43f ad92 	beq.w	8006718 <_strtod_l+0x568>
 8006bf4:	2600      	movs	r6, #0
 8006bf6:	2400      	movs	r4, #0
 8006bf8:	4f32      	ldr	r7, [pc, #200]	; (8006cc4 <_strtod_l+0xb14>)
 8006bfa:	e796      	b.n	8006b2a <_strtod_l+0x97a>
 8006bfc:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8006bfe:	4d30      	ldr	r5, [pc, #192]	; (8006cc0 <_strtod_l+0xb10>)
 8006c00:	e7ea      	b.n	8006bd8 <_strtod_l+0xa28>
 8006c02:	4b2f      	ldr	r3, [pc, #188]	; (8006cc0 <_strtod_l+0xb10>)
 8006c04:	2200      	movs	r2, #0
 8006c06:	4630      	mov	r0, r6
 8006c08:	4639      	mov	r1, r7
 8006c0a:	f7f9 fc65 	bl	80004d8 <__aeabi_dmul>
 8006c0e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006c10:	4604      	mov	r4, r0
 8006c12:	460d      	mov	r5, r1
 8006c14:	b933      	cbnz	r3, 8006c24 <_strtod_l+0xa74>
 8006c16:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006c1a:	9010      	str	r0, [sp, #64]	; 0x40
 8006c1c:	9311      	str	r3, [sp, #68]	; 0x44
 8006c1e:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8006c22:	e783      	b.n	8006b2c <_strtod_l+0x97c>
 8006c24:	4602      	mov	r2, r0
 8006c26:	460b      	mov	r3, r1
 8006c28:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8006c2c:	e7f7      	b.n	8006c1e <_strtod_l+0xa6e>
 8006c2e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8006c32:	9b05      	ldr	r3, [sp, #20]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d1a8      	bne.n	8006b8a <_strtod_l+0x9da>
 8006c38:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006c3c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006c3e:	0d1b      	lsrs	r3, r3, #20
 8006c40:	051b      	lsls	r3, r3, #20
 8006c42:	429a      	cmp	r2, r3
 8006c44:	d1a1      	bne.n	8006b8a <_strtod_l+0x9da>
 8006c46:	4620      	mov	r0, r4
 8006c48:	4629      	mov	r1, r5
 8006c4a:	f7fa faa7 	bl	800119c <__aeabi_d2lz>
 8006c4e:	f7f9 fc15 	bl	800047c <__aeabi_l2d>
 8006c52:	4602      	mov	r2, r0
 8006c54:	460b      	mov	r3, r1
 8006c56:	4620      	mov	r0, r4
 8006c58:	4629      	mov	r1, r5
 8006c5a:	f7f9 fa85 	bl	8000168 <__aeabi_dsub>
 8006c5e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006c60:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006c64:	ea43 0308 	orr.w	r3, r3, r8
 8006c68:	4313      	orrs	r3, r2
 8006c6a:	4604      	mov	r4, r0
 8006c6c:	460d      	mov	r5, r1
 8006c6e:	d066      	beq.n	8006d3e <_strtod_l+0xb8e>
 8006c70:	a309      	add	r3, pc, #36	; (adr r3, 8006c98 <_strtod_l+0xae8>)
 8006c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c76:	f7f9 fea1 	bl	80009bc <__aeabi_dcmplt>
 8006c7a:	2800      	cmp	r0, #0
 8006c7c:	f47f ace2 	bne.w	8006644 <_strtod_l+0x494>
 8006c80:	a307      	add	r3, pc, #28	; (adr r3, 8006ca0 <_strtod_l+0xaf0>)
 8006c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c86:	4620      	mov	r0, r4
 8006c88:	4629      	mov	r1, r5
 8006c8a:	f7f9 feb5 	bl	80009f8 <__aeabi_dcmpgt>
 8006c8e:	2800      	cmp	r0, #0
 8006c90:	f43f af7b 	beq.w	8006b8a <_strtod_l+0x9da>
 8006c94:	e4d6      	b.n	8006644 <_strtod_l+0x494>
 8006c96:	bf00      	nop
 8006c98:	94a03595 	.word	0x94a03595
 8006c9c:	3fdfffff 	.word	0x3fdfffff
 8006ca0:	35afe535 	.word	0x35afe535
 8006ca4:	3fe00000 	.word	0x3fe00000
 8006ca8:	000fffff 	.word	0x000fffff
 8006cac:	7ff00000 	.word	0x7ff00000
 8006cb0:	7fefffff 	.word	0x7fefffff
 8006cb4:	3ff00000 	.word	0x3ff00000
 8006cb8:	7fe00000 	.word	0x7fe00000
 8006cbc:	7c9fffff 	.word	0x7c9fffff
 8006cc0:	3fe00000 	.word	0x3fe00000
 8006cc4:	bff00000 	.word	0xbff00000
 8006cc8:	9b05      	ldr	r3, [sp, #20]
 8006cca:	b313      	cbz	r3, 8006d12 <_strtod_l+0xb62>
 8006ccc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006cce:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006cd2:	d81e      	bhi.n	8006d12 <_strtod_l+0xb62>
 8006cd4:	a326      	add	r3, pc, #152	; (adr r3, 8006d70 <_strtod_l+0xbc0>)
 8006cd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cda:	4620      	mov	r0, r4
 8006cdc:	4629      	mov	r1, r5
 8006cde:	f7f9 fe77 	bl	80009d0 <__aeabi_dcmple>
 8006ce2:	b190      	cbz	r0, 8006d0a <_strtod_l+0xb5a>
 8006ce4:	4629      	mov	r1, r5
 8006ce6:	4620      	mov	r0, r4
 8006ce8:	f7f9 fece 	bl	8000a88 <__aeabi_d2uiz>
 8006cec:	2801      	cmp	r0, #1
 8006cee:	bf38      	it	cc
 8006cf0:	2001      	movcc	r0, #1
 8006cf2:	f7f9 fb77 	bl	80003e4 <__aeabi_ui2d>
 8006cf6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006cf8:	4604      	mov	r4, r0
 8006cfa:	460d      	mov	r5, r1
 8006cfc:	b9d3      	cbnz	r3, 8006d34 <_strtod_l+0xb84>
 8006cfe:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006d02:	9012      	str	r0, [sp, #72]	; 0x48
 8006d04:	9313      	str	r3, [sp, #76]	; 0x4c
 8006d06:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8006d0a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006d0c:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8006d10:	1a9f      	subs	r7, r3, r2
 8006d12:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006d16:	f001 fe77 	bl	8008a08 <__ulp>
 8006d1a:	4602      	mov	r2, r0
 8006d1c:	460b      	mov	r3, r1
 8006d1e:	4630      	mov	r0, r6
 8006d20:	4639      	mov	r1, r7
 8006d22:	f7f9 fbd9 	bl	80004d8 <__aeabi_dmul>
 8006d26:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006d2a:	f7f9 fa1f 	bl	800016c <__adddf3>
 8006d2e:	4680      	mov	r8, r0
 8006d30:	4689      	mov	r9, r1
 8006d32:	e77e      	b.n	8006c32 <_strtod_l+0xa82>
 8006d34:	4602      	mov	r2, r0
 8006d36:	460b      	mov	r3, r1
 8006d38:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8006d3c:	e7e3      	b.n	8006d06 <_strtod_l+0xb56>
 8006d3e:	a30e      	add	r3, pc, #56	; (adr r3, 8006d78 <_strtod_l+0xbc8>)
 8006d40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d44:	f7f9 fe3a 	bl	80009bc <__aeabi_dcmplt>
 8006d48:	e7a1      	b.n	8006c8e <_strtod_l+0xade>
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	930a      	str	r3, [sp, #40]	; 0x28
 8006d4e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006d50:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006d52:	6013      	str	r3, [r2, #0]
 8006d54:	f7ff ba71 	b.w	800623a <_strtod_l+0x8a>
 8006d58:	2a65      	cmp	r2, #101	; 0x65
 8006d5a:	f43f ab63 	beq.w	8006424 <_strtod_l+0x274>
 8006d5e:	2a45      	cmp	r2, #69	; 0x45
 8006d60:	f43f ab60 	beq.w	8006424 <_strtod_l+0x274>
 8006d64:	2301      	movs	r3, #1
 8006d66:	f7ff bb95 	b.w	8006494 <_strtod_l+0x2e4>
 8006d6a:	bf00      	nop
 8006d6c:	f3af 8000 	nop.w
 8006d70:	ffc00000 	.word	0xffc00000
 8006d74:	41dfffff 	.word	0x41dfffff
 8006d78:	94a03595 	.word	0x94a03595
 8006d7c:	3fcfffff 	.word	0x3fcfffff

08006d80 <_strtod_r>:
 8006d80:	4b01      	ldr	r3, [pc, #4]	; (8006d88 <_strtod_r+0x8>)
 8006d82:	f7ff ba15 	b.w	80061b0 <_strtod_l>
 8006d86:	bf00      	nop
 8006d88:	200000a8 	.word	0x200000a8

08006d8c <_strtol_l.constprop.0>:
 8006d8c:	2b01      	cmp	r3, #1
 8006d8e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d92:	4680      	mov	r8, r0
 8006d94:	d001      	beq.n	8006d9a <_strtol_l.constprop.0+0xe>
 8006d96:	2b24      	cmp	r3, #36	; 0x24
 8006d98:	d906      	bls.n	8006da8 <_strtol_l.constprop.0+0x1c>
 8006d9a:	f7fe fab3 	bl	8005304 <__errno>
 8006d9e:	2316      	movs	r3, #22
 8006da0:	6003      	str	r3, [r0, #0]
 8006da2:	2000      	movs	r0, #0
 8006da4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006da8:	460d      	mov	r5, r1
 8006daa:	4f35      	ldr	r7, [pc, #212]	; (8006e80 <_strtol_l.constprop.0+0xf4>)
 8006dac:	4628      	mov	r0, r5
 8006dae:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006db2:	5de6      	ldrb	r6, [r4, r7]
 8006db4:	f016 0608 	ands.w	r6, r6, #8
 8006db8:	d1f8      	bne.n	8006dac <_strtol_l.constprop.0+0x20>
 8006dba:	2c2d      	cmp	r4, #45	; 0x2d
 8006dbc:	d12f      	bne.n	8006e1e <_strtol_l.constprop.0+0x92>
 8006dbe:	2601      	movs	r6, #1
 8006dc0:	782c      	ldrb	r4, [r5, #0]
 8006dc2:	1c85      	adds	r5, r0, #2
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d057      	beq.n	8006e78 <_strtol_l.constprop.0+0xec>
 8006dc8:	2b10      	cmp	r3, #16
 8006dca:	d109      	bne.n	8006de0 <_strtol_l.constprop.0+0x54>
 8006dcc:	2c30      	cmp	r4, #48	; 0x30
 8006dce:	d107      	bne.n	8006de0 <_strtol_l.constprop.0+0x54>
 8006dd0:	7828      	ldrb	r0, [r5, #0]
 8006dd2:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8006dd6:	2858      	cmp	r0, #88	; 0x58
 8006dd8:	d149      	bne.n	8006e6e <_strtol_l.constprop.0+0xe2>
 8006dda:	2310      	movs	r3, #16
 8006ddc:	786c      	ldrb	r4, [r5, #1]
 8006dde:	3502      	adds	r5, #2
 8006de0:	2700      	movs	r7, #0
 8006de2:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 8006de6:	f10e 3eff 	add.w	lr, lr, #4294967295
 8006dea:	fbbe f9f3 	udiv	r9, lr, r3
 8006dee:	4638      	mov	r0, r7
 8006df0:	fb03 ea19 	mls	sl, r3, r9, lr
 8006df4:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8006df8:	f1bc 0f09 	cmp.w	ip, #9
 8006dfc:	d814      	bhi.n	8006e28 <_strtol_l.constprop.0+0x9c>
 8006dfe:	4664      	mov	r4, ip
 8006e00:	42a3      	cmp	r3, r4
 8006e02:	dd22      	ble.n	8006e4a <_strtol_l.constprop.0+0xbe>
 8006e04:	2f00      	cmp	r7, #0
 8006e06:	db1d      	blt.n	8006e44 <_strtol_l.constprop.0+0xb8>
 8006e08:	4581      	cmp	r9, r0
 8006e0a:	d31b      	bcc.n	8006e44 <_strtol_l.constprop.0+0xb8>
 8006e0c:	d101      	bne.n	8006e12 <_strtol_l.constprop.0+0x86>
 8006e0e:	45a2      	cmp	sl, r4
 8006e10:	db18      	blt.n	8006e44 <_strtol_l.constprop.0+0xb8>
 8006e12:	2701      	movs	r7, #1
 8006e14:	fb00 4003 	mla	r0, r0, r3, r4
 8006e18:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006e1c:	e7ea      	b.n	8006df4 <_strtol_l.constprop.0+0x68>
 8006e1e:	2c2b      	cmp	r4, #43	; 0x2b
 8006e20:	bf04      	itt	eq
 8006e22:	782c      	ldrbeq	r4, [r5, #0]
 8006e24:	1c85      	addeq	r5, r0, #2
 8006e26:	e7cd      	b.n	8006dc4 <_strtol_l.constprop.0+0x38>
 8006e28:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8006e2c:	f1bc 0f19 	cmp.w	ip, #25
 8006e30:	d801      	bhi.n	8006e36 <_strtol_l.constprop.0+0xaa>
 8006e32:	3c37      	subs	r4, #55	; 0x37
 8006e34:	e7e4      	b.n	8006e00 <_strtol_l.constprop.0+0x74>
 8006e36:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8006e3a:	f1bc 0f19 	cmp.w	ip, #25
 8006e3e:	d804      	bhi.n	8006e4a <_strtol_l.constprop.0+0xbe>
 8006e40:	3c57      	subs	r4, #87	; 0x57
 8006e42:	e7dd      	b.n	8006e00 <_strtol_l.constprop.0+0x74>
 8006e44:	f04f 37ff 	mov.w	r7, #4294967295
 8006e48:	e7e6      	b.n	8006e18 <_strtol_l.constprop.0+0x8c>
 8006e4a:	2f00      	cmp	r7, #0
 8006e4c:	da07      	bge.n	8006e5e <_strtol_l.constprop.0+0xd2>
 8006e4e:	2322      	movs	r3, #34	; 0x22
 8006e50:	4670      	mov	r0, lr
 8006e52:	f8c8 3000 	str.w	r3, [r8]
 8006e56:	2a00      	cmp	r2, #0
 8006e58:	d0a4      	beq.n	8006da4 <_strtol_l.constprop.0+0x18>
 8006e5a:	1e69      	subs	r1, r5, #1
 8006e5c:	e005      	b.n	8006e6a <_strtol_l.constprop.0+0xde>
 8006e5e:	b106      	cbz	r6, 8006e62 <_strtol_l.constprop.0+0xd6>
 8006e60:	4240      	negs	r0, r0
 8006e62:	2a00      	cmp	r2, #0
 8006e64:	d09e      	beq.n	8006da4 <_strtol_l.constprop.0+0x18>
 8006e66:	2f00      	cmp	r7, #0
 8006e68:	d1f7      	bne.n	8006e5a <_strtol_l.constprop.0+0xce>
 8006e6a:	6011      	str	r1, [r2, #0]
 8006e6c:	e79a      	b.n	8006da4 <_strtol_l.constprop.0+0x18>
 8006e6e:	2430      	movs	r4, #48	; 0x30
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d1b5      	bne.n	8006de0 <_strtol_l.constprop.0+0x54>
 8006e74:	2308      	movs	r3, #8
 8006e76:	e7b3      	b.n	8006de0 <_strtol_l.constprop.0+0x54>
 8006e78:	2c30      	cmp	r4, #48	; 0x30
 8006e7a:	d0a9      	beq.n	8006dd0 <_strtol_l.constprop.0+0x44>
 8006e7c:	230a      	movs	r3, #10
 8006e7e:	e7af      	b.n	8006de0 <_strtol_l.constprop.0+0x54>
 8006e80:	0800a559 	.word	0x0800a559

08006e84 <_strtol_r>:
 8006e84:	f7ff bf82 	b.w	8006d8c <_strtol_l.constprop.0>

08006e88 <_write_r>:
 8006e88:	b538      	push	{r3, r4, r5, lr}
 8006e8a:	4604      	mov	r4, r0
 8006e8c:	4608      	mov	r0, r1
 8006e8e:	4611      	mov	r1, r2
 8006e90:	2200      	movs	r2, #0
 8006e92:	4d05      	ldr	r5, [pc, #20]	; (8006ea8 <_write_r+0x20>)
 8006e94:	602a      	str	r2, [r5, #0]
 8006e96:	461a      	mov	r2, r3
 8006e98:	f7fa fdda 	bl	8001a50 <_write>
 8006e9c:	1c43      	adds	r3, r0, #1
 8006e9e:	d102      	bne.n	8006ea6 <_write_r+0x1e>
 8006ea0:	682b      	ldr	r3, [r5, #0]
 8006ea2:	b103      	cbz	r3, 8006ea6 <_write_r+0x1e>
 8006ea4:	6023      	str	r3, [r4, #0]
 8006ea6:	bd38      	pop	{r3, r4, r5, pc}
 8006ea8:	20000498 	.word	0x20000498

08006eac <_close_r>:
 8006eac:	b538      	push	{r3, r4, r5, lr}
 8006eae:	2300      	movs	r3, #0
 8006eb0:	4d05      	ldr	r5, [pc, #20]	; (8006ec8 <_close_r+0x1c>)
 8006eb2:	4604      	mov	r4, r0
 8006eb4:	4608      	mov	r0, r1
 8006eb6:	602b      	str	r3, [r5, #0]
 8006eb8:	f7fa fde6 	bl	8001a88 <_close>
 8006ebc:	1c43      	adds	r3, r0, #1
 8006ebe:	d102      	bne.n	8006ec6 <_close_r+0x1a>
 8006ec0:	682b      	ldr	r3, [r5, #0]
 8006ec2:	b103      	cbz	r3, 8006ec6 <_close_r+0x1a>
 8006ec4:	6023      	str	r3, [r4, #0]
 8006ec6:	bd38      	pop	{r3, r4, r5, pc}
 8006ec8:	20000498 	.word	0x20000498

08006ecc <quorem>:
 8006ecc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ed0:	6903      	ldr	r3, [r0, #16]
 8006ed2:	690c      	ldr	r4, [r1, #16]
 8006ed4:	4607      	mov	r7, r0
 8006ed6:	42a3      	cmp	r3, r4
 8006ed8:	f2c0 8082 	blt.w	8006fe0 <quorem+0x114>
 8006edc:	3c01      	subs	r4, #1
 8006ede:	f100 0514 	add.w	r5, r0, #20
 8006ee2:	f101 0814 	add.w	r8, r1, #20
 8006ee6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006eea:	9301      	str	r3, [sp, #4]
 8006eec:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006ef0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006ef4:	3301      	adds	r3, #1
 8006ef6:	429a      	cmp	r2, r3
 8006ef8:	fbb2 f6f3 	udiv	r6, r2, r3
 8006efc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006f00:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006f04:	d331      	bcc.n	8006f6a <quorem+0x9e>
 8006f06:	f04f 0e00 	mov.w	lr, #0
 8006f0a:	4640      	mov	r0, r8
 8006f0c:	46ac      	mov	ip, r5
 8006f0e:	46f2      	mov	sl, lr
 8006f10:	f850 2b04 	ldr.w	r2, [r0], #4
 8006f14:	b293      	uxth	r3, r2
 8006f16:	fb06 e303 	mla	r3, r6, r3, lr
 8006f1a:	0c12      	lsrs	r2, r2, #16
 8006f1c:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006f20:	b29b      	uxth	r3, r3
 8006f22:	fb06 e202 	mla	r2, r6, r2, lr
 8006f26:	ebaa 0303 	sub.w	r3, sl, r3
 8006f2a:	f8dc a000 	ldr.w	sl, [ip]
 8006f2e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006f32:	fa1f fa8a 	uxth.w	sl, sl
 8006f36:	4453      	add	r3, sl
 8006f38:	f8dc a000 	ldr.w	sl, [ip]
 8006f3c:	b292      	uxth	r2, r2
 8006f3e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006f42:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006f46:	b29b      	uxth	r3, r3
 8006f48:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006f4c:	4581      	cmp	r9, r0
 8006f4e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006f52:	f84c 3b04 	str.w	r3, [ip], #4
 8006f56:	d2db      	bcs.n	8006f10 <quorem+0x44>
 8006f58:	f855 300b 	ldr.w	r3, [r5, fp]
 8006f5c:	b92b      	cbnz	r3, 8006f6a <quorem+0x9e>
 8006f5e:	9b01      	ldr	r3, [sp, #4]
 8006f60:	3b04      	subs	r3, #4
 8006f62:	429d      	cmp	r5, r3
 8006f64:	461a      	mov	r2, r3
 8006f66:	d32f      	bcc.n	8006fc8 <quorem+0xfc>
 8006f68:	613c      	str	r4, [r7, #16]
 8006f6a:	4638      	mov	r0, r7
 8006f6c:	f001 fca4 	bl	80088b8 <__mcmp>
 8006f70:	2800      	cmp	r0, #0
 8006f72:	db25      	blt.n	8006fc0 <quorem+0xf4>
 8006f74:	4628      	mov	r0, r5
 8006f76:	f04f 0c00 	mov.w	ip, #0
 8006f7a:	3601      	adds	r6, #1
 8006f7c:	f858 1b04 	ldr.w	r1, [r8], #4
 8006f80:	f8d0 e000 	ldr.w	lr, [r0]
 8006f84:	b28b      	uxth	r3, r1
 8006f86:	ebac 0303 	sub.w	r3, ip, r3
 8006f8a:	fa1f f28e 	uxth.w	r2, lr
 8006f8e:	4413      	add	r3, r2
 8006f90:	0c0a      	lsrs	r2, r1, #16
 8006f92:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006f96:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006f9a:	b29b      	uxth	r3, r3
 8006f9c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006fa0:	45c1      	cmp	r9, r8
 8006fa2:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006fa6:	f840 3b04 	str.w	r3, [r0], #4
 8006faa:	d2e7      	bcs.n	8006f7c <quorem+0xb0>
 8006fac:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006fb0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006fb4:	b922      	cbnz	r2, 8006fc0 <quorem+0xf4>
 8006fb6:	3b04      	subs	r3, #4
 8006fb8:	429d      	cmp	r5, r3
 8006fba:	461a      	mov	r2, r3
 8006fbc:	d30a      	bcc.n	8006fd4 <quorem+0x108>
 8006fbe:	613c      	str	r4, [r7, #16]
 8006fc0:	4630      	mov	r0, r6
 8006fc2:	b003      	add	sp, #12
 8006fc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fc8:	6812      	ldr	r2, [r2, #0]
 8006fca:	3b04      	subs	r3, #4
 8006fcc:	2a00      	cmp	r2, #0
 8006fce:	d1cb      	bne.n	8006f68 <quorem+0x9c>
 8006fd0:	3c01      	subs	r4, #1
 8006fd2:	e7c6      	b.n	8006f62 <quorem+0x96>
 8006fd4:	6812      	ldr	r2, [r2, #0]
 8006fd6:	3b04      	subs	r3, #4
 8006fd8:	2a00      	cmp	r2, #0
 8006fda:	d1f0      	bne.n	8006fbe <quorem+0xf2>
 8006fdc:	3c01      	subs	r4, #1
 8006fde:	e7eb      	b.n	8006fb8 <quorem+0xec>
 8006fe0:	2000      	movs	r0, #0
 8006fe2:	e7ee      	b.n	8006fc2 <quorem+0xf6>
 8006fe4:	0000      	movs	r0, r0
	...

08006fe8 <_dtoa_r>:
 8006fe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fec:	4616      	mov	r6, r2
 8006fee:	461f      	mov	r7, r3
 8006ff0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8006ff2:	b099      	sub	sp, #100	; 0x64
 8006ff4:	4605      	mov	r5, r0
 8006ff6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8006ffa:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8006ffe:	b974      	cbnz	r4, 800701e <_dtoa_r+0x36>
 8007000:	2010      	movs	r0, #16
 8007002:	f001 f95b 	bl	80082bc <malloc>
 8007006:	4602      	mov	r2, r0
 8007008:	6268      	str	r0, [r5, #36]	; 0x24
 800700a:	b920      	cbnz	r0, 8007016 <_dtoa_r+0x2e>
 800700c:	21ea      	movs	r1, #234	; 0xea
 800700e:	4ba8      	ldr	r3, [pc, #672]	; (80072b0 <_dtoa_r+0x2c8>)
 8007010:	48a8      	ldr	r0, [pc, #672]	; (80072b4 <_dtoa_r+0x2cc>)
 8007012:	f002 fce1 	bl	80099d8 <__assert_func>
 8007016:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800701a:	6004      	str	r4, [r0, #0]
 800701c:	60c4      	str	r4, [r0, #12]
 800701e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007020:	6819      	ldr	r1, [r3, #0]
 8007022:	b151      	cbz	r1, 800703a <_dtoa_r+0x52>
 8007024:	685a      	ldr	r2, [r3, #4]
 8007026:	2301      	movs	r3, #1
 8007028:	4093      	lsls	r3, r2
 800702a:	604a      	str	r2, [r1, #4]
 800702c:	608b      	str	r3, [r1, #8]
 800702e:	4628      	mov	r0, r5
 8007030:	f001 f9ba 	bl	80083a8 <_Bfree>
 8007034:	2200      	movs	r2, #0
 8007036:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007038:	601a      	str	r2, [r3, #0]
 800703a:	1e3b      	subs	r3, r7, #0
 800703c:	bfaf      	iteee	ge
 800703e:	2300      	movge	r3, #0
 8007040:	2201      	movlt	r2, #1
 8007042:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007046:	9305      	strlt	r3, [sp, #20]
 8007048:	bfa8      	it	ge
 800704a:	f8c8 3000 	strge.w	r3, [r8]
 800704e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8007052:	4b99      	ldr	r3, [pc, #612]	; (80072b8 <_dtoa_r+0x2d0>)
 8007054:	bfb8      	it	lt
 8007056:	f8c8 2000 	strlt.w	r2, [r8]
 800705a:	ea33 0309 	bics.w	r3, r3, r9
 800705e:	d119      	bne.n	8007094 <_dtoa_r+0xac>
 8007060:	f242 730f 	movw	r3, #9999	; 0x270f
 8007064:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007066:	6013      	str	r3, [r2, #0]
 8007068:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800706c:	4333      	orrs	r3, r6
 800706e:	f000 857f 	beq.w	8007b70 <_dtoa_r+0xb88>
 8007072:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007074:	b953      	cbnz	r3, 800708c <_dtoa_r+0xa4>
 8007076:	4b91      	ldr	r3, [pc, #580]	; (80072bc <_dtoa_r+0x2d4>)
 8007078:	e022      	b.n	80070c0 <_dtoa_r+0xd8>
 800707a:	4b91      	ldr	r3, [pc, #580]	; (80072c0 <_dtoa_r+0x2d8>)
 800707c:	9303      	str	r3, [sp, #12]
 800707e:	3308      	adds	r3, #8
 8007080:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8007082:	6013      	str	r3, [r2, #0]
 8007084:	9803      	ldr	r0, [sp, #12]
 8007086:	b019      	add	sp, #100	; 0x64
 8007088:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800708c:	4b8b      	ldr	r3, [pc, #556]	; (80072bc <_dtoa_r+0x2d4>)
 800708e:	9303      	str	r3, [sp, #12]
 8007090:	3303      	adds	r3, #3
 8007092:	e7f5      	b.n	8007080 <_dtoa_r+0x98>
 8007094:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8007098:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800709c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80070a0:	2200      	movs	r2, #0
 80070a2:	2300      	movs	r3, #0
 80070a4:	f7f9 fc80 	bl	80009a8 <__aeabi_dcmpeq>
 80070a8:	4680      	mov	r8, r0
 80070aa:	b158      	cbz	r0, 80070c4 <_dtoa_r+0xdc>
 80070ac:	2301      	movs	r3, #1
 80070ae:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80070b0:	6013      	str	r3, [r2, #0]
 80070b2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	f000 8558 	beq.w	8007b6a <_dtoa_r+0xb82>
 80070ba:	4882      	ldr	r0, [pc, #520]	; (80072c4 <_dtoa_r+0x2dc>)
 80070bc:	6018      	str	r0, [r3, #0]
 80070be:	1e43      	subs	r3, r0, #1
 80070c0:	9303      	str	r3, [sp, #12]
 80070c2:	e7df      	b.n	8007084 <_dtoa_r+0x9c>
 80070c4:	ab16      	add	r3, sp, #88	; 0x58
 80070c6:	9301      	str	r3, [sp, #4]
 80070c8:	ab17      	add	r3, sp, #92	; 0x5c
 80070ca:	9300      	str	r3, [sp, #0]
 80070cc:	4628      	mov	r0, r5
 80070ce:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80070d2:	f001 fd13 	bl	8008afc <__d2b>
 80070d6:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80070da:	4683      	mov	fp, r0
 80070dc:	2c00      	cmp	r4, #0
 80070de:	d07f      	beq.n	80071e0 <_dtoa_r+0x1f8>
 80070e0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80070e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80070e6:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80070ea:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80070ee:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80070f2:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80070f6:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80070fa:	2200      	movs	r2, #0
 80070fc:	4b72      	ldr	r3, [pc, #456]	; (80072c8 <_dtoa_r+0x2e0>)
 80070fe:	f7f9 f833 	bl	8000168 <__aeabi_dsub>
 8007102:	a365      	add	r3, pc, #404	; (adr r3, 8007298 <_dtoa_r+0x2b0>)
 8007104:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007108:	f7f9 f9e6 	bl	80004d8 <__aeabi_dmul>
 800710c:	a364      	add	r3, pc, #400	; (adr r3, 80072a0 <_dtoa_r+0x2b8>)
 800710e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007112:	f7f9 f82b 	bl	800016c <__adddf3>
 8007116:	4606      	mov	r6, r0
 8007118:	4620      	mov	r0, r4
 800711a:	460f      	mov	r7, r1
 800711c:	f7f9 f972 	bl	8000404 <__aeabi_i2d>
 8007120:	a361      	add	r3, pc, #388	; (adr r3, 80072a8 <_dtoa_r+0x2c0>)
 8007122:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007126:	f7f9 f9d7 	bl	80004d8 <__aeabi_dmul>
 800712a:	4602      	mov	r2, r0
 800712c:	460b      	mov	r3, r1
 800712e:	4630      	mov	r0, r6
 8007130:	4639      	mov	r1, r7
 8007132:	f7f9 f81b 	bl	800016c <__adddf3>
 8007136:	4606      	mov	r6, r0
 8007138:	460f      	mov	r7, r1
 800713a:	f7f9 fc7d 	bl	8000a38 <__aeabi_d2iz>
 800713e:	2200      	movs	r2, #0
 8007140:	4682      	mov	sl, r0
 8007142:	2300      	movs	r3, #0
 8007144:	4630      	mov	r0, r6
 8007146:	4639      	mov	r1, r7
 8007148:	f7f9 fc38 	bl	80009bc <__aeabi_dcmplt>
 800714c:	b148      	cbz	r0, 8007162 <_dtoa_r+0x17a>
 800714e:	4650      	mov	r0, sl
 8007150:	f7f9 f958 	bl	8000404 <__aeabi_i2d>
 8007154:	4632      	mov	r2, r6
 8007156:	463b      	mov	r3, r7
 8007158:	f7f9 fc26 	bl	80009a8 <__aeabi_dcmpeq>
 800715c:	b908      	cbnz	r0, 8007162 <_dtoa_r+0x17a>
 800715e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007162:	f1ba 0f16 	cmp.w	sl, #22
 8007166:	d858      	bhi.n	800721a <_dtoa_r+0x232>
 8007168:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800716c:	4b57      	ldr	r3, [pc, #348]	; (80072cc <_dtoa_r+0x2e4>)
 800716e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007172:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007176:	f7f9 fc21 	bl	80009bc <__aeabi_dcmplt>
 800717a:	2800      	cmp	r0, #0
 800717c:	d04f      	beq.n	800721e <_dtoa_r+0x236>
 800717e:	2300      	movs	r3, #0
 8007180:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007184:	930f      	str	r3, [sp, #60]	; 0x3c
 8007186:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007188:	1b1c      	subs	r4, r3, r4
 800718a:	1e63      	subs	r3, r4, #1
 800718c:	9309      	str	r3, [sp, #36]	; 0x24
 800718e:	bf49      	itett	mi
 8007190:	f1c4 0301 	rsbmi	r3, r4, #1
 8007194:	2300      	movpl	r3, #0
 8007196:	9306      	strmi	r3, [sp, #24]
 8007198:	2300      	movmi	r3, #0
 800719a:	bf54      	ite	pl
 800719c:	9306      	strpl	r3, [sp, #24]
 800719e:	9309      	strmi	r3, [sp, #36]	; 0x24
 80071a0:	f1ba 0f00 	cmp.w	sl, #0
 80071a4:	db3d      	blt.n	8007222 <_dtoa_r+0x23a>
 80071a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071a8:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80071ac:	4453      	add	r3, sl
 80071ae:	9309      	str	r3, [sp, #36]	; 0x24
 80071b0:	2300      	movs	r3, #0
 80071b2:	930a      	str	r3, [sp, #40]	; 0x28
 80071b4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80071b6:	2b09      	cmp	r3, #9
 80071b8:	f200 808c 	bhi.w	80072d4 <_dtoa_r+0x2ec>
 80071bc:	2b05      	cmp	r3, #5
 80071be:	bfc4      	itt	gt
 80071c0:	3b04      	subgt	r3, #4
 80071c2:	9322      	strgt	r3, [sp, #136]	; 0x88
 80071c4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80071c6:	bfc8      	it	gt
 80071c8:	2400      	movgt	r4, #0
 80071ca:	f1a3 0302 	sub.w	r3, r3, #2
 80071ce:	bfd8      	it	le
 80071d0:	2401      	movle	r4, #1
 80071d2:	2b03      	cmp	r3, #3
 80071d4:	f200 808a 	bhi.w	80072ec <_dtoa_r+0x304>
 80071d8:	e8df f003 	tbb	[pc, r3]
 80071dc:	5b4d4f2d 	.word	0x5b4d4f2d
 80071e0:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 80071e4:	441c      	add	r4, r3
 80071e6:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80071ea:	2b20      	cmp	r3, #32
 80071ec:	bfc3      	ittte	gt
 80071ee:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80071f2:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 80071f6:	fa09 f303 	lslgt.w	r3, r9, r3
 80071fa:	f1c3 0320 	rsble	r3, r3, #32
 80071fe:	bfc6      	itte	gt
 8007200:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007204:	4318      	orrgt	r0, r3
 8007206:	fa06 f003 	lslle.w	r0, r6, r3
 800720a:	f7f9 f8eb 	bl	80003e4 <__aeabi_ui2d>
 800720e:	2301      	movs	r3, #1
 8007210:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8007214:	3c01      	subs	r4, #1
 8007216:	9313      	str	r3, [sp, #76]	; 0x4c
 8007218:	e76f      	b.n	80070fa <_dtoa_r+0x112>
 800721a:	2301      	movs	r3, #1
 800721c:	e7b2      	b.n	8007184 <_dtoa_r+0x19c>
 800721e:	900f      	str	r0, [sp, #60]	; 0x3c
 8007220:	e7b1      	b.n	8007186 <_dtoa_r+0x19e>
 8007222:	9b06      	ldr	r3, [sp, #24]
 8007224:	eba3 030a 	sub.w	r3, r3, sl
 8007228:	9306      	str	r3, [sp, #24]
 800722a:	f1ca 0300 	rsb	r3, sl, #0
 800722e:	930a      	str	r3, [sp, #40]	; 0x28
 8007230:	2300      	movs	r3, #0
 8007232:	930e      	str	r3, [sp, #56]	; 0x38
 8007234:	e7be      	b.n	80071b4 <_dtoa_r+0x1cc>
 8007236:	2300      	movs	r3, #0
 8007238:	930b      	str	r3, [sp, #44]	; 0x2c
 800723a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800723c:	2b00      	cmp	r3, #0
 800723e:	dc58      	bgt.n	80072f2 <_dtoa_r+0x30a>
 8007240:	f04f 0901 	mov.w	r9, #1
 8007244:	464b      	mov	r3, r9
 8007246:	f8cd 9020 	str.w	r9, [sp, #32]
 800724a:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 800724e:	2200      	movs	r2, #0
 8007250:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8007252:	6042      	str	r2, [r0, #4]
 8007254:	2204      	movs	r2, #4
 8007256:	f102 0614 	add.w	r6, r2, #20
 800725a:	429e      	cmp	r6, r3
 800725c:	6841      	ldr	r1, [r0, #4]
 800725e:	d94e      	bls.n	80072fe <_dtoa_r+0x316>
 8007260:	4628      	mov	r0, r5
 8007262:	f001 f861 	bl	8008328 <_Balloc>
 8007266:	9003      	str	r0, [sp, #12]
 8007268:	2800      	cmp	r0, #0
 800726a:	d14c      	bne.n	8007306 <_dtoa_r+0x31e>
 800726c:	4602      	mov	r2, r0
 800726e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007272:	4b17      	ldr	r3, [pc, #92]	; (80072d0 <_dtoa_r+0x2e8>)
 8007274:	e6cc      	b.n	8007010 <_dtoa_r+0x28>
 8007276:	2301      	movs	r3, #1
 8007278:	e7de      	b.n	8007238 <_dtoa_r+0x250>
 800727a:	2300      	movs	r3, #0
 800727c:	930b      	str	r3, [sp, #44]	; 0x2c
 800727e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007280:	eb0a 0903 	add.w	r9, sl, r3
 8007284:	f109 0301 	add.w	r3, r9, #1
 8007288:	2b01      	cmp	r3, #1
 800728a:	9308      	str	r3, [sp, #32]
 800728c:	bfb8      	it	lt
 800728e:	2301      	movlt	r3, #1
 8007290:	e7dd      	b.n	800724e <_dtoa_r+0x266>
 8007292:	2301      	movs	r3, #1
 8007294:	e7f2      	b.n	800727c <_dtoa_r+0x294>
 8007296:	bf00      	nop
 8007298:	636f4361 	.word	0x636f4361
 800729c:	3fd287a7 	.word	0x3fd287a7
 80072a0:	8b60c8b3 	.word	0x8b60c8b3
 80072a4:	3fc68a28 	.word	0x3fc68a28
 80072a8:	509f79fb 	.word	0x509f79fb
 80072ac:	3fd34413 	.word	0x3fd34413
 80072b0:	0800a666 	.word	0x0800a666
 80072b4:	0800a67d 	.word	0x0800a67d
 80072b8:	7ff00000 	.word	0x7ff00000
 80072bc:	0800a662 	.word	0x0800a662
 80072c0:	0800a659 	.word	0x0800a659
 80072c4:	0800a8d2 	.word	0x0800a8d2
 80072c8:	3ff80000 	.word	0x3ff80000
 80072cc:	0800a7e8 	.word	0x0800a7e8
 80072d0:	0800a6d8 	.word	0x0800a6d8
 80072d4:	2401      	movs	r4, #1
 80072d6:	2300      	movs	r3, #0
 80072d8:	940b      	str	r4, [sp, #44]	; 0x2c
 80072da:	9322      	str	r3, [sp, #136]	; 0x88
 80072dc:	f04f 39ff 	mov.w	r9, #4294967295
 80072e0:	2200      	movs	r2, #0
 80072e2:	2312      	movs	r3, #18
 80072e4:	f8cd 9020 	str.w	r9, [sp, #32]
 80072e8:	9223      	str	r2, [sp, #140]	; 0x8c
 80072ea:	e7b0      	b.n	800724e <_dtoa_r+0x266>
 80072ec:	2301      	movs	r3, #1
 80072ee:	930b      	str	r3, [sp, #44]	; 0x2c
 80072f0:	e7f4      	b.n	80072dc <_dtoa_r+0x2f4>
 80072f2:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 80072f6:	464b      	mov	r3, r9
 80072f8:	f8cd 9020 	str.w	r9, [sp, #32]
 80072fc:	e7a7      	b.n	800724e <_dtoa_r+0x266>
 80072fe:	3101      	adds	r1, #1
 8007300:	6041      	str	r1, [r0, #4]
 8007302:	0052      	lsls	r2, r2, #1
 8007304:	e7a7      	b.n	8007256 <_dtoa_r+0x26e>
 8007306:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007308:	9a03      	ldr	r2, [sp, #12]
 800730a:	601a      	str	r2, [r3, #0]
 800730c:	9b08      	ldr	r3, [sp, #32]
 800730e:	2b0e      	cmp	r3, #14
 8007310:	f200 80a8 	bhi.w	8007464 <_dtoa_r+0x47c>
 8007314:	2c00      	cmp	r4, #0
 8007316:	f000 80a5 	beq.w	8007464 <_dtoa_r+0x47c>
 800731a:	f1ba 0f00 	cmp.w	sl, #0
 800731e:	dd34      	ble.n	800738a <_dtoa_r+0x3a2>
 8007320:	4a9a      	ldr	r2, [pc, #616]	; (800758c <_dtoa_r+0x5a4>)
 8007322:	f00a 030f 	and.w	r3, sl, #15
 8007326:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800732a:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800732e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007332:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8007336:	ea4f 142a 	mov.w	r4, sl, asr #4
 800733a:	d016      	beq.n	800736a <_dtoa_r+0x382>
 800733c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007340:	4b93      	ldr	r3, [pc, #588]	; (8007590 <_dtoa_r+0x5a8>)
 8007342:	2703      	movs	r7, #3
 8007344:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007348:	f7f9 f9f0 	bl	800072c <__aeabi_ddiv>
 800734c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007350:	f004 040f 	and.w	r4, r4, #15
 8007354:	4e8e      	ldr	r6, [pc, #568]	; (8007590 <_dtoa_r+0x5a8>)
 8007356:	b954      	cbnz	r4, 800736e <_dtoa_r+0x386>
 8007358:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800735c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007360:	f7f9 f9e4 	bl	800072c <__aeabi_ddiv>
 8007364:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007368:	e029      	b.n	80073be <_dtoa_r+0x3d6>
 800736a:	2702      	movs	r7, #2
 800736c:	e7f2      	b.n	8007354 <_dtoa_r+0x36c>
 800736e:	07e1      	lsls	r1, r4, #31
 8007370:	d508      	bpl.n	8007384 <_dtoa_r+0x39c>
 8007372:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007376:	e9d6 2300 	ldrd	r2, r3, [r6]
 800737a:	f7f9 f8ad 	bl	80004d8 <__aeabi_dmul>
 800737e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007382:	3701      	adds	r7, #1
 8007384:	1064      	asrs	r4, r4, #1
 8007386:	3608      	adds	r6, #8
 8007388:	e7e5      	b.n	8007356 <_dtoa_r+0x36e>
 800738a:	f000 80a5 	beq.w	80074d8 <_dtoa_r+0x4f0>
 800738e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007392:	f1ca 0400 	rsb	r4, sl, #0
 8007396:	4b7d      	ldr	r3, [pc, #500]	; (800758c <_dtoa_r+0x5a4>)
 8007398:	f004 020f 	and.w	r2, r4, #15
 800739c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80073a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073a4:	f7f9 f898 	bl	80004d8 <__aeabi_dmul>
 80073a8:	2702      	movs	r7, #2
 80073aa:	2300      	movs	r3, #0
 80073ac:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80073b0:	4e77      	ldr	r6, [pc, #476]	; (8007590 <_dtoa_r+0x5a8>)
 80073b2:	1124      	asrs	r4, r4, #4
 80073b4:	2c00      	cmp	r4, #0
 80073b6:	f040 8084 	bne.w	80074c2 <_dtoa_r+0x4da>
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d1d2      	bne.n	8007364 <_dtoa_r+0x37c>
 80073be:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	f000 808b 	beq.w	80074dc <_dtoa_r+0x4f4>
 80073c6:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80073ca:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80073ce:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80073d2:	2200      	movs	r2, #0
 80073d4:	4b6f      	ldr	r3, [pc, #444]	; (8007594 <_dtoa_r+0x5ac>)
 80073d6:	f7f9 faf1 	bl	80009bc <__aeabi_dcmplt>
 80073da:	2800      	cmp	r0, #0
 80073dc:	d07e      	beq.n	80074dc <_dtoa_r+0x4f4>
 80073de:	9b08      	ldr	r3, [sp, #32]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d07b      	beq.n	80074dc <_dtoa_r+0x4f4>
 80073e4:	f1b9 0f00 	cmp.w	r9, #0
 80073e8:	dd38      	ble.n	800745c <_dtoa_r+0x474>
 80073ea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80073ee:	2200      	movs	r2, #0
 80073f0:	4b69      	ldr	r3, [pc, #420]	; (8007598 <_dtoa_r+0x5b0>)
 80073f2:	f7f9 f871 	bl	80004d8 <__aeabi_dmul>
 80073f6:	464c      	mov	r4, r9
 80073f8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80073fc:	f10a 38ff 	add.w	r8, sl, #4294967295
 8007400:	3701      	adds	r7, #1
 8007402:	4638      	mov	r0, r7
 8007404:	f7f8 fffe 	bl	8000404 <__aeabi_i2d>
 8007408:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800740c:	f7f9 f864 	bl	80004d8 <__aeabi_dmul>
 8007410:	2200      	movs	r2, #0
 8007412:	4b62      	ldr	r3, [pc, #392]	; (800759c <_dtoa_r+0x5b4>)
 8007414:	f7f8 feaa 	bl	800016c <__adddf3>
 8007418:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800741c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007420:	9611      	str	r6, [sp, #68]	; 0x44
 8007422:	2c00      	cmp	r4, #0
 8007424:	d15d      	bne.n	80074e2 <_dtoa_r+0x4fa>
 8007426:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800742a:	2200      	movs	r2, #0
 800742c:	4b5c      	ldr	r3, [pc, #368]	; (80075a0 <_dtoa_r+0x5b8>)
 800742e:	f7f8 fe9b 	bl	8000168 <__aeabi_dsub>
 8007432:	4602      	mov	r2, r0
 8007434:	460b      	mov	r3, r1
 8007436:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800743a:	4633      	mov	r3, r6
 800743c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800743e:	f7f9 fadb 	bl	80009f8 <__aeabi_dcmpgt>
 8007442:	2800      	cmp	r0, #0
 8007444:	f040 829c 	bne.w	8007980 <_dtoa_r+0x998>
 8007448:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800744c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800744e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8007452:	f7f9 fab3 	bl	80009bc <__aeabi_dcmplt>
 8007456:	2800      	cmp	r0, #0
 8007458:	f040 8290 	bne.w	800797c <_dtoa_r+0x994>
 800745c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8007460:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007464:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007466:	2b00      	cmp	r3, #0
 8007468:	f2c0 8152 	blt.w	8007710 <_dtoa_r+0x728>
 800746c:	f1ba 0f0e 	cmp.w	sl, #14
 8007470:	f300 814e 	bgt.w	8007710 <_dtoa_r+0x728>
 8007474:	4b45      	ldr	r3, [pc, #276]	; (800758c <_dtoa_r+0x5a4>)
 8007476:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800747a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800747e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8007482:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007484:	2b00      	cmp	r3, #0
 8007486:	f280 80db 	bge.w	8007640 <_dtoa_r+0x658>
 800748a:	9b08      	ldr	r3, [sp, #32]
 800748c:	2b00      	cmp	r3, #0
 800748e:	f300 80d7 	bgt.w	8007640 <_dtoa_r+0x658>
 8007492:	f040 8272 	bne.w	800797a <_dtoa_r+0x992>
 8007496:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800749a:	2200      	movs	r2, #0
 800749c:	4b40      	ldr	r3, [pc, #256]	; (80075a0 <_dtoa_r+0x5b8>)
 800749e:	f7f9 f81b 	bl	80004d8 <__aeabi_dmul>
 80074a2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80074a6:	f7f9 fa9d 	bl	80009e4 <__aeabi_dcmpge>
 80074aa:	9c08      	ldr	r4, [sp, #32]
 80074ac:	4626      	mov	r6, r4
 80074ae:	2800      	cmp	r0, #0
 80074b0:	f040 8248 	bne.w	8007944 <_dtoa_r+0x95c>
 80074b4:	2331      	movs	r3, #49	; 0x31
 80074b6:	9f03      	ldr	r7, [sp, #12]
 80074b8:	f10a 0a01 	add.w	sl, sl, #1
 80074bc:	f807 3b01 	strb.w	r3, [r7], #1
 80074c0:	e244      	b.n	800794c <_dtoa_r+0x964>
 80074c2:	07e2      	lsls	r2, r4, #31
 80074c4:	d505      	bpl.n	80074d2 <_dtoa_r+0x4ea>
 80074c6:	e9d6 2300 	ldrd	r2, r3, [r6]
 80074ca:	f7f9 f805 	bl	80004d8 <__aeabi_dmul>
 80074ce:	2301      	movs	r3, #1
 80074d0:	3701      	adds	r7, #1
 80074d2:	1064      	asrs	r4, r4, #1
 80074d4:	3608      	adds	r6, #8
 80074d6:	e76d      	b.n	80073b4 <_dtoa_r+0x3cc>
 80074d8:	2702      	movs	r7, #2
 80074da:	e770      	b.n	80073be <_dtoa_r+0x3d6>
 80074dc:	46d0      	mov	r8, sl
 80074de:	9c08      	ldr	r4, [sp, #32]
 80074e0:	e78f      	b.n	8007402 <_dtoa_r+0x41a>
 80074e2:	9903      	ldr	r1, [sp, #12]
 80074e4:	4b29      	ldr	r3, [pc, #164]	; (800758c <_dtoa_r+0x5a4>)
 80074e6:	4421      	add	r1, r4
 80074e8:	9112      	str	r1, [sp, #72]	; 0x48
 80074ea:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80074ec:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80074f0:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80074f4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80074f8:	2900      	cmp	r1, #0
 80074fa:	d055      	beq.n	80075a8 <_dtoa_r+0x5c0>
 80074fc:	2000      	movs	r0, #0
 80074fe:	4929      	ldr	r1, [pc, #164]	; (80075a4 <_dtoa_r+0x5bc>)
 8007500:	f7f9 f914 	bl	800072c <__aeabi_ddiv>
 8007504:	463b      	mov	r3, r7
 8007506:	4632      	mov	r2, r6
 8007508:	f7f8 fe2e 	bl	8000168 <__aeabi_dsub>
 800750c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007510:	9f03      	ldr	r7, [sp, #12]
 8007512:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007516:	f7f9 fa8f 	bl	8000a38 <__aeabi_d2iz>
 800751a:	4604      	mov	r4, r0
 800751c:	f7f8 ff72 	bl	8000404 <__aeabi_i2d>
 8007520:	4602      	mov	r2, r0
 8007522:	460b      	mov	r3, r1
 8007524:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007528:	f7f8 fe1e 	bl	8000168 <__aeabi_dsub>
 800752c:	4602      	mov	r2, r0
 800752e:	460b      	mov	r3, r1
 8007530:	3430      	adds	r4, #48	; 0x30
 8007532:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007536:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800753a:	f807 4b01 	strb.w	r4, [r7], #1
 800753e:	f7f9 fa3d 	bl	80009bc <__aeabi_dcmplt>
 8007542:	2800      	cmp	r0, #0
 8007544:	d174      	bne.n	8007630 <_dtoa_r+0x648>
 8007546:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800754a:	2000      	movs	r0, #0
 800754c:	4911      	ldr	r1, [pc, #68]	; (8007594 <_dtoa_r+0x5ac>)
 800754e:	f7f8 fe0b 	bl	8000168 <__aeabi_dsub>
 8007552:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007556:	f7f9 fa31 	bl	80009bc <__aeabi_dcmplt>
 800755a:	2800      	cmp	r0, #0
 800755c:	f040 80b7 	bne.w	80076ce <_dtoa_r+0x6e6>
 8007560:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007562:	429f      	cmp	r7, r3
 8007564:	f43f af7a 	beq.w	800745c <_dtoa_r+0x474>
 8007568:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800756c:	2200      	movs	r2, #0
 800756e:	4b0a      	ldr	r3, [pc, #40]	; (8007598 <_dtoa_r+0x5b0>)
 8007570:	f7f8 ffb2 	bl	80004d8 <__aeabi_dmul>
 8007574:	2200      	movs	r2, #0
 8007576:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800757a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800757e:	4b06      	ldr	r3, [pc, #24]	; (8007598 <_dtoa_r+0x5b0>)
 8007580:	f7f8 ffaa 	bl	80004d8 <__aeabi_dmul>
 8007584:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007588:	e7c3      	b.n	8007512 <_dtoa_r+0x52a>
 800758a:	bf00      	nop
 800758c:	0800a7e8 	.word	0x0800a7e8
 8007590:	0800a7c0 	.word	0x0800a7c0
 8007594:	3ff00000 	.word	0x3ff00000
 8007598:	40240000 	.word	0x40240000
 800759c:	401c0000 	.word	0x401c0000
 80075a0:	40140000 	.word	0x40140000
 80075a4:	3fe00000 	.word	0x3fe00000
 80075a8:	4630      	mov	r0, r6
 80075aa:	4639      	mov	r1, r7
 80075ac:	f7f8 ff94 	bl	80004d8 <__aeabi_dmul>
 80075b0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80075b2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80075b6:	9c03      	ldr	r4, [sp, #12]
 80075b8:	9314      	str	r3, [sp, #80]	; 0x50
 80075ba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80075be:	f7f9 fa3b 	bl	8000a38 <__aeabi_d2iz>
 80075c2:	9015      	str	r0, [sp, #84]	; 0x54
 80075c4:	f7f8 ff1e 	bl	8000404 <__aeabi_i2d>
 80075c8:	4602      	mov	r2, r0
 80075ca:	460b      	mov	r3, r1
 80075cc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80075d0:	f7f8 fdca 	bl	8000168 <__aeabi_dsub>
 80075d4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80075d6:	4606      	mov	r6, r0
 80075d8:	3330      	adds	r3, #48	; 0x30
 80075da:	f804 3b01 	strb.w	r3, [r4], #1
 80075de:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80075e0:	460f      	mov	r7, r1
 80075e2:	429c      	cmp	r4, r3
 80075e4:	f04f 0200 	mov.w	r2, #0
 80075e8:	d124      	bne.n	8007634 <_dtoa_r+0x64c>
 80075ea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80075ee:	4bb0      	ldr	r3, [pc, #704]	; (80078b0 <_dtoa_r+0x8c8>)
 80075f0:	f7f8 fdbc 	bl	800016c <__adddf3>
 80075f4:	4602      	mov	r2, r0
 80075f6:	460b      	mov	r3, r1
 80075f8:	4630      	mov	r0, r6
 80075fa:	4639      	mov	r1, r7
 80075fc:	f7f9 f9fc 	bl	80009f8 <__aeabi_dcmpgt>
 8007600:	2800      	cmp	r0, #0
 8007602:	d163      	bne.n	80076cc <_dtoa_r+0x6e4>
 8007604:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007608:	2000      	movs	r0, #0
 800760a:	49a9      	ldr	r1, [pc, #676]	; (80078b0 <_dtoa_r+0x8c8>)
 800760c:	f7f8 fdac 	bl	8000168 <__aeabi_dsub>
 8007610:	4602      	mov	r2, r0
 8007612:	460b      	mov	r3, r1
 8007614:	4630      	mov	r0, r6
 8007616:	4639      	mov	r1, r7
 8007618:	f7f9 f9d0 	bl	80009bc <__aeabi_dcmplt>
 800761c:	2800      	cmp	r0, #0
 800761e:	f43f af1d 	beq.w	800745c <_dtoa_r+0x474>
 8007622:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8007624:	1e7b      	subs	r3, r7, #1
 8007626:	9314      	str	r3, [sp, #80]	; 0x50
 8007628:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800762c:	2b30      	cmp	r3, #48	; 0x30
 800762e:	d0f8      	beq.n	8007622 <_dtoa_r+0x63a>
 8007630:	46c2      	mov	sl, r8
 8007632:	e03b      	b.n	80076ac <_dtoa_r+0x6c4>
 8007634:	4b9f      	ldr	r3, [pc, #636]	; (80078b4 <_dtoa_r+0x8cc>)
 8007636:	f7f8 ff4f 	bl	80004d8 <__aeabi_dmul>
 800763a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800763e:	e7bc      	b.n	80075ba <_dtoa_r+0x5d2>
 8007640:	9f03      	ldr	r7, [sp, #12]
 8007642:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8007646:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800764a:	4640      	mov	r0, r8
 800764c:	4649      	mov	r1, r9
 800764e:	f7f9 f86d 	bl	800072c <__aeabi_ddiv>
 8007652:	f7f9 f9f1 	bl	8000a38 <__aeabi_d2iz>
 8007656:	4604      	mov	r4, r0
 8007658:	f7f8 fed4 	bl	8000404 <__aeabi_i2d>
 800765c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007660:	f7f8 ff3a 	bl	80004d8 <__aeabi_dmul>
 8007664:	4602      	mov	r2, r0
 8007666:	460b      	mov	r3, r1
 8007668:	4640      	mov	r0, r8
 800766a:	4649      	mov	r1, r9
 800766c:	f7f8 fd7c 	bl	8000168 <__aeabi_dsub>
 8007670:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8007674:	f807 6b01 	strb.w	r6, [r7], #1
 8007678:	9e03      	ldr	r6, [sp, #12]
 800767a:	f8dd c020 	ldr.w	ip, [sp, #32]
 800767e:	1bbe      	subs	r6, r7, r6
 8007680:	45b4      	cmp	ip, r6
 8007682:	4602      	mov	r2, r0
 8007684:	460b      	mov	r3, r1
 8007686:	d136      	bne.n	80076f6 <_dtoa_r+0x70e>
 8007688:	f7f8 fd70 	bl	800016c <__adddf3>
 800768c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007690:	4680      	mov	r8, r0
 8007692:	4689      	mov	r9, r1
 8007694:	f7f9 f9b0 	bl	80009f8 <__aeabi_dcmpgt>
 8007698:	bb58      	cbnz	r0, 80076f2 <_dtoa_r+0x70a>
 800769a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800769e:	4640      	mov	r0, r8
 80076a0:	4649      	mov	r1, r9
 80076a2:	f7f9 f981 	bl	80009a8 <__aeabi_dcmpeq>
 80076a6:	b108      	cbz	r0, 80076ac <_dtoa_r+0x6c4>
 80076a8:	07e1      	lsls	r1, r4, #31
 80076aa:	d422      	bmi.n	80076f2 <_dtoa_r+0x70a>
 80076ac:	4628      	mov	r0, r5
 80076ae:	4659      	mov	r1, fp
 80076b0:	f000 fe7a 	bl	80083a8 <_Bfree>
 80076b4:	2300      	movs	r3, #0
 80076b6:	703b      	strb	r3, [r7, #0]
 80076b8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80076ba:	f10a 0001 	add.w	r0, sl, #1
 80076be:	6018      	str	r0, [r3, #0]
 80076c0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	f43f acde 	beq.w	8007084 <_dtoa_r+0x9c>
 80076c8:	601f      	str	r7, [r3, #0]
 80076ca:	e4db      	b.n	8007084 <_dtoa_r+0x9c>
 80076cc:	4627      	mov	r7, r4
 80076ce:	463b      	mov	r3, r7
 80076d0:	461f      	mov	r7, r3
 80076d2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80076d6:	2a39      	cmp	r2, #57	; 0x39
 80076d8:	d107      	bne.n	80076ea <_dtoa_r+0x702>
 80076da:	9a03      	ldr	r2, [sp, #12]
 80076dc:	429a      	cmp	r2, r3
 80076de:	d1f7      	bne.n	80076d0 <_dtoa_r+0x6e8>
 80076e0:	2230      	movs	r2, #48	; 0x30
 80076e2:	9903      	ldr	r1, [sp, #12]
 80076e4:	f108 0801 	add.w	r8, r8, #1
 80076e8:	700a      	strb	r2, [r1, #0]
 80076ea:	781a      	ldrb	r2, [r3, #0]
 80076ec:	3201      	adds	r2, #1
 80076ee:	701a      	strb	r2, [r3, #0]
 80076f0:	e79e      	b.n	8007630 <_dtoa_r+0x648>
 80076f2:	46d0      	mov	r8, sl
 80076f4:	e7eb      	b.n	80076ce <_dtoa_r+0x6e6>
 80076f6:	2200      	movs	r2, #0
 80076f8:	4b6e      	ldr	r3, [pc, #440]	; (80078b4 <_dtoa_r+0x8cc>)
 80076fa:	f7f8 feed 	bl	80004d8 <__aeabi_dmul>
 80076fe:	2200      	movs	r2, #0
 8007700:	2300      	movs	r3, #0
 8007702:	4680      	mov	r8, r0
 8007704:	4689      	mov	r9, r1
 8007706:	f7f9 f94f 	bl	80009a8 <__aeabi_dcmpeq>
 800770a:	2800      	cmp	r0, #0
 800770c:	d09b      	beq.n	8007646 <_dtoa_r+0x65e>
 800770e:	e7cd      	b.n	80076ac <_dtoa_r+0x6c4>
 8007710:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007712:	2a00      	cmp	r2, #0
 8007714:	f000 80d0 	beq.w	80078b8 <_dtoa_r+0x8d0>
 8007718:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800771a:	2a01      	cmp	r2, #1
 800771c:	f300 80ae 	bgt.w	800787c <_dtoa_r+0x894>
 8007720:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007722:	2a00      	cmp	r2, #0
 8007724:	f000 80a6 	beq.w	8007874 <_dtoa_r+0x88c>
 8007728:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800772c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800772e:	9f06      	ldr	r7, [sp, #24]
 8007730:	9a06      	ldr	r2, [sp, #24]
 8007732:	2101      	movs	r1, #1
 8007734:	441a      	add	r2, r3
 8007736:	9206      	str	r2, [sp, #24]
 8007738:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800773a:	4628      	mov	r0, r5
 800773c:	441a      	add	r2, r3
 800773e:	9209      	str	r2, [sp, #36]	; 0x24
 8007740:	f000 ff32 	bl	80085a8 <__i2b>
 8007744:	4606      	mov	r6, r0
 8007746:	2f00      	cmp	r7, #0
 8007748:	dd0c      	ble.n	8007764 <_dtoa_r+0x77c>
 800774a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800774c:	2b00      	cmp	r3, #0
 800774e:	dd09      	ble.n	8007764 <_dtoa_r+0x77c>
 8007750:	42bb      	cmp	r3, r7
 8007752:	bfa8      	it	ge
 8007754:	463b      	movge	r3, r7
 8007756:	9a06      	ldr	r2, [sp, #24]
 8007758:	1aff      	subs	r7, r7, r3
 800775a:	1ad2      	subs	r2, r2, r3
 800775c:	9206      	str	r2, [sp, #24]
 800775e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007760:	1ad3      	subs	r3, r2, r3
 8007762:	9309      	str	r3, [sp, #36]	; 0x24
 8007764:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007766:	b1f3      	cbz	r3, 80077a6 <_dtoa_r+0x7be>
 8007768:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800776a:	2b00      	cmp	r3, #0
 800776c:	f000 80a8 	beq.w	80078c0 <_dtoa_r+0x8d8>
 8007770:	2c00      	cmp	r4, #0
 8007772:	dd10      	ble.n	8007796 <_dtoa_r+0x7ae>
 8007774:	4631      	mov	r1, r6
 8007776:	4622      	mov	r2, r4
 8007778:	4628      	mov	r0, r5
 800777a:	f000 ffd3 	bl	8008724 <__pow5mult>
 800777e:	465a      	mov	r2, fp
 8007780:	4601      	mov	r1, r0
 8007782:	4606      	mov	r6, r0
 8007784:	4628      	mov	r0, r5
 8007786:	f000 ff25 	bl	80085d4 <__multiply>
 800778a:	4680      	mov	r8, r0
 800778c:	4659      	mov	r1, fp
 800778e:	4628      	mov	r0, r5
 8007790:	f000 fe0a 	bl	80083a8 <_Bfree>
 8007794:	46c3      	mov	fp, r8
 8007796:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007798:	1b1a      	subs	r2, r3, r4
 800779a:	d004      	beq.n	80077a6 <_dtoa_r+0x7be>
 800779c:	4659      	mov	r1, fp
 800779e:	4628      	mov	r0, r5
 80077a0:	f000 ffc0 	bl	8008724 <__pow5mult>
 80077a4:	4683      	mov	fp, r0
 80077a6:	2101      	movs	r1, #1
 80077a8:	4628      	mov	r0, r5
 80077aa:	f000 fefd 	bl	80085a8 <__i2b>
 80077ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80077b0:	4604      	mov	r4, r0
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	f340 8086 	ble.w	80078c4 <_dtoa_r+0x8dc>
 80077b8:	461a      	mov	r2, r3
 80077ba:	4601      	mov	r1, r0
 80077bc:	4628      	mov	r0, r5
 80077be:	f000 ffb1 	bl	8008724 <__pow5mult>
 80077c2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80077c4:	4604      	mov	r4, r0
 80077c6:	2b01      	cmp	r3, #1
 80077c8:	dd7f      	ble.n	80078ca <_dtoa_r+0x8e2>
 80077ca:	f04f 0800 	mov.w	r8, #0
 80077ce:	6923      	ldr	r3, [r4, #16]
 80077d0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80077d4:	6918      	ldr	r0, [r3, #16]
 80077d6:	f000 fe99 	bl	800850c <__hi0bits>
 80077da:	f1c0 0020 	rsb	r0, r0, #32
 80077de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077e0:	4418      	add	r0, r3
 80077e2:	f010 001f 	ands.w	r0, r0, #31
 80077e6:	f000 8092 	beq.w	800790e <_dtoa_r+0x926>
 80077ea:	f1c0 0320 	rsb	r3, r0, #32
 80077ee:	2b04      	cmp	r3, #4
 80077f0:	f340 808a 	ble.w	8007908 <_dtoa_r+0x920>
 80077f4:	f1c0 001c 	rsb	r0, r0, #28
 80077f8:	9b06      	ldr	r3, [sp, #24]
 80077fa:	4407      	add	r7, r0
 80077fc:	4403      	add	r3, r0
 80077fe:	9306      	str	r3, [sp, #24]
 8007800:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007802:	4403      	add	r3, r0
 8007804:	9309      	str	r3, [sp, #36]	; 0x24
 8007806:	9b06      	ldr	r3, [sp, #24]
 8007808:	2b00      	cmp	r3, #0
 800780a:	dd05      	ble.n	8007818 <_dtoa_r+0x830>
 800780c:	4659      	mov	r1, fp
 800780e:	461a      	mov	r2, r3
 8007810:	4628      	mov	r0, r5
 8007812:	f000 ffe1 	bl	80087d8 <__lshift>
 8007816:	4683      	mov	fp, r0
 8007818:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800781a:	2b00      	cmp	r3, #0
 800781c:	dd05      	ble.n	800782a <_dtoa_r+0x842>
 800781e:	4621      	mov	r1, r4
 8007820:	461a      	mov	r2, r3
 8007822:	4628      	mov	r0, r5
 8007824:	f000 ffd8 	bl	80087d8 <__lshift>
 8007828:	4604      	mov	r4, r0
 800782a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800782c:	2b00      	cmp	r3, #0
 800782e:	d070      	beq.n	8007912 <_dtoa_r+0x92a>
 8007830:	4621      	mov	r1, r4
 8007832:	4658      	mov	r0, fp
 8007834:	f001 f840 	bl	80088b8 <__mcmp>
 8007838:	2800      	cmp	r0, #0
 800783a:	da6a      	bge.n	8007912 <_dtoa_r+0x92a>
 800783c:	2300      	movs	r3, #0
 800783e:	4659      	mov	r1, fp
 8007840:	220a      	movs	r2, #10
 8007842:	4628      	mov	r0, r5
 8007844:	f000 fdd2 	bl	80083ec <__multadd>
 8007848:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800784a:	4683      	mov	fp, r0
 800784c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007850:	2b00      	cmp	r3, #0
 8007852:	f000 8194 	beq.w	8007b7e <_dtoa_r+0xb96>
 8007856:	4631      	mov	r1, r6
 8007858:	2300      	movs	r3, #0
 800785a:	220a      	movs	r2, #10
 800785c:	4628      	mov	r0, r5
 800785e:	f000 fdc5 	bl	80083ec <__multadd>
 8007862:	f1b9 0f00 	cmp.w	r9, #0
 8007866:	4606      	mov	r6, r0
 8007868:	f300 8093 	bgt.w	8007992 <_dtoa_r+0x9aa>
 800786c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800786e:	2b02      	cmp	r3, #2
 8007870:	dc57      	bgt.n	8007922 <_dtoa_r+0x93a>
 8007872:	e08e      	b.n	8007992 <_dtoa_r+0x9aa>
 8007874:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007876:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800787a:	e757      	b.n	800772c <_dtoa_r+0x744>
 800787c:	9b08      	ldr	r3, [sp, #32]
 800787e:	1e5c      	subs	r4, r3, #1
 8007880:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007882:	42a3      	cmp	r3, r4
 8007884:	bfb7      	itett	lt
 8007886:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007888:	1b1c      	subge	r4, r3, r4
 800788a:	1ae2      	sublt	r2, r4, r3
 800788c:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800788e:	bfbe      	ittt	lt
 8007890:	940a      	strlt	r4, [sp, #40]	; 0x28
 8007892:	189b      	addlt	r3, r3, r2
 8007894:	930e      	strlt	r3, [sp, #56]	; 0x38
 8007896:	9b08      	ldr	r3, [sp, #32]
 8007898:	bfb8      	it	lt
 800789a:	2400      	movlt	r4, #0
 800789c:	2b00      	cmp	r3, #0
 800789e:	bfbb      	ittet	lt
 80078a0:	9b06      	ldrlt	r3, [sp, #24]
 80078a2:	9a08      	ldrlt	r2, [sp, #32]
 80078a4:	9f06      	ldrge	r7, [sp, #24]
 80078a6:	1a9f      	sublt	r7, r3, r2
 80078a8:	bfac      	ite	ge
 80078aa:	9b08      	ldrge	r3, [sp, #32]
 80078ac:	2300      	movlt	r3, #0
 80078ae:	e73f      	b.n	8007730 <_dtoa_r+0x748>
 80078b0:	3fe00000 	.word	0x3fe00000
 80078b4:	40240000 	.word	0x40240000
 80078b8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80078ba:	9f06      	ldr	r7, [sp, #24]
 80078bc:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80078be:	e742      	b.n	8007746 <_dtoa_r+0x75e>
 80078c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80078c2:	e76b      	b.n	800779c <_dtoa_r+0x7b4>
 80078c4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80078c6:	2b01      	cmp	r3, #1
 80078c8:	dc19      	bgt.n	80078fe <_dtoa_r+0x916>
 80078ca:	9b04      	ldr	r3, [sp, #16]
 80078cc:	b9bb      	cbnz	r3, 80078fe <_dtoa_r+0x916>
 80078ce:	9b05      	ldr	r3, [sp, #20]
 80078d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80078d4:	b99b      	cbnz	r3, 80078fe <_dtoa_r+0x916>
 80078d6:	9b05      	ldr	r3, [sp, #20]
 80078d8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80078dc:	0d1b      	lsrs	r3, r3, #20
 80078de:	051b      	lsls	r3, r3, #20
 80078e0:	b183      	cbz	r3, 8007904 <_dtoa_r+0x91c>
 80078e2:	f04f 0801 	mov.w	r8, #1
 80078e6:	9b06      	ldr	r3, [sp, #24]
 80078e8:	3301      	adds	r3, #1
 80078ea:	9306      	str	r3, [sp, #24]
 80078ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078ee:	3301      	adds	r3, #1
 80078f0:	9309      	str	r3, [sp, #36]	; 0x24
 80078f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	f47f af6a 	bne.w	80077ce <_dtoa_r+0x7e6>
 80078fa:	2001      	movs	r0, #1
 80078fc:	e76f      	b.n	80077de <_dtoa_r+0x7f6>
 80078fe:	f04f 0800 	mov.w	r8, #0
 8007902:	e7f6      	b.n	80078f2 <_dtoa_r+0x90a>
 8007904:	4698      	mov	r8, r3
 8007906:	e7f4      	b.n	80078f2 <_dtoa_r+0x90a>
 8007908:	f43f af7d 	beq.w	8007806 <_dtoa_r+0x81e>
 800790c:	4618      	mov	r0, r3
 800790e:	301c      	adds	r0, #28
 8007910:	e772      	b.n	80077f8 <_dtoa_r+0x810>
 8007912:	9b08      	ldr	r3, [sp, #32]
 8007914:	2b00      	cmp	r3, #0
 8007916:	dc36      	bgt.n	8007986 <_dtoa_r+0x99e>
 8007918:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800791a:	2b02      	cmp	r3, #2
 800791c:	dd33      	ble.n	8007986 <_dtoa_r+0x99e>
 800791e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007922:	f1b9 0f00 	cmp.w	r9, #0
 8007926:	d10d      	bne.n	8007944 <_dtoa_r+0x95c>
 8007928:	4621      	mov	r1, r4
 800792a:	464b      	mov	r3, r9
 800792c:	2205      	movs	r2, #5
 800792e:	4628      	mov	r0, r5
 8007930:	f000 fd5c 	bl	80083ec <__multadd>
 8007934:	4601      	mov	r1, r0
 8007936:	4604      	mov	r4, r0
 8007938:	4658      	mov	r0, fp
 800793a:	f000 ffbd 	bl	80088b8 <__mcmp>
 800793e:	2800      	cmp	r0, #0
 8007940:	f73f adb8 	bgt.w	80074b4 <_dtoa_r+0x4cc>
 8007944:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007946:	9f03      	ldr	r7, [sp, #12]
 8007948:	ea6f 0a03 	mvn.w	sl, r3
 800794c:	f04f 0800 	mov.w	r8, #0
 8007950:	4621      	mov	r1, r4
 8007952:	4628      	mov	r0, r5
 8007954:	f000 fd28 	bl	80083a8 <_Bfree>
 8007958:	2e00      	cmp	r6, #0
 800795a:	f43f aea7 	beq.w	80076ac <_dtoa_r+0x6c4>
 800795e:	f1b8 0f00 	cmp.w	r8, #0
 8007962:	d005      	beq.n	8007970 <_dtoa_r+0x988>
 8007964:	45b0      	cmp	r8, r6
 8007966:	d003      	beq.n	8007970 <_dtoa_r+0x988>
 8007968:	4641      	mov	r1, r8
 800796a:	4628      	mov	r0, r5
 800796c:	f000 fd1c 	bl	80083a8 <_Bfree>
 8007970:	4631      	mov	r1, r6
 8007972:	4628      	mov	r0, r5
 8007974:	f000 fd18 	bl	80083a8 <_Bfree>
 8007978:	e698      	b.n	80076ac <_dtoa_r+0x6c4>
 800797a:	2400      	movs	r4, #0
 800797c:	4626      	mov	r6, r4
 800797e:	e7e1      	b.n	8007944 <_dtoa_r+0x95c>
 8007980:	46c2      	mov	sl, r8
 8007982:	4626      	mov	r6, r4
 8007984:	e596      	b.n	80074b4 <_dtoa_r+0x4cc>
 8007986:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007988:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800798c:	2b00      	cmp	r3, #0
 800798e:	f000 80fd 	beq.w	8007b8c <_dtoa_r+0xba4>
 8007992:	2f00      	cmp	r7, #0
 8007994:	dd05      	ble.n	80079a2 <_dtoa_r+0x9ba>
 8007996:	4631      	mov	r1, r6
 8007998:	463a      	mov	r2, r7
 800799a:	4628      	mov	r0, r5
 800799c:	f000 ff1c 	bl	80087d8 <__lshift>
 80079a0:	4606      	mov	r6, r0
 80079a2:	f1b8 0f00 	cmp.w	r8, #0
 80079a6:	d05c      	beq.n	8007a62 <_dtoa_r+0xa7a>
 80079a8:	4628      	mov	r0, r5
 80079aa:	6871      	ldr	r1, [r6, #4]
 80079ac:	f000 fcbc 	bl	8008328 <_Balloc>
 80079b0:	4607      	mov	r7, r0
 80079b2:	b928      	cbnz	r0, 80079c0 <_dtoa_r+0x9d8>
 80079b4:	4602      	mov	r2, r0
 80079b6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80079ba:	4b7f      	ldr	r3, [pc, #508]	; (8007bb8 <_dtoa_r+0xbd0>)
 80079bc:	f7ff bb28 	b.w	8007010 <_dtoa_r+0x28>
 80079c0:	6932      	ldr	r2, [r6, #16]
 80079c2:	f106 010c 	add.w	r1, r6, #12
 80079c6:	3202      	adds	r2, #2
 80079c8:	0092      	lsls	r2, r2, #2
 80079ca:	300c      	adds	r0, #12
 80079cc:	f000 fc9e 	bl	800830c <memcpy>
 80079d0:	2201      	movs	r2, #1
 80079d2:	4639      	mov	r1, r7
 80079d4:	4628      	mov	r0, r5
 80079d6:	f000 feff 	bl	80087d8 <__lshift>
 80079da:	46b0      	mov	r8, r6
 80079dc:	4606      	mov	r6, r0
 80079de:	9b03      	ldr	r3, [sp, #12]
 80079e0:	3301      	adds	r3, #1
 80079e2:	9308      	str	r3, [sp, #32]
 80079e4:	9b03      	ldr	r3, [sp, #12]
 80079e6:	444b      	add	r3, r9
 80079e8:	930a      	str	r3, [sp, #40]	; 0x28
 80079ea:	9b04      	ldr	r3, [sp, #16]
 80079ec:	f003 0301 	and.w	r3, r3, #1
 80079f0:	9309      	str	r3, [sp, #36]	; 0x24
 80079f2:	9b08      	ldr	r3, [sp, #32]
 80079f4:	4621      	mov	r1, r4
 80079f6:	3b01      	subs	r3, #1
 80079f8:	4658      	mov	r0, fp
 80079fa:	9304      	str	r3, [sp, #16]
 80079fc:	f7ff fa66 	bl	8006ecc <quorem>
 8007a00:	4603      	mov	r3, r0
 8007a02:	4641      	mov	r1, r8
 8007a04:	3330      	adds	r3, #48	; 0x30
 8007a06:	9006      	str	r0, [sp, #24]
 8007a08:	4658      	mov	r0, fp
 8007a0a:	930b      	str	r3, [sp, #44]	; 0x2c
 8007a0c:	f000 ff54 	bl	80088b8 <__mcmp>
 8007a10:	4632      	mov	r2, r6
 8007a12:	4681      	mov	r9, r0
 8007a14:	4621      	mov	r1, r4
 8007a16:	4628      	mov	r0, r5
 8007a18:	f000 ff6a 	bl	80088f0 <__mdiff>
 8007a1c:	68c2      	ldr	r2, [r0, #12]
 8007a1e:	4607      	mov	r7, r0
 8007a20:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007a22:	bb02      	cbnz	r2, 8007a66 <_dtoa_r+0xa7e>
 8007a24:	4601      	mov	r1, r0
 8007a26:	4658      	mov	r0, fp
 8007a28:	f000 ff46 	bl	80088b8 <__mcmp>
 8007a2c:	4602      	mov	r2, r0
 8007a2e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007a30:	4639      	mov	r1, r7
 8007a32:	4628      	mov	r0, r5
 8007a34:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8007a38:	f000 fcb6 	bl	80083a8 <_Bfree>
 8007a3c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007a3e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007a40:	9f08      	ldr	r7, [sp, #32]
 8007a42:	ea43 0102 	orr.w	r1, r3, r2
 8007a46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a48:	430b      	orrs	r3, r1
 8007a4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007a4c:	d10d      	bne.n	8007a6a <_dtoa_r+0xa82>
 8007a4e:	2b39      	cmp	r3, #57	; 0x39
 8007a50:	d029      	beq.n	8007aa6 <_dtoa_r+0xabe>
 8007a52:	f1b9 0f00 	cmp.w	r9, #0
 8007a56:	dd01      	ble.n	8007a5c <_dtoa_r+0xa74>
 8007a58:	9b06      	ldr	r3, [sp, #24]
 8007a5a:	3331      	adds	r3, #49	; 0x31
 8007a5c:	9a04      	ldr	r2, [sp, #16]
 8007a5e:	7013      	strb	r3, [r2, #0]
 8007a60:	e776      	b.n	8007950 <_dtoa_r+0x968>
 8007a62:	4630      	mov	r0, r6
 8007a64:	e7b9      	b.n	80079da <_dtoa_r+0x9f2>
 8007a66:	2201      	movs	r2, #1
 8007a68:	e7e2      	b.n	8007a30 <_dtoa_r+0xa48>
 8007a6a:	f1b9 0f00 	cmp.w	r9, #0
 8007a6e:	db06      	blt.n	8007a7e <_dtoa_r+0xa96>
 8007a70:	9922      	ldr	r1, [sp, #136]	; 0x88
 8007a72:	ea41 0909 	orr.w	r9, r1, r9
 8007a76:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007a78:	ea59 0101 	orrs.w	r1, r9, r1
 8007a7c:	d120      	bne.n	8007ac0 <_dtoa_r+0xad8>
 8007a7e:	2a00      	cmp	r2, #0
 8007a80:	ddec      	ble.n	8007a5c <_dtoa_r+0xa74>
 8007a82:	4659      	mov	r1, fp
 8007a84:	2201      	movs	r2, #1
 8007a86:	4628      	mov	r0, r5
 8007a88:	9308      	str	r3, [sp, #32]
 8007a8a:	f000 fea5 	bl	80087d8 <__lshift>
 8007a8e:	4621      	mov	r1, r4
 8007a90:	4683      	mov	fp, r0
 8007a92:	f000 ff11 	bl	80088b8 <__mcmp>
 8007a96:	2800      	cmp	r0, #0
 8007a98:	9b08      	ldr	r3, [sp, #32]
 8007a9a:	dc02      	bgt.n	8007aa2 <_dtoa_r+0xaba>
 8007a9c:	d1de      	bne.n	8007a5c <_dtoa_r+0xa74>
 8007a9e:	07da      	lsls	r2, r3, #31
 8007aa0:	d5dc      	bpl.n	8007a5c <_dtoa_r+0xa74>
 8007aa2:	2b39      	cmp	r3, #57	; 0x39
 8007aa4:	d1d8      	bne.n	8007a58 <_dtoa_r+0xa70>
 8007aa6:	2339      	movs	r3, #57	; 0x39
 8007aa8:	9a04      	ldr	r2, [sp, #16]
 8007aaa:	7013      	strb	r3, [r2, #0]
 8007aac:	463b      	mov	r3, r7
 8007aae:	461f      	mov	r7, r3
 8007ab0:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8007ab4:	3b01      	subs	r3, #1
 8007ab6:	2a39      	cmp	r2, #57	; 0x39
 8007ab8:	d050      	beq.n	8007b5c <_dtoa_r+0xb74>
 8007aba:	3201      	adds	r2, #1
 8007abc:	701a      	strb	r2, [r3, #0]
 8007abe:	e747      	b.n	8007950 <_dtoa_r+0x968>
 8007ac0:	2a00      	cmp	r2, #0
 8007ac2:	dd03      	ble.n	8007acc <_dtoa_r+0xae4>
 8007ac4:	2b39      	cmp	r3, #57	; 0x39
 8007ac6:	d0ee      	beq.n	8007aa6 <_dtoa_r+0xabe>
 8007ac8:	3301      	adds	r3, #1
 8007aca:	e7c7      	b.n	8007a5c <_dtoa_r+0xa74>
 8007acc:	9a08      	ldr	r2, [sp, #32]
 8007ace:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007ad0:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007ad4:	428a      	cmp	r2, r1
 8007ad6:	d02a      	beq.n	8007b2e <_dtoa_r+0xb46>
 8007ad8:	4659      	mov	r1, fp
 8007ada:	2300      	movs	r3, #0
 8007adc:	220a      	movs	r2, #10
 8007ade:	4628      	mov	r0, r5
 8007ae0:	f000 fc84 	bl	80083ec <__multadd>
 8007ae4:	45b0      	cmp	r8, r6
 8007ae6:	4683      	mov	fp, r0
 8007ae8:	f04f 0300 	mov.w	r3, #0
 8007aec:	f04f 020a 	mov.w	r2, #10
 8007af0:	4641      	mov	r1, r8
 8007af2:	4628      	mov	r0, r5
 8007af4:	d107      	bne.n	8007b06 <_dtoa_r+0xb1e>
 8007af6:	f000 fc79 	bl	80083ec <__multadd>
 8007afa:	4680      	mov	r8, r0
 8007afc:	4606      	mov	r6, r0
 8007afe:	9b08      	ldr	r3, [sp, #32]
 8007b00:	3301      	adds	r3, #1
 8007b02:	9308      	str	r3, [sp, #32]
 8007b04:	e775      	b.n	80079f2 <_dtoa_r+0xa0a>
 8007b06:	f000 fc71 	bl	80083ec <__multadd>
 8007b0a:	4631      	mov	r1, r6
 8007b0c:	4680      	mov	r8, r0
 8007b0e:	2300      	movs	r3, #0
 8007b10:	220a      	movs	r2, #10
 8007b12:	4628      	mov	r0, r5
 8007b14:	f000 fc6a 	bl	80083ec <__multadd>
 8007b18:	4606      	mov	r6, r0
 8007b1a:	e7f0      	b.n	8007afe <_dtoa_r+0xb16>
 8007b1c:	f1b9 0f00 	cmp.w	r9, #0
 8007b20:	bfcc      	ite	gt
 8007b22:	464f      	movgt	r7, r9
 8007b24:	2701      	movle	r7, #1
 8007b26:	f04f 0800 	mov.w	r8, #0
 8007b2a:	9a03      	ldr	r2, [sp, #12]
 8007b2c:	4417      	add	r7, r2
 8007b2e:	4659      	mov	r1, fp
 8007b30:	2201      	movs	r2, #1
 8007b32:	4628      	mov	r0, r5
 8007b34:	9308      	str	r3, [sp, #32]
 8007b36:	f000 fe4f 	bl	80087d8 <__lshift>
 8007b3a:	4621      	mov	r1, r4
 8007b3c:	4683      	mov	fp, r0
 8007b3e:	f000 febb 	bl	80088b8 <__mcmp>
 8007b42:	2800      	cmp	r0, #0
 8007b44:	dcb2      	bgt.n	8007aac <_dtoa_r+0xac4>
 8007b46:	d102      	bne.n	8007b4e <_dtoa_r+0xb66>
 8007b48:	9b08      	ldr	r3, [sp, #32]
 8007b4a:	07db      	lsls	r3, r3, #31
 8007b4c:	d4ae      	bmi.n	8007aac <_dtoa_r+0xac4>
 8007b4e:	463b      	mov	r3, r7
 8007b50:	461f      	mov	r7, r3
 8007b52:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007b56:	2a30      	cmp	r2, #48	; 0x30
 8007b58:	d0fa      	beq.n	8007b50 <_dtoa_r+0xb68>
 8007b5a:	e6f9      	b.n	8007950 <_dtoa_r+0x968>
 8007b5c:	9a03      	ldr	r2, [sp, #12]
 8007b5e:	429a      	cmp	r2, r3
 8007b60:	d1a5      	bne.n	8007aae <_dtoa_r+0xac6>
 8007b62:	2331      	movs	r3, #49	; 0x31
 8007b64:	f10a 0a01 	add.w	sl, sl, #1
 8007b68:	e779      	b.n	8007a5e <_dtoa_r+0xa76>
 8007b6a:	4b14      	ldr	r3, [pc, #80]	; (8007bbc <_dtoa_r+0xbd4>)
 8007b6c:	f7ff baa8 	b.w	80070c0 <_dtoa_r+0xd8>
 8007b70:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	f47f aa81 	bne.w	800707a <_dtoa_r+0x92>
 8007b78:	4b11      	ldr	r3, [pc, #68]	; (8007bc0 <_dtoa_r+0xbd8>)
 8007b7a:	f7ff baa1 	b.w	80070c0 <_dtoa_r+0xd8>
 8007b7e:	f1b9 0f00 	cmp.w	r9, #0
 8007b82:	dc03      	bgt.n	8007b8c <_dtoa_r+0xba4>
 8007b84:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007b86:	2b02      	cmp	r3, #2
 8007b88:	f73f aecb 	bgt.w	8007922 <_dtoa_r+0x93a>
 8007b8c:	9f03      	ldr	r7, [sp, #12]
 8007b8e:	4621      	mov	r1, r4
 8007b90:	4658      	mov	r0, fp
 8007b92:	f7ff f99b 	bl	8006ecc <quorem>
 8007b96:	9a03      	ldr	r2, [sp, #12]
 8007b98:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8007b9c:	f807 3b01 	strb.w	r3, [r7], #1
 8007ba0:	1aba      	subs	r2, r7, r2
 8007ba2:	4591      	cmp	r9, r2
 8007ba4:	ddba      	ble.n	8007b1c <_dtoa_r+0xb34>
 8007ba6:	4659      	mov	r1, fp
 8007ba8:	2300      	movs	r3, #0
 8007baa:	220a      	movs	r2, #10
 8007bac:	4628      	mov	r0, r5
 8007bae:	f000 fc1d 	bl	80083ec <__multadd>
 8007bb2:	4683      	mov	fp, r0
 8007bb4:	e7eb      	b.n	8007b8e <_dtoa_r+0xba6>
 8007bb6:	bf00      	nop
 8007bb8:	0800a6d8 	.word	0x0800a6d8
 8007bbc:	0800a8d1 	.word	0x0800a8d1
 8007bc0:	0800a659 	.word	0x0800a659

08007bc4 <rshift>:
 8007bc4:	6903      	ldr	r3, [r0, #16]
 8007bc6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007bca:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8007bce:	f100 0414 	add.w	r4, r0, #20
 8007bd2:	ea4f 1261 	mov.w	r2, r1, asr #5
 8007bd6:	dd46      	ble.n	8007c66 <rshift+0xa2>
 8007bd8:	f011 011f 	ands.w	r1, r1, #31
 8007bdc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8007be0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8007be4:	d10c      	bne.n	8007c00 <rshift+0x3c>
 8007be6:	4629      	mov	r1, r5
 8007be8:	f100 0710 	add.w	r7, r0, #16
 8007bec:	42b1      	cmp	r1, r6
 8007bee:	d335      	bcc.n	8007c5c <rshift+0x98>
 8007bf0:	1a9b      	subs	r3, r3, r2
 8007bf2:	009b      	lsls	r3, r3, #2
 8007bf4:	1eea      	subs	r2, r5, #3
 8007bf6:	4296      	cmp	r6, r2
 8007bf8:	bf38      	it	cc
 8007bfa:	2300      	movcc	r3, #0
 8007bfc:	4423      	add	r3, r4
 8007bfe:	e015      	b.n	8007c2c <rshift+0x68>
 8007c00:	46a1      	mov	r9, r4
 8007c02:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8007c06:	f1c1 0820 	rsb	r8, r1, #32
 8007c0a:	40cf      	lsrs	r7, r1
 8007c0c:	f105 0e04 	add.w	lr, r5, #4
 8007c10:	4576      	cmp	r6, lr
 8007c12:	46f4      	mov	ip, lr
 8007c14:	d816      	bhi.n	8007c44 <rshift+0x80>
 8007c16:	1a9a      	subs	r2, r3, r2
 8007c18:	0092      	lsls	r2, r2, #2
 8007c1a:	3a04      	subs	r2, #4
 8007c1c:	3501      	adds	r5, #1
 8007c1e:	42ae      	cmp	r6, r5
 8007c20:	bf38      	it	cc
 8007c22:	2200      	movcc	r2, #0
 8007c24:	18a3      	adds	r3, r4, r2
 8007c26:	50a7      	str	r7, [r4, r2]
 8007c28:	b107      	cbz	r7, 8007c2c <rshift+0x68>
 8007c2a:	3304      	adds	r3, #4
 8007c2c:	42a3      	cmp	r3, r4
 8007c2e:	eba3 0204 	sub.w	r2, r3, r4
 8007c32:	bf08      	it	eq
 8007c34:	2300      	moveq	r3, #0
 8007c36:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007c3a:	6102      	str	r2, [r0, #16]
 8007c3c:	bf08      	it	eq
 8007c3e:	6143      	streq	r3, [r0, #20]
 8007c40:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007c44:	f8dc c000 	ldr.w	ip, [ip]
 8007c48:	fa0c fc08 	lsl.w	ip, ip, r8
 8007c4c:	ea4c 0707 	orr.w	r7, ip, r7
 8007c50:	f849 7b04 	str.w	r7, [r9], #4
 8007c54:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007c58:	40cf      	lsrs	r7, r1
 8007c5a:	e7d9      	b.n	8007c10 <rshift+0x4c>
 8007c5c:	f851 cb04 	ldr.w	ip, [r1], #4
 8007c60:	f847 cf04 	str.w	ip, [r7, #4]!
 8007c64:	e7c2      	b.n	8007bec <rshift+0x28>
 8007c66:	4623      	mov	r3, r4
 8007c68:	e7e0      	b.n	8007c2c <rshift+0x68>

08007c6a <__hexdig_fun>:
 8007c6a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8007c6e:	2b09      	cmp	r3, #9
 8007c70:	d802      	bhi.n	8007c78 <__hexdig_fun+0xe>
 8007c72:	3820      	subs	r0, #32
 8007c74:	b2c0      	uxtb	r0, r0
 8007c76:	4770      	bx	lr
 8007c78:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8007c7c:	2b05      	cmp	r3, #5
 8007c7e:	d801      	bhi.n	8007c84 <__hexdig_fun+0x1a>
 8007c80:	3847      	subs	r0, #71	; 0x47
 8007c82:	e7f7      	b.n	8007c74 <__hexdig_fun+0xa>
 8007c84:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8007c88:	2b05      	cmp	r3, #5
 8007c8a:	d801      	bhi.n	8007c90 <__hexdig_fun+0x26>
 8007c8c:	3827      	subs	r0, #39	; 0x27
 8007c8e:	e7f1      	b.n	8007c74 <__hexdig_fun+0xa>
 8007c90:	2000      	movs	r0, #0
 8007c92:	4770      	bx	lr

08007c94 <__gethex>:
 8007c94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c98:	b08b      	sub	sp, #44	; 0x2c
 8007c9a:	9305      	str	r3, [sp, #20]
 8007c9c:	4bb2      	ldr	r3, [pc, #712]	; (8007f68 <__gethex+0x2d4>)
 8007c9e:	9002      	str	r0, [sp, #8]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	468b      	mov	fp, r1
 8007ca4:	4618      	mov	r0, r3
 8007ca6:	4690      	mov	r8, r2
 8007ca8:	9303      	str	r3, [sp, #12]
 8007caa:	f7f8 fa51 	bl	8000150 <strlen>
 8007cae:	4682      	mov	sl, r0
 8007cb0:	9b03      	ldr	r3, [sp, #12]
 8007cb2:	f8db 2000 	ldr.w	r2, [fp]
 8007cb6:	4403      	add	r3, r0
 8007cb8:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8007cbc:	9306      	str	r3, [sp, #24]
 8007cbe:	1c93      	adds	r3, r2, #2
 8007cc0:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8007cc4:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8007cc8:	32fe      	adds	r2, #254	; 0xfe
 8007cca:	18d1      	adds	r1, r2, r3
 8007ccc:	461f      	mov	r7, r3
 8007cce:	f813 0b01 	ldrb.w	r0, [r3], #1
 8007cd2:	9101      	str	r1, [sp, #4]
 8007cd4:	2830      	cmp	r0, #48	; 0x30
 8007cd6:	d0f8      	beq.n	8007cca <__gethex+0x36>
 8007cd8:	f7ff ffc7 	bl	8007c6a <__hexdig_fun>
 8007cdc:	4604      	mov	r4, r0
 8007cde:	2800      	cmp	r0, #0
 8007ce0:	d13a      	bne.n	8007d58 <__gethex+0xc4>
 8007ce2:	4652      	mov	r2, sl
 8007ce4:	4638      	mov	r0, r7
 8007ce6:	9903      	ldr	r1, [sp, #12]
 8007ce8:	f001 fda8 	bl	800983c <strncmp>
 8007cec:	4605      	mov	r5, r0
 8007cee:	2800      	cmp	r0, #0
 8007cf0:	d166      	bne.n	8007dc0 <__gethex+0x12c>
 8007cf2:	f817 000a 	ldrb.w	r0, [r7, sl]
 8007cf6:	eb07 060a 	add.w	r6, r7, sl
 8007cfa:	f7ff ffb6 	bl	8007c6a <__hexdig_fun>
 8007cfe:	2800      	cmp	r0, #0
 8007d00:	d060      	beq.n	8007dc4 <__gethex+0x130>
 8007d02:	4633      	mov	r3, r6
 8007d04:	7818      	ldrb	r0, [r3, #0]
 8007d06:	461f      	mov	r7, r3
 8007d08:	2830      	cmp	r0, #48	; 0x30
 8007d0a:	f103 0301 	add.w	r3, r3, #1
 8007d0e:	d0f9      	beq.n	8007d04 <__gethex+0x70>
 8007d10:	f7ff ffab 	bl	8007c6a <__hexdig_fun>
 8007d14:	2301      	movs	r3, #1
 8007d16:	fab0 f480 	clz	r4, r0
 8007d1a:	4635      	mov	r5, r6
 8007d1c:	0964      	lsrs	r4, r4, #5
 8007d1e:	9301      	str	r3, [sp, #4]
 8007d20:	463a      	mov	r2, r7
 8007d22:	4616      	mov	r6, r2
 8007d24:	7830      	ldrb	r0, [r6, #0]
 8007d26:	3201      	adds	r2, #1
 8007d28:	f7ff ff9f 	bl	8007c6a <__hexdig_fun>
 8007d2c:	2800      	cmp	r0, #0
 8007d2e:	d1f8      	bne.n	8007d22 <__gethex+0x8e>
 8007d30:	4652      	mov	r2, sl
 8007d32:	4630      	mov	r0, r6
 8007d34:	9903      	ldr	r1, [sp, #12]
 8007d36:	f001 fd81 	bl	800983c <strncmp>
 8007d3a:	b980      	cbnz	r0, 8007d5e <__gethex+0xca>
 8007d3c:	b94d      	cbnz	r5, 8007d52 <__gethex+0xbe>
 8007d3e:	eb06 050a 	add.w	r5, r6, sl
 8007d42:	462a      	mov	r2, r5
 8007d44:	4616      	mov	r6, r2
 8007d46:	7830      	ldrb	r0, [r6, #0]
 8007d48:	3201      	adds	r2, #1
 8007d4a:	f7ff ff8e 	bl	8007c6a <__hexdig_fun>
 8007d4e:	2800      	cmp	r0, #0
 8007d50:	d1f8      	bne.n	8007d44 <__gethex+0xb0>
 8007d52:	1bad      	subs	r5, r5, r6
 8007d54:	00ad      	lsls	r5, r5, #2
 8007d56:	e004      	b.n	8007d62 <__gethex+0xce>
 8007d58:	2400      	movs	r4, #0
 8007d5a:	4625      	mov	r5, r4
 8007d5c:	e7e0      	b.n	8007d20 <__gethex+0x8c>
 8007d5e:	2d00      	cmp	r5, #0
 8007d60:	d1f7      	bne.n	8007d52 <__gethex+0xbe>
 8007d62:	7833      	ldrb	r3, [r6, #0]
 8007d64:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007d68:	2b50      	cmp	r3, #80	; 0x50
 8007d6a:	d139      	bne.n	8007de0 <__gethex+0x14c>
 8007d6c:	7873      	ldrb	r3, [r6, #1]
 8007d6e:	2b2b      	cmp	r3, #43	; 0x2b
 8007d70:	d02a      	beq.n	8007dc8 <__gethex+0x134>
 8007d72:	2b2d      	cmp	r3, #45	; 0x2d
 8007d74:	d02c      	beq.n	8007dd0 <__gethex+0x13c>
 8007d76:	f04f 0900 	mov.w	r9, #0
 8007d7a:	1c71      	adds	r1, r6, #1
 8007d7c:	7808      	ldrb	r0, [r1, #0]
 8007d7e:	f7ff ff74 	bl	8007c6a <__hexdig_fun>
 8007d82:	1e43      	subs	r3, r0, #1
 8007d84:	b2db      	uxtb	r3, r3
 8007d86:	2b18      	cmp	r3, #24
 8007d88:	d82a      	bhi.n	8007de0 <__gethex+0x14c>
 8007d8a:	f1a0 0210 	sub.w	r2, r0, #16
 8007d8e:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007d92:	f7ff ff6a 	bl	8007c6a <__hexdig_fun>
 8007d96:	1e43      	subs	r3, r0, #1
 8007d98:	b2db      	uxtb	r3, r3
 8007d9a:	2b18      	cmp	r3, #24
 8007d9c:	d91b      	bls.n	8007dd6 <__gethex+0x142>
 8007d9e:	f1b9 0f00 	cmp.w	r9, #0
 8007da2:	d000      	beq.n	8007da6 <__gethex+0x112>
 8007da4:	4252      	negs	r2, r2
 8007da6:	4415      	add	r5, r2
 8007da8:	f8cb 1000 	str.w	r1, [fp]
 8007dac:	b1d4      	cbz	r4, 8007de4 <__gethex+0x150>
 8007dae:	9b01      	ldr	r3, [sp, #4]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	bf14      	ite	ne
 8007db4:	2700      	movne	r7, #0
 8007db6:	2706      	moveq	r7, #6
 8007db8:	4638      	mov	r0, r7
 8007dba:	b00b      	add	sp, #44	; 0x2c
 8007dbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007dc0:	463e      	mov	r6, r7
 8007dc2:	4625      	mov	r5, r4
 8007dc4:	2401      	movs	r4, #1
 8007dc6:	e7cc      	b.n	8007d62 <__gethex+0xce>
 8007dc8:	f04f 0900 	mov.w	r9, #0
 8007dcc:	1cb1      	adds	r1, r6, #2
 8007dce:	e7d5      	b.n	8007d7c <__gethex+0xe8>
 8007dd0:	f04f 0901 	mov.w	r9, #1
 8007dd4:	e7fa      	b.n	8007dcc <__gethex+0x138>
 8007dd6:	230a      	movs	r3, #10
 8007dd8:	fb03 0202 	mla	r2, r3, r2, r0
 8007ddc:	3a10      	subs	r2, #16
 8007dde:	e7d6      	b.n	8007d8e <__gethex+0xfa>
 8007de0:	4631      	mov	r1, r6
 8007de2:	e7e1      	b.n	8007da8 <__gethex+0x114>
 8007de4:	4621      	mov	r1, r4
 8007de6:	1bf3      	subs	r3, r6, r7
 8007de8:	3b01      	subs	r3, #1
 8007dea:	2b07      	cmp	r3, #7
 8007dec:	dc0a      	bgt.n	8007e04 <__gethex+0x170>
 8007dee:	9802      	ldr	r0, [sp, #8]
 8007df0:	f000 fa9a 	bl	8008328 <_Balloc>
 8007df4:	4604      	mov	r4, r0
 8007df6:	b940      	cbnz	r0, 8007e0a <__gethex+0x176>
 8007df8:	4602      	mov	r2, r0
 8007dfa:	21de      	movs	r1, #222	; 0xde
 8007dfc:	4b5b      	ldr	r3, [pc, #364]	; (8007f6c <__gethex+0x2d8>)
 8007dfe:	485c      	ldr	r0, [pc, #368]	; (8007f70 <__gethex+0x2dc>)
 8007e00:	f001 fdea 	bl	80099d8 <__assert_func>
 8007e04:	3101      	adds	r1, #1
 8007e06:	105b      	asrs	r3, r3, #1
 8007e08:	e7ef      	b.n	8007dea <__gethex+0x156>
 8007e0a:	f04f 0b00 	mov.w	fp, #0
 8007e0e:	f100 0914 	add.w	r9, r0, #20
 8007e12:	f1ca 0301 	rsb	r3, sl, #1
 8007e16:	f8cd 9010 	str.w	r9, [sp, #16]
 8007e1a:	f8cd b004 	str.w	fp, [sp, #4]
 8007e1e:	9308      	str	r3, [sp, #32]
 8007e20:	42b7      	cmp	r7, r6
 8007e22:	d33f      	bcc.n	8007ea4 <__gethex+0x210>
 8007e24:	9f04      	ldr	r7, [sp, #16]
 8007e26:	9b01      	ldr	r3, [sp, #4]
 8007e28:	f847 3b04 	str.w	r3, [r7], #4
 8007e2c:	eba7 0709 	sub.w	r7, r7, r9
 8007e30:	10bf      	asrs	r7, r7, #2
 8007e32:	6127      	str	r7, [r4, #16]
 8007e34:	4618      	mov	r0, r3
 8007e36:	f000 fb69 	bl	800850c <__hi0bits>
 8007e3a:	017f      	lsls	r7, r7, #5
 8007e3c:	f8d8 6000 	ldr.w	r6, [r8]
 8007e40:	1a3f      	subs	r7, r7, r0
 8007e42:	42b7      	cmp	r7, r6
 8007e44:	dd62      	ble.n	8007f0c <__gethex+0x278>
 8007e46:	1bbf      	subs	r7, r7, r6
 8007e48:	4639      	mov	r1, r7
 8007e4a:	4620      	mov	r0, r4
 8007e4c:	f000 ff03 	bl	8008c56 <__any_on>
 8007e50:	4682      	mov	sl, r0
 8007e52:	b1a8      	cbz	r0, 8007e80 <__gethex+0x1ec>
 8007e54:	f04f 0a01 	mov.w	sl, #1
 8007e58:	1e7b      	subs	r3, r7, #1
 8007e5a:	1159      	asrs	r1, r3, #5
 8007e5c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8007e60:	f003 021f 	and.w	r2, r3, #31
 8007e64:	fa0a f202 	lsl.w	r2, sl, r2
 8007e68:	420a      	tst	r2, r1
 8007e6a:	d009      	beq.n	8007e80 <__gethex+0x1ec>
 8007e6c:	4553      	cmp	r3, sl
 8007e6e:	dd05      	ble.n	8007e7c <__gethex+0x1e8>
 8007e70:	4620      	mov	r0, r4
 8007e72:	1eb9      	subs	r1, r7, #2
 8007e74:	f000 feef 	bl	8008c56 <__any_on>
 8007e78:	2800      	cmp	r0, #0
 8007e7a:	d144      	bne.n	8007f06 <__gethex+0x272>
 8007e7c:	f04f 0a02 	mov.w	sl, #2
 8007e80:	4639      	mov	r1, r7
 8007e82:	4620      	mov	r0, r4
 8007e84:	f7ff fe9e 	bl	8007bc4 <rshift>
 8007e88:	443d      	add	r5, r7
 8007e8a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007e8e:	42ab      	cmp	r3, r5
 8007e90:	da4a      	bge.n	8007f28 <__gethex+0x294>
 8007e92:	4621      	mov	r1, r4
 8007e94:	9802      	ldr	r0, [sp, #8]
 8007e96:	f000 fa87 	bl	80083a8 <_Bfree>
 8007e9a:	2300      	movs	r3, #0
 8007e9c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007e9e:	27a3      	movs	r7, #163	; 0xa3
 8007ea0:	6013      	str	r3, [r2, #0]
 8007ea2:	e789      	b.n	8007db8 <__gethex+0x124>
 8007ea4:	1e73      	subs	r3, r6, #1
 8007ea6:	9a06      	ldr	r2, [sp, #24]
 8007ea8:	9307      	str	r3, [sp, #28]
 8007eaa:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007eae:	4293      	cmp	r3, r2
 8007eb0:	d019      	beq.n	8007ee6 <__gethex+0x252>
 8007eb2:	f1bb 0f20 	cmp.w	fp, #32
 8007eb6:	d107      	bne.n	8007ec8 <__gethex+0x234>
 8007eb8:	9b04      	ldr	r3, [sp, #16]
 8007eba:	9a01      	ldr	r2, [sp, #4]
 8007ebc:	f843 2b04 	str.w	r2, [r3], #4
 8007ec0:	9304      	str	r3, [sp, #16]
 8007ec2:	2300      	movs	r3, #0
 8007ec4:	469b      	mov	fp, r3
 8007ec6:	9301      	str	r3, [sp, #4]
 8007ec8:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8007ecc:	f7ff fecd 	bl	8007c6a <__hexdig_fun>
 8007ed0:	9b01      	ldr	r3, [sp, #4]
 8007ed2:	f000 000f 	and.w	r0, r0, #15
 8007ed6:	fa00 f00b 	lsl.w	r0, r0, fp
 8007eda:	4303      	orrs	r3, r0
 8007edc:	9301      	str	r3, [sp, #4]
 8007ede:	f10b 0b04 	add.w	fp, fp, #4
 8007ee2:	9b07      	ldr	r3, [sp, #28]
 8007ee4:	e00d      	b.n	8007f02 <__gethex+0x26e>
 8007ee6:	9a08      	ldr	r2, [sp, #32]
 8007ee8:	1e73      	subs	r3, r6, #1
 8007eea:	4413      	add	r3, r2
 8007eec:	42bb      	cmp	r3, r7
 8007eee:	d3e0      	bcc.n	8007eb2 <__gethex+0x21e>
 8007ef0:	4618      	mov	r0, r3
 8007ef2:	4652      	mov	r2, sl
 8007ef4:	9903      	ldr	r1, [sp, #12]
 8007ef6:	9309      	str	r3, [sp, #36]	; 0x24
 8007ef8:	f001 fca0 	bl	800983c <strncmp>
 8007efc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007efe:	2800      	cmp	r0, #0
 8007f00:	d1d7      	bne.n	8007eb2 <__gethex+0x21e>
 8007f02:	461e      	mov	r6, r3
 8007f04:	e78c      	b.n	8007e20 <__gethex+0x18c>
 8007f06:	f04f 0a03 	mov.w	sl, #3
 8007f0a:	e7b9      	b.n	8007e80 <__gethex+0x1ec>
 8007f0c:	da09      	bge.n	8007f22 <__gethex+0x28e>
 8007f0e:	1bf7      	subs	r7, r6, r7
 8007f10:	4621      	mov	r1, r4
 8007f12:	463a      	mov	r2, r7
 8007f14:	9802      	ldr	r0, [sp, #8]
 8007f16:	f000 fc5f 	bl	80087d8 <__lshift>
 8007f1a:	4604      	mov	r4, r0
 8007f1c:	1bed      	subs	r5, r5, r7
 8007f1e:	f100 0914 	add.w	r9, r0, #20
 8007f22:	f04f 0a00 	mov.w	sl, #0
 8007f26:	e7b0      	b.n	8007e8a <__gethex+0x1f6>
 8007f28:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8007f2c:	42a8      	cmp	r0, r5
 8007f2e:	dd72      	ble.n	8008016 <__gethex+0x382>
 8007f30:	1b45      	subs	r5, r0, r5
 8007f32:	42ae      	cmp	r6, r5
 8007f34:	dc35      	bgt.n	8007fa2 <__gethex+0x30e>
 8007f36:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007f3a:	2b02      	cmp	r3, #2
 8007f3c:	d029      	beq.n	8007f92 <__gethex+0x2fe>
 8007f3e:	2b03      	cmp	r3, #3
 8007f40:	d02b      	beq.n	8007f9a <__gethex+0x306>
 8007f42:	2b01      	cmp	r3, #1
 8007f44:	d11c      	bne.n	8007f80 <__gethex+0x2ec>
 8007f46:	42ae      	cmp	r6, r5
 8007f48:	d11a      	bne.n	8007f80 <__gethex+0x2ec>
 8007f4a:	2e01      	cmp	r6, #1
 8007f4c:	d112      	bne.n	8007f74 <__gethex+0x2e0>
 8007f4e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8007f52:	9a05      	ldr	r2, [sp, #20]
 8007f54:	2762      	movs	r7, #98	; 0x62
 8007f56:	6013      	str	r3, [r2, #0]
 8007f58:	2301      	movs	r3, #1
 8007f5a:	6123      	str	r3, [r4, #16]
 8007f5c:	f8c9 3000 	str.w	r3, [r9]
 8007f60:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007f62:	601c      	str	r4, [r3, #0]
 8007f64:	e728      	b.n	8007db8 <__gethex+0x124>
 8007f66:	bf00      	nop
 8007f68:	0800a750 	.word	0x0800a750
 8007f6c:	0800a6d8 	.word	0x0800a6d8
 8007f70:	0800a6e9 	.word	0x0800a6e9
 8007f74:	4620      	mov	r0, r4
 8007f76:	1e71      	subs	r1, r6, #1
 8007f78:	f000 fe6d 	bl	8008c56 <__any_on>
 8007f7c:	2800      	cmp	r0, #0
 8007f7e:	d1e6      	bne.n	8007f4e <__gethex+0x2ba>
 8007f80:	4621      	mov	r1, r4
 8007f82:	9802      	ldr	r0, [sp, #8]
 8007f84:	f000 fa10 	bl	80083a8 <_Bfree>
 8007f88:	2300      	movs	r3, #0
 8007f8a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007f8c:	2750      	movs	r7, #80	; 0x50
 8007f8e:	6013      	str	r3, [r2, #0]
 8007f90:	e712      	b.n	8007db8 <__gethex+0x124>
 8007f92:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d1f3      	bne.n	8007f80 <__gethex+0x2ec>
 8007f98:	e7d9      	b.n	8007f4e <__gethex+0x2ba>
 8007f9a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d1d6      	bne.n	8007f4e <__gethex+0x2ba>
 8007fa0:	e7ee      	b.n	8007f80 <__gethex+0x2ec>
 8007fa2:	1e6f      	subs	r7, r5, #1
 8007fa4:	f1ba 0f00 	cmp.w	sl, #0
 8007fa8:	d132      	bne.n	8008010 <__gethex+0x37c>
 8007faa:	b127      	cbz	r7, 8007fb6 <__gethex+0x322>
 8007fac:	4639      	mov	r1, r7
 8007fae:	4620      	mov	r0, r4
 8007fb0:	f000 fe51 	bl	8008c56 <__any_on>
 8007fb4:	4682      	mov	sl, r0
 8007fb6:	2101      	movs	r1, #1
 8007fb8:	117b      	asrs	r3, r7, #5
 8007fba:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8007fbe:	f007 071f 	and.w	r7, r7, #31
 8007fc2:	fa01 f707 	lsl.w	r7, r1, r7
 8007fc6:	421f      	tst	r7, r3
 8007fc8:	f04f 0702 	mov.w	r7, #2
 8007fcc:	4629      	mov	r1, r5
 8007fce:	4620      	mov	r0, r4
 8007fd0:	bf18      	it	ne
 8007fd2:	f04a 0a02 	orrne.w	sl, sl, #2
 8007fd6:	1b76      	subs	r6, r6, r5
 8007fd8:	f7ff fdf4 	bl	8007bc4 <rshift>
 8007fdc:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8007fe0:	f1ba 0f00 	cmp.w	sl, #0
 8007fe4:	d048      	beq.n	8008078 <__gethex+0x3e4>
 8007fe6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007fea:	2b02      	cmp	r3, #2
 8007fec:	d015      	beq.n	800801a <__gethex+0x386>
 8007fee:	2b03      	cmp	r3, #3
 8007ff0:	d017      	beq.n	8008022 <__gethex+0x38e>
 8007ff2:	2b01      	cmp	r3, #1
 8007ff4:	d109      	bne.n	800800a <__gethex+0x376>
 8007ff6:	f01a 0f02 	tst.w	sl, #2
 8007ffa:	d006      	beq.n	800800a <__gethex+0x376>
 8007ffc:	f8d9 0000 	ldr.w	r0, [r9]
 8008000:	ea4a 0a00 	orr.w	sl, sl, r0
 8008004:	f01a 0f01 	tst.w	sl, #1
 8008008:	d10e      	bne.n	8008028 <__gethex+0x394>
 800800a:	f047 0710 	orr.w	r7, r7, #16
 800800e:	e033      	b.n	8008078 <__gethex+0x3e4>
 8008010:	f04f 0a01 	mov.w	sl, #1
 8008014:	e7cf      	b.n	8007fb6 <__gethex+0x322>
 8008016:	2701      	movs	r7, #1
 8008018:	e7e2      	b.n	8007fe0 <__gethex+0x34c>
 800801a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800801c:	f1c3 0301 	rsb	r3, r3, #1
 8008020:	9315      	str	r3, [sp, #84]	; 0x54
 8008022:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008024:	2b00      	cmp	r3, #0
 8008026:	d0f0      	beq.n	800800a <__gethex+0x376>
 8008028:	f04f 0c00 	mov.w	ip, #0
 800802c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008030:	f104 0314 	add.w	r3, r4, #20
 8008034:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8008038:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800803c:	4618      	mov	r0, r3
 800803e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008042:	f1b2 3fff 	cmp.w	r2, #4294967295
 8008046:	d01c      	beq.n	8008082 <__gethex+0x3ee>
 8008048:	3201      	adds	r2, #1
 800804a:	6002      	str	r2, [r0, #0]
 800804c:	2f02      	cmp	r7, #2
 800804e:	f104 0314 	add.w	r3, r4, #20
 8008052:	d13d      	bne.n	80080d0 <__gethex+0x43c>
 8008054:	f8d8 2000 	ldr.w	r2, [r8]
 8008058:	3a01      	subs	r2, #1
 800805a:	42b2      	cmp	r2, r6
 800805c:	d10a      	bne.n	8008074 <__gethex+0x3e0>
 800805e:	2201      	movs	r2, #1
 8008060:	1171      	asrs	r1, r6, #5
 8008062:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008066:	f006 061f 	and.w	r6, r6, #31
 800806a:	fa02 f606 	lsl.w	r6, r2, r6
 800806e:	421e      	tst	r6, r3
 8008070:	bf18      	it	ne
 8008072:	4617      	movne	r7, r2
 8008074:	f047 0720 	orr.w	r7, r7, #32
 8008078:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800807a:	601c      	str	r4, [r3, #0]
 800807c:	9b05      	ldr	r3, [sp, #20]
 800807e:	601d      	str	r5, [r3, #0]
 8008080:	e69a      	b.n	8007db8 <__gethex+0x124>
 8008082:	4299      	cmp	r1, r3
 8008084:	f843 cc04 	str.w	ip, [r3, #-4]
 8008088:	d8d8      	bhi.n	800803c <__gethex+0x3a8>
 800808a:	68a3      	ldr	r3, [r4, #8]
 800808c:	459b      	cmp	fp, r3
 800808e:	db17      	blt.n	80080c0 <__gethex+0x42c>
 8008090:	6861      	ldr	r1, [r4, #4]
 8008092:	9802      	ldr	r0, [sp, #8]
 8008094:	3101      	adds	r1, #1
 8008096:	f000 f947 	bl	8008328 <_Balloc>
 800809a:	4681      	mov	r9, r0
 800809c:	b918      	cbnz	r0, 80080a6 <__gethex+0x412>
 800809e:	4602      	mov	r2, r0
 80080a0:	2184      	movs	r1, #132	; 0x84
 80080a2:	4b19      	ldr	r3, [pc, #100]	; (8008108 <__gethex+0x474>)
 80080a4:	e6ab      	b.n	8007dfe <__gethex+0x16a>
 80080a6:	6922      	ldr	r2, [r4, #16]
 80080a8:	f104 010c 	add.w	r1, r4, #12
 80080ac:	3202      	adds	r2, #2
 80080ae:	0092      	lsls	r2, r2, #2
 80080b0:	300c      	adds	r0, #12
 80080b2:	f000 f92b 	bl	800830c <memcpy>
 80080b6:	4621      	mov	r1, r4
 80080b8:	9802      	ldr	r0, [sp, #8]
 80080ba:	f000 f975 	bl	80083a8 <_Bfree>
 80080be:	464c      	mov	r4, r9
 80080c0:	6923      	ldr	r3, [r4, #16]
 80080c2:	1c5a      	adds	r2, r3, #1
 80080c4:	6122      	str	r2, [r4, #16]
 80080c6:	2201      	movs	r2, #1
 80080c8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80080cc:	615a      	str	r2, [r3, #20]
 80080ce:	e7bd      	b.n	800804c <__gethex+0x3b8>
 80080d0:	6922      	ldr	r2, [r4, #16]
 80080d2:	455a      	cmp	r2, fp
 80080d4:	dd0b      	ble.n	80080ee <__gethex+0x45a>
 80080d6:	2101      	movs	r1, #1
 80080d8:	4620      	mov	r0, r4
 80080da:	f7ff fd73 	bl	8007bc4 <rshift>
 80080de:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80080e2:	3501      	adds	r5, #1
 80080e4:	42ab      	cmp	r3, r5
 80080e6:	f6ff aed4 	blt.w	8007e92 <__gethex+0x1fe>
 80080ea:	2701      	movs	r7, #1
 80080ec:	e7c2      	b.n	8008074 <__gethex+0x3e0>
 80080ee:	f016 061f 	ands.w	r6, r6, #31
 80080f2:	d0fa      	beq.n	80080ea <__gethex+0x456>
 80080f4:	4453      	add	r3, sl
 80080f6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80080fa:	f000 fa07 	bl	800850c <__hi0bits>
 80080fe:	f1c6 0620 	rsb	r6, r6, #32
 8008102:	42b0      	cmp	r0, r6
 8008104:	dbe7      	blt.n	80080d6 <__gethex+0x442>
 8008106:	e7f0      	b.n	80080ea <__gethex+0x456>
 8008108:	0800a6d8 	.word	0x0800a6d8

0800810c <L_shift>:
 800810c:	f1c2 0208 	rsb	r2, r2, #8
 8008110:	0092      	lsls	r2, r2, #2
 8008112:	b570      	push	{r4, r5, r6, lr}
 8008114:	f1c2 0620 	rsb	r6, r2, #32
 8008118:	6843      	ldr	r3, [r0, #4]
 800811a:	6804      	ldr	r4, [r0, #0]
 800811c:	fa03 f506 	lsl.w	r5, r3, r6
 8008120:	432c      	orrs	r4, r5
 8008122:	40d3      	lsrs	r3, r2
 8008124:	6004      	str	r4, [r0, #0]
 8008126:	f840 3f04 	str.w	r3, [r0, #4]!
 800812a:	4288      	cmp	r0, r1
 800812c:	d3f4      	bcc.n	8008118 <L_shift+0xc>
 800812e:	bd70      	pop	{r4, r5, r6, pc}

08008130 <__match>:
 8008130:	b530      	push	{r4, r5, lr}
 8008132:	6803      	ldr	r3, [r0, #0]
 8008134:	3301      	adds	r3, #1
 8008136:	f811 4b01 	ldrb.w	r4, [r1], #1
 800813a:	b914      	cbnz	r4, 8008142 <__match+0x12>
 800813c:	6003      	str	r3, [r0, #0]
 800813e:	2001      	movs	r0, #1
 8008140:	bd30      	pop	{r4, r5, pc}
 8008142:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008146:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800814a:	2d19      	cmp	r5, #25
 800814c:	bf98      	it	ls
 800814e:	3220      	addls	r2, #32
 8008150:	42a2      	cmp	r2, r4
 8008152:	d0f0      	beq.n	8008136 <__match+0x6>
 8008154:	2000      	movs	r0, #0
 8008156:	e7f3      	b.n	8008140 <__match+0x10>

08008158 <__hexnan>:
 8008158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800815c:	2500      	movs	r5, #0
 800815e:	680b      	ldr	r3, [r1, #0]
 8008160:	4682      	mov	sl, r0
 8008162:	115e      	asrs	r6, r3, #5
 8008164:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008168:	f013 031f 	ands.w	r3, r3, #31
 800816c:	bf18      	it	ne
 800816e:	3604      	addne	r6, #4
 8008170:	1f37      	subs	r7, r6, #4
 8008172:	46b9      	mov	r9, r7
 8008174:	463c      	mov	r4, r7
 8008176:	46ab      	mov	fp, r5
 8008178:	b087      	sub	sp, #28
 800817a:	4690      	mov	r8, r2
 800817c:	6802      	ldr	r2, [r0, #0]
 800817e:	9301      	str	r3, [sp, #4]
 8008180:	f846 5c04 	str.w	r5, [r6, #-4]
 8008184:	9502      	str	r5, [sp, #8]
 8008186:	7851      	ldrb	r1, [r2, #1]
 8008188:	1c53      	adds	r3, r2, #1
 800818a:	9303      	str	r3, [sp, #12]
 800818c:	b341      	cbz	r1, 80081e0 <__hexnan+0x88>
 800818e:	4608      	mov	r0, r1
 8008190:	9205      	str	r2, [sp, #20]
 8008192:	9104      	str	r1, [sp, #16]
 8008194:	f7ff fd69 	bl	8007c6a <__hexdig_fun>
 8008198:	2800      	cmp	r0, #0
 800819a:	d14f      	bne.n	800823c <__hexnan+0xe4>
 800819c:	9904      	ldr	r1, [sp, #16]
 800819e:	9a05      	ldr	r2, [sp, #20]
 80081a0:	2920      	cmp	r1, #32
 80081a2:	d818      	bhi.n	80081d6 <__hexnan+0x7e>
 80081a4:	9b02      	ldr	r3, [sp, #8]
 80081a6:	459b      	cmp	fp, r3
 80081a8:	dd13      	ble.n	80081d2 <__hexnan+0x7a>
 80081aa:	454c      	cmp	r4, r9
 80081ac:	d206      	bcs.n	80081bc <__hexnan+0x64>
 80081ae:	2d07      	cmp	r5, #7
 80081b0:	dc04      	bgt.n	80081bc <__hexnan+0x64>
 80081b2:	462a      	mov	r2, r5
 80081b4:	4649      	mov	r1, r9
 80081b6:	4620      	mov	r0, r4
 80081b8:	f7ff ffa8 	bl	800810c <L_shift>
 80081bc:	4544      	cmp	r4, r8
 80081be:	d950      	bls.n	8008262 <__hexnan+0x10a>
 80081c0:	2300      	movs	r3, #0
 80081c2:	f1a4 0904 	sub.w	r9, r4, #4
 80081c6:	f844 3c04 	str.w	r3, [r4, #-4]
 80081ca:	461d      	mov	r5, r3
 80081cc:	464c      	mov	r4, r9
 80081ce:	f8cd b008 	str.w	fp, [sp, #8]
 80081d2:	9a03      	ldr	r2, [sp, #12]
 80081d4:	e7d7      	b.n	8008186 <__hexnan+0x2e>
 80081d6:	2929      	cmp	r1, #41	; 0x29
 80081d8:	d156      	bne.n	8008288 <__hexnan+0x130>
 80081da:	3202      	adds	r2, #2
 80081dc:	f8ca 2000 	str.w	r2, [sl]
 80081e0:	f1bb 0f00 	cmp.w	fp, #0
 80081e4:	d050      	beq.n	8008288 <__hexnan+0x130>
 80081e6:	454c      	cmp	r4, r9
 80081e8:	d206      	bcs.n	80081f8 <__hexnan+0xa0>
 80081ea:	2d07      	cmp	r5, #7
 80081ec:	dc04      	bgt.n	80081f8 <__hexnan+0xa0>
 80081ee:	462a      	mov	r2, r5
 80081f0:	4649      	mov	r1, r9
 80081f2:	4620      	mov	r0, r4
 80081f4:	f7ff ff8a 	bl	800810c <L_shift>
 80081f8:	4544      	cmp	r4, r8
 80081fa:	d934      	bls.n	8008266 <__hexnan+0x10e>
 80081fc:	4623      	mov	r3, r4
 80081fe:	f1a8 0204 	sub.w	r2, r8, #4
 8008202:	f853 1b04 	ldr.w	r1, [r3], #4
 8008206:	429f      	cmp	r7, r3
 8008208:	f842 1f04 	str.w	r1, [r2, #4]!
 800820c:	d2f9      	bcs.n	8008202 <__hexnan+0xaa>
 800820e:	1b3b      	subs	r3, r7, r4
 8008210:	f023 0303 	bic.w	r3, r3, #3
 8008214:	3304      	adds	r3, #4
 8008216:	3401      	adds	r4, #1
 8008218:	3e03      	subs	r6, #3
 800821a:	42b4      	cmp	r4, r6
 800821c:	bf88      	it	hi
 800821e:	2304      	movhi	r3, #4
 8008220:	2200      	movs	r2, #0
 8008222:	4443      	add	r3, r8
 8008224:	f843 2b04 	str.w	r2, [r3], #4
 8008228:	429f      	cmp	r7, r3
 800822a:	d2fb      	bcs.n	8008224 <__hexnan+0xcc>
 800822c:	683b      	ldr	r3, [r7, #0]
 800822e:	b91b      	cbnz	r3, 8008238 <__hexnan+0xe0>
 8008230:	4547      	cmp	r7, r8
 8008232:	d127      	bne.n	8008284 <__hexnan+0x12c>
 8008234:	2301      	movs	r3, #1
 8008236:	603b      	str	r3, [r7, #0]
 8008238:	2005      	movs	r0, #5
 800823a:	e026      	b.n	800828a <__hexnan+0x132>
 800823c:	3501      	adds	r5, #1
 800823e:	2d08      	cmp	r5, #8
 8008240:	f10b 0b01 	add.w	fp, fp, #1
 8008244:	dd06      	ble.n	8008254 <__hexnan+0xfc>
 8008246:	4544      	cmp	r4, r8
 8008248:	d9c3      	bls.n	80081d2 <__hexnan+0x7a>
 800824a:	2300      	movs	r3, #0
 800824c:	2501      	movs	r5, #1
 800824e:	f844 3c04 	str.w	r3, [r4, #-4]
 8008252:	3c04      	subs	r4, #4
 8008254:	6822      	ldr	r2, [r4, #0]
 8008256:	f000 000f 	and.w	r0, r0, #15
 800825a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800825e:	6022      	str	r2, [r4, #0]
 8008260:	e7b7      	b.n	80081d2 <__hexnan+0x7a>
 8008262:	2508      	movs	r5, #8
 8008264:	e7b5      	b.n	80081d2 <__hexnan+0x7a>
 8008266:	9b01      	ldr	r3, [sp, #4]
 8008268:	2b00      	cmp	r3, #0
 800826a:	d0df      	beq.n	800822c <__hexnan+0xd4>
 800826c:	f04f 32ff 	mov.w	r2, #4294967295
 8008270:	f1c3 0320 	rsb	r3, r3, #32
 8008274:	fa22 f303 	lsr.w	r3, r2, r3
 8008278:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800827c:	401a      	ands	r2, r3
 800827e:	f846 2c04 	str.w	r2, [r6, #-4]
 8008282:	e7d3      	b.n	800822c <__hexnan+0xd4>
 8008284:	3f04      	subs	r7, #4
 8008286:	e7d1      	b.n	800822c <__hexnan+0xd4>
 8008288:	2004      	movs	r0, #4
 800828a:	b007      	add	sp, #28
 800828c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008290 <_localeconv_r>:
 8008290:	4800      	ldr	r0, [pc, #0]	; (8008294 <_localeconv_r+0x4>)
 8008292:	4770      	bx	lr
 8008294:	20000198 	.word	0x20000198

08008298 <_lseek_r>:
 8008298:	b538      	push	{r3, r4, r5, lr}
 800829a:	4604      	mov	r4, r0
 800829c:	4608      	mov	r0, r1
 800829e:	4611      	mov	r1, r2
 80082a0:	2200      	movs	r2, #0
 80082a2:	4d05      	ldr	r5, [pc, #20]	; (80082b8 <_lseek_r+0x20>)
 80082a4:	602a      	str	r2, [r5, #0]
 80082a6:	461a      	mov	r2, r3
 80082a8:	f7f9 fc12 	bl	8001ad0 <_lseek>
 80082ac:	1c43      	adds	r3, r0, #1
 80082ae:	d102      	bne.n	80082b6 <_lseek_r+0x1e>
 80082b0:	682b      	ldr	r3, [r5, #0]
 80082b2:	b103      	cbz	r3, 80082b6 <_lseek_r+0x1e>
 80082b4:	6023      	str	r3, [r4, #0]
 80082b6:	bd38      	pop	{r3, r4, r5, pc}
 80082b8:	20000498 	.word	0x20000498

080082bc <malloc>:
 80082bc:	4b02      	ldr	r3, [pc, #8]	; (80082c8 <malloc+0xc>)
 80082be:	4601      	mov	r1, r0
 80082c0:	6818      	ldr	r0, [r3, #0]
 80082c2:	f000 bd65 	b.w	8008d90 <_malloc_r>
 80082c6:	bf00      	nop
 80082c8:	20000040 	.word	0x20000040

080082cc <__ascii_mbtowc>:
 80082cc:	b082      	sub	sp, #8
 80082ce:	b901      	cbnz	r1, 80082d2 <__ascii_mbtowc+0x6>
 80082d0:	a901      	add	r1, sp, #4
 80082d2:	b142      	cbz	r2, 80082e6 <__ascii_mbtowc+0x1a>
 80082d4:	b14b      	cbz	r3, 80082ea <__ascii_mbtowc+0x1e>
 80082d6:	7813      	ldrb	r3, [r2, #0]
 80082d8:	600b      	str	r3, [r1, #0]
 80082da:	7812      	ldrb	r2, [r2, #0]
 80082dc:	1e10      	subs	r0, r2, #0
 80082de:	bf18      	it	ne
 80082e0:	2001      	movne	r0, #1
 80082e2:	b002      	add	sp, #8
 80082e4:	4770      	bx	lr
 80082e6:	4610      	mov	r0, r2
 80082e8:	e7fb      	b.n	80082e2 <__ascii_mbtowc+0x16>
 80082ea:	f06f 0001 	mvn.w	r0, #1
 80082ee:	e7f8      	b.n	80082e2 <__ascii_mbtowc+0x16>

080082f0 <memchr>:
 80082f0:	4603      	mov	r3, r0
 80082f2:	b510      	push	{r4, lr}
 80082f4:	b2c9      	uxtb	r1, r1
 80082f6:	4402      	add	r2, r0
 80082f8:	4293      	cmp	r3, r2
 80082fa:	4618      	mov	r0, r3
 80082fc:	d101      	bne.n	8008302 <memchr+0x12>
 80082fe:	2000      	movs	r0, #0
 8008300:	e003      	b.n	800830a <memchr+0x1a>
 8008302:	7804      	ldrb	r4, [r0, #0]
 8008304:	3301      	adds	r3, #1
 8008306:	428c      	cmp	r4, r1
 8008308:	d1f6      	bne.n	80082f8 <memchr+0x8>
 800830a:	bd10      	pop	{r4, pc}

0800830c <memcpy>:
 800830c:	440a      	add	r2, r1
 800830e:	4291      	cmp	r1, r2
 8008310:	f100 33ff 	add.w	r3, r0, #4294967295
 8008314:	d100      	bne.n	8008318 <memcpy+0xc>
 8008316:	4770      	bx	lr
 8008318:	b510      	push	{r4, lr}
 800831a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800831e:	4291      	cmp	r1, r2
 8008320:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008324:	d1f9      	bne.n	800831a <memcpy+0xe>
 8008326:	bd10      	pop	{r4, pc}

08008328 <_Balloc>:
 8008328:	b570      	push	{r4, r5, r6, lr}
 800832a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800832c:	4604      	mov	r4, r0
 800832e:	460d      	mov	r5, r1
 8008330:	b976      	cbnz	r6, 8008350 <_Balloc+0x28>
 8008332:	2010      	movs	r0, #16
 8008334:	f7ff ffc2 	bl	80082bc <malloc>
 8008338:	4602      	mov	r2, r0
 800833a:	6260      	str	r0, [r4, #36]	; 0x24
 800833c:	b920      	cbnz	r0, 8008348 <_Balloc+0x20>
 800833e:	2166      	movs	r1, #102	; 0x66
 8008340:	4b17      	ldr	r3, [pc, #92]	; (80083a0 <_Balloc+0x78>)
 8008342:	4818      	ldr	r0, [pc, #96]	; (80083a4 <_Balloc+0x7c>)
 8008344:	f001 fb48 	bl	80099d8 <__assert_func>
 8008348:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800834c:	6006      	str	r6, [r0, #0]
 800834e:	60c6      	str	r6, [r0, #12]
 8008350:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008352:	68f3      	ldr	r3, [r6, #12]
 8008354:	b183      	cbz	r3, 8008378 <_Balloc+0x50>
 8008356:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008358:	68db      	ldr	r3, [r3, #12]
 800835a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800835e:	b9b8      	cbnz	r0, 8008390 <_Balloc+0x68>
 8008360:	2101      	movs	r1, #1
 8008362:	fa01 f605 	lsl.w	r6, r1, r5
 8008366:	1d72      	adds	r2, r6, #5
 8008368:	4620      	mov	r0, r4
 800836a:	0092      	lsls	r2, r2, #2
 800836c:	f000 fc94 	bl	8008c98 <_calloc_r>
 8008370:	b160      	cbz	r0, 800838c <_Balloc+0x64>
 8008372:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008376:	e00e      	b.n	8008396 <_Balloc+0x6e>
 8008378:	2221      	movs	r2, #33	; 0x21
 800837a:	2104      	movs	r1, #4
 800837c:	4620      	mov	r0, r4
 800837e:	f000 fc8b 	bl	8008c98 <_calloc_r>
 8008382:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008384:	60f0      	str	r0, [r6, #12]
 8008386:	68db      	ldr	r3, [r3, #12]
 8008388:	2b00      	cmp	r3, #0
 800838a:	d1e4      	bne.n	8008356 <_Balloc+0x2e>
 800838c:	2000      	movs	r0, #0
 800838e:	bd70      	pop	{r4, r5, r6, pc}
 8008390:	6802      	ldr	r2, [r0, #0]
 8008392:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008396:	2300      	movs	r3, #0
 8008398:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800839c:	e7f7      	b.n	800838e <_Balloc+0x66>
 800839e:	bf00      	nop
 80083a0:	0800a666 	.word	0x0800a666
 80083a4:	0800a764 	.word	0x0800a764

080083a8 <_Bfree>:
 80083a8:	b570      	push	{r4, r5, r6, lr}
 80083aa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80083ac:	4605      	mov	r5, r0
 80083ae:	460c      	mov	r4, r1
 80083b0:	b976      	cbnz	r6, 80083d0 <_Bfree+0x28>
 80083b2:	2010      	movs	r0, #16
 80083b4:	f7ff ff82 	bl	80082bc <malloc>
 80083b8:	4602      	mov	r2, r0
 80083ba:	6268      	str	r0, [r5, #36]	; 0x24
 80083bc:	b920      	cbnz	r0, 80083c8 <_Bfree+0x20>
 80083be:	218a      	movs	r1, #138	; 0x8a
 80083c0:	4b08      	ldr	r3, [pc, #32]	; (80083e4 <_Bfree+0x3c>)
 80083c2:	4809      	ldr	r0, [pc, #36]	; (80083e8 <_Bfree+0x40>)
 80083c4:	f001 fb08 	bl	80099d8 <__assert_func>
 80083c8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80083cc:	6006      	str	r6, [r0, #0]
 80083ce:	60c6      	str	r6, [r0, #12]
 80083d0:	b13c      	cbz	r4, 80083e2 <_Bfree+0x3a>
 80083d2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80083d4:	6862      	ldr	r2, [r4, #4]
 80083d6:	68db      	ldr	r3, [r3, #12]
 80083d8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80083dc:	6021      	str	r1, [r4, #0]
 80083de:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80083e2:	bd70      	pop	{r4, r5, r6, pc}
 80083e4:	0800a666 	.word	0x0800a666
 80083e8:	0800a764 	.word	0x0800a764

080083ec <__multadd>:
 80083ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083f0:	4607      	mov	r7, r0
 80083f2:	460c      	mov	r4, r1
 80083f4:	461e      	mov	r6, r3
 80083f6:	2000      	movs	r0, #0
 80083f8:	690d      	ldr	r5, [r1, #16]
 80083fa:	f101 0c14 	add.w	ip, r1, #20
 80083fe:	f8dc 3000 	ldr.w	r3, [ip]
 8008402:	3001      	adds	r0, #1
 8008404:	b299      	uxth	r1, r3
 8008406:	fb02 6101 	mla	r1, r2, r1, r6
 800840a:	0c1e      	lsrs	r6, r3, #16
 800840c:	0c0b      	lsrs	r3, r1, #16
 800840e:	fb02 3306 	mla	r3, r2, r6, r3
 8008412:	b289      	uxth	r1, r1
 8008414:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008418:	4285      	cmp	r5, r0
 800841a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800841e:	f84c 1b04 	str.w	r1, [ip], #4
 8008422:	dcec      	bgt.n	80083fe <__multadd+0x12>
 8008424:	b30e      	cbz	r6, 800846a <__multadd+0x7e>
 8008426:	68a3      	ldr	r3, [r4, #8]
 8008428:	42ab      	cmp	r3, r5
 800842a:	dc19      	bgt.n	8008460 <__multadd+0x74>
 800842c:	6861      	ldr	r1, [r4, #4]
 800842e:	4638      	mov	r0, r7
 8008430:	3101      	adds	r1, #1
 8008432:	f7ff ff79 	bl	8008328 <_Balloc>
 8008436:	4680      	mov	r8, r0
 8008438:	b928      	cbnz	r0, 8008446 <__multadd+0x5a>
 800843a:	4602      	mov	r2, r0
 800843c:	21b5      	movs	r1, #181	; 0xb5
 800843e:	4b0c      	ldr	r3, [pc, #48]	; (8008470 <__multadd+0x84>)
 8008440:	480c      	ldr	r0, [pc, #48]	; (8008474 <__multadd+0x88>)
 8008442:	f001 fac9 	bl	80099d8 <__assert_func>
 8008446:	6922      	ldr	r2, [r4, #16]
 8008448:	f104 010c 	add.w	r1, r4, #12
 800844c:	3202      	adds	r2, #2
 800844e:	0092      	lsls	r2, r2, #2
 8008450:	300c      	adds	r0, #12
 8008452:	f7ff ff5b 	bl	800830c <memcpy>
 8008456:	4621      	mov	r1, r4
 8008458:	4638      	mov	r0, r7
 800845a:	f7ff ffa5 	bl	80083a8 <_Bfree>
 800845e:	4644      	mov	r4, r8
 8008460:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008464:	3501      	adds	r5, #1
 8008466:	615e      	str	r6, [r3, #20]
 8008468:	6125      	str	r5, [r4, #16]
 800846a:	4620      	mov	r0, r4
 800846c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008470:	0800a6d8 	.word	0x0800a6d8
 8008474:	0800a764 	.word	0x0800a764

08008478 <__s2b>:
 8008478:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800847c:	4615      	mov	r5, r2
 800847e:	2209      	movs	r2, #9
 8008480:	461f      	mov	r7, r3
 8008482:	3308      	adds	r3, #8
 8008484:	460c      	mov	r4, r1
 8008486:	fb93 f3f2 	sdiv	r3, r3, r2
 800848a:	4606      	mov	r6, r0
 800848c:	2201      	movs	r2, #1
 800848e:	2100      	movs	r1, #0
 8008490:	429a      	cmp	r2, r3
 8008492:	db09      	blt.n	80084a8 <__s2b+0x30>
 8008494:	4630      	mov	r0, r6
 8008496:	f7ff ff47 	bl	8008328 <_Balloc>
 800849a:	b940      	cbnz	r0, 80084ae <__s2b+0x36>
 800849c:	4602      	mov	r2, r0
 800849e:	21ce      	movs	r1, #206	; 0xce
 80084a0:	4b18      	ldr	r3, [pc, #96]	; (8008504 <__s2b+0x8c>)
 80084a2:	4819      	ldr	r0, [pc, #100]	; (8008508 <__s2b+0x90>)
 80084a4:	f001 fa98 	bl	80099d8 <__assert_func>
 80084a8:	0052      	lsls	r2, r2, #1
 80084aa:	3101      	adds	r1, #1
 80084ac:	e7f0      	b.n	8008490 <__s2b+0x18>
 80084ae:	9b08      	ldr	r3, [sp, #32]
 80084b0:	2d09      	cmp	r5, #9
 80084b2:	6143      	str	r3, [r0, #20]
 80084b4:	f04f 0301 	mov.w	r3, #1
 80084b8:	6103      	str	r3, [r0, #16]
 80084ba:	dd16      	ble.n	80084ea <__s2b+0x72>
 80084bc:	f104 0909 	add.w	r9, r4, #9
 80084c0:	46c8      	mov	r8, r9
 80084c2:	442c      	add	r4, r5
 80084c4:	f818 3b01 	ldrb.w	r3, [r8], #1
 80084c8:	4601      	mov	r1, r0
 80084ca:	220a      	movs	r2, #10
 80084cc:	4630      	mov	r0, r6
 80084ce:	3b30      	subs	r3, #48	; 0x30
 80084d0:	f7ff ff8c 	bl	80083ec <__multadd>
 80084d4:	45a0      	cmp	r8, r4
 80084d6:	d1f5      	bne.n	80084c4 <__s2b+0x4c>
 80084d8:	f1a5 0408 	sub.w	r4, r5, #8
 80084dc:	444c      	add	r4, r9
 80084de:	1b2d      	subs	r5, r5, r4
 80084e0:	1963      	adds	r3, r4, r5
 80084e2:	42bb      	cmp	r3, r7
 80084e4:	db04      	blt.n	80084f0 <__s2b+0x78>
 80084e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80084ea:	2509      	movs	r5, #9
 80084ec:	340a      	adds	r4, #10
 80084ee:	e7f6      	b.n	80084de <__s2b+0x66>
 80084f0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80084f4:	4601      	mov	r1, r0
 80084f6:	220a      	movs	r2, #10
 80084f8:	4630      	mov	r0, r6
 80084fa:	3b30      	subs	r3, #48	; 0x30
 80084fc:	f7ff ff76 	bl	80083ec <__multadd>
 8008500:	e7ee      	b.n	80084e0 <__s2b+0x68>
 8008502:	bf00      	nop
 8008504:	0800a6d8 	.word	0x0800a6d8
 8008508:	0800a764 	.word	0x0800a764

0800850c <__hi0bits>:
 800850c:	0c02      	lsrs	r2, r0, #16
 800850e:	0412      	lsls	r2, r2, #16
 8008510:	4603      	mov	r3, r0
 8008512:	b9ca      	cbnz	r2, 8008548 <__hi0bits+0x3c>
 8008514:	0403      	lsls	r3, r0, #16
 8008516:	2010      	movs	r0, #16
 8008518:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800851c:	bf04      	itt	eq
 800851e:	021b      	lsleq	r3, r3, #8
 8008520:	3008      	addeq	r0, #8
 8008522:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8008526:	bf04      	itt	eq
 8008528:	011b      	lsleq	r3, r3, #4
 800852a:	3004      	addeq	r0, #4
 800852c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8008530:	bf04      	itt	eq
 8008532:	009b      	lsleq	r3, r3, #2
 8008534:	3002      	addeq	r0, #2
 8008536:	2b00      	cmp	r3, #0
 8008538:	db05      	blt.n	8008546 <__hi0bits+0x3a>
 800853a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800853e:	f100 0001 	add.w	r0, r0, #1
 8008542:	bf08      	it	eq
 8008544:	2020      	moveq	r0, #32
 8008546:	4770      	bx	lr
 8008548:	2000      	movs	r0, #0
 800854a:	e7e5      	b.n	8008518 <__hi0bits+0xc>

0800854c <__lo0bits>:
 800854c:	6803      	ldr	r3, [r0, #0]
 800854e:	4602      	mov	r2, r0
 8008550:	f013 0007 	ands.w	r0, r3, #7
 8008554:	d00b      	beq.n	800856e <__lo0bits+0x22>
 8008556:	07d9      	lsls	r1, r3, #31
 8008558:	d421      	bmi.n	800859e <__lo0bits+0x52>
 800855a:	0798      	lsls	r0, r3, #30
 800855c:	bf49      	itett	mi
 800855e:	085b      	lsrmi	r3, r3, #1
 8008560:	089b      	lsrpl	r3, r3, #2
 8008562:	2001      	movmi	r0, #1
 8008564:	6013      	strmi	r3, [r2, #0]
 8008566:	bf5c      	itt	pl
 8008568:	2002      	movpl	r0, #2
 800856a:	6013      	strpl	r3, [r2, #0]
 800856c:	4770      	bx	lr
 800856e:	b299      	uxth	r1, r3
 8008570:	b909      	cbnz	r1, 8008576 <__lo0bits+0x2a>
 8008572:	2010      	movs	r0, #16
 8008574:	0c1b      	lsrs	r3, r3, #16
 8008576:	b2d9      	uxtb	r1, r3
 8008578:	b909      	cbnz	r1, 800857e <__lo0bits+0x32>
 800857a:	3008      	adds	r0, #8
 800857c:	0a1b      	lsrs	r3, r3, #8
 800857e:	0719      	lsls	r1, r3, #28
 8008580:	bf04      	itt	eq
 8008582:	091b      	lsreq	r3, r3, #4
 8008584:	3004      	addeq	r0, #4
 8008586:	0799      	lsls	r1, r3, #30
 8008588:	bf04      	itt	eq
 800858a:	089b      	lsreq	r3, r3, #2
 800858c:	3002      	addeq	r0, #2
 800858e:	07d9      	lsls	r1, r3, #31
 8008590:	d403      	bmi.n	800859a <__lo0bits+0x4e>
 8008592:	085b      	lsrs	r3, r3, #1
 8008594:	f100 0001 	add.w	r0, r0, #1
 8008598:	d003      	beq.n	80085a2 <__lo0bits+0x56>
 800859a:	6013      	str	r3, [r2, #0]
 800859c:	4770      	bx	lr
 800859e:	2000      	movs	r0, #0
 80085a0:	4770      	bx	lr
 80085a2:	2020      	movs	r0, #32
 80085a4:	4770      	bx	lr
	...

080085a8 <__i2b>:
 80085a8:	b510      	push	{r4, lr}
 80085aa:	460c      	mov	r4, r1
 80085ac:	2101      	movs	r1, #1
 80085ae:	f7ff febb 	bl	8008328 <_Balloc>
 80085b2:	4602      	mov	r2, r0
 80085b4:	b928      	cbnz	r0, 80085c2 <__i2b+0x1a>
 80085b6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80085ba:	4b04      	ldr	r3, [pc, #16]	; (80085cc <__i2b+0x24>)
 80085bc:	4804      	ldr	r0, [pc, #16]	; (80085d0 <__i2b+0x28>)
 80085be:	f001 fa0b 	bl	80099d8 <__assert_func>
 80085c2:	2301      	movs	r3, #1
 80085c4:	6144      	str	r4, [r0, #20]
 80085c6:	6103      	str	r3, [r0, #16]
 80085c8:	bd10      	pop	{r4, pc}
 80085ca:	bf00      	nop
 80085cc:	0800a6d8 	.word	0x0800a6d8
 80085d0:	0800a764 	.word	0x0800a764

080085d4 <__multiply>:
 80085d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085d8:	4691      	mov	r9, r2
 80085da:	690a      	ldr	r2, [r1, #16]
 80085dc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80085e0:	460c      	mov	r4, r1
 80085e2:	429a      	cmp	r2, r3
 80085e4:	bfbe      	ittt	lt
 80085e6:	460b      	movlt	r3, r1
 80085e8:	464c      	movlt	r4, r9
 80085ea:	4699      	movlt	r9, r3
 80085ec:	6927      	ldr	r7, [r4, #16]
 80085ee:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80085f2:	68a3      	ldr	r3, [r4, #8]
 80085f4:	6861      	ldr	r1, [r4, #4]
 80085f6:	eb07 060a 	add.w	r6, r7, sl
 80085fa:	42b3      	cmp	r3, r6
 80085fc:	b085      	sub	sp, #20
 80085fe:	bfb8      	it	lt
 8008600:	3101      	addlt	r1, #1
 8008602:	f7ff fe91 	bl	8008328 <_Balloc>
 8008606:	b930      	cbnz	r0, 8008616 <__multiply+0x42>
 8008608:	4602      	mov	r2, r0
 800860a:	f240 115d 	movw	r1, #349	; 0x15d
 800860e:	4b43      	ldr	r3, [pc, #268]	; (800871c <__multiply+0x148>)
 8008610:	4843      	ldr	r0, [pc, #268]	; (8008720 <__multiply+0x14c>)
 8008612:	f001 f9e1 	bl	80099d8 <__assert_func>
 8008616:	f100 0514 	add.w	r5, r0, #20
 800861a:	462b      	mov	r3, r5
 800861c:	2200      	movs	r2, #0
 800861e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008622:	4543      	cmp	r3, r8
 8008624:	d321      	bcc.n	800866a <__multiply+0x96>
 8008626:	f104 0314 	add.w	r3, r4, #20
 800862a:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800862e:	f109 0314 	add.w	r3, r9, #20
 8008632:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008636:	9202      	str	r2, [sp, #8]
 8008638:	1b3a      	subs	r2, r7, r4
 800863a:	3a15      	subs	r2, #21
 800863c:	f022 0203 	bic.w	r2, r2, #3
 8008640:	3204      	adds	r2, #4
 8008642:	f104 0115 	add.w	r1, r4, #21
 8008646:	428f      	cmp	r7, r1
 8008648:	bf38      	it	cc
 800864a:	2204      	movcc	r2, #4
 800864c:	9201      	str	r2, [sp, #4]
 800864e:	9a02      	ldr	r2, [sp, #8]
 8008650:	9303      	str	r3, [sp, #12]
 8008652:	429a      	cmp	r2, r3
 8008654:	d80c      	bhi.n	8008670 <__multiply+0x9c>
 8008656:	2e00      	cmp	r6, #0
 8008658:	dd03      	ble.n	8008662 <__multiply+0x8e>
 800865a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800865e:	2b00      	cmp	r3, #0
 8008660:	d059      	beq.n	8008716 <__multiply+0x142>
 8008662:	6106      	str	r6, [r0, #16]
 8008664:	b005      	add	sp, #20
 8008666:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800866a:	f843 2b04 	str.w	r2, [r3], #4
 800866e:	e7d8      	b.n	8008622 <__multiply+0x4e>
 8008670:	f8b3 a000 	ldrh.w	sl, [r3]
 8008674:	f1ba 0f00 	cmp.w	sl, #0
 8008678:	d023      	beq.n	80086c2 <__multiply+0xee>
 800867a:	46a9      	mov	r9, r5
 800867c:	f04f 0c00 	mov.w	ip, #0
 8008680:	f104 0e14 	add.w	lr, r4, #20
 8008684:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008688:	f8d9 1000 	ldr.w	r1, [r9]
 800868c:	fa1f fb82 	uxth.w	fp, r2
 8008690:	b289      	uxth	r1, r1
 8008692:	fb0a 110b 	mla	r1, sl, fp, r1
 8008696:	4461      	add	r1, ip
 8008698:	f8d9 c000 	ldr.w	ip, [r9]
 800869c:	0c12      	lsrs	r2, r2, #16
 800869e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80086a2:	fb0a c202 	mla	r2, sl, r2, ip
 80086a6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80086aa:	b289      	uxth	r1, r1
 80086ac:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80086b0:	4577      	cmp	r7, lr
 80086b2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80086b6:	f849 1b04 	str.w	r1, [r9], #4
 80086ba:	d8e3      	bhi.n	8008684 <__multiply+0xb0>
 80086bc:	9a01      	ldr	r2, [sp, #4]
 80086be:	f845 c002 	str.w	ip, [r5, r2]
 80086c2:	9a03      	ldr	r2, [sp, #12]
 80086c4:	3304      	adds	r3, #4
 80086c6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80086ca:	f1b9 0f00 	cmp.w	r9, #0
 80086ce:	d020      	beq.n	8008712 <__multiply+0x13e>
 80086d0:	46ae      	mov	lr, r5
 80086d2:	f04f 0a00 	mov.w	sl, #0
 80086d6:	6829      	ldr	r1, [r5, #0]
 80086d8:	f104 0c14 	add.w	ip, r4, #20
 80086dc:	f8bc b000 	ldrh.w	fp, [ip]
 80086e0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80086e4:	b289      	uxth	r1, r1
 80086e6:	fb09 220b 	mla	r2, r9, fp, r2
 80086ea:	4492      	add	sl, r2
 80086ec:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80086f0:	f84e 1b04 	str.w	r1, [lr], #4
 80086f4:	f85c 2b04 	ldr.w	r2, [ip], #4
 80086f8:	f8be 1000 	ldrh.w	r1, [lr]
 80086fc:	0c12      	lsrs	r2, r2, #16
 80086fe:	fb09 1102 	mla	r1, r9, r2, r1
 8008702:	4567      	cmp	r7, ip
 8008704:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8008708:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800870c:	d8e6      	bhi.n	80086dc <__multiply+0x108>
 800870e:	9a01      	ldr	r2, [sp, #4]
 8008710:	50a9      	str	r1, [r5, r2]
 8008712:	3504      	adds	r5, #4
 8008714:	e79b      	b.n	800864e <__multiply+0x7a>
 8008716:	3e01      	subs	r6, #1
 8008718:	e79d      	b.n	8008656 <__multiply+0x82>
 800871a:	bf00      	nop
 800871c:	0800a6d8 	.word	0x0800a6d8
 8008720:	0800a764 	.word	0x0800a764

08008724 <__pow5mult>:
 8008724:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008728:	4615      	mov	r5, r2
 800872a:	f012 0203 	ands.w	r2, r2, #3
 800872e:	4606      	mov	r6, r0
 8008730:	460f      	mov	r7, r1
 8008732:	d007      	beq.n	8008744 <__pow5mult+0x20>
 8008734:	4c25      	ldr	r4, [pc, #148]	; (80087cc <__pow5mult+0xa8>)
 8008736:	3a01      	subs	r2, #1
 8008738:	2300      	movs	r3, #0
 800873a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800873e:	f7ff fe55 	bl	80083ec <__multadd>
 8008742:	4607      	mov	r7, r0
 8008744:	10ad      	asrs	r5, r5, #2
 8008746:	d03d      	beq.n	80087c4 <__pow5mult+0xa0>
 8008748:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800874a:	b97c      	cbnz	r4, 800876c <__pow5mult+0x48>
 800874c:	2010      	movs	r0, #16
 800874e:	f7ff fdb5 	bl	80082bc <malloc>
 8008752:	4602      	mov	r2, r0
 8008754:	6270      	str	r0, [r6, #36]	; 0x24
 8008756:	b928      	cbnz	r0, 8008764 <__pow5mult+0x40>
 8008758:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800875c:	4b1c      	ldr	r3, [pc, #112]	; (80087d0 <__pow5mult+0xac>)
 800875e:	481d      	ldr	r0, [pc, #116]	; (80087d4 <__pow5mult+0xb0>)
 8008760:	f001 f93a 	bl	80099d8 <__assert_func>
 8008764:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008768:	6004      	str	r4, [r0, #0]
 800876a:	60c4      	str	r4, [r0, #12]
 800876c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008770:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008774:	b94c      	cbnz	r4, 800878a <__pow5mult+0x66>
 8008776:	f240 2171 	movw	r1, #625	; 0x271
 800877a:	4630      	mov	r0, r6
 800877c:	f7ff ff14 	bl	80085a8 <__i2b>
 8008780:	2300      	movs	r3, #0
 8008782:	4604      	mov	r4, r0
 8008784:	f8c8 0008 	str.w	r0, [r8, #8]
 8008788:	6003      	str	r3, [r0, #0]
 800878a:	f04f 0900 	mov.w	r9, #0
 800878e:	07eb      	lsls	r3, r5, #31
 8008790:	d50a      	bpl.n	80087a8 <__pow5mult+0x84>
 8008792:	4639      	mov	r1, r7
 8008794:	4622      	mov	r2, r4
 8008796:	4630      	mov	r0, r6
 8008798:	f7ff ff1c 	bl	80085d4 <__multiply>
 800879c:	4680      	mov	r8, r0
 800879e:	4639      	mov	r1, r7
 80087a0:	4630      	mov	r0, r6
 80087a2:	f7ff fe01 	bl	80083a8 <_Bfree>
 80087a6:	4647      	mov	r7, r8
 80087a8:	106d      	asrs	r5, r5, #1
 80087aa:	d00b      	beq.n	80087c4 <__pow5mult+0xa0>
 80087ac:	6820      	ldr	r0, [r4, #0]
 80087ae:	b938      	cbnz	r0, 80087c0 <__pow5mult+0x9c>
 80087b0:	4622      	mov	r2, r4
 80087b2:	4621      	mov	r1, r4
 80087b4:	4630      	mov	r0, r6
 80087b6:	f7ff ff0d 	bl	80085d4 <__multiply>
 80087ba:	6020      	str	r0, [r4, #0]
 80087bc:	f8c0 9000 	str.w	r9, [r0]
 80087c0:	4604      	mov	r4, r0
 80087c2:	e7e4      	b.n	800878e <__pow5mult+0x6a>
 80087c4:	4638      	mov	r0, r7
 80087c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80087ca:	bf00      	nop
 80087cc:	0800a8b0 	.word	0x0800a8b0
 80087d0:	0800a666 	.word	0x0800a666
 80087d4:	0800a764 	.word	0x0800a764

080087d8 <__lshift>:
 80087d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80087dc:	460c      	mov	r4, r1
 80087de:	4607      	mov	r7, r0
 80087e0:	4691      	mov	r9, r2
 80087e2:	6923      	ldr	r3, [r4, #16]
 80087e4:	6849      	ldr	r1, [r1, #4]
 80087e6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80087ea:	68a3      	ldr	r3, [r4, #8]
 80087ec:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80087f0:	f108 0601 	add.w	r6, r8, #1
 80087f4:	42b3      	cmp	r3, r6
 80087f6:	db0b      	blt.n	8008810 <__lshift+0x38>
 80087f8:	4638      	mov	r0, r7
 80087fa:	f7ff fd95 	bl	8008328 <_Balloc>
 80087fe:	4605      	mov	r5, r0
 8008800:	b948      	cbnz	r0, 8008816 <__lshift+0x3e>
 8008802:	4602      	mov	r2, r0
 8008804:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008808:	4b29      	ldr	r3, [pc, #164]	; (80088b0 <__lshift+0xd8>)
 800880a:	482a      	ldr	r0, [pc, #168]	; (80088b4 <__lshift+0xdc>)
 800880c:	f001 f8e4 	bl	80099d8 <__assert_func>
 8008810:	3101      	adds	r1, #1
 8008812:	005b      	lsls	r3, r3, #1
 8008814:	e7ee      	b.n	80087f4 <__lshift+0x1c>
 8008816:	2300      	movs	r3, #0
 8008818:	f100 0114 	add.w	r1, r0, #20
 800881c:	f100 0210 	add.w	r2, r0, #16
 8008820:	4618      	mov	r0, r3
 8008822:	4553      	cmp	r3, sl
 8008824:	db37      	blt.n	8008896 <__lshift+0xbe>
 8008826:	6920      	ldr	r0, [r4, #16]
 8008828:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800882c:	f104 0314 	add.w	r3, r4, #20
 8008830:	f019 091f 	ands.w	r9, r9, #31
 8008834:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008838:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800883c:	d02f      	beq.n	800889e <__lshift+0xc6>
 800883e:	468a      	mov	sl, r1
 8008840:	f04f 0c00 	mov.w	ip, #0
 8008844:	f1c9 0e20 	rsb	lr, r9, #32
 8008848:	681a      	ldr	r2, [r3, #0]
 800884a:	fa02 f209 	lsl.w	r2, r2, r9
 800884e:	ea42 020c 	orr.w	r2, r2, ip
 8008852:	f84a 2b04 	str.w	r2, [sl], #4
 8008856:	f853 2b04 	ldr.w	r2, [r3], #4
 800885a:	4298      	cmp	r0, r3
 800885c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8008860:	d8f2      	bhi.n	8008848 <__lshift+0x70>
 8008862:	1b03      	subs	r3, r0, r4
 8008864:	3b15      	subs	r3, #21
 8008866:	f023 0303 	bic.w	r3, r3, #3
 800886a:	3304      	adds	r3, #4
 800886c:	f104 0215 	add.w	r2, r4, #21
 8008870:	4290      	cmp	r0, r2
 8008872:	bf38      	it	cc
 8008874:	2304      	movcc	r3, #4
 8008876:	f841 c003 	str.w	ip, [r1, r3]
 800887a:	f1bc 0f00 	cmp.w	ip, #0
 800887e:	d001      	beq.n	8008884 <__lshift+0xac>
 8008880:	f108 0602 	add.w	r6, r8, #2
 8008884:	3e01      	subs	r6, #1
 8008886:	4638      	mov	r0, r7
 8008888:	4621      	mov	r1, r4
 800888a:	612e      	str	r6, [r5, #16]
 800888c:	f7ff fd8c 	bl	80083a8 <_Bfree>
 8008890:	4628      	mov	r0, r5
 8008892:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008896:	f842 0f04 	str.w	r0, [r2, #4]!
 800889a:	3301      	adds	r3, #1
 800889c:	e7c1      	b.n	8008822 <__lshift+0x4a>
 800889e:	3904      	subs	r1, #4
 80088a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80088a4:	4298      	cmp	r0, r3
 80088a6:	f841 2f04 	str.w	r2, [r1, #4]!
 80088aa:	d8f9      	bhi.n	80088a0 <__lshift+0xc8>
 80088ac:	e7ea      	b.n	8008884 <__lshift+0xac>
 80088ae:	bf00      	nop
 80088b0:	0800a6d8 	.word	0x0800a6d8
 80088b4:	0800a764 	.word	0x0800a764

080088b8 <__mcmp>:
 80088b8:	4603      	mov	r3, r0
 80088ba:	690a      	ldr	r2, [r1, #16]
 80088bc:	6900      	ldr	r0, [r0, #16]
 80088be:	b530      	push	{r4, r5, lr}
 80088c0:	1a80      	subs	r0, r0, r2
 80088c2:	d10d      	bne.n	80088e0 <__mcmp+0x28>
 80088c4:	3314      	adds	r3, #20
 80088c6:	3114      	adds	r1, #20
 80088c8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80088cc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80088d0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80088d4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80088d8:	4295      	cmp	r5, r2
 80088da:	d002      	beq.n	80088e2 <__mcmp+0x2a>
 80088dc:	d304      	bcc.n	80088e8 <__mcmp+0x30>
 80088de:	2001      	movs	r0, #1
 80088e0:	bd30      	pop	{r4, r5, pc}
 80088e2:	42a3      	cmp	r3, r4
 80088e4:	d3f4      	bcc.n	80088d0 <__mcmp+0x18>
 80088e6:	e7fb      	b.n	80088e0 <__mcmp+0x28>
 80088e8:	f04f 30ff 	mov.w	r0, #4294967295
 80088ec:	e7f8      	b.n	80088e0 <__mcmp+0x28>
	...

080088f0 <__mdiff>:
 80088f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088f4:	460d      	mov	r5, r1
 80088f6:	4607      	mov	r7, r0
 80088f8:	4611      	mov	r1, r2
 80088fa:	4628      	mov	r0, r5
 80088fc:	4614      	mov	r4, r2
 80088fe:	f7ff ffdb 	bl	80088b8 <__mcmp>
 8008902:	1e06      	subs	r6, r0, #0
 8008904:	d111      	bne.n	800892a <__mdiff+0x3a>
 8008906:	4631      	mov	r1, r6
 8008908:	4638      	mov	r0, r7
 800890a:	f7ff fd0d 	bl	8008328 <_Balloc>
 800890e:	4602      	mov	r2, r0
 8008910:	b928      	cbnz	r0, 800891e <__mdiff+0x2e>
 8008912:	f240 2132 	movw	r1, #562	; 0x232
 8008916:	4b3a      	ldr	r3, [pc, #232]	; (8008a00 <__mdiff+0x110>)
 8008918:	483a      	ldr	r0, [pc, #232]	; (8008a04 <__mdiff+0x114>)
 800891a:	f001 f85d 	bl	80099d8 <__assert_func>
 800891e:	2301      	movs	r3, #1
 8008920:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8008924:	4610      	mov	r0, r2
 8008926:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800892a:	bfa4      	itt	ge
 800892c:	4623      	movge	r3, r4
 800892e:	462c      	movge	r4, r5
 8008930:	4638      	mov	r0, r7
 8008932:	6861      	ldr	r1, [r4, #4]
 8008934:	bfa6      	itte	ge
 8008936:	461d      	movge	r5, r3
 8008938:	2600      	movge	r6, #0
 800893a:	2601      	movlt	r6, #1
 800893c:	f7ff fcf4 	bl	8008328 <_Balloc>
 8008940:	4602      	mov	r2, r0
 8008942:	b918      	cbnz	r0, 800894c <__mdiff+0x5c>
 8008944:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008948:	4b2d      	ldr	r3, [pc, #180]	; (8008a00 <__mdiff+0x110>)
 800894a:	e7e5      	b.n	8008918 <__mdiff+0x28>
 800894c:	f102 0814 	add.w	r8, r2, #20
 8008950:	46c2      	mov	sl, r8
 8008952:	f04f 0c00 	mov.w	ip, #0
 8008956:	6927      	ldr	r7, [r4, #16]
 8008958:	60c6      	str	r6, [r0, #12]
 800895a:	692e      	ldr	r6, [r5, #16]
 800895c:	f104 0014 	add.w	r0, r4, #20
 8008960:	f105 0914 	add.w	r9, r5, #20
 8008964:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8008968:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800896c:	3410      	adds	r4, #16
 800896e:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8008972:	f859 3b04 	ldr.w	r3, [r9], #4
 8008976:	fa1f f18b 	uxth.w	r1, fp
 800897a:	448c      	add	ip, r1
 800897c:	b299      	uxth	r1, r3
 800897e:	0c1b      	lsrs	r3, r3, #16
 8008980:	ebac 0101 	sub.w	r1, ip, r1
 8008984:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008988:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800898c:	b289      	uxth	r1, r1
 800898e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8008992:	454e      	cmp	r6, r9
 8008994:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8008998:	f84a 3b04 	str.w	r3, [sl], #4
 800899c:	d8e7      	bhi.n	800896e <__mdiff+0x7e>
 800899e:	1b73      	subs	r3, r6, r5
 80089a0:	3b15      	subs	r3, #21
 80089a2:	f023 0303 	bic.w	r3, r3, #3
 80089a6:	3515      	adds	r5, #21
 80089a8:	3304      	adds	r3, #4
 80089aa:	42ae      	cmp	r6, r5
 80089ac:	bf38      	it	cc
 80089ae:	2304      	movcc	r3, #4
 80089b0:	4418      	add	r0, r3
 80089b2:	4443      	add	r3, r8
 80089b4:	461e      	mov	r6, r3
 80089b6:	4605      	mov	r5, r0
 80089b8:	4575      	cmp	r5, lr
 80089ba:	d30e      	bcc.n	80089da <__mdiff+0xea>
 80089bc:	f10e 0103 	add.w	r1, lr, #3
 80089c0:	1a09      	subs	r1, r1, r0
 80089c2:	f021 0103 	bic.w	r1, r1, #3
 80089c6:	3803      	subs	r0, #3
 80089c8:	4586      	cmp	lr, r0
 80089ca:	bf38      	it	cc
 80089cc:	2100      	movcc	r1, #0
 80089ce:	4419      	add	r1, r3
 80089d0:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 80089d4:	b18b      	cbz	r3, 80089fa <__mdiff+0x10a>
 80089d6:	6117      	str	r7, [r2, #16]
 80089d8:	e7a4      	b.n	8008924 <__mdiff+0x34>
 80089da:	f855 8b04 	ldr.w	r8, [r5], #4
 80089de:	fa1f f188 	uxth.w	r1, r8
 80089e2:	4461      	add	r1, ip
 80089e4:	140c      	asrs	r4, r1, #16
 80089e6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80089ea:	b289      	uxth	r1, r1
 80089ec:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80089f0:	ea4f 4c24 	mov.w	ip, r4, asr #16
 80089f4:	f846 1b04 	str.w	r1, [r6], #4
 80089f8:	e7de      	b.n	80089b8 <__mdiff+0xc8>
 80089fa:	3f01      	subs	r7, #1
 80089fc:	e7e8      	b.n	80089d0 <__mdiff+0xe0>
 80089fe:	bf00      	nop
 8008a00:	0800a6d8 	.word	0x0800a6d8
 8008a04:	0800a764 	.word	0x0800a764

08008a08 <__ulp>:
 8008a08:	4b11      	ldr	r3, [pc, #68]	; (8008a50 <__ulp+0x48>)
 8008a0a:	400b      	ands	r3, r1
 8008a0c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	dd02      	ble.n	8008a1a <__ulp+0x12>
 8008a14:	2000      	movs	r0, #0
 8008a16:	4619      	mov	r1, r3
 8008a18:	4770      	bx	lr
 8008a1a:	425b      	negs	r3, r3
 8008a1c:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8008a20:	f04f 0000 	mov.w	r0, #0
 8008a24:	f04f 0100 	mov.w	r1, #0
 8008a28:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008a2c:	da04      	bge.n	8008a38 <__ulp+0x30>
 8008a2e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008a32:	fa43 f102 	asr.w	r1, r3, r2
 8008a36:	4770      	bx	lr
 8008a38:	f1a2 0314 	sub.w	r3, r2, #20
 8008a3c:	2b1e      	cmp	r3, #30
 8008a3e:	bfd6      	itet	le
 8008a40:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8008a44:	2301      	movgt	r3, #1
 8008a46:	fa22 f303 	lsrle.w	r3, r2, r3
 8008a4a:	4618      	mov	r0, r3
 8008a4c:	4770      	bx	lr
 8008a4e:	bf00      	nop
 8008a50:	7ff00000 	.word	0x7ff00000

08008a54 <__b2d>:
 8008a54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a58:	6907      	ldr	r7, [r0, #16]
 8008a5a:	f100 0914 	add.w	r9, r0, #20
 8008a5e:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8008a62:	f857 6c04 	ldr.w	r6, [r7, #-4]
 8008a66:	f1a7 0804 	sub.w	r8, r7, #4
 8008a6a:	4630      	mov	r0, r6
 8008a6c:	f7ff fd4e 	bl	800850c <__hi0bits>
 8008a70:	f1c0 0320 	rsb	r3, r0, #32
 8008a74:	280a      	cmp	r0, #10
 8008a76:	600b      	str	r3, [r1, #0]
 8008a78:	491f      	ldr	r1, [pc, #124]	; (8008af8 <__b2d+0xa4>)
 8008a7a:	dc17      	bgt.n	8008aac <__b2d+0x58>
 8008a7c:	45c1      	cmp	r9, r8
 8008a7e:	bf28      	it	cs
 8008a80:	2200      	movcs	r2, #0
 8008a82:	f1c0 0c0b 	rsb	ip, r0, #11
 8008a86:	fa26 f30c 	lsr.w	r3, r6, ip
 8008a8a:	bf38      	it	cc
 8008a8c:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8008a90:	ea43 0501 	orr.w	r5, r3, r1
 8008a94:	f100 0315 	add.w	r3, r0, #21
 8008a98:	fa06 f303 	lsl.w	r3, r6, r3
 8008a9c:	fa22 f20c 	lsr.w	r2, r2, ip
 8008aa0:	ea43 0402 	orr.w	r4, r3, r2
 8008aa4:	4620      	mov	r0, r4
 8008aa6:	4629      	mov	r1, r5
 8008aa8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008aac:	45c1      	cmp	r9, r8
 8008aae:	bf2e      	itee	cs
 8008ab0:	2200      	movcs	r2, #0
 8008ab2:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8008ab6:	f1a7 0808 	subcc.w	r8, r7, #8
 8008aba:	f1b0 030b 	subs.w	r3, r0, #11
 8008abe:	d016      	beq.n	8008aee <__b2d+0x9a>
 8008ac0:	f1c3 0720 	rsb	r7, r3, #32
 8008ac4:	fa22 f107 	lsr.w	r1, r2, r7
 8008ac8:	45c8      	cmp	r8, r9
 8008aca:	fa06 f603 	lsl.w	r6, r6, r3
 8008ace:	ea46 0601 	orr.w	r6, r6, r1
 8008ad2:	bf94      	ite	ls
 8008ad4:	2100      	movls	r1, #0
 8008ad6:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8008ada:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 8008ade:	fa02 f003 	lsl.w	r0, r2, r3
 8008ae2:	40f9      	lsrs	r1, r7
 8008ae4:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8008ae8:	ea40 0401 	orr.w	r4, r0, r1
 8008aec:	e7da      	b.n	8008aa4 <__b2d+0x50>
 8008aee:	4614      	mov	r4, r2
 8008af0:	ea46 0501 	orr.w	r5, r6, r1
 8008af4:	e7d6      	b.n	8008aa4 <__b2d+0x50>
 8008af6:	bf00      	nop
 8008af8:	3ff00000 	.word	0x3ff00000

08008afc <__d2b>:
 8008afc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8008b00:	2101      	movs	r1, #1
 8008b02:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8008b06:	4690      	mov	r8, r2
 8008b08:	461d      	mov	r5, r3
 8008b0a:	f7ff fc0d 	bl	8008328 <_Balloc>
 8008b0e:	4604      	mov	r4, r0
 8008b10:	b930      	cbnz	r0, 8008b20 <__d2b+0x24>
 8008b12:	4602      	mov	r2, r0
 8008b14:	f240 310a 	movw	r1, #778	; 0x30a
 8008b18:	4b24      	ldr	r3, [pc, #144]	; (8008bac <__d2b+0xb0>)
 8008b1a:	4825      	ldr	r0, [pc, #148]	; (8008bb0 <__d2b+0xb4>)
 8008b1c:	f000 ff5c 	bl	80099d8 <__assert_func>
 8008b20:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8008b24:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8008b28:	bb2d      	cbnz	r5, 8008b76 <__d2b+0x7a>
 8008b2a:	9301      	str	r3, [sp, #4]
 8008b2c:	f1b8 0300 	subs.w	r3, r8, #0
 8008b30:	d026      	beq.n	8008b80 <__d2b+0x84>
 8008b32:	4668      	mov	r0, sp
 8008b34:	9300      	str	r3, [sp, #0]
 8008b36:	f7ff fd09 	bl	800854c <__lo0bits>
 8008b3a:	9900      	ldr	r1, [sp, #0]
 8008b3c:	b1f0      	cbz	r0, 8008b7c <__d2b+0x80>
 8008b3e:	9a01      	ldr	r2, [sp, #4]
 8008b40:	f1c0 0320 	rsb	r3, r0, #32
 8008b44:	fa02 f303 	lsl.w	r3, r2, r3
 8008b48:	430b      	orrs	r3, r1
 8008b4a:	40c2      	lsrs	r2, r0
 8008b4c:	6163      	str	r3, [r4, #20]
 8008b4e:	9201      	str	r2, [sp, #4]
 8008b50:	9b01      	ldr	r3, [sp, #4]
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	bf14      	ite	ne
 8008b56:	2102      	movne	r1, #2
 8008b58:	2101      	moveq	r1, #1
 8008b5a:	61a3      	str	r3, [r4, #24]
 8008b5c:	6121      	str	r1, [r4, #16]
 8008b5e:	b1c5      	cbz	r5, 8008b92 <__d2b+0x96>
 8008b60:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008b64:	4405      	add	r5, r0
 8008b66:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008b6a:	603d      	str	r5, [r7, #0]
 8008b6c:	6030      	str	r0, [r6, #0]
 8008b6e:	4620      	mov	r0, r4
 8008b70:	b002      	add	sp, #8
 8008b72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b76:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008b7a:	e7d6      	b.n	8008b2a <__d2b+0x2e>
 8008b7c:	6161      	str	r1, [r4, #20]
 8008b7e:	e7e7      	b.n	8008b50 <__d2b+0x54>
 8008b80:	a801      	add	r0, sp, #4
 8008b82:	f7ff fce3 	bl	800854c <__lo0bits>
 8008b86:	2101      	movs	r1, #1
 8008b88:	9b01      	ldr	r3, [sp, #4]
 8008b8a:	6121      	str	r1, [r4, #16]
 8008b8c:	6163      	str	r3, [r4, #20]
 8008b8e:	3020      	adds	r0, #32
 8008b90:	e7e5      	b.n	8008b5e <__d2b+0x62>
 8008b92:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8008b96:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008b9a:	6038      	str	r0, [r7, #0]
 8008b9c:	6918      	ldr	r0, [r3, #16]
 8008b9e:	f7ff fcb5 	bl	800850c <__hi0bits>
 8008ba2:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8008ba6:	6031      	str	r1, [r6, #0]
 8008ba8:	e7e1      	b.n	8008b6e <__d2b+0x72>
 8008baa:	bf00      	nop
 8008bac:	0800a6d8 	.word	0x0800a6d8
 8008bb0:	0800a764 	.word	0x0800a764

08008bb4 <__ratio>:
 8008bb4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bb8:	4688      	mov	r8, r1
 8008bba:	4669      	mov	r1, sp
 8008bbc:	4681      	mov	r9, r0
 8008bbe:	f7ff ff49 	bl	8008a54 <__b2d>
 8008bc2:	460f      	mov	r7, r1
 8008bc4:	4604      	mov	r4, r0
 8008bc6:	460d      	mov	r5, r1
 8008bc8:	4640      	mov	r0, r8
 8008bca:	a901      	add	r1, sp, #4
 8008bcc:	f7ff ff42 	bl	8008a54 <__b2d>
 8008bd0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008bd4:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8008bd8:	468b      	mov	fp, r1
 8008bda:	eba3 0c02 	sub.w	ip, r3, r2
 8008bde:	e9dd 3200 	ldrd	r3, r2, [sp]
 8008be2:	1a9b      	subs	r3, r3, r2
 8008be4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	bfd5      	itete	le
 8008bec:	460a      	movle	r2, r1
 8008bee:	462a      	movgt	r2, r5
 8008bf0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008bf4:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8008bf8:	bfd8      	it	le
 8008bfa:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8008bfe:	465b      	mov	r3, fp
 8008c00:	4602      	mov	r2, r0
 8008c02:	4639      	mov	r1, r7
 8008c04:	4620      	mov	r0, r4
 8008c06:	f7f7 fd91 	bl	800072c <__aeabi_ddiv>
 8008c0a:	b003      	add	sp, #12
 8008c0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008c10 <__copybits>:
 8008c10:	3901      	subs	r1, #1
 8008c12:	b570      	push	{r4, r5, r6, lr}
 8008c14:	1149      	asrs	r1, r1, #5
 8008c16:	6914      	ldr	r4, [r2, #16]
 8008c18:	3101      	adds	r1, #1
 8008c1a:	f102 0314 	add.w	r3, r2, #20
 8008c1e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008c22:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008c26:	1f05      	subs	r5, r0, #4
 8008c28:	42a3      	cmp	r3, r4
 8008c2a:	d30c      	bcc.n	8008c46 <__copybits+0x36>
 8008c2c:	1aa3      	subs	r3, r4, r2
 8008c2e:	3b11      	subs	r3, #17
 8008c30:	f023 0303 	bic.w	r3, r3, #3
 8008c34:	3211      	adds	r2, #17
 8008c36:	42a2      	cmp	r2, r4
 8008c38:	bf88      	it	hi
 8008c3a:	2300      	movhi	r3, #0
 8008c3c:	4418      	add	r0, r3
 8008c3e:	2300      	movs	r3, #0
 8008c40:	4288      	cmp	r0, r1
 8008c42:	d305      	bcc.n	8008c50 <__copybits+0x40>
 8008c44:	bd70      	pop	{r4, r5, r6, pc}
 8008c46:	f853 6b04 	ldr.w	r6, [r3], #4
 8008c4a:	f845 6f04 	str.w	r6, [r5, #4]!
 8008c4e:	e7eb      	b.n	8008c28 <__copybits+0x18>
 8008c50:	f840 3b04 	str.w	r3, [r0], #4
 8008c54:	e7f4      	b.n	8008c40 <__copybits+0x30>

08008c56 <__any_on>:
 8008c56:	f100 0214 	add.w	r2, r0, #20
 8008c5a:	6900      	ldr	r0, [r0, #16]
 8008c5c:	114b      	asrs	r3, r1, #5
 8008c5e:	4298      	cmp	r0, r3
 8008c60:	b510      	push	{r4, lr}
 8008c62:	db11      	blt.n	8008c88 <__any_on+0x32>
 8008c64:	dd0a      	ble.n	8008c7c <__any_on+0x26>
 8008c66:	f011 011f 	ands.w	r1, r1, #31
 8008c6a:	d007      	beq.n	8008c7c <__any_on+0x26>
 8008c6c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008c70:	fa24 f001 	lsr.w	r0, r4, r1
 8008c74:	fa00 f101 	lsl.w	r1, r0, r1
 8008c78:	428c      	cmp	r4, r1
 8008c7a:	d10b      	bne.n	8008c94 <__any_on+0x3e>
 8008c7c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008c80:	4293      	cmp	r3, r2
 8008c82:	d803      	bhi.n	8008c8c <__any_on+0x36>
 8008c84:	2000      	movs	r0, #0
 8008c86:	bd10      	pop	{r4, pc}
 8008c88:	4603      	mov	r3, r0
 8008c8a:	e7f7      	b.n	8008c7c <__any_on+0x26>
 8008c8c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008c90:	2900      	cmp	r1, #0
 8008c92:	d0f5      	beq.n	8008c80 <__any_on+0x2a>
 8008c94:	2001      	movs	r0, #1
 8008c96:	e7f6      	b.n	8008c86 <__any_on+0x30>

08008c98 <_calloc_r>:
 8008c98:	b570      	push	{r4, r5, r6, lr}
 8008c9a:	fba1 5402 	umull	r5, r4, r1, r2
 8008c9e:	b934      	cbnz	r4, 8008cae <_calloc_r+0x16>
 8008ca0:	4629      	mov	r1, r5
 8008ca2:	f000 f875 	bl	8008d90 <_malloc_r>
 8008ca6:	4606      	mov	r6, r0
 8008ca8:	b928      	cbnz	r0, 8008cb6 <_calloc_r+0x1e>
 8008caa:	4630      	mov	r0, r6
 8008cac:	bd70      	pop	{r4, r5, r6, pc}
 8008cae:	220c      	movs	r2, #12
 8008cb0:	2600      	movs	r6, #0
 8008cb2:	6002      	str	r2, [r0, #0]
 8008cb4:	e7f9      	b.n	8008caa <_calloc_r+0x12>
 8008cb6:	462a      	mov	r2, r5
 8008cb8:	4621      	mov	r1, r4
 8008cba:	f7fc fb4d 	bl	8005358 <memset>
 8008cbe:	e7f4      	b.n	8008caa <_calloc_r+0x12>

08008cc0 <_free_r>:
 8008cc0:	b538      	push	{r3, r4, r5, lr}
 8008cc2:	4605      	mov	r5, r0
 8008cc4:	2900      	cmp	r1, #0
 8008cc6:	d040      	beq.n	8008d4a <_free_r+0x8a>
 8008cc8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008ccc:	1f0c      	subs	r4, r1, #4
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	bfb8      	it	lt
 8008cd2:	18e4      	addlt	r4, r4, r3
 8008cd4:	f001 f880 	bl	8009dd8 <__malloc_lock>
 8008cd8:	4a1c      	ldr	r2, [pc, #112]	; (8008d4c <_free_r+0x8c>)
 8008cda:	6813      	ldr	r3, [r2, #0]
 8008cdc:	b933      	cbnz	r3, 8008cec <_free_r+0x2c>
 8008cde:	6063      	str	r3, [r4, #4]
 8008ce0:	6014      	str	r4, [r2, #0]
 8008ce2:	4628      	mov	r0, r5
 8008ce4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008ce8:	f001 b87c 	b.w	8009de4 <__malloc_unlock>
 8008cec:	42a3      	cmp	r3, r4
 8008cee:	d908      	bls.n	8008d02 <_free_r+0x42>
 8008cf0:	6820      	ldr	r0, [r4, #0]
 8008cf2:	1821      	adds	r1, r4, r0
 8008cf4:	428b      	cmp	r3, r1
 8008cf6:	bf01      	itttt	eq
 8008cf8:	6819      	ldreq	r1, [r3, #0]
 8008cfa:	685b      	ldreq	r3, [r3, #4]
 8008cfc:	1809      	addeq	r1, r1, r0
 8008cfe:	6021      	streq	r1, [r4, #0]
 8008d00:	e7ed      	b.n	8008cde <_free_r+0x1e>
 8008d02:	461a      	mov	r2, r3
 8008d04:	685b      	ldr	r3, [r3, #4]
 8008d06:	b10b      	cbz	r3, 8008d0c <_free_r+0x4c>
 8008d08:	42a3      	cmp	r3, r4
 8008d0a:	d9fa      	bls.n	8008d02 <_free_r+0x42>
 8008d0c:	6811      	ldr	r1, [r2, #0]
 8008d0e:	1850      	adds	r0, r2, r1
 8008d10:	42a0      	cmp	r0, r4
 8008d12:	d10b      	bne.n	8008d2c <_free_r+0x6c>
 8008d14:	6820      	ldr	r0, [r4, #0]
 8008d16:	4401      	add	r1, r0
 8008d18:	1850      	adds	r0, r2, r1
 8008d1a:	4283      	cmp	r3, r0
 8008d1c:	6011      	str	r1, [r2, #0]
 8008d1e:	d1e0      	bne.n	8008ce2 <_free_r+0x22>
 8008d20:	6818      	ldr	r0, [r3, #0]
 8008d22:	685b      	ldr	r3, [r3, #4]
 8008d24:	4401      	add	r1, r0
 8008d26:	6011      	str	r1, [r2, #0]
 8008d28:	6053      	str	r3, [r2, #4]
 8008d2a:	e7da      	b.n	8008ce2 <_free_r+0x22>
 8008d2c:	d902      	bls.n	8008d34 <_free_r+0x74>
 8008d2e:	230c      	movs	r3, #12
 8008d30:	602b      	str	r3, [r5, #0]
 8008d32:	e7d6      	b.n	8008ce2 <_free_r+0x22>
 8008d34:	6820      	ldr	r0, [r4, #0]
 8008d36:	1821      	adds	r1, r4, r0
 8008d38:	428b      	cmp	r3, r1
 8008d3a:	bf01      	itttt	eq
 8008d3c:	6819      	ldreq	r1, [r3, #0]
 8008d3e:	685b      	ldreq	r3, [r3, #4]
 8008d40:	1809      	addeq	r1, r1, r0
 8008d42:	6021      	streq	r1, [r4, #0]
 8008d44:	6063      	str	r3, [r4, #4]
 8008d46:	6054      	str	r4, [r2, #4]
 8008d48:	e7cb      	b.n	8008ce2 <_free_r+0x22>
 8008d4a:	bd38      	pop	{r3, r4, r5, pc}
 8008d4c:	20000490 	.word	0x20000490

08008d50 <sbrk_aligned>:
 8008d50:	b570      	push	{r4, r5, r6, lr}
 8008d52:	4e0e      	ldr	r6, [pc, #56]	; (8008d8c <sbrk_aligned+0x3c>)
 8008d54:	460c      	mov	r4, r1
 8008d56:	6831      	ldr	r1, [r6, #0]
 8008d58:	4605      	mov	r5, r0
 8008d5a:	b911      	cbnz	r1, 8008d62 <sbrk_aligned+0x12>
 8008d5c:	f000 fd26 	bl	80097ac <_sbrk_r>
 8008d60:	6030      	str	r0, [r6, #0]
 8008d62:	4621      	mov	r1, r4
 8008d64:	4628      	mov	r0, r5
 8008d66:	f000 fd21 	bl	80097ac <_sbrk_r>
 8008d6a:	1c43      	adds	r3, r0, #1
 8008d6c:	d00a      	beq.n	8008d84 <sbrk_aligned+0x34>
 8008d6e:	1cc4      	adds	r4, r0, #3
 8008d70:	f024 0403 	bic.w	r4, r4, #3
 8008d74:	42a0      	cmp	r0, r4
 8008d76:	d007      	beq.n	8008d88 <sbrk_aligned+0x38>
 8008d78:	1a21      	subs	r1, r4, r0
 8008d7a:	4628      	mov	r0, r5
 8008d7c:	f000 fd16 	bl	80097ac <_sbrk_r>
 8008d80:	3001      	adds	r0, #1
 8008d82:	d101      	bne.n	8008d88 <sbrk_aligned+0x38>
 8008d84:	f04f 34ff 	mov.w	r4, #4294967295
 8008d88:	4620      	mov	r0, r4
 8008d8a:	bd70      	pop	{r4, r5, r6, pc}
 8008d8c:	20000494 	.word	0x20000494

08008d90 <_malloc_r>:
 8008d90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d94:	1ccd      	adds	r5, r1, #3
 8008d96:	f025 0503 	bic.w	r5, r5, #3
 8008d9a:	3508      	adds	r5, #8
 8008d9c:	2d0c      	cmp	r5, #12
 8008d9e:	bf38      	it	cc
 8008da0:	250c      	movcc	r5, #12
 8008da2:	2d00      	cmp	r5, #0
 8008da4:	4607      	mov	r7, r0
 8008da6:	db01      	blt.n	8008dac <_malloc_r+0x1c>
 8008da8:	42a9      	cmp	r1, r5
 8008daa:	d905      	bls.n	8008db8 <_malloc_r+0x28>
 8008dac:	230c      	movs	r3, #12
 8008dae:	2600      	movs	r6, #0
 8008db0:	603b      	str	r3, [r7, #0]
 8008db2:	4630      	mov	r0, r6
 8008db4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008db8:	4e2e      	ldr	r6, [pc, #184]	; (8008e74 <_malloc_r+0xe4>)
 8008dba:	f001 f80d 	bl	8009dd8 <__malloc_lock>
 8008dbe:	6833      	ldr	r3, [r6, #0]
 8008dc0:	461c      	mov	r4, r3
 8008dc2:	bb34      	cbnz	r4, 8008e12 <_malloc_r+0x82>
 8008dc4:	4629      	mov	r1, r5
 8008dc6:	4638      	mov	r0, r7
 8008dc8:	f7ff ffc2 	bl	8008d50 <sbrk_aligned>
 8008dcc:	1c43      	adds	r3, r0, #1
 8008dce:	4604      	mov	r4, r0
 8008dd0:	d14d      	bne.n	8008e6e <_malloc_r+0xde>
 8008dd2:	6834      	ldr	r4, [r6, #0]
 8008dd4:	4626      	mov	r6, r4
 8008dd6:	2e00      	cmp	r6, #0
 8008dd8:	d140      	bne.n	8008e5c <_malloc_r+0xcc>
 8008dda:	6823      	ldr	r3, [r4, #0]
 8008ddc:	4631      	mov	r1, r6
 8008dde:	4638      	mov	r0, r7
 8008de0:	eb04 0803 	add.w	r8, r4, r3
 8008de4:	f000 fce2 	bl	80097ac <_sbrk_r>
 8008de8:	4580      	cmp	r8, r0
 8008dea:	d13a      	bne.n	8008e62 <_malloc_r+0xd2>
 8008dec:	6821      	ldr	r1, [r4, #0]
 8008dee:	3503      	adds	r5, #3
 8008df0:	1a6d      	subs	r5, r5, r1
 8008df2:	f025 0503 	bic.w	r5, r5, #3
 8008df6:	3508      	adds	r5, #8
 8008df8:	2d0c      	cmp	r5, #12
 8008dfa:	bf38      	it	cc
 8008dfc:	250c      	movcc	r5, #12
 8008dfe:	4638      	mov	r0, r7
 8008e00:	4629      	mov	r1, r5
 8008e02:	f7ff ffa5 	bl	8008d50 <sbrk_aligned>
 8008e06:	3001      	adds	r0, #1
 8008e08:	d02b      	beq.n	8008e62 <_malloc_r+0xd2>
 8008e0a:	6823      	ldr	r3, [r4, #0]
 8008e0c:	442b      	add	r3, r5
 8008e0e:	6023      	str	r3, [r4, #0]
 8008e10:	e00e      	b.n	8008e30 <_malloc_r+0xa0>
 8008e12:	6822      	ldr	r2, [r4, #0]
 8008e14:	1b52      	subs	r2, r2, r5
 8008e16:	d41e      	bmi.n	8008e56 <_malloc_r+0xc6>
 8008e18:	2a0b      	cmp	r2, #11
 8008e1a:	d916      	bls.n	8008e4a <_malloc_r+0xba>
 8008e1c:	1961      	adds	r1, r4, r5
 8008e1e:	42a3      	cmp	r3, r4
 8008e20:	6025      	str	r5, [r4, #0]
 8008e22:	bf18      	it	ne
 8008e24:	6059      	strne	r1, [r3, #4]
 8008e26:	6863      	ldr	r3, [r4, #4]
 8008e28:	bf08      	it	eq
 8008e2a:	6031      	streq	r1, [r6, #0]
 8008e2c:	5162      	str	r2, [r4, r5]
 8008e2e:	604b      	str	r3, [r1, #4]
 8008e30:	4638      	mov	r0, r7
 8008e32:	f104 060b 	add.w	r6, r4, #11
 8008e36:	f000 ffd5 	bl	8009de4 <__malloc_unlock>
 8008e3a:	f026 0607 	bic.w	r6, r6, #7
 8008e3e:	1d23      	adds	r3, r4, #4
 8008e40:	1af2      	subs	r2, r6, r3
 8008e42:	d0b6      	beq.n	8008db2 <_malloc_r+0x22>
 8008e44:	1b9b      	subs	r3, r3, r6
 8008e46:	50a3      	str	r3, [r4, r2]
 8008e48:	e7b3      	b.n	8008db2 <_malloc_r+0x22>
 8008e4a:	6862      	ldr	r2, [r4, #4]
 8008e4c:	42a3      	cmp	r3, r4
 8008e4e:	bf0c      	ite	eq
 8008e50:	6032      	streq	r2, [r6, #0]
 8008e52:	605a      	strne	r2, [r3, #4]
 8008e54:	e7ec      	b.n	8008e30 <_malloc_r+0xa0>
 8008e56:	4623      	mov	r3, r4
 8008e58:	6864      	ldr	r4, [r4, #4]
 8008e5a:	e7b2      	b.n	8008dc2 <_malloc_r+0x32>
 8008e5c:	4634      	mov	r4, r6
 8008e5e:	6876      	ldr	r6, [r6, #4]
 8008e60:	e7b9      	b.n	8008dd6 <_malloc_r+0x46>
 8008e62:	230c      	movs	r3, #12
 8008e64:	4638      	mov	r0, r7
 8008e66:	603b      	str	r3, [r7, #0]
 8008e68:	f000 ffbc 	bl	8009de4 <__malloc_unlock>
 8008e6c:	e7a1      	b.n	8008db2 <_malloc_r+0x22>
 8008e6e:	6025      	str	r5, [r4, #0]
 8008e70:	e7de      	b.n	8008e30 <_malloc_r+0xa0>
 8008e72:	bf00      	nop
 8008e74:	20000490 	.word	0x20000490

08008e78 <__ssputs_r>:
 8008e78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e7c:	688e      	ldr	r6, [r1, #8]
 8008e7e:	4682      	mov	sl, r0
 8008e80:	429e      	cmp	r6, r3
 8008e82:	460c      	mov	r4, r1
 8008e84:	4690      	mov	r8, r2
 8008e86:	461f      	mov	r7, r3
 8008e88:	d838      	bhi.n	8008efc <__ssputs_r+0x84>
 8008e8a:	898a      	ldrh	r2, [r1, #12]
 8008e8c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008e90:	d032      	beq.n	8008ef8 <__ssputs_r+0x80>
 8008e92:	6825      	ldr	r5, [r4, #0]
 8008e94:	6909      	ldr	r1, [r1, #16]
 8008e96:	3301      	adds	r3, #1
 8008e98:	eba5 0901 	sub.w	r9, r5, r1
 8008e9c:	6965      	ldr	r5, [r4, #20]
 8008e9e:	444b      	add	r3, r9
 8008ea0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008ea4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008ea8:	106d      	asrs	r5, r5, #1
 8008eaa:	429d      	cmp	r5, r3
 8008eac:	bf38      	it	cc
 8008eae:	461d      	movcc	r5, r3
 8008eb0:	0553      	lsls	r3, r2, #21
 8008eb2:	d531      	bpl.n	8008f18 <__ssputs_r+0xa0>
 8008eb4:	4629      	mov	r1, r5
 8008eb6:	f7ff ff6b 	bl	8008d90 <_malloc_r>
 8008eba:	4606      	mov	r6, r0
 8008ebc:	b950      	cbnz	r0, 8008ed4 <__ssputs_r+0x5c>
 8008ebe:	230c      	movs	r3, #12
 8008ec0:	f04f 30ff 	mov.w	r0, #4294967295
 8008ec4:	f8ca 3000 	str.w	r3, [sl]
 8008ec8:	89a3      	ldrh	r3, [r4, #12]
 8008eca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008ece:	81a3      	strh	r3, [r4, #12]
 8008ed0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ed4:	464a      	mov	r2, r9
 8008ed6:	6921      	ldr	r1, [r4, #16]
 8008ed8:	f7ff fa18 	bl	800830c <memcpy>
 8008edc:	89a3      	ldrh	r3, [r4, #12]
 8008ede:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008ee2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ee6:	81a3      	strh	r3, [r4, #12]
 8008ee8:	6126      	str	r6, [r4, #16]
 8008eea:	444e      	add	r6, r9
 8008eec:	6026      	str	r6, [r4, #0]
 8008eee:	463e      	mov	r6, r7
 8008ef0:	6165      	str	r5, [r4, #20]
 8008ef2:	eba5 0509 	sub.w	r5, r5, r9
 8008ef6:	60a5      	str	r5, [r4, #8]
 8008ef8:	42be      	cmp	r6, r7
 8008efa:	d900      	bls.n	8008efe <__ssputs_r+0x86>
 8008efc:	463e      	mov	r6, r7
 8008efe:	4632      	mov	r2, r6
 8008f00:	4641      	mov	r1, r8
 8008f02:	6820      	ldr	r0, [r4, #0]
 8008f04:	f000 ff4e 	bl	8009da4 <memmove>
 8008f08:	68a3      	ldr	r3, [r4, #8]
 8008f0a:	2000      	movs	r0, #0
 8008f0c:	1b9b      	subs	r3, r3, r6
 8008f0e:	60a3      	str	r3, [r4, #8]
 8008f10:	6823      	ldr	r3, [r4, #0]
 8008f12:	4433      	add	r3, r6
 8008f14:	6023      	str	r3, [r4, #0]
 8008f16:	e7db      	b.n	8008ed0 <__ssputs_r+0x58>
 8008f18:	462a      	mov	r2, r5
 8008f1a:	f000 ff69 	bl	8009df0 <_realloc_r>
 8008f1e:	4606      	mov	r6, r0
 8008f20:	2800      	cmp	r0, #0
 8008f22:	d1e1      	bne.n	8008ee8 <__ssputs_r+0x70>
 8008f24:	4650      	mov	r0, sl
 8008f26:	6921      	ldr	r1, [r4, #16]
 8008f28:	f7ff feca 	bl	8008cc0 <_free_r>
 8008f2c:	e7c7      	b.n	8008ebe <__ssputs_r+0x46>
	...

08008f30 <_svfiprintf_r>:
 8008f30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f34:	4698      	mov	r8, r3
 8008f36:	898b      	ldrh	r3, [r1, #12]
 8008f38:	4607      	mov	r7, r0
 8008f3a:	061b      	lsls	r3, r3, #24
 8008f3c:	460d      	mov	r5, r1
 8008f3e:	4614      	mov	r4, r2
 8008f40:	b09d      	sub	sp, #116	; 0x74
 8008f42:	d50e      	bpl.n	8008f62 <_svfiprintf_r+0x32>
 8008f44:	690b      	ldr	r3, [r1, #16]
 8008f46:	b963      	cbnz	r3, 8008f62 <_svfiprintf_r+0x32>
 8008f48:	2140      	movs	r1, #64	; 0x40
 8008f4a:	f7ff ff21 	bl	8008d90 <_malloc_r>
 8008f4e:	6028      	str	r0, [r5, #0]
 8008f50:	6128      	str	r0, [r5, #16]
 8008f52:	b920      	cbnz	r0, 8008f5e <_svfiprintf_r+0x2e>
 8008f54:	230c      	movs	r3, #12
 8008f56:	603b      	str	r3, [r7, #0]
 8008f58:	f04f 30ff 	mov.w	r0, #4294967295
 8008f5c:	e0d1      	b.n	8009102 <_svfiprintf_r+0x1d2>
 8008f5e:	2340      	movs	r3, #64	; 0x40
 8008f60:	616b      	str	r3, [r5, #20]
 8008f62:	2300      	movs	r3, #0
 8008f64:	9309      	str	r3, [sp, #36]	; 0x24
 8008f66:	2320      	movs	r3, #32
 8008f68:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008f6c:	2330      	movs	r3, #48	; 0x30
 8008f6e:	f04f 0901 	mov.w	r9, #1
 8008f72:	f8cd 800c 	str.w	r8, [sp, #12]
 8008f76:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800911c <_svfiprintf_r+0x1ec>
 8008f7a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008f7e:	4623      	mov	r3, r4
 8008f80:	469a      	mov	sl, r3
 8008f82:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008f86:	b10a      	cbz	r2, 8008f8c <_svfiprintf_r+0x5c>
 8008f88:	2a25      	cmp	r2, #37	; 0x25
 8008f8a:	d1f9      	bne.n	8008f80 <_svfiprintf_r+0x50>
 8008f8c:	ebba 0b04 	subs.w	fp, sl, r4
 8008f90:	d00b      	beq.n	8008faa <_svfiprintf_r+0x7a>
 8008f92:	465b      	mov	r3, fp
 8008f94:	4622      	mov	r2, r4
 8008f96:	4629      	mov	r1, r5
 8008f98:	4638      	mov	r0, r7
 8008f9a:	f7ff ff6d 	bl	8008e78 <__ssputs_r>
 8008f9e:	3001      	adds	r0, #1
 8008fa0:	f000 80aa 	beq.w	80090f8 <_svfiprintf_r+0x1c8>
 8008fa4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008fa6:	445a      	add	r2, fp
 8008fa8:	9209      	str	r2, [sp, #36]	; 0x24
 8008faa:	f89a 3000 	ldrb.w	r3, [sl]
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	f000 80a2 	beq.w	80090f8 <_svfiprintf_r+0x1c8>
 8008fb4:	2300      	movs	r3, #0
 8008fb6:	f04f 32ff 	mov.w	r2, #4294967295
 8008fba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008fbe:	f10a 0a01 	add.w	sl, sl, #1
 8008fc2:	9304      	str	r3, [sp, #16]
 8008fc4:	9307      	str	r3, [sp, #28]
 8008fc6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008fca:	931a      	str	r3, [sp, #104]	; 0x68
 8008fcc:	4654      	mov	r4, sl
 8008fce:	2205      	movs	r2, #5
 8008fd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008fd4:	4851      	ldr	r0, [pc, #324]	; (800911c <_svfiprintf_r+0x1ec>)
 8008fd6:	f7ff f98b 	bl	80082f0 <memchr>
 8008fda:	9a04      	ldr	r2, [sp, #16]
 8008fdc:	b9d8      	cbnz	r0, 8009016 <_svfiprintf_r+0xe6>
 8008fde:	06d0      	lsls	r0, r2, #27
 8008fe0:	bf44      	itt	mi
 8008fe2:	2320      	movmi	r3, #32
 8008fe4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008fe8:	0711      	lsls	r1, r2, #28
 8008fea:	bf44      	itt	mi
 8008fec:	232b      	movmi	r3, #43	; 0x2b
 8008fee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008ff2:	f89a 3000 	ldrb.w	r3, [sl]
 8008ff6:	2b2a      	cmp	r3, #42	; 0x2a
 8008ff8:	d015      	beq.n	8009026 <_svfiprintf_r+0xf6>
 8008ffa:	4654      	mov	r4, sl
 8008ffc:	2000      	movs	r0, #0
 8008ffe:	f04f 0c0a 	mov.w	ip, #10
 8009002:	9a07      	ldr	r2, [sp, #28]
 8009004:	4621      	mov	r1, r4
 8009006:	f811 3b01 	ldrb.w	r3, [r1], #1
 800900a:	3b30      	subs	r3, #48	; 0x30
 800900c:	2b09      	cmp	r3, #9
 800900e:	d94e      	bls.n	80090ae <_svfiprintf_r+0x17e>
 8009010:	b1b0      	cbz	r0, 8009040 <_svfiprintf_r+0x110>
 8009012:	9207      	str	r2, [sp, #28]
 8009014:	e014      	b.n	8009040 <_svfiprintf_r+0x110>
 8009016:	eba0 0308 	sub.w	r3, r0, r8
 800901a:	fa09 f303 	lsl.w	r3, r9, r3
 800901e:	4313      	orrs	r3, r2
 8009020:	46a2      	mov	sl, r4
 8009022:	9304      	str	r3, [sp, #16]
 8009024:	e7d2      	b.n	8008fcc <_svfiprintf_r+0x9c>
 8009026:	9b03      	ldr	r3, [sp, #12]
 8009028:	1d19      	adds	r1, r3, #4
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	9103      	str	r1, [sp, #12]
 800902e:	2b00      	cmp	r3, #0
 8009030:	bfbb      	ittet	lt
 8009032:	425b      	neglt	r3, r3
 8009034:	f042 0202 	orrlt.w	r2, r2, #2
 8009038:	9307      	strge	r3, [sp, #28]
 800903a:	9307      	strlt	r3, [sp, #28]
 800903c:	bfb8      	it	lt
 800903e:	9204      	strlt	r2, [sp, #16]
 8009040:	7823      	ldrb	r3, [r4, #0]
 8009042:	2b2e      	cmp	r3, #46	; 0x2e
 8009044:	d10c      	bne.n	8009060 <_svfiprintf_r+0x130>
 8009046:	7863      	ldrb	r3, [r4, #1]
 8009048:	2b2a      	cmp	r3, #42	; 0x2a
 800904a:	d135      	bne.n	80090b8 <_svfiprintf_r+0x188>
 800904c:	9b03      	ldr	r3, [sp, #12]
 800904e:	3402      	adds	r4, #2
 8009050:	1d1a      	adds	r2, r3, #4
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	9203      	str	r2, [sp, #12]
 8009056:	2b00      	cmp	r3, #0
 8009058:	bfb8      	it	lt
 800905a:	f04f 33ff 	movlt.w	r3, #4294967295
 800905e:	9305      	str	r3, [sp, #20]
 8009060:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8009120 <_svfiprintf_r+0x1f0>
 8009064:	2203      	movs	r2, #3
 8009066:	4650      	mov	r0, sl
 8009068:	7821      	ldrb	r1, [r4, #0]
 800906a:	f7ff f941 	bl	80082f0 <memchr>
 800906e:	b140      	cbz	r0, 8009082 <_svfiprintf_r+0x152>
 8009070:	2340      	movs	r3, #64	; 0x40
 8009072:	eba0 000a 	sub.w	r0, r0, sl
 8009076:	fa03 f000 	lsl.w	r0, r3, r0
 800907a:	9b04      	ldr	r3, [sp, #16]
 800907c:	3401      	adds	r4, #1
 800907e:	4303      	orrs	r3, r0
 8009080:	9304      	str	r3, [sp, #16]
 8009082:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009086:	2206      	movs	r2, #6
 8009088:	4826      	ldr	r0, [pc, #152]	; (8009124 <_svfiprintf_r+0x1f4>)
 800908a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800908e:	f7ff f92f 	bl	80082f0 <memchr>
 8009092:	2800      	cmp	r0, #0
 8009094:	d038      	beq.n	8009108 <_svfiprintf_r+0x1d8>
 8009096:	4b24      	ldr	r3, [pc, #144]	; (8009128 <_svfiprintf_r+0x1f8>)
 8009098:	bb1b      	cbnz	r3, 80090e2 <_svfiprintf_r+0x1b2>
 800909a:	9b03      	ldr	r3, [sp, #12]
 800909c:	3307      	adds	r3, #7
 800909e:	f023 0307 	bic.w	r3, r3, #7
 80090a2:	3308      	adds	r3, #8
 80090a4:	9303      	str	r3, [sp, #12]
 80090a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090a8:	4433      	add	r3, r6
 80090aa:	9309      	str	r3, [sp, #36]	; 0x24
 80090ac:	e767      	b.n	8008f7e <_svfiprintf_r+0x4e>
 80090ae:	460c      	mov	r4, r1
 80090b0:	2001      	movs	r0, #1
 80090b2:	fb0c 3202 	mla	r2, ip, r2, r3
 80090b6:	e7a5      	b.n	8009004 <_svfiprintf_r+0xd4>
 80090b8:	2300      	movs	r3, #0
 80090ba:	f04f 0c0a 	mov.w	ip, #10
 80090be:	4619      	mov	r1, r3
 80090c0:	3401      	adds	r4, #1
 80090c2:	9305      	str	r3, [sp, #20]
 80090c4:	4620      	mov	r0, r4
 80090c6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80090ca:	3a30      	subs	r2, #48	; 0x30
 80090cc:	2a09      	cmp	r2, #9
 80090ce:	d903      	bls.n	80090d8 <_svfiprintf_r+0x1a8>
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d0c5      	beq.n	8009060 <_svfiprintf_r+0x130>
 80090d4:	9105      	str	r1, [sp, #20]
 80090d6:	e7c3      	b.n	8009060 <_svfiprintf_r+0x130>
 80090d8:	4604      	mov	r4, r0
 80090da:	2301      	movs	r3, #1
 80090dc:	fb0c 2101 	mla	r1, ip, r1, r2
 80090e0:	e7f0      	b.n	80090c4 <_svfiprintf_r+0x194>
 80090e2:	ab03      	add	r3, sp, #12
 80090e4:	9300      	str	r3, [sp, #0]
 80090e6:	462a      	mov	r2, r5
 80090e8:	4638      	mov	r0, r7
 80090ea:	4b10      	ldr	r3, [pc, #64]	; (800912c <_svfiprintf_r+0x1fc>)
 80090ec:	a904      	add	r1, sp, #16
 80090ee:	f7fc f9d9 	bl	80054a4 <_printf_float>
 80090f2:	1c42      	adds	r2, r0, #1
 80090f4:	4606      	mov	r6, r0
 80090f6:	d1d6      	bne.n	80090a6 <_svfiprintf_r+0x176>
 80090f8:	89ab      	ldrh	r3, [r5, #12]
 80090fa:	065b      	lsls	r3, r3, #25
 80090fc:	f53f af2c 	bmi.w	8008f58 <_svfiprintf_r+0x28>
 8009100:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009102:	b01d      	add	sp, #116	; 0x74
 8009104:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009108:	ab03      	add	r3, sp, #12
 800910a:	9300      	str	r3, [sp, #0]
 800910c:	462a      	mov	r2, r5
 800910e:	4638      	mov	r0, r7
 8009110:	4b06      	ldr	r3, [pc, #24]	; (800912c <_svfiprintf_r+0x1fc>)
 8009112:	a904      	add	r1, sp, #16
 8009114:	f7fc fc62 	bl	80059dc <_printf_i>
 8009118:	e7eb      	b.n	80090f2 <_svfiprintf_r+0x1c2>
 800911a:	bf00      	nop
 800911c:	0800a8bc 	.word	0x0800a8bc
 8009120:	0800a8c2 	.word	0x0800a8c2
 8009124:	0800a8c6 	.word	0x0800a8c6
 8009128:	080054a5 	.word	0x080054a5
 800912c:	08008e79 	.word	0x08008e79

08009130 <_sungetc_r>:
 8009130:	b538      	push	{r3, r4, r5, lr}
 8009132:	1c4b      	adds	r3, r1, #1
 8009134:	4614      	mov	r4, r2
 8009136:	d103      	bne.n	8009140 <_sungetc_r+0x10>
 8009138:	f04f 35ff 	mov.w	r5, #4294967295
 800913c:	4628      	mov	r0, r5
 800913e:	bd38      	pop	{r3, r4, r5, pc}
 8009140:	8993      	ldrh	r3, [r2, #12]
 8009142:	b2cd      	uxtb	r5, r1
 8009144:	f023 0320 	bic.w	r3, r3, #32
 8009148:	8193      	strh	r3, [r2, #12]
 800914a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800914c:	6852      	ldr	r2, [r2, #4]
 800914e:	b18b      	cbz	r3, 8009174 <_sungetc_r+0x44>
 8009150:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009152:	4293      	cmp	r3, r2
 8009154:	dd08      	ble.n	8009168 <_sungetc_r+0x38>
 8009156:	6823      	ldr	r3, [r4, #0]
 8009158:	1e5a      	subs	r2, r3, #1
 800915a:	6022      	str	r2, [r4, #0]
 800915c:	f803 5c01 	strb.w	r5, [r3, #-1]
 8009160:	6863      	ldr	r3, [r4, #4]
 8009162:	3301      	adds	r3, #1
 8009164:	6063      	str	r3, [r4, #4]
 8009166:	e7e9      	b.n	800913c <_sungetc_r+0xc>
 8009168:	4621      	mov	r1, r4
 800916a:	f000 fbef 	bl	800994c <__submore>
 800916e:	2800      	cmp	r0, #0
 8009170:	d0f1      	beq.n	8009156 <_sungetc_r+0x26>
 8009172:	e7e1      	b.n	8009138 <_sungetc_r+0x8>
 8009174:	6921      	ldr	r1, [r4, #16]
 8009176:	6823      	ldr	r3, [r4, #0]
 8009178:	b151      	cbz	r1, 8009190 <_sungetc_r+0x60>
 800917a:	4299      	cmp	r1, r3
 800917c:	d208      	bcs.n	8009190 <_sungetc_r+0x60>
 800917e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8009182:	42a9      	cmp	r1, r5
 8009184:	d104      	bne.n	8009190 <_sungetc_r+0x60>
 8009186:	3b01      	subs	r3, #1
 8009188:	3201      	adds	r2, #1
 800918a:	6023      	str	r3, [r4, #0]
 800918c:	6062      	str	r2, [r4, #4]
 800918e:	e7d5      	b.n	800913c <_sungetc_r+0xc>
 8009190:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8009194:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009198:	6363      	str	r3, [r4, #52]	; 0x34
 800919a:	2303      	movs	r3, #3
 800919c:	63a3      	str	r3, [r4, #56]	; 0x38
 800919e:	4623      	mov	r3, r4
 80091a0:	f803 5f46 	strb.w	r5, [r3, #70]!
 80091a4:	6023      	str	r3, [r4, #0]
 80091a6:	2301      	movs	r3, #1
 80091a8:	e7dc      	b.n	8009164 <_sungetc_r+0x34>

080091aa <__ssrefill_r>:
 80091aa:	b510      	push	{r4, lr}
 80091ac:	460c      	mov	r4, r1
 80091ae:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80091b0:	b169      	cbz	r1, 80091ce <__ssrefill_r+0x24>
 80091b2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80091b6:	4299      	cmp	r1, r3
 80091b8:	d001      	beq.n	80091be <__ssrefill_r+0x14>
 80091ba:	f7ff fd81 	bl	8008cc0 <_free_r>
 80091be:	2000      	movs	r0, #0
 80091c0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80091c2:	6360      	str	r0, [r4, #52]	; 0x34
 80091c4:	6063      	str	r3, [r4, #4]
 80091c6:	b113      	cbz	r3, 80091ce <__ssrefill_r+0x24>
 80091c8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80091ca:	6023      	str	r3, [r4, #0]
 80091cc:	bd10      	pop	{r4, pc}
 80091ce:	6923      	ldr	r3, [r4, #16]
 80091d0:	f04f 30ff 	mov.w	r0, #4294967295
 80091d4:	6023      	str	r3, [r4, #0]
 80091d6:	2300      	movs	r3, #0
 80091d8:	6063      	str	r3, [r4, #4]
 80091da:	89a3      	ldrh	r3, [r4, #12]
 80091dc:	f043 0320 	orr.w	r3, r3, #32
 80091e0:	81a3      	strh	r3, [r4, #12]
 80091e2:	e7f3      	b.n	80091cc <__ssrefill_r+0x22>

080091e4 <__ssvfiscanf_r>:
 80091e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80091e8:	460c      	mov	r4, r1
 80091ea:	2100      	movs	r1, #0
 80091ec:	4606      	mov	r6, r0
 80091ee:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 80091f2:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 80091f6:	49a7      	ldr	r1, [pc, #668]	; (8009494 <__ssvfiscanf_r+0x2b0>)
 80091f8:	f10d 0804 	add.w	r8, sp, #4
 80091fc:	91a0      	str	r1, [sp, #640]	; 0x280
 80091fe:	49a6      	ldr	r1, [pc, #664]	; (8009498 <__ssvfiscanf_r+0x2b4>)
 8009200:	4fa6      	ldr	r7, [pc, #664]	; (800949c <__ssvfiscanf_r+0x2b8>)
 8009202:	f8df 929c 	ldr.w	r9, [pc, #668]	; 80094a0 <__ssvfiscanf_r+0x2bc>
 8009206:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800920a:	91a1      	str	r1, [sp, #644]	; 0x284
 800920c:	9300      	str	r3, [sp, #0]
 800920e:	7813      	ldrb	r3, [r2, #0]
 8009210:	2b00      	cmp	r3, #0
 8009212:	f000 815c 	beq.w	80094ce <__ssvfiscanf_r+0x2ea>
 8009216:	5dd9      	ldrb	r1, [r3, r7]
 8009218:	1c55      	adds	r5, r2, #1
 800921a:	f011 0108 	ands.w	r1, r1, #8
 800921e:	d019      	beq.n	8009254 <__ssvfiscanf_r+0x70>
 8009220:	6863      	ldr	r3, [r4, #4]
 8009222:	2b00      	cmp	r3, #0
 8009224:	dd0f      	ble.n	8009246 <__ssvfiscanf_r+0x62>
 8009226:	6823      	ldr	r3, [r4, #0]
 8009228:	781a      	ldrb	r2, [r3, #0]
 800922a:	5cba      	ldrb	r2, [r7, r2]
 800922c:	0712      	lsls	r2, r2, #28
 800922e:	d401      	bmi.n	8009234 <__ssvfiscanf_r+0x50>
 8009230:	462a      	mov	r2, r5
 8009232:	e7ec      	b.n	800920e <__ssvfiscanf_r+0x2a>
 8009234:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8009236:	3301      	adds	r3, #1
 8009238:	3201      	adds	r2, #1
 800923a:	9245      	str	r2, [sp, #276]	; 0x114
 800923c:	6862      	ldr	r2, [r4, #4]
 800923e:	6023      	str	r3, [r4, #0]
 8009240:	3a01      	subs	r2, #1
 8009242:	6062      	str	r2, [r4, #4]
 8009244:	e7ec      	b.n	8009220 <__ssvfiscanf_r+0x3c>
 8009246:	4621      	mov	r1, r4
 8009248:	4630      	mov	r0, r6
 800924a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800924c:	4798      	blx	r3
 800924e:	2800      	cmp	r0, #0
 8009250:	d0e9      	beq.n	8009226 <__ssvfiscanf_r+0x42>
 8009252:	e7ed      	b.n	8009230 <__ssvfiscanf_r+0x4c>
 8009254:	2b25      	cmp	r3, #37	; 0x25
 8009256:	d012      	beq.n	800927e <__ssvfiscanf_r+0x9a>
 8009258:	469a      	mov	sl, r3
 800925a:	6863      	ldr	r3, [r4, #4]
 800925c:	2b00      	cmp	r3, #0
 800925e:	f340 8094 	ble.w	800938a <__ssvfiscanf_r+0x1a6>
 8009262:	6822      	ldr	r2, [r4, #0]
 8009264:	7813      	ldrb	r3, [r2, #0]
 8009266:	4553      	cmp	r3, sl
 8009268:	f040 8131 	bne.w	80094ce <__ssvfiscanf_r+0x2ea>
 800926c:	6863      	ldr	r3, [r4, #4]
 800926e:	3201      	adds	r2, #1
 8009270:	3b01      	subs	r3, #1
 8009272:	6063      	str	r3, [r4, #4]
 8009274:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8009276:	6022      	str	r2, [r4, #0]
 8009278:	3301      	adds	r3, #1
 800927a:	9345      	str	r3, [sp, #276]	; 0x114
 800927c:	e7d8      	b.n	8009230 <__ssvfiscanf_r+0x4c>
 800927e:	9141      	str	r1, [sp, #260]	; 0x104
 8009280:	9143      	str	r1, [sp, #268]	; 0x10c
 8009282:	7853      	ldrb	r3, [r2, #1]
 8009284:	2b2a      	cmp	r3, #42	; 0x2a
 8009286:	bf04      	itt	eq
 8009288:	2310      	moveq	r3, #16
 800928a:	1c95      	addeq	r5, r2, #2
 800928c:	f04f 020a 	mov.w	r2, #10
 8009290:	bf08      	it	eq
 8009292:	9341      	streq	r3, [sp, #260]	; 0x104
 8009294:	46aa      	mov	sl, r5
 8009296:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800929a:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800929e:	2b09      	cmp	r3, #9
 80092a0:	d91d      	bls.n	80092de <__ssvfiscanf_r+0xfa>
 80092a2:	2203      	movs	r2, #3
 80092a4:	487e      	ldr	r0, [pc, #504]	; (80094a0 <__ssvfiscanf_r+0x2bc>)
 80092a6:	f7ff f823 	bl	80082f0 <memchr>
 80092aa:	b140      	cbz	r0, 80092be <__ssvfiscanf_r+0xda>
 80092ac:	2301      	movs	r3, #1
 80092ae:	4655      	mov	r5, sl
 80092b0:	eba0 0009 	sub.w	r0, r0, r9
 80092b4:	fa03 f000 	lsl.w	r0, r3, r0
 80092b8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80092ba:	4318      	orrs	r0, r3
 80092bc:	9041      	str	r0, [sp, #260]	; 0x104
 80092be:	f815 3b01 	ldrb.w	r3, [r5], #1
 80092c2:	2b78      	cmp	r3, #120	; 0x78
 80092c4:	d806      	bhi.n	80092d4 <__ssvfiscanf_r+0xf0>
 80092c6:	2b57      	cmp	r3, #87	; 0x57
 80092c8:	d810      	bhi.n	80092ec <__ssvfiscanf_r+0x108>
 80092ca:	2b25      	cmp	r3, #37	; 0x25
 80092cc:	d0c4      	beq.n	8009258 <__ssvfiscanf_r+0x74>
 80092ce:	d857      	bhi.n	8009380 <__ssvfiscanf_r+0x19c>
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d065      	beq.n	80093a0 <__ssvfiscanf_r+0x1bc>
 80092d4:	2303      	movs	r3, #3
 80092d6:	9347      	str	r3, [sp, #284]	; 0x11c
 80092d8:	230a      	movs	r3, #10
 80092da:	9342      	str	r3, [sp, #264]	; 0x108
 80092dc:	e072      	b.n	80093c4 <__ssvfiscanf_r+0x1e0>
 80092de:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80092e0:	4655      	mov	r5, sl
 80092e2:	fb02 1103 	mla	r1, r2, r3, r1
 80092e6:	3930      	subs	r1, #48	; 0x30
 80092e8:	9143      	str	r1, [sp, #268]	; 0x10c
 80092ea:	e7d3      	b.n	8009294 <__ssvfiscanf_r+0xb0>
 80092ec:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 80092f0:	2a20      	cmp	r2, #32
 80092f2:	d8ef      	bhi.n	80092d4 <__ssvfiscanf_r+0xf0>
 80092f4:	a101      	add	r1, pc, #4	; (adr r1, 80092fc <__ssvfiscanf_r+0x118>)
 80092f6:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80092fa:	bf00      	nop
 80092fc:	080093af 	.word	0x080093af
 8009300:	080092d5 	.word	0x080092d5
 8009304:	080092d5 	.word	0x080092d5
 8009308:	0800940d 	.word	0x0800940d
 800930c:	080092d5 	.word	0x080092d5
 8009310:	080092d5 	.word	0x080092d5
 8009314:	080092d5 	.word	0x080092d5
 8009318:	080092d5 	.word	0x080092d5
 800931c:	080092d5 	.word	0x080092d5
 8009320:	080092d5 	.word	0x080092d5
 8009324:	080092d5 	.word	0x080092d5
 8009328:	08009423 	.word	0x08009423
 800932c:	080093f9 	.word	0x080093f9
 8009330:	08009387 	.word	0x08009387
 8009334:	08009387 	.word	0x08009387
 8009338:	08009387 	.word	0x08009387
 800933c:	080092d5 	.word	0x080092d5
 8009340:	080093fd 	.word	0x080093fd
 8009344:	080092d5 	.word	0x080092d5
 8009348:	080092d5 	.word	0x080092d5
 800934c:	080092d5 	.word	0x080092d5
 8009350:	080092d5 	.word	0x080092d5
 8009354:	08009433 	.word	0x08009433
 8009358:	08009405 	.word	0x08009405
 800935c:	080093a7 	.word	0x080093a7
 8009360:	080092d5 	.word	0x080092d5
 8009364:	080092d5 	.word	0x080092d5
 8009368:	0800942f 	.word	0x0800942f
 800936c:	080092d5 	.word	0x080092d5
 8009370:	080093f9 	.word	0x080093f9
 8009374:	080092d5 	.word	0x080092d5
 8009378:	080092d5 	.word	0x080092d5
 800937c:	080093af 	.word	0x080093af
 8009380:	3b45      	subs	r3, #69	; 0x45
 8009382:	2b02      	cmp	r3, #2
 8009384:	d8a6      	bhi.n	80092d4 <__ssvfiscanf_r+0xf0>
 8009386:	2305      	movs	r3, #5
 8009388:	e01b      	b.n	80093c2 <__ssvfiscanf_r+0x1de>
 800938a:	4621      	mov	r1, r4
 800938c:	4630      	mov	r0, r6
 800938e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009390:	4798      	blx	r3
 8009392:	2800      	cmp	r0, #0
 8009394:	f43f af65 	beq.w	8009262 <__ssvfiscanf_r+0x7e>
 8009398:	9844      	ldr	r0, [sp, #272]	; 0x110
 800939a:	2800      	cmp	r0, #0
 800939c:	f040 808d 	bne.w	80094ba <__ssvfiscanf_r+0x2d6>
 80093a0:	f04f 30ff 	mov.w	r0, #4294967295
 80093a4:	e08f      	b.n	80094c6 <__ssvfiscanf_r+0x2e2>
 80093a6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80093a8:	f042 0220 	orr.w	r2, r2, #32
 80093ac:	9241      	str	r2, [sp, #260]	; 0x104
 80093ae:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80093b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80093b4:	9241      	str	r2, [sp, #260]	; 0x104
 80093b6:	2210      	movs	r2, #16
 80093b8:	2b6f      	cmp	r3, #111	; 0x6f
 80093ba:	bf34      	ite	cc
 80093bc:	2303      	movcc	r3, #3
 80093be:	2304      	movcs	r3, #4
 80093c0:	9242      	str	r2, [sp, #264]	; 0x108
 80093c2:	9347      	str	r3, [sp, #284]	; 0x11c
 80093c4:	6863      	ldr	r3, [r4, #4]
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	dd42      	ble.n	8009450 <__ssvfiscanf_r+0x26c>
 80093ca:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80093cc:	0659      	lsls	r1, r3, #25
 80093ce:	d404      	bmi.n	80093da <__ssvfiscanf_r+0x1f6>
 80093d0:	6823      	ldr	r3, [r4, #0]
 80093d2:	781a      	ldrb	r2, [r3, #0]
 80093d4:	5cba      	ldrb	r2, [r7, r2]
 80093d6:	0712      	lsls	r2, r2, #28
 80093d8:	d441      	bmi.n	800945e <__ssvfiscanf_r+0x27a>
 80093da:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80093dc:	2b02      	cmp	r3, #2
 80093de:	dc50      	bgt.n	8009482 <__ssvfiscanf_r+0x29e>
 80093e0:	466b      	mov	r3, sp
 80093e2:	4622      	mov	r2, r4
 80093e4:	4630      	mov	r0, r6
 80093e6:	a941      	add	r1, sp, #260	; 0x104
 80093e8:	f000 f876 	bl	80094d8 <_scanf_chars>
 80093ec:	2801      	cmp	r0, #1
 80093ee:	d06e      	beq.n	80094ce <__ssvfiscanf_r+0x2ea>
 80093f0:	2802      	cmp	r0, #2
 80093f2:	f47f af1d 	bne.w	8009230 <__ssvfiscanf_r+0x4c>
 80093f6:	e7cf      	b.n	8009398 <__ssvfiscanf_r+0x1b4>
 80093f8:	220a      	movs	r2, #10
 80093fa:	e7dd      	b.n	80093b8 <__ssvfiscanf_r+0x1d4>
 80093fc:	2300      	movs	r3, #0
 80093fe:	9342      	str	r3, [sp, #264]	; 0x108
 8009400:	2303      	movs	r3, #3
 8009402:	e7de      	b.n	80093c2 <__ssvfiscanf_r+0x1de>
 8009404:	2308      	movs	r3, #8
 8009406:	9342      	str	r3, [sp, #264]	; 0x108
 8009408:	2304      	movs	r3, #4
 800940a:	e7da      	b.n	80093c2 <__ssvfiscanf_r+0x1de>
 800940c:	4629      	mov	r1, r5
 800940e:	4640      	mov	r0, r8
 8009410:	f000 f9dc 	bl	80097cc <__sccl>
 8009414:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8009416:	4605      	mov	r5, r0
 8009418:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800941c:	9341      	str	r3, [sp, #260]	; 0x104
 800941e:	2301      	movs	r3, #1
 8009420:	e7cf      	b.n	80093c2 <__ssvfiscanf_r+0x1de>
 8009422:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8009424:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009428:	9341      	str	r3, [sp, #260]	; 0x104
 800942a:	2300      	movs	r3, #0
 800942c:	e7c9      	b.n	80093c2 <__ssvfiscanf_r+0x1de>
 800942e:	2302      	movs	r3, #2
 8009430:	e7c7      	b.n	80093c2 <__ssvfiscanf_r+0x1de>
 8009432:	9841      	ldr	r0, [sp, #260]	; 0x104
 8009434:	06c3      	lsls	r3, r0, #27
 8009436:	f53f aefb 	bmi.w	8009230 <__ssvfiscanf_r+0x4c>
 800943a:	9b00      	ldr	r3, [sp, #0]
 800943c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800943e:	1d19      	adds	r1, r3, #4
 8009440:	9100      	str	r1, [sp, #0]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	f010 0f01 	tst.w	r0, #1
 8009448:	bf14      	ite	ne
 800944a:	801a      	strhne	r2, [r3, #0]
 800944c:	601a      	streq	r2, [r3, #0]
 800944e:	e6ef      	b.n	8009230 <__ssvfiscanf_r+0x4c>
 8009450:	4621      	mov	r1, r4
 8009452:	4630      	mov	r0, r6
 8009454:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009456:	4798      	blx	r3
 8009458:	2800      	cmp	r0, #0
 800945a:	d0b6      	beq.n	80093ca <__ssvfiscanf_r+0x1e6>
 800945c:	e79c      	b.n	8009398 <__ssvfiscanf_r+0x1b4>
 800945e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8009460:	3201      	adds	r2, #1
 8009462:	9245      	str	r2, [sp, #276]	; 0x114
 8009464:	6862      	ldr	r2, [r4, #4]
 8009466:	3a01      	subs	r2, #1
 8009468:	2a00      	cmp	r2, #0
 800946a:	6062      	str	r2, [r4, #4]
 800946c:	dd02      	ble.n	8009474 <__ssvfiscanf_r+0x290>
 800946e:	3301      	adds	r3, #1
 8009470:	6023      	str	r3, [r4, #0]
 8009472:	e7ad      	b.n	80093d0 <__ssvfiscanf_r+0x1ec>
 8009474:	4621      	mov	r1, r4
 8009476:	4630      	mov	r0, r6
 8009478:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800947a:	4798      	blx	r3
 800947c:	2800      	cmp	r0, #0
 800947e:	d0a7      	beq.n	80093d0 <__ssvfiscanf_r+0x1ec>
 8009480:	e78a      	b.n	8009398 <__ssvfiscanf_r+0x1b4>
 8009482:	2b04      	cmp	r3, #4
 8009484:	dc0e      	bgt.n	80094a4 <__ssvfiscanf_r+0x2c0>
 8009486:	466b      	mov	r3, sp
 8009488:	4622      	mov	r2, r4
 800948a:	4630      	mov	r0, r6
 800948c:	a941      	add	r1, sp, #260	; 0x104
 800948e:	f000 f87d 	bl	800958c <_scanf_i>
 8009492:	e7ab      	b.n	80093ec <__ssvfiscanf_r+0x208>
 8009494:	08009131 	.word	0x08009131
 8009498:	080091ab 	.word	0x080091ab
 800949c:	0800a559 	.word	0x0800a559
 80094a0:	0800a8c2 	.word	0x0800a8c2
 80094a4:	4b0b      	ldr	r3, [pc, #44]	; (80094d4 <__ssvfiscanf_r+0x2f0>)
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	f43f aec2 	beq.w	8009230 <__ssvfiscanf_r+0x4c>
 80094ac:	466b      	mov	r3, sp
 80094ae:	4622      	mov	r2, r4
 80094b0:	4630      	mov	r0, r6
 80094b2:	a941      	add	r1, sp, #260	; 0x104
 80094b4:	f7fc fbb8 	bl	8005c28 <_scanf_float>
 80094b8:	e798      	b.n	80093ec <__ssvfiscanf_r+0x208>
 80094ba:	89a3      	ldrh	r3, [r4, #12]
 80094bc:	f013 0f40 	tst.w	r3, #64	; 0x40
 80094c0:	bf18      	it	ne
 80094c2:	f04f 30ff 	movne.w	r0, #4294967295
 80094c6:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 80094ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80094ce:	9844      	ldr	r0, [sp, #272]	; 0x110
 80094d0:	e7f9      	b.n	80094c6 <__ssvfiscanf_r+0x2e2>
 80094d2:	bf00      	nop
 80094d4:	08005c29 	.word	0x08005c29

080094d8 <_scanf_chars>:
 80094d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80094dc:	4615      	mov	r5, r2
 80094de:	688a      	ldr	r2, [r1, #8]
 80094e0:	4680      	mov	r8, r0
 80094e2:	460c      	mov	r4, r1
 80094e4:	b932      	cbnz	r2, 80094f4 <_scanf_chars+0x1c>
 80094e6:	698a      	ldr	r2, [r1, #24]
 80094e8:	2a00      	cmp	r2, #0
 80094ea:	bf0c      	ite	eq
 80094ec:	2201      	moveq	r2, #1
 80094ee:	f04f 32ff 	movne.w	r2, #4294967295
 80094f2:	608a      	str	r2, [r1, #8]
 80094f4:	2700      	movs	r7, #0
 80094f6:	6822      	ldr	r2, [r4, #0]
 80094f8:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8009588 <_scanf_chars+0xb0>
 80094fc:	06d1      	lsls	r1, r2, #27
 80094fe:	bf5f      	itttt	pl
 8009500:	681a      	ldrpl	r2, [r3, #0]
 8009502:	1d11      	addpl	r1, r2, #4
 8009504:	6019      	strpl	r1, [r3, #0]
 8009506:	6816      	ldrpl	r6, [r2, #0]
 8009508:	69a0      	ldr	r0, [r4, #24]
 800950a:	b188      	cbz	r0, 8009530 <_scanf_chars+0x58>
 800950c:	2801      	cmp	r0, #1
 800950e:	d107      	bne.n	8009520 <_scanf_chars+0x48>
 8009510:	682b      	ldr	r3, [r5, #0]
 8009512:	781a      	ldrb	r2, [r3, #0]
 8009514:	6963      	ldr	r3, [r4, #20]
 8009516:	5c9b      	ldrb	r3, [r3, r2]
 8009518:	b953      	cbnz	r3, 8009530 <_scanf_chars+0x58>
 800951a:	2f00      	cmp	r7, #0
 800951c:	d031      	beq.n	8009582 <_scanf_chars+0xaa>
 800951e:	e022      	b.n	8009566 <_scanf_chars+0x8e>
 8009520:	2802      	cmp	r0, #2
 8009522:	d120      	bne.n	8009566 <_scanf_chars+0x8e>
 8009524:	682b      	ldr	r3, [r5, #0]
 8009526:	781b      	ldrb	r3, [r3, #0]
 8009528:	f813 3009 	ldrb.w	r3, [r3, r9]
 800952c:	071b      	lsls	r3, r3, #28
 800952e:	d41a      	bmi.n	8009566 <_scanf_chars+0x8e>
 8009530:	6823      	ldr	r3, [r4, #0]
 8009532:	3701      	adds	r7, #1
 8009534:	06da      	lsls	r2, r3, #27
 8009536:	bf5e      	ittt	pl
 8009538:	682b      	ldrpl	r3, [r5, #0]
 800953a:	781b      	ldrbpl	r3, [r3, #0]
 800953c:	f806 3b01 	strbpl.w	r3, [r6], #1
 8009540:	682a      	ldr	r2, [r5, #0]
 8009542:	686b      	ldr	r3, [r5, #4]
 8009544:	3201      	adds	r2, #1
 8009546:	602a      	str	r2, [r5, #0]
 8009548:	68a2      	ldr	r2, [r4, #8]
 800954a:	3b01      	subs	r3, #1
 800954c:	3a01      	subs	r2, #1
 800954e:	606b      	str	r3, [r5, #4]
 8009550:	60a2      	str	r2, [r4, #8]
 8009552:	b142      	cbz	r2, 8009566 <_scanf_chars+0x8e>
 8009554:	2b00      	cmp	r3, #0
 8009556:	dcd7      	bgt.n	8009508 <_scanf_chars+0x30>
 8009558:	4629      	mov	r1, r5
 800955a:	4640      	mov	r0, r8
 800955c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009560:	4798      	blx	r3
 8009562:	2800      	cmp	r0, #0
 8009564:	d0d0      	beq.n	8009508 <_scanf_chars+0x30>
 8009566:	6823      	ldr	r3, [r4, #0]
 8009568:	f013 0310 	ands.w	r3, r3, #16
 800956c:	d105      	bne.n	800957a <_scanf_chars+0xa2>
 800956e:	68e2      	ldr	r2, [r4, #12]
 8009570:	3201      	adds	r2, #1
 8009572:	60e2      	str	r2, [r4, #12]
 8009574:	69a2      	ldr	r2, [r4, #24]
 8009576:	b102      	cbz	r2, 800957a <_scanf_chars+0xa2>
 8009578:	7033      	strb	r3, [r6, #0]
 800957a:	2000      	movs	r0, #0
 800957c:	6923      	ldr	r3, [r4, #16]
 800957e:	443b      	add	r3, r7
 8009580:	6123      	str	r3, [r4, #16]
 8009582:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009586:	bf00      	nop
 8009588:	0800a559 	.word	0x0800a559

0800958c <_scanf_i>:
 800958c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009590:	460c      	mov	r4, r1
 8009592:	4698      	mov	r8, r3
 8009594:	4b75      	ldr	r3, [pc, #468]	; (800976c <_scanf_i+0x1e0>)
 8009596:	b087      	sub	sp, #28
 8009598:	4682      	mov	sl, r0
 800959a:	4616      	mov	r6, r2
 800959c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80095a0:	ab03      	add	r3, sp, #12
 80095a2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80095a6:	4b72      	ldr	r3, [pc, #456]	; (8009770 <_scanf_i+0x1e4>)
 80095a8:	69a1      	ldr	r1, [r4, #24]
 80095aa:	4a72      	ldr	r2, [pc, #456]	; (8009774 <_scanf_i+0x1e8>)
 80095ac:	4627      	mov	r7, r4
 80095ae:	2903      	cmp	r1, #3
 80095b0:	bf18      	it	ne
 80095b2:	461a      	movne	r2, r3
 80095b4:	68a3      	ldr	r3, [r4, #8]
 80095b6:	9201      	str	r2, [sp, #4]
 80095b8:	1e5a      	subs	r2, r3, #1
 80095ba:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80095be:	bf81      	itttt	hi
 80095c0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80095c4:	eb03 0905 	addhi.w	r9, r3, r5
 80095c8:	f240 135d 	movwhi	r3, #349	; 0x15d
 80095cc:	60a3      	strhi	r3, [r4, #8]
 80095ce:	f857 3b1c 	ldr.w	r3, [r7], #28
 80095d2:	bf98      	it	ls
 80095d4:	f04f 0900 	movls.w	r9, #0
 80095d8:	463d      	mov	r5, r7
 80095da:	f04f 0b00 	mov.w	fp, #0
 80095de:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80095e2:	6023      	str	r3, [r4, #0]
 80095e4:	6831      	ldr	r1, [r6, #0]
 80095e6:	ab03      	add	r3, sp, #12
 80095e8:	2202      	movs	r2, #2
 80095ea:	7809      	ldrb	r1, [r1, #0]
 80095ec:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80095f0:	f7fe fe7e 	bl	80082f0 <memchr>
 80095f4:	b328      	cbz	r0, 8009642 <_scanf_i+0xb6>
 80095f6:	f1bb 0f01 	cmp.w	fp, #1
 80095fa:	d159      	bne.n	80096b0 <_scanf_i+0x124>
 80095fc:	6862      	ldr	r2, [r4, #4]
 80095fe:	b92a      	cbnz	r2, 800960c <_scanf_i+0x80>
 8009600:	2308      	movs	r3, #8
 8009602:	6822      	ldr	r2, [r4, #0]
 8009604:	6063      	str	r3, [r4, #4]
 8009606:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800960a:	6022      	str	r2, [r4, #0]
 800960c:	6822      	ldr	r2, [r4, #0]
 800960e:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8009612:	6022      	str	r2, [r4, #0]
 8009614:	68a2      	ldr	r2, [r4, #8]
 8009616:	1e51      	subs	r1, r2, #1
 8009618:	60a1      	str	r1, [r4, #8]
 800961a:	b192      	cbz	r2, 8009642 <_scanf_i+0xb6>
 800961c:	6832      	ldr	r2, [r6, #0]
 800961e:	1c51      	adds	r1, r2, #1
 8009620:	6031      	str	r1, [r6, #0]
 8009622:	7812      	ldrb	r2, [r2, #0]
 8009624:	f805 2b01 	strb.w	r2, [r5], #1
 8009628:	6872      	ldr	r2, [r6, #4]
 800962a:	3a01      	subs	r2, #1
 800962c:	2a00      	cmp	r2, #0
 800962e:	6072      	str	r2, [r6, #4]
 8009630:	dc07      	bgt.n	8009642 <_scanf_i+0xb6>
 8009632:	4631      	mov	r1, r6
 8009634:	4650      	mov	r0, sl
 8009636:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800963a:	4790      	blx	r2
 800963c:	2800      	cmp	r0, #0
 800963e:	f040 8085 	bne.w	800974c <_scanf_i+0x1c0>
 8009642:	f10b 0b01 	add.w	fp, fp, #1
 8009646:	f1bb 0f03 	cmp.w	fp, #3
 800964a:	d1cb      	bne.n	80095e4 <_scanf_i+0x58>
 800964c:	6863      	ldr	r3, [r4, #4]
 800964e:	b90b      	cbnz	r3, 8009654 <_scanf_i+0xc8>
 8009650:	230a      	movs	r3, #10
 8009652:	6063      	str	r3, [r4, #4]
 8009654:	6863      	ldr	r3, [r4, #4]
 8009656:	4948      	ldr	r1, [pc, #288]	; (8009778 <_scanf_i+0x1ec>)
 8009658:	6960      	ldr	r0, [r4, #20]
 800965a:	1ac9      	subs	r1, r1, r3
 800965c:	f000 f8b6 	bl	80097cc <__sccl>
 8009660:	f04f 0b00 	mov.w	fp, #0
 8009664:	68a3      	ldr	r3, [r4, #8]
 8009666:	6822      	ldr	r2, [r4, #0]
 8009668:	2b00      	cmp	r3, #0
 800966a:	d03d      	beq.n	80096e8 <_scanf_i+0x15c>
 800966c:	6831      	ldr	r1, [r6, #0]
 800966e:	6960      	ldr	r0, [r4, #20]
 8009670:	f891 c000 	ldrb.w	ip, [r1]
 8009674:	f810 000c 	ldrb.w	r0, [r0, ip]
 8009678:	2800      	cmp	r0, #0
 800967a:	d035      	beq.n	80096e8 <_scanf_i+0x15c>
 800967c:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8009680:	d124      	bne.n	80096cc <_scanf_i+0x140>
 8009682:	0510      	lsls	r0, r2, #20
 8009684:	d522      	bpl.n	80096cc <_scanf_i+0x140>
 8009686:	f10b 0b01 	add.w	fp, fp, #1
 800968a:	f1b9 0f00 	cmp.w	r9, #0
 800968e:	d003      	beq.n	8009698 <_scanf_i+0x10c>
 8009690:	3301      	adds	r3, #1
 8009692:	f109 39ff 	add.w	r9, r9, #4294967295
 8009696:	60a3      	str	r3, [r4, #8]
 8009698:	6873      	ldr	r3, [r6, #4]
 800969a:	3b01      	subs	r3, #1
 800969c:	2b00      	cmp	r3, #0
 800969e:	6073      	str	r3, [r6, #4]
 80096a0:	dd1b      	ble.n	80096da <_scanf_i+0x14e>
 80096a2:	6833      	ldr	r3, [r6, #0]
 80096a4:	3301      	adds	r3, #1
 80096a6:	6033      	str	r3, [r6, #0]
 80096a8:	68a3      	ldr	r3, [r4, #8]
 80096aa:	3b01      	subs	r3, #1
 80096ac:	60a3      	str	r3, [r4, #8]
 80096ae:	e7d9      	b.n	8009664 <_scanf_i+0xd8>
 80096b0:	f1bb 0f02 	cmp.w	fp, #2
 80096b4:	d1ae      	bne.n	8009614 <_scanf_i+0x88>
 80096b6:	6822      	ldr	r2, [r4, #0]
 80096b8:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80096bc:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80096c0:	d1bf      	bne.n	8009642 <_scanf_i+0xb6>
 80096c2:	2310      	movs	r3, #16
 80096c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80096c8:	6063      	str	r3, [r4, #4]
 80096ca:	e7a2      	b.n	8009612 <_scanf_i+0x86>
 80096cc:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80096d0:	6022      	str	r2, [r4, #0]
 80096d2:	780b      	ldrb	r3, [r1, #0]
 80096d4:	f805 3b01 	strb.w	r3, [r5], #1
 80096d8:	e7de      	b.n	8009698 <_scanf_i+0x10c>
 80096da:	4631      	mov	r1, r6
 80096dc:	4650      	mov	r0, sl
 80096de:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80096e2:	4798      	blx	r3
 80096e4:	2800      	cmp	r0, #0
 80096e6:	d0df      	beq.n	80096a8 <_scanf_i+0x11c>
 80096e8:	6823      	ldr	r3, [r4, #0]
 80096ea:	05db      	lsls	r3, r3, #23
 80096ec:	d50d      	bpl.n	800970a <_scanf_i+0x17e>
 80096ee:	42bd      	cmp	r5, r7
 80096f0:	d909      	bls.n	8009706 <_scanf_i+0x17a>
 80096f2:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80096f6:	4632      	mov	r2, r6
 80096f8:	4650      	mov	r0, sl
 80096fa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80096fe:	f105 39ff 	add.w	r9, r5, #4294967295
 8009702:	4798      	blx	r3
 8009704:	464d      	mov	r5, r9
 8009706:	42bd      	cmp	r5, r7
 8009708:	d02d      	beq.n	8009766 <_scanf_i+0x1da>
 800970a:	6822      	ldr	r2, [r4, #0]
 800970c:	f012 0210 	ands.w	r2, r2, #16
 8009710:	d113      	bne.n	800973a <_scanf_i+0x1ae>
 8009712:	702a      	strb	r2, [r5, #0]
 8009714:	4639      	mov	r1, r7
 8009716:	6863      	ldr	r3, [r4, #4]
 8009718:	4650      	mov	r0, sl
 800971a:	9e01      	ldr	r6, [sp, #4]
 800971c:	47b0      	blx	r6
 800971e:	6821      	ldr	r1, [r4, #0]
 8009720:	f8d8 3000 	ldr.w	r3, [r8]
 8009724:	f011 0f20 	tst.w	r1, #32
 8009728:	d013      	beq.n	8009752 <_scanf_i+0x1c6>
 800972a:	1d1a      	adds	r2, r3, #4
 800972c:	f8c8 2000 	str.w	r2, [r8]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	6018      	str	r0, [r3, #0]
 8009734:	68e3      	ldr	r3, [r4, #12]
 8009736:	3301      	adds	r3, #1
 8009738:	60e3      	str	r3, [r4, #12]
 800973a:	2000      	movs	r0, #0
 800973c:	1bed      	subs	r5, r5, r7
 800973e:	44ab      	add	fp, r5
 8009740:	6925      	ldr	r5, [r4, #16]
 8009742:	445d      	add	r5, fp
 8009744:	6125      	str	r5, [r4, #16]
 8009746:	b007      	add	sp, #28
 8009748:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800974c:	f04f 0b00 	mov.w	fp, #0
 8009750:	e7ca      	b.n	80096e8 <_scanf_i+0x15c>
 8009752:	1d1a      	adds	r2, r3, #4
 8009754:	f8c8 2000 	str.w	r2, [r8]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	f011 0f01 	tst.w	r1, #1
 800975e:	bf14      	ite	ne
 8009760:	8018      	strhne	r0, [r3, #0]
 8009762:	6018      	streq	r0, [r3, #0]
 8009764:	e7e6      	b.n	8009734 <_scanf_i+0x1a8>
 8009766:	2001      	movs	r0, #1
 8009768:	e7ed      	b.n	8009746 <_scanf_i+0x1ba>
 800976a:	bf00      	nop
 800976c:	0800a490 	.word	0x0800a490
 8009770:	08009949 	.word	0x08009949
 8009774:	08006e85 	.word	0x08006e85
 8009778:	0800a8e6 	.word	0x0800a8e6

0800977c <_read_r>:
 800977c:	b538      	push	{r3, r4, r5, lr}
 800977e:	4604      	mov	r4, r0
 8009780:	4608      	mov	r0, r1
 8009782:	4611      	mov	r1, r2
 8009784:	2200      	movs	r2, #0
 8009786:	4d05      	ldr	r5, [pc, #20]	; (800979c <_read_r+0x20>)
 8009788:	602a      	str	r2, [r5, #0]
 800978a:	461a      	mov	r2, r3
 800978c:	f7f8 f943 	bl	8001a16 <_read>
 8009790:	1c43      	adds	r3, r0, #1
 8009792:	d102      	bne.n	800979a <_read_r+0x1e>
 8009794:	682b      	ldr	r3, [r5, #0]
 8009796:	b103      	cbz	r3, 800979a <_read_r+0x1e>
 8009798:	6023      	str	r3, [r4, #0]
 800979a:	bd38      	pop	{r3, r4, r5, pc}
 800979c:	20000498 	.word	0x20000498

080097a0 <nan>:
 80097a0:	2000      	movs	r0, #0
 80097a2:	4901      	ldr	r1, [pc, #4]	; (80097a8 <nan+0x8>)
 80097a4:	4770      	bx	lr
 80097a6:	bf00      	nop
 80097a8:	7ff80000 	.word	0x7ff80000

080097ac <_sbrk_r>:
 80097ac:	b538      	push	{r3, r4, r5, lr}
 80097ae:	2300      	movs	r3, #0
 80097b0:	4d05      	ldr	r5, [pc, #20]	; (80097c8 <_sbrk_r+0x1c>)
 80097b2:	4604      	mov	r4, r0
 80097b4:	4608      	mov	r0, r1
 80097b6:	602b      	str	r3, [r5, #0]
 80097b8:	f7f8 f996 	bl	8001ae8 <_sbrk>
 80097bc:	1c43      	adds	r3, r0, #1
 80097be:	d102      	bne.n	80097c6 <_sbrk_r+0x1a>
 80097c0:	682b      	ldr	r3, [r5, #0]
 80097c2:	b103      	cbz	r3, 80097c6 <_sbrk_r+0x1a>
 80097c4:	6023      	str	r3, [r4, #0]
 80097c6:	bd38      	pop	{r3, r4, r5, pc}
 80097c8:	20000498 	.word	0x20000498

080097cc <__sccl>:
 80097cc:	b570      	push	{r4, r5, r6, lr}
 80097ce:	780b      	ldrb	r3, [r1, #0]
 80097d0:	4604      	mov	r4, r0
 80097d2:	2b5e      	cmp	r3, #94	; 0x5e
 80097d4:	bf13      	iteet	ne
 80097d6:	2200      	movne	r2, #0
 80097d8:	2201      	moveq	r2, #1
 80097da:	784b      	ldrbeq	r3, [r1, #1]
 80097dc:	1c48      	addne	r0, r1, #1
 80097de:	bf08      	it	eq
 80097e0:	1c88      	addeq	r0, r1, #2
 80097e2:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 80097e6:	1e61      	subs	r1, r4, #1
 80097e8:	f801 2f01 	strb.w	r2, [r1, #1]!
 80097ec:	42a9      	cmp	r1, r5
 80097ee:	d1fb      	bne.n	80097e8 <__sccl+0x1c>
 80097f0:	b90b      	cbnz	r3, 80097f6 <__sccl+0x2a>
 80097f2:	3801      	subs	r0, #1
 80097f4:	bd70      	pop	{r4, r5, r6, pc}
 80097f6:	f082 0201 	eor.w	r2, r2, #1
 80097fa:	4605      	mov	r5, r0
 80097fc:	54e2      	strb	r2, [r4, r3]
 80097fe:	4628      	mov	r0, r5
 8009800:	f810 1b01 	ldrb.w	r1, [r0], #1
 8009804:	292d      	cmp	r1, #45	; 0x2d
 8009806:	d006      	beq.n	8009816 <__sccl+0x4a>
 8009808:	295d      	cmp	r1, #93	; 0x5d
 800980a:	d0f3      	beq.n	80097f4 <__sccl+0x28>
 800980c:	b909      	cbnz	r1, 8009812 <__sccl+0x46>
 800980e:	4628      	mov	r0, r5
 8009810:	e7f0      	b.n	80097f4 <__sccl+0x28>
 8009812:	460b      	mov	r3, r1
 8009814:	e7f1      	b.n	80097fa <__sccl+0x2e>
 8009816:	786e      	ldrb	r6, [r5, #1]
 8009818:	2e5d      	cmp	r6, #93	; 0x5d
 800981a:	d0fa      	beq.n	8009812 <__sccl+0x46>
 800981c:	42b3      	cmp	r3, r6
 800981e:	dcf8      	bgt.n	8009812 <__sccl+0x46>
 8009820:	4619      	mov	r1, r3
 8009822:	3502      	adds	r5, #2
 8009824:	3101      	adds	r1, #1
 8009826:	428e      	cmp	r6, r1
 8009828:	5462      	strb	r2, [r4, r1]
 800982a:	dcfb      	bgt.n	8009824 <__sccl+0x58>
 800982c:	1af1      	subs	r1, r6, r3
 800982e:	3901      	subs	r1, #1
 8009830:	42b3      	cmp	r3, r6
 8009832:	bfa8      	it	ge
 8009834:	2100      	movge	r1, #0
 8009836:	1c58      	adds	r0, r3, #1
 8009838:	1843      	adds	r3, r0, r1
 800983a:	e7e0      	b.n	80097fe <__sccl+0x32>

0800983c <strncmp>:
 800983c:	4603      	mov	r3, r0
 800983e:	b510      	push	{r4, lr}
 8009840:	b172      	cbz	r2, 8009860 <strncmp+0x24>
 8009842:	3901      	subs	r1, #1
 8009844:	1884      	adds	r4, r0, r2
 8009846:	f813 0b01 	ldrb.w	r0, [r3], #1
 800984a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800984e:	4290      	cmp	r0, r2
 8009850:	d101      	bne.n	8009856 <strncmp+0x1a>
 8009852:	42a3      	cmp	r3, r4
 8009854:	d101      	bne.n	800985a <strncmp+0x1e>
 8009856:	1a80      	subs	r0, r0, r2
 8009858:	bd10      	pop	{r4, pc}
 800985a:	2800      	cmp	r0, #0
 800985c:	d1f3      	bne.n	8009846 <strncmp+0xa>
 800985e:	e7fa      	b.n	8009856 <strncmp+0x1a>
 8009860:	4610      	mov	r0, r2
 8009862:	e7f9      	b.n	8009858 <strncmp+0x1c>

08009864 <_strtoul_l.constprop.0>:
 8009864:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009868:	4686      	mov	lr, r0
 800986a:	460d      	mov	r5, r1
 800986c:	4f35      	ldr	r7, [pc, #212]	; (8009944 <_strtoul_l.constprop.0+0xe0>)
 800986e:	4628      	mov	r0, r5
 8009870:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009874:	5de6      	ldrb	r6, [r4, r7]
 8009876:	f016 0608 	ands.w	r6, r6, #8
 800987a:	d1f8      	bne.n	800986e <_strtoul_l.constprop.0+0xa>
 800987c:	2c2d      	cmp	r4, #45	; 0x2d
 800987e:	d12f      	bne.n	80098e0 <_strtoul_l.constprop.0+0x7c>
 8009880:	2601      	movs	r6, #1
 8009882:	782c      	ldrb	r4, [r5, #0]
 8009884:	1c85      	adds	r5, r0, #2
 8009886:	2b00      	cmp	r3, #0
 8009888:	d057      	beq.n	800993a <_strtoul_l.constprop.0+0xd6>
 800988a:	2b10      	cmp	r3, #16
 800988c:	d109      	bne.n	80098a2 <_strtoul_l.constprop.0+0x3e>
 800988e:	2c30      	cmp	r4, #48	; 0x30
 8009890:	d107      	bne.n	80098a2 <_strtoul_l.constprop.0+0x3e>
 8009892:	7828      	ldrb	r0, [r5, #0]
 8009894:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8009898:	2858      	cmp	r0, #88	; 0x58
 800989a:	d149      	bne.n	8009930 <_strtoul_l.constprop.0+0xcc>
 800989c:	2310      	movs	r3, #16
 800989e:	786c      	ldrb	r4, [r5, #1]
 80098a0:	3502      	adds	r5, #2
 80098a2:	f04f 38ff 	mov.w	r8, #4294967295
 80098a6:	fbb8 f8f3 	udiv	r8, r8, r3
 80098aa:	2700      	movs	r7, #0
 80098ac:	fb03 f908 	mul.w	r9, r3, r8
 80098b0:	4638      	mov	r0, r7
 80098b2:	ea6f 0909 	mvn.w	r9, r9
 80098b6:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80098ba:	f1bc 0f09 	cmp.w	ip, #9
 80098be:	d814      	bhi.n	80098ea <_strtoul_l.constprop.0+0x86>
 80098c0:	4664      	mov	r4, ip
 80098c2:	42a3      	cmp	r3, r4
 80098c4:	dd22      	ble.n	800990c <_strtoul_l.constprop.0+0xa8>
 80098c6:	2f00      	cmp	r7, #0
 80098c8:	db1d      	blt.n	8009906 <_strtoul_l.constprop.0+0xa2>
 80098ca:	4580      	cmp	r8, r0
 80098cc:	d31b      	bcc.n	8009906 <_strtoul_l.constprop.0+0xa2>
 80098ce:	d101      	bne.n	80098d4 <_strtoul_l.constprop.0+0x70>
 80098d0:	45a1      	cmp	r9, r4
 80098d2:	db18      	blt.n	8009906 <_strtoul_l.constprop.0+0xa2>
 80098d4:	2701      	movs	r7, #1
 80098d6:	fb00 4003 	mla	r0, r0, r3, r4
 80098da:	f815 4b01 	ldrb.w	r4, [r5], #1
 80098de:	e7ea      	b.n	80098b6 <_strtoul_l.constprop.0+0x52>
 80098e0:	2c2b      	cmp	r4, #43	; 0x2b
 80098e2:	bf04      	itt	eq
 80098e4:	782c      	ldrbeq	r4, [r5, #0]
 80098e6:	1c85      	addeq	r5, r0, #2
 80098e8:	e7cd      	b.n	8009886 <_strtoul_l.constprop.0+0x22>
 80098ea:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80098ee:	f1bc 0f19 	cmp.w	ip, #25
 80098f2:	d801      	bhi.n	80098f8 <_strtoul_l.constprop.0+0x94>
 80098f4:	3c37      	subs	r4, #55	; 0x37
 80098f6:	e7e4      	b.n	80098c2 <_strtoul_l.constprop.0+0x5e>
 80098f8:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80098fc:	f1bc 0f19 	cmp.w	ip, #25
 8009900:	d804      	bhi.n	800990c <_strtoul_l.constprop.0+0xa8>
 8009902:	3c57      	subs	r4, #87	; 0x57
 8009904:	e7dd      	b.n	80098c2 <_strtoul_l.constprop.0+0x5e>
 8009906:	f04f 37ff 	mov.w	r7, #4294967295
 800990a:	e7e6      	b.n	80098da <_strtoul_l.constprop.0+0x76>
 800990c:	2f00      	cmp	r7, #0
 800990e:	da07      	bge.n	8009920 <_strtoul_l.constprop.0+0xbc>
 8009910:	2322      	movs	r3, #34	; 0x22
 8009912:	f04f 30ff 	mov.w	r0, #4294967295
 8009916:	f8ce 3000 	str.w	r3, [lr]
 800991a:	b932      	cbnz	r2, 800992a <_strtoul_l.constprop.0+0xc6>
 800991c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009920:	b106      	cbz	r6, 8009924 <_strtoul_l.constprop.0+0xc0>
 8009922:	4240      	negs	r0, r0
 8009924:	2a00      	cmp	r2, #0
 8009926:	d0f9      	beq.n	800991c <_strtoul_l.constprop.0+0xb8>
 8009928:	b107      	cbz	r7, 800992c <_strtoul_l.constprop.0+0xc8>
 800992a:	1e69      	subs	r1, r5, #1
 800992c:	6011      	str	r1, [r2, #0]
 800992e:	e7f5      	b.n	800991c <_strtoul_l.constprop.0+0xb8>
 8009930:	2430      	movs	r4, #48	; 0x30
 8009932:	2b00      	cmp	r3, #0
 8009934:	d1b5      	bne.n	80098a2 <_strtoul_l.constprop.0+0x3e>
 8009936:	2308      	movs	r3, #8
 8009938:	e7b3      	b.n	80098a2 <_strtoul_l.constprop.0+0x3e>
 800993a:	2c30      	cmp	r4, #48	; 0x30
 800993c:	d0a9      	beq.n	8009892 <_strtoul_l.constprop.0+0x2e>
 800993e:	230a      	movs	r3, #10
 8009940:	e7af      	b.n	80098a2 <_strtoul_l.constprop.0+0x3e>
 8009942:	bf00      	nop
 8009944:	0800a559 	.word	0x0800a559

08009948 <_strtoul_r>:
 8009948:	f7ff bf8c 	b.w	8009864 <_strtoul_l.constprop.0>

0800994c <__submore>:
 800994c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009950:	460c      	mov	r4, r1
 8009952:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8009954:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009958:	4299      	cmp	r1, r3
 800995a:	d11b      	bne.n	8009994 <__submore+0x48>
 800995c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8009960:	f7ff fa16 	bl	8008d90 <_malloc_r>
 8009964:	b918      	cbnz	r0, 800996e <__submore+0x22>
 8009966:	f04f 30ff 	mov.w	r0, #4294967295
 800996a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800996e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009972:	63a3      	str	r3, [r4, #56]	; 0x38
 8009974:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8009978:	6360      	str	r0, [r4, #52]	; 0x34
 800997a:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800997e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8009982:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8009986:	7043      	strb	r3, [r0, #1]
 8009988:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800998c:	7003      	strb	r3, [r0, #0]
 800998e:	6020      	str	r0, [r4, #0]
 8009990:	2000      	movs	r0, #0
 8009992:	e7ea      	b.n	800996a <__submore+0x1e>
 8009994:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8009996:	0077      	lsls	r7, r6, #1
 8009998:	463a      	mov	r2, r7
 800999a:	f000 fa29 	bl	8009df0 <_realloc_r>
 800999e:	4605      	mov	r5, r0
 80099a0:	2800      	cmp	r0, #0
 80099a2:	d0e0      	beq.n	8009966 <__submore+0x1a>
 80099a4:	eb00 0806 	add.w	r8, r0, r6
 80099a8:	4601      	mov	r1, r0
 80099aa:	4632      	mov	r2, r6
 80099ac:	4640      	mov	r0, r8
 80099ae:	f7fe fcad 	bl	800830c <memcpy>
 80099b2:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80099b6:	f8c4 8000 	str.w	r8, [r4]
 80099ba:	e7e9      	b.n	8009990 <__submore+0x44>

080099bc <__ascii_wctomb>:
 80099bc:	4603      	mov	r3, r0
 80099be:	4608      	mov	r0, r1
 80099c0:	b141      	cbz	r1, 80099d4 <__ascii_wctomb+0x18>
 80099c2:	2aff      	cmp	r2, #255	; 0xff
 80099c4:	d904      	bls.n	80099d0 <__ascii_wctomb+0x14>
 80099c6:	228a      	movs	r2, #138	; 0x8a
 80099c8:	f04f 30ff 	mov.w	r0, #4294967295
 80099cc:	601a      	str	r2, [r3, #0]
 80099ce:	4770      	bx	lr
 80099d0:	2001      	movs	r0, #1
 80099d2:	700a      	strb	r2, [r1, #0]
 80099d4:	4770      	bx	lr
	...

080099d8 <__assert_func>:
 80099d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80099da:	4614      	mov	r4, r2
 80099dc:	461a      	mov	r2, r3
 80099de:	4b09      	ldr	r3, [pc, #36]	; (8009a04 <__assert_func+0x2c>)
 80099e0:	4605      	mov	r5, r0
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	68d8      	ldr	r0, [r3, #12]
 80099e6:	b14c      	cbz	r4, 80099fc <__assert_func+0x24>
 80099e8:	4b07      	ldr	r3, [pc, #28]	; (8009a08 <__assert_func+0x30>)
 80099ea:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80099ee:	9100      	str	r1, [sp, #0]
 80099f0:	462b      	mov	r3, r5
 80099f2:	4906      	ldr	r1, [pc, #24]	; (8009a0c <__assert_func+0x34>)
 80099f4:	f000 f9a2 	bl	8009d3c <fiprintf>
 80099f8:	f000 fc40 	bl	800a27c <abort>
 80099fc:	4b04      	ldr	r3, [pc, #16]	; (8009a10 <__assert_func+0x38>)
 80099fe:	461c      	mov	r4, r3
 8009a00:	e7f3      	b.n	80099ea <__assert_func+0x12>
 8009a02:	bf00      	nop
 8009a04:	20000040 	.word	0x20000040
 8009a08:	0800a8e8 	.word	0x0800a8e8
 8009a0c:	0800a8f5 	.word	0x0800a8f5
 8009a10:	0800a923 	.word	0x0800a923

08009a14 <__sflush_r>:
 8009a14:	898a      	ldrh	r2, [r1, #12]
 8009a16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a18:	4605      	mov	r5, r0
 8009a1a:	0710      	lsls	r0, r2, #28
 8009a1c:	460c      	mov	r4, r1
 8009a1e:	d457      	bmi.n	8009ad0 <__sflush_r+0xbc>
 8009a20:	684b      	ldr	r3, [r1, #4]
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	dc04      	bgt.n	8009a30 <__sflush_r+0x1c>
 8009a26:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	dc01      	bgt.n	8009a30 <__sflush_r+0x1c>
 8009a2c:	2000      	movs	r0, #0
 8009a2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009a30:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009a32:	2e00      	cmp	r6, #0
 8009a34:	d0fa      	beq.n	8009a2c <__sflush_r+0x18>
 8009a36:	2300      	movs	r3, #0
 8009a38:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009a3c:	682f      	ldr	r7, [r5, #0]
 8009a3e:	602b      	str	r3, [r5, #0]
 8009a40:	d032      	beq.n	8009aa8 <__sflush_r+0x94>
 8009a42:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009a44:	89a3      	ldrh	r3, [r4, #12]
 8009a46:	075a      	lsls	r2, r3, #29
 8009a48:	d505      	bpl.n	8009a56 <__sflush_r+0x42>
 8009a4a:	6863      	ldr	r3, [r4, #4]
 8009a4c:	1ac0      	subs	r0, r0, r3
 8009a4e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009a50:	b10b      	cbz	r3, 8009a56 <__sflush_r+0x42>
 8009a52:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009a54:	1ac0      	subs	r0, r0, r3
 8009a56:	2300      	movs	r3, #0
 8009a58:	4602      	mov	r2, r0
 8009a5a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009a5c:	4628      	mov	r0, r5
 8009a5e:	6a21      	ldr	r1, [r4, #32]
 8009a60:	47b0      	blx	r6
 8009a62:	1c43      	adds	r3, r0, #1
 8009a64:	89a3      	ldrh	r3, [r4, #12]
 8009a66:	d106      	bne.n	8009a76 <__sflush_r+0x62>
 8009a68:	6829      	ldr	r1, [r5, #0]
 8009a6a:	291d      	cmp	r1, #29
 8009a6c:	d82c      	bhi.n	8009ac8 <__sflush_r+0xb4>
 8009a6e:	4a29      	ldr	r2, [pc, #164]	; (8009b14 <__sflush_r+0x100>)
 8009a70:	40ca      	lsrs	r2, r1
 8009a72:	07d6      	lsls	r6, r2, #31
 8009a74:	d528      	bpl.n	8009ac8 <__sflush_r+0xb4>
 8009a76:	2200      	movs	r2, #0
 8009a78:	6062      	str	r2, [r4, #4]
 8009a7a:	6922      	ldr	r2, [r4, #16]
 8009a7c:	04d9      	lsls	r1, r3, #19
 8009a7e:	6022      	str	r2, [r4, #0]
 8009a80:	d504      	bpl.n	8009a8c <__sflush_r+0x78>
 8009a82:	1c42      	adds	r2, r0, #1
 8009a84:	d101      	bne.n	8009a8a <__sflush_r+0x76>
 8009a86:	682b      	ldr	r3, [r5, #0]
 8009a88:	b903      	cbnz	r3, 8009a8c <__sflush_r+0x78>
 8009a8a:	6560      	str	r0, [r4, #84]	; 0x54
 8009a8c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009a8e:	602f      	str	r7, [r5, #0]
 8009a90:	2900      	cmp	r1, #0
 8009a92:	d0cb      	beq.n	8009a2c <__sflush_r+0x18>
 8009a94:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009a98:	4299      	cmp	r1, r3
 8009a9a:	d002      	beq.n	8009aa2 <__sflush_r+0x8e>
 8009a9c:	4628      	mov	r0, r5
 8009a9e:	f7ff f90f 	bl	8008cc0 <_free_r>
 8009aa2:	2000      	movs	r0, #0
 8009aa4:	6360      	str	r0, [r4, #52]	; 0x34
 8009aa6:	e7c2      	b.n	8009a2e <__sflush_r+0x1a>
 8009aa8:	6a21      	ldr	r1, [r4, #32]
 8009aaa:	2301      	movs	r3, #1
 8009aac:	4628      	mov	r0, r5
 8009aae:	47b0      	blx	r6
 8009ab0:	1c41      	adds	r1, r0, #1
 8009ab2:	d1c7      	bne.n	8009a44 <__sflush_r+0x30>
 8009ab4:	682b      	ldr	r3, [r5, #0]
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d0c4      	beq.n	8009a44 <__sflush_r+0x30>
 8009aba:	2b1d      	cmp	r3, #29
 8009abc:	d001      	beq.n	8009ac2 <__sflush_r+0xae>
 8009abe:	2b16      	cmp	r3, #22
 8009ac0:	d101      	bne.n	8009ac6 <__sflush_r+0xb2>
 8009ac2:	602f      	str	r7, [r5, #0]
 8009ac4:	e7b2      	b.n	8009a2c <__sflush_r+0x18>
 8009ac6:	89a3      	ldrh	r3, [r4, #12]
 8009ac8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009acc:	81a3      	strh	r3, [r4, #12]
 8009ace:	e7ae      	b.n	8009a2e <__sflush_r+0x1a>
 8009ad0:	690f      	ldr	r7, [r1, #16]
 8009ad2:	2f00      	cmp	r7, #0
 8009ad4:	d0aa      	beq.n	8009a2c <__sflush_r+0x18>
 8009ad6:	0793      	lsls	r3, r2, #30
 8009ad8:	bf18      	it	ne
 8009ada:	2300      	movne	r3, #0
 8009adc:	680e      	ldr	r6, [r1, #0]
 8009ade:	bf08      	it	eq
 8009ae0:	694b      	ldreq	r3, [r1, #20]
 8009ae2:	1bf6      	subs	r6, r6, r7
 8009ae4:	600f      	str	r7, [r1, #0]
 8009ae6:	608b      	str	r3, [r1, #8]
 8009ae8:	2e00      	cmp	r6, #0
 8009aea:	dd9f      	ble.n	8009a2c <__sflush_r+0x18>
 8009aec:	4633      	mov	r3, r6
 8009aee:	463a      	mov	r2, r7
 8009af0:	4628      	mov	r0, r5
 8009af2:	6a21      	ldr	r1, [r4, #32]
 8009af4:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8009af8:	47e0      	blx	ip
 8009afa:	2800      	cmp	r0, #0
 8009afc:	dc06      	bgt.n	8009b0c <__sflush_r+0xf8>
 8009afe:	89a3      	ldrh	r3, [r4, #12]
 8009b00:	f04f 30ff 	mov.w	r0, #4294967295
 8009b04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009b08:	81a3      	strh	r3, [r4, #12]
 8009b0a:	e790      	b.n	8009a2e <__sflush_r+0x1a>
 8009b0c:	4407      	add	r7, r0
 8009b0e:	1a36      	subs	r6, r6, r0
 8009b10:	e7ea      	b.n	8009ae8 <__sflush_r+0xd4>
 8009b12:	bf00      	nop
 8009b14:	20400001 	.word	0x20400001

08009b18 <_fflush_r>:
 8009b18:	b538      	push	{r3, r4, r5, lr}
 8009b1a:	690b      	ldr	r3, [r1, #16]
 8009b1c:	4605      	mov	r5, r0
 8009b1e:	460c      	mov	r4, r1
 8009b20:	b913      	cbnz	r3, 8009b28 <_fflush_r+0x10>
 8009b22:	2500      	movs	r5, #0
 8009b24:	4628      	mov	r0, r5
 8009b26:	bd38      	pop	{r3, r4, r5, pc}
 8009b28:	b118      	cbz	r0, 8009b32 <_fflush_r+0x1a>
 8009b2a:	6983      	ldr	r3, [r0, #24]
 8009b2c:	b90b      	cbnz	r3, 8009b32 <_fflush_r+0x1a>
 8009b2e:	f000 f887 	bl	8009c40 <__sinit>
 8009b32:	4b14      	ldr	r3, [pc, #80]	; (8009b84 <_fflush_r+0x6c>)
 8009b34:	429c      	cmp	r4, r3
 8009b36:	d11b      	bne.n	8009b70 <_fflush_r+0x58>
 8009b38:	686c      	ldr	r4, [r5, #4]
 8009b3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d0ef      	beq.n	8009b22 <_fflush_r+0xa>
 8009b42:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009b44:	07d0      	lsls	r0, r2, #31
 8009b46:	d404      	bmi.n	8009b52 <_fflush_r+0x3a>
 8009b48:	0599      	lsls	r1, r3, #22
 8009b4a:	d402      	bmi.n	8009b52 <_fflush_r+0x3a>
 8009b4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009b4e:	f000 f927 	bl	8009da0 <__retarget_lock_acquire_recursive>
 8009b52:	4628      	mov	r0, r5
 8009b54:	4621      	mov	r1, r4
 8009b56:	f7ff ff5d 	bl	8009a14 <__sflush_r>
 8009b5a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009b5c:	4605      	mov	r5, r0
 8009b5e:	07da      	lsls	r2, r3, #31
 8009b60:	d4e0      	bmi.n	8009b24 <_fflush_r+0xc>
 8009b62:	89a3      	ldrh	r3, [r4, #12]
 8009b64:	059b      	lsls	r3, r3, #22
 8009b66:	d4dd      	bmi.n	8009b24 <_fflush_r+0xc>
 8009b68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009b6a:	f000 f91a 	bl	8009da2 <__retarget_lock_release_recursive>
 8009b6e:	e7d9      	b.n	8009b24 <_fflush_r+0xc>
 8009b70:	4b05      	ldr	r3, [pc, #20]	; (8009b88 <_fflush_r+0x70>)
 8009b72:	429c      	cmp	r4, r3
 8009b74:	d101      	bne.n	8009b7a <_fflush_r+0x62>
 8009b76:	68ac      	ldr	r4, [r5, #8]
 8009b78:	e7df      	b.n	8009b3a <_fflush_r+0x22>
 8009b7a:	4b04      	ldr	r3, [pc, #16]	; (8009b8c <_fflush_r+0x74>)
 8009b7c:	429c      	cmp	r4, r3
 8009b7e:	bf08      	it	eq
 8009b80:	68ec      	ldreq	r4, [r5, #12]
 8009b82:	e7da      	b.n	8009b3a <_fflush_r+0x22>
 8009b84:	0800a944 	.word	0x0800a944
 8009b88:	0800a964 	.word	0x0800a964
 8009b8c:	0800a924 	.word	0x0800a924

08009b90 <std>:
 8009b90:	2300      	movs	r3, #0
 8009b92:	b510      	push	{r4, lr}
 8009b94:	4604      	mov	r4, r0
 8009b96:	e9c0 3300 	strd	r3, r3, [r0]
 8009b9a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009b9e:	6083      	str	r3, [r0, #8]
 8009ba0:	8181      	strh	r1, [r0, #12]
 8009ba2:	6643      	str	r3, [r0, #100]	; 0x64
 8009ba4:	81c2      	strh	r2, [r0, #14]
 8009ba6:	6183      	str	r3, [r0, #24]
 8009ba8:	4619      	mov	r1, r3
 8009baa:	2208      	movs	r2, #8
 8009bac:	305c      	adds	r0, #92	; 0x5c
 8009bae:	f7fb fbd3 	bl	8005358 <memset>
 8009bb2:	4b05      	ldr	r3, [pc, #20]	; (8009bc8 <std+0x38>)
 8009bb4:	6224      	str	r4, [r4, #32]
 8009bb6:	6263      	str	r3, [r4, #36]	; 0x24
 8009bb8:	4b04      	ldr	r3, [pc, #16]	; (8009bcc <std+0x3c>)
 8009bba:	62a3      	str	r3, [r4, #40]	; 0x28
 8009bbc:	4b04      	ldr	r3, [pc, #16]	; (8009bd0 <std+0x40>)
 8009bbe:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009bc0:	4b04      	ldr	r3, [pc, #16]	; (8009bd4 <std+0x44>)
 8009bc2:	6323      	str	r3, [r4, #48]	; 0x30
 8009bc4:	bd10      	pop	{r4, pc}
 8009bc6:	bf00      	nop
 8009bc8:	080060e1 	.word	0x080060e1
 8009bcc:	08006107 	.word	0x08006107
 8009bd0:	0800613f 	.word	0x0800613f
 8009bd4:	08006163 	.word	0x08006163

08009bd8 <_cleanup_r>:
 8009bd8:	4901      	ldr	r1, [pc, #4]	; (8009be0 <_cleanup_r+0x8>)
 8009bda:	f000 b8c1 	b.w	8009d60 <_fwalk_reent>
 8009bde:	bf00      	nop
 8009be0:	08009b19 	.word	0x08009b19

08009be4 <__sfmoreglue>:
 8009be4:	2268      	movs	r2, #104	; 0x68
 8009be6:	b570      	push	{r4, r5, r6, lr}
 8009be8:	1e4d      	subs	r5, r1, #1
 8009bea:	4355      	muls	r5, r2
 8009bec:	460e      	mov	r6, r1
 8009bee:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009bf2:	f7ff f8cd 	bl	8008d90 <_malloc_r>
 8009bf6:	4604      	mov	r4, r0
 8009bf8:	b140      	cbz	r0, 8009c0c <__sfmoreglue+0x28>
 8009bfa:	2100      	movs	r1, #0
 8009bfc:	e9c0 1600 	strd	r1, r6, [r0]
 8009c00:	300c      	adds	r0, #12
 8009c02:	60a0      	str	r0, [r4, #8]
 8009c04:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009c08:	f7fb fba6 	bl	8005358 <memset>
 8009c0c:	4620      	mov	r0, r4
 8009c0e:	bd70      	pop	{r4, r5, r6, pc}

08009c10 <__sfp_lock_acquire>:
 8009c10:	4801      	ldr	r0, [pc, #4]	; (8009c18 <__sfp_lock_acquire+0x8>)
 8009c12:	f000 b8c5 	b.w	8009da0 <__retarget_lock_acquire_recursive>
 8009c16:	bf00      	nop
 8009c18:	2000049d 	.word	0x2000049d

08009c1c <__sfp_lock_release>:
 8009c1c:	4801      	ldr	r0, [pc, #4]	; (8009c24 <__sfp_lock_release+0x8>)
 8009c1e:	f000 b8c0 	b.w	8009da2 <__retarget_lock_release_recursive>
 8009c22:	bf00      	nop
 8009c24:	2000049d 	.word	0x2000049d

08009c28 <__sinit_lock_acquire>:
 8009c28:	4801      	ldr	r0, [pc, #4]	; (8009c30 <__sinit_lock_acquire+0x8>)
 8009c2a:	f000 b8b9 	b.w	8009da0 <__retarget_lock_acquire_recursive>
 8009c2e:	bf00      	nop
 8009c30:	2000049e 	.word	0x2000049e

08009c34 <__sinit_lock_release>:
 8009c34:	4801      	ldr	r0, [pc, #4]	; (8009c3c <__sinit_lock_release+0x8>)
 8009c36:	f000 b8b4 	b.w	8009da2 <__retarget_lock_release_recursive>
 8009c3a:	bf00      	nop
 8009c3c:	2000049e 	.word	0x2000049e

08009c40 <__sinit>:
 8009c40:	b510      	push	{r4, lr}
 8009c42:	4604      	mov	r4, r0
 8009c44:	f7ff fff0 	bl	8009c28 <__sinit_lock_acquire>
 8009c48:	69a3      	ldr	r3, [r4, #24]
 8009c4a:	b11b      	cbz	r3, 8009c54 <__sinit+0x14>
 8009c4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009c50:	f7ff bff0 	b.w	8009c34 <__sinit_lock_release>
 8009c54:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009c58:	6523      	str	r3, [r4, #80]	; 0x50
 8009c5a:	4b13      	ldr	r3, [pc, #76]	; (8009ca8 <__sinit+0x68>)
 8009c5c:	4a13      	ldr	r2, [pc, #76]	; (8009cac <__sinit+0x6c>)
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	62a2      	str	r2, [r4, #40]	; 0x28
 8009c62:	42a3      	cmp	r3, r4
 8009c64:	bf08      	it	eq
 8009c66:	2301      	moveq	r3, #1
 8009c68:	4620      	mov	r0, r4
 8009c6a:	bf08      	it	eq
 8009c6c:	61a3      	streq	r3, [r4, #24]
 8009c6e:	f000 f81f 	bl	8009cb0 <__sfp>
 8009c72:	6060      	str	r0, [r4, #4]
 8009c74:	4620      	mov	r0, r4
 8009c76:	f000 f81b 	bl	8009cb0 <__sfp>
 8009c7a:	60a0      	str	r0, [r4, #8]
 8009c7c:	4620      	mov	r0, r4
 8009c7e:	f000 f817 	bl	8009cb0 <__sfp>
 8009c82:	2200      	movs	r2, #0
 8009c84:	2104      	movs	r1, #4
 8009c86:	60e0      	str	r0, [r4, #12]
 8009c88:	6860      	ldr	r0, [r4, #4]
 8009c8a:	f7ff ff81 	bl	8009b90 <std>
 8009c8e:	2201      	movs	r2, #1
 8009c90:	2109      	movs	r1, #9
 8009c92:	68a0      	ldr	r0, [r4, #8]
 8009c94:	f7ff ff7c 	bl	8009b90 <std>
 8009c98:	2202      	movs	r2, #2
 8009c9a:	2112      	movs	r1, #18
 8009c9c:	68e0      	ldr	r0, [r4, #12]
 8009c9e:	f7ff ff77 	bl	8009b90 <std>
 8009ca2:	2301      	movs	r3, #1
 8009ca4:	61a3      	str	r3, [r4, #24]
 8009ca6:	e7d1      	b.n	8009c4c <__sinit+0xc>
 8009ca8:	0800a4c8 	.word	0x0800a4c8
 8009cac:	08009bd9 	.word	0x08009bd9

08009cb0 <__sfp>:
 8009cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cb2:	4607      	mov	r7, r0
 8009cb4:	f7ff ffac 	bl	8009c10 <__sfp_lock_acquire>
 8009cb8:	4b1e      	ldr	r3, [pc, #120]	; (8009d34 <__sfp+0x84>)
 8009cba:	681e      	ldr	r6, [r3, #0]
 8009cbc:	69b3      	ldr	r3, [r6, #24]
 8009cbe:	b913      	cbnz	r3, 8009cc6 <__sfp+0x16>
 8009cc0:	4630      	mov	r0, r6
 8009cc2:	f7ff ffbd 	bl	8009c40 <__sinit>
 8009cc6:	3648      	adds	r6, #72	; 0x48
 8009cc8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009ccc:	3b01      	subs	r3, #1
 8009cce:	d503      	bpl.n	8009cd8 <__sfp+0x28>
 8009cd0:	6833      	ldr	r3, [r6, #0]
 8009cd2:	b30b      	cbz	r3, 8009d18 <__sfp+0x68>
 8009cd4:	6836      	ldr	r6, [r6, #0]
 8009cd6:	e7f7      	b.n	8009cc8 <__sfp+0x18>
 8009cd8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009cdc:	b9d5      	cbnz	r5, 8009d14 <__sfp+0x64>
 8009cde:	4b16      	ldr	r3, [pc, #88]	; (8009d38 <__sfp+0x88>)
 8009ce0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009ce4:	60e3      	str	r3, [r4, #12]
 8009ce6:	6665      	str	r5, [r4, #100]	; 0x64
 8009ce8:	f000 f859 	bl	8009d9e <__retarget_lock_init_recursive>
 8009cec:	f7ff ff96 	bl	8009c1c <__sfp_lock_release>
 8009cf0:	2208      	movs	r2, #8
 8009cf2:	4629      	mov	r1, r5
 8009cf4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009cf8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009cfc:	6025      	str	r5, [r4, #0]
 8009cfe:	61a5      	str	r5, [r4, #24]
 8009d00:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009d04:	f7fb fb28 	bl	8005358 <memset>
 8009d08:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009d0c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009d10:	4620      	mov	r0, r4
 8009d12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d14:	3468      	adds	r4, #104	; 0x68
 8009d16:	e7d9      	b.n	8009ccc <__sfp+0x1c>
 8009d18:	2104      	movs	r1, #4
 8009d1a:	4638      	mov	r0, r7
 8009d1c:	f7ff ff62 	bl	8009be4 <__sfmoreglue>
 8009d20:	4604      	mov	r4, r0
 8009d22:	6030      	str	r0, [r6, #0]
 8009d24:	2800      	cmp	r0, #0
 8009d26:	d1d5      	bne.n	8009cd4 <__sfp+0x24>
 8009d28:	f7ff ff78 	bl	8009c1c <__sfp_lock_release>
 8009d2c:	230c      	movs	r3, #12
 8009d2e:	603b      	str	r3, [r7, #0]
 8009d30:	e7ee      	b.n	8009d10 <__sfp+0x60>
 8009d32:	bf00      	nop
 8009d34:	0800a4c8 	.word	0x0800a4c8
 8009d38:	ffff0001 	.word	0xffff0001

08009d3c <fiprintf>:
 8009d3c:	b40e      	push	{r1, r2, r3}
 8009d3e:	b503      	push	{r0, r1, lr}
 8009d40:	4601      	mov	r1, r0
 8009d42:	ab03      	add	r3, sp, #12
 8009d44:	4805      	ldr	r0, [pc, #20]	; (8009d5c <fiprintf+0x20>)
 8009d46:	f853 2b04 	ldr.w	r2, [r3], #4
 8009d4a:	6800      	ldr	r0, [r0, #0]
 8009d4c:	9301      	str	r3, [sp, #4]
 8009d4e:	f000 f8a5 	bl	8009e9c <_vfiprintf_r>
 8009d52:	b002      	add	sp, #8
 8009d54:	f85d eb04 	ldr.w	lr, [sp], #4
 8009d58:	b003      	add	sp, #12
 8009d5a:	4770      	bx	lr
 8009d5c:	20000040 	.word	0x20000040

08009d60 <_fwalk_reent>:
 8009d60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d64:	4606      	mov	r6, r0
 8009d66:	4688      	mov	r8, r1
 8009d68:	2700      	movs	r7, #0
 8009d6a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009d6e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009d72:	f1b9 0901 	subs.w	r9, r9, #1
 8009d76:	d505      	bpl.n	8009d84 <_fwalk_reent+0x24>
 8009d78:	6824      	ldr	r4, [r4, #0]
 8009d7a:	2c00      	cmp	r4, #0
 8009d7c:	d1f7      	bne.n	8009d6e <_fwalk_reent+0xe>
 8009d7e:	4638      	mov	r0, r7
 8009d80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009d84:	89ab      	ldrh	r3, [r5, #12]
 8009d86:	2b01      	cmp	r3, #1
 8009d88:	d907      	bls.n	8009d9a <_fwalk_reent+0x3a>
 8009d8a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009d8e:	3301      	adds	r3, #1
 8009d90:	d003      	beq.n	8009d9a <_fwalk_reent+0x3a>
 8009d92:	4629      	mov	r1, r5
 8009d94:	4630      	mov	r0, r6
 8009d96:	47c0      	blx	r8
 8009d98:	4307      	orrs	r7, r0
 8009d9a:	3568      	adds	r5, #104	; 0x68
 8009d9c:	e7e9      	b.n	8009d72 <_fwalk_reent+0x12>

08009d9e <__retarget_lock_init_recursive>:
 8009d9e:	4770      	bx	lr

08009da0 <__retarget_lock_acquire_recursive>:
 8009da0:	4770      	bx	lr

08009da2 <__retarget_lock_release_recursive>:
 8009da2:	4770      	bx	lr

08009da4 <memmove>:
 8009da4:	4288      	cmp	r0, r1
 8009da6:	b510      	push	{r4, lr}
 8009da8:	eb01 0402 	add.w	r4, r1, r2
 8009dac:	d902      	bls.n	8009db4 <memmove+0x10>
 8009dae:	4284      	cmp	r4, r0
 8009db0:	4623      	mov	r3, r4
 8009db2:	d807      	bhi.n	8009dc4 <memmove+0x20>
 8009db4:	1e43      	subs	r3, r0, #1
 8009db6:	42a1      	cmp	r1, r4
 8009db8:	d008      	beq.n	8009dcc <memmove+0x28>
 8009dba:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009dbe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009dc2:	e7f8      	b.n	8009db6 <memmove+0x12>
 8009dc4:	4601      	mov	r1, r0
 8009dc6:	4402      	add	r2, r0
 8009dc8:	428a      	cmp	r2, r1
 8009dca:	d100      	bne.n	8009dce <memmove+0x2a>
 8009dcc:	bd10      	pop	{r4, pc}
 8009dce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009dd2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009dd6:	e7f7      	b.n	8009dc8 <memmove+0x24>

08009dd8 <__malloc_lock>:
 8009dd8:	4801      	ldr	r0, [pc, #4]	; (8009de0 <__malloc_lock+0x8>)
 8009dda:	f7ff bfe1 	b.w	8009da0 <__retarget_lock_acquire_recursive>
 8009dde:	bf00      	nop
 8009de0:	2000049c 	.word	0x2000049c

08009de4 <__malloc_unlock>:
 8009de4:	4801      	ldr	r0, [pc, #4]	; (8009dec <__malloc_unlock+0x8>)
 8009de6:	f7ff bfdc 	b.w	8009da2 <__retarget_lock_release_recursive>
 8009dea:	bf00      	nop
 8009dec:	2000049c 	.word	0x2000049c

08009df0 <_realloc_r>:
 8009df0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009df4:	4680      	mov	r8, r0
 8009df6:	4614      	mov	r4, r2
 8009df8:	460e      	mov	r6, r1
 8009dfa:	b921      	cbnz	r1, 8009e06 <_realloc_r+0x16>
 8009dfc:	4611      	mov	r1, r2
 8009dfe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009e02:	f7fe bfc5 	b.w	8008d90 <_malloc_r>
 8009e06:	b92a      	cbnz	r2, 8009e14 <_realloc_r+0x24>
 8009e08:	f7fe ff5a 	bl	8008cc0 <_free_r>
 8009e0c:	4625      	mov	r5, r4
 8009e0e:	4628      	mov	r0, r5
 8009e10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e14:	f000 fa9e 	bl	800a354 <_malloc_usable_size_r>
 8009e18:	4284      	cmp	r4, r0
 8009e1a:	4607      	mov	r7, r0
 8009e1c:	d802      	bhi.n	8009e24 <_realloc_r+0x34>
 8009e1e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009e22:	d812      	bhi.n	8009e4a <_realloc_r+0x5a>
 8009e24:	4621      	mov	r1, r4
 8009e26:	4640      	mov	r0, r8
 8009e28:	f7fe ffb2 	bl	8008d90 <_malloc_r>
 8009e2c:	4605      	mov	r5, r0
 8009e2e:	2800      	cmp	r0, #0
 8009e30:	d0ed      	beq.n	8009e0e <_realloc_r+0x1e>
 8009e32:	42bc      	cmp	r4, r7
 8009e34:	4622      	mov	r2, r4
 8009e36:	4631      	mov	r1, r6
 8009e38:	bf28      	it	cs
 8009e3a:	463a      	movcs	r2, r7
 8009e3c:	f7fe fa66 	bl	800830c <memcpy>
 8009e40:	4631      	mov	r1, r6
 8009e42:	4640      	mov	r0, r8
 8009e44:	f7fe ff3c 	bl	8008cc0 <_free_r>
 8009e48:	e7e1      	b.n	8009e0e <_realloc_r+0x1e>
 8009e4a:	4635      	mov	r5, r6
 8009e4c:	e7df      	b.n	8009e0e <_realloc_r+0x1e>

08009e4e <__sfputc_r>:
 8009e4e:	6893      	ldr	r3, [r2, #8]
 8009e50:	b410      	push	{r4}
 8009e52:	3b01      	subs	r3, #1
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	6093      	str	r3, [r2, #8]
 8009e58:	da07      	bge.n	8009e6a <__sfputc_r+0x1c>
 8009e5a:	6994      	ldr	r4, [r2, #24]
 8009e5c:	42a3      	cmp	r3, r4
 8009e5e:	db01      	blt.n	8009e64 <__sfputc_r+0x16>
 8009e60:	290a      	cmp	r1, #10
 8009e62:	d102      	bne.n	8009e6a <__sfputc_r+0x1c>
 8009e64:	bc10      	pop	{r4}
 8009e66:	f000 b949 	b.w	800a0fc <__swbuf_r>
 8009e6a:	6813      	ldr	r3, [r2, #0]
 8009e6c:	1c58      	adds	r0, r3, #1
 8009e6e:	6010      	str	r0, [r2, #0]
 8009e70:	7019      	strb	r1, [r3, #0]
 8009e72:	4608      	mov	r0, r1
 8009e74:	bc10      	pop	{r4}
 8009e76:	4770      	bx	lr

08009e78 <__sfputs_r>:
 8009e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e7a:	4606      	mov	r6, r0
 8009e7c:	460f      	mov	r7, r1
 8009e7e:	4614      	mov	r4, r2
 8009e80:	18d5      	adds	r5, r2, r3
 8009e82:	42ac      	cmp	r4, r5
 8009e84:	d101      	bne.n	8009e8a <__sfputs_r+0x12>
 8009e86:	2000      	movs	r0, #0
 8009e88:	e007      	b.n	8009e9a <__sfputs_r+0x22>
 8009e8a:	463a      	mov	r2, r7
 8009e8c:	4630      	mov	r0, r6
 8009e8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e92:	f7ff ffdc 	bl	8009e4e <__sfputc_r>
 8009e96:	1c43      	adds	r3, r0, #1
 8009e98:	d1f3      	bne.n	8009e82 <__sfputs_r+0xa>
 8009e9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009e9c <_vfiprintf_r>:
 8009e9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ea0:	460d      	mov	r5, r1
 8009ea2:	4614      	mov	r4, r2
 8009ea4:	4698      	mov	r8, r3
 8009ea6:	4606      	mov	r6, r0
 8009ea8:	b09d      	sub	sp, #116	; 0x74
 8009eaa:	b118      	cbz	r0, 8009eb4 <_vfiprintf_r+0x18>
 8009eac:	6983      	ldr	r3, [r0, #24]
 8009eae:	b90b      	cbnz	r3, 8009eb4 <_vfiprintf_r+0x18>
 8009eb0:	f7ff fec6 	bl	8009c40 <__sinit>
 8009eb4:	4b89      	ldr	r3, [pc, #548]	; (800a0dc <_vfiprintf_r+0x240>)
 8009eb6:	429d      	cmp	r5, r3
 8009eb8:	d11b      	bne.n	8009ef2 <_vfiprintf_r+0x56>
 8009eba:	6875      	ldr	r5, [r6, #4]
 8009ebc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009ebe:	07d9      	lsls	r1, r3, #31
 8009ec0:	d405      	bmi.n	8009ece <_vfiprintf_r+0x32>
 8009ec2:	89ab      	ldrh	r3, [r5, #12]
 8009ec4:	059a      	lsls	r2, r3, #22
 8009ec6:	d402      	bmi.n	8009ece <_vfiprintf_r+0x32>
 8009ec8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009eca:	f7ff ff69 	bl	8009da0 <__retarget_lock_acquire_recursive>
 8009ece:	89ab      	ldrh	r3, [r5, #12]
 8009ed0:	071b      	lsls	r3, r3, #28
 8009ed2:	d501      	bpl.n	8009ed8 <_vfiprintf_r+0x3c>
 8009ed4:	692b      	ldr	r3, [r5, #16]
 8009ed6:	b9eb      	cbnz	r3, 8009f14 <_vfiprintf_r+0x78>
 8009ed8:	4629      	mov	r1, r5
 8009eda:	4630      	mov	r0, r6
 8009edc:	f000 f960 	bl	800a1a0 <__swsetup_r>
 8009ee0:	b1c0      	cbz	r0, 8009f14 <_vfiprintf_r+0x78>
 8009ee2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009ee4:	07dc      	lsls	r4, r3, #31
 8009ee6:	d50e      	bpl.n	8009f06 <_vfiprintf_r+0x6a>
 8009ee8:	f04f 30ff 	mov.w	r0, #4294967295
 8009eec:	b01d      	add	sp, #116	; 0x74
 8009eee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ef2:	4b7b      	ldr	r3, [pc, #492]	; (800a0e0 <_vfiprintf_r+0x244>)
 8009ef4:	429d      	cmp	r5, r3
 8009ef6:	d101      	bne.n	8009efc <_vfiprintf_r+0x60>
 8009ef8:	68b5      	ldr	r5, [r6, #8]
 8009efa:	e7df      	b.n	8009ebc <_vfiprintf_r+0x20>
 8009efc:	4b79      	ldr	r3, [pc, #484]	; (800a0e4 <_vfiprintf_r+0x248>)
 8009efe:	429d      	cmp	r5, r3
 8009f00:	bf08      	it	eq
 8009f02:	68f5      	ldreq	r5, [r6, #12]
 8009f04:	e7da      	b.n	8009ebc <_vfiprintf_r+0x20>
 8009f06:	89ab      	ldrh	r3, [r5, #12]
 8009f08:	0598      	lsls	r0, r3, #22
 8009f0a:	d4ed      	bmi.n	8009ee8 <_vfiprintf_r+0x4c>
 8009f0c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009f0e:	f7ff ff48 	bl	8009da2 <__retarget_lock_release_recursive>
 8009f12:	e7e9      	b.n	8009ee8 <_vfiprintf_r+0x4c>
 8009f14:	2300      	movs	r3, #0
 8009f16:	9309      	str	r3, [sp, #36]	; 0x24
 8009f18:	2320      	movs	r3, #32
 8009f1a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009f1e:	2330      	movs	r3, #48	; 0x30
 8009f20:	f04f 0901 	mov.w	r9, #1
 8009f24:	f8cd 800c 	str.w	r8, [sp, #12]
 8009f28:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800a0e8 <_vfiprintf_r+0x24c>
 8009f2c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009f30:	4623      	mov	r3, r4
 8009f32:	469a      	mov	sl, r3
 8009f34:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009f38:	b10a      	cbz	r2, 8009f3e <_vfiprintf_r+0xa2>
 8009f3a:	2a25      	cmp	r2, #37	; 0x25
 8009f3c:	d1f9      	bne.n	8009f32 <_vfiprintf_r+0x96>
 8009f3e:	ebba 0b04 	subs.w	fp, sl, r4
 8009f42:	d00b      	beq.n	8009f5c <_vfiprintf_r+0xc0>
 8009f44:	465b      	mov	r3, fp
 8009f46:	4622      	mov	r2, r4
 8009f48:	4629      	mov	r1, r5
 8009f4a:	4630      	mov	r0, r6
 8009f4c:	f7ff ff94 	bl	8009e78 <__sfputs_r>
 8009f50:	3001      	adds	r0, #1
 8009f52:	f000 80aa 	beq.w	800a0aa <_vfiprintf_r+0x20e>
 8009f56:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009f58:	445a      	add	r2, fp
 8009f5a:	9209      	str	r2, [sp, #36]	; 0x24
 8009f5c:	f89a 3000 	ldrb.w	r3, [sl]
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	f000 80a2 	beq.w	800a0aa <_vfiprintf_r+0x20e>
 8009f66:	2300      	movs	r3, #0
 8009f68:	f04f 32ff 	mov.w	r2, #4294967295
 8009f6c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009f70:	f10a 0a01 	add.w	sl, sl, #1
 8009f74:	9304      	str	r3, [sp, #16]
 8009f76:	9307      	str	r3, [sp, #28]
 8009f78:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009f7c:	931a      	str	r3, [sp, #104]	; 0x68
 8009f7e:	4654      	mov	r4, sl
 8009f80:	2205      	movs	r2, #5
 8009f82:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f86:	4858      	ldr	r0, [pc, #352]	; (800a0e8 <_vfiprintf_r+0x24c>)
 8009f88:	f7fe f9b2 	bl	80082f0 <memchr>
 8009f8c:	9a04      	ldr	r2, [sp, #16]
 8009f8e:	b9d8      	cbnz	r0, 8009fc8 <_vfiprintf_r+0x12c>
 8009f90:	06d1      	lsls	r1, r2, #27
 8009f92:	bf44      	itt	mi
 8009f94:	2320      	movmi	r3, #32
 8009f96:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009f9a:	0713      	lsls	r3, r2, #28
 8009f9c:	bf44      	itt	mi
 8009f9e:	232b      	movmi	r3, #43	; 0x2b
 8009fa0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009fa4:	f89a 3000 	ldrb.w	r3, [sl]
 8009fa8:	2b2a      	cmp	r3, #42	; 0x2a
 8009faa:	d015      	beq.n	8009fd8 <_vfiprintf_r+0x13c>
 8009fac:	4654      	mov	r4, sl
 8009fae:	2000      	movs	r0, #0
 8009fb0:	f04f 0c0a 	mov.w	ip, #10
 8009fb4:	9a07      	ldr	r2, [sp, #28]
 8009fb6:	4621      	mov	r1, r4
 8009fb8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009fbc:	3b30      	subs	r3, #48	; 0x30
 8009fbe:	2b09      	cmp	r3, #9
 8009fc0:	d94e      	bls.n	800a060 <_vfiprintf_r+0x1c4>
 8009fc2:	b1b0      	cbz	r0, 8009ff2 <_vfiprintf_r+0x156>
 8009fc4:	9207      	str	r2, [sp, #28]
 8009fc6:	e014      	b.n	8009ff2 <_vfiprintf_r+0x156>
 8009fc8:	eba0 0308 	sub.w	r3, r0, r8
 8009fcc:	fa09 f303 	lsl.w	r3, r9, r3
 8009fd0:	4313      	orrs	r3, r2
 8009fd2:	46a2      	mov	sl, r4
 8009fd4:	9304      	str	r3, [sp, #16]
 8009fd6:	e7d2      	b.n	8009f7e <_vfiprintf_r+0xe2>
 8009fd8:	9b03      	ldr	r3, [sp, #12]
 8009fda:	1d19      	adds	r1, r3, #4
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	9103      	str	r1, [sp, #12]
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	bfbb      	ittet	lt
 8009fe4:	425b      	neglt	r3, r3
 8009fe6:	f042 0202 	orrlt.w	r2, r2, #2
 8009fea:	9307      	strge	r3, [sp, #28]
 8009fec:	9307      	strlt	r3, [sp, #28]
 8009fee:	bfb8      	it	lt
 8009ff0:	9204      	strlt	r2, [sp, #16]
 8009ff2:	7823      	ldrb	r3, [r4, #0]
 8009ff4:	2b2e      	cmp	r3, #46	; 0x2e
 8009ff6:	d10c      	bne.n	800a012 <_vfiprintf_r+0x176>
 8009ff8:	7863      	ldrb	r3, [r4, #1]
 8009ffa:	2b2a      	cmp	r3, #42	; 0x2a
 8009ffc:	d135      	bne.n	800a06a <_vfiprintf_r+0x1ce>
 8009ffe:	9b03      	ldr	r3, [sp, #12]
 800a000:	3402      	adds	r4, #2
 800a002:	1d1a      	adds	r2, r3, #4
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	9203      	str	r2, [sp, #12]
 800a008:	2b00      	cmp	r3, #0
 800a00a:	bfb8      	it	lt
 800a00c:	f04f 33ff 	movlt.w	r3, #4294967295
 800a010:	9305      	str	r3, [sp, #20]
 800a012:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800a0ec <_vfiprintf_r+0x250>
 800a016:	2203      	movs	r2, #3
 800a018:	4650      	mov	r0, sl
 800a01a:	7821      	ldrb	r1, [r4, #0]
 800a01c:	f7fe f968 	bl	80082f0 <memchr>
 800a020:	b140      	cbz	r0, 800a034 <_vfiprintf_r+0x198>
 800a022:	2340      	movs	r3, #64	; 0x40
 800a024:	eba0 000a 	sub.w	r0, r0, sl
 800a028:	fa03 f000 	lsl.w	r0, r3, r0
 800a02c:	9b04      	ldr	r3, [sp, #16]
 800a02e:	3401      	adds	r4, #1
 800a030:	4303      	orrs	r3, r0
 800a032:	9304      	str	r3, [sp, #16]
 800a034:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a038:	2206      	movs	r2, #6
 800a03a:	482d      	ldr	r0, [pc, #180]	; (800a0f0 <_vfiprintf_r+0x254>)
 800a03c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a040:	f7fe f956 	bl	80082f0 <memchr>
 800a044:	2800      	cmp	r0, #0
 800a046:	d03f      	beq.n	800a0c8 <_vfiprintf_r+0x22c>
 800a048:	4b2a      	ldr	r3, [pc, #168]	; (800a0f4 <_vfiprintf_r+0x258>)
 800a04a:	bb1b      	cbnz	r3, 800a094 <_vfiprintf_r+0x1f8>
 800a04c:	9b03      	ldr	r3, [sp, #12]
 800a04e:	3307      	adds	r3, #7
 800a050:	f023 0307 	bic.w	r3, r3, #7
 800a054:	3308      	adds	r3, #8
 800a056:	9303      	str	r3, [sp, #12]
 800a058:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a05a:	443b      	add	r3, r7
 800a05c:	9309      	str	r3, [sp, #36]	; 0x24
 800a05e:	e767      	b.n	8009f30 <_vfiprintf_r+0x94>
 800a060:	460c      	mov	r4, r1
 800a062:	2001      	movs	r0, #1
 800a064:	fb0c 3202 	mla	r2, ip, r2, r3
 800a068:	e7a5      	b.n	8009fb6 <_vfiprintf_r+0x11a>
 800a06a:	2300      	movs	r3, #0
 800a06c:	f04f 0c0a 	mov.w	ip, #10
 800a070:	4619      	mov	r1, r3
 800a072:	3401      	adds	r4, #1
 800a074:	9305      	str	r3, [sp, #20]
 800a076:	4620      	mov	r0, r4
 800a078:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a07c:	3a30      	subs	r2, #48	; 0x30
 800a07e:	2a09      	cmp	r2, #9
 800a080:	d903      	bls.n	800a08a <_vfiprintf_r+0x1ee>
 800a082:	2b00      	cmp	r3, #0
 800a084:	d0c5      	beq.n	800a012 <_vfiprintf_r+0x176>
 800a086:	9105      	str	r1, [sp, #20]
 800a088:	e7c3      	b.n	800a012 <_vfiprintf_r+0x176>
 800a08a:	4604      	mov	r4, r0
 800a08c:	2301      	movs	r3, #1
 800a08e:	fb0c 2101 	mla	r1, ip, r1, r2
 800a092:	e7f0      	b.n	800a076 <_vfiprintf_r+0x1da>
 800a094:	ab03      	add	r3, sp, #12
 800a096:	9300      	str	r3, [sp, #0]
 800a098:	462a      	mov	r2, r5
 800a09a:	4630      	mov	r0, r6
 800a09c:	4b16      	ldr	r3, [pc, #88]	; (800a0f8 <_vfiprintf_r+0x25c>)
 800a09e:	a904      	add	r1, sp, #16
 800a0a0:	f7fb fa00 	bl	80054a4 <_printf_float>
 800a0a4:	4607      	mov	r7, r0
 800a0a6:	1c78      	adds	r0, r7, #1
 800a0a8:	d1d6      	bne.n	800a058 <_vfiprintf_r+0x1bc>
 800a0aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a0ac:	07d9      	lsls	r1, r3, #31
 800a0ae:	d405      	bmi.n	800a0bc <_vfiprintf_r+0x220>
 800a0b0:	89ab      	ldrh	r3, [r5, #12]
 800a0b2:	059a      	lsls	r2, r3, #22
 800a0b4:	d402      	bmi.n	800a0bc <_vfiprintf_r+0x220>
 800a0b6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a0b8:	f7ff fe73 	bl	8009da2 <__retarget_lock_release_recursive>
 800a0bc:	89ab      	ldrh	r3, [r5, #12]
 800a0be:	065b      	lsls	r3, r3, #25
 800a0c0:	f53f af12 	bmi.w	8009ee8 <_vfiprintf_r+0x4c>
 800a0c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a0c6:	e711      	b.n	8009eec <_vfiprintf_r+0x50>
 800a0c8:	ab03      	add	r3, sp, #12
 800a0ca:	9300      	str	r3, [sp, #0]
 800a0cc:	462a      	mov	r2, r5
 800a0ce:	4630      	mov	r0, r6
 800a0d0:	4b09      	ldr	r3, [pc, #36]	; (800a0f8 <_vfiprintf_r+0x25c>)
 800a0d2:	a904      	add	r1, sp, #16
 800a0d4:	f7fb fc82 	bl	80059dc <_printf_i>
 800a0d8:	e7e4      	b.n	800a0a4 <_vfiprintf_r+0x208>
 800a0da:	bf00      	nop
 800a0dc:	0800a944 	.word	0x0800a944
 800a0e0:	0800a964 	.word	0x0800a964
 800a0e4:	0800a924 	.word	0x0800a924
 800a0e8:	0800a8bc 	.word	0x0800a8bc
 800a0ec:	0800a8c2 	.word	0x0800a8c2
 800a0f0:	0800a8c6 	.word	0x0800a8c6
 800a0f4:	080054a5 	.word	0x080054a5
 800a0f8:	08009e79 	.word	0x08009e79

0800a0fc <__swbuf_r>:
 800a0fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0fe:	460e      	mov	r6, r1
 800a100:	4614      	mov	r4, r2
 800a102:	4605      	mov	r5, r0
 800a104:	b118      	cbz	r0, 800a10e <__swbuf_r+0x12>
 800a106:	6983      	ldr	r3, [r0, #24]
 800a108:	b90b      	cbnz	r3, 800a10e <__swbuf_r+0x12>
 800a10a:	f7ff fd99 	bl	8009c40 <__sinit>
 800a10e:	4b21      	ldr	r3, [pc, #132]	; (800a194 <__swbuf_r+0x98>)
 800a110:	429c      	cmp	r4, r3
 800a112:	d12b      	bne.n	800a16c <__swbuf_r+0x70>
 800a114:	686c      	ldr	r4, [r5, #4]
 800a116:	69a3      	ldr	r3, [r4, #24]
 800a118:	60a3      	str	r3, [r4, #8]
 800a11a:	89a3      	ldrh	r3, [r4, #12]
 800a11c:	071a      	lsls	r2, r3, #28
 800a11e:	d52f      	bpl.n	800a180 <__swbuf_r+0x84>
 800a120:	6923      	ldr	r3, [r4, #16]
 800a122:	b36b      	cbz	r3, 800a180 <__swbuf_r+0x84>
 800a124:	6923      	ldr	r3, [r4, #16]
 800a126:	6820      	ldr	r0, [r4, #0]
 800a128:	b2f6      	uxtb	r6, r6
 800a12a:	1ac0      	subs	r0, r0, r3
 800a12c:	6963      	ldr	r3, [r4, #20]
 800a12e:	4637      	mov	r7, r6
 800a130:	4283      	cmp	r3, r0
 800a132:	dc04      	bgt.n	800a13e <__swbuf_r+0x42>
 800a134:	4621      	mov	r1, r4
 800a136:	4628      	mov	r0, r5
 800a138:	f7ff fcee 	bl	8009b18 <_fflush_r>
 800a13c:	bb30      	cbnz	r0, 800a18c <__swbuf_r+0x90>
 800a13e:	68a3      	ldr	r3, [r4, #8]
 800a140:	3001      	adds	r0, #1
 800a142:	3b01      	subs	r3, #1
 800a144:	60a3      	str	r3, [r4, #8]
 800a146:	6823      	ldr	r3, [r4, #0]
 800a148:	1c5a      	adds	r2, r3, #1
 800a14a:	6022      	str	r2, [r4, #0]
 800a14c:	701e      	strb	r6, [r3, #0]
 800a14e:	6963      	ldr	r3, [r4, #20]
 800a150:	4283      	cmp	r3, r0
 800a152:	d004      	beq.n	800a15e <__swbuf_r+0x62>
 800a154:	89a3      	ldrh	r3, [r4, #12]
 800a156:	07db      	lsls	r3, r3, #31
 800a158:	d506      	bpl.n	800a168 <__swbuf_r+0x6c>
 800a15a:	2e0a      	cmp	r6, #10
 800a15c:	d104      	bne.n	800a168 <__swbuf_r+0x6c>
 800a15e:	4621      	mov	r1, r4
 800a160:	4628      	mov	r0, r5
 800a162:	f7ff fcd9 	bl	8009b18 <_fflush_r>
 800a166:	b988      	cbnz	r0, 800a18c <__swbuf_r+0x90>
 800a168:	4638      	mov	r0, r7
 800a16a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a16c:	4b0a      	ldr	r3, [pc, #40]	; (800a198 <__swbuf_r+0x9c>)
 800a16e:	429c      	cmp	r4, r3
 800a170:	d101      	bne.n	800a176 <__swbuf_r+0x7a>
 800a172:	68ac      	ldr	r4, [r5, #8]
 800a174:	e7cf      	b.n	800a116 <__swbuf_r+0x1a>
 800a176:	4b09      	ldr	r3, [pc, #36]	; (800a19c <__swbuf_r+0xa0>)
 800a178:	429c      	cmp	r4, r3
 800a17a:	bf08      	it	eq
 800a17c:	68ec      	ldreq	r4, [r5, #12]
 800a17e:	e7ca      	b.n	800a116 <__swbuf_r+0x1a>
 800a180:	4621      	mov	r1, r4
 800a182:	4628      	mov	r0, r5
 800a184:	f000 f80c 	bl	800a1a0 <__swsetup_r>
 800a188:	2800      	cmp	r0, #0
 800a18a:	d0cb      	beq.n	800a124 <__swbuf_r+0x28>
 800a18c:	f04f 37ff 	mov.w	r7, #4294967295
 800a190:	e7ea      	b.n	800a168 <__swbuf_r+0x6c>
 800a192:	bf00      	nop
 800a194:	0800a944 	.word	0x0800a944
 800a198:	0800a964 	.word	0x0800a964
 800a19c:	0800a924 	.word	0x0800a924

0800a1a0 <__swsetup_r>:
 800a1a0:	4b32      	ldr	r3, [pc, #200]	; (800a26c <__swsetup_r+0xcc>)
 800a1a2:	b570      	push	{r4, r5, r6, lr}
 800a1a4:	681d      	ldr	r5, [r3, #0]
 800a1a6:	4606      	mov	r6, r0
 800a1a8:	460c      	mov	r4, r1
 800a1aa:	b125      	cbz	r5, 800a1b6 <__swsetup_r+0x16>
 800a1ac:	69ab      	ldr	r3, [r5, #24]
 800a1ae:	b913      	cbnz	r3, 800a1b6 <__swsetup_r+0x16>
 800a1b0:	4628      	mov	r0, r5
 800a1b2:	f7ff fd45 	bl	8009c40 <__sinit>
 800a1b6:	4b2e      	ldr	r3, [pc, #184]	; (800a270 <__swsetup_r+0xd0>)
 800a1b8:	429c      	cmp	r4, r3
 800a1ba:	d10f      	bne.n	800a1dc <__swsetup_r+0x3c>
 800a1bc:	686c      	ldr	r4, [r5, #4]
 800a1be:	89a3      	ldrh	r3, [r4, #12]
 800a1c0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a1c4:	0719      	lsls	r1, r3, #28
 800a1c6:	d42c      	bmi.n	800a222 <__swsetup_r+0x82>
 800a1c8:	06dd      	lsls	r5, r3, #27
 800a1ca:	d411      	bmi.n	800a1f0 <__swsetup_r+0x50>
 800a1cc:	2309      	movs	r3, #9
 800a1ce:	6033      	str	r3, [r6, #0]
 800a1d0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a1d4:	f04f 30ff 	mov.w	r0, #4294967295
 800a1d8:	81a3      	strh	r3, [r4, #12]
 800a1da:	e03e      	b.n	800a25a <__swsetup_r+0xba>
 800a1dc:	4b25      	ldr	r3, [pc, #148]	; (800a274 <__swsetup_r+0xd4>)
 800a1de:	429c      	cmp	r4, r3
 800a1e0:	d101      	bne.n	800a1e6 <__swsetup_r+0x46>
 800a1e2:	68ac      	ldr	r4, [r5, #8]
 800a1e4:	e7eb      	b.n	800a1be <__swsetup_r+0x1e>
 800a1e6:	4b24      	ldr	r3, [pc, #144]	; (800a278 <__swsetup_r+0xd8>)
 800a1e8:	429c      	cmp	r4, r3
 800a1ea:	bf08      	it	eq
 800a1ec:	68ec      	ldreq	r4, [r5, #12]
 800a1ee:	e7e6      	b.n	800a1be <__swsetup_r+0x1e>
 800a1f0:	0758      	lsls	r0, r3, #29
 800a1f2:	d512      	bpl.n	800a21a <__swsetup_r+0x7a>
 800a1f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a1f6:	b141      	cbz	r1, 800a20a <__swsetup_r+0x6a>
 800a1f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a1fc:	4299      	cmp	r1, r3
 800a1fe:	d002      	beq.n	800a206 <__swsetup_r+0x66>
 800a200:	4630      	mov	r0, r6
 800a202:	f7fe fd5d 	bl	8008cc0 <_free_r>
 800a206:	2300      	movs	r3, #0
 800a208:	6363      	str	r3, [r4, #52]	; 0x34
 800a20a:	89a3      	ldrh	r3, [r4, #12]
 800a20c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a210:	81a3      	strh	r3, [r4, #12]
 800a212:	2300      	movs	r3, #0
 800a214:	6063      	str	r3, [r4, #4]
 800a216:	6923      	ldr	r3, [r4, #16]
 800a218:	6023      	str	r3, [r4, #0]
 800a21a:	89a3      	ldrh	r3, [r4, #12]
 800a21c:	f043 0308 	orr.w	r3, r3, #8
 800a220:	81a3      	strh	r3, [r4, #12]
 800a222:	6923      	ldr	r3, [r4, #16]
 800a224:	b94b      	cbnz	r3, 800a23a <__swsetup_r+0x9a>
 800a226:	89a3      	ldrh	r3, [r4, #12]
 800a228:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a22c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a230:	d003      	beq.n	800a23a <__swsetup_r+0x9a>
 800a232:	4621      	mov	r1, r4
 800a234:	4630      	mov	r0, r6
 800a236:	f000 f84d 	bl	800a2d4 <__smakebuf_r>
 800a23a:	89a0      	ldrh	r0, [r4, #12]
 800a23c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a240:	f010 0301 	ands.w	r3, r0, #1
 800a244:	d00a      	beq.n	800a25c <__swsetup_r+0xbc>
 800a246:	2300      	movs	r3, #0
 800a248:	60a3      	str	r3, [r4, #8]
 800a24a:	6963      	ldr	r3, [r4, #20]
 800a24c:	425b      	negs	r3, r3
 800a24e:	61a3      	str	r3, [r4, #24]
 800a250:	6923      	ldr	r3, [r4, #16]
 800a252:	b943      	cbnz	r3, 800a266 <__swsetup_r+0xc6>
 800a254:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a258:	d1ba      	bne.n	800a1d0 <__swsetup_r+0x30>
 800a25a:	bd70      	pop	{r4, r5, r6, pc}
 800a25c:	0781      	lsls	r1, r0, #30
 800a25e:	bf58      	it	pl
 800a260:	6963      	ldrpl	r3, [r4, #20]
 800a262:	60a3      	str	r3, [r4, #8]
 800a264:	e7f4      	b.n	800a250 <__swsetup_r+0xb0>
 800a266:	2000      	movs	r0, #0
 800a268:	e7f7      	b.n	800a25a <__swsetup_r+0xba>
 800a26a:	bf00      	nop
 800a26c:	20000040 	.word	0x20000040
 800a270:	0800a944 	.word	0x0800a944
 800a274:	0800a964 	.word	0x0800a964
 800a278:	0800a924 	.word	0x0800a924

0800a27c <abort>:
 800a27c:	2006      	movs	r0, #6
 800a27e:	b508      	push	{r3, lr}
 800a280:	f000 f898 	bl	800a3b4 <raise>
 800a284:	2001      	movs	r0, #1
 800a286:	f7f7 fbbc 	bl	8001a02 <_exit>

0800a28a <__swhatbuf_r>:
 800a28a:	b570      	push	{r4, r5, r6, lr}
 800a28c:	460e      	mov	r6, r1
 800a28e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a292:	4614      	mov	r4, r2
 800a294:	2900      	cmp	r1, #0
 800a296:	461d      	mov	r5, r3
 800a298:	b096      	sub	sp, #88	; 0x58
 800a29a:	da08      	bge.n	800a2ae <__swhatbuf_r+0x24>
 800a29c:	2200      	movs	r2, #0
 800a29e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a2a2:	602a      	str	r2, [r5, #0]
 800a2a4:	061a      	lsls	r2, r3, #24
 800a2a6:	d410      	bmi.n	800a2ca <__swhatbuf_r+0x40>
 800a2a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a2ac:	e00e      	b.n	800a2cc <__swhatbuf_r+0x42>
 800a2ae:	466a      	mov	r2, sp
 800a2b0:	f000 f89c 	bl	800a3ec <_fstat_r>
 800a2b4:	2800      	cmp	r0, #0
 800a2b6:	dbf1      	blt.n	800a29c <__swhatbuf_r+0x12>
 800a2b8:	9a01      	ldr	r2, [sp, #4]
 800a2ba:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a2be:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a2c2:	425a      	negs	r2, r3
 800a2c4:	415a      	adcs	r2, r3
 800a2c6:	602a      	str	r2, [r5, #0]
 800a2c8:	e7ee      	b.n	800a2a8 <__swhatbuf_r+0x1e>
 800a2ca:	2340      	movs	r3, #64	; 0x40
 800a2cc:	2000      	movs	r0, #0
 800a2ce:	6023      	str	r3, [r4, #0]
 800a2d0:	b016      	add	sp, #88	; 0x58
 800a2d2:	bd70      	pop	{r4, r5, r6, pc}

0800a2d4 <__smakebuf_r>:
 800a2d4:	898b      	ldrh	r3, [r1, #12]
 800a2d6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a2d8:	079d      	lsls	r5, r3, #30
 800a2da:	4606      	mov	r6, r0
 800a2dc:	460c      	mov	r4, r1
 800a2de:	d507      	bpl.n	800a2f0 <__smakebuf_r+0x1c>
 800a2e0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a2e4:	6023      	str	r3, [r4, #0]
 800a2e6:	6123      	str	r3, [r4, #16]
 800a2e8:	2301      	movs	r3, #1
 800a2ea:	6163      	str	r3, [r4, #20]
 800a2ec:	b002      	add	sp, #8
 800a2ee:	bd70      	pop	{r4, r5, r6, pc}
 800a2f0:	466a      	mov	r2, sp
 800a2f2:	ab01      	add	r3, sp, #4
 800a2f4:	f7ff ffc9 	bl	800a28a <__swhatbuf_r>
 800a2f8:	9900      	ldr	r1, [sp, #0]
 800a2fa:	4605      	mov	r5, r0
 800a2fc:	4630      	mov	r0, r6
 800a2fe:	f7fe fd47 	bl	8008d90 <_malloc_r>
 800a302:	b948      	cbnz	r0, 800a318 <__smakebuf_r+0x44>
 800a304:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a308:	059a      	lsls	r2, r3, #22
 800a30a:	d4ef      	bmi.n	800a2ec <__smakebuf_r+0x18>
 800a30c:	f023 0303 	bic.w	r3, r3, #3
 800a310:	f043 0302 	orr.w	r3, r3, #2
 800a314:	81a3      	strh	r3, [r4, #12]
 800a316:	e7e3      	b.n	800a2e0 <__smakebuf_r+0xc>
 800a318:	4b0d      	ldr	r3, [pc, #52]	; (800a350 <__smakebuf_r+0x7c>)
 800a31a:	62b3      	str	r3, [r6, #40]	; 0x28
 800a31c:	89a3      	ldrh	r3, [r4, #12]
 800a31e:	6020      	str	r0, [r4, #0]
 800a320:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a324:	81a3      	strh	r3, [r4, #12]
 800a326:	9b00      	ldr	r3, [sp, #0]
 800a328:	6120      	str	r0, [r4, #16]
 800a32a:	6163      	str	r3, [r4, #20]
 800a32c:	9b01      	ldr	r3, [sp, #4]
 800a32e:	b15b      	cbz	r3, 800a348 <__smakebuf_r+0x74>
 800a330:	4630      	mov	r0, r6
 800a332:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a336:	f000 f86b 	bl	800a410 <_isatty_r>
 800a33a:	b128      	cbz	r0, 800a348 <__smakebuf_r+0x74>
 800a33c:	89a3      	ldrh	r3, [r4, #12]
 800a33e:	f023 0303 	bic.w	r3, r3, #3
 800a342:	f043 0301 	orr.w	r3, r3, #1
 800a346:	81a3      	strh	r3, [r4, #12]
 800a348:	89a0      	ldrh	r0, [r4, #12]
 800a34a:	4305      	orrs	r5, r0
 800a34c:	81a5      	strh	r5, [r4, #12]
 800a34e:	e7cd      	b.n	800a2ec <__smakebuf_r+0x18>
 800a350:	08009bd9 	.word	0x08009bd9

0800a354 <_malloc_usable_size_r>:
 800a354:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a358:	1f18      	subs	r0, r3, #4
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	bfbc      	itt	lt
 800a35e:	580b      	ldrlt	r3, [r1, r0]
 800a360:	18c0      	addlt	r0, r0, r3
 800a362:	4770      	bx	lr

0800a364 <_raise_r>:
 800a364:	291f      	cmp	r1, #31
 800a366:	b538      	push	{r3, r4, r5, lr}
 800a368:	4604      	mov	r4, r0
 800a36a:	460d      	mov	r5, r1
 800a36c:	d904      	bls.n	800a378 <_raise_r+0x14>
 800a36e:	2316      	movs	r3, #22
 800a370:	6003      	str	r3, [r0, #0]
 800a372:	f04f 30ff 	mov.w	r0, #4294967295
 800a376:	bd38      	pop	{r3, r4, r5, pc}
 800a378:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a37a:	b112      	cbz	r2, 800a382 <_raise_r+0x1e>
 800a37c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a380:	b94b      	cbnz	r3, 800a396 <_raise_r+0x32>
 800a382:	4620      	mov	r0, r4
 800a384:	f000 f830 	bl	800a3e8 <_getpid_r>
 800a388:	462a      	mov	r2, r5
 800a38a:	4601      	mov	r1, r0
 800a38c:	4620      	mov	r0, r4
 800a38e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a392:	f000 b817 	b.w	800a3c4 <_kill_r>
 800a396:	2b01      	cmp	r3, #1
 800a398:	d00a      	beq.n	800a3b0 <_raise_r+0x4c>
 800a39a:	1c59      	adds	r1, r3, #1
 800a39c:	d103      	bne.n	800a3a6 <_raise_r+0x42>
 800a39e:	2316      	movs	r3, #22
 800a3a0:	6003      	str	r3, [r0, #0]
 800a3a2:	2001      	movs	r0, #1
 800a3a4:	e7e7      	b.n	800a376 <_raise_r+0x12>
 800a3a6:	2400      	movs	r4, #0
 800a3a8:	4628      	mov	r0, r5
 800a3aa:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a3ae:	4798      	blx	r3
 800a3b0:	2000      	movs	r0, #0
 800a3b2:	e7e0      	b.n	800a376 <_raise_r+0x12>

0800a3b4 <raise>:
 800a3b4:	4b02      	ldr	r3, [pc, #8]	; (800a3c0 <raise+0xc>)
 800a3b6:	4601      	mov	r1, r0
 800a3b8:	6818      	ldr	r0, [r3, #0]
 800a3ba:	f7ff bfd3 	b.w	800a364 <_raise_r>
 800a3be:	bf00      	nop
 800a3c0:	20000040 	.word	0x20000040

0800a3c4 <_kill_r>:
 800a3c4:	b538      	push	{r3, r4, r5, lr}
 800a3c6:	2300      	movs	r3, #0
 800a3c8:	4d06      	ldr	r5, [pc, #24]	; (800a3e4 <_kill_r+0x20>)
 800a3ca:	4604      	mov	r4, r0
 800a3cc:	4608      	mov	r0, r1
 800a3ce:	4611      	mov	r1, r2
 800a3d0:	602b      	str	r3, [r5, #0]
 800a3d2:	f7f7 fb06 	bl	80019e2 <_kill>
 800a3d6:	1c43      	adds	r3, r0, #1
 800a3d8:	d102      	bne.n	800a3e0 <_kill_r+0x1c>
 800a3da:	682b      	ldr	r3, [r5, #0]
 800a3dc:	b103      	cbz	r3, 800a3e0 <_kill_r+0x1c>
 800a3de:	6023      	str	r3, [r4, #0]
 800a3e0:	bd38      	pop	{r3, r4, r5, pc}
 800a3e2:	bf00      	nop
 800a3e4:	20000498 	.word	0x20000498

0800a3e8 <_getpid_r>:
 800a3e8:	f7f7 baf4 	b.w	80019d4 <_getpid>

0800a3ec <_fstat_r>:
 800a3ec:	b538      	push	{r3, r4, r5, lr}
 800a3ee:	2300      	movs	r3, #0
 800a3f0:	4d06      	ldr	r5, [pc, #24]	; (800a40c <_fstat_r+0x20>)
 800a3f2:	4604      	mov	r4, r0
 800a3f4:	4608      	mov	r0, r1
 800a3f6:	4611      	mov	r1, r2
 800a3f8:	602b      	str	r3, [r5, #0]
 800a3fa:	f7f7 fb50 	bl	8001a9e <_fstat>
 800a3fe:	1c43      	adds	r3, r0, #1
 800a400:	d102      	bne.n	800a408 <_fstat_r+0x1c>
 800a402:	682b      	ldr	r3, [r5, #0]
 800a404:	b103      	cbz	r3, 800a408 <_fstat_r+0x1c>
 800a406:	6023      	str	r3, [r4, #0]
 800a408:	bd38      	pop	{r3, r4, r5, pc}
 800a40a:	bf00      	nop
 800a40c:	20000498 	.word	0x20000498

0800a410 <_isatty_r>:
 800a410:	b538      	push	{r3, r4, r5, lr}
 800a412:	2300      	movs	r3, #0
 800a414:	4d05      	ldr	r5, [pc, #20]	; (800a42c <_isatty_r+0x1c>)
 800a416:	4604      	mov	r4, r0
 800a418:	4608      	mov	r0, r1
 800a41a:	602b      	str	r3, [r5, #0]
 800a41c:	f7f7 fb4e 	bl	8001abc <_isatty>
 800a420:	1c43      	adds	r3, r0, #1
 800a422:	d102      	bne.n	800a42a <_isatty_r+0x1a>
 800a424:	682b      	ldr	r3, [r5, #0]
 800a426:	b103      	cbz	r3, 800a42a <_isatty_r+0x1a>
 800a428:	6023      	str	r3, [r4, #0]
 800a42a:	bd38      	pop	{r3, r4, r5, pc}
 800a42c:	20000498 	.word	0x20000498

0800a430 <_init>:
 800a430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a432:	bf00      	nop
 800a434:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a436:	bc08      	pop	{r3}
 800a438:	469e      	mov	lr, r3
 800a43a:	4770      	bx	lr

0800a43c <_fini>:
 800a43c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a43e:	bf00      	nop
 800a440:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a442:	bc08      	pop	{r3}
 800a444:	469e      	mov	lr, r3
 800a446:	4770      	bx	lr
